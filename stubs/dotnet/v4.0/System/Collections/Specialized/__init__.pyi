from typing import Tuple, Set, Iterable, List


class BitVector32(ValueType):
    @overload
    def __init__(self, data: int): ...
    @overload
    def __init__(self, value: BitVector32): ...
    @overload
    def CreateMask() -> int: ...
    @overload
    def CreateMask(previous: int) -> int: ...
    @overload
    def CreateSection(maxValue: Int16) -> Section: ...
    @overload
    def CreateSection(maxValue: Int16, previous: Section) -> Section: ...
    def Equals(self, o: Object) -> bool: ...
    @property
    def Data(self) -> int: ...
    @property
    def Item(self, bit: int) -> bool: ...
    @property
    def Item(self, section: Section) -> int: ...
    def GetHashCode(self) -> int: ...
    @Item.setter
    def Item(self, bit: int, value: bool) -> None: ...
    @Item.setter
    def Item(self, section: Section, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(value: BitVector32) -> str: ...


class CollectionsUtil(Object):
    def __init__(self): ...
    @overload
    def CreateCaseInsensitiveHashtable() -> Hashtable: ...
    @overload
    def CreateCaseInsensitiveHashtable(capacity: int) -> Hashtable: ...
    @overload
    def CreateCaseInsensitiveHashtable(d: IDictionary) -> Hashtable: ...
    def CreateCaseInsensitiveSortedList() -> SortedList: ...


class HybridDictionary(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialSize: int): ...
    @overload
    def __init__(self, caseInsensitive: bool): ...
    @overload
    def __init__(self, initialSize: int, caseInsensitive: bool): ...
    def Add(self, key: Object, value: Object) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, key: Object) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, key: Object) -> Object: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def SyncRoot(self) -> Object: ...
    @property
    def Values(self) -> ICollection: ...
    def GetEnumerator(self) -> IDictionaryEnumerator: ...
    def Remove(self, key: Object) -> None: ...
    @Item.setter
    def Item(self, key: Object, value: Object) -> None: ...


class INotifyCollectionChanged:
    def add_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    def remove_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...


class IOrderedDictionary:
    @property
    def Item(self, index: int) -> Object: ...
    def GetEnumerator(self) -> IDictionaryEnumerator: ...
    def Insert(self, index: int, key: Object, value: Object) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...


class KeysCollection(Object):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> str: ...
    def Get(self, index: int) -> str: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ListDictionary(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, comparer: IComparer): ...
    def Add(self, key: Object, value: Object) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, key: Object) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, key: Object) -> Object: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def SyncRoot(self) -> Object: ...
    @property
    def Values(self) -> ICollection: ...
    def GetEnumerator(self) -> IDictionaryEnumerator: ...
    def Remove(self, key: Object) -> None: ...
    @Item.setter
    def Item(self, key: Object, value: Object) -> None: ...


class NameObjectCollectionBase(Object):
    @property
    def Count(self) -> int: ...
    @property
    def Keys(self) -> KeysCollection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def OnDeserialization(self, sender: Object) -> None: ...


class NameValueCollection(NameObjectCollectionBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, col: NameValueCollection): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, equalityComparer: IEqualityComparer): ...
    @overload
    def __init__(self, hashProvider: IHashCodeProvider, comparer: IComparer): ...
    @overload
    def __init__(self, capacity: int, equalityComparer: IEqualityComparer): ...
    @overload
    def __init__(self, capacity: int, col: NameValueCollection): ...
    @overload
    def __init__(self, capacity: int, hashProvider: IHashCodeProvider, comparer: IComparer): ...
    @overload
    def Add(self, c: NameValueCollection) -> None: ...
    @overload
    def Add(self, name: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, dest: Array, index: int) -> None: ...
    @property
    def AllKeys(self) -> Set(str): ...
    @property
    def Item(self, name: str) -> str: ...
    @property
    def Item(self, index: int) -> str: ...
    @overload
    def Get(self, name: str) -> str: ...
    @overload
    def Get(self, index: int) -> str: ...
    def GetKey(self, index: int) -> str: ...
    @overload
    def GetValues(self, index: int) -> Set(str): ...
    @overload
    def GetValues(self, name: str) -> Set(str): ...
    def HasKeys(self) -> bool: ...
    def Remove(self, name: str) -> None: ...
    @Item.setter
    def Item(self, name: str, value: str) -> None: ...
    def Set(self, name: str, value: str) -> None: ...


class NotifyCollectionChangedAction:
    Add = 0
    Remove = 1
    Replace = 2
    Move = 3
    Reset = 4


class NotifyCollectionChangedEventArgs(EventArgs):
    @overload
    def __init__(self, action: NotifyCollectionChangedAction): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItem: Object): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItems: IList): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItem: Object, index: int): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItems: IList, startingIndex: int): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, newItem: Object, oldItem: Object): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, newItems: IList, oldItems: IList): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, newItem: Object, oldItem: Object, index: int): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, newItems: IList, oldItems: IList, startingIndex: int): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItem: Object, index: int, oldIndex: int): ...
    @overload
    def __init__(self, action: NotifyCollectionChangedAction, changedItems: IList, index: int, oldIndex: int): ...
    @property
    def Action(self) -> NotifyCollectionChangedAction: ...
    @property
    def NewItems(self) -> IList: ...
    @property
    def NewStartingIndex(self) -> int: ...
    @property
    def OldItems(self) -> IList: ...
    @property
    def OldStartingIndex(self) -> int: ...


class NotifyCollectionChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: NotifyCollectionChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: NotifyCollectionChangedEventArgs) -> None: ...


class OrderedDictionary(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, comparer: IEqualityComparer): ...
    @overload
    def __init__(self, capacity: int, comparer: IEqualityComparer): ...
    def Add(self, key: Object, value: Object) -> None: ...
    def AsReadOnly(self) -> OrderedDictionary: ...
    def Clear(self) -> None: ...
    def Contains(self, key: Object) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, key: Object) -> Object: ...
    @property
    def Item(self, index: int) -> Object: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Values(self) -> ICollection: ...
    def GetEnumerator(self) -> IDictionaryEnumerator: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def Insert(self, index: int, key: Object, value: Object) -> None: ...
    def Remove(self, key: Object) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...
    @Item.setter
    def Item(self, key: Object, value: Object) -> None: ...


class Section(ValueType):
    @overload
    def Equals(self, o: Object) -> bool: ...
    @overload
    def Equals(self, obj: Section) -> bool: ...
    @property
    def Mask(self) -> Int16: ...
    @property
    def Offset(self) -> Int16: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(a: Section, b: Section) -> bool: ...
    def op_Inequality(a: Section, b: Section) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(value: Section) -> str: ...


class StringCollection(Object):
    def __init__(self): ...
    def Add(self, value: str) -> int: ...
    def AddRange(self, value: Set(str)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, value: str) -> bool: ...
    def CopyTo(self, array: Set(str), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, index: int) -> str: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> StringEnumerator: ...
    def IndexOf(self, value: str) -> int: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: str) -> None: ...


class StringDictionary(Object):
    def __init__(self): ...
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def ContainsKey(self, key: str) -> bool: ...
    def ContainsValue(self, value: str) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, key: str) -> str: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def SyncRoot(self) -> Object: ...
    @property
    def Values(self) -> ICollection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, key: str) -> None: ...
    @Item.setter
    def Item(self, key: str, value: str) -> None: ...


class StringEnumerator(Object):
    @property
    def Current(self) -> str: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...
