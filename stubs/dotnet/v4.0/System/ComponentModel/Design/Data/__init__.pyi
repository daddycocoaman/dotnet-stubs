from typing import Tuple, Set, Iterable, List


class DataSourceDescriptor(Object):
    @property
    def Image(self) -> Bitmap: ...
    @property
    def IsDesignable(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeName(self) -> str: ...


class DataSourceDescriptorCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, value: DataSourceDescriptor) -> int: ...
    def Contains(self, value: DataSourceDescriptor) -> bool: ...
    def CopyTo(self, array: Set(DataSourceDescriptor), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DataSourceDescriptor: ...
    def IndexOf(self, value: DataSourceDescriptor) -> int: ...
    def Insert(self, index: int, value: DataSourceDescriptor) -> None: ...
    def Remove(self, value: DataSourceDescriptor) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DataSourceDescriptor) -> None: ...


class DataSourceGroup(Object):
    @property
    def DataSources(self) -> DataSourceDescriptorCollection: ...
    @property
    def Image(self) -> Bitmap: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def Name(self) -> str: ...


class DataSourceGroupCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, value: DataSourceGroup) -> int: ...
    def Contains(self, value: DataSourceGroup) -> bool: ...
    def CopyTo(self, array: Set(DataSourceGroup), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DataSourceGroup: ...
    def IndexOf(self, value: DataSourceGroup) -> int: ...
    def Insert(self, index: int, value: DataSourceGroup) -> None: ...
    def Remove(self, value: DataSourceGroup) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DataSourceGroup) -> None: ...


class DataSourceProviderService(Object):
    def AddDataSourceInstance(self, host: IDesignerHost, dataSourceDescriptor: DataSourceDescriptor) -> Object: ...
    @property
    def SupportsAddNewDataSource(self) -> bool: ...
    @property
    def SupportsConfigureDataSource(self) -> bool: ...
    def GetDataSources(self) -> DataSourceGroupCollection: ...
    def InvokeAddNewDataSource(self, parentWindow: IWin32Window, startPosition: FormStartPosition) -> DataSourceGroup: ...
    def InvokeConfigureDataSource(self, parentWindow: IWin32Window, startPosition: FormStartPosition, dataSourceDescriptor: DataSourceDescriptor) -> bool: ...
    def NotifyDataSourceComponentAdded(self, dsc: Object) -> None: ...


class DesignerDataColumn(Object):
    @overload
    def __init__(self, name: str, dataType: DbType): ...
    @overload
    def __init__(self, name: str, dataType: DbType, defaultValue: Object): ...
    @overload
    def __init__(self, name: str, dataType: DbType, defaultValue: Object, identity: bool, nullable: bool, primaryKey: bool, precision: int, scale: int, length: int): ...
    @property
    def DataType(self) -> DbType: ...
    @property
    def DefaultValue(self) -> Object: ...
    @property
    def Identity(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Nullable(self) -> bool: ...
    @property
    def Precision(self) -> int: ...
    @property
    def PrimaryKey(self) -> bool: ...
    @property
    def Scale(self) -> int: ...


class DesignerDataConnection(Object):
    @overload
    def __init__(self, name: str, providerName: str, connectionString: str): ...
    @overload
    def __init__(self, name: str, providerName: str, connectionString: str, isConfigured: bool): ...
    @property
    def ConnectionString(self) -> str: ...
    @property
    def IsConfigured(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ProviderName(self) -> str: ...


class DesignerDataParameter(Object):
    def __init__(self, name: str, dataType: DbType, direction: ParameterDirection): ...
    @property
    def DataType(self) -> DbType: ...
    @property
    def Direction(self) -> ParameterDirection: ...
    @property
    def Name(self) -> str: ...


class DesignerDataRelationship(Object):
    def __init__(self, name: str, parentColumns: ICollection, childTable: DesignerDataTable, childColumns: ICollection): ...
    @property
    def ChildColumns(self) -> ICollection: ...
    @property
    def ChildTable(self) -> DesignerDataTable: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParentColumns(self) -> ICollection: ...


class DesignerDataSchemaClass(Object):
    pass


class DesignerDataStoredProcedure(Object):
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> str: ...
    @property
    def Parameters(self) -> ICollection: ...


class DesignerDataTable(DesignerDataTableBase):
    @property
    def Relationships(self) -> ICollection: ...


class DesignerDataTableBase(Object):
    @property
    def Columns(self) -> ICollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> str: ...


class DesignerDataView(DesignerDataTableBase):
    pass


class IDataEnvironment:
    def BuildConnection(self, owner: IWin32Window, initialConnection: DesignerDataConnection) -> DesignerDataConnection: ...
    def BuildQuery(self, owner: IWin32Window, connection: DesignerDataConnection, mode: QueryBuilderMode, initialQueryText: str) -> str: ...
    def ConfigureConnection(self, owner: IWin32Window, connection: DesignerDataConnection, name: str) -> DesignerDataConnection: ...
    @property
    def Connections(self) -> ICollection: ...
    def GetCodeExpression(self, connection: DesignerDataConnection) -> CodeExpression: ...
    def GetConnectionSchema(self, connection: DesignerDataConnection) -> IDesignerDataSchema: ...
    def GetDesignTimeConnection(self, connection: DesignerDataConnection) -> DbConnection: ...


class IDesignerDataSchema:
    def GetSchemaItems(self, schemaClass: DesignerDataSchemaClass) -> ICollection: ...
    def SupportsSchemaClass(self, schemaClass: DesignerDataSchemaClass) -> bool: ...


class QueryBuilderMode:
    Select = 0
    Update = 1
    Insert = 2
    Delete = 3
