from typing import Tuple, Set, Iterable, List


class DesignerSerializationManager(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IServiceProvider): ...
    def add_SessionCreated(self, value: EventHandler) -> None: ...
    def add_SessionDisposed(self, value: EventHandler) -> None: ...
    def CreateSession(self) -> IDisposable: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def Errors(self) -> IList: ...
    @property
    def PreserveNames(self) -> bool: ...
    @property
    def PropertyProvider(self) -> Object: ...
    @property
    def RecycleInstances(self) -> bool: ...
    @property
    def ValidateRecycledTypes(self) -> bool: ...
    def GetRuntimeType(self, typeName: str) -> Type: ...
    def GetSerializer(self, objectType: Type, serializerType: Type) -> Object: ...
    def remove_SessionCreated(self, value: EventHandler) -> None: ...
    def remove_SessionDisposed(self, value: EventHandler) -> None: ...
    @Container.setter
    def Container(self, value: IContainer) -> None: ...
    @PreserveNames.setter
    def PreserveNames(self, value: bool) -> None: ...
    @PropertyProvider.setter
    def PropertyProvider(self, value: Object) -> None: ...
    @RecycleInstances.setter
    def RecycleInstances(self, value: bool) -> None: ...
    @ValidateRecycledTypes.setter
    def ValidateRecycledTypes(self, value: bool) -> None: ...
