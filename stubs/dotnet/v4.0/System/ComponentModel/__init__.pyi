__all__ = ['Design']
from typing import Tuple, Set, Iterable, List


class AddingNewEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, newObject: Object): ...
    @property
    def NewObject(self) -> Object: ...
    @NewObject.setter
    def NewObject(self, value: Object) -> None: ...


class AddingNewEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: AddingNewEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: AddingNewEventArgs) -> None: ...


class AmbientValueAttribute(Attribute):
    @overload
    def __init__(self, value: Char): ...
    @overload
    def __init__(self, value: Byte): ...
    @overload
    def __init__(self, value: Int16): ...
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: Int64): ...
    @overload
    def __init__(self, value: Single): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, value: bool): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, value: Object): ...
    @overload
    def __init__(self, type: Type, value: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Value(self) -> Object: ...
    def GetHashCode(self) -> int: ...


class ArrayConverter(CollectionConverter):
    def __init__(self): ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class AsyncCompletedEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, error: Exception, cancelled: bool, userState: Object): ...
    @property
    def Cancelled(self) -> bool: ...
    @property
    def Error(self) -> Exception: ...
    @property
    def UserState(self) -> Object: ...


class AsyncCompletedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: AsyncCompletedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: AsyncCompletedEventArgs) -> None: ...


class AsyncOperation(Object):
    @property
    def SynchronizationContext(self) -> SynchronizationContext: ...
    @property
    def UserSuppliedState(self) -> Object: ...
    def OperationCompleted(self) -> None: ...
    def Post(self, d: SendOrPostCallback, arg: Object) -> None: ...
    def PostOperationCompleted(self, d: SendOrPostCallback, arg: Object) -> None: ...


class AsyncOperationManager(Object):
    def CreateOperation(userSuppliedState: Object) -> AsyncOperation: ...
    @property
    def SynchronizationContext() -> SynchronizationContext: ...
    @SynchronizationContext.setter
    def SynchronizationContext(value: SynchronizationContext) -> None: ...


class AttributeCollection(Object):
    def __init__(self, attributes: Set(Attribute)): ...
    @overload
    def Contains(self, attribute: Attribute) -> bool: ...
    @overload
    def Contains(self, attributes: Set(Attribute)) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    def FromExisting(existing: AttributeCollection, newAttributes: Set(Attribute)) -> AttributeCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> Attribute: ...
    @property
    def Item(self, attributeType: Type) -> Attribute: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def Matches(self, attribute: Attribute) -> bool: ...
    @overload
    def Matches(self, attributes: Set(Attribute)) -> bool: ...


class AttributeProviderAttribute(Attribute):
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, typeName: str, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def TypeName(self) -> str: ...


class BackgroundWorker(Component):
    def __init__(self): ...
    def add_DoWork(self, value: DoWorkEventHandler) -> None: ...
    def add_ProgressChanged(self, value: ProgressChangedEventHandler) -> None: ...
    def add_RunWorkerCompleted(self, value: RunWorkerCompletedEventHandler) -> None: ...
    def CancelAsync(self) -> None: ...
    @property
    def CancellationPending(self) -> bool: ...
    @property
    def IsBusy(self) -> bool: ...
    @property
    def WorkerReportsProgress(self) -> bool: ...
    @property
    def WorkerSupportsCancellation(self) -> bool: ...
    def remove_DoWork(self, value: DoWorkEventHandler) -> None: ...
    def remove_ProgressChanged(self, value: ProgressChangedEventHandler) -> None: ...
    def remove_RunWorkerCompleted(self, value: RunWorkerCompletedEventHandler) -> None: ...
    @overload
    def ReportProgress(self, percentProgress: int) -> None: ...
    @overload
    def ReportProgress(self, percentProgress: int, userState: Object) -> None: ...
    @overload
    def RunWorkerAsync(self) -> None: ...
    @overload
    def RunWorkerAsync(self, argument: Object) -> None: ...
    @WorkerReportsProgress.setter
    def WorkerReportsProgress(self, value: bool) -> None: ...
    @WorkerSupportsCancellation.setter
    def WorkerSupportsCancellation(self, value: bool) -> None: ...


class BaseNumberConverter(TypeConverter):
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, t: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class BindableAttribute(Attribute):
    @overload
    def __init__(self, bindable: bool): ...
    @overload
    def __init__(self, flags: BindableSupport): ...
    @overload
    def __init__(self, bindable: bool, direction: BindingDirection): ...
    @overload
    def __init__(self, flags: BindableSupport, direction: BindingDirection): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Bindable(self) -> bool: ...
    @property
    def Direction(self) -> BindingDirection: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class BindableSupport:
    No = 0
    Yes = 1
    Default = 2


class BindingDirection:
    OneWay = 0
    TwoWay = 1




class BooleanConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class BrowsableAttribute(Attribute):
    def __init__(self, browsable: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Browsable(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class ByteConverter(BaseNumberConverter):
    def __init__(self): ...


class CancelEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cancel: bool): ...
    @property
    def Cancel(self) -> bool: ...
    @Cancel.setter
    def Cancel(self, value: bool) -> None: ...


class CancelEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: CancelEventArgs) -> None: ...


class CategoryAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, category: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Action() -> CategoryAttribute: ...
    @property
    def Appearance() -> CategoryAttribute: ...
    @property
    def Asynchronous() -> CategoryAttribute: ...
    @property
    def Behavior() -> CategoryAttribute: ...
    @property
    def Category(self) -> str: ...
    @property
    def Data() -> CategoryAttribute: ...
    @property
    def Default() -> CategoryAttribute: ...
    @property
    def Design() -> CategoryAttribute: ...
    @property
    def DragDrop() -> CategoryAttribute: ...
    @property
    def Focus() -> CategoryAttribute: ...
    @property
    def Format() -> CategoryAttribute: ...
    @property
    def Key() -> CategoryAttribute: ...
    @property
    def Layout() -> CategoryAttribute: ...
    @property
    def Mouse() -> CategoryAttribute: ...
    @property
    def WindowStyle() -> CategoryAttribute: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class CharConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class CollectionChangeAction:
    Add = 1
    Remove = 2
    Refresh = 3


class CollectionChangeEventArgs(EventArgs):
    def __init__(self, action: CollectionChangeAction, element: Object): ...
    @property
    def Action(self) -> CollectionChangeAction: ...
    @property
    def Element(self) -> Object: ...


class CollectionChangeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: CollectionChangeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: CollectionChangeEventArgs) -> None: ...


class CollectionConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class ComplexBindingPropertiesAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dataSource: str): ...
    @overload
    def __init__(self, dataSource: str, dataMember: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DataMember(self) -> str: ...
    @property
    def DataSource(self) -> str: ...
    def GetHashCode(self) -> int: ...


class Component(MarshalByRefObject):
    def __init__(self): ...
    def add_Disposed(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def Site(self) -> ISite: ...
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    def ToString(self) -> str: ...


class ComponentCollection(ReadOnlyCollectionBase):
    def __init__(self, components: Set(IComponent)): ...
    def CopyTo(self, array: Set(IComponent), index: int) -> None: ...
    @property
    def Item(self, name: str) -> IComponent: ...
    @property
    def Item(self, index: int) -> IComponent: ...


class ComponentConverter(ReferenceConverter):
    def __init__(self, type: Type): ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class ComponentEditor(Object):
    @overload
    def EditComponent(self, component: Object) -> bool: ...
    @overload
    def EditComponent(self, context: ITypeDescriptorContext, component: Object) -> bool: ...


class ComponentResourceManager(ResourceManager):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, t: Type): ...
    @overload
    def ApplyResources(self, value: Object, objectName: str) -> None: ...
    @overload
    def ApplyResources(self, value: Object, objectName: str, culture: CultureInfo) -> None: ...


class Container(Object):
    def __init__(self): ...
    @overload
    def Add(self, component: IComponent) -> None: ...
    @overload
    def Add(self, component: IComponent, name: str) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Components(self) -> ComponentCollection: ...
    def Remove(self, component: IComponent) -> None: ...


class ContainerFilterService(Object):
    def FilterComponents(self, components: ComponentCollection) -> ComponentCollection: ...


class CultureInfoConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class CustomTypeDescriptor(Object):
    def GetAttributes(self) -> AttributeCollection: ...
    def GetClassName(self) -> str: ...
    def GetComponentName(self) -> str: ...
    def GetConverter(self) -> TypeConverter: ...
    def GetDefaultEvent(self) -> EventDescriptor: ...
    def GetDefaultProperty(self) -> PropertyDescriptor: ...
    def GetEditor(self, editorBaseType: Type) -> Object: ...
    @overload
    def GetEvents(self) -> EventDescriptorCollection: ...
    @overload
    def GetEvents(self, attributes: Set(Attribute)) -> EventDescriptorCollection: ...
    @overload
    def GetProperties(self) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    def GetPropertyOwner(self, pd: PropertyDescriptor) -> Object: ...


class DataErrorsChangedEventArgs(EventArgs):
    def __init__(self, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...


class DataObjectAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, isDataObject: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsDataObject(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class DataObjectFieldAttribute(Attribute):
    @overload
    def __init__(self, primaryKey: bool): ...
    @overload
    def __init__(self, primaryKey: bool, isIdentity: bool): ...
    @overload
    def __init__(self, primaryKey: bool, isIdentity: bool, isNullable: bool): ...
    @overload
    def __init__(self, primaryKey: bool, isIdentity: bool, isNullable: bool, length: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def PrimaryKey(self) -> bool: ...
    def GetHashCode(self) -> int: ...


class DataObjectMethodAttribute(Attribute):
    @overload
    def __init__(self, methodType: DataObjectMethodType): ...
    @overload
    def __init__(self, methodType: DataObjectMethodType, isDefault: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def MethodType(self) -> DataObjectMethodType: ...
    def GetHashCode(self) -> int: ...
    def Match(self, obj: Object) -> bool: ...


class DataObjectMethodType:
    Fill = 0
    Select = 1
    Update = 2
    Insert = 3
    Delete = 4


class DateTimeConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class DateTimeOffsetConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class DecimalConverter(BaseNumberConverter):
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class DefaultBindingPropertyAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...


class DefaultEventAttribute(Attribute):
    def __init__(self, name: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...


class DefaultPropertyAttribute(Attribute):
    def __init__(self, name: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...


class DefaultValueAttribute(Attribute):
    @overload
    def __init__(self, value: Char): ...
    @overload
    def __init__(self, value: Byte): ...
    @overload
    def __init__(self, value: Int16): ...
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: Int64): ...
    @overload
    def __init__(self, value: Single): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, value: bool): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, value: Object): ...
    @overload
    def __init__(self, type: Type, value: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Value(self) -> Object: ...
    def GetHashCode(self) -> int: ...


class DescriptionAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, description: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Description(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class DesignerAttribute(Attribute):
    @overload
    def __init__(self, designerTypeName: str): ...
    @overload
    def __init__(self, designerType: Type): ...
    @overload
    def __init__(self, designerTypeName: str, designerBaseTypeName: str): ...
    @overload
    def __init__(self, designerTypeName: str, designerBaseType: Type): ...
    @overload
    def __init__(self, designerType: Type, designerBaseType: Type): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DesignerBaseTypeName(self) -> str: ...
    @property
    def DesignerTypeName(self) -> str: ...
    @property
    def TypeId(self) -> Object: ...
    def GetHashCode(self) -> int: ...


class DesignerCategoryAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, category: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def TypeId(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class DesignerSerializationVisibility:
    Hidden = 0
    Visible = 1
    Content = 2


class DesignerSerializationVisibilityAttribute(Attribute):
    def __init__(self, visibility: DesignerSerializationVisibility): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Visibility(self) -> DesignerSerializationVisibility: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class DesignOnlyAttribute(Attribute):
    def __init__(self, isDesignOnly: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsDesignOnly(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class DesignTimeVisibleAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, visible: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class DisplayNameAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, displayName: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class DoubleConverter(BaseNumberConverter):
    def __init__(self): ...


class DoWorkEventArgs(CancelEventArgs):
    def __init__(self, argument: Object): ...
    @property
    def Argument(self) -> Object: ...
    @property
    def Result(self) -> Object: ...
    @Result.setter
    def Result(self, value: Object) -> None: ...


class DoWorkEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DoWorkEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DoWorkEventArgs) -> None: ...


class EditorAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str, baseTypeName: str): ...
    @overload
    def __init__(self, typeName: str, baseType: Type): ...
    @overload
    def __init__(self, type: Type, baseType: Type): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def EditorBaseTypeName(self) -> str: ...
    @property
    def EditorTypeName(self) -> str: ...
    @property
    def TypeId(self) -> Object: ...
    def GetHashCode(self) -> int: ...


class EditorBrowsableAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, state: EditorBrowsableState): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def State(self) -> EditorBrowsableState: ...
    def GetHashCode(self) -> int: ...


class EditorBrowsableState:
    Always = 0
    Never = 1
    Advanced = 2


class EnumConverter(TypeConverter):
    def __init__(self, type: Type): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: Object) -> bool: ...


class EventDescriptor(MemberDescriptor):
    def AddEventHandler(self, component: Object, value: Delegate) -> None: ...
    @property
    def ComponentType(self) -> Type: ...
    @property
    def EventType(self) -> Type: ...
    @property
    def IsMulticast(self) -> bool: ...
    def RemoveEventHandler(self, component: Object, value: Delegate) -> None: ...


class EventDescriptorCollection(Object):
    @overload
    def __init__(self, events: Set(EventDescriptor)): ...
    @overload
    def __init__(self, events: Set(EventDescriptor), readOnly: bool): ...
    def Add(self, value: EventDescriptor) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, value: EventDescriptor) -> bool: ...
    def Find(self, name: str, ignoreCase: bool) -> EventDescriptor: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> EventDescriptor: ...
    @property
    def Item(self, name: str) -> EventDescriptor: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: EventDescriptor) -> int: ...
    def Insert(self, index: int, value: EventDescriptor) -> None: ...
    def Remove(self, value: EventDescriptor) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def Sort(self) -> EventDescriptorCollection: ...
    @overload
    def Sort(self, names: Set(str)) -> EventDescriptorCollection: ...
    @overload
    def Sort(self, comparer: IComparer) -> EventDescriptorCollection: ...
    @overload
    def Sort(self, names: Set(str), comparer: IComparer) -> EventDescriptorCollection: ...


class EventHandlerList(Object):
    def __init__(self): ...
    def AddHandler(self, key: Object, value: Delegate) -> None: ...
    def AddHandlers(self, listToAddFrom: EventHandlerList) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Item(self, key: Object) -> Delegate: ...
    def RemoveHandler(self, key: Object, value: Delegate) -> None: ...
    @Item.setter
    def Item(self, key: Object, value: Delegate) -> None: ...


class ExpandableObjectConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class ExtenderProvidedPropertyAttribute(Attribute):
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ExtenderProperty(self) -> PropertyDescriptor: ...
    @property
    def Provider(self) -> IExtenderProvider: ...
    @property
    def ReceiverType(self) -> Type: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class GuidConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class HandledEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, defaultHandledValue: bool): ...
    @property
    def Handled(self) -> bool: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class HandledEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: HandledEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: HandledEventArgs) -> None: ...


class IBindingList:
    def add_ListChanged(self, value: ListChangedEventHandler) -> None: ...
    def AddIndex(self, property: PropertyDescriptor) -> None: ...
    def AddNew(self) -> Object: ...
    def ApplySort(self, property: PropertyDescriptor, direction: ListSortDirection) -> None: ...
    def Find(self, property: PropertyDescriptor, key: Object) -> int: ...
    @property
    def AllowEdit(self) -> bool: ...
    @property
    def AllowNew(self) -> bool: ...
    @property
    def AllowRemove(self) -> bool: ...
    @property
    def IsSorted(self) -> bool: ...
    @property
    def SortDirection(self) -> ListSortDirection: ...
    @property
    def SortProperty(self) -> PropertyDescriptor: ...
    @property
    def SupportsChangeNotification(self) -> bool: ...
    @property
    def SupportsSearching(self) -> bool: ...
    @property
    def SupportsSorting(self) -> bool: ...
    def remove_ListChanged(self, value: ListChangedEventHandler) -> None: ...
    def RemoveIndex(self, property: PropertyDescriptor) -> None: ...
    def RemoveSort(self) -> None: ...


class IBindingListView:
    def ApplySort(self, sorts: ListSortDescriptionCollection) -> None: ...
    @property
    def Filter(self) -> str: ...
    @property
    def SortDescriptions(self) -> ListSortDescriptionCollection: ...
    @property
    def SupportsAdvancedSorting(self) -> bool: ...
    @property
    def SupportsFiltering(self) -> bool: ...
    def RemoveFilter(self) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...


class ICancelAddNew:
    def CancelNew(self, itemIndex: int) -> None: ...
    def EndNew(self, itemIndex: int) -> None: ...


class IChangeTracking:
    def AcceptChanges(self) -> None: ...
    @property
    def IsChanged(self) -> bool: ...


class IComponent:
    def add_Disposed(self, value: EventHandler) -> None: ...
    @property
    def Site(self) -> ISite: ...
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...


class IContainer:
    @overload
    def Add(self, component: IComponent) -> None: ...
    @overload
    def Add(self, component: IComponent, name: str) -> None: ...
    @property
    def Components(self) -> ComponentCollection: ...
    def Remove(self, component: IComponent) -> None: ...


class ICustomTypeDescriptor:
    def GetAttributes(self) -> AttributeCollection: ...
    def GetClassName(self) -> str: ...
    def GetComponentName(self) -> str: ...
    def GetConverter(self) -> TypeConverter: ...
    def GetDefaultEvent(self) -> EventDescriptor: ...
    def GetDefaultProperty(self) -> PropertyDescriptor: ...
    def GetEditor(self, editorBaseType: Type) -> Object: ...
    @overload
    def GetEvents(self) -> EventDescriptorCollection: ...
    @overload
    def GetEvents(self, attributes: Set(Attribute)) -> EventDescriptorCollection: ...
    @overload
    def GetProperties(self) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    def GetPropertyOwner(self, pd: PropertyDescriptor) -> Object: ...


class IDataErrorInfo:
    @property
    def Error(self) -> str: ...
    @property
    def Item(self, columnName: str) -> str: ...


class IEditableObject:
    def BeginEdit(self) -> None: ...
    def CancelEdit(self) -> None: ...
    def EndEdit(self) -> None: ...


class IExtenderProvider:
    def CanExtend(self, extendee: Object) -> bool: ...


class IIntellisenseBuilder:
    @property
    def Name(self) -> str: ...
    def Show(self, language: str, value: str, newValue: str) -> Tuple[bool, str]: ...


class IListSource:
    @property
    def ContainsListCollection(self) -> bool: ...
    def GetList(self) -> IList: ...


class ImmutableObjectAttribute(Attribute):
    def __init__(self, immutable: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Immutable(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class INestedContainer:
    @property
    def Owner(self) -> IComponent: ...


class INestedSite:
    @property
    def FullName(self) -> str: ...


class InheritanceAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, inheritanceLevel: InheritanceLevel): ...
    def Equals(self, value: Object) -> bool: ...
    @property
    def InheritanceLevel(self) -> InheritanceLevel: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...
    def ToString(self) -> str: ...


class InheritanceLevel:
    Inherited = 1
    InheritedReadOnly = 2
    NotInherited = 3


class InitializationEventAttribute(Attribute):
    def __init__(self, eventName: str): ...
    @property
    def EventName(self) -> str: ...


class INotifyDataErrorInfo:
    def add_ErrorsChanged(self, value: EventHandler) -> None: ...
    @property
    def HasErrors(self) -> bool: ...
    def GetErrors(self, propertyName: str) -> IEnumerable: ...
    def remove_ErrorsChanged(self, value: EventHandler) -> None: ...


class INotifyPropertyChanged:
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...


class INotifyPropertyChanging:
    def add_PropertyChanging(self, value: PropertyChangingEventHandler) -> None: ...
    def remove_PropertyChanging(self, value: PropertyChangingEventHandler) -> None: ...


class InstallerTypeAttribute(Attribute):
    @overload
    def __init__(self, installerType: Type): ...
    @overload
    def __init__(self, typeName: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def InstallerType(self) -> Type: ...
    def GetHashCode(self) -> int: ...


class InstanceCreationEditor(Object):
    def CreateInstance(self, context: ITypeDescriptorContext, instanceType: Type) -> Object: ...
    @property
    def Text(self) -> str: ...


class Int16Converter(BaseNumberConverter):
    def __init__(self): ...


class Int32Converter(BaseNumberConverter):
    def __init__(self): ...


class Int64Converter(BaseNumberConverter):
    def __init__(self): ...


class InvalidAsynchronousStateException(ArgumentException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class InvalidEnumArgumentException(ArgumentException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, argumentName: str, invalidValue: int, enumClass: Type): ...


class IRaiseItemChangedEvents:
    @property
    def RaisesItemChangedEvents(self) -> bool: ...


class IRevertibleChangeTracking:
    def RejectChanges(self) -> None: ...


class ISite:
    @property
    def Component(self) -> IComponent: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def DesignMode(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class ISupportInitialize:
    def BeginInit(self) -> None: ...
    def EndInit(self) -> None: ...


class ISupportInitializeNotification:
    def add_Initialized(self, value: EventHandler) -> None: ...
    @property
    def IsInitialized(self) -> bool: ...
    def remove_Initialized(self, value: EventHandler) -> None: ...


class ISynchronizeInvoke:
    def BeginInvoke(self, method: Delegate, args: Set(Object)) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Object: ...
    @property
    def InvokeRequired(self) -> bool: ...
    def Invoke(self, method: Delegate, args: Set(Object)) -> Object: ...


class ITypeDescriptorContext:
    @property
    def Container(self) -> IContainer: ...
    @property
    def Instance(self) -> Object: ...
    @property
    def PropertyDescriptor(self) -> PropertyDescriptor: ...
    def OnComponentChanged(self) -> None: ...
    def OnComponentChanging(self) -> bool: ...


class ITypedList:
    def GetItemProperties(self, listAccessors: Set(PropertyDescriptor)) -> PropertyDescriptorCollection: ...
    def GetListName(self, listAccessors: Set(PropertyDescriptor)) -> str: ...


class License(Object):
    def Dispose(self) -> None: ...
    @property
    def LicenseKey(self) -> str: ...


class LicenseContext(Object):
    def __init__(self): ...
    @property
    def UsageMode(self) -> LicenseUsageMode: ...
    def GetSavedLicenseKey(self, type: Type, resourceAssembly: Assembly) -> str: ...
    def GetService(self, type: Type) -> Object: ...
    def SetSavedLicenseKey(self, type: Type, key: str) -> None: ...


class LicenseException(SystemException):
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, type: Type, instance: Object): ...
    @overload
    def __init__(self, type: Type, instance: Object, message: str): ...
    @overload
    def __init__(self, type: Type, instance: Object, message: str, innerException: Exception): ...
    @property
    def LicensedType(self) -> Type: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class LicenseManager(Object):
    @overload
    def CreateWithContext(type: Type, creationContext: LicenseContext) -> Object: ...
    @overload
    def CreateWithContext(type: Type, creationContext: LicenseContext, args: Set(Object)) -> Object: ...
    @property
    def CurrentContext() -> LicenseContext: ...
    @property
    def UsageMode() -> LicenseUsageMode: ...
    def IsLicensed(type: Type) -> bool: ...
    @overload
    def IsValid(type: Type) -> bool: ...
    @overload
    def IsValid(type: Type, instance: Object) -> Tuple[bool, License]: ...
    def LockContext(contextUser: Object) -> None: ...
    @CurrentContext.setter
    def CurrentContext(value: LicenseContext) -> None: ...
    def UnlockContext(contextUser: Object) -> None: ...
    @overload
    def Validate(type: Type) -> None: ...
    @overload
    def Validate(type: Type, instance: Object) -> License: ...


class LicenseProvider(Object):
    def GetLicense(self, context: LicenseContext, type: Type, instance: Object, allowExceptions: bool) -> License: ...


class LicenseProviderAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, type: Type): ...
    def Equals(self, value: Object) -> bool: ...
    @property
    def LicenseProvider(self) -> Type: ...
    @property
    def TypeId(self) -> Object: ...
    def GetHashCode(self) -> int: ...


class LicenseUsageMode:
    Runtime = 0
    Designtime = 1


class LicFileLicenseProvider(LicenseProvider):
    def __init__(self): ...
    def GetLicense(self, context: LicenseContext, type: Type, instance: Object, allowExceptions: bool) -> License: ...


class ListBindableAttribute(Attribute):
    @overload
    def __init__(self, listBindable: bool): ...
    @overload
    def __init__(self, flags: BindableSupport): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ListBindable(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class ListChangedEventArgs(EventArgs):
    @overload
    def __init__(self, listChangedType: ListChangedType, newIndex: int): ...
    @overload
    def __init__(self, listChangedType: ListChangedType, propDesc: PropertyDescriptor): ...
    @overload
    def __init__(self, listChangedType: ListChangedType, newIndex: int, propDesc: PropertyDescriptor): ...
    @overload
    def __init__(self, listChangedType: ListChangedType, newIndex: int, oldIndex: int): ...
    @property
    def ListChangedType(self) -> ListChangedType: ...
    @property
    def NewIndex(self) -> int: ...
    @property
    def OldIndex(self) -> int: ...
    @property
    def PropertyDescriptor(self) -> PropertyDescriptor: ...


class ListChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ListChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ListChangedEventArgs) -> None: ...


class ListChangedType:
    Reset = 0
    ItemAdded = 1
    ItemDeleted = 2
    ItemMoved = 3
    ItemChanged = 4
    PropertyDescriptorAdded = 5
    PropertyDescriptorDeleted = 6
    PropertyDescriptorChanged = 7


class ListSortDescription(Object):
    def __init__(self, property: PropertyDescriptor, direction: ListSortDirection): ...
    @property
    def PropertyDescriptor(self) -> PropertyDescriptor: ...
    @property
    def SortDirection(self) -> ListSortDirection: ...
    @PropertyDescriptor.setter
    def PropertyDescriptor(self, value: PropertyDescriptor) -> None: ...
    @SortDirection.setter
    def SortDirection(self, value: ListSortDirection) -> None: ...


class ListSortDescriptionCollection(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sorts: Set(ListSortDescription)): ...
    def Contains(self, value: Object) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> ListSortDescription: ...
    def IndexOf(self, value: Object) -> int: ...
    @Item.setter
    def Item(self, index: int, value: ListSortDescription) -> None: ...


class ListSortDirection:
    Ascending = 0
    Descending = 1


class LocalizableAttribute(Attribute):
    def __init__(self, isLocalizable: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsLocalizable(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class LookupBindingPropertiesAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dataSource: str, displayMember: str, valueMember: str, lookupMember: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DataSource(self) -> str: ...
    @property
    def DisplayMember(self) -> str: ...
    @property
    def LookupMember(self) -> str: ...
    @property
    def ValueMember(self) -> str: ...
    def GetHashCode(self) -> int: ...


class MarshalByValueComponent(Object):
    def __init__(self): ...
    def add_Disposed(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def DesignMode(self) -> bool: ...
    @property
    def Site(self) -> ISite: ...
    def GetService(self, service: Type) -> Object: ...
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    def ToString(self) -> str: ...


class MaskedTextProvider(Object):
    @overload
    def __init__(self, mask: str): ...
    @overload
    def __init__(self, mask: str, restrictToAscii: bool): ...
    @overload
    def __init__(self, mask: str, culture: CultureInfo): ...
    @overload
    def __init__(self, mask: str, culture: CultureInfo, restrictToAscii: bool): ...
    @overload
    def __init__(self, mask: str, passwordChar: Char, allowPromptAsInput: bool): ...
    @overload
    def __init__(self, mask: str, culture: CultureInfo, passwordChar: Char, allowPromptAsInput: bool): ...
    @overload
    def __init__(self, mask: str, culture: CultureInfo, allowPromptAsInput: bool, promptChar: Char, passwordChar: Char, restrictToAscii: bool): ...
    @overload
    def Add(self, input: str) -> bool: ...
    @overload
    def Add(self, input: Char) -> bool: ...
    @overload
    def Add(self, input: str) -> Tuple[bool, int, MaskedTextResultHint]: ...
    @overload
    def Add(self, input: Char) -> Tuple[bool, int, MaskedTextResultHint]: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Clear(self) -> Tuple[MaskedTextResultHint]: ...
    def Clone(self) -> Object: ...
    def FindAssignedEditPositionFrom(self, position: int, direction: bool) -> int: ...
    def FindAssignedEditPositionInRange(self, startPosition: int, endPosition: int, direction: bool) -> int: ...
    def FindEditPositionFrom(self, position: int, direction: bool) -> int: ...
    def FindEditPositionInRange(self, startPosition: int, endPosition: int, direction: bool) -> int: ...
    def FindNonEditPositionFrom(self, position: int, direction: bool) -> int: ...
    def FindNonEditPositionInRange(self, startPosition: int, endPosition: int, direction: bool) -> int: ...
    def FindUnassignedEditPositionFrom(self, position: int, direction: bool) -> int: ...
    def FindUnassignedEditPositionInRange(self, startPosition: int, endPosition: int, direction: bool) -> int: ...
    @property
    def AllowPromptAsInput(self) -> bool: ...
    @property
    def AsciiOnly(self) -> bool: ...
    @property
    def AssignedEditPositionCount(self) -> int: ...
    @property
    def AvailableEditPositionCount(self) -> int: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def DefaultPasswordChar() -> Char: ...
    @property
    def EditPositionCount(self) -> int: ...
    @property
    def EditPositions(self) -> IEnumerator: ...
    @property
    def IncludeLiterals(self) -> bool: ...
    @property
    def IncludePrompt(self) -> bool: ...
    @property
    def InvalidIndex() -> int: ...
    @property
    def IsPassword(self) -> bool: ...
    @property
    def Item(self, index: int) -> Char: ...
    @property
    def LastAssignedPosition(self) -> int: ...
    @property
    def Length(self) -> int: ...
    @property
    def Mask(self) -> str: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def MaskFull(self) -> bool: ...
    @property
    def PasswordChar(self) -> Char: ...
    @property
    def PromptChar(self) -> Char: ...
    @property
    def ResetOnPrompt(self) -> bool: ...
    @property
    def ResetOnSpace(self) -> bool: ...
    @property
    def SkipLiterals(self) -> bool: ...
    def GetOperationResultFromHint(hint: MaskedTextResultHint) -> bool: ...
    @overload
    def InsertAt(self, input: Char, position: int) -> bool: ...
    @overload
    def InsertAt(self, input: str, position: int) -> bool: ...
    @overload
    def InsertAt(self, input: Char, position: int) -> Tuple[bool, int, MaskedTextResultHint]: ...
    @overload
    def InsertAt(self, input: str, position: int) -> Tuple[bool, int, MaskedTextResultHint]: ...
    def IsAvailablePosition(self, position: int) -> bool: ...
    def IsEditPosition(self, position: int) -> bool: ...
    def IsValidInputChar(c: Char) -> bool: ...
    def IsValidMaskChar(c: Char) -> bool: ...
    def IsValidPasswordChar(c: Char) -> bool: ...
    @overload
    def Remove(self) -> bool: ...
    @overload
    def Remove(self) -> Tuple[bool, int, MaskedTextResultHint]: ...
    @overload
    def RemoveAt(self, position: int) -> bool: ...
    @overload
    def RemoveAt(self, startPosition: int, endPosition: int) -> bool: ...
    @overload
    def RemoveAt(self, startPosition: int, endPosition: int) -> Tuple[bool, int, MaskedTextResultHint]: ...
    @overload
    def Replace(self, input: Char, position: int) -> bool: ...
    @overload
    def Replace(self, input: str, position: int) -> bool: ...
    @overload
    def Replace(self, input: Char, position: int) -> Tuple[bool, int, MaskedTextResultHint]: ...
    @overload
    def Replace(self, input: str, position: int) -> Tuple[bool, int, MaskedTextResultHint]: ...
    @overload
    def Replace(self, input: Char, startPosition: int, endPosition: int) -> Tuple[bool, int, MaskedTextResultHint]: ...
    @overload
    def Replace(self, input: str, startPosition: int, endPosition: int) -> Tuple[bool, int, MaskedTextResultHint]: ...
    @IncludeLiterals.setter
    def IncludeLiterals(self, value: bool) -> None: ...
    @IncludePrompt.setter
    def IncludePrompt(self, value: bool) -> None: ...
    @IsPassword.setter
    def IsPassword(self, value: bool) -> None: ...
    @PasswordChar.setter
    def PasswordChar(self, value: Char) -> None: ...
    @PromptChar.setter
    def PromptChar(self, value: Char) -> None: ...
    @ResetOnPrompt.setter
    def ResetOnPrompt(self, value: bool) -> None: ...
    @ResetOnSpace.setter
    def ResetOnSpace(self, value: bool) -> None: ...
    @overload
    def Set(self, input: str) -> bool: ...
    @overload
    def Set(self, input: str) -> Tuple[bool, int, MaskedTextResultHint]: ...
    @SkipLiterals.setter
    def SkipLiterals(self, value: bool) -> None: ...
    def ToDisplayString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, ignorePasswordChar: bool) -> str: ...
    @overload
    def ToString(self, includePrompt: bool, includeLiterals: bool) -> str: ...
    @overload
    def ToString(self, startPosition: int, length: int) -> str: ...
    @overload
    def ToString(self, ignorePasswordChar: bool, startPosition: int, length: int) -> str: ...
    @overload
    def ToString(self, includePrompt: bool, includeLiterals: bool, startPosition: int, length: int) -> str: ...
    @overload
    def ToString(self, ignorePasswordChar: bool, includePrompt: bool, includeLiterals: bool, startPosition: int, length: int) -> str: ...
    def VerifyChar(self, input: Char, position: int) -> Tuple[bool, MaskedTextResultHint]: ...
    def VerifyEscapeChar(self, input: Char, position: int) -> bool: ...
    @overload
    def VerifyString(self, input: str) -> bool: ...
    @overload
    def VerifyString(self, input: str) -> Tuple[bool, int, MaskedTextResultHint]: ...


class MaskedTextResultHint:
    Unknown = 0
    CharacterEscaped = 1
    NoEffect = 2
    SideEffect = 3
    Success = 4
    PositionOutOfRange = -55
    NonEditPosition = -54
    UnavailableEditPosition = -53
    PromptCharNotAllowed = -52
    InvalidInput = -51
    SignedDigitExpected = -5
    LetterExpected = -4
    DigitExpected = -3
    AlphanumericCharacterExpected = -2
    AsciiCharacterExpected = -1


class MemberDescriptor(Object):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Attributes(self) -> AttributeCollection: ...
    @property
    def Category(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def DesignTimeOnly(self) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsBrowsable(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...


class MergablePropertyAttribute(Attribute):
    def __init__(self, allowMerge: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AllowMerge(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class MultilineStringConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class NestedContainer(Container):
    def __init__(self, owner: IComponent): ...
    @property
    def Owner(self) -> IComponent: ...


class NotifyParentPropertyAttribute(Attribute):
    def __init__(self, notifyParent: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def NotifyParent(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class NullableConverter(TypeConverter):
    def __init__(self, type: Type): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> Object: ...
    @property
    def NullableType(self) -> Type: ...
    @property
    def UnderlyingType(self) -> Type: ...
    @property
    def UnderlyingTypeConverter(self) -> TypeConverter: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: Object) -> bool: ...


class ParenthesizePropertyNameAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, needParenthesis: bool): ...
    def Equals(self, o: Object) -> bool: ...
    @property
    def NeedParenthesis(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class PasswordPropertyTextAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, password: bool): ...
    def Equals(self, o: Object) -> bool: ...
    @property
    def Password(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class ProgressChangedEventArgs(EventArgs):
    def __init__(self, progressPercentage: int, userState: Object): ...
    @property
    def ProgressPercentage(self) -> int: ...
    @property
    def UserState(self) -> Object: ...


class ProgressChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ProgressChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ProgressChangedEventArgs) -> None: ...


class PropertyChangedEventArgs(EventArgs):
    def __init__(self, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...


class PropertyChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PropertyChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PropertyChangedEventArgs) -> None: ...


class PropertyChangingEventArgs(EventArgs):
    def __init__(self, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...


class PropertyChangingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PropertyChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PropertyChangingEventArgs) -> None: ...


class PropertyDescriptor(MemberDescriptor):
    def AddValueChanged(self, component: Object, handler: EventHandler) -> None: ...
    def CanResetValue(self, component: Object) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ComponentType(self) -> Type: ...
    @property
    def Converter(self) -> TypeConverter: ...
    @property
    def IsLocalizable(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def PropertyType(self) -> Type: ...
    @property
    def SerializationVisibility(self) -> DesignerSerializationVisibility: ...
    @property
    def SupportsChangeEvents(self) -> bool: ...
    @overload
    def GetChildProperties(self) -> PropertyDescriptorCollection: ...
    @overload
    def GetChildProperties(self, instance: Object) -> PropertyDescriptorCollection: ...
    @overload
    def GetChildProperties(self, filter: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetChildProperties(self, instance: Object, filter: Set(Attribute)) -> PropertyDescriptorCollection: ...
    def GetEditor(self, editorBaseType: Type) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetValue(self, component: Object) -> Object: ...
    def RemoveValueChanged(self, component: Object, handler: EventHandler) -> None: ...
    def ResetValue(self, component: Object) -> None: ...
    def SetValue(self, component: Object, value: Object) -> None: ...
    def ShouldSerializeValue(self, component: Object) -> bool: ...


class PropertyDescriptorCollection(Object):
    @overload
    def __init__(self, properties: Set(PropertyDescriptor)): ...
    @overload
    def __init__(self, properties: Set(PropertyDescriptor), readOnly: bool): ...
    def Add(self, value: PropertyDescriptor) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, value: PropertyDescriptor) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    def Find(self, name: str, ignoreCase: bool) -> PropertyDescriptor: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> PropertyDescriptor: ...
    @property
    def Item(self, name: str) -> PropertyDescriptor: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: PropertyDescriptor) -> int: ...
    def Insert(self, index: int, value: PropertyDescriptor) -> None: ...
    def Remove(self, value: PropertyDescriptor) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def Sort(self) -> PropertyDescriptorCollection: ...
    @overload
    def Sort(self, names: Set(str)) -> PropertyDescriptorCollection: ...
    @overload
    def Sort(self, comparer: IComparer) -> PropertyDescriptorCollection: ...
    @overload
    def Sort(self, names: Set(str), comparer: IComparer) -> PropertyDescriptorCollection: ...


class PropertyTabAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tabClass: Type): ...
    @overload
    def __init__(self, tabClassName: str): ...
    @overload
    def __init__(self, tabClass: Type, tabScope: PropertyTabScope): ...
    @overload
    def __init__(self, tabClassName: str, tabScope: PropertyTabScope): ...
    @overload
    def Equals(self, other: Object) -> bool: ...
    @overload
    def Equals(self, other: PropertyTabAttribute) -> bool: ...
    @property
    def TabClasses(self) -> Set(Type): ...
    @property
    def TabScopes(self) -> Set(PropertyTabScope): ...
    def GetHashCode(self) -> int: ...


class PropertyTabScope:
    Static = 0
    Global = 1
    Document = 2
    Component = 3


class ProvidePropertyAttribute(Attribute):
    @overload
    def __init__(self, propertyName: str, receiverType: Type): ...
    @overload
    def __init__(self, propertyName: str, receiverTypeName: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def ReceiverTypeName(self) -> str: ...
    @property
    def TypeId(self) -> Object: ...
    def GetHashCode(self) -> int: ...


class ReadOnlyAttribute(Attribute):
    def __init__(self, isReadOnly: bool): ...
    def Equals(self, value: Object) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class ReferenceConverter(TypeConverter):
    def __init__(self, type: Type): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class RefreshEventArgs(EventArgs):
    @overload
    def __init__(self, componentChanged: Object): ...
    @overload
    def __init__(self, typeChanged: Type): ...
    @property
    def ComponentChanged(self) -> Object: ...
    @property
    def TypeChanged(self) -> Type: ...


class RefreshEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, e: RefreshEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, e: RefreshEventArgs) -> None: ...


class RefreshProperties:
    #None = 0
    All = 1
    Repaint = 2


class RefreshPropertiesAttribute(Attribute):
    def __init__(self, refresh: RefreshProperties): ...
    def Equals(self, value: Object) -> bool: ...
    @property
    def RefreshProperties(self) -> RefreshProperties: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class RunInstallerAttribute(Attribute):
    def __init__(self, runInstaller: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def RunInstaller(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class RunWorkerCompletedEventArgs(AsyncCompletedEventArgs):
    def __init__(self, result: Object, error: Exception, cancelled: bool): ...
    @property
    def Result(self) -> Object: ...
    @property
    def UserState(self) -> Object: ...


class RunWorkerCompletedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: RunWorkerCompletedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: RunWorkerCompletedEventArgs) -> None: ...


class SByteConverter(BaseNumberConverter):
    def __init__(self): ...


class SettingsBindableAttribute(Attribute):
    def __init__(self, bindable: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Bindable(self) -> bool: ...
    def GetHashCode(self) -> int: ...


class SingleConverter(BaseNumberConverter):
    def __init__(self): ...


class StandardValuesCollection(Object):
    def __init__(self, values: ICollection): ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...


class StringConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...


class SyntaxCheck(Object):
    def CheckMachineName(value: str) -> bool: ...
    def CheckPath(value: str) -> bool: ...
    def CheckRootedPath(value: str) -> bool: ...


class TimeSpanConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class ToolboxItemAttribute(Attribute):
    @overload
    def __init__(self, defaultType: bool): ...
    @overload
    def __init__(self, toolboxItemTypeName: str): ...
    @overload
    def __init__(self, toolboxItemType: Type): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ToolboxItemType(self) -> Type: ...
    @property
    def ToolboxItemTypeName(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class ToolboxItemFilterAttribute(Attribute):
    @overload
    def __init__(self, filterString: str): ...
    @overload
    def __init__(self, filterString: str, filterType: ToolboxItemFilterType): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def FilterString(self) -> str: ...
    @property
    def FilterType(self) -> ToolboxItemFilterType: ...
    @property
    def TypeId(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def Match(self, obj: Object) -> bool: ...
    def ToString(self) -> str: ...


class ToolboxItemFilterType:
    Allow = 0
    Custom = 1
    Prevent = 2
    Require = 3


class TypeConverter(Object):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, sourceType: Type) -> bool: ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, destinationType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, value: Object) -> Object: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertFromInvariantString(self, text: str) -> Object: ...
    @overload
    def ConvertFromInvariantString(self, context: ITypeDescriptorContext, text: str) -> Object: ...
    @overload
    def ConvertFromString(self, text: str) -> Object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, text: str) -> Object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, culture: CultureInfo, text: str) -> Object: ...
    @overload
    def ConvertTo(self, value: Object, destinationType: Type) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def ConvertToInvariantString(self, value: Object) -> str: ...
    @overload
    def ConvertToInvariantString(self, context: ITypeDescriptorContext, value: Object) -> str: ...
    @overload
    def ConvertToString(self, value: Object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, value: Object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> str: ...
    @overload
    def CreateInstance(self, propertyValues: IDictionary) -> Object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> Object: ...
    @overload
    def GetCreateInstanceSupported(self) -> bool: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, value: Object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self) -> bool: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValues(self) -> ICollection: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self) -> bool: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def IsValid(self, value: Object) -> bool: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: Object) -> bool: ...


class TypeConverterAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, typeName: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ConverterTypeName(self) -> str: ...
    def GetHashCode(self) -> int: ...


class TypeDescriptionProvider(Object):
    def CreateInstance(self, provider: IServiceProvider, objectType: Type, argTypes: Set(Type), args: Set(Object)) -> Object: ...
    def GetCache(self, instance: Object) -> IDictionary: ...
    def GetExtendedTypeDescriptor(self, instance: Object) -> ICustomTypeDescriptor: ...
    def GetFullComponentName(self, component: Object) -> str: ...
    @overload
    def GetReflectionType(self, objectType: Type) -> Type: ...
    @overload
    def GetReflectionType(self, instance: Object) -> Type: ...
    @overload
    def GetReflectionType(self, objectType: Type, instance: Object) -> Type: ...
    def GetRuntimeType(self, reflectionType: Type) -> Type: ...
    @overload
    def GetTypeDescriptor(self, objectType: Type) -> ICustomTypeDescriptor: ...
    @overload
    def GetTypeDescriptor(self, instance: Object) -> ICustomTypeDescriptor: ...
    @overload
    def GetTypeDescriptor(self, objectType: Type, instance: Object) -> ICustomTypeDescriptor: ...
    def IsSupportedType(self, type: Type) -> bool: ...


class TypeDescriptionProviderAttribute(Attribute):
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, type: Type): ...
    @property
    def TypeName(self) -> str: ...


class TypeDescriptor(Object):
    def add_Refreshed(value: RefreshEventHandler) -> None: ...
    @overload
    def AddAttributes(type: Type, attributes: Set(Attribute)) -> TypeDescriptionProvider: ...
    @overload
    def AddAttributes(instance: Object, attributes: Set(Attribute)) -> TypeDescriptionProvider: ...
    def AddEditorTable(editorBaseType: Type, table: Hashtable) -> None: ...
    @overload
    def AddProvider(provider: TypeDescriptionProvider, type: Type) -> None: ...
    @overload
    def AddProvider(provider: TypeDescriptionProvider, instance: Object) -> None: ...
    @overload
    def AddProviderTransparent(provider: TypeDescriptionProvider, type: Type) -> None: ...
    @overload
    def AddProviderTransparent(provider: TypeDescriptionProvider, instance: Object) -> None: ...
    def CreateAssociation(primary: Object, secondary: Object) -> None: ...
    def CreateDesigner(component: IComponent, designerBaseType: Type) -> IDesigner: ...
    @overload
    def CreateEvent(componentType: Type, oldEventDescriptor: EventDescriptor, attributes: Set(Attribute)) -> EventDescriptor: ...
    @overload
    def CreateEvent(componentType: Type, name: str, type: Type, attributes: Set(Attribute)) -> EventDescriptor: ...
    def CreateInstance(provider: IServiceProvider, objectType: Type, argTypes: Set(Type), args: Set(Object)) -> Object: ...
    @overload
    def CreateProperty(componentType: Type, oldPropertyDescriptor: PropertyDescriptor, attributes: Set(Attribute)) -> PropertyDescriptor: ...
    @overload
    def CreateProperty(componentType: Type, name: str, type: Type, attributes: Set(Attribute)) -> PropertyDescriptor: ...
    @property
    def ComNativeDescriptorHandler() -> IComNativeDescriptorHandler: ...
    @property
    def ComObjectType() -> Type: ...
    @property
    def InterfaceType() -> Type: ...
    def GetAssociation(type: Type, primary: Object) -> Object: ...
    @overload
    def GetAttributes(component: Object) -> AttributeCollection: ...
    @overload
    def GetAttributes(componentType: Type) -> AttributeCollection: ...
    @overload
    def GetAttributes(component: Object, noCustomTypeDesc: bool) -> AttributeCollection: ...
    @overload
    def GetClassName(componentType: Type) -> str: ...
    @overload
    def GetClassName(component: Object) -> str: ...
    @overload
    def GetClassName(component: Object, noCustomTypeDesc: bool) -> str: ...
    @overload
    def GetComponentName(component: Object) -> str: ...
    @overload
    def GetComponentName(component: Object, noCustomTypeDesc: bool) -> str: ...
    @overload
    def GetConverter(type: Type) -> TypeConverter: ...
    @overload
    def GetConverter(component: Object) -> TypeConverter: ...
    @overload
    def GetConverter(component: Object, noCustomTypeDesc: bool) -> TypeConverter: ...
    @overload
    def GetDefaultEvent(componentType: Type) -> EventDescriptor: ...
    @overload
    def GetDefaultEvent(component: Object) -> EventDescriptor: ...
    @overload
    def GetDefaultEvent(component: Object, noCustomTypeDesc: bool) -> EventDescriptor: ...
    @overload
    def GetDefaultProperty(component: Object) -> PropertyDescriptor: ...
    @overload
    def GetDefaultProperty(componentType: Type) -> PropertyDescriptor: ...
    @overload
    def GetDefaultProperty(component: Object, noCustomTypeDesc: bool) -> PropertyDescriptor: ...
    @overload
    def GetEditor(type: Type, editorBaseType: Type) -> Object: ...
    @overload
    def GetEditor(component: Object, editorBaseType: Type) -> Object: ...
    @overload
    def GetEditor(component: Object, editorBaseType: Type, noCustomTypeDesc: bool) -> Object: ...
    @overload
    def GetEvents(componentType: Type) -> EventDescriptorCollection: ...
    @overload
    def GetEvents(component: Object) -> EventDescriptorCollection: ...
    @overload
    def GetEvents(component: Object, attributes: Set(Attribute)) -> EventDescriptorCollection: ...
    @overload
    def GetEvents(componentType: Type, attributes: Set(Attribute)) -> EventDescriptorCollection: ...
    @overload
    def GetEvents(component: Object, noCustomTypeDesc: bool) -> EventDescriptorCollection: ...
    @overload
    def GetEvents(component: Object, attributes: Set(Attribute), noCustomTypeDesc: bool) -> EventDescriptorCollection: ...
    def GetFullComponentName(component: Object) -> str: ...
    @overload
    def GetProperties(componentType: Type) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(component: Object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(component: Object, noCustomTypeDesc: bool) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(component: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(componentType: Type, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(component: Object, attributes: Set(Attribute), noCustomTypeDesc: bool) -> PropertyDescriptorCollection: ...
    @overload
    def GetProvider(instance: Object) -> TypeDescriptionProvider: ...
    @overload
    def GetProvider(type: Type) -> TypeDescriptionProvider: ...
    @overload
    def GetReflectionType(instance: Object) -> Type: ...
    @overload
    def GetReflectionType(type: Type) -> Type: ...
    @overload
    def Refresh(assembly: Assembly) -> None: ...
    @overload
    def Refresh(module: Module) -> None: ...
    @overload
    def Refresh(type: Type) -> None: ...
    @overload
    def Refresh(component: Object) -> None: ...
    def remove_Refreshed(value: RefreshEventHandler) -> None: ...
    def RemoveAssociation(primary: Object, secondary: Object) -> None: ...
    def RemoveAssociations(primary: Object) -> None: ...
    @overload
    def RemoveProvider(provider: TypeDescriptionProvider, type: Type) -> None: ...
    @overload
    def RemoveProvider(provider: TypeDescriptionProvider, instance: Object) -> None: ...
    @overload
    def RemoveProviderTransparent(provider: TypeDescriptionProvider, instance: Object) -> None: ...
    @overload
    def RemoveProviderTransparent(provider: TypeDescriptionProvider, type: Type) -> None: ...
    @ComNativeDescriptorHandler.setter
    def ComNativeDescriptorHandler(value: IComNativeDescriptorHandler) -> None: ...
    def SortDescriptorArray(infos: IList) -> None: ...


class TypeListConverter(TypeConverter):
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class UInt16Converter(BaseNumberConverter):
    def __init__(self): ...


class UInt32Converter(BaseNumberConverter):
    def __init__(self): ...


class UInt64Converter(BaseNumberConverter):
    def __init__(self): ...


class WarningException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, helpUrl: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, helpUrl: str, helpTopic: str): ...
    @property
    def HelpTopic(self) -> str: ...
    @property
    def HelpUrl(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class Win32Exception(ExternalException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, error: int): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, error: int, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def NativeErrorCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
