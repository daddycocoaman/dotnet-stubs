from typing import Tuple, Set, Iterable, List


class ExportBuilder(Object):
    def __init__(self): ...
    @overload
    def AddMetadata(self, name: str, value: Object) -> ExportBuilder: ...
    @overload
    def AddMetadata(self, name: str, itemFunc: Func) -> ExportBuilder: ...
    def AsContractName(self, contractName: str) -> ExportBuilder: ...
    @overload
    def AsContractType(self) -> ExportBuilder: ...
    @overload
    def AsContractType(self, type: Type) -> ExportBuilder: ...
    def Inherited(self) -> ExportBuilder: ...


class ImportBuilder(Object):
    def __init__(self): ...
    def AllowDefault(self) -> ImportBuilder: ...
    def AllowRecomposition(self) -> ImportBuilder: ...
    def AsContractName(self, contractName: str) -> ImportBuilder: ...
    @overload
    def AsContractType(self) -> ImportBuilder: ...
    @overload
    def AsContractType(self, type: Type) -> ImportBuilder: ...
    def AsMany(self, isMany: bool) -> ImportBuilder: ...
    def RequiredCreationPolicy(self, requiredCreationPolicy: CreationPolicy) -> ImportBuilder: ...
    def Source(self, source: ImportSource) -> ImportBuilder: ...


class ParameterImportBuilder(Object):
    def __init__(self): ...
    @overload
    def Import(self) -> T: ...
    @overload
    def Import(self, configure: Action) -> T: ...


class PartBuilder(Object):
    @overload
    def AddMetadata(self, name: str, itemFunc: Func) -> PartBuilder: ...
    @overload
    def AddMetadata(self, name: str, value: Object) -> PartBuilder: ...
    @overload
    def Export(self) -> PartBuilder: ...
    @overload
    def Export(self) -> PartBuilder: ...
    @overload
    def Export(self, exportConfiguration: Action) -> PartBuilder: ...
    @overload
    def Export(self, exportConfiguration: Action) -> PartBuilder: ...
    @overload
    def ExportInterfaces(self) -> PartBuilder: ...
    @overload
    def ExportInterfaces(self, interfaceFilter: Predicate) -> PartBuilder: ...
    @overload
    def ExportInterfaces(self, interfaceFilter: Predicate, exportConfiguration: Action) -> PartBuilder: ...
    @overload
    def ExportProperties(self, propertyFilter: Predicate) -> PartBuilder: ...
    @overload
    def ExportProperties(self, propertyFilter: Predicate) -> PartBuilder: ...
    @overload
    def ExportProperties(self, propertyFilter: Predicate, exportConfiguration: Action) -> PartBuilder: ...
    @overload
    def ExportProperties(self, propertyFilter: Predicate, exportConfiguration: Action) -> PartBuilder: ...
    @overload
    def ImportProperties(self, propertyFilter: Predicate) -> PartBuilder: ...
    @overload
    def ImportProperties(self, propertyFilter: Predicate) -> PartBuilder: ...
    @overload
    def ImportProperties(self, propertyFilter: Predicate, importConfiguration: Action) -> PartBuilder: ...
    @overload
    def ImportProperties(self, propertyFilter: Predicate, importConfiguration: Action) -> PartBuilder: ...
    @overload
    def SelectConstructor(self, constructorFilter: Func) -> PartBuilder: ...
    @overload
    def SelectConstructor(self, constructorFilter: Func, importConfiguration: Action) -> PartBuilder: ...
    def SetCreationPolicy(self, creationPolicy: CreationPolicy) -> PartBuilder: ...




class RegistrationBuilder(CustomReflectionContext):
    def __init__(self): ...
    @overload
    def ForType(self) -> PartBuilder: ...
    @overload
    def ForType(self, type: Type) -> PartBuilder: ...
    @overload
    def ForTypesDerivedFrom(self) -> PartBuilder: ...
    @overload
    def ForTypesDerivedFrom(self, type: Type) -> PartBuilder: ...
    @overload
    def ForTypesMatching(self, typeFilter: Predicate) -> PartBuilder: ...
    @overload
    def ForTypesMatching(self, typeFilter: Predicate) -> PartBuilder: ...
