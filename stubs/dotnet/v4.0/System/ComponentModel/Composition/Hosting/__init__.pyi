from typing import Tuple, Set, Iterable, List


class AggregateCatalog(ComposablePartCatalog):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, catalogs: Set(ComposablePartCatalog)): ...
    @overload
    def __init__(self, catalogs: Iterable[ComposablePartCatalog]): ...
    def add_Changed(self, value: EventHandler) -> None: ...
    def add_Changing(self, value: EventHandler) -> None: ...
    @property
    def Catalogs(self) -> ICollection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetExports(self, definition: ImportDefinition) -> Iterable[Tuple]: ...
    def remove_Changed(self, value: EventHandler) -> None: ...
    def remove_Changing(self, value: EventHandler) -> None: ...


class AggregateExportProvider(ExportProvider):
    @overload
    def __init__(self, providers: Set(ExportProvider)): ...
    @overload
    def __init__(self, providers: Iterable[ExportProvider]): ...
    def Dispose(self) -> None: ...
    @property
    def Providers(self) -> ReadOnlyCollection: ...


class ApplicationCatalog(ComposablePartCatalog):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, definitionOrigin: ICompositionElement): ...
    @overload
    def __init__(self, reflectionContext: ReflectionContext): ...
    @overload
    def __init__(self, reflectionContext: ReflectionContext, definitionOrigin: ICompositionElement): ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetExports(self, definition: ImportDefinition) -> Iterable[Tuple]: ...
    def ToString(self) -> str: ...


class AssemblyCatalog(ComposablePartCatalog):
    @overload
    def __init__(self, codeBase: str): ...
    @overload
    def __init__(self, assembly: Assembly): ...
    @overload
    def __init__(self, codeBase: str, reflectionContext: ReflectionContext): ...
    @overload
    def __init__(self, codeBase: str, definitionOrigin: ICompositionElement): ...
    @overload
    def __init__(self, assembly: Assembly, reflectionContext: ReflectionContext): ...
    @overload
    def __init__(self, assembly: Assembly, definitionOrigin: ICompositionElement): ...
    @overload
    def __init__(self, codeBase: str, reflectionContext: ReflectionContext, definitionOrigin: ICompositionElement): ...
    @overload
    def __init__(self, assembly: Assembly, reflectionContext: ReflectionContext, definitionOrigin: ICompositionElement): ...
    @property
    def Assembly(self) -> Assembly: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetExports(self, definition: ImportDefinition) -> Iterable[Tuple]: ...
    def ToString(self) -> str: ...


class AtomicComposition(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, outerAtomicComposition: AtomicComposition): ...
    def AddCompleteAction(self, completeAction: Action) -> None: ...
    def AddRevertAction(self, revertAction: Action) -> None: ...
    def Complete(self) -> None: ...
    def Dispose(self) -> None: ...
    def SetValue(self, key: Object, value: Object) -> None: ...
    @overload
    def TryGetValue(self, key: Object) -> Tuple[bool, T]: ...
    @overload
    def TryGetValue(self, key: Object, localAtomicCompositionOnly: bool) -> Tuple[bool, T]: ...


class CatalogExportProvider(ExportProvider):
    @overload
    def __init__(self, catalog: ComposablePartCatalog): ...
    @overload
    def __init__(self, catalog: ComposablePartCatalog, isThreadSafe: bool): ...
    @overload
    def __init__(self, catalog: ComposablePartCatalog, compositionOptions: CompositionOptions): ...
    def Dispose(self) -> None: ...
    @property
    def Catalog(self) -> ComposablePartCatalog: ...
    @property
    def SourceProvider(self) -> ExportProvider: ...
    @SourceProvider.setter
    def SourceProvider(self, value: ExportProvider) -> None: ...


class CatalogExtensions(Object):
    def CreateCompositionService(composablePartCatalog: ComposablePartCatalog) -> CompositionService: ...


class ComposablePartCatalogChangeEventArgs(EventArgs):
    def __init__(self, addedDefinitions: Iterable[ComposablePartDefinition], removedDefinitions: Iterable[ComposablePartDefinition], atomicComposition: AtomicComposition): ...
    @property
    def AddedDefinitions(self) -> Iterable[ComposablePartDefinition]: ...
    @property
    def AtomicComposition(self) -> AtomicComposition: ...
    @property
    def RemovedDefinitions(self) -> Iterable[ComposablePartDefinition]: ...


class ComposablePartExportProvider(ExportProvider):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, isThreadSafe: bool): ...
    @overload
    def __init__(self, compositionOptions: CompositionOptions): ...
    def Compose(self, batch: CompositionBatch) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def SourceProvider(self) -> ExportProvider: ...
    @SourceProvider.setter
    def SourceProvider(self, value: ExportProvider) -> None: ...


class CompositionBatch(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, partsToAdd: Iterable[ComposablePart], partsToRemove: Iterable[ComposablePart]): ...
    def AddExport(self, export: Export) -> ComposablePart: ...
    def AddPart(self, part: ComposablePart) -> None: ...
    @property
    def PartsToAdd(self) -> ReadOnlyCollection: ...
    @property
    def PartsToRemove(self) -> ReadOnlyCollection: ...
    def RemovePart(self, part: ComposablePart) -> None: ...


class CompositionConstants(Object):
    pass


class CompositionContainer(ExportProvider):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, providers: Set(ExportProvider)): ...
    @overload
    def __init__(self, compositionOptions: CompositionOptions, providers: Set(ExportProvider)): ...
    @overload
    def __init__(self, catalog: ComposablePartCatalog, providers: Set(ExportProvider)): ...
    @overload
    def __init__(self, catalog: ComposablePartCatalog, isThreadSafe: bool, providers: Set(ExportProvider)): ...
    @overload
    def __init__(self, catalog: ComposablePartCatalog, compositionOptions: CompositionOptions, providers: Set(ExportProvider)): ...
    def Compose(self, batch: CompositionBatch) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Catalog(self) -> ComposablePartCatalog: ...
    @property
    def Providers(self) -> ReadOnlyCollection: ...
    @overload
    def ReleaseExport(self, export: Lazy) -> None: ...
    @overload
    def ReleaseExport(self, export: Export) -> None: ...
    @overload
    def ReleaseExports(self, exports: Iterable[Lazy]) -> None: ...
    @overload
    def ReleaseExports(self, exports: Iterable[Export]) -> None: ...
    @overload
    def ReleaseExports(self, exports: Iterable[Lazy]) -> None: ...
    def SatisfyImportsOnce(self, part: ComposablePart) -> None: ...


class CompositionOptions:
    Default = 0
    DisableSilentRejection = 1
    IsThreadSafe = 2
    ExportCompositionService = 4


class CompositionScopeDefinition(ComposablePartCatalog):
    @overload
    def __init__(self, catalog: ComposablePartCatalog, children: Iterable[CompositionScopeDefinition]): ...
    @overload
    def __init__(self, catalog: ComposablePartCatalog, children: Iterable[CompositionScopeDefinition], publicSurface: Iterable[ExportDefinition]): ...
    def add_Changed(self, value: EventHandler) -> None: ...
    def add_Changing(self, value: EventHandler) -> None: ...
    @property
    def Children(self) -> Iterable[CompositionScopeDefinition]: ...
    @property
    def PublicSurface(self) -> Iterable[ExportDefinition]: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetExports(self, definition: ImportDefinition) -> Iterable[Tuple]: ...
    def remove_Changed(self, value: EventHandler) -> None: ...
    def remove_Changing(self, value: EventHandler) -> None: ...


class CompositionService(Object):
    def Dispose(self) -> None: ...
    def SatisfyImportsOnce(self, part: ComposablePart) -> None: ...


class DirectoryCatalog(ComposablePartCatalog):
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: str, reflectionContext: ReflectionContext): ...
    @overload
    def __init__(self, path: str, definitionOrigin: ICompositionElement): ...
    @overload
    def __init__(self, path: str, searchPattern: str): ...
    @overload
    def __init__(self, path: str, reflectionContext: ReflectionContext, definitionOrigin: ICompositionElement): ...
    @overload
    def __init__(self, path: str, searchPattern: str, definitionOrigin: ICompositionElement): ...
    @overload
    def __init__(self, path: str, searchPattern: str, reflectionContext: ReflectionContext): ...
    @overload
    def __init__(self, path: str, searchPattern: str, reflectionContext: ReflectionContext, definitionOrigin: ICompositionElement): ...
    def add_Changed(self, value: EventHandler) -> None: ...
    def add_Changing(self, value: EventHandler) -> None: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def LoadedFiles(self) -> ReadOnlyCollection: ...
    @property
    def Path(self) -> str: ...
    @property
    def SearchPattern(self) -> str: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetExports(self, definition: ImportDefinition) -> Iterable[Tuple]: ...
    def Refresh(self) -> None: ...
    def remove_Changed(self, value: EventHandler) -> None: ...
    def remove_Changing(self, value: EventHandler) -> None: ...
    def ToString(self) -> str: ...


class ExportProvider(Object):
    def add_ExportsChanged(self, value: EventHandler) -> None: ...
    def add_ExportsChanging(self, value: EventHandler) -> None: ...
    @overload
    def GetExport(self) -> Lazy: ...
    @overload
    def GetExport(self) -> Lazy: ...
    @overload
    def GetExport(self, contractName: str) -> Lazy: ...
    @overload
    def GetExport(self, contractName: str) -> Lazy: ...
    @overload
    def GetExportedValue(self) -> T: ...
    @overload
    def GetExportedValue(self, contractName: str) -> T: ...
    @overload
    def GetExportedValueOrDefault(self) -> T: ...
    @overload
    def GetExportedValueOrDefault(self, contractName: str) -> T: ...
    @overload
    def GetExportedValues(self) -> Iterable[T]: ...
    @overload
    def GetExportedValues(self, contractName: str) -> Iterable[T]: ...
    @overload
    def GetExports(self) -> Iterable[Lazy]: ...
    @overload
    def GetExports(self) -> Iterable[Lazy]: ...
    @overload
    def GetExports(self, contractName: str) -> Iterable[Lazy]: ...
    @overload
    def GetExports(self, definition: ImportDefinition) -> Iterable[Export]: ...
    @overload
    def GetExports(self, contractName: str) -> Iterable[Lazy]: ...
    @overload
    def GetExports(self, definition: ImportDefinition, atomicComposition: AtomicComposition) -> Iterable[Export]: ...
    @overload
    def GetExports(self, type: Type, metadataViewType: Type, contractName: str) -> Iterable[Lazy]: ...
    def remove_ExportsChanged(self, value: EventHandler) -> None: ...
    def remove_ExportsChanging(self, value: EventHandler) -> None: ...
    def TryGetExports(self, definition: ImportDefinition, atomicComposition: AtomicComposition) -> Tuple[bool, Iterable[Export]]: ...


class ExportsChangeEventArgs(EventArgs):
    def __init__(self, addedExports: Iterable[ExportDefinition], removedExports: Iterable[ExportDefinition], atomicComposition: AtomicComposition): ...
    @property
    def AddedExports(self) -> Iterable[ExportDefinition]: ...
    @property
    def AtomicComposition(self) -> AtomicComposition: ...
    @property
    def ChangedContractNames(self) -> Iterable[str]: ...
    @property
    def RemovedExports(self) -> Iterable[ExportDefinition]: ...


class FilteredCatalog(ComposablePartCatalog):
    def __init__(self, catalog: ComposablePartCatalog, filter: Func): ...
    def add_Changed(self, value: EventHandler) -> None: ...
    def add_Changing(self, value: EventHandler) -> None: ...
    @property
    def Complement(self) -> FilteredCatalog: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetExports(self, definition: ImportDefinition) -> Iterable[Tuple]: ...
    @overload
    def IncludeDependencies(self) -> FilteredCatalog: ...
    @overload
    def IncludeDependencies(self, importFilter: Func) -> FilteredCatalog: ...
    @overload
    def IncludeDependents(self) -> FilteredCatalog: ...
    @overload
    def IncludeDependents(self, importFilter: Func) -> FilteredCatalog: ...
    def remove_Changed(self, value: EventHandler) -> None: ...
    def remove_Changing(self, value: EventHandler) -> None: ...


class ImportEngine(Object):
    @overload
    def __init__(self, sourceProvider: ExportProvider): ...
    @overload
    def __init__(self, sourceProvider: ExportProvider, isThreadSafe: bool): ...
    @overload
    def __init__(self, sourceProvider: ExportProvider, compositionOptions: CompositionOptions): ...
    def Dispose(self) -> None: ...
    def PreviewImports(self, part: ComposablePart, atomicComposition: AtomicComposition) -> None: ...
    def ReleaseImports(self, part: ComposablePart, atomicComposition: AtomicComposition) -> None: ...
    def SatisfyImports(self, part: ComposablePart) -> None: ...
    def SatisfyImportsOnce(self, part: ComposablePart) -> None: ...


class INotifyComposablePartCatalogChanged:
    def add_Changed(self, value: EventHandler) -> None: ...
    def add_Changing(self, value: EventHandler) -> None: ...
    def remove_Changed(self, value: EventHandler) -> None: ...
    def remove_Changing(self, value: EventHandler) -> None: ...


class ScopingExtensions(Object):
    def ContainsPartMetadata(part: ComposablePartDefinition, key: str, value: T) -> bool: ...
    def ContainsPartMetadataWithKey(part: ComposablePartDefinition, key: str) -> bool: ...
    def Exports(part: ComposablePartDefinition, contractName: str) -> bool: ...
    def Filter(catalog: ComposablePartCatalog, filter: Func) -> FilteredCatalog: ...
    @overload
    def Imports(part: ComposablePartDefinition, contractName: str) -> bool: ...
    @overload
    def Imports(part: ComposablePartDefinition, contractName: str, importCardinality: ImportCardinality) -> bool: ...


class TypeCatalog(ComposablePartCatalog):
    @overload
    def __init__(self, types: Set(Type)): ...
    @overload
    def __init__(self, types: Iterable[Type]): ...
    @overload
    def __init__(self, types: Iterable[Type], definitionOrigin: ICompositionElement): ...
    @overload
    def __init__(self, types: Iterable[Type], reflectionContext: ReflectionContext): ...
    @overload
    def __init__(self, types: Iterable[Type], reflectionContext: ReflectionContext, definitionOrigin: ICompositionElement): ...
    def GetEnumerator(self) -> IEnumerator: ...
    def ToString(self) -> str: ...
