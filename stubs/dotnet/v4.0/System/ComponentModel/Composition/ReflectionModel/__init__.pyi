from typing import Tuple, Set, Iterable, List


class ReflectionModelServices(Object):
    def CreateExportDefinition(exportingMember: LazyMemberInfo, contractName: str, metadata: Lazy, origin: ICompositionElement) -> ExportDefinition: ...
    @overload
    def CreateImportDefinition(parameter: Lazy, contractName: str, requiredTypeIdentity: str, requiredMetadata: Iterable[KeyValuePair], cardinality: ImportCardinality, requiredCreationPolicy: CreationPolicy, origin: ICompositionElement) -> ContractBasedImportDefinition: ...
    @overload
    def CreateImportDefinition(importingMember: LazyMemberInfo, contractName: str, requiredTypeIdentity: str, requiredMetadata: Iterable[KeyValuePair], cardinality: ImportCardinality, isRecomposable: bool, requiredCreationPolicy: CreationPolicy, origin: ICompositionElement) -> ContractBasedImportDefinition: ...
    @overload
    def CreateImportDefinition(parameter: Lazy, contractName: str, requiredTypeIdentity: str, requiredMetadata: Iterable[KeyValuePair], cardinality: ImportCardinality, requiredCreationPolicy: CreationPolicy, metadata: IDictionary, isExportFactory: bool, origin: ICompositionElement) -> ContractBasedImportDefinition: ...
    @overload
    def CreateImportDefinition(importingMember: LazyMemberInfo, contractName: str, requiredTypeIdentity: str, requiredMetadata: Iterable[KeyValuePair], cardinality: ImportCardinality, isRecomposable: bool, requiredCreationPolicy: CreationPolicy, metadata: IDictionary, isExportFactory: bool, origin: ICompositionElement) -> ContractBasedImportDefinition: ...
    @overload
    def CreateImportDefinition(importingMember: LazyMemberInfo, contractName: str, requiredTypeIdentity: str, requiredMetadata: Iterable[KeyValuePair], cardinality: ImportCardinality, isRecomposable: bool, isPreRequisite: bool, requiredCreationPolicy: CreationPolicy, metadata: IDictionary, isExportFactory: bool, origin: ICompositionElement) -> ContractBasedImportDefinition: ...
    def CreatePartDefinition(partType: Lazy, isDisposalRequired: bool, imports: Lazy, exports: Lazy, metadata: Lazy, origin: ICompositionElement) -> ComposablePartDefinition: ...
    def GetExportFactoryProductImportDefinition(importDefinition: ImportDefinition) -> ContractBasedImportDefinition: ...
    def GetExportingMember(exportDefinition: ExportDefinition) -> LazyMemberInfo: ...
    def GetImportingMember(importDefinition: ImportDefinition) -> LazyMemberInfo: ...
    def GetImportingParameter(importDefinition: ImportDefinition) -> Lazy: ...
    def GetPartType(partDefinition: ComposablePartDefinition) -> Lazy: ...
    def IsDisposalRequired(partDefinition: ComposablePartDefinition) -> bool: ...
    def IsExportFactoryImportDefinition(importDefinition: ImportDefinition) -> bool: ...
    def IsImportingParameter(importDefinition: ImportDefinition) -> bool: ...
    def TryMakeGenericPartDefinition(partDefinition: ComposablePartDefinition, genericParameters: Iterable[Type]) -> Tuple[bool, ComposablePartDefinition]: ...
