__all__ = ['Hosting','Primitives','ReflectionModel']
from typing import Tuple, Set, Iterable, List


class AttributedModelServices(Object):
    @overload
    def AddExportedValue(batch: CompositionBatch, exportedValue: T) -> ComposablePart: ...
    @overload
    def AddExportedValue(batch: CompositionBatch, contractName: str, exportedValue: T) -> ComposablePart: ...
    def AddPart(batch: CompositionBatch, attributedPart: Object) -> ComposablePart: ...
    @overload
    def ComposeExportedValue(container: CompositionContainer, exportedValue: T) -> None: ...
    @overload
    def ComposeExportedValue(container: CompositionContainer, contractName: str, exportedValue: T) -> None: ...
    def ComposeParts(container: CompositionContainer, attributedParts: Set(Object)) -> None: ...
    @overload
    def CreatePart(attributedPart: Object) -> ComposablePart: ...
    @overload
    def CreatePart(attributedPart: Object, reflectionContext: ReflectionContext) -> ComposablePart: ...
    @overload
    def CreatePart(partDefinition: ComposablePartDefinition, attributedPart: Object) -> ComposablePart: ...
    @overload
    def CreatePartDefinition(type: Type, origin: ICompositionElement) -> ComposablePartDefinition: ...
    @overload
    def CreatePartDefinition(type: Type, origin: ICompositionElement, ensureIsDiscoverable: bool) -> ComposablePartDefinition: ...
    @overload
    def Exports(part: ComposablePartDefinition) -> bool: ...
    @overload
    def Exports(part: ComposablePartDefinition, contractType: Type) -> bool: ...
    def GetContractName(type: Type) -> str: ...
    def GetMetadataView(metadata: IDictionary) -> TMetadataView: ...
    @overload
    def GetTypeIdentity(method: MethodInfo) -> str: ...
    @overload
    def GetTypeIdentity(type: Type) -> str: ...
    @overload
    def Imports(part: ComposablePartDefinition) -> bool: ...
    @overload
    def Imports(part: ComposablePartDefinition, contractType: Type) -> bool: ...
    @overload
    def Imports(part: ComposablePartDefinition, importCardinality: ImportCardinality) -> bool: ...
    @overload
    def Imports(part: ComposablePartDefinition, contractType: Type, importCardinality: ImportCardinality) -> bool: ...
    @overload
    def SatisfyImportsOnce(compositionService: ICompositionService, attributedPart: Object) -> ComposablePart: ...
    @overload
    def SatisfyImportsOnce(compositionService: ICompositionService, attributedPart: Object, reflectionContext: ReflectionContext) -> ComposablePart: ...


class CatalogReflectionContextAttribute(Attribute):
    def __init__(self, reflectionContextType: Type): ...
    def CreateReflectionContext(self) -> ReflectionContext: ...


class ChangeRejectedException(CompositionException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, errors: Iterable[CompositionError]): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def Message(self) -> str: ...


class CompositionContractMismatchException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class CompositionError(Object):
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, element: ICompositionElement): ...
    @overload
    def __init__(self, message: str, exception: Exception): ...
    @overload
    def __init__(self, message: str, element: ICompositionElement, exception: Exception): ...
    @property
    def Description(self) -> str: ...
    @property
    def Element(self) -> ICompositionElement: ...
    @property
    def Exception(self) -> Exception: ...
    def ToString(self) -> str: ...


class CompositionException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, errors: Iterable[CompositionError]): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def Errors(self) -> ReadOnlyCollection: ...
    @property
    def Message(self) -> str: ...
    @property
    def RootCauses(self) -> ReadOnlyCollection: ...


class CreationPolicy:
    Any = 0
    Shared = 1
    NonShared = 2


class ExportAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contractType: Type): ...
    @overload
    def __init__(self, contractName: str): ...
    @overload
    def __init__(self, contractName: str, contractType: Type): ...
    @property
    def ContractName(self) -> str: ...
    @property
    def ContractType(self) -> Type: ...








class ExportMetadataAttribute(Attribute):
    def __init__(self, name: str, value: Object): ...
    @property
    def IsMultiple(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @IsMultiple.setter
    def IsMultiple(self, value: bool) -> None: ...


class ICompositionService:
    def SatisfyImportsOnce(self, part: ComposablePart) -> None: ...


class ImportAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contractType: Type): ...
    @overload
    def __init__(self, contractName: str): ...
    @overload
    def __init__(self, contractName: str, contractType: Type): ...
    @property
    def AllowDefault(self) -> bool: ...
    @property
    def AllowRecomposition(self) -> bool: ...
    @property
    def ContractName(self) -> str: ...
    @property
    def ContractType(self) -> Type: ...
    @property
    def RequiredCreationPolicy(self) -> CreationPolicy: ...
    @property
    def Source(self) -> ImportSource: ...
    @AllowDefault.setter
    def AllowDefault(self, value: bool) -> None: ...
    @AllowRecomposition.setter
    def AllowRecomposition(self, value: bool) -> None: ...
    @RequiredCreationPolicy.setter
    def RequiredCreationPolicy(self, value: CreationPolicy) -> None: ...
    @Source.setter
    def Source(self, value: ImportSource) -> None: ...


class ImportCardinalityMismatchException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ImportingConstructorAttribute(Attribute):
    def __init__(self): ...


class ImportManyAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contractType: Type): ...
    @overload
    def __init__(self, contractName: str): ...
    @overload
    def __init__(self, contractName: str, contractType: Type): ...
    @property
    def AllowRecomposition(self) -> bool: ...
    @property
    def ContractName(self) -> str: ...
    @property
    def ContractType(self) -> Type: ...
    @property
    def RequiredCreationPolicy(self) -> CreationPolicy: ...
    @property
    def Source(self) -> ImportSource: ...
    @AllowRecomposition.setter
    def AllowRecomposition(self, value: bool) -> None: ...
    @RequiredCreationPolicy.setter
    def RequiredCreationPolicy(self, value: CreationPolicy) -> None: ...
    @Source.setter
    def Source(self, value: ImportSource) -> None: ...


class ImportSource:
    Any = 0
    Local = 1
    NonLocal = 2


class InheritedExportAttribute(ExportAttribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contractType: Type): ...
    @overload
    def __init__(self, contractName: str): ...
    @overload
    def __init__(self, contractName: str, contractType: Type): ...


class IPartImportsSatisfiedNotification:
    def OnImportsSatisfied(self) -> None: ...


class MetadataAttributeAttribute(Attribute):
    def __init__(self): ...


class MetadataViewImplementationAttribute(Attribute):
    def __init__(self, implementationType: Type): ...
    @property
    def ImplementationType(self) -> Type: ...


class PartCreationPolicyAttribute(Attribute):
    def __init__(self, creationPolicy: CreationPolicy): ...
    @property
    def CreationPolicy(self) -> CreationPolicy: ...


class PartMetadataAttribute(Attribute):
    def __init__(self, name: str, value: Object): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...


class PartNotDiscoverableAttribute(Attribute):
    def __init__(self): ...
