from typing import Tuple, Set, Iterable, List


class AllowedMemberLocations:
    #None = 0
    Attribute = 1
    MemberElement = 2
    Any = 3


class ShouldSerializeResult:
    Default = 0
    True = 1
    False = 2


class XamlCollectionKind:
    #None = 0
    Collection = 1
    Dictionary = 2
    Array = 3


class XamlMemberInvoker(Object):
    def __init__(self, member: XamlMember): ...
    @property
    def UnderlyingGetter(self) -> MethodInfo: ...
    @property
    def UnderlyingSetter(self) -> MethodInfo: ...
    @property
    def UnknownInvoker() -> XamlMemberInvoker: ...
    def GetValue(self, instance: Object) -> Object: ...
    def SetValue(self, instance: Object, value: Object) -> None: ...
    def ShouldSerializeValue(self, instance: Object) -> ShouldSerializeResult: ...


class XamlTypeInvoker(Object):
    def __init__(self, type: XamlType): ...
    def AddToCollection(self, instance: Object, item: Object) -> None: ...
    def AddToDictionary(self, instance: Object, key: Object, item: Object) -> None: ...
    def CreateInstance(self, arguments: Set(Object)) -> Object: ...
    @property
    def SetMarkupExtensionHandler(self) -> EventHandler: ...
    @property
    def SetTypeConverterHandler(self) -> EventHandler: ...
    @property
    def UnknownInvoker() -> XamlTypeInvoker: ...
    def GetAddMethod(self, contentType: XamlType) -> MethodInfo: ...
    def GetEnumeratorMethod(self) -> MethodInfo: ...
    def GetItems(self, instance: Object) -> IEnumerator: ...


class XamlTypeName(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, xamlType: XamlType): ...
    @overload
    def __init__(self, xamlNamespace: str, name: str): ...
    @overload
    def __init__(self, xamlNamespace: str, name: str, typeArguments: Iterable[XamlTypeName]): ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def TypeArguments(self) -> List[XamlTypeName]: ...
    def Parse(typeName: str, namespaceResolver: IXamlNamespaceResolver) -> XamlTypeName: ...
    def ParseList(typeNameList: str, namespaceResolver: IXamlNamespaceResolver) -> List[XamlTypeName]: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, prefixLookup: INamespacePrefixLookup) -> str: ...
    @overload
    def ToString(typeNameList: List[XamlTypeName], prefixLookup: INamespacePrefixLookup) -> str: ...
    def TryParse(typeName: str, namespaceResolver: IXamlNamespaceResolver) -> Tuple[bool, XamlTypeName]: ...
    def TryParseList(typeNameList: str, namespaceResolver: IXamlNamespaceResolver) -> Tuple[bool, List[XamlTypeName]]: ...


class XamlTypeTypeConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


