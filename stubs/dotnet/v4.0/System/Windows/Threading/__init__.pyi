from typing import Tuple, Set, Iterable, List


class DispatcherExtensions(Object):
    @overload
    def BeginInvoke(dispatcher: Dispatcher, action: Action) -> DispatcherOperation: ...
    @overload
    def BeginInvoke(dispatcher: Dispatcher, action: Action, priority: DispatcherPriority) -> DispatcherOperation: ...
    @overload
    def Invoke(dispatcher: Dispatcher, action: Action) -> None: ...
    @overload
    def Invoke(dispatcher: Dispatcher, action: Action, priority: DispatcherPriority) -> None: ...
    @overload
    def Invoke(dispatcher: Dispatcher, action: Action, timeout: TimeSpan) -> None: ...
    @overload
    def Invoke(dispatcher: Dispatcher, action: Action, timeout: TimeSpan, priority: DispatcherPriority) -> None: ...


class TaskExtensions(Object):
    @overload
    def DispatcherOperationWait(this: Task) -> DispatcherOperationStatus: ...
    @overload
    def DispatcherOperationWait(this: Task, timeout: TimeSpan) -> DispatcherOperationStatus: ...
    def IsDispatcherOperationTask(this: Task) -> bool: ...
