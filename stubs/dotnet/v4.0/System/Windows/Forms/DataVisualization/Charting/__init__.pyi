from typing import Tuple, Set, Iterable, List


class Annotation(ChartNamedElement):
    def BeginPlacement(self) -> None: ...
    def BringToFront(self) -> None: ...
    def EndPlacement(self) -> None: ...
    @property
    def Alignment(self) -> ContentAlignment: ...
    @property
    def AllowAnchorMoving(self) -> bool: ...
    @property
    def AllowMoving(self) -> bool: ...
    @property
    def AllowPathEditing(self) -> bool: ...
    @property
    def AllowResizing(self) -> bool: ...
    @property
    def AllowSelecting(self) -> bool: ...
    @property
    def AllowTextEditing(self) -> bool: ...
    @property
    def AnchorAlignment(self) -> ContentAlignment: ...
    @property
    def AnchorDataPoint(self) -> DataPoint: ...
    @property
    def AnchorDataPointName(self) -> str: ...
    @property
    def AnchorOffsetX(self) -> float: ...
    @property
    def AnchorOffsetY(self) -> float: ...
    @property
    def AnchorX(self) -> float: ...
    @property
    def AnchorY(self) -> float: ...
    @property
    def AnnotationGroup(self) -> AnnotationGroup: ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def AxisX(self) -> Axis: ...
    @property
    def AxisXName(self) -> str: ...
    @property
    def AxisY(self) -> Axis: ...
    @property
    def AxisYName(self) -> str: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def Bottom(self) -> float: ...
    @property
    def ClipToChartArea(self) -> str: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Height(self) -> float: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def IsSizeAlwaysRelative(self) -> bool: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def LineDashStyle(self) -> ChartDashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Right(self) -> float: ...
    @property
    def ShadowColor(self) -> Color: ...
    @property
    def ShadowOffset(self) -> int: ...
    @property
    def SmartLabelStyle(self) -> AnnotationSmartLabelStyle: ...
    @property
    def TextStyle(self) -> TextStyle: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> float: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @property
    def YAxisName(self) -> str: ...
    def ResizeToContent(self) -> None: ...
    def SendToBack(self) -> None: ...
    @Alignment.setter
    def Alignment(self, value: ContentAlignment) -> None: ...
    @AllowAnchorMoving.setter
    def AllowAnchorMoving(self, value: bool) -> None: ...
    @AllowMoving.setter
    def AllowMoving(self, value: bool) -> None: ...
    @AllowPathEditing.setter
    def AllowPathEditing(self, value: bool) -> None: ...
    @AllowResizing.setter
    def AllowResizing(self, value: bool) -> None: ...
    @AllowSelecting.setter
    def AllowSelecting(self, value: bool) -> None: ...
    @AllowTextEditing.setter
    def AllowTextEditing(self, value: bool) -> None: ...
    @AnchorAlignment.setter
    def AnchorAlignment(self, value: ContentAlignment) -> None: ...
    @AnchorDataPoint.setter
    def AnchorDataPoint(self, value: DataPoint) -> None: ...
    @AnchorDataPointName.setter
    def AnchorDataPointName(self, value: str) -> None: ...
    @AnchorOffsetX.setter
    def AnchorOffsetX(self, value: float) -> None: ...
    @AnchorOffsetY.setter
    def AnchorOffsetY(self, value: float) -> None: ...
    @AnchorX.setter
    def AnchorX(self, value: float) -> None: ...
    @AnchorY.setter
    def AnchorY(self, value: float) -> None: ...
    @AxisX.setter
    def AxisX(self, value: Axis) -> None: ...
    @AxisXName.setter
    def AxisXName(self, value: str) -> None: ...
    @AxisY.setter
    def AxisY(self, value: Axis) -> None: ...
    @AxisYName.setter
    def AxisYName(self, value: str) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @Bottom.setter
    def Bottom(self, value: float) -> None: ...
    @ClipToChartArea.setter
    def ClipToChartArea(self, value: str) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Height.setter
    def Height(self, value: float) -> None: ...
    @IsSelected.setter
    def IsSelected(self, value: bool) -> None: ...
    @IsSizeAlwaysRelative.setter
    def IsSizeAlwaysRelative(self, value: bool) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @LineDashStyle.setter
    def LineDashStyle(self, value: ChartDashStyle) -> None: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Right.setter
    def Right(self, value: float) -> None: ...
    @ShadowColor.setter
    def ShadowColor(self, value: Color) -> None: ...
    @ShadowOffset.setter
    def ShadowOffset(self, value: int) -> None: ...
    @SmartLabelStyle.setter
    def SmartLabelStyle(self, value: AnnotationSmartLabelStyle) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value: TextStyle) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: float) -> None: ...
    @X.setter
    def X(self, value: float) -> None: ...
    @Y.setter
    def Y(self, value: float) -> None: ...
    @YAxisName.setter
    def YAxisName(self, value: str) -> None: ...
    @overload
    def SetAnchor(self, dataPoint: DataPoint) -> None: ...
    @overload
    def SetAnchor(self, dataPoint1: DataPoint, dataPoint2: DataPoint) -> None: ...


class AnnotationCollection:
    def FindByName(self, name: str) -> Annotation: ...


class AnnotationGroup(Annotation):
    def __init__(self): ...
    @property
    def Alignment(self) -> ContentAlignment: ...
    @property
    def AllowAnchorMoving(self) -> bool: ...
    @property
    def AllowMoving(self) -> bool: ...
    @property
    def AllowPathEditing(self) -> bool: ...
    @property
    def AllowResizing(self) -> bool: ...
    @property
    def AllowSelecting(self) -> bool: ...
    @property
    def AllowTextEditing(self) -> bool: ...
    @property
    def Annotations(self) -> AnnotationCollection: ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def ClipToChartArea(self) -> str: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def IsSizeAlwaysRelative(self) -> bool: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def LineDashStyle(self) -> ChartDashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @property
    def ShadowColor(self) -> Color: ...
    @property
    def ShadowOffset(self) -> int: ...
    @property
    def TextStyle(self) -> TextStyle: ...
    @property
    def Visible(self) -> bool: ...
    @Alignment.setter
    def Alignment(self, value: ContentAlignment) -> None: ...
    @AllowAnchorMoving.setter
    def AllowAnchorMoving(self, value: bool) -> None: ...
    @AllowMoving.setter
    def AllowMoving(self, value: bool) -> None: ...
    @AllowPathEditing.setter
    def AllowPathEditing(self, value: bool) -> None: ...
    @AllowResizing.setter
    def AllowResizing(self, value: bool) -> None: ...
    @AllowSelecting.setter
    def AllowSelecting(self, value: bool) -> None: ...
    @AllowTextEditing.setter
    def AllowTextEditing(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @ClipToChartArea.setter
    def ClipToChartArea(self, value: str) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @IsSelected.setter
    def IsSelected(self, value: bool) -> None: ...
    @IsSizeAlwaysRelative.setter
    def IsSizeAlwaysRelative(self, value: bool) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @LineDashStyle.setter
    def LineDashStyle(self, value: ChartDashStyle) -> None: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> None: ...
    @ShadowColor.setter
    def ShadowColor(self, value: Color) -> None: ...
    @ShadowOffset.setter
    def ShadowOffset(self, value: int) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value: TextStyle) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class AnnotationPathPoint(ChartElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, x: Single, y: Single): ...
    @overload
    def __init__(self, x: Single, y: Single, type: Byte): ...
    @property
    def Name(self) -> str: ...
    @property
    def PointType(self) -> Byte: ...
    @property
    def X(self) -> Single: ...
    @property
    def Y(self) -> Single: ...
    @PointType.setter
    def PointType(self, value: Byte) -> None: ...
    @X.setter
    def X(self, value: Single) -> None: ...
    @Y.setter
    def Y(self, value: Single) -> None: ...


class AnnotationPathPointCollection:
    def __init__(self, annotation: PolylineAnnotation): ...
    def Invalidate(self) -> None: ...


class AnnotationPositionChangingEventArgs(EventArgs):
    def __init__(self): ...
    @property
    def Annotation(self) -> Annotation: ...
    @property
    def NewAnchorLocation(self) -> PointF: ...
    @property
    def NewAnchorLocationX(self) -> float: ...
    @property
    def NewAnchorLocationY(self) -> float: ...
    @property
    def NewLocationX(self) -> float: ...
    @property
    def NewLocationY(self) -> float: ...
    @property
    def NewPosition(self) -> RectangleF: ...
    @property
    def NewSizeHeight(self) -> float: ...
    @property
    def NewSizeWidth(self) -> float: ...
    @Annotation.setter
    def Annotation(self, value: Annotation) -> None: ...
    @NewAnchorLocation.setter
    def NewAnchorLocation(self, value: PointF) -> None: ...
    @NewAnchorLocationX.setter
    def NewAnchorLocationX(self, value: float) -> None: ...
    @NewAnchorLocationY.setter
    def NewAnchorLocationY(self, value: float) -> None: ...
    @NewLocationX.setter
    def NewLocationX(self, value: float) -> None: ...
    @NewLocationY.setter
    def NewLocationY(self, value: float) -> None: ...
    @NewPosition.setter
    def NewPosition(self, value: RectangleF) -> None: ...
    @NewSizeHeight.setter
    def NewSizeHeight(self, value: float) -> None: ...
    @NewSizeWidth.setter
    def NewSizeWidth(self, value: float) -> None: ...


class AnnotationSmartLabelStyle(SmartLabelStyle):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, chartElement: Object): ...
    @property
    def CalloutBackColor(self) -> Color: ...
    @property
    def CalloutLineAnchorCapStyle(self) -> LineAnchorCapStyle: ...
    @property
    def CalloutLineColor(self) -> Color: ...
    @property
    def CalloutLineDashStyle(self) -> ChartDashStyle: ...
    @property
    def CalloutLineWidth(self) -> int: ...
    @property
    def CalloutStyle(self) -> LabelCalloutStyle: ...
    @CalloutBackColor.setter
    def CalloutBackColor(self, value: Color) -> None: ...
    @CalloutLineAnchorCapStyle.setter
    def CalloutLineAnchorCapStyle(self, value: LineAnchorCapStyle) -> None: ...
    @CalloutLineColor.setter
    def CalloutLineColor(self, value: Color) -> None: ...
    @CalloutLineDashStyle.setter
    def CalloutLineDashStyle(self, value: ChartDashStyle) -> None: ...
    @CalloutLineWidth.setter
    def CalloutLineWidth(self, value: int) -> None: ...
    @CalloutStyle.setter
    def CalloutStyle(self, value: LabelCalloutStyle) -> None: ...


class AnovaResult(Object):
    def __init__(self): ...
    @property
    def DegreeOfFreedomBetweenGroups(self) -> float: ...
    @property
    def DegreeOfFreedomTotal(self) -> float: ...
    @property
    def DegreeOfFreedomWithinGroups(self) -> float: ...
    @property
    def FCriticalValue(self) -> float: ...
    @property
    def FRatio(self) -> float: ...
    @property
    def MeanSquareVarianceBetweenGroups(self) -> float: ...
    @property
    def MeanSquareVarianceWithinGroups(self) -> float: ...
    @property
    def SumOfSquaresBetweenGroups(self) -> float: ...
    @property
    def SumOfSquaresTotal(self) -> float: ...
    @property
    def SumOfSquaresWithinGroups(self) -> float: ...


class AntiAliasingStyles:
    #None = 0
    Text = 1
    Graphics = 2
    All = 3


class AreaAlignmentOrientations:
    #None = 0
    Vertical = 1
    Horizontal = 2
    All = 3


class AreaAlignmentStyles:
    #None = 0
    Position = 1
    PlotPosition = 2
    AxesView = 4
    Cursor = 8
    All = 15


class ArrowAnnotation(Annotation):
    def __init__(self): ...
    @property
    def AnchorAlignment(self) -> ContentAlignment: ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def ArrowSize(self) -> int: ...
    @property
    def ArrowStyle(self) -> ArrowStyle: ...
    @AnchorAlignment.setter
    def AnchorAlignment(self, value: ContentAlignment) -> None: ...
    @ArrowSize.setter
    def ArrowSize(self, value: int) -> None: ...
    @ArrowStyle.setter
    def ArrowStyle(self, value: ArrowStyle) -> None: ...


class ArrowStyle:
    Simple = 0
    DoubleArrow = 1
    Tailed = 2


class Axis(ChartNamedElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, chartArea: ChartArea, axisTypeName: AxisName): ...
    @property
    def ArrowStyle(self) -> AxisArrowStyle: ...
    @property
    def AxisName(self) -> AxisName: ...
    @property
    def Crossing(self) -> float: ...
    @property
    def CustomLabels(self) -> CustomLabelsCollection: ...
    @property
    def Enabled(self) -> AxisEnabled: ...
    @property
    def InterlacedColor(self) -> Color: ...
    @property
    def Interval(self) -> float: ...
    @property
    def IntervalAutoMode(self) -> IntervalAutoMode: ...
    @property
    def IntervalOffset(self) -> float: ...
    @property
    def IntervalOffsetType(self) -> DateTimeIntervalType: ...
    @property
    def IntervalType(self) -> DateTimeIntervalType: ...
    @property
    def IsInterlaced(self) -> bool: ...
    @property
    def IsLabelAutoFit(self) -> bool: ...
    @property
    def IsLogarithmic(self) -> bool: ...
    @property
    def IsMarginVisible(self) -> bool: ...
    @property
    def IsMarksNextToAxis(self) -> bool: ...
    @property
    def IsReversed(self) -> bool: ...
    @property
    def IsStartedFromZero(self) -> bool: ...
    @property
    def LabelAutoFitMaxFontSize(self) -> int: ...
    @property
    def LabelAutoFitMinFontSize(self) -> int: ...
    @property
    def LabelAutoFitStyle(self) -> LabelAutoFitStyles: ...
    @property
    def LabelStyle(self) -> LabelStyle: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def LineDashStyle(self) -> ChartDashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @property
    def LogarithmBase(self) -> float: ...
    @property
    def MajorGrid(self) -> Grid: ...
    @property
    def MajorTickMark(self) -> TickMark: ...
    @property
    def Maximum(self) -> float: ...
    @property
    def MaximumAutoSize(self) -> Single: ...
    @property
    def Minimum(self) -> float: ...
    @property
    def MinorGrid(self) -> Grid: ...
    @property
    def MinorTickMark(self) -> TickMark: ...
    @property
    def Name(self) -> str: ...
    @property
    def ScaleBreakStyle(self) -> AxisScaleBreakStyle: ...
    @property
    def ScaleView(self) -> AxisScaleView: ...
    @property
    def ScrollBar(self) -> AxisScrollBar: ...
    @property
    def StripLines(self) -> StripLinesCollection: ...
    @property
    def TextOrientation(self) -> TextOrientation: ...
    @property
    def Title(self) -> str: ...
    @property
    def TitleAlignment(self) -> StringAlignment: ...
    @property
    def TitleFont(self) -> Font: ...
    @property
    def TitleForeColor(self) -> Color: ...
    @property
    def ToolTip(self) -> str: ...
    def GetPosition(self, axisValue: float) -> float: ...
    def PixelPositionToValue(self, position: float) -> float: ...
    def PositionToValue(self, position: float) -> float: ...
    def RoundAxisValues(self) -> None: ...
    @ArrowStyle.setter
    def ArrowStyle(self, value: AxisArrowStyle) -> None: ...
    @Crossing.setter
    def Crossing(self, value: float) -> None: ...
    @Enabled.setter
    def Enabled(self, value: AxisEnabled) -> None: ...
    @InterlacedColor.setter
    def InterlacedColor(self, value: Color) -> None: ...
    @Interval.setter
    def Interval(self, value: float) -> None: ...
    @IntervalAutoMode.setter
    def IntervalAutoMode(self, value: IntervalAutoMode) -> None: ...
    @IntervalOffset.setter
    def IntervalOffset(self, value: float) -> None: ...
    @IntervalOffsetType.setter
    def IntervalOffsetType(self, value: DateTimeIntervalType) -> None: ...
    @IntervalType.setter
    def IntervalType(self, value: DateTimeIntervalType) -> None: ...
    @IsInterlaced.setter
    def IsInterlaced(self, value: bool) -> None: ...
    @IsLabelAutoFit.setter
    def IsLabelAutoFit(self, value: bool) -> None: ...
    @IsLogarithmic.setter
    def IsLogarithmic(self, value: bool) -> None: ...
    @IsMarginVisible.setter
    def IsMarginVisible(self, value: bool) -> None: ...
    @IsMarksNextToAxis.setter
    def IsMarksNextToAxis(self, value: bool) -> None: ...
    @IsReversed.setter
    def IsReversed(self, value: bool) -> None: ...
    @IsStartedFromZero.setter
    def IsStartedFromZero(self, value: bool) -> None: ...
    @LabelAutoFitMaxFontSize.setter
    def LabelAutoFitMaxFontSize(self, value: int) -> None: ...
    @LabelAutoFitMinFontSize.setter
    def LabelAutoFitMinFontSize(self, value: int) -> None: ...
    @LabelAutoFitStyle.setter
    def LabelAutoFitStyle(self, value: LabelAutoFitStyles) -> None: ...
    @LabelStyle.setter
    def LabelStyle(self, value: LabelStyle) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @LineDashStyle.setter
    def LineDashStyle(self, value: ChartDashStyle) -> None: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> None: ...
    @LogarithmBase.setter
    def LogarithmBase(self, value: float) -> None: ...
    @MajorGrid.setter
    def MajorGrid(self, value: Grid) -> None: ...
    @MajorTickMark.setter
    def MajorTickMark(self, value: TickMark) -> None: ...
    @Maximum.setter
    def Maximum(self, value: float) -> None: ...
    @MaximumAutoSize.setter
    def MaximumAutoSize(self, value: Single) -> None: ...
    @Minimum.setter
    def Minimum(self, value: float) -> None: ...
    @MinorGrid.setter
    def MinorGrid(self, value: Grid) -> None: ...
    @MinorTickMark.setter
    def MinorTickMark(self, value: TickMark) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ScaleBreakStyle.setter
    def ScaleBreakStyle(self, value: AxisScaleBreakStyle) -> None: ...
    @ScaleView.setter
    def ScaleView(self, value: AxisScaleView) -> None: ...
    @ScrollBar.setter
    def ScrollBar(self, value: AxisScrollBar) -> None: ...
    @TextOrientation.setter
    def TextOrientation(self, value: TextOrientation) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @TitleAlignment.setter
    def TitleAlignment(self, value: StringAlignment) -> None: ...
    @TitleFont.setter
    def TitleFont(self, value: Font) -> None: ...
    @TitleForeColor.setter
    def TitleForeColor(self, value: Color) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    def ValueToPixelPosition(self, axisValue: float) -> float: ...
    def ValueToPosition(self, axisValue: float) -> float: ...


class AxisArrowStyle:
    #None = 0
    Triangle = 1
    SharpTriangle = 2
    Lines = 3


class AxisEnabled:
    Auto = 0
    True = 1
    False = 2


class AxisName:
    X = 0
    Y = 1
    X2 = 2
    Y2 = 3


class AxisScaleBreakStyle(Object):
    def __init__(self): ...
    @property
    def BreakLineStyle(self) -> BreakLineStyle: ...
    @property
    def CollapsibleSpaceThreshold(self) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def LineDashStyle(self) -> ChartDashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @property
    def MaxNumberOfBreaks(self) -> int: ...
    @property
    def Spacing(self) -> float: ...
    @property
    def StartFromZero(self) -> StartFromZero: ...
    @BreakLineStyle.setter
    def BreakLineStyle(self, value: BreakLineStyle) -> None: ...
    @CollapsibleSpaceThreshold.setter
    def CollapsibleSpaceThreshold(self, value: int) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @LineDashStyle.setter
    def LineDashStyle(self, value: ChartDashStyle) -> None: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> None: ...
    @MaxNumberOfBreaks.setter
    def MaxNumberOfBreaks(self, value: int) -> None: ...
    @Spacing.setter
    def Spacing(self, value: float) -> None: ...
    @StartFromZero.setter
    def StartFromZero(self, value: StartFromZero) -> None: ...


class AxisScaleView(Object):
    def __init__(self): ...
    @property
    def IsZoomed(self) -> bool: ...
    @property
    def MinSize(self) -> float: ...
    @property
    def MinSizeType(self) -> DateTimeIntervalType: ...
    @property
    def Position(self) -> float: ...
    @property
    def Size(self) -> float: ...
    @property
    def SizeType(self) -> DateTimeIntervalType: ...
    @property
    def SmallScrollMinSize(self) -> float: ...
    @property
    def SmallScrollMinSizeType(self) -> DateTimeIntervalType: ...
    @property
    def SmallScrollSize(self) -> float: ...
    @property
    def SmallScrollSizeType(self) -> DateTimeIntervalType: ...
    @property
    def ViewMaximum(self) -> float: ...
    @property
    def ViewMinimum(self) -> float: ...
    @property
    def Zoomable(self) -> bool: ...
    @overload
    def Scroll(self, newPosition: DateTime) -> None: ...
    @overload
    def Scroll(self, newPosition: float) -> None: ...
    @overload
    def Scroll(self, scrollType: ScrollType) -> None: ...
    @MinSize.setter
    def MinSize(self, value: float) -> None: ...
    @MinSizeType.setter
    def MinSizeType(self, value: DateTimeIntervalType) -> None: ...
    @Position.setter
    def Position(self, value: float) -> None: ...
    @Size.setter
    def Size(self, value: float) -> None: ...
    @SizeType.setter
    def SizeType(self, value: DateTimeIntervalType) -> None: ...
    @SmallScrollMinSize.setter
    def SmallScrollMinSize(self, value: float) -> None: ...
    @SmallScrollMinSizeType.setter
    def SmallScrollMinSizeType(self, value: DateTimeIntervalType) -> None: ...
    @SmallScrollSize.setter
    def SmallScrollSize(self, value: float) -> None: ...
    @SmallScrollSizeType.setter
    def SmallScrollSizeType(self, value: DateTimeIntervalType) -> None: ...
    @Zoomable.setter
    def Zoomable(self, value: bool) -> None: ...
    @overload
    def Zoom(self, viewStart: float, viewEnd: float) -> None: ...
    @overload
    def Zoom(self, viewPosition: float, viewSize: float, viewSizeType: DateTimeIntervalType) -> None: ...
    @overload
    def Zoom(self, viewPosition: float, viewSize: float, viewSizeType: DateTimeIntervalType, saveState: bool) -> None: ...
    @overload
    def ZoomReset(self) -> None: ...
    @overload
    def ZoomReset(self, numberOfViews: int) -> None: ...


class AxisScrollBar(Object):
    def __init__(self): ...
    def Dispose(self) -> None: ...
    @property
    def Axis(self) -> Axis: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def ButtonColor(self) -> Color: ...
    @property
    def ButtonStyle(self) -> ScrollBarButtonStyles: ...
    @property
    def ChartArea(self) -> ChartArea: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def IsPositionedInside(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def Size(self) -> float: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @ButtonColor.setter
    def ButtonColor(self, value: Color) -> None: ...
    @ButtonStyle.setter
    def ButtonStyle(self, value: ScrollBarButtonStyles) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @IsPositionedInside.setter
    def IsPositionedInside(self, value: bool) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @Size.setter
    def Size(self, value: float) -> None: ...


class AxisType:
    Primary = 0
    Secondary = 1


class Border3DAnnotation(RectangleAnnotation):
    def __init__(self): ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def BorderSkin(self) -> BorderSkin: ...
    @BorderSkin.setter
    def BorderSkin(self, value: BorderSkin) -> None: ...


class BorderSkin(ChartElement):
    def __init__(self): ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackImage(self) -> str: ...
    @property
    def BackImageAlignment(self) -> ChartImageAlignmentStyle: ...
    @property
    def BackImageTransparentColor(self) -> Color: ...
    @property
    def BackImageWrapMode(self) -> ChartImageWrapMode: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def BorderColor(self) -> Color: ...
    @property
    def BorderDashStyle(self) -> ChartDashStyle: ...
    @property
    def BorderWidth(self) -> int: ...
    @property
    def PageColor(self) -> Color: ...
    @property
    def SkinStyle(self) -> BorderSkinStyle: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackImage.setter
    def BackImage(self, value: str) -> None: ...
    @BackImageAlignment.setter
    def BackImageAlignment(self, value: ChartImageAlignmentStyle) -> None: ...
    @BackImageTransparentColor.setter
    def BackImageTransparentColor(self, value: Color) -> None: ...
    @BackImageWrapMode.setter
    def BackImageWrapMode(self, value: ChartImageWrapMode) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @BorderColor.setter
    def BorderColor(self, value: Color) -> None: ...
    @BorderDashStyle.setter
    def BorderDashStyle(self, value: ChartDashStyle) -> None: ...
    @BorderWidth.setter
    def BorderWidth(self, value: int) -> None: ...
    @PageColor.setter
    def PageColor(self, value: Color) -> None: ...
    @SkinStyle.setter
    def SkinStyle(self, value: BorderSkinStyle) -> None: ...


class BorderSkinStyle:
    #None = 0
    Emboss = 1
    Raised = 2
    Sunken = 3
    FrameThin1 = 4
    FrameThin2 = 5
    FrameThin3 = 6
    FrameThin4 = 7
    FrameThin5 = 8
    FrameThin6 = 9
    FrameTitle1 = 10
    FrameTitle2 = 11
    FrameTitle3 = 12
    FrameTitle4 = 13
    FrameTitle5 = 14
    FrameTitle6 = 15
    FrameTitle7 = 16
    FrameTitle8 = 17


class BreakLineStyle:
    #None = 0
    Straight = 1
    Wave = 2
    Ragged = 3


class CalloutAnnotation(TextAnnotation):
    def __init__(self): ...
    @property
    def AnchorAlignment(self) -> ContentAlignment: ...
    @property
    def AnchorOffsetX(self) -> float: ...
    @property
    def AnchorOffsetY(self) -> float: ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def CalloutAnchorCap(self) -> LineAnchorCapStyle: ...
    @property
    def CalloutStyle(self) -> CalloutStyle: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def LineDashStyle(self) -> ChartDashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @AnchorAlignment.setter
    def AnchorAlignment(self, value: ContentAlignment) -> None: ...
    @AnchorOffsetX.setter
    def AnchorOffsetX(self, value: float) -> None: ...
    @AnchorOffsetY.setter
    def AnchorOffsetY(self, value: float) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @CalloutAnchorCap.setter
    def CalloutAnchorCap(self, value: LineAnchorCapStyle) -> None: ...
    @CalloutStyle.setter
    def CalloutStyle(self, value: CalloutStyle) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @LineDashStyle.setter
    def LineDashStyle(self, value: ChartDashStyle) -> None: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> None: ...


class CalloutStyle:
    SimpleLine = 0
    Borderline = 1
    Cloud = 2
    Rectangle = 3
    RoundedRectangle = 4
    Ellipse = 5
    Perspective = 6


class Chart(Control):
    def __init__(self): ...
    def add_AnnotationPlaced(self, value: EventHandler) -> None: ...
    def add_AnnotationPositionChanged(self, value: EventHandler) -> None: ...
    def add_AnnotationPositionChanging(self, value: EventHandler) -> None: ...
    def add_AnnotationSelectionChanged(self, value: EventHandler) -> None: ...
    def add_AnnotationTextChanged(self, value: EventHandler) -> None: ...
    def add_AxisScrollBarClicked(self, value: EventHandler) -> None: ...
    def add_AxisViewChanged(self, value: EventHandler) -> None: ...
    def add_AxisViewChanging(self, value: EventHandler) -> None: ...
    def add_CursorPositionChanged(self, value: EventHandler) -> None: ...
    def add_CursorPositionChanging(self, value: EventHandler) -> None: ...
    def add_Customize(self, value: EventHandler) -> None: ...
    def add_CustomizeLegend(self, value: EventHandler) -> None: ...
    def add_FormatNumber(self, value: EventHandler) -> None: ...
    def add_GetToolTipText(self, value: EventHandler) -> None: ...
    def add_PostPaint(self, value: EventHandler) -> None: ...
    def add_PrePaint(self, value: EventHandler) -> None: ...
    def add_SelectionRangeChanged(self, value: EventHandler) -> None: ...
    def add_SelectionRangeChanging(self, value: EventHandler) -> None: ...
    @overload
    def AlignDataPointsByAxisLabel(self) -> None: ...
    @overload
    def AlignDataPointsByAxisLabel(self, sortingOrder: PointSortOrder) -> None: ...
    @overload
    def AlignDataPointsByAxisLabel(self, series: str) -> None: ...
    @overload
    def AlignDataPointsByAxisLabel(self, series: str, sortingOrder: PointSortOrder) -> None: ...
    def ApplyPaletteColors(self) -> None: ...
    def BeginInit(self) -> None: ...
    def DataBind(self) -> None: ...
    @overload
    def DataBindCrossTable(self, dataSource: IEnumerable, seriesGroupByField: str, xField: str, yFields: str, otherFields: str) -> None: ...
    @overload
    def DataBindCrossTable(self, dataSource: IEnumerable, seriesGroupByField: str, xField: str, yFields: str, otherFields: str, sortingOrder: PointSortOrder) -> None: ...
    @overload
    def DataBindTable(self, dataSource: IEnumerable) -> None: ...
    @overload
    def DataBindTable(self, dataSource: IEnumerable, xField: str) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def Annotations(self) -> AnnotationCollection: ...
    @property
    def AntiAliasing(self) -> AntiAliasingStyles: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackImage(self) -> str: ...
    @property
    def BackImageAlignment(self) -> ChartImageAlignmentStyle: ...
    @property
    def BackImageTransparentColor(self) -> Color: ...
    @property
    def BackImageWrapMode(self) -> ChartImageWrapMode: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def BorderColor(self) -> Color: ...
    @property
    def BorderDashStyle(self) -> ChartDashStyle: ...
    @property
    def BorderlineColor(self) -> Color: ...
    @property
    def BorderlineDashStyle(self) -> ChartDashStyle: ...
    @property
    def BorderlineWidth(self) -> int: ...
    @property
    def BorderSkin(self) -> BorderSkin: ...
    @property
    def BorderWidth(self) -> int: ...
    @property
    def BuildNumber(self) -> str: ...
    @property
    def ChartAreas(self) -> ChartAreaCollection: ...
    @property
    def DataManipulator(self) -> DataManipulator: ...
    @property
    def DataSource(self) -> Object: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Images(self) -> NamedImagesCollection: ...
    @property
    def IsSoftShadows(self) -> bool: ...
    @property
    def Legends(self) -> LegendCollection: ...
    @property
    def Palette(self) -> ChartColorPalette: ...
    @property
    def PaletteCustomColors(self) -> Set(Color): ...
    @property
    def Printing(self) -> PrintingManager: ...
    @property
    def RenderingDpiX(self) -> float: ...
    @property
    def RenderingDpiY(self) -> float: ...
    @property
    def Serializer(self) -> ChartSerializer: ...
    @property
    def Series(self) -> SeriesCollection: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SuppressExceptions(self) -> bool: ...
    @property
    def TextAntiAliasingQuality(self) -> TextAntiAliasingQuality: ...
    @property
    def Titles(self) -> TitleCollection: ...
    def GetChartElementOutline(self, element: Object, elementType: ChartElementType) -> ChartElementOutline: ...
    def GetService(self, serviceType: Type) -> Object: ...
    @overload
    def HitTest(self, x: int, y: int) -> HitTestResult: ...
    @overload
    def HitTest(self, x: int, y: int, requestedElement: ChartElementType) -> HitTestResult: ...
    @overload
    def HitTest(self, x: int, y: int, ignoreTransparent: bool) -> HitTestResult: ...
    @overload
    def HitTest(self, x: int, y: int, ignoreTransparent: bool, requestedElement: Set(ChartElementType)) -> Set(HitTestResult): ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rectangle: Rectangle) -> None: ...
    @overload
    def LoadTemplate(self, stream: Stream) -> None: ...
    @overload
    def LoadTemplate(self, name: str) -> None: ...
    def Refresh(self) -> None: ...
    def remove_AnnotationPlaced(self, value: EventHandler) -> None: ...
    def remove_AnnotationPositionChanged(self, value: EventHandler) -> None: ...
    def remove_AnnotationPositionChanging(self, value: EventHandler) -> None: ...
    def remove_AnnotationSelectionChanged(self, value: EventHandler) -> None: ...
    def remove_AnnotationTextChanged(self, value: EventHandler) -> None: ...
    def remove_AxisScrollBarClicked(self, value: EventHandler) -> None: ...
    def remove_AxisViewChanged(self, value: EventHandler) -> None: ...
    def remove_AxisViewChanging(self, value: EventHandler) -> None: ...
    def remove_CursorPositionChanged(self, value: EventHandler) -> None: ...
    def remove_CursorPositionChanging(self, value: EventHandler) -> None: ...
    def remove_Customize(self, value: EventHandler) -> None: ...
    def remove_CustomizeLegend(self, value: EventHandler) -> None: ...
    def remove_FormatNumber(self, value: EventHandler) -> None: ...
    def remove_GetToolTipText(self, value: EventHandler) -> None: ...
    def remove_PostPaint(self, value: EventHandler) -> None: ...
    def remove_PrePaint(self, value: EventHandler) -> None: ...
    def remove_SelectionRangeChanged(self, value: EventHandler) -> None: ...
    def remove_SelectionRangeChanging(self, value: EventHandler) -> None: ...
    def ResetAutoValues(self) -> None: ...
    @overload
    def SaveImage(self, imageStream: Stream, format: ChartImageFormat) -> None: ...
    @overload
    def SaveImage(self, imageFileName: str, format: ChartImageFormat) -> None: ...
    @overload
    def SaveImage(self, imageFileName: str, format: ImageFormat) -> None: ...
    @overload
    def SaveImage(self, imageStream: Stream, format: ImageFormat) -> None: ...
    @AntiAliasing.setter
    def AntiAliasing(self, value: AntiAliasingStyles) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackImage.setter
    def BackImage(self, value: str) -> None: ...
    @BackImageAlignment.setter
    def BackImageAlignment(self, value: ChartImageAlignmentStyle) -> None: ...
    @BackImageTransparentColor.setter
    def BackImageTransparentColor(self, value: Color) -> None: ...
    @BackImageWrapMode.setter
    def BackImageWrapMode(self, value: ChartImageWrapMode) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @BorderColor.setter
    def BorderColor(self, value: Color) -> None: ...
    @BorderDashStyle.setter
    def BorderDashStyle(self, value: ChartDashStyle) -> None: ...
    @BorderlineColor.setter
    def BorderlineColor(self, value: Color) -> None: ...
    @BorderlineDashStyle.setter
    def BorderlineDashStyle(self, value: ChartDashStyle) -> None: ...
    @BorderlineWidth.setter
    def BorderlineWidth(self, value: int) -> None: ...
    @BorderSkin.setter
    def BorderSkin(self, value: BorderSkin) -> None: ...
    @BorderWidth.setter
    def BorderWidth(self, value: int) -> None: ...
    @DataSource.setter
    def DataSource(self, value: Object) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @IsSoftShadows.setter
    def IsSoftShadows(self, value: bool) -> None: ...
    @Palette.setter
    def Palette(self, value: ChartColorPalette) -> None: ...
    @PaletteCustomColors.setter
    def PaletteCustomColors(self, value: Set(Color)) -> None: ...
    @RenderingDpiX.setter
    def RenderingDpiX(self, value: float) -> None: ...
    @RenderingDpiY.setter
    def RenderingDpiY(self, value: float) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SuppressExceptions.setter
    def SuppressExceptions(self, value: bool) -> None: ...
    @TextAntiAliasingQuality.setter
    def TextAntiAliasingQuality(self, value: TextAntiAliasingQuality) -> None: ...
    def UpdateAnnotations(self) -> None: ...
    def UpdateCursor(self) -> None: ...


class ChartArea(ChartNamedElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def AlignmentOrientation(self) -> AreaAlignmentOrientations: ...
    @property
    def AlignmentStyle(self) -> AreaAlignmentStyles: ...
    @property
    def AlignWithChartArea(self) -> str: ...
    @property
    def Area3DStyle(self) -> ChartArea3DStyle: ...
    @property
    def Axes(self) -> Set(Axis): ...
    @property
    def AxisX(self) -> Axis: ...
    @property
    def AxisX2(self) -> Axis: ...
    @property
    def AxisY(self) -> Axis: ...
    @property
    def AxisY2(self) -> Axis: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackImage(self) -> str: ...
    @property
    def BackImageAlignment(self) -> ChartImageAlignmentStyle: ...
    @property
    def BackImageTransparentColor(self) -> Color: ...
    @property
    def BackImageWrapMode(self) -> ChartImageWrapMode: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def BorderColor(self) -> Color: ...
    @property
    def BorderDashStyle(self) -> ChartDashStyle: ...
    @property
    def BorderWidth(self) -> int: ...
    @property
    def CursorX(self) -> Cursor: ...
    @property
    def CursorY(self) -> Cursor: ...
    @property
    def InnerPlotPosition(self) -> ElementPosition: ...
    @property
    def IsSameFontSizeForAllAxes(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Position(self) -> ElementPosition: ...
    @property
    def ShadowColor(self) -> Color: ...
    @property
    def ShadowOffset(self) -> int: ...
    @property
    def Visible(self) -> bool: ...
    def GetSeriesDepth(self, series: Series) -> Single: ...
    def GetSeriesZPosition(self, series: Series) -> Single: ...
    def RecalculateAxesScale(self) -> None: ...
    @AlignmentOrientation.setter
    def AlignmentOrientation(self, value: AreaAlignmentOrientations) -> None: ...
    @AlignmentStyle.setter
    def AlignmentStyle(self, value: AreaAlignmentStyles) -> None: ...
    @AlignWithChartArea.setter
    def AlignWithChartArea(self, value: str) -> None: ...
    @Area3DStyle.setter
    def Area3DStyle(self, value: ChartArea3DStyle) -> None: ...
    @Axes.setter
    def Axes(self, value: Set(Axis)) -> None: ...
    @AxisX.setter
    def AxisX(self, value: Axis) -> None: ...
    @AxisX2.setter
    def AxisX2(self, value: Axis) -> None: ...
    @AxisY.setter
    def AxisY(self, value: Axis) -> None: ...
    @AxisY2.setter
    def AxisY2(self, value: Axis) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackImage.setter
    def BackImage(self, value: str) -> None: ...
    @BackImageAlignment.setter
    def BackImageAlignment(self, value: ChartImageAlignmentStyle) -> None: ...
    @BackImageTransparentColor.setter
    def BackImageTransparentColor(self, value: Color) -> None: ...
    @BackImageWrapMode.setter
    def BackImageWrapMode(self, value: ChartImageWrapMode) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @BorderColor.setter
    def BorderColor(self, value: Color) -> None: ...
    @BorderDashStyle.setter
    def BorderDashStyle(self, value: ChartDashStyle) -> None: ...
    @BorderWidth.setter
    def BorderWidth(self, value: int) -> None: ...
    @CursorX.setter
    def CursorX(self, value: Cursor) -> None: ...
    @CursorY.setter
    def CursorY(self, value: Cursor) -> None: ...
    @InnerPlotPosition.setter
    def InnerPlotPosition(self, value: ElementPosition) -> None: ...
    @IsSameFontSizeForAllAxes.setter
    def IsSameFontSizeForAllAxes(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Position.setter
    def Position(self, value: ElementPosition) -> None: ...
    @ShadowColor.setter
    def ShadowColor(self, value: Color) -> None: ...
    @ShadowOffset.setter
    def ShadowOffset(self, value: int) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    def TransformPoints(self, points: Set(Point3D)) -> None: ...


class ChartArea3DStyle(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, chartArea: ChartArea): ...
    @property
    def Enable3D(self) -> bool: ...
    @property
    def Inclination(self) -> int: ...
    @property
    def IsClustered(self) -> bool: ...
    @property
    def IsRightAngleAxes(self) -> bool: ...
    @property
    def LightStyle(self) -> LightStyle: ...
    @property
    def Perspective(self) -> int: ...
    @property
    def PointDepth(self) -> int: ...
    @property
    def PointGapDepth(self) -> int: ...
    @property
    def Rotation(self) -> int: ...
    @property
    def WallWidth(self) -> int: ...
    @Enable3D.setter
    def Enable3D(self, value: bool) -> None: ...
    @Inclination.setter
    def Inclination(self, value: int) -> None: ...
    @IsClustered.setter
    def IsClustered(self, value: bool) -> None: ...
    @IsRightAngleAxes.setter
    def IsRightAngleAxes(self, value: bool) -> None: ...
    @LightStyle.setter
    def LightStyle(self, value: LightStyle) -> None: ...
    @Perspective.setter
    def Perspective(self, value: int) -> None: ...
    @PointDepth.setter
    def PointDepth(self, value: int) -> None: ...
    @PointGapDepth.setter
    def PointGapDepth(self, value: int) -> None: ...
    @Rotation.setter
    def Rotation(self, value: int) -> None: ...
    @WallWidth.setter
    def WallWidth(self, value: int) -> None: ...


class ChartAreaCollection:
    @overload
    def Add(self, name: str) -> ChartArea: ...


class ChartColorPalette:
    #None = 0
    Bright = 1
    Grayscale = 2
    Excel = 3
    Light = 4
    Pastel = 5
    EarthTones = 6
    SemiTransparent = 7
    Berry = 8
    Chocolate = 9
    Fire = 10
    SeaGreen = 11
    BrightPastel = 12


class ChartDashStyle:
    NotSet = 0
    Dash = 1
    DashDot = 2
    DashDotDot = 3
    Dot = 4
    Solid = 5


class ChartElement(Object):
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Tag(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    def ToString(self) -> str: ...




class ChartElementOutline(Object):
    def Dispose(self) -> None: ...
    @property
    def Markers(self) -> ReadOnlyCollection: ...
    @property
    def OutlinePath(self) -> GraphicsPath: ...


class ChartElementType:
    Nothing = 0
    Title = 1
    PlottingArea = 2
    Axis = 3
    TickMarks = 4
    Gridlines = 5
    StripLines = 6
    AxisLabelImage = 7
    AxisLabels = 8
    AxisTitle = 9
    ScrollBarThumbTracker = 10
    ScrollBarSmallDecrement = 11
    ScrollBarSmallIncrement = 12
    ScrollBarLargeDecrement = 13
    ScrollBarLargeIncrement = 14
    ScrollBarZoomReset = 15
    DataPoint = 16
    DataPointLabel = 17
    LegendArea = 18
    LegendTitle = 19
    LegendHeader = 20
    LegendItem = 21
    Annotation = 22


class ChartGraphics(ChartElement):
    @property
    def Graphics(self) -> Graphics: ...
    def GetAbsolutePoint(self, point: PointF) -> PointF: ...
    def GetAbsoluteRectangle(self, rectangle: RectangleF) -> RectangleF: ...
    def GetAbsoluteSize(self, size: SizeF) -> SizeF: ...
    def GetPositionFromAxis(self, chartAreaName: str, axis: AxisName, axisValue: float) -> float: ...
    def GetRelativePoint(self, point: PointF) -> PointF: ...
    def GetRelativeRectangle(self, rectangle: RectangleF) -> RectangleF: ...
    def GetRelativeSize(self, size: SizeF) -> SizeF: ...
    @Graphics.setter
    def Graphics(self, value: Graphics) -> None: ...


class ChartHatchStyle:
    #None = 0
    BackwardDiagonal = 1
    Cross = 2
    DarkDownwardDiagonal = 3
    DarkHorizontal = 4
    DarkUpwardDiagonal = 5
    DarkVertical = 6
    DashedDownwardDiagonal = 7
    DashedHorizontal = 8
    DashedUpwardDiagonal = 9
    DashedVertical = 10
    DiagonalBrick = 11
    DiagonalCross = 12
    Divot = 13
    DottedDiamond = 14
    DottedGrid = 15
    ForwardDiagonal = 16
    Horizontal = 17
    HorizontalBrick = 18
    LargeCheckerBoard = 19
    LargeConfetti = 20
    LargeGrid = 21
    LightDownwardDiagonal = 22
    LightHorizontal = 23
    LightUpwardDiagonal = 24
    LightVertical = 25
    NarrowHorizontal = 26
    NarrowVertical = 27
    OutlinedDiamond = 28
    Percent05 = 29
    Percent10 = 30
    Percent20 = 31
    Percent25 = 32
    Percent30 = 33
    Percent40 = 34
    Percent50 = 35
    Percent60 = 36
    Percent70 = 37
    Percent75 = 38
    Percent80 = 39
    Percent90 = 40
    Plaid = 41
    Shingle = 42
    SmallCheckerBoard = 43
    SmallConfetti = 44
    SmallGrid = 45
    SolidDiamond = 46
    Sphere = 47
    Trellis = 48
    Vertical = 49
    Wave = 50
    Weave = 51
    WideDownwardDiagonal = 52
    WideUpwardDiagonal = 53
    ZigZag = 54


class ChartImageAlignmentStyle:
    TopLeft = 0
    Top = 1
    TopRight = 2
    Right = 3
    BottomRight = 4
    Bottom = 5
    BottomLeft = 6
    Left = 7
    Center = 8


class ChartImageFormat:
    Jpeg = 0
    Png = 1
    Bmp = 2
    Tiff = 3
    Gif = 4
    Emf = 5
    EmfDual = 6
    EmfPlus = 7


class ChartImageWrapMode:
    Tile = 0
    TileFlipX = 1
    TileFlipY = 2
    TileFlipXY = 3
    Scaled = 4
    Unscaled = 100


class ChartNamedElement(ChartElement):
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...




class ChartPaintEventArgs(EventArgs):
    @property
    def Chart(self) -> Chart: ...
    @property
    def ChartElement(self) -> Object: ...
    @property
    def ChartGraphics(self) -> ChartGraphics: ...
    @property
    def Position(self) -> ElementPosition: ...


class ChartSerializer(Object):
    @property
    def Content(self) -> SerializationContents: ...
    @property
    def Format(self) -> SerializationFormat: ...
    @property
    def IsResetWhenLoading(self) -> bool: ...
    @property
    def IsTemplateMode(self) -> bool: ...
    @property
    def IsUnknownAttributeIgnored(self) -> bool: ...
    @property
    def NonSerializableContent(self) -> str: ...
    @property
    def SerializableContent(self) -> str: ...
    @overload
    def Load(self, reader: XmlReader) -> None: ...
    @overload
    def Load(self, stream: Stream) -> None: ...
    @overload
    def Load(self, reader: TextReader) -> None: ...
    @overload
    def Load(self, fileName: str) -> None: ...
    def Reset(self) -> None: ...
    @overload
    def Save(self, writer: TextWriter) -> None: ...
    @overload
    def Save(self, writer: XmlWriter) -> None: ...
    @overload
    def Save(self, fileName: str) -> None: ...
    @overload
    def Save(self, stream: Stream) -> None: ...
    @Content.setter
    def Content(self, value: SerializationContents) -> None: ...
    @Format.setter
    def Format(self, value: SerializationFormat) -> None: ...
    @IsResetWhenLoading.setter
    def IsResetWhenLoading(self, value: bool) -> None: ...
    @IsTemplateMode.setter
    def IsTemplateMode(self, value: bool) -> None: ...
    @IsUnknownAttributeIgnored.setter
    def IsUnknownAttributeIgnored(self, value: bool) -> None: ...
    @NonSerializableContent.setter
    def NonSerializableContent(self, value: str) -> None: ...
    @SerializableContent.setter
    def SerializableContent(self, value: str) -> None: ...


class ChartValueType:
    Auto = 0
    Double = 1
    Single = 2
    Int32 = 3
    Int64 = 4
    UInt32 = 5
    UInt64 = 6
    String = 7
    DateTime = 8
    Date = 9
    Time = 10
    DateTimeOffset = 11


class CompareMethod:
    MoreThan = 0
    LessThan = 1
    EqualTo = 2
    MoreThanOrEqualTo = 3
    LessThanOrEqualTo = 4
    NotEqualTo = 5


class Cursor(Object):
    def __init__(self): ...
    def Dispose(self) -> None: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AxisType(self) -> AxisType: ...
    @property
    def Interval(self) -> float: ...
    @property
    def IntervalOffset(self) -> float: ...
    @property
    def IntervalOffsetType(self) -> DateTimeIntervalType: ...
    @property
    def IntervalType(self) -> DateTimeIntervalType: ...
    @property
    def IsUserEnabled(self) -> bool: ...
    @property
    def IsUserSelectionEnabled(self) -> bool: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def LineDashStyle(self) -> ChartDashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @property
    def Position(self) -> float: ...
    @property
    def SelectionColor(self) -> Color: ...
    @property
    def SelectionEnd(self) -> float: ...
    @property
    def SelectionStart(self) -> float: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AxisType.setter
    def AxisType(self, value: AxisType) -> None: ...
    @Interval.setter
    def Interval(self, value: float) -> None: ...
    @IntervalOffset.setter
    def IntervalOffset(self, value: float) -> None: ...
    @IntervalOffsetType.setter
    def IntervalOffsetType(self, value: DateTimeIntervalType) -> None: ...
    @IntervalType.setter
    def IntervalType(self, value: DateTimeIntervalType) -> None: ...
    @IsUserEnabled.setter
    def IsUserEnabled(self, value: bool) -> None: ...
    @IsUserSelectionEnabled.setter
    def IsUserSelectionEnabled(self, value: bool) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @LineDashStyle.setter
    def LineDashStyle(self, value: ChartDashStyle) -> None: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> None: ...
    @Position.setter
    def Position(self, value: float) -> None: ...
    @SelectionColor.setter
    def SelectionColor(self, value: Color) -> None: ...
    @SelectionEnd.setter
    def SelectionEnd(self, value: float) -> None: ...
    @SelectionStart.setter
    def SelectionStart(self, value: float) -> None: ...
    def SetCursorPixelPosition(self, point: PointF, roundToBoundary: bool) -> None: ...
    def SetCursorPosition(self, newPosition: float) -> None: ...
    def SetSelectionPixelPosition(self, startPoint: PointF, endPoint: PointF, roundToBoundary: bool) -> None: ...
    def SetSelectionPosition(self, newStart: float, newEnd: float) -> None: ...


class CursorEventArgs(EventArgs):
    @overload
    def __init__(self, chartArea: ChartArea, axis: Axis, newPosition: float): ...
    @overload
    def __init__(self, chartArea: ChartArea, axis: Axis, newSelectionStart: float, newSelectionEnd: float): ...
    @property
    def Axis(self) -> Axis: ...
    @property
    def ChartArea(self) -> ChartArea: ...
    @property
    def NewPosition(self) -> float: ...
    @property
    def NewSelectionEnd(self) -> float: ...
    @property
    def NewSelectionStart(self) -> float: ...
    @NewPosition.setter
    def NewPosition(self, value: float) -> None: ...
    @NewSelectionEnd.setter
    def NewSelectionEnd(self, value: float) -> None: ...
    @NewSelectionStart.setter
    def NewSelectionStart(self, value: float) -> None: ...


class CustomizeLegendEventArgs(EventArgs):
    @overload
    def __init__(self, legendItems: LegendItemsCollection): ...
    @overload
    def __init__(self, legendItems: LegendItemsCollection, legendName: str): ...
    @property
    def LegendItems(self) -> LegendItemsCollection: ...
    @property
    def LegendName(self) -> str: ...


class CustomLabel(ChartNamedElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, fromPosition: float, toPosition: float, text: str, labelRow: int, markStyle: LabelMarkStyle): ...
    @overload
    def __init__(self, fromPosition: float, toPosition: float, text: str, labelRow: int, markStyle: LabelMarkStyle, gridTick: GridTickTypes): ...
    def Clone(self) -> CustomLabel: ...
    @property
    def Axis(self) -> Axis: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FromPosition(self) -> float: ...
    @property
    def GridTicks(self) -> GridTickTypes: ...
    @property
    def Image(self) -> str: ...
    @property
    def ImageTransparentColor(self) -> Color: ...
    @property
    def LabelMark(self) -> LabelMarkStyle: ...
    @property
    def MarkColor(self) -> Color: ...
    @property
    def Name(self) -> str: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def ToPosition(self) -> float: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @FromPosition.setter
    def FromPosition(self, value: float) -> None: ...
    @GridTicks.setter
    def GridTicks(self, value: GridTickTypes) -> None: ...
    @Image.setter
    def Image(self, value: str) -> None: ...
    @ImageTransparentColor.setter
    def ImageTransparentColor(self, value: Color) -> None: ...
    @LabelMark.setter
    def LabelMark(self, value: LabelMarkStyle) -> None: ...
    @MarkColor.setter
    def MarkColor(self, value: Color) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RowIndex.setter
    def RowIndex(self, value: int) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @ToPosition.setter
    def ToPosition(self, value: float) -> None: ...


class CustomLabelsCollection:
    @overload
    def Add(self, labelsStep: float, intervalType: DateTimeIntervalType) -> None: ...
    @overload
    def Add(self, fromPosition: float, toPosition: float, text: str) -> CustomLabel: ...
    @overload
    def Add(self, labelsStep: float, intervalType: DateTimeIntervalType, format: str) -> None: ...
    @overload
    def Add(self, fromPosition: float, toPosition: float, text: str, rowIndex: int, markStyle: LabelMarkStyle) -> CustomLabel: ...
    @overload
    def Add(self, labelsStep: float, intervalType: DateTimeIntervalType, format: str, rowIndex: int, markStyle: LabelMarkStyle) -> None: ...
    @overload
    def Add(self, fromPosition: float, toPosition: float, text: str, rowIndex: int, markStyle: LabelMarkStyle, gridTick: GridTickTypes) -> CustomLabel: ...
    @overload
    def Add(self, labelsStep: float, intervalType: DateTimeIntervalType, min: float, max: float, format: str, rowIndex: int, markStyle: LabelMarkStyle) -> None: ...


class CustomProperties(Object):
    pass


class DataFormula(Object):
    def __init__(self): ...
    def CopySeriesValues(self, inputSeries: str, outputSeries: str) -> None: ...
    @overload
    def FinancialFormula(self, formulaName: FinancialFormula, inputSeries: Series) -> None: ...
    @overload
    def FinancialFormula(self, formulaName: FinancialFormula, inputSeries: str) -> None: ...
    @overload
    def FinancialFormula(self, formulaName: FinancialFormula, inputSeries: Series, outputSeries: Series) -> None: ...
    @overload
    def FinancialFormula(self, formulaName: FinancialFormula, inputSeries: str, outputSeries: str) -> None: ...
    @overload
    def FinancialFormula(self, formulaName: FinancialFormula, parameters: str, inputSeries: Series, outputSeries: Series) -> None: ...
    @overload
    def FinancialFormula(self, formulaName: FinancialFormula, parameters: str, inputSeries: str, outputSeries: str) -> None: ...
    @property
    def IsEmptyPointIgnored(self) -> bool: ...
    @property
    def IsStartFromFirst(self) -> bool: ...
    @property
    def Statistics(self) -> StatisticFormula: ...
    @IsEmptyPointIgnored.setter
    def IsEmptyPointIgnored(self, value: bool) -> None: ...
    @IsStartFromFirst.setter
    def IsStartFromFirst(self, value: bool) -> None: ...


class DataManipulator(DataFormula):
    def __init__(self): ...
    @overload
    def ExportSeriesValues(self) -> DataSet: ...
    @overload
    def ExportSeriesValues(self, series: Series) -> DataSet: ...
    @overload
    def ExportSeriesValues(self, seriesNames: str) -> DataSet: ...
    @overload
    def Filter(self, filterInterface: IDataPointFilter, inputSeriesNames: str) -> None: ...
    @overload
    def Filter(self, filterInterface: IDataPointFilter, inputSeries: Series) -> None: ...
    @overload
    def Filter(self, dateRange: DateRangeType, rangeElements: str, inputSeriesNames: str) -> None: ...
    @overload
    def Filter(self, compareMethod: CompareMethod, compareValue: float, inputSeries: Series) -> None: ...
    @overload
    def Filter(self, compareMethod: CompareMethod, compareValue: float, inputSeriesNames: str) -> None: ...
    @overload
    def Filter(self, filterInterface: IDataPointFilter, inputSeries: Series, outputSeries: Series) -> None: ...
    @overload
    def Filter(self, filterInterface: IDataPointFilter, inputSeriesNames: str, outputSeriesNames: str) -> None: ...
    @overload
    def Filter(self, dateRange: DateRangeType, rangeElements: str, inputSeries: Series) -> None: ...
    @overload
    def Filter(self, compareMethod: CompareMethod, compareValue: float, inputSeries: Series, outputSeries: Series) -> None: ...
    @overload
    def Filter(self, compareMethod: CompareMethod, compareValue: float, inputSeriesNames: str, outputSeriesNames: str) -> None: ...
    @overload
    def Filter(self, dateRange: DateRangeType, rangeElements: str, inputSeries: Series, outputSeries: Series) -> None: ...
    @overload
    def Filter(self, dateRange: DateRangeType, rangeElements: str, inputSeriesNames: str, outputSeriesNames: str) -> None: ...
    @overload
    def Filter(self, compareMethod: CompareMethod, compareValue: float, inputSeries: Series, outputSeries: Series, usingValue: str) -> None: ...
    @overload
    def Filter(self, compareMethod: CompareMethod, compareValue: float, inputSeriesNames: str, outputSeriesNames: str, usingValue: str) -> None: ...
    @overload
    def FilterTopN(self, pointCount: int, inputSeries: Series) -> None: ...
    @overload
    def FilterTopN(self, pointCount: int, inputSeriesNames: str) -> None: ...
    @overload
    def FilterTopN(self, pointCount: int, inputSeriesNames: str, outputSeriesNames: str) -> None: ...
    @overload
    def FilterTopN(self, pointCount: int, inputSeries: Series, outputSeries: Series) -> None: ...
    @overload
    def FilterTopN(self, pointCount: int, inputSeries: Series, outputSeries: Series, usingValue: str) -> None: ...
    @overload
    def FilterTopN(self, pointCount: int, inputSeriesNames: str, outputSeriesNames: str, usingValue: str) -> None: ...
    @overload
    def FilterTopN(self, pointCount: int, inputSeriesNames: str, outputSeriesNames: str, usingValue: str, getTopValues: bool) -> None: ...
    @overload
    def FilterTopN(self, pointCount: int, inputSeries: Series, outputSeries: Series, usingValue: str, getTopValues: bool) -> None: ...
    @property
    def FilterMatchedPoints(self) -> bool: ...
    @property
    def FilterSetEmptyPoints(self) -> bool: ...
    @overload
    def Group(self, formula: str, interval: float, intervalType: IntervalType, inputSeries: Series) -> None: ...
    @overload
    def Group(self, formula: str, interval: float, intervalType: IntervalType, inputSeriesName: str) -> None: ...
    @overload
    def Group(self, formula: str, interval: float, intervalType: IntervalType, inputSeriesName: str, outputSeriesName: str) -> None: ...
    @overload
    def Group(self, formula: str, interval: float, intervalType: IntervalType, inputSeries: Series, outputSeries: Series) -> None: ...
    @overload
    def Group(self, formula: str, interval: float, intervalType: IntervalType, intervalOffset: float, intervalOffsetType: IntervalType, inputSeriesName: str) -> None: ...
    @overload
    def Group(self, formula: str, interval: float, intervalType: IntervalType, intervalOffset: float, intervalOffsetType: IntervalType, inputSeries: Series) -> None: ...
    @overload
    def Group(self, formula: str, interval: float, intervalType: IntervalType, intervalOffset: float, intervalOffsetType: IntervalType, inputSeriesName: str, outputSeriesName: str) -> None: ...
    @overload
    def Group(self, formula: str, interval: float, intervalType: IntervalType, intervalOffset: float, intervalOffsetType: IntervalType, inputSeries: Series, outputSeries: Series) -> None: ...
    @overload
    def GroupByAxisLabel(self, formula: str, inputSeries: Series) -> None: ...
    @overload
    def GroupByAxisLabel(self, formula: str, inputSeriesName: str) -> None: ...
    @overload
    def GroupByAxisLabel(self, formula: str, inputSeries: Series, outputSeries: Series) -> None: ...
    @overload
    def GroupByAxisLabel(self, formula: str, inputSeriesName: str, outputSeriesName: str) -> None: ...
    @overload
    def InsertEmptyPoints(self, interval: float, intervalType: IntervalType, series: Series) -> None: ...
    @overload
    def InsertEmptyPoints(self, interval: float, intervalType: IntervalType, seriesName: str) -> None: ...
    @overload
    def InsertEmptyPoints(self, interval: float, intervalType: IntervalType, intervalOffset: float, intervalOffsetType: IntervalType, series: Series) -> None: ...
    @overload
    def InsertEmptyPoints(self, interval: float, intervalType: IntervalType, intervalOffset: float, intervalOffsetType: IntervalType, seriesName: str) -> None: ...
    @overload
    def InsertEmptyPoints(self, interval: float, intervalType: IntervalType, intervalOffset: float, intervalOffsetType: IntervalType, fromXValue: float, toXValue: float, seriesName: str) -> None: ...
    @overload
    def InsertEmptyPoints(self, interval: float, intervalType: IntervalType, intervalOffset: float, intervalOffsetType: IntervalType, fromXValue: float, toXValue: float, series: Series) -> None: ...
    @FilterMatchedPoints.setter
    def FilterMatchedPoints(self, value: bool) -> None: ...
    @FilterSetEmptyPoints.setter
    def FilterSetEmptyPoints(self, value: bool) -> None: ...
    @overload
    def Sort(self, pointSortOrder: PointSortOrder, series: Series) -> None: ...
    @overload
    def Sort(self, comparer: IComparer, seriesName: str) -> None: ...
    @overload
    def Sort(self, comparer: IComparer, series: Series) -> None: ...
    @overload
    def Sort(self, pointSortOrder: PointSortOrder, seriesName: str) -> None: ...
    @overload
    def Sort(self, pointSortOrder: PointSortOrder, sortBy: str, seriesName: str) -> None: ...
    @overload
    def Sort(self, pointSortOrder: PointSortOrder, sortBy: str, series: Series) -> None: ...


class DataPoint(DataPointCustomProperties):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, series: Series): ...
    @overload
    def __init__(self, xValue: float, yValue: float): ...
    @overload
    def __init__(self, xValue: float, yValues: Set(float)): ...
    @overload
    def __init__(self, xValue: float, yValues: str): ...
    def Clone(self) -> DataPoint: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def XValue(self) -> float: ...
    @property
    def YValues(self) -> Set(float): ...
    def GetValueByName(self, valueName: str) -> float: ...
    @IsEmpty.setter
    def IsEmpty(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @XValue.setter
    def XValue(self, value: float) -> None: ...
    @YValues.setter
    def YValues(self, value: Set(float)) -> None: ...
    def SetValueXY(self, xValue: Object, yValue: Set(Object)) -> None: ...
    def SetValueY(self, yValue: Set(Object)) -> None: ...


class DataPointCollection:
    @overload
    def Add(self, y: Set(float)) -> DataPoint: ...
    @overload
    def AddXY(self, xValue: float, yValue: float) -> int: ...
    @overload
    def AddXY(self, xValue: Object, yValue: Set(Object)) -> int: ...
    @overload
    def AddY(self, yValue: float) -> int: ...
    @overload
    def AddY(self, yValue: Set(Object)) -> int: ...
    def DataBind(self, dataSource: IEnumerable, xField: str, yFields: str, otherFields: str) -> None: ...
    @overload
    def DataBindXY(self, xValue: IEnumerable, yValues: Set(IEnumerable)) -> None: ...
    @overload
    def DataBindXY(self, xValue: IEnumerable, xField: str, yValue: IEnumerable, yFields: str) -> None: ...
    @overload
    def DataBindY(self, yValue: Set(IEnumerable)) -> None: ...
    @overload
    def DataBindY(self, yValue: IEnumerable, yFields: str) -> None: ...
    @overload
    def FindAllByValue(self, valueToFind: float) -> Iterable[DataPoint]: ...
    @overload
    def FindAllByValue(self, valueToFind: float, useValue: str) -> Iterable[DataPoint]: ...
    @overload
    def FindAllByValue(self, valueToFind: float, useValue: str, startIndex: int) -> Iterable[DataPoint]: ...
    @overload
    def FindByValue(self, valueToFind: float) -> DataPoint: ...
    @overload
    def FindByValue(self, valueToFind: float, useValue: str) -> DataPoint: ...
    @overload
    def FindByValue(self, valueToFind: float, useValue: str, startIndex: int) -> DataPoint: ...
    @overload
    def FindMaxByValue(self) -> DataPoint: ...
    @overload
    def FindMaxByValue(self, useValue: str) -> DataPoint: ...
    @overload
    def FindMaxByValue(self, useValue: str, startIndex: int) -> DataPoint: ...
    @overload
    def FindMinByValue(self) -> DataPoint: ...
    @overload
    def FindMinByValue(self, useValue: str) -> DataPoint: ...
    @overload
    def FindMinByValue(self, useValue: str, startIndex: int) -> DataPoint: ...
    def InsertXY(self, index: int, xValue: Object, yValue: Set(Object)) -> None: ...
    def InsertY(self, index: int, yValue: Set(Object)) -> None: ...


class DataPointComparer(Object):
    def __init__(self, series: Series, sortOrder: PointSortOrder, sortBy: str): ...
    def Compare(self, x: DataPoint, y: DataPoint) -> int: ...


class DataPointCustomProperties(ChartNamedElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, series: Series, pointProperties: bool): ...
    def DeleteCustomProperty(self, name: str) -> None: ...
    @property
    def AxisLabel(self) -> str: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackImage(self) -> str: ...
    @property
    def BackImageAlignment(self) -> ChartImageAlignmentStyle: ...
    @property
    def BackImageTransparentColor(self) -> Color: ...
    @property
    def BackImageWrapMode(self) -> ChartImageWrapMode: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def BorderColor(self) -> Color: ...
    @property
    def BorderDashStyle(self) -> ChartDashStyle: ...
    @property
    def BorderWidth(self) -> int: ...
    @property
    def Color(self) -> Color: ...
    @property
    def CustomProperties(self) -> str: ...
    @property
    def CustomPropertiesExtended(self) -> CustomProperties: ...
    @property
    def Font(self) -> Font: ...
    @property
    def IsValueShownAsLabel(self) -> bool: ...
    @property
    def IsVisibleInLegend(self) -> bool: ...
    @property
    def Item(self, name: str) -> str: ...
    @property
    def Item(self, index: int) -> str: ...
    @property
    def Label(self) -> str: ...
    @property
    def LabelAngle(self) -> int: ...
    @property
    def LabelBackColor(self) -> Color: ...
    @property
    def LabelBorderColor(self) -> Color: ...
    @property
    def LabelBorderDashStyle(self) -> ChartDashStyle: ...
    @property
    def LabelBorderWidth(self) -> int: ...
    @property
    def LabelForeColor(self) -> Color: ...
    @property
    def LabelFormat(self) -> str: ...
    @property
    def LabelToolTip(self) -> str: ...
    @property
    def LegendText(self) -> str: ...
    @property
    def LegendToolTip(self) -> str: ...
    @property
    def MarkerBorderColor(self) -> Color: ...
    @property
    def MarkerBorderWidth(self) -> int: ...
    @property
    def MarkerColor(self) -> Color: ...
    @property
    def MarkerImage(self) -> str: ...
    @property
    def MarkerImageTransparentColor(self) -> Color: ...
    @property
    def MarkerSize(self) -> int: ...
    @property
    def MarkerStyle(self) -> MarkerStyle: ...
    @property
    def ToolTip(self) -> str: ...
    def GetCustomProperty(self, name: str) -> str: ...
    def IsCustomPropertySet(self, name: str) -> bool: ...
    def ResetIsValueShownAsLabel(self) -> None: ...
    def ResetIsVisibleInLegend(self) -> None: ...
    @AxisLabel.setter
    def AxisLabel(self, value: str) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackImage.setter
    def BackImage(self, value: str) -> None: ...
    @BackImageAlignment.setter
    def BackImageAlignment(self, value: ChartImageAlignmentStyle) -> None: ...
    @BackImageTransparentColor.setter
    def BackImageTransparentColor(self, value: Color) -> None: ...
    @BackImageWrapMode.setter
    def BackImageWrapMode(self, value: ChartImageWrapMode) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @BorderColor.setter
    def BorderColor(self, value: Color) -> None: ...
    @BorderDashStyle.setter
    def BorderDashStyle(self, value: ChartDashStyle) -> None: ...
    @BorderWidth.setter
    def BorderWidth(self, value: int) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @CustomProperties.setter
    def CustomProperties(self, value: str) -> None: ...
    @CustomPropertiesExtended.setter
    def CustomPropertiesExtended(self, value: CustomProperties) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @IsValueShownAsLabel.setter
    def IsValueShownAsLabel(self, value: bool) -> None: ...
    @IsVisibleInLegend.setter
    def IsVisibleInLegend(self, value: bool) -> None: ...
    @Item.setter
    def Item(self, name: str, value: str) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...
    @LabelAngle.setter
    def LabelAngle(self, value: int) -> None: ...
    @LabelBackColor.setter
    def LabelBackColor(self, value: Color) -> None: ...
    @LabelBorderColor.setter
    def LabelBorderColor(self, value: Color) -> None: ...
    @LabelBorderDashStyle.setter
    def LabelBorderDashStyle(self, value: ChartDashStyle) -> None: ...
    @LabelBorderWidth.setter
    def LabelBorderWidth(self, value: int) -> None: ...
    @LabelForeColor.setter
    def LabelForeColor(self, value: Color) -> None: ...
    @LabelFormat.setter
    def LabelFormat(self, value: str) -> None: ...
    @LabelToolTip.setter
    def LabelToolTip(self, value: str) -> None: ...
    @LegendText.setter
    def LegendText(self, value: str) -> None: ...
    @LegendToolTip.setter
    def LegendToolTip(self, value: str) -> None: ...
    @MarkerBorderColor.setter
    def MarkerBorderColor(self, value: Color) -> None: ...
    @MarkerBorderWidth.setter
    def MarkerBorderWidth(self, value: int) -> None: ...
    @MarkerColor.setter
    def MarkerColor(self, value: Color) -> None: ...
    @MarkerImage.setter
    def MarkerImage(self, value: str) -> None: ...
    @MarkerImageTransparentColor.setter
    def MarkerImageTransparentColor(self, value: Color) -> None: ...
    @MarkerSize.setter
    def MarkerSize(self, value: int) -> None: ...
    @MarkerStyle.setter
    def MarkerStyle(self, value: MarkerStyle) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    def SetCustomProperty(self, name: str, propertyValue: str) -> None: ...
    def SetDefault(self, clearAll: bool) -> None: ...


class DateRangeType:
    Year = 0
    Month = 1
    DayOfWeek = 2
    DayOfMonth = 3
    Hour = 4
    Minute = 5


class DateTimeIntervalType:
    Auto = 0
    Number = 1
    Years = 2
    Months = 3
    Weeks = 4
    Days = 5
    Hours = 6
    Minutes = 7
    Seconds = 8
    Milliseconds = 9
    NotSet = 10


class Docking:
    Top = 0
    Right = 1
    Bottom = 2
    Left = 3


class ElementPosition(ChartElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, x: Single, y: Single, width: Single, height: Single): ...
    def FromRectangleF(self, rect: RectangleF) -> None: ...
    @property
    def Auto(self) -> bool: ...
    @property
    def Bottom(self) -> Single: ...
    @property
    def Height(self) -> Single: ...
    @property
    def Right(self) -> Single: ...
    @property
    def Size(self) -> SizeF: ...
    @property
    def Width(self) -> Single: ...
    @property
    def X(self) -> Single: ...
    @property
    def Y(self) -> Single: ...
    @Auto.setter
    def Auto(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: Single) -> None: ...
    @Width.setter
    def Width(self, value: Single) -> None: ...
    @X.setter
    def X(self, value: Single) -> None: ...
    @Y.setter
    def Y(self, value: Single) -> None: ...
    def ToRectangleF(self) -> RectangleF: ...


class EllipseAnnotation(RectangleAnnotation):
    def __init__(self): ...
    @property
    def AnnotationType(self) -> str: ...


class FinancialFormula:
    AccumulationDistribution = 0
    AverageTrueRange = 1
    BollingerBands = 2
    ChaikinOscillator = 3
    CommodityChannelIndex = 4
    DetrendedPriceOscillator = 5
    EaseOfMovement = 6
    Envelopes = 7
    ExponentialMovingAverage = 8
    Forecasting = 9
    MovingAverageConvergenceDivergence = 10
    MassIndex = 11
    MedianPrice = 12
    MoneyFlow = 13
    NegativeVolumeIndex = 14
    OnBalanceVolume = 15
    Performance = 16
    PositiveVolumeIndex = 17
    PriceVolumeTrend = 18
    RateOfChange = 19
    RelativeStrengthIndex = 20
    MovingAverage = 21
    StandardDeviation = 22
    StochasticIndicator = 23
    TriangularMovingAverage = 24
    TripleExponentialMovingAverage = 25
    TypicalPrice = 26
    VolatilityChaikins = 27
    VolumeOscillator = 28
    WeightedClose = 29
    WeightedMovingAverage = 30
    WilliamsR = 31


class FormatNumberEventArgs(EventArgs):
    @property
    def ElementType(self) -> ChartElementType: ...
    @property
    def Format(self) -> str: ...
    @property
    def LocalizedValue(self) -> str: ...
    @property
    def SenderTag(self) -> Object: ...
    @property
    def Value(self) -> float: ...
    @property
    def ValueType(self) -> ChartValueType: ...
    @LocalizedValue.setter
    def LocalizedValue(self, value: str) -> None: ...


class FTestResult(Object):
    def __init__(self): ...
    @property
    def FCriticalValueOneTail(self) -> float: ...
    @property
    def FirstSeriesMean(self) -> float: ...
    @property
    def FirstSeriesVariance(self) -> float: ...
    @property
    def FValue(self) -> float: ...
    @property
    def ProbabilityFOneTail(self) -> float: ...
    @property
    def SecondSeriesMean(self) -> float: ...
    @property
    def SecondSeriesVariance(self) -> float: ...


class GradientStyle:
    #None = 0
    LeftRight = 1
    TopBottom = 2
    Center = 3
    DiagonalLeft = 4
    DiagonalRight = 5
    HorizontalCenter = 6
    VerticalCenter = 7


class Grid(Object):
    def __init__(self): ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Interval(self) -> float: ...
    @property
    def IntervalOffset(self) -> float: ...
    @property
    def IntervalOffsetType(self) -> DateTimeIntervalType: ...
    @property
    def IntervalType(self) -> DateTimeIntervalType: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def LineDashStyle(self) -> ChartDashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Interval.setter
    def Interval(self, value: float) -> None: ...
    @IntervalOffset.setter
    def IntervalOffset(self, value: float) -> None: ...
    @IntervalOffsetType.setter
    def IntervalOffsetType(self, value: DateTimeIntervalType) -> None: ...
    @IntervalType.setter
    def IntervalType(self, value: DateTimeIntervalType) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @LineDashStyle.setter
    def LineDashStyle(self, value: ChartDashStyle) -> None: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> None: ...


class GridTickTypes:
    #None = 0
    TickMark = 1
    Gridline = 2
    All = 3


class HitTestResult(Object):
    def __init__(self): ...
    @property
    def Axis(self) -> Axis: ...
    @property
    def ChartArea(self) -> ChartArea: ...
    @property
    def ChartElementType(self) -> ChartElementType: ...
    @property
    def Object(self) -> Object: ...
    @property
    def PointIndex(self) -> int: ...
    @property
    def Series(self) -> Series: ...
    @property
    def SubObject(self) -> Object: ...
    @Axis.setter
    def Axis(self, value: Axis) -> None: ...
    @ChartArea.setter
    def ChartArea(self, value: ChartArea) -> None: ...
    @ChartElementType.setter
    def ChartElementType(self, value: ChartElementType) -> None: ...
    @Object.setter
    def Object(self, value: Object) -> None: ...
    @PointIndex.setter
    def PointIndex(self, value: int) -> None: ...
    @Series.setter
    def Series(self, value: Series) -> None: ...
    @SubObject.setter
    def SubObject(self, value: Object) -> None: ...


class HorizontalLineAnnotation(LineAnnotation):
    def __init__(self): ...
    @property
    def AnnotationType(self) -> str: ...


class IDataPointFilter:
    def FilterDataPoint(self, point: DataPoint, series: Series, pointIndex: int) -> bool: ...


class ImageAnnotation(Annotation):
    def __init__(self): ...
    @property
    def Alignment(self) -> ContentAlignment: ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Image(self) -> str: ...
    @property
    def ImageTransparentColor(self) -> Color: ...
    @property
    def ImageWrapMode(self) -> ChartImageWrapMode: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def LineDashStyle(self) -> ChartDashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @property
    def TextStyle(self) -> TextStyle: ...
    @Alignment.setter
    def Alignment(self, value: ContentAlignment) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Image.setter
    def Image(self, value: str) -> None: ...
    @ImageTransparentColor.setter
    def ImageTransparentColor(self, value: Color) -> None: ...
    @ImageWrapMode.setter
    def ImageWrapMode(self, value: ChartImageWrapMode) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @LineDashStyle.setter
    def LineDashStyle(self, value: ChartDashStyle) -> None: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value: TextStyle) -> None: ...


class IntervalAutoMode:
    FixedCount = 0
    VariableCount = 1


class IntervalType:
    Number = 0
    Years = 1
    Months = 2
    Weeks = 3
    Days = 4
    Hours = 5
    Minutes = 6
    Seconds = 7
    Milliseconds = 8


class LabelAlignmentStyles:
    Top = 1
    Bottom = 2
    Right = 4
    Left = 8
    TopLeft = 16
    TopRight = 32
    BottomLeft = 64
    BottomRight = 128
    Center = 256


class LabelAutoFitStyles:
    #None = 0
    IncreaseFont = 1
    DecreaseFont = 2
    StaggeredLabels = 4
    LabelsAngleStep30 = 8
    LabelsAngleStep45 = 16
    LabelsAngleStep90 = 32
    WordWrap = 64


class LabelCalloutStyle:
    #None = 0
    Underlined = 1
    Box = 2


class LabelMarkStyle:
    #None = 0
    SideMark = 1
    LineSideMark = 2
    Box = 3


class LabelOutsidePlotAreaStyle:
    Yes = 0
    No = 1
    Partial = 2


class LabelStyle(ChartElement):
    def __init__(self): ...
    @property
    def Angle(self) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Format(self) -> str: ...
    @property
    def Interval(self) -> float: ...
    @property
    def IntervalOffset(self) -> float: ...
    @property
    def IntervalOffsetType(self) -> DateTimeIntervalType: ...
    @property
    def IntervalType(self) -> DateTimeIntervalType: ...
    @property
    def IsEndLabelVisible(self) -> bool: ...
    @property
    def IsStaggered(self) -> bool: ...
    @property
    def TruncatedLabels(self) -> bool: ...
    @Angle.setter
    def Angle(self, value: int) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Format.setter
    def Format(self, value: str) -> None: ...
    @Interval.setter
    def Interval(self, value: float) -> None: ...
    @IntervalOffset.setter
    def IntervalOffset(self, value: float) -> None: ...
    @IntervalOffsetType.setter
    def IntervalOffsetType(self, value: DateTimeIntervalType) -> None: ...
    @IntervalType.setter
    def IntervalType(self, value: DateTimeIntervalType) -> None: ...
    @IsEndLabelVisible.setter
    def IsEndLabelVisible(self, value: bool) -> None: ...
    @IsStaggered.setter
    def IsStaggered(self, value: bool) -> None: ...
    @TruncatedLabels.setter
    def TruncatedLabels(self, value: bool) -> None: ...


class Legend(ChartNamedElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Alignment(self) -> StringAlignment: ...
    @property
    def AutoFitMinFontSize(self) -> int: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackImage(self) -> str: ...
    @property
    def BackImageAlignment(self) -> ChartImageAlignmentStyle: ...
    @property
    def BackImageTransparentColor(self) -> Color: ...
    @property
    def BackImageWrapMode(self) -> ChartImageWrapMode: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def BorderColor(self) -> Color: ...
    @property
    def BorderDashStyle(self) -> ChartDashStyle: ...
    @property
    def BorderWidth(self) -> int: ...
    @property
    def CellColumns(self) -> LegendCellColumnCollection: ...
    @property
    def CustomItems(self) -> LegendItemsCollection: ...
    @property
    def DockedToChartArea(self) -> str: ...
    @property
    def Docking(self) -> Docking: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def HeaderSeparator(self) -> LegendSeparatorStyle: ...
    @property
    def HeaderSeparatorColor(self) -> Color: ...
    @property
    def InsideChartArea(self) -> str: ...
    @property
    def InterlacedRows(self) -> bool: ...
    @property
    def InterlacedRowsColor(self) -> Color: ...
    @property
    def IsDockedInsideChartArea(self) -> bool: ...
    @property
    def IsEquallySpacedItems(self) -> bool: ...
    @property
    def IsTextAutoFit(self) -> bool: ...
    @property
    def ItemColumnSeparator(self) -> LegendSeparatorStyle: ...
    @property
    def ItemColumnSeparatorColor(self) -> Color: ...
    @property
    def ItemColumnSpacing(self) -> int: ...
    @property
    def LegendItemOrder(self) -> LegendItemOrder: ...
    @property
    def LegendStyle(self) -> LegendStyle: ...
    @property
    def MaximumAutoSize(self) -> Single: ...
    @property
    def Name(self) -> str: ...
    @property
    def Position(self) -> ElementPosition: ...
    @property
    def ShadowColor(self) -> Color: ...
    @property
    def ShadowOffset(self) -> int: ...
    @property
    def TableStyle(self) -> LegendTableStyle: ...
    @property
    def TextWrapThreshold(self) -> int: ...
    @property
    def Title(self) -> str: ...
    @property
    def TitleAlignment(self) -> StringAlignment: ...
    @property
    def TitleBackColor(self) -> Color: ...
    @property
    def TitleFont(self) -> Font: ...
    @property
    def TitleForeColor(self) -> Color: ...
    @property
    def TitleSeparator(self) -> LegendSeparatorStyle: ...
    @property
    def TitleSeparatorColor(self) -> Color: ...
    @Alignment.setter
    def Alignment(self, value: StringAlignment) -> None: ...
    @AutoFitMinFontSize.setter
    def AutoFitMinFontSize(self, value: int) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackImage.setter
    def BackImage(self, value: str) -> None: ...
    @BackImageAlignment.setter
    def BackImageAlignment(self, value: ChartImageAlignmentStyle) -> None: ...
    @BackImageTransparentColor.setter
    def BackImageTransparentColor(self, value: Color) -> None: ...
    @BackImageWrapMode.setter
    def BackImageWrapMode(self, value: ChartImageWrapMode) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @BorderColor.setter
    def BorderColor(self, value: Color) -> None: ...
    @BorderDashStyle.setter
    def BorderDashStyle(self, value: ChartDashStyle) -> None: ...
    @BorderWidth.setter
    def BorderWidth(self, value: int) -> None: ...
    @DockedToChartArea.setter
    def DockedToChartArea(self, value: str) -> None: ...
    @Docking.setter
    def Docking(self, value: Docking) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @HeaderSeparator.setter
    def HeaderSeparator(self, value: LegendSeparatorStyle) -> None: ...
    @HeaderSeparatorColor.setter
    def HeaderSeparatorColor(self, value: Color) -> None: ...
    @InsideChartArea.setter
    def InsideChartArea(self, value: str) -> None: ...
    @InterlacedRows.setter
    def InterlacedRows(self, value: bool) -> None: ...
    @InterlacedRowsColor.setter
    def InterlacedRowsColor(self, value: Color) -> None: ...
    @IsDockedInsideChartArea.setter
    def IsDockedInsideChartArea(self, value: bool) -> None: ...
    @IsEquallySpacedItems.setter
    def IsEquallySpacedItems(self, value: bool) -> None: ...
    @IsTextAutoFit.setter
    def IsTextAutoFit(self, value: bool) -> None: ...
    @ItemColumnSeparator.setter
    def ItemColumnSeparator(self, value: LegendSeparatorStyle) -> None: ...
    @ItemColumnSeparatorColor.setter
    def ItemColumnSeparatorColor(self, value: Color) -> None: ...
    @ItemColumnSpacing.setter
    def ItemColumnSpacing(self, value: int) -> None: ...
    @LegendItemOrder.setter
    def LegendItemOrder(self, value: LegendItemOrder) -> None: ...
    @LegendStyle.setter
    def LegendStyle(self, value: LegendStyle) -> None: ...
    @MaximumAutoSize.setter
    def MaximumAutoSize(self, value: Single) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Position.setter
    def Position(self, value: ElementPosition) -> None: ...
    @ShadowColor.setter
    def ShadowColor(self, value: Color) -> None: ...
    @ShadowOffset.setter
    def ShadowOffset(self, value: int) -> None: ...
    @TableStyle.setter
    def TableStyle(self, value: LegendTableStyle) -> None: ...
    @TextWrapThreshold.setter
    def TextWrapThreshold(self, value: int) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @TitleAlignment.setter
    def TitleAlignment(self, value: StringAlignment) -> None: ...
    @TitleBackColor.setter
    def TitleBackColor(self, value: Color) -> None: ...
    @TitleFont.setter
    def TitleFont(self, value: Font) -> None: ...
    @TitleForeColor.setter
    def TitleForeColor(self, value: Color) -> None: ...
    @TitleSeparator.setter
    def TitleSeparator(self, value: LegendSeparatorStyle) -> None: ...
    @TitleSeparatorColor.setter
    def TitleSeparatorColor(self, value: Color) -> None: ...


class LegendCell(ChartNamedElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, cellType: LegendCellType, text: str): ...
    @overload
    def __init__(self, cellType: LegendCellType, text: str, alignment: ContentAlignment): ...
    @property
    def Alignment(self) -> ContentAlignment: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def CellSpan(self) -> int: ...
    @property
    def CellType(self) -> LegendCellType: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Image(self) -> str: ...
    @property
    def ImageSize(self) -> Size: ...
    @property
    def ImageTransparentColor(self) -> Color: ...
    @property
    def Legend(self) -> Legend: ...
    @property
    def LegendItem(self) -> LegendItem: ...
    @property
    def Margins(self) -> Margins: ...
    @property
    def Name(self) -> str: ...
    @property
    def SeriesSymbolSize(self) -> Size: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @Alignment.setter
    def Alignment(self, value: ContentAlignment) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @CellSpan.setter
    def CellSpan(self, value: int) -> None: ...
    @CellType.setter
    def CellType(self, value: LegendCellType) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Image.setter
    def Image(self, value: str) -> None: ...
    @ImageSize.setter
    def ImageSize(self, value: Size) -> None: ...
    @ImageTransparentColor.setter
    def ImageTransparentColor(self, value: Color) -> None: ...
    @Margins.setter
    def Margins(self, value: Margins) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SeriesSymbolSize.setter
    def SeriesSymbolSize(self, value: Size) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...


class LegendCellCollection:
    @overload
    def Add(self, cellType: LegendCellType, text: str, alignment: ContentAlignment) -> int: ...
    @overload
    def Insert(self, index: int, cellType: LegendCellType, text: str, alignment: ContentAlignment) -> None: ...


class LegendCellColumn(ChartNamedElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, headerText: str, columnType: LegendCellColumnType, text: str): ...
    @overload
    def __init__(self, headerText: str, columnType: LegendCellColumnType, text: str, alignment: ContentAlignment): ...
    @property
    def Alignment(self) -> ContentAlignment: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def ColumnType(self) -> LegendCellColumnType: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def HeaderAlignment(self) -> StringAlignment: ...
    @property
    def HeaderBackColor(self) -> Color: ...
    @property
    def HeaderFont(self) -> Font: ...
    @property
    def HeaderForeColor(self) -> Color: ...
    @property
    def HeaderText(self) -> str: ...
    @property
    def Legend(self) -> Legend: ...
    @property
    def Margins(self) -> Margins: ...
    @property
    def MaximumWidth(self) -> int: ...
    @property
    def MinimumWidth(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def SeriesSymbolSize(self) -> Size: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @Alignment.setter
    def Alignment(self, value: ContentAlignment) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @ColumnType.setter
    def ColumnType(self, value: LegendCellColumnType) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @HeaderAlignment.setter
    def HeaderAlignment(self, value: StringAlignment) -> None: ...
    @HeaderBackColor.setter
    def HeaderBackColor(self, value: Color) -> None: ...
    @HeaderFont.setter
    def HeaderFont(self, value: Font) -> None: ...
    @HeaderForeColor.setter
    def HeaderForeColor(self, value: Color) -> None: ...
    @HeaderText.setter
    def HeaderText(self, value: str) -> None: ...
    @Margins.setter
    def Margins(self, value: Margins) -> None: ...
    @MaximumWidth.setter
    def MaximumWidth(self, value: int) -> None: ...
    @MinimumWidth.setter
    def MinimumWidth(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SeriesSymbolSize.setter
    def SeriesSymbolSize(self, value: Size) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    def ShouldSerializeMargins(self) -> bool: ...


class LegendCellColumnCollection:
    pass


class LegendCellColumnType:
    Text = 0
    SeriesSymbol = 1


class LegendCellType:
    Text = 0
    SeriesSymbol = 1
    Image = 2


class LegendCollection:
    @overload
    def Add(self, name: str) -> Legend: ...


class LegendImageStyle:
    Rectangle = 0
    Line = 1
    Marker = 2


class LegendItem(ChartNamedElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, color: Color, image: str): ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackImageTransparentColor(self) -> Color: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def BorderColor(self) -> Color: ...
    @property
    def BorderDashStyle(self) -> ChartDashStyle: ...
    @property
    def BorderWidth(self) -> int: ...
    @property
    def Cells(self) -> LegendCellCollection: ...
    @property
    def Color(self) -> Color: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Image(self) -> str: ...
    @property
    def ImageStyle(self) -> LegendImageStyle: ...
    @property
    def Legend(self) -> Legend: ...
    @property
    def MarkerBorderColor(self) -> Color: ...
    @property
    def MarkerBorderWidth(self) -> int: ...
    @property
    def MarkerColor(self) -> Color: ...
    @property
    def MarkerImage(self) -> str: ...
    @property
    def MarkerImageTransparentColor(self) -> Color: ...
    @property
    def MarkerSize(self) -> int: ...
    @property
    def MarkerStyle(self) -> MarkerStyle: ...
    @property
    def Name(self) -> str: ...
    @property
    def SeparatorColor(self) -> Color: ...
    @property
    def SeparatorType(self) -> LegendSeparatorStyle: ...
    @property
    def SeriesName(self) -> str: ...
    @property
    def SeriesPointIndex(self) -> int: ...
    @property
    def ShadowColor(self) -> Color: ...
    @property
    def ShadowOffset(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackImageTransparentColor.setter
    def BackImageTransparentColor(self, value: Color) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @BorderColor.setter
    def BorderColor(self, value: Color) -> None: ...
    @BorderDashStyle.setter
    def BorderDashStyle(self, value: ChartDashStyle) -> None: ...
    @BorderWidth.setter
    def BorderWidth(self, value: int) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Image.setter
    def Image(self, value: str) -> None: ...
    @ImageStyle.setter
    def ImageStyle(self, value: LegendImageStyle) -> None: ...
    @MarkerBorderColor.setter
    def MarkerBorderColor(self, value: Color) -> None: ...
    @MarkerBorderWidth.setter
    def MarkerBorderWidth(self, value: int) -> None: ...
    @MarkerColor.setter
    def MarkerColor(self, value: Color) -> None: ...
    @MarkerImage.setter
    def MarkerImage(self, value: str) -> None: ...
    @MarkerImageTransparentColor.setter
    def MarkerImageTransparentColor(self, value: Color) -> None: ...
    @MarkerSize.setter
    def MarkerSize(self, value: int) -> None: ...
    @MarkerStyle.setter
    def MarkerStyle(self, value: MarkerStyle) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SeparatorColor.setter
    def SeparatorColor(self, value: Color) -> None: ...
    @SeparatorType.setter
    def SeparatorType(self, value: LegendSeparatorStyle) -> None: ...
    @SeriesName.setter
    def SeriesName(self, value: str) -> None: ...
    @SeriesPointIndex.setter
    def SeriesPointIndex(self, value: int) -> None: ...
    @ShadowColor.setter
    def ShadowColor(self, value: Color) -> None: ...
    @ShadowOffset.setter
    def ShadowOffset(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...


class LegendItemOrder:
    Auto = 0
    SameAsSeriesOrder = 1
    ReversedSeriesOrder = 2


class LegendItemsCollection:
    @overload
    def Add(self, image: str, text: str) -> int: ...
    @overload
    def Add(self, color: Color, text: str) -> int: ...
    @overload
    def Insert(self, index: int, image: str, text: str) -> None: ...
    @overload
    def Insert(self, index: int, color: Color, text: str) -> None: ...
    def Reverse(self) -> None: ...


class LegendSeparatorStyle:
    #None = 0
    Line = 1
    ThickLine = 2
    DoubleLine = 3
    DashLine = 4
    DotLine = 5
    GradientLine = 6
    ThickGradientLine = 7


class LegendStyle:
    Column = 0
    Row = 1
    Table = 2


class LegendTableStyle:
    Auto = 0
    Wide = 1
    Tall = 2


class LightStyle:
    #None = 0
    Simplistic = 1
    Realistic = 2


class LineAnchorCapStyle:
    #None = 0
    Arrow = 1
    Diamond = 2
    Square = 3
    Round = 4


class LineAnnotation(Annotation):
    def __init__(self): ...
    @property
    def Alignment(self) -> ContentAlignment: ...
    @property
    def AnchorAlignment(self) -> ContentAlignment: ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def EndCap(self) -> LineAnchorCapStyle: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def IsInfinitive(self) -> bool: ...
    @property
    def IsSizeAlwaysRelative(self) -> bool: ...
    @property
    def StartCap(self) -> LineAnchorCapStyle: ...
    @property
    def TextStyle(self) -> TextStyle: ...
    @Alignment.setter
    def Alignment(self, value: ContentAlignment) -> None: ...
    @AnchorAlignment.setter
    def AnchorAlignment(self, value: ContentAlignment) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @EndCap.setter
    def EndCap(self, value: LineAnchorCapStyle) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @IsInfinitive.setter
    def IsInfinitive(self, value: bool) -> None: ...
    @IsSizeAlwaysRelative.setter
    def IsSizeAlwaysRelative(self, value: bool) -> None: ...
    @StartCap.setter
    def StartCap(self, value: LineAnchorCapStyle) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value: TextStyle) -> None: ...


class Margins(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, top: int, bottom: int, left: int, right: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Left(self) -> int: ...
    @property
    def Right(self) -> int: ...
    @property
    def Top(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def IsEmpty(self) -> bool: ...
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Right.setter
    def Right(self, value: int) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    def ToRectangleF(self) -> RectangleF: ...
    def ToString(self) -> str: ...


class MarkerStyle:
    #None = 0
    Square = 1
    Circle = 2
    Diamond = 3
    Triangle = 4
    Cross = 5
    Star4 = 6
    Star5 = 7
    Star6 = 8
    Star10 = 9


class NamedImage(ChartNamedElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, image: Image): ...
    @property
    def Image(self) -> Image: ...
    @property
    def Name(self) -> str: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class NamedImagesCollection:
    pass


class Point3D(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, x: Single, y: Single, z: Single): ...
    @property
    def PointF(self) -> PointF: ...
    @property
    def X(self) -> Single: ...
    @property
    def Y(self) -> Single: ...
    @property
    def Z(self) -> Single: ...
    @PointF.setter
    def PointF(self, value: PointF) -> None: ...
    @X.setter
    def X(self, value: Single) -> None: ...
    @Y.setter
    def Y(self, value: Single) -> None: ...
    @Z.setter
    def Z(self, value: Single) -> None: ...


class PointSortOrder:
    Ascending = 0
    Descending = 1


class PolygonAnnotation(PolylineAnnotation):
    def __init__(self): ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def EndCap(self) -> LineAnchorCapStyle: ...
    @property
    def StartCap(self) -> LineAnchorCapStyle: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @EndCap.setter
    def EndCap(self, value: LineAnchorCapStyle) -> None: ...
    @StartCap.setter
    def StartCap(self, value: LineAnchorCapStyle) -> None: ...


class PolylineAnnotation(Annotation):
    def __init__(self): ...
    def EndPlacement(self) -> None: ...
    @property
    def Alignment(self) -> ContentAlignment: ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def EndCap(self) -> LineAnchorCapStyle: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def GraphicsPath(self) -> GraphicsPath: ...
    @property
    def GraphicsPathPoints(self) -> AnnotationPathPointCollection: ...
    @property
    def IsFreeDrawPlacement(self) -> bool: ...
    @property
    def StartCap(self) -> LineAnchorCapStyle: ...
    @property
    def TextStyle(self) -> TextStyle: ...
    @Alignment.setter
    def Alignment(self, value: ContentAlignment) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @EndCap.setter
    def EndCap(self, value: LineAnchorCapStyle) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @GraphicsPath.setter
    def GraphicsPath(self, value: GraphicsPath) -> None: ...
    @IsFreeDrawPlacement.setter
    def IsFreeDrawPlacement(self, value: bool) -> None: ...
    @StartCap.setter
    def StartCap(self, value: LineAnchorCapStyle) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value: TextStyle) -> None: ...


class PrintingManager(Object):
    def __init__(self, container: IServiceContainer): ...
    def Dispose(self) -> None: ...
    @property
    def PrintDocument(self) -> PrintDocument: ...
    def PageSetup(self) -> None: ...
    def Print(self, showPrintDialog: bool) -> None: ...
    def PrintPaint(self, graphics: Graphics, position: Rectangle) -> None: ...
    def PrintPreview(self) -> None: ...
    @PrintDocument.setter
    def PrintDocument(self, value: PrintDocument) -> None: ...


class RectangleAnnotation(TextAnnotation):
    def __init__(self): ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def LineDashStyle(self) -> ChartDashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @LineDashStyle.setter
    def LineDashStyle(self, value: ChartDashStyle) -> None: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> None: ...


class ScrollBarButtonStyles:
    #None = 0
    SmallScroll = 1
    ResetZoom = 2
    All = 3


class ScrollBarButtonType:
    ThumbTracker = 0
    SmallDecrement = 1
    SmallIncrement = 2
    LargeDecrement = 3
    LargeIncrement = 4
    ZoomReset = 5


class ScrollBarEventArgs(EventArgs):
    def __init__(self, axis: Axis, x: int, y: int, buttonType: ScrollBarButtonType): ...
    @property
    def Axis(self) -> Axis: ...
    @property
    def ButtonType(self) -> ScrollBarButtonType: ...
    @property
    def ChartArea(self) -> ChartArea: ...
    @property
    def IsHandled(self) -> bool: ...
    @property
    def MousePositionX(self) -> int: ...
    @property
    def MousePositionY(self) -> int: ...
    @IsHandled.setter
    def IsHandled(self, value: bool) -> None: ...


class ScrollType:
    SmallDecrement = 0
    SmallIncrement = 1
    LargeDecrement = 2
    LargeIncrement = 3
    First = 4
    Last = 5


class SerializationContents:
    Default = 1
    Data = 2
    Appearance = 4
    All = 7


class SerializationFormat:
    Xml = 0
    Binary = 1


class Series(DataPointCustomProperties):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, yValues: int): ...
    @property
    def AxisLabel(self) -> str: ...
    @property
    def ChartArea(self) -> str: ...
    @property
    def ChartType(self) -> SeriesChartType: ...
    @property
    def ChartTypeName(self) -> str: ...
    @property
    def EmptyPointStyle(self) -> DataPointCustomProperties: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def IsXValueIndexed(self) -> bool: ...
    @property
    def Legend(self) -> str: ...
    @property
    def MarkerStep(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Palette(self) -> ChartColorPalette: ...
    @property
    def Points(self) -> DataPointCollection: ...
    @property
    def ShadowColor(self) -> Color: ...
    @property
    def ShadowOffset(self) -> int: ...
    @property
    def SmartLabelStyle(self) -> SmartLabelStyle: ...
    @property
    def XAxisType(self) -> AxisType: ...
    @property
    def XValueMember(self) -> str: ...
    @property
    def XValueType(self) -> ChartValueType: ...
    @property
    def YAxisType(self) -> AxisType: ...
    @property
    def YValueMembers(self) -> str: ...
    @property
    def YValuesPerPoint(self) -> int: ...
    @property
    def YValueType(self) -> ChartValueType: ...
    @AxisLabel.setter
    def AxisLabel(self, value: str) -> None: ...
    @ChartArea.setter
    def ChartArea(self, value: str) -> None: ...
    @ChartType.setter
    def ChartType(self, value: SeriesChartType) -> None: ...
    @ChartTypeName.setter
    def ChartTypeName(self, value: str) -> None: ...
    @EmptyPointStyle.setter
    def EmptyPointStyle(self, value: DataPointCustomProperties) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @IsXValueIndexed.setter
    def IsXValueIndexed(self, value: bool) -> None: ...
    @Legend.setter
    def Legend(self, value: str) -> None: ...
    @MarkerStep.setter
    def MarkerStep(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Palette.setter
    def Palette(self, value: ChartColorPalette) -> None: ...
    @ShadowColor.setter
    def ShadowColor(self, value: Color) -> None: ...
    @ShadowOffset.setter
    def ShadowOffset(self, value: int) -> None: ...
    @SmartLabelStyle.setter
    def SmartLabelStyle(self, value: SmartLabelStyle) -> None: ...
    @XAxisType.setter
    def XAxisType(self, value: AxisType) -> None: ...
    @XValueMember.setter
    def XValueMember(self, value: str) -> None: ...
    @XValueType.setter
    def XValueType(self, value: ChartValueType) -> None: ...
    @YAxisType.setter
    def YAxisType(self, value: AxisType) -> None: ...
    @YValueMembers.setter
    def YValueMembers(self, value: str) -> None: ...
    @YValuesPerPoint.setter
    def YValuesPerPoint(self, value: int) -> None: ...
    @YValueType.setter
    def YValueType(self, value: ChartValueType) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, pointSortOrder: PointSortOrder) -> None: ...
    @overload
    def Sort(self, pointSortOrder: PointSortOrder, sortBy: str) -> None: ...


class SeriesChartType:
    Point = 0
    FastPoint = 1
    Bubble = 2
    Line = 3
    Spline = 4
    StepLine = 5
    FastLine = 6
    Bar = 7
    StackedBar = 8
    StackedBar100 = 9
    Column = 10
    StackedColumn = 11
    StackedColumn100 = 12
    Area = 13
    SplineArea = 14
    StackedArea = 15
    StackedArea100 = 16
    Pie = 17
    Doughnut = 18
    Stock = 19
    Candlestick = 20
    Range = 21
    SplineRange = 22
    RangeBar = 23
    RangeColumn = 24
    Radar = 25
    Polar = 26
    ErrorBar = 27
    BoxPlot = 28
    Renko = 29
    ThreeLineBreak = 30
    Kagi = 31
    PointAndFigure = 32
    Funnel = 33
    Pyramid = 34


class SeriesCollection:
    @overload
    def Add(self, name: str) -> Series: ...


class SmartLabelStyle(Object):
    def __init__(self): ...
    @property
    def AllowOutsidePlotArea(self) -> LabelOutsidePlotAreaStyle: ...
    @property
    def CalloutBackColor(self) -> Color: ...
    @property
    def CalloutLineAnchorCapStyle(self) -> LineAnchorCapStyle: ...
    @property
    def CalloutLineColor(self) -> Color: ...
    @property
    def CalloutLineDashStyle(self) -> ChartDashStyle: ...
    @property
    def CalloutLineWidth(self) -> int: ...
    @property
    def CalloutStyle(self) -> LabelCalloutStyle: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def IsMarkerOverlappingAllowed(self) -> bool: ...
    @property
    def IsOverlappedHidden(self) -> bool: ...
    @property
    def MaxMovingDistance(self) -> float: ...
    @property
    def MinMovingDistance(self) -> float: ...
    @property
    def MovingDirection(self) -> LabelAlignmentStyles: ...
    @AllowOutsidePlotArea.setter
    def AllowOutsidePlotArea(self, value: LabelOutsidePlotAreaStyle) -> None: ...
    @CalloutBackColor.setter
    def CalloutBackColor(self, value: Color) -> None: ...
    @CalloutLineAnchorCapStyle.setter
    def CalloutLineAnchorCapStyle(self, value: LineAnchorCapStyle) -> None: ...
    @CalloutLineColor.setter
    def CalloutLineColor(self, value: Color) -> None: ...
    @CalloutLineDashStyle.setter
    def CalloutLineDashStyle(self, value: ChartDashStyle) -> None: ...
    @CalloutLineWidth.setter
    def CalloutLineWidth(self, value: int) -> None: ...
    @CalloutStyle.setter
    def CalloutStyle(self, value: LabelCalloutStyle) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @IsMarkerOverlappingAllowed.setter
    def IsMarkerOverlappingAllowed(self, value: bool) -> None: ...
    @IsOverlappedHidden.setter
    def IsOverlappedHidden(self, value: bool) -> None: ...
    @MaxMovingDistance.setter
    def MaxMovingDistance(self, value: float) -> None: ...
    @MinMovingDistance.setter
    def MinMovingDistance(self, value: float) -> None: ...
    @MovingDirection.setter
    def MovingDirection(self, value: LabelAlignmentStyles) -> None: ...


class StartFromZero:
    Auto = 0
    Yes = 1
    No = 2


class StatisticFormula(Object):
    def Anova(self, probability: float, inputSeriesNames: str) -> AnovaResult: ...
    def BetaFunction(self, m: float, n: float) -> float: ...
    def Correlation(self, firstInputSeriesName: str, secondInputSeriesName: str) -> float: ...
    def Covariance(self, firstInputSeriesName: str, secondInputSeriesName: str) -> float: ...
    def FDistribution(self, value: float, firstDegreeOfFreedom: int, secondDegreeOfFreedom: int) -> float: ...
    def FTest(self, probability: float, firstInputSeriesName: str, secondInputSeriesName: str) -> FTestResult: ...
    def GammaFunction(self, value: float) -> float: ...
    def InverseFDistribution(self, probability: float, firstDegreeOfFreedom: int, secondDegreeOfFreedom: int) -> float: ...
    def InverseNormalDistribution(self, probability: float) -> float: ...
    def InverseTDistribution(self, probability: float, degreeOfFreedom: int) -> float: ...
    def Mean(self, inputSeriesName: str) -> float: ...
    def Median(self, inputSeriesName: str) -> float: ...
    def NormalDistribution(self, zValue: float) -> float: ...
    def TDistribution(self, value: float, degreeOfFreedom: int, oneTail: bool) -> float: ...
    def TTestEqualVariances(self, hypothesizedMeanDifference: float, probability: float, firstInputSeriesName: str, secondInputSeriesName: str) -> TTestResult: ...
    def TTestPaired(self, hypothesizedMeanDifference: float, probability: float, firstInputSeriesName: str, secondInputSeriesName: str) -> TTestResult: ...
    def TTestUnequalVariances(self, hypothesizedMeanDifference: float, probability: float, firstInputSeriesName: str, secondInputSeriesName: str) -> TTestResult: ...
    def Variance(self, inputSeriesName: str, sampleVariance: bool) -> float: ...
    def ZTest(self, hypothesizedMeanDifference: float, varianceFirstGroup: float, varianceSecondGroup: float, probability: float, firstInputSeriesName: str, secondInputSeriesName: str) -> ZTestResult: ...


class StripLine(ChartElement):
    def __init__(self): ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackImage(self) -> str: ...
    @property
    def BackImageAlignment(self) -> ChartImageAlignmentStyle: ...
    @property
    def BackImageTransparentColor(self) -> Color: ...
    @property
    def BackImageWrapMode(self) -> ChartImageWrapMode: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def BorderColor(self) -> Color: ...
    @property
    def BorderDashStyle(self) -> ChartDashStyle: ...
    @property
    def BorderWidth(self) -> int: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Interval(self) -> float: ...
    @property
    def IntervalOffset(self) -> float: ...
    @property
    def IntervalOffsetType(self) -> DateTimeIntervalType: ...
    @property
    def IntervalType(self) -> DateTimeIntervalType: ...
    @property
    def Name(self) -> str: ...
    @property
    def StripWidth(self) -> float: ...
    @property
    def StripWidthType(self) -> DateTimeIntervalType: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlignment(self) -> StringAlignment: ...
    @property
    def TextLineAlignment(self) -> StringAlignment: ...
    @property
    def TextOrientation(self) -> TextOrientation: ...
    @property
    def ToolTip(self) -> str: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackImage.setter
    def BackImage(self, value: str) -> None: ...
    @BackImageAlignment.setter
    def BackImageAlignment(self, value: ChartImageAlignmentStyle) -> None: ...
    @BackImageTransparentColor.setter
    def BackImageTransparentColor(self, value: Color) -> None: ...
    @BackImageWrapMode.setter
    def BackImageWrapMode(self, value: ChartImageWrapMode) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @BorderColor.setter
    def BorderColor(self, value: Color) -> None: ...
    @BorderDashStyle.setter
    def BorderDashStyle(self, value: ChartDashStyle) -> None: ...
    @BorderWidth.setter
    def BorderWidth(self, value: int) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Interval.setter
    def Interval(self, value: float) -> None: ...
    @IntervalOffset.setter
    def IntervalOffset(self, value: float) -> None: ...
    @IntervalOffsetType.setter
    def IntervalOffsetType(self, value: DateTimeIntervalType) -> None: ...
    @IntervalType.setter
    def IntervalType(self, value: DateTimeIntervalType) -> None: ...
    @StripWidth.setter
    def StripWidth(self, value: float) -> None: ...
    @StripWidthType.setter
    def StripWidthType(self, value: DateTimeIntervalType) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: StringAlignment) -> None: ...
    @TextLineAlignment.setter
    def TextLineAlignment(self, value: StringAlignment) -> None: ...
    @TextOrientation.setter
    def TextOrientation(self, value: TextOrientation) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...


class StripLinesCollection:
    pass


class TextAnnotation(Annotation):
    def __init__(self): ...
    def BeginTextEditing(self) -> None: ...
    def EndPlacement(self) -> None: ...
    @property
    def AnnotationType(self) -> str: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def Font(self) -> Font: ...
    @property
    def IsMultiline(self) -> bool: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def LineDashStyle(self) -> ChartDashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @IsMultiline.setter
    def IsMultiline(self, value: bool) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @LineDashStyle.setter
    def LineDashStyle(self, value: ChartDashStyle) -> None: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    def StopTextEditing(self) -> None: ...


class TextAntiAliasingQuality:
    Normal = 0
    High = 1
    SystemDefault = 2


class TextOrientation:
    Auto = 0
    Horizontal = 1
    Rotated90 = 2
    Rotated270 = 3
    Stacked = 4


class TextStyle:
    Default = 0
    Shadow = 1
    Emboss = 2
    Embed = 3
    Frame = 4


class TickMark(Grid):
    def __init__(self): ...
    @property
    def Size(self) -> Single: ...
    @property
    def TickMarkStyle(self) -> TickMarkStyle: ...
    @Size.setter
    def Size(self, value: Single) -> None: ...
    @TickMarkStyle.setter
    def TickMarkStyle(self, value: TickMarkStyle) -> None: ...


class TickMarkStyle:
    #None = 0
    OutsideArea = 1
    InsideArea = 2
    AcrossAxis = 3


class Title(ChartNamedElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, text: str, docking: Docking): ...
    @overload
    def __init__(self, text: str, docking: Docking, font: Font, color: Color): ...
    @property
    def Alignment(self) -> ContentAlignment: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackGradientStyle(self) -> GradientStyle: ...
    @property
    def BackHatchStyle(self) -> ChartHatchStyle: ...
    @property
    def BackImage(self) -> str: ...
    @property
    def BackImageAlignment(self) -> ChartImageAlignmentStyle: ...
    @property
    def BackImageTransparentColor(self) -> Color: ...
    @property
    def BackImageWrapMode(self) -> ChartImageWrapMode: ...
    @property
    def BackSecondaryColor(self) -> Color: ...
    @property
    def BorderColor(self) -> Color: ...
    @property
    def BorderDashStyle(self) -> ChartDashStyle: ...
    @property
    def BorderWidth(self) -> int: ...
    @property
    def DockedToChartArea(self) -> str: ...
    @property
    def Docking(self) -> Docking: ...
    @property
    def DockingOffset(self) -> int: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def IsDockedInsideChartArea(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Position(self) -> ElementPosition: ...
    @property
    def ShadowColor(self) -> Color: ...
    @property
    def ShadowOffset(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextOrientation(self) -> TextOrientation: ...
    @property
    def TextStyle(self) -> TextStyle: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Alignment.setter
    def Alignment(self, value: ContentAlignment) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackGradientStyle.setter
    def BackGradientStyle(self, value: GradientStyle) -> None: ...
    @BackHatchStyle.setter
    def BackHatchStyle(self, value: ChartHatchStyle) -> None: ...
    @BackImage.setter
    def BackImage(self, value: str) -> None: ...
    @BackImageAlignment.setter
    def BackImageAlignment(self, value: ChartImageAlignmentStyle) -> None: ...
    @BackImageTransparentColor.setter
    def BackImageTransparentColor(self, value: Color) -> None: ...
    @BackImageWrapMode.setter
    def BackImageWrapMode(self, value: ChartImageWrapMode) -> None: ...
    @BackSecondaryColor.setter
    def BackSecondaryColor(self, value: Color) -> None: ...
    @BorderColor.setter
    def BorderColor(self, value: Color) -> None: ...
    @BorderDashStyle.setter
    def BorderDashStyle(self, value: ChartDashStyle) -> None: ...
    @BorderWidth.setter
    def BorderWidth(self, value: int) -> None: ...
    @DockedToChartArea.setter
    def DockedToChartArea(self, value: str) -> None: ...
    @Docking.setter
    def Docking(self, value: Docking) -> None: ...
    @DockingOffset.setter
    def DockingOffset(self, value: int) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @IsDockedInsideChartArea.setter
    def IsDockedInsideChartArea(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Position.setter
    def Position(self, value: ElementPosition) -> None: ...
    @ShadowColor.setter
    def ShadowColor(self, value: Color) -> None: ...
    @ShadowOffset.setter
    def ShadowOffset(self, value: int) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextOrientation.setter
    def TextOrientation(self, value: TextOrientation) -> None: ...
    @TextStyle.setter
    def TextStyle(self, value: TextStyle) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class TitleCollection:
    @overload
    def Add(self, name: str) -> Title: ...


class ToolTipEventArgs(EventArgs):
    def __init__(self, x: int, y: int, text: str, result: HitTestResult): ...
    @property
    def HitTestResult(self) -> HitTestResult: ...
    @property
    def Text(self) -> str: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class TTestResult(Object):
    def __init__(self): ...
    @property
    def DegreeOfFreedom(self) -> float: ...
    @property
    def FirstSeriesMean(self) -> float: ...
    @property
    def FirstSeriesVariance(self) -> float: ...
    @property
    def ProbabilityTOneTail(self) -> float: ...
    @property
    def ProbabilityTTwoTail(self) -> float: ...
    @property
    def SecondSeriesMean(self) -> float: ...
    @property
    def SecondSeriesVariance(self) -> float: ...
    @property
    def TCriticalValueOneTail(self) -> float: ...
    @property
    def TCriticalValueTwoTail(self) -> float: ...
    @property
    def TValue(self) -> float: ...


class VerticalLineAnnotation(LineAnnotation):
    def __init__(self): ...
    @property
    def AnnotationType(self) -> str: ...


class ViewEventArgs(EventArgs):
    @overload
    def __init__(self, axis: Axis, newPosition: float): ...
    @overload
    def __init__(self, axis: Axis, newPosition: float, newSize: float, newSizeType: DateTimeIntervalType): ...
    @property
    def Axis(self) -> Axis: ...
    @property
    def ChartArea(self) -> ChartArea: ...
    @property
    def NewPosition(self) -> float: ...
    @property
    def NewSize(self) -> float: ...
    @property
    def NewSizeType(self) -> DateTimeIntervalType: ...
    @NewPosition.setter
    def NewPosition(self, value: float) -> None: ...
    @NewSize.setter
    def NewSize(self, value: float) -> None: ...
    @NewSizeType.setter
    def NewSizeType(self, value: DateTimeIntervalType) -> None: ...


class ZTestResult(Object):
    def __init__(self): ...
    @property
    def FirstSeriesMean(self) -> float: ...
    @property
    def FirstSeriesVariance(self) -> float: ...
    @property
    def ProbabilityZOneTail(self) -> float: ...
    @property
    def ProbabilityZTwoTail(self) -> float: ...
    @property
    def SecondSeriesMean(self) -> float: ...
    @property
    def SecondSeriesVariance(self) -> float: ...
    @property
    def ZCriticalValueOneTail(self) -> float: ...
    @property
    def ZCriticalValueTwoTail(self) -> float: ...
    @property
    def ZValue(self) -> float: ...
