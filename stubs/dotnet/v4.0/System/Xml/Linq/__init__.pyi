from typing import Tuple, Set, Iterable, List


class Extensions(Object):
    @overload
    def Ancestors(source: Iterable[T]) -> Iterable[XElement]: ...
    @overload
    def Ancestors(source: Iterable[T], name: XName) -> Iterable[XElement]: ...
    @overload
    def AncestorsAndSelf(source: Iterable[XElement]) -> Iterable[XElement]: ...
    @overload
    def AncestorsAndSelf(source: Iterable[XElement], name: XName) -> Iterable[XElement]: ...
    @overload
    def Attributes(source: Iterable[XElement]) -> Iterable[XAttribute]: ...
    @overload
    def Attributes(source: Iterable[XElement], name: XName) -> Iterable[XAttribute]: ...
    def DescendantNodes(source: Iterable[T]) -> Iterable[XNode]: ...
    def DescendantNodesAndSelf(source: Iterable[XElement]) -> Iterable[XNode]: ...
    @overload
    def Descendants(source: Iterable[T]) -> Iterable[XElement]: ...
    @overload
    def Descendants(source: Iterable[T], name: XName) -> Iterable[XElement]: ...
    @overload
    def DescendantsAndSelf(source: Iterable[XElement]) -> Iterable[XElement]: ...
    @overload
    def DescendantsAndSelf(source: Iterable[XElement], name: XName) -> Iterable[XElement]: ...
    @overload
    def Elements(source: Iterable[T]) -> Iterable[XElement]: ...
    @overload
    def Elements(source: Iterable[T], name: XName) -> Iterable[XElement]: ...
    def InDocumentOrder(source: Iterable[T]) -> Iterable[T]: ...
    def Nodes(source: Iterable[T]) -> Iterable[XNode]: ...
    @overload
    def Remove(source: Iterable[XAttribute]) -> None: ...
    @overload
    def Remove(source: Iterable[T]) -> None: ...


class LoadOptions:
    #None = 0
    PreserveWhitespace = 1
    SetBaseUri = 2
    SetLineInfo = 4


class ReaderOptions:
    #None = 0
    OmitDuplicateNamespaces = 1


class SaveOptions:
    #None = 0
    DisableFormatting = 1
    OmitDuplicateNamespaces = 2


class XAttribute(XObject):
    @overload
    def __init__(self, other: XAttribute): ...
    @overload
    def __init__(self, name: XName, value: Object): ...
    @property
    def EmptySequence() -> Iterable[XAttribute]: ...
    @property
    def IsNamespaceDeclaration(self) -> bool: ...
    @property
    def Name(self) -> XName: ...
    @property
    def NextAttribute(self) -> XAttribute: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def PreviousAttribute(self) -> XAttribute: ...
    @property
    def Value(self) -> str: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> UInt64: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> str: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> bool: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> int: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> UInt32: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Guid: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> TimeSpan: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> DateTimeOffset: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Single: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> float: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Int64: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> DateTime: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Nullable: ...
    @overload
    def op_Explicit(attribute: XAttribute) -> Decimal: ...
    def Remove(self) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def SetValue(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class XCData(XText):
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, other: XCData): ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    def WriteTo(self, writer: XmlWriter) -> None: ...


class XComment(XNode):
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, other: XComment): ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def WriteTo(self, writer: XmlWriter) -> None: ...


class XContainer(XNode):
    @overload
    def Add(self, content: Object) -> None: ...
    @overload
    def Add(self, content: Set(Object)) -> None: ...
    @overload
    def AddFirst(self, content: Object) -> None: ...
    @overload
    def AddFirst(self, content: Set(Object)) -> None: ...
    def CreateWriter(self) -> XmlWriter: ...
    def DescendantNodes(self) -> Iterable[XNode]: ...
    @overload
    def Descendants(self) -> Iterable[XElement]: ...
    @overload
    def Descendants(self, name: XName) -> Iterable[XElement]: ...
    def Element(self, name: XName) -> XElement: ...
    @overload
    def Elements(self) -> Iterable[XElement]: ...
    @overload
    def Elements(self, name: XName) -> Iterable[XElement]: ...
    @property
    def FirstNode(self) -> XNode: ...
    @property
    def LastNode(self) -> XNode: ...
    def Nodes(self) -> Iterable[XNode]: ...
    def RemoveNodes(self) -> None: ...
    @overload
    def ReplaceNodes(self, content: Object) -> None: ...
    @overload
    def ReplaceNodes(self, content: Set(Object)) -> None: ...


class XDeclaration(Object):
    @overload
    def __init__(self, other: XDeclaration): ...
    @overload
    def __init__(self, version: str, encoding: str, standalone: str): ...
    @property
    def Encoding(self) -> str: ...
    @property
    def Standalone(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Encoding.setter
    def Encoding(self, value: str) -> None: ...
    @Standalone.setter
    def Standalone(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class XDocument(XContainer):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, content: Set(Object)): ...
    @overload
    def __init__(self, other: XDocument): ...
    @overload
    def __init__(self, declaration: XDeclaration, content: Set(Object)): ...
    @property
    def Declaration(self) -> XDeclaration: ...
    @property
    def DocumentType(self) -> XDocumentType: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Root(self) -> XElement: ...
    @overload
    def Load(stream: Stream) -> XDocument: ...
    @overload
    def Load(uri: str) -> XDocument: ...
    @overload
    def Load(reader: XmlReader) -> XDocument: ...
    @overload
    def Load(textReader: TextReader) -> XDocument: ...
    @overload
    def Load(reader: XmlReader, options: LoadOptions) -> XDocument: ...
    @overload
    def Load(uri: str, options: LoadOptions) -> XDocument: ...
    @overload
    def Load(textReader: TextReader, options: LoadOptions) -> XDocument: ...
    @overload
    def Load(stream: Stream, options: LoadOptions) -> XDocument: ...
    @overload
    def Parse(text: str) -> XDocument: ...
    @overload
    def Parse(text: str, options: LoadOptions) -> XDocument: ...
    @overload
    def Save(self, fileName: str) -> None: ...
    @overload
    def Save(self, stream: Stream) -> None: ...
    @overload
    def Save(self, textWriter: TextWriter) -> None: ...
    @overload
    def Save(self, writer: XmlWriter) -> None: ...
    @overload
    def Save(self, fileName: str, options: SaveOptions) -> None: ...
    @overload
    def Save(self, stream: Stream, options: SaveOptions) -> None: ...
    @overload
    def Save(self, textWriter: TextWriter, options: SaveOptions) -> None: ...
    @Declaration.setter
    def Declaration(self, value: XDeclaration) -> None: ...
    def WriteTo(self, writer: XmlWriter) -> None: ...


class XDocumentType(XNode):
    @overload
    def __init__(self, other: XDocumentType): ...
    @overload
    def __init__(self, name: str, publicId: str, systemId: str, internalSubset: str): ...
    @property
    def InternalSubset(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def PublicId(self) -> str: ...
    @property
    def SystemId(self) -> str: ...
    @InternalSubset.setter
    def InternalSubset(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @PublicId.setter
    def PublicId(self, value: str) -> None: ...
    @SystemId.setter
    def SystemId(self, value: str) -> None: ...
    def WriteTo(self, writer: XmlWriter) -> None: ...


class XElement(XContainer):
    @overload
    def __init__(self, name: XName): ...
    @overload
    def __init__(self, other: XElement): ...
    @overload
    def __init__(self, other: XStreamingElement): ...
    @overload
    def __init__(self, name: XName, content: Object): ...
    @overload
    def __init__(self, name: XName, content: Set(Object)): ...
    @overload
    def AncestorsAndSelf(self) -> Iterable[XElement]: ...
    @overload
    def AncestorsAndSelf(self, name: XName) -> Iterable[XElement]: ...
    def Attribute(self, name: XName) -> XAttribute: ...
    @overload
    def Attributes(self) -> Iterable[XAttribute]: ...
    @overload
    def Attributes(self, name: XName) -> Iterable[XAttribute]: ...
    def DescendantNodesAndSelf(self) -> Iterable[XNode]: ...
    @overload
    def DescendantsAndSelf(self) -> Iterable[XElement]: ...
    @overload
    def DescendantsAndSelf(self, name: XName) -> Iterable[XElement]: ...
    @property
    def EmptySequence() -> Iterable[XElement]: ...
    @property
    def FirstAttribute(self) -> XAttribute: ...
    @property
    def HasAttributes(self) -> bool: ...
    @property
    def HasElements(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def LastAttribute(self) -> XAttribute: ...
    @property
    def Name(self) -> XName: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Value(self) -> str: ...
    def GetDefaultNamespace(self) -> XNamespace: ...
    def GetNamespaceOfPrefix(self, prefix: str) -> XNamespace: ...
    def GetPrefixOfNamespace(self, ns: XNamespace) -> str: ...
    @overload
    def Load(uri: str) -> XElement: ...
    @overload
    def Load(stream: Stream) -> XElement: ...
    @overload
    def Load(textReader: TextReader) -> XElement: ...
    @overload
    def Load(reader: XmlReader) -> XElement: ...
    @overload
    def Load(uri: str, options: LoadOptions) -> XElement: ...
    @overload
    def Load(stream: Stream, options: LoadOptions) -> XElement: ...
    @overload
    def Load(textReader: TextReader, options: LoadOptions) -> XElement: ...
    @overload
    def Load(reader: XmlReader, options: LoadOptions) -> XElement: ...
    @overload
    def op_Explicit(element: XElement) -> bool: ...
    @overload
    def op_Explicit(element: XElement) -> str: ...
    @overload
    def op_Explicit(element: XElement) -> Single: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> int: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> UInt32: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> TimeSpan: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> DateTimeOffset: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> Guid: ...
    @overload
    def op_Explicit(element: XElement) -> UInt64: ...
    @overload
    def op_Explicit(element: XElement) -> DateTime: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> float: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> Int64: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def op_Explicit(element: XElement) -> Decimal: ...
    @overload
    def op_Explicit(element: XElement) -> Nullable: ...
    @overload
    def Parse(text: str) -> XElement: ...
    @overload
    def Parse(text: str, options: LoadOptions) -> XElement: ...
    def RemoveAll(self) -> None: ...
    def RemoveAttributes(self) -> None: ...
    @overload
    def ReplaceAll(self, content: Set(Object)) -> None: ...
    @overload
    def ReplaceAll(self, content: Object) -> None: ...
    @overload
    def ReplaceAttributes(self, content: Object) -> None: ...
    @overload
    def ReplaceAttributes(self, content: Set(Object)) -> None: ...
    @overload
    def Save(self, writer: XmlWriter) -> None: ...
    @overload
    def Save(self, textWriter: TextWriter) -> None: ...
    @overload
    def Save(self, fileName: str) -> None: ...
    @overload
    def Save(self, stream: Stream) -> None: ...
    @overload
    def Save(self, stream: Stream, options: SaveOptions) -> None: ...
    @overload
    def Save(self, fileName: str, options: SaveOptions) -> None: ...
    @overload
    def Save(self, textWriter: TextWriter, options: SaveOptions) -> None: ...
    @Name.setter
    def Name(self, value: XName) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def SetAttributeValue(self, name: XName, value: Object) -> None: ...
    def SetElementValue(self, name: XName, value: Object) -> None: ...
    def SetValue(self, value: Object) -> None: ...
    def WriteTo(self, writer: XmlWriter) -> None: ...


class XName(Object):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Namespace(self) -> XNamespace: ...
    @property
    def NamespaceName(self) -> str: ...
    @overload
    def Get(expandedName: str) -> XName: ...
    @overload
    def Get(localName: str, namespaceName: str) -> XName: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: XName, right: XName) -> bool: ...
    def op_Implicit(expandedName: str) -> XName: ...
    def op_Inequality(left: XName, right: XName) -> bool: ...
    def ToString(self) -> str: ...


class XNamespace(Object):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def NamespaceName(self) -> str: ...
    @property
    def None() -> XNamespace: ...
    def Get(namespaceName: str) -> XNamespace: ...
    @property
    def Xml() -> XNamespace: ...
    @property
    def Xmlns() -> XNamespace: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, localName: str) -> XName: ...
    def op_Addition(ns: XNamespace, localName: str) -> XName: ...
    def op_Equality(left: XNamespace, right: XNamespace) -> bool: ...
    def op_Implicit(namespaceName: str) -> XNamespace: ...
    def op_Inequality(left: XNamespace, right: XNamespace) -> bool: ...
    def ToString(self) -> str: ...


class XNode(XObject):
    @overload
    def AddAfterSelf(self, content: Object) -> None: ...
    @overload
    def AddAfterSelf(self, content: Set(Object)) -> None: ...
    @overload
    def AddBeforeSelf(self, content: Object) -> None: ...
    @overload
    def AddBeforeSelf(self, content: Set(Object)) -> None: ...
    @overload
    def Ancestors(self) -> Iterable[XElement]: ...
    @overload
    def Ancestors(self, name: XName) -> Iterable[XElement]: ...
    def CompareDocumentOrder(n1: XNode, n2: XNode) -> int: ...
    @overload
    def CreateReader(self) -> XmlReader: ...
    @overload
    def CreateReader(self, readerOptions: ReaderOptions) -> XmlReader: ...
    def DeepEquals(n1: XNode, n2: XNode) -> bool: ...
    @overload
    def ElementsAfterSelf(self) -> Iterable[XElement]: ...
    @overload
    def ElementsAfterSelf(self, name: XName) -> Iterable[XElement]: ...
    @overload
    def ElementsBeforeSelf(self) -> Iterable[XElement]: ...
    @overload
    def ElementsBeforeSelf(self, name: XName) -> Iterable[XElement]: ...
    @property
    def DocumentOrderComparer() -> XNodeDocumentOrderComparer: ...
    @property
    def EqualityComparer() -> XNodeEqualityComparer: ...
    @property
    def NextNode(self) -> XNode: ...
    @property
    def PreviousNode(self) -> XNode: ...
    def IsAfter(self, node: XNode) -> bool: ...
    def IsBefore(self, node: XNode) -> bool: ...
    def NodesAfterSelf(self) -> Iterable[XNode]: ...
    def NodesBeforeSelf(self) -> Iterable[XNode]: ...
    def ReadFrom(reader: XmlReader) -> XNode: ...
    def Remove(self) -> None: ...
    @overload
    def ReplaceWith(self, content: Set(Object)) -> None: ...
    @overload
    def ReplaceWith(self, content: Object) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, options: SaveOptions) -> str: ...
    def WriteTo(self, writer: XmlWriter) -> None: ...


class XNodeDocumentOrderComparer(Object):
    def __init__(self): ...
    def Compare(self, x: XNode, y: XNode) -> int: ...


class XNodeEqualityComparer(Object):
    def __init__(self): ...
    @overload
    def Equals(self, x: XNode, y: XNode) -> bool: ...
    @overload
    def GetHashCode(self, obj: XNode) -> int: ...


class XObject(Object):
    def add_Changed(self, value: EventHandler) -> None: ...
    def add_Changing(self, value: EventHandler) -> None: ...
    def AddAnnotation(self, annotation: Object) -> None: ...
    @overload
    def Annotation(self) -> T: ...
    @overload
    def Annotation(self, type: Type) -> Object: ...
    @overload
    def Annotations(self) -> Iterable[T]: ...
    @overload
    def Annotations(self, type: Type) -> Iterable[Object]: ...
    @property
    def BaseUri(self) -> str: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Parent(self) -> XElement: ...
    def remove_Changed(self, value: EventHandler) -> None: ...
    def remove_Changing(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAnnotations(self) -> None: ...
    @overload
    def RemoveAnnotations(self, type: Type) -> None: ...


class XObjectChange:
    Add = 0
    Remove = 1
    Name = 2
    Value = 3


class XObjectChangeEventArgs(EventArgs):
    def __init__(self, objectChange: XObjectChange): ...
    @property
    def ObjectChange(self) -> XObjectChange: ...


class XProcessingInstruction(XNode):
    @overload
    def __init__(self, other: XProcessingInstruction): ...
    @overload
    def __init__(self, target: str, data: str): ...
    @property
    def Data(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Target(self) -> str: ...
    @Data.setter
    def Data(self, value: str) -> None: ...
    @Target.setter
    def Target(self, value: str) -> None: ...
    def WriteTo(self, writer: XmlWriter) -> None: ...


class XStreamingElement(Object):
    @overload
    def __init__(self, name: XName): ...
    @overload
    def __init__(self, name: XName, content: Object): ...
    @overload
    def __init__(self, name: XName, content: Set(Object)): ...
    @overload
    def Add(self, content: Object) -> None: ...
    @overload
    def Add(self, content: Set(Object)) -> None: ...
    @property
    def Name(self) -> XName: ...
    @overload
    def Save(self, stream: Stream) -> None: ...
    @overload
    def Save(self, textWriter: TextWriter) -> None: ...
    @overload
    def Save(self, writer: XmlWriter) -> None: ...
    @overload
    def Save(self, fileName: str) -> None: ...
    @overload
    def Save(self, fileName: str, options: SaveOptions) -> None: ...
    @overload
    def Save(self, stream: Stream, options: SaveOptions) -> None: ...
    @overload
    def Save(self, textWriter: TextWriter, options: SaveOptions) -> None: ...
    @Name.setter
    def Name(self, value: XName) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, options: SaveOptions) -> str: ...
    def WriteTo(self, writer: XmlWriter) -> None: ...


class XText(XNode):
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, other: XText): ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def WriteTo(self, writer: XmlWriter) -> None: ...
