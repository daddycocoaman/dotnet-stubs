__all__ = ['Advanced','Configuration']
from typing import Tuple, Set, Iterable, List


class CodeExporter(Object):
    @property
    def IncludeMetadata(self) -> CodeAttributeDeclarationCollection: ...


class CodeGenerationOptions:
    #None = 0
    GenerateProperties = 1
    GenerateNewAsync = 2
    GenerateOldAsync = 4
    GenerateOrder = 8
    EnableDataBinding = 16


class CodeIdentifier(Object):
    def __init__(self): ...
    def MakeCamel(identifier: str) -> str: ...
    def MakePascal(identifier: str) -> str: ...
    def MakeValid(identifier: str) -> str: ...


class CodeIdentifiers(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, caseSensitive: bool): ...
    def Add(self, identifier: str, value: Object) -> None: ...
    def AddReserved(self, identifier: str) -> None: ...
    def AddUnique(self, identifier: str, value: Object) -> str: ...
    def Clear(self) -> None: ...
    @property
    def UseCamelCasing(self) -> bool: ...
    def IsInUse(self, identifier: str) -> bool: ...
    def MakeRightCase(self, identifier: str) -> str: ...
    def MakeUnique(self, identifier: str) -> str: ...
    def Remove(self, identifier: str) -> None: ...
    def RemoveReserved(self, identifier: str) -> None: ...
    @UseCamelCasing.setter
    def UseCamelCasing(self, value: bool) -> None: ...
    def ToArray(self, type: Type) -> Object: ...


class ImportContext(Object):
    def __init__(self, identifiers: CodeIdentifiers, shareTypes: bool): ...
    @property
    def ShareTypes(self) -> bool: ...
    @property
    def TypeIdentifiers(self) -> CodeIdentifiers: ...
    @property
    def Warnings(self) -> StringCollection: ...


class IXmlSerializable:
    def GetSchema(self) -> XmlSchema: ...
    def ReadXml(self, reader: XmlReader) -> None: ...
    def WriteXml(self, writer: XmlWriter) -> None: ...


class IXmlTextParser:
    @property
    def Normalized(self) -> bool: ...
    @property
    def WhitespaceHandling(self) -> WhitespaceHandling: ...
    @Normalized.setter
    def Normalized(self, value: bool) -> None: ...
    @WhitespaceHandling.setter
    def WhitespaceHandling(self, value: WhitespaceHandling) -> None: ...


class SchemaImporter(Object):
    @property
    def Extensions(self) -> SchemaImporterExtensionCollection: ...


class SoapAttributeAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributeName: str): ...
    @property
    def AttributeName(self) -> str: ...
    @property
    def DataType(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @AttributeName.setter
    def AttributeName(self, value: str) -> None: ...
    @DataType.setter
    def DataType(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...


class SoapAttributeOverrides(Object):
    def __init__(self): ...
    @overload
    def Add(self, type: Type, attributes: SoapAttributes) -> None: ...
    @overload
    def Add(self, type: Type, member: str, attributes: SoapAttributes) -> None: ...
    @property
    def Item(self, type: Type) -> SoapAttributes: ...
    @property
    def Item(self, type: Type, member: str) -> SoapAttributes: ...


class SoapAttributes(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: ICustomAttributeProvider): ...
    @property
    def SoapAttribute(self) -> SoapAttributeAttribute: ...
    @property
    def SoapDefaultValue(self) -> Object: ...
    @property
    def SoapElement(self) -> SoapElementAttribute: ...
    @property
    def SoapEnum(self) -> SoapEnumAttribute: ...
    @property
    def SoapIgnore(self) -> bool: ...
    @property
    def SoapType(self) -> SoapTypeAttribute: ...
    @SoapAttribute.setter
    def SoapAttribute(self, value: SoapAttributeAttribute) -> None: ...
    @SoapDefaultValue.setter
    def SoapDefaultValue(self, value: Object) -> None: ...
    @SoapElement.setter
    def SoapElement(self, value: SoapElementAttribute) -> None: ...
    @SoapEnum.setter
    def SoapEnum(self, value: SoapEnumAttribute) -> None: ...
    @SoapIgnore.setter
    def SoapIgnore(self, value: bool) -> None: ...
    @SoapType.setter
    def SoapType(self, value: SoapTypeAttribute) -> None: ...


class SoapCodeExporter(CodeExporter):
    @overload
    def __init__(self, codeNamespace: CodeNamespace): ...
    @overload
    def __init__(self, codeNamespace: CodeNamespace, codeCompileUnit: CodeCompileUnit): ...
    @overload
    def __init__(self, codeNamespace: CodeNamespace, codeCompileUnit: CodeCompileUnit, options: CodeGenerationOptions): ...
    @overload
    def __init__(self, codeNamespace: CodeNamespace, codeCompileUnit: CodeCompileUnit, options: CodeGenerationOptions, mappings: Hashtable): ...
    @overload
    def __init__(self, codeNamespace: CodeNamespace, codeCompileUnit: CodeCompileUnit, codeProvider: CodeDomProvider, options: CodeGenerationOptions, mappings: Hashtable): ...
    @overload
    def AddMappingMetadata(self, metadata: CodeAttributeDeclarationCollection, member: XmlMemberMapping) -> None: ...
    @overload
    def AddMappingMetadata(self, metadata: CodeAttributeDeclarationCollection, member: XmlMemberMapping, forceUseMemberName: bool) -> None: ...
    def ExportMembersMapping(self, xmlMembersMapping: XmlMembersMapping) -> None: ...
    def ExportTypeMapping(self, xmlTypeMapping: XmlTypeMapping) -> None: ...


class SoapElementAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementName: str): ...
    @property
    def DataType(self) -> str: ...
    @property
    def ElementName(self) -> str: ...
    @property
    def IsNullable(self) -> bool: ...
    @DataType.setter
    def DataType(self, value: str) -> None: ...
    @ElementName.setter
    def ElementName(self, value: str) -> None: ...
    @IsNullable.setter
    def IsNullable(self, value: bool) -> None: ...


class SoapEnumAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class SoapIgnoreAttribute(Attribute):
    def __init__(self): ...


class SoapIncludeAttribute(Attribute):
    def __init__(self, type: Type): ...
    @property
    def Type(self) -> Type: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...


class SoapReflectionImporter(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, defaultNamespace: str): ...
    @overload
    def __init__(self, attributeOverrides: SoapAttributeOverrides): ...
    @overload
    def __init__(self, attributeOverrides: SoapAttributeOverrides, defaultNamespace: str): ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: Set(XmlReflectionMember)) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: Set(XmlReflectionMember), hasWrapperElement: bool, writeAccessors: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: Set(XmlReflectionMember), hasWrapperElement: bool, writeAccessors: bool, validate: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: Set(XmlReflectionMember), hasWrapperElement: bool, writeAccessors: bool, validate: bool, access: XmlMappingAccess) -> XmlMembersMapping: ...
    @overload
    def ImportTypeMapping(self, type: Type) -> XmlTypeMapping: ...
    @overload
    def ImportTypeMapping(self, type: Type, defaultNamespace: str) -> XmlTypeMapping: ...
    def IncludeType(self, type: Type) -> None: ...
    def IncludeTypes(self, provider: ICustomAttributeProvider) -> None: ...


class SoapSchemaExporter(Object):
    def __init__(self, schemas: XmlSchemas): ...
    @overload
    def ExportMembersMapping(self, xmlMembersMapping: XmlMembersMapping) -> None: ...
    @overload
    def ExportMembersMapping(self, xmlMembersMapping: XmlMembersMapping, exportEnclosingType: bool) -> None: ...
    def ExportTypeMapping(self, xmlTypeMapping: XmlTypeMapping) -> None: ...


class SoapSchemaImporter(SchemaImporter):
    @overload
    def __init__(self, schemas: XmlSchemas): ...
    @overload
    def __init__(self, schemas: XmlSchemas, typeIdentifiers: CodeIdentifiers): ...
    @overload
    def __init__(self, schemas: XmlSchemas, typeIdentifiers: CodeIdentifiers, options: CodeGenerationOptions): ...
    @overload
    def __init__(self, schemas: XmlSchemas, options: CodeGenerationOptions, context: ImportContext): ...
    @overload
    def __init__(self, schemas: XmlSchemas, options: CodeGenerationOptions, codeProvider: CodeDomProvider, context: ImportContext): ...
    def ImportDerivedTypeMapping(self, name: XmlQualifiedName, baseType: Type, baseTypeCanBeIndirect: bool) -> XmlTypeMapping: ...
    @overload
    def ImportMembersMapping(self, name: str, ns: str, members: Set(SoapSchemaMember)) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, name: str, ns: str, member: SoapSchemaMember) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, name: str, ns: str, members: Set(SoapSchemaMember), hasWrapperElement: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, name: str, ns: str, members: Set(SoapSchemaMember), hasWrapperElement: bool, baseType: Type, baseTypeCanBeIndirect: bool) -> XmlMembersMapping: ...


class SoapSchemaMember(Object):
    def __init__(self): ...
    @property
    def MemberName(self) -> str: ...
    @property
    def MemberType(self) -> XmlQualifiedName: ...
    @MemberName.setter
    def MemberName(self, value: str) -> None: ...
    @MemberType.setter
    def MemberType(self, value: XmlQualifiedName) -> None: ...


class SoapTypeAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, typeName: str, ns: str): ...
    @property
    def IncludeInSchema(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @IncludeInSchema.setter
    def IncludeInSchema(self, value: bool) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @TypeName.setter
    def TypeName(self, value: str) -> None: ...


class UnreferencedObjectEventArgs(EventArgs):
    def __init__(self, o: Object, id: str): ...
    @property
    def UnreferencedId(self) -> str: ...
    @property
    def UnreferencedObject(self) -> Object: ...


class UnreferencedObjectEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: UnreferencedObjectEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: UnreferencedObjectEventArgs) -> None: ...


class XmlAnyAttributeAttribute(Attribute):
    def __init__(self): ...


class XmlAnyElementAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, ns: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Order.setter
    def Order(self, value: int) -> None: ...


class XmlAnyElementAttributes(CollectionBase):
    def __init__(self): ...
    def Add(self, attribute: XmlAnyElementAttribute) -> int: ...
    def Contains(self, attribute: XmlAnyElementAttribute) -> bool: ...
    def CopyTo(self, array: Set(XmlAnyElementAttribute), index: int) -> None: ...
    @property
    def Item(self, index: int) -> XmlAnyElementAttribute: ...
    def IndexOf(self, attribute: XmlAnyElementAttribute) -> int: ...
    def Insert(self, index: int, attribute: XmlAnyElementAttribute) -> None: ...
    def Remove(self, attribute: XmlAnyElementAttribute) -> None: ...
    @Item.setter
    def Item(self, index: int, value: XmlAnyElementAttribute) -> None: ...


class XmlArrayAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementName: str): ...
    @property
    def ElementName(self) -> str: ...
    @property
    def Form(self) -> XmlSchemaForm: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @ElementName.setter
    def ElementName(self, value: str) -> None: ...
    @Form.setter
    def Form(self, value: XmlSchemaForm) -> None: ...
    @IsNullable.setter
    def IsNullable(self, value: bool) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Order.setter
    def Order(self, value: int) -> None: ...


class XmlArrayItemAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementName: str): ...
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, elementName: str, type: Type): ...
    @property
    def DataType(self) -> str: ...
    @property
    def ElementName(self) -> str: ...
    @property
    def Form(self) -> XmlSchemaForm: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def NestingLevel(self) -> int: ...
    @property
    def Type(self) -> Type: ...
    @DataType.setter
    def DataType(self, value: str) -> None: ...
    @ElementName.setter
    def ElementName(self, value: str) -> None: ...
    @Form.setter
    def Form(self, value: XmlSchemaForm) -> None: ...
    @IsNullable.setter
    def IsNullable(self, value: bool) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @NestingLevel.setter
    def NestingLevel(self, value: int) -> None: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...


class XmlArrayItemAttributes(CollectionBase):
    def __init__(self): ...
    def Add(self, attribute: XmlArrayItemAttribute) -> int: ...
    def Contains(self, attribute: XmlArrayItemAttribute) -> bool: ...
    def CopyTo(self, array: Set(XmlArrayItemAttribute), index: int) -> None: ...
    @property
    def Item(self, index: int) -> XmlArrayItemAttribute: ...
    def IndexOf(self, attribute: XmlArrayItemAttribute) -> int: ...
    def Insert(self, index: int, attribute: XmlArrayItemAttribute) -> None: ...
    def Remove(self, attribute: XmlArrayItemAttribute) -> None: ...
    @Item.setter
    def Item(self, index: int, value: XmlArrayItemAttribute) -> None: ...


class XmlAttributeAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributeName: str): ...
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, attributeName: str, type: Type): ...
    @property
    def AttributeName(self) -> str: ...
    @property
    def DataType(self) -> str: ...
    @property
    def Form(self) -> XmlSchemaForm: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @AttributeName.setter
    def AttributeName(self, value: str) -> None: ...
    @DataType.setter
    def DataType(self, value: str) -> None: ...
    @Form.setter
    def Form(self, value: XmlSchemaForm) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...


class XmlAttributeEventArgs(EventArgs):
    @property
    def Attr(self) -> XmlAttribute: ...
    @property
    def ExpectedAttributes(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def ObjectBeingDeserialized(self) -> Object: ...


class XmlAttributeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: XmlAttributeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: XmlAttributeEventArgs) -> None: ...


class XmlAttributeOverrides(Object):
    def __init__(self): ...
    @overload
    def Add(self, type: Type, attributes: XmlAttributes) -> None: ...
    @overload
    def Add(self, type: Type, member: str, attributes: XmlAttributes) -> None: ...
    @property
    def Item(self, type: Type) -> XmlAttributes: ...
    @property
    def Item(self, type: Type, member: str) -> XmlAttributes: ...


class XmlAttributes(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: ICustomAttributeProvider): ...
    @property
    def XmlAnyAttribute(self) -> XmlAnyAttributeAttribute: ...
    @property
    def XmlAnyElements(self) -> XmlAnyElementAttributes: ...
    @property
    def XmlArray(self) -> XmlArrayAttribute: ...
    @property
    def XmlArrayItems(self) -> XmlArrayItemAttributes: ...
    @property
    def XmlAttribute(self) -> XmlAttributeAttribute: ...
    @property
    def XmlChoiceIdentifier(self) -> XmlChoiceIdentifierAttribute: ...
    @property
    def XmlDefaultValue(self) -> Object: ...
    @property
    def XmlElements(self) -> XmlElementAttributes: ...
    @property
    def XmlEnum(self) -> XmlEnumAttribute: ...
    @property
    def XmlIgnore(self) -> bool: ...
    @property
    def Xmlns(self) -> bool: ...
    @property
    def XmlRoot(self) -> XmlRootAttribute: ...
    @property
    def XmlText(self) -> XmlTextAttribute: ...
    @property
    def XmlType(self) -> XmlTypeAttribute: ...
    @XmlAnyAttribute.setter
    def XmlAnyAttribute(self, value: XmlAnyAttributeAttribute) -> None: ...
    @XmlArray.setter
    def XmlArray(self, value: XmlArrayAttribute) -> None: ...
    @XmlAttribute.setter
    def XmlAttribute(self, value: XmlAttributeAttribute) -> None: ...
    @XmlDefaultValue.setter
    def XmlDefaultValue(self, value: Object) -> None: ...
    @XmlEnum.setter
    def XmlEnum(self, value: XmlEnumAttribute) -> None: ...
    @XmlIgnore.setter
    def XmlIgnore(self, value: bool) -> None: ...
    @Xmlns.setter
    def Xmlns(self, value: bool) -> None: ...
    @XmlRoot.setter
    def XmlRoot(self, value: XmlRootAttribute) -> None: ...
    @XmlText.setter
    def XmlText(self, value: XmlTextAttribute) -> None: ...
    @XmlType.setter
    def XmlType(self, value: XmlTypeAttribute) -> None: ...


class XmlChoiceIdentifierAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def MemberName(self) -> str: ...
    @MemberName.setter
    def MemberName(self, value: str) -> None: ...


class XmlCodeExporter(CodeExporter):
    @overload
    def __init__(self, codeNamespace: CodeNamespace): ...
    @overload
    def __init__(self, codeNamespace: CodeNamespace, codeCompileUnit: CodeCompileUnit): ...
    @overload
    def __init__(self, codeNamespace: CodeNamespace, codeCompileUnit: CodeCompileUnit, options: CodeGenerationOptions): ...
    @overload
    def __init__(self, codeNamespace: CodeNamespace, codeCompileUnit: CodeCompileUnit, options: CodeGenerationOptions, mappings: Hashtable): ...
    @overload
    def __init__(self, codeNamespace: CodeNamespace, codeCompileUnit: CodeCompileUnit, codeProvider: CodeDomProvider, options: CodeGenerationOptions, mappings: Hashtable): ...
    @overload
    def AddMappingMetadata(self, metadata: CodeAttributeDeclarationCollection, mapping: XmlTypeMapping, ns: str) -> None: ...
    @overload
    def AddMappingMetadata(self, metadata: CodeAttributeDeclarationCollection, member: XmlMemberMapping, ns: str) -> None: ...
    @overload
    def AddMappingMetadata(self, metadata: CodeAttributeDeclarationCollection, member: XmlMemberMapping, ns: str, forceUseMemberName: bool) -> None: ...
    def ExportMembersMapping(self, xmlMembersMapping: XmlMembersMapping) -> None: ...
    def ExportTypeMapping(self, xmlTypeMapping: XmlTypeMapping) -> None: ...


class XmlDeserializationEvents(ValueType):
    @property
    def OnUnknownAttribute(self) -> XmlAttributeEventHandler: ...
    @property
    def OnUnknownElement(self) -> XmlElementEventHandler: ...
    @property
    def OnUnknownNode(self) -> XmlNodeEventHandler: ...
    @property
    def OnUnreferencedObject(self) -> UnreferencedObjectEventHandler: ...
    @OnUnknownAttribute.setter
    def OnUnknownAttribute(self, value: XmlAttributeEventHandler) -> None: ...
    @OnUnknownElement.setter
    def OnUnknownElement(self, value: XmlElementEventHandler) -> None: ...
    @OnUnknownNode.setter
    def OnUnknownNode(self, value: XmlNodeEventHandler) -> None: ...
    @OnUnreferencedObject.setter
    def OnUnreferencedObject(self, value: UnreferencedObjectEventHandler) -> None: ...


class XmlElementAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementName: str): ...
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, elementName: str, type: Type): ...
    @property
    def DataType(self) -> str: ...
    @property
    def ElementName(self) -> str: ...
    @property
    def Form(self) -> XmlSchemaForm: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def Type(self) -> Type: ...
    @DataType.setter
    def DataType(self, value: str) -> None: ...
    @ElementName.setter
    def ElementName(self, value: str) -> None: ...
    @Form.setter
    def Form(self, value: XmlSchemaForm) -> None: ...
    @IsNullable.setter
    def IsNullable(self, value: bool) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Order.setter
    def Order(self, value: int) -> None: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...


class XmlElementAttributes(CollectionBase):
    def __init__(self): ...
    def Add(self, attribute: XmlElementAttribute) -> int: ...
    def Contains(self, attribute: XmlElementAttribute) -> bool: ...
    def CopyTo(self, array: Set(XmlElementAttribute), index: int) -> None: ...
    @property
    def Item(self, index: int) -> XmlElementAttribute: ...
    def IndexOf(self, attribute: XmlElementAttribute) -> int: ...
    def Insert(self, index: int, attribute: XmlElementAttribute) -> None: ...
    def Remove(self, attribute: XmlElementAttribute) -> None: ...
    @Item.setter
    def Item(self, index: int, value: XmlElementAttribute) -> None: ...


class XmlElementEventArgs(EventArgs):
    @property
    def Element(self) -> XmlElement: ...
    @property
    def ExpectedElements(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def ObjectBeingDeserialized(self) -> Object: ...


class XmlElementEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: XmlElementEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: XmlElementEventArgs) -> None: ...


class XmlEnumAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class XmlIgnoreAttribute(Attribute):
    def __init__(self): ...


class XmlIncludeAttribute(Attribute):
    def __init__(self, type: Type): ...
    @property
    def Type(self) -> Type: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...


class XmlMapping(Object):
    @property
    def ElementName(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def XsdElementName(self) -> str: ...
    def SetKey(self, key: str) -> None: ...


class XmlMappingAccess:
    #None = 0
    Read = 1
    Write = 2


class XmlMemberMapping(Object):
    def GenerateTypeName(self, codeProvider: CodeDomProvider) -> str: ...
    @property
    def Any(self) -> bool: ...
    @property
    def CheckSpecified(self) -> bool: ...
    @property
    def ElementName(self) -> str: ...
    @property
    def MemberName(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def TypeFullName(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def TypeNamespace(self) -> str: ...
    @property
    def XsdElementName(self) -> str: ...


class XmlMembersMapping(XmlMapping):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> XmlMemberMapping: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def TypeNamespace(self) -> str: ...


class XmlNamespaceDeclarationsAttribute(Attribute):
    def __init__(self): ...


class XmlNodeEventArgs(EventArgs):
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def ObjectBeingDeserialized(self) -> Object: ...
    @property
    def Text(self) -> str: ...


class XmlNodeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: XmlNodeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: XmlNodeEventArgs) -> None: ...


class XmlReflectionImporter(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, defaultNamespace: str): ...
    @overload
    def __init__(self, attributeOverrides: XmlAttributeOverrides): ...
    @overload
    def __init__(self, attributeOverrides: XmlAttributeOverrides, defaultNamespace: str): ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: Set(XmlReflectionMember), hasWrapperElement: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: Set(XmlReflectionMember), hasWrapperElement: bool, rpc: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: Set(XmlReflectionMember), hasWrapperElement: bool, rpc: bool, openModel: bool) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, elementName: str, ns: str, members: Set(XmlReflectionMember), hasWrapperElement: bool, rpc: bool, openModel: bool, access: XmlMappingAccess) -> XmlMembersMapping: ...
    @overload
    def ImportTypeMapping(self, type: Type) -> XmlTypeMapping: ...
    @overload
    def ImportTypeMapping(self, type: Type, defaultNamespace: str) -> XmlTypeMapping: ...
    @overload
    def ImportTypeMapping(self, type: Type, root: XmlRootAttribute) -> XmlTypeMapping: ...
    @overload
    def ImportTypeMapping(self, type: Type, root: XmlRootAttribute, defaultNamespace: str) -> XmlTypeMapping: ...
    def IncludeType(self, type: Type) -> None: ...
    def IncludeTypes(self, provider: ICustomAttributeProvider) -> None: ...


class XmlReflectionMember(Object):
    def __init__(self): ...
    @property
    def IsReturnValue(self) -> bool: ...
    @property
    def MemberName(self) -> str: ...
    @property
    def MemberType(self) -> Type: ...
    @property
    def OverrideIsNullable(self) -> bool: ...
    @property
    def SoapAttributes(self) -> SoapAttributes: ...
    @property
    def XmlAttributes(self) -> XmlAttributes: ...
    @IsReturnValue.setter
    def IsReturnValue(self, value: bool) -> None: ...
    @MemberName.setter
    def MemberName(self, value: str) -> None: ...
    @MemberType.setter
    def MemberType(self, value: Type) -> None: ...
    @OverrideIsNullable.setter
    def OverrideIsNullable(self, value: bool) -> None: ...
    @SoapAttributes.setter
    def SoapAttributes(self, value: SoapAttributes) -> None: ...
    @XmlAttributes.setter
    def XmlAttributes(self, value: XmlAttributes) -> None: ...


class XmlRootAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementName: str): ...
    @property
    def DataType(self) -> str: ...
    @property
    def ElementName(self) -> str: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @DataType.setter
    def DataType(self, value: str) -> None: ...
    @ElementName.setter
    def ElementName(self, value: str) -> None: ...
    @IsNullable.setter
    def IsNullable(self, value: bool) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...


class XmlSchemaEnumerator(Object):
    def __init__(self, list: XmlSchemas): ...
    def Dispose(self) -> None: ...
    @property
    def Current(self) -> XmlSchema: ...
    def MoveNext(self) -> bool: ...


class XmlSchemaExporter(Object):
    def __init__(self, schemas: XmlSchemas): ...
    @overload
    def ExportAnyType(self, ns: str) -> str: ...
    @overload
    def ExportAnyType(self, members: XmlMembersMapping) -> str: ...
    @overload
    def ExportMembersMapping(self, xmlMembersMapping: XmlMembersMapping) -> None: ...
    @overload
    def ExportMembersMapping(self, xmlMembersMapping: XmlMembersMapping, exportEnclosingType: bool) -> None: ...
    @overload
    def ExportTypeMapping(self, xmlTypeMapping: XmlTypeMapping) -> None: ...
    @overload
    def ExportTypeMapping(self, xmlMembersMapping: XmlMembersMapping) -> XmlQualifiedName: ...


class XmlSchemaImporter(SchemaImporter):
    @overload
    def __init__(self, schemas: XmlSchemas): ...
    @overload
    def __init__(self, schemas: XmlSchemas, typeIdentifiers: CodeIdentifiers): ...
    @overload
    def __init__(self, schemas: XmlSchemas, typeIdentifiers: CodeIdentifiers, options: CodeGenerationOptions): ...
    @overload
    def __init__(self, schemas: XmlSchemas, options: CodeGenerationOptions, context: ImportContext): ...
    @overload
    def __init__(self, schemas: XmlSchemas, options: CodeGenerationOptions, codeProvider: CodeDomProvider, context: ImportContext): ...
    def ImportAnyType(self, typeName: XmlQualifiedName, elementName: str) -> XmlMembersMapping: ...
    @overload
    def ImportDerivedTypeMapping(self, name: XmlQualifiedName, baseType: Type) -> XmlTypeMapping: ...
    @overload
    def ImportDerivedTypeMapping(self, name: XmlQualifiedName, baseType: Type, baseTypeCanBeIndirect: bool) -> XmlTypeMapping: ...
    @overload
    def ImportMembersMapping(self, name: XmlQualifiedName) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, names: Set(XmlQualifiedName)) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, name: str, ns: str, members: Set(SoapSchemaMember)) -> XmlMembersMapping: ...
    @overload
    def ImportMembersMapping(self, names: Set(XmlQualifiedName), baseType: Type, baseTypeCanBeIndirect: bool) -> XmlMembersMapping: ...
    @overload
    def ImportSchemaType(self, typeName: XmlQualifiedName) -> XmlTypeMapping: ...
    @overload
    def ImportSchemaType(self, typeName: XmlQualifiedName, baseType: Type) -> XmlTypeMapping: ...
    @overload
    def ImportSchemaType(self, typeName: XmlQualifiedName, baseType: Type, baseTypeCanBeIndirect: bool) -> XmlTypeMapping: ...
    def ImportTypeMapping(self, name: XmlQualifiedName) -> XmlTypeMapping: ...


class XmlSchemaProviderAttribute(Attribute):
    def __init__(self, methodName: str): ...
    @property
    def IsAny(self) -> bool: ...
    @property
    def MethodName(self) -> str: ...
    @IsAny.setter
    def IsAny(self, value: bool) -> None: ...


class XmlSchemas(CollectionBase):
    def __init__(self): ...
    @overload
    def Add(self, schema: XmlSchema) -> int: ...
    @overload
    def Add(self, schemas: XmlSchemas) -> None: ...
    @overload
    def Add(self, schema: XmlSchema, baseUri: Uri) -> int: ...
    def AddReference(self, schema: XmlSchema) -> None: ...
    def Compile(self, handler: ValidationEventHandler, fullCompile: bool) -> None: ...
    @overload
    def Contains(self, schema: XmlSchema) -> bool: ...
    @overload
    def Contains(self, targetNamespace: str) -> bool: ...
    def CopyTo(self, array: Set(XmlSchema), index: int) -> None: ...
    def Find(self, name: XmlQualifiedName, type: Type) -> Object: ...
    @property
    def IsCompiled(self) -> bool: ...
    @property
    def Item(self, ns: str) -> XmlSchema: ...
    @property
    def Item(self, index: int) -> XmlSchema: ...
    def GetSchemas(self, ns: str) -> IList: ...
    def IndexOf(self, schema: XmlSchema) -> int: ...
    def Insert(self, index: int, schema: XmlSchema) -> None: ...
    def IsDataSet(schema: XmlSchema) -> bool: ...
    def Remove(self, schema: XmlSchema) -> None: ...
    @Item.setter
    def Item(self, index: int, value: XmlSchema) -> None: ...


class XmlSerializationCollectionFixupCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, collection: Object, collectionItems: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, collection: Object, collectionItems: Object) -> None: ...


class XmlSerializationFixupCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, fixup: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, fixup: Object) -> None: ...


class XmlSerializationGeneratedCode(Object):
    pass


class XmlSerializationReadCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Object: ...
    def Invoke(self) -> Object: ...


class XmlSerializationReader(XmlSerializationGeneratedCode):
    pass


class XmlSerializationWriteCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, o: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, o: Object) -> None: ...


class XmlSerializationWriter(XmlSerializationGeneratedCode):
    pass


class XmlSerializer(Object):
    @overload
    def __init__(self, xmlTypeMapping: XmlTypeMapping): ...
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, type: Type, root: XmlRootAttribute): ...
    @overload
    def __init__(self, type: Type, extraTypes: Set(Type)): ...
    @overload
    def __init__(self, type: Type, overrides: XmlAttributeOverrides): ...
    @overload
    def __init__(self, type: Type, defaultNamespace: str): ...
    @overload
    def __init__(self, type: Type, overrides: XmlAttributeOverrides, extraTypes: Set(Type), root: XmlRootAttribute, defaultNamespace: str): ...
    @overload
    def __init__(self, type: Type, overrides: XmlAttributeOverrides, extraTypes: Set(Type), root: XmlRootAttribute, defaultNamespace: str, location: str): ...
    @overload
    def __init__(self, type: Type, overrides: XmlAttributeOverrides, extraTypes: Set(Type), root: XmlRootAttribute, defaultNamespace: str, location: str, evidence: Evidence): ...
    def add_UnknownAttribute(self, value: XmlAttributeEventHandler) -> None: ...
    def add_UnknownElement(self, value: XmlElementEventHandler) -> None: ...
    def add_UnknownNode(self, value: XmlNodeEventHandler) -> None: ...
    def add_UnreferencedObject(self, value: UnreferencedObjectEventHandler) -> None: ...
    def CanDeserialize(self, xmlReader: XmlReader) -> bool: ...
    @overload
    def Deserialize(self, stream: Stream) -> Object: ...
    @overload
    def Deserialize(self, textReader: TextReader) -> Object: ...
    @overload
    def Deserialize(self, xmlReader: XmlReader) -> Object: ...
    @overload
    def Deserialize(self, xmlReader: XmlReader, events: XmlDeserializationEvents) -> Object: ...
    @overload
    def Deserialize(self, xmlReader: XmlReader, encodingStyle: str) -> Object: ...
    @overload
    def Deserialize(self, xmlReader: XmlReader, encodingStyle: str, events: XmlDeserializationEvents) -> Object: ...
    @overload
    def FromMappings(mappings: Set(XmlMapping)) -> Set(XmlSerializer): ...
    @overload
    def FromMappings(mappings: Set(XmlMapping), type: Type) -> Set(XmlSerializer): ...
    def FromTypes(types: Set(Type)) -> Set(XmlSerializer): ...
    @overload
    def GenerateSerializer(types: Set(Type), mappings: Set(XmlMapping)) -> Assembly: ...
    @overload
    def GenerateSerializer(types: Set(Type), mappings: Set(XmlMapping), parameters: CompilerParameters) -> Assembly: ...
    @overload
    def GetXmlSerializerAssemblyName(type: Type) -> str: ...
    @overload
    def GetXmlSerializerAssemblyName(type: Type, defaultNamespace: str) -> str: ...
    def remove_UnknownAttribute(self, value: XmlAttributeEventHandler) -> None: ...
    def remove_UnknownElement(self, value: XmlElementEventHandler) -> None: ...
    def remove_UnknownNode(self, value: XmlNodeEventHandler) -> None: ...
    def remove_UnreferencedObject(self, value: UnreferencedObjectEventHandler) -> None: ...
    @overload
    def Serialize(self, textWriter: TextWriter, o: Object) -> None: ...
    @overload
    def Serialize(self, xmlWriter: XmlWriter, o: Object) -> None: ...
    @overload
    def Serialize(self, stream: Stream, o: Object) -> None: ...
    @overload
    def Serialize(self, xmlWriter: XmlWriter, o: Object, namespaces: XmlSerializerNamespaces) -> None: ...
    @overload
    def Serialize(self, stream: Stream, o: Object, namespaces: XmlSerializerNamespaces) -> None: ...
    @overload
    def Serialize(self, textWriter: TextWriter, o: Object, namespaces: XmlSerializerNamespaces) -> None: ...
    @overload
    def Serialize(self, xmlWriter: XmlWriter, o: Object, namespaces: XmlSerializerNamespaces, encodingStyle: str) -> None: ...
    @overload
    def Serialize(self, xmlWriter: XmlWriter, o: Object, namespaces: XmlSerializerNamespaces, encodingStyle: str, id: str) -> None: ...


class XmlSerializerAssemblyAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assemblyName: str): ...
    @overload
    def __init__(self, assemblyName: str, codeBase: str): ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def CodeBase(self) -> str: ...
    @AssemblyName.setter
    def AssemblyName(self, value: str) -> None: ...
    @CodeBase.setter
    def CodeBase(self, value: str) -> None: ...


class XmlSerializerFactory(Object):
    def __init__(self): ...
    @overload
    def CreateSerializer(self, xmlTypeMapping: XmlTypeMapping) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type: Type) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type: Type, extraTypes: Set(Type)) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type: Type, defaultNamespace: str) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type: Type, root: XmlRootAttribute) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type: Type, overrides: XmlAttributeOverrides) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type: Type, overrides: XmlAttributeOverrides, extraTypes: Set(Type), root: XmlRootAttribute, defaultNamespace: str) -> XmlSerializer: ...
    @overload
    def CreateSerializer(self, type: Type, overrides: XmlAttributeOverrides, extraTypes: Set(Type), root: XmlRootAttribute, defaultNamespace: str, location: str) -> XmlSerializer: ...


class XmlSerializerImplementation(Object):
    def CanSerialize(self, type: Type) -> bool: ...
    @property
    def Reader(self) -> XmlSerializationReader: ...
    @property
    def ReadMethods(self) -> Hashtable: ...
    @property
    def TypedSerializers(self) -> Hashtable: ...
    @property
    def WriteMethods(self) -> Hashtable: ...
    @property
    def Writer(self) -> XmlSerializationWriter: ...
    def GetSerializer(self, type: Type) -> XmlSerializer: ...


class XmlSerializerNamespaces(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, namespaces: XmlSerializerNamespaces): ...
    @overload
    def __init__(self, namespaces: Set(XmlQualifiedName)): ...
    def Add(self, prefix: str, ns: str) -> None: ...
    @property
    def Count(self) -> int: ...
    def ToArray(self) -> Set(XmlQualifiedName): ...


class XmlSerializerVersionAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type: Type): ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ParentAssemblyId(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @property
    def Version(self) -> str: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @ParentAssemblyId.setter
    def ParentAssemblyId(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...


class XmlTextAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type: Type): ...
    @property
    def DataType(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @DataType.setter
    def DataType(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...


class XmlTypeAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @property
    def AnonymousType(self) -> bool: ...
    @property
    def IncludeInSchema(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @AnonymousType.setter
    def AnonymousType(self, value: bool) -> None: ...
    @IncludeInSchema.setter
    def IncludeInSchema(self, value: bool) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @TypeName.setter
    def TypeName(self, value: str) -> None: ...


class XmlTypeMapping(XmlMapping):
    @property
    def TypeFullName(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def XsdTypeName(self) -> str: ...
    @property
    def XsdTypeNamespace(self) -> str: ...
