from typing import Tuple, Set, Iterable, List


class SchemaImporterExtension(Object):
    def ImportAnyElement(self, any: XmlSchemaAny, mixed: bool, schemas: XmlSchemas, importer: XmlSchemaImporter, compileUnit: CodeCompileUnit, mainNamespace: CodeNamespace, options: CodeGenerationOptions, codeProvider: CodeDomProvider) -> str: ...
    def ImportDefaultValue(self, value: str, type: str) -> CodeExpression: ...
    @overload
    def ImportSchemaType(self, type: XmlSchemaType, context: XmlSchemaObject, schemas: XmlSchemas, importer: XmlSchemaImporter, compileUnit: CodeCompileUnit, mainNamespace: CodeNamespace, options: CodeGenerationOptions, codeProvider: CodeDomProvider) -> str: ...
    @overload
    def ImportSchemaType(self, name: str, ns: str, context: XmlSchemaObject, schemas: XmlSchemas, importer: XmlSchemaImporter, compileUnit: CodeCompileUnit, mainNamespace: CodeNamespace, options: CodeGenerationOptions, codeProvider: CodeDomProvider) -> str: ...


class SchemaImporterExtensionCollection(CollectionBase):
    def __init__(self): ...
    @overload
    def Add(self, extension: SchemaImporterExtension) -> int: ...
    @overload
    def Add(self, name: str, type: Type) -> int: ...
    @overload
    def Clear(self) -> None: ...
    def Contains(self, extension: SchemaImporterExtension) -> bool: ...
    def CopyTo(self, array: Set(SchemaImporterExtension), index: int) -> None: ...
    @property
    def Item(self, index: int) -> SchemaImporterExtension: ...
    def IndexOf(self, extension: SchemaImporterExtension) -> int: ...
    def Insert(self, index: int, extension: SchemaImporterExtension) -> None: ...
    @overload
    def Remove(self, extension: SchemaImporterExtension) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: SchemaImporterExtension) -> None: ...
