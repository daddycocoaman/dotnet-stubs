from typing import Tuple, Set, Iterable, List


class AuthenticationInformation(Object):
    def __init__(self): ...
    @property
    def Address(self) -> str: ...
    @property
    def AuthorizationContexts(self) -> Collection: ...
    @property
    def DnsName(self) -> str: ...
    @property
    def NotOnOrAfter(self) -> Nullable: ...
    @property
    def Session(self) -> str: ...
    @Address.setter
    def Address(self, value: str) -> None: ...
    @DnsName.setter
    def DnsName(self, value: str) -> None: ...
    @NotOnOrAfter.setter
    def NotOnOrAfter(self, value: Nullable) -> None: ...
    @Session.setter
    def Session(self, value: str) -> None: ...


class AuthenticationTypes(Object):
    pass


class AuthorizationContext(Object):
    @overload
    def __init__(self, principal: ClaimsPrincipal, resource: str, action: str): ...
    @overload
    def __init__(self, principal: ClaimsPrincipal, resource: Collection, action: Collection): ...
    @property
    def Action(self) -> Collection: ...
    @property
    def Principal(self) -> ClaimsPrincipal: ...
    @property
    def Resource(self) -> Collection: ...


class ClaimProperties(Object):
    pass


class ClaimsAuthenticationManager(Object):
    def __init__(self): ...
    def Authenticate(self, resourceName: str, incomingPrincipal: ClaimsPrincipal) -> ClaimsPrincipal: ...
    def LoadCustomConfiguration(self, nodelist: XmlNodeList) -> None: ...


class ClaimsAuthorizationManager(Object):
    def __init__(self): ...
    def CheckAccess(self, context: AuthorizationContext) -> bool: ...
    def LoadCustomConfiguration(self, nodelist: XmlNodeList) -> None: ...
