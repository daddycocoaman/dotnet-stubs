from typing import Tuple, Set, Iterable, List


class CipherData(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cipherValue: Set(Byte)): ...
    @overload
    def __init__(self, cipherReference: CipherReference): ...
    @property
    def CipherReference(self) -> CipherReference: ...
    @property
    def CipherValue(self) -> Set(Byte): ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @CipherReference.setter
    def CipherReference(self, value: CipherReference) -> None: ...
    @CipherValue.setter
    def CipherValue(self, value: Set(Byte)) -> None: ...


class CipherReference(EncryptedReference):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, uri: str): ...
    @overload
    def __init__(self, uri: str, transformChain: TransformChain): ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...


class DataObject(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, id: str, mimeType: str, encoding: str, data: XmlElement): ...
    @property
    def Data(self) -> XmlNodeList: ...
    @property
    def Encoding(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def MimeType(self) -> str: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @Data.setter
    def Data(self, value: XmlNodeList) -> None: ...
    @Encoding.setter
    def Encoding(self, value: str) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...
    @MimeType.setter
    def MimeType(self, value: str) -> None: ...


class DataReference(EncryptedReference):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, uri: str): ...
    @overload
    def __init__(self, uri: str, transformChain: TransformChain): ...


class DSAKeyValue(KeyInfoClause):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: DSA): ...
    @property
    def Key(self) -> DSA: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @Key.setter
    def Key(self, value: DSA) -> None: ...


class EncryptedData(EncryptedType):
    def __init__(self): ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...


class EncryptedKey(EncryptedType):
    def __init__(self): ...
    @overload
    def AddReference(self, dataReference: DataReference) -> None: ...
    @overload
    def AddReference(self, keyReference: KeyReference) -> None: ...
    @property
    def CarriedKeyName(self) -> str: ...
    @property
    def Recipient(self) -> str: ...
    @property
    def ReferenceList(self) -> ReferenceList: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @CarriedKeyName.setter
    def CarriedKeyName(self, value: str) -> None: ...
    @Recipient.setter
    def Recipient(self, value: str) -> None: ...


class EncryptedReference(Object):
    def AddTransform(self, transform: Transform) -> None: ...
    @property
    def TransformChain(self) -> TransformChain: ...
    @property
    def Uri(self) -> str: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @TransformChain.setter
    def TransformChain(self, value: TransformChain) -> None: ...
    @Uri.setter
    def Uri(self, value: str) -> None: ...


class EncryptedType(Object):
    def AddProperty(self, ep: EncryptionProperty) -> None: ...
    @property
    def CipherData(self) -> CipherData: ...
    @property
    def Encoding(self) -> str: ...
    @property
    def EncryptionMethod(self) -> EncryptionMethod: ...
    @property
    def EncryptionProperties(self) -> EncryptionPropertyCollection: ...
    @property
    def Id(self) -> str: ...
    @property
    def KeyInfo(self) -> KeyInfo: ...
    @property
    def MimeType(self) -> str: ...
    @property
    def Type(self) -> str: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @CipherData.setter
    def CipherData(self, value: CipherData) -> None: ...
    @Encoding.setter
    def Encoding(self, value: str) -> None: ...
    @EncryptionMethod.setter
    def EncryptionMethod(self, value: EncryptionMethod) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...
    @KeyInfo.setter
    def KeyInfo(self, value: KeyInfo) -> None: ...
    @MimeType.setter
    def MimeType(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class EncryptedXml(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, document: XmlDocument): ...
    @overload
    def __init__(self, document: XmlDocument, evidence: Evidence): ...
    def AddKeyNameMapping(self, keyName: str, keyObject: Object) -> None: ...
    def ClearKeyNameMappings(self) -> None: ...
    def DecryptData(self, encryptedData: EncryptedData, symmetricAlgorithm: SymmetricAlgorithm) -> Set(Byte): ...
    def DecryptDocument(self) -> None: ...
    def DecryptEncryptedKey(self, encryptedKey: EncryptedKey) -> Set(Byte): ...
    @overload
    def DecryptKey(keyData: Set(Byte), symmetricAlgorithm: SymmetricAlgorithm) -> Set(Byte): ...
    @overload
    def DecryptKey(keyData: Set(Byte), rsa: RSA, useOAEP: bool) -> Set(Byte): ...
    @overload
    def Encrypt(self, inputElement: XmlElement, certificate: X509Certificate2) -> EncryptedData: ...
    @overload
    def Encrypt(self, inputElement: XmlElement, keyName: str) -> EncryptedData: ...
    @overload
    def EncryptData(self, plaintext: Set(Byte), symmetricAlgorithm: SymmetricAlgorithm) -> Set(Byte): ...
    @overload
    def EncryptData(self, inputElement: XmlElement, symmetricAlgorithm: SymmetricAlgorithm, content: bool) -> Set(Byte): ...
    @overload
    def EncryptKey(keyData: Set(Byte), symmetricAlgorithm: SymmetricAlgorithm) -> Set(Byte): ...
    @overload
    def EncryptKey(keyData: Set(Byte), rsa: RSA, useOAEP: bool) -> Set(Byte): ...
    @property
    def DocumentEvidence(self) -> Evidence: ...
    @property
    def Encoding(self) -> Encoding: ...
    @property
    def Mode(self) -> CipherMode: ...
    @property
    def Padding(self) -> PaddingMode: ...
    @property
    def Recipient(self) -> str: ...
    @property
    def Resolver(self) -> XmlResolver: ...
    @property
    def XmlDSigSearchDepth(self) -> int: ...
    def GetDecryptionIV(self, encryptedData: EncryptedData, symmetricAlgorithmUri: str) -> Set(Byte): ...
    def GetDecryptionKey(self, encryptedData: EncryptedData, symmetricAlgorithmUri: str) -> SymmetricAlgorithm: ...
    def GetIdElement(self, document: XmlDocument, idValue: str) -> XmlElement: ...
    def ReplaceData(self, inputElement: XmlElement, decryptedData: Set(Byte)) -> None: ...
    def ReplaceElement(inputElement: XmlElement, encryptedData: EncryptedData, content: bool) -> None: ...
    @DocumentEvidence.setter
    def DocumentEvidence(self, value: Evidence) -> None: ...
    @Encoding.setter
    def Encoding(self, value: Encoding) -> None: ...
    @Mode.setter
    def Mode(self, value: CipherMode) -> None: ...
    @Padding.setter
    def Padding(self, value: PaddingMode) -> None: ...
    @Recipient.setter
    def Recipient(self, value: str) -> None: ...
    @Resolver.setter
    def Resolver(self, value: XmlResolver) -> None: ...
    @XmlDSigSearchDepth.setter
    def XmlDSigSearchDepth(self, value: int) -> None: ...


class EncryptionMethod(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, algorithm: str): ...
    @property
    def KeyAlgorithm(self) -> str: ...
    @property
    def KeySize(self) -> int: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @KeyAlgorithm.setter
    def KeyAlgorithm(self, value: str) -> None: ...
    @KeySize.setter
    def KeySize(self, value: int) -> None: ...


class EncryptionProperty(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elementProperty: XmlElement): ...
    @property
    def Id(self) -> str: ...
    @property
    def PropertyElement(self) -> XmlElement: ...
    @property
    def Target(self) -> str: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @PropertyElement.setter
    def PropertyElement(self, value: XmlElement) -> None: ...


class EncryptionPropertyCollection(Object):
    def __init__(self): ...
    def Add(self, value: EncryptionProperty) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, value: EncryptionProperty) -> bool: ...
    @overload
    def CopyTo(self, array: Set(EncryptionProperty), index: int) -> None: ...
    @overload
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def ItemOf(self, index: int) -> EncryptionProperty: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: EncryptionProperty) -> int: ...
    def Insert(self, index: int, value: EncryptionProperty) -> None: ...
    def Item(self, index: int) -> EncryptionProperty: ...
    def Remove(self, value: EncryptionProperty) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @ItemOf.setter
    def ItemOf(self, index: int, value: EncryptionProperty) -> None: ...


class IRelDecryptor:
    def Decrypt(self, encryptionMethod: EncryptionMethod, keyInfo: KeyInfo, toDecrypt: Stream) -> Stream: ...


class KeyInfo(Object):
    def __init__(self): ...
    def AddClause(self, clause: KeyInfoClause) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Id(self) -> str: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetEnumerator(self, requestedObjectType: Type) -> IEnumerator: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...


class KeyInfoClause(Object):
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, element: XmlElement) -> None: ...


class KeyInfoEncryptedKey(KeyInfoClause):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, encryptedKey: EncryptedKey): ...
    @property
    def EncryptedKey(self) -> EncryptedKey: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @EncryptedKey.setter
    def EncryptedKey(self, value: EncryptedKey) -> None: ...


class KeyInfoName(KeyInfoClause):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keyName: str): ...
    @property
    def Value(self) -> str: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class KeyInfoNode(KeyInfoClause):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, node: XmlElement): ...
    @property
    def Value(self) -> XmlElement: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @Value.setter
    def Value(self, value: XmlElement) -> None: ...


class KeyInfoRetrievalMethod(KeyInfoClause):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, strUri: str): ...
    @overload
    def __init__(self, strUri: str, typeName: str): ...
    @property
    def Type(self) -> str: ...
    @property
    def Uri(self) -> str: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...
    @Uri.setter
    def Uri(self, value: str) -> None: ...


class KeyInfoX509Data(KeyInfoClause):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rgbCert: Set(Byte)): ...
    @overload
    def __init__(self, cert: X509Certificate): ...
    @overload
    def __init__(self, cert: X509Certificate, includeOption: X509IncludeOption): ...
    def AddCertificate(self, certificate: X509Certificate) -> None: ...
    def AddIssuerSerial(self, issuerName: str, serialNumber: str) -> None: ...
    @overload
    def AddSubjectKeyId(self, subjectKeyId: Set(Byte)) -> None: ...
    @overload
    def AddSubjectKeyId(self, subjectKeyId: str) -> None: ...
    def AddSubjectName(self, subjectName: str) -> None: ...
    @property
    def Certificates(self) -> ArrayList: ...
    @property
    def CRL(self) -> Set(Byte): ...
    @property
    def IssuerSerials(self) -> ArrayList: ...
    @property
    def SubjectKeyIds(self) -> ArrayList: ...
    @property
    def SubjectNames(self) -> ArrayList: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, element: XmlElement) -> None: ...
    @CRL.setter
    def CRL(self, value: Set(Byte)) -> None: ...


class KeyReference(EncryptedReference):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, uri: str): ...
    @overload
    def __init__(self, uri: str, transformChain: TransformChain): ...


class Reference(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, uri: str): ...
    def AddTransform(self, transform: Transform) -> None: ...
    @property
    def DigestMethod(self) -> str: ...
    @property
    def DigestValue(self) -> Set(Byte): ...
    @property
    def Id(self) -> str: ...
    @property
    def TransformChain(self) -> TransformChain: ...
    @property
    def Type(self) -> str: ...
    @property
    def Uri(self) -> str: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @DigestMethod.setter
    def DigestMethod(self, value: str) -> None: ...
    @DigestValue.setter
    def DigestValue(self, value: Set(Byte)) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...
    @TransformChain.setter
    def TransformChain(self, value: TransformChain) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...
    @Uri.setter
    def Uri(self, value: str) -> None: ...


class ReferenceList(Object):
    def __init__(self): ...
    def Add(self, value: Object) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, value: Object) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def ItemOf(self, index: int) -> EncryptedReference: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: Object) -> int: ...
    def Insert(self, index: int, value: Object) -> None: ...
    def Item(self, index: int) -> EncryptedReference: ...
    def Remove(self, value: Object) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @ItemOf.setter
    def ItemOf(self, index: int, value: EncryptedReference) -> None: ...


class RSAKeyValue(KeyInfoClause):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: RSA): ...
    @property
    def Key(self) -> RSA: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @Key.setter
    def Key(self, value: RSA) -> None: ...


class Signature(Object):
    def __init__(self): ...
    def AddObject(self, dataObject: DataObject) -> None: ...
    @property
    def Id(self) -> str: ...
    @property
    def KeyInfo(self) -> KeyInfo: ...
    @property
    def ObjectList(self) -> IList: ...
    @property
    def SignatureValue(self) -> Set(Byte): ...
    @property
    def SignedInfo(self) -> SignedInfo: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...
    @KeyInfo.setter
    def KeyInfo(self, value: KeyInfo) -> None: ...
    @ObjectList.setter
    def ObjectList(self, value: IList) -> None: ...
    @SignatureValue.setter
    def SignatureValue(self, value: Set(Byte)) -> None: ...
    @SignedInfo.setter
    def SignedInfo(self, value: SignedInfo) -> None: ...


class SignedInfo(Object):
    def __init__(self): ...
    def AddReference(self, reference: Reference) -> None: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def CanonicalizationMethod(self) -> str: ...
    @property
    def CanonicalizationMethodObject(self) -> Transform: ...
    @property
    def Count(self) -> int: ...
    @property
    def Id(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def References(self) -> ArrayList: ...
    @property
    def SignatureLength(self) -> str: ...
    @property
    def SignatureMethod(self) -> str: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @CanonicalizationMethod.setter
    def CanonicalizationMethod(self, value: str) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...
    @SignatureLength.setter
    def SignatureLength(self, value: str) -> None: ...
    @SignatureMethod.setter
    def SignatureMethod(self, value: str) -> None: ...


class SignedXml(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, document: XmlDocument): ...
    @overload
    def __init__(self, elem: XmlElement): ...
    def AddObject(self, dataObject: DataObject) -> None: ...
    def AddReference(self, reference: Reference) -> None: ...
    @overload
    def CheckSignature(self) -> bool: ...
    @overload
    def CheckSignature(self, key: AsymmetricAlgorithm) -> bool: ...
    @overload
    def CheckSignature(self, macAlg: KeyedHashAlgorithm) -> bool: ...
    @overload
    def CheckSignature(self, certificate: X509Certificate2, verifySignatureOnly: bool) -> bool: ...
    def CheckSignatureReturningKey(self) -> Tuple[bool, AsymmetricAlgorithm]: ...
    @overload
    def ComputeSignature(self) -> None: ...
    @overload
    def ComputeSignature(self, macAlg: KeyedHashAlgorithm) -> None: ...
    @property
    def EncryptedXml(self) -> EncryptedXml: ...
    @property
    def KeyInfo(self) -> KeyInfo: ...
    @property
    def SafeCanonicalizationMethods(self) -> Collection: ...
    @property
    def Signature(self) -> Signature: ...
    @property
    def SignatureFormatValidator(self) -> Func: ...
    @property
    def SignatureLength(self) -> str: ...
    @property
    def SignatureMethod(self) -> str: ...
    @property
    def SignatureValue(self) -> Set(Byte): ...
    @property
    def SignedInfo(self) -> SignedInfo: ...
    @property
    def SigningKey(self) -> AsymmetricAlgorithm: ...
    @property
    def SigningKeyName(self) -> str: ...
    def GetIdElement(self, document: XmlDocument, idValue: str) -> XmlElement: ...
    def GetXml(self) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    @EncryptedXml.setter
    def EncryptedXml(self, value: EncryptedXml) -> None: ...
    @KeyInfo.setter
    def KeyInfo(self, value: KeyInfo) -> None: ...
    @Resolver.setter
    def Resolver(self, value: XmlResolver) -> None: ...
    @SignatureFormatValidator.setter
    def SignatureFormatValidator(self, value: Func) -> None: ...
    @SigningKey.setter
    def SigningKey(self, value: AsymmetricAlgorithm) -> None: ...
    @SigningKeyName.setter
    def SigningKeyName(self, value: str) -> None: ...


class Transform(Object):
    @property
    def Algorithm(self) -> str: ...
    @property
    def Context(self) -> XmlElement: ...
    @property
    def InputTypes(self) -> Set(Type): ...
    @property
    def OutputTypes(self) -> Set(Type): ...
    @property
    def PropagatedNamespaces(self) -> Hashtable: ...
    def GetDigestedOutput(self, hash: HashAlgorithm) -> Set(Byte): ...
    @overload
    def GetOutput(self) -> Object: ...
    @overload
    def GetOutput(self, type: Type) -> Object: ...
    def GetXml(self) -> XmlElement: ...
    def LoadInnerXml(self, nodeList: XmlNodeList) -> None: ...
    def LoadInput(self, obj: Object) -> None: ...
    @Algorithm.setter
    def Algorithm(self, value: str) -> None: ...
    @Context.setter
    def Context(self, value: XmlElement) -> None: ...
    @Resolver.setter
    def Resolver(self, value: XmlResolver) -> None: ...


class TransformChain(Object):
    def __init__(self): ...
    def Add(self, transform: Transform) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> Transform: ...
    def GetEnumerator(self) -> IEnumerator: ...


class X509IssuerSerial(ValueType):
    @property
    def IssuerName(self) -> str: ...
    @property
    def SerialNumber(self) -> str: ...
    @IssuerName.setter
    def IssuerName(self, value: str) -> None: ...
    @SerialNumber.setter
    def SerialNumber(self, value: str) -> None: ...


class XmlDecryptionTransform(Transform):
    def __init__(self): ...
    def AddExceptUri(self, uri: str) -> None: ...
    @property
    def EncryptedXml(self) -> EncryptedXml: ...
    @property
    def InputTypes(self) -> Set(Type): ...
    @property
    def OutputTypes(self) -> Set(Type): ...
    @overload
    def GetOutput(self) -> Object: ...
    @overload
    def GetOutput(self, type: Type) -> Object: ...
    def LoadInnerXml(self, nodeList: XmlNodeList) -> None: ...
    def LoadInput(self, obj: Object) -> None: ...
    @EncryptedXml.setter
    def EncryptedXml(self, value: EncryptedXml) -> None: ...


class XmlDsigBase64Transform(Transform):
    def __init__(self): ...
    @property
    def InputTypes(self) -> Set(Type): ...
    @property
    def OutputTypes(self) -> Set(Type): ...
    @overload
    def GetOutput(self) -> Object: ...
    @overload
    def GetOutput(self, type: Type) -> Object: ...
    def LoadInnerXml(self, nodeList: XmlNodeList) -> None: ...
    def LoadInput(self, obj: Object) -> None: ...


class XmlDsigC14NTransform(Transform):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, includeComments: bool): ...
    @property
    def InputTypes(self) -> Set(Type): ...
    @property
    def OutputTypes(self) -> Set(Type): ...
    def GetDigestedOutput(self, hash: HashAlgorithm) -> Set(Byte): ...
    @overload
    def GetOutput(self) -> Object: ...
    @overload
    def GetOutput(self, type: Type) -> Object: ...
    def LoadInnerXml(self, nodeList: XmlNodeList) -> None: ...
    def LoadInput(self, obj: Object) -> None: ...


class XmlDsigC14NWithCommentsTransform(XmlDsigC14NTransform):
    def __init__(self): ...


class XmlDsigEnvelopedSignatureTransform(Transform):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, includeComments: bool): ...
    @property
    def InputTypes(self) -> Set(Type): ...
    @property
    def OutputTypes(self) -> Set(Type): ...
    @overload
    def GetOutput(self) -> Object: ...
    @overload
    def GetOutput(self, type: Type) -> Object: ...
    def LoadInnerXml(self, nodeList: XmlNodeList) -> None: ...
    def LoadInput(self, obj: Object) -> None: ...


class XmlDsigExcC14NTransform(Transform):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, includeComments: bool): ...
    @overload
    def __init__(self, inclusiveNamespacesPrefixList: str): ...
    @overload
    def __init__(self, includeComments: bool, inclusiveNamespacesPrefixList: str): ...
    @property
    def InclusiveNamespacesPrefixList(self) -> str: ...
    @property
    def InputTypes(self) -> Set(Type): ...
    @property
    def OutputTypes(self) -> Set(Type): ...
    def GetDigestedOutput(self, hash: HashAlgorithm) -> Set(Byte): ...
    @overload
    def GetOutput(self) -> Object: ...
    @overload
    def GetOutput(self, type: Type) -> Object: ...
    def LoadInnerXml(self, nodeList: XmlNodeList) -> None: ...
    def LoadInput(self, obj: Object) -> None: ...
    @InclusiveNamespacesPrefixList.setter
    def InclusiveNamespacesPrefixList(self, value: str) -> None: ...


class XmlDsigExcC14NWithCommentsTransform(XmlDsigExcC14NTransform):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, inclusiveNamespacesPrefixList: str): ...


class XmlDsigXPathTransform(Transform):
    def __init__(self): ...
    @property
    def InputTypes(self) -> Set(Type): ...
    @property
    def OutputTypes(self) -> Set(Type): ...
    @overload
    def GetOutput(self) -> Object: ...
    @overload
    def GetOutput(self, type: Type) -> Object: ...
    def LoadInnerXml(self, nodeList: XmlNodeList) -> None: ...
    def LoadInput(self, obj: Object) -> None: ...


class XmlDsigXsltTransform(Transform):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, includeComments: bool): ...
    @property
    def InputTypes(self) -> Set(Type): ...
    @property
    def OutputTypes(self) -> Set(Type): ...
    @overload
    def GetOutput(self) -> Object: ...
    @overload
    def GetOutput(self, type: Type) -> Object: ...
    def LoadInnerXml(self, nodeList: XmlNodeList) -> None: ...
    def LoadInput(self, obj: Object) -> None: ...


class XmlLicenseTransform(Transform):
    def __init__(self): ...
    @property
    def Decryptor(self) -> IRelDecryptor: ...
    @property
    def InputTypes(self) -> Set(Type): ...
    @property
    def OutputTypes(self) -> Set(Type): ...
    @overload
    def GetOutput(self) -> Object: ...
    @overload
    def GetOutput(self, type: Type) -> Object: ...
    def LoadInnerXml(self, nodeList: XmlNodeList) -> None: ...
    def LoadInput(self, obj: Object) -> None: ...
    @Decryptor.setter
    def Decryptor(self, value: IRelDecryptor) -> None: ...
