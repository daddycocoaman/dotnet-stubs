__all__ = ['Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','Pkcs','X509Certificates','X509Certificates','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml','Xml']
from typing import Tuple, Set, Iterable, List


class DpapiDataProtector(DataProtector):
    def __init__(self, appName: str, primaryPurpose: str, specificPurpose: Set(str)): ...
    @property
    def Scope(self) -> DataProtectionScope: ...
    def IsReprotectRequired(self, encryptedData: Set(Byte)) -> bool: ...
    @Scope.setter
    def Scope(self, value: DataProtectionScope) -> None: ...
