__all__ = ['Pkcs','X509Certificates','Xml']
from typing import Tuple, Set, Iterable, List


class CryptographicAttributeObject(Object):
    @overload
    def __init__(self, oid: Oid): ...
    @overload
    def __init__(self, oid: Oid, values: AsnEncodedDataCollection): ...
    @property
    def Oid(self) -> Oid: ...
    @property
    def Values(self) -> AsnEncodedDataCollection: ...


class CryptographicAttributeObjectCollection(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attribute: CryptographicAttributeObject): ...
    @overload
    def Add(self, asnEncodedData: AsnEncodedData) -> int: ...
    @overload
    def Add(self, attribute: CryptographicAttributeObject) -> int: ...
    def CopyTo(self, array: Set(CryptographicAttributeObject), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, index: int) -> CryptographicAttributeObject: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> CryptographicAttributeObjectEnumerator: ...
    def Remove(self, attribute: CryptographicAttributeObject) -> None: ...


class CryptographicAttributeObjectEnumerator(Object):
    @property
    def Current(self) -> CryptographicAttributeObject: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class DataProtectionScope:
    CurrentUser = 0
    LocalMachine = 1


class DataProtector(Object):
    def Create(providerClass: str, applicationName: str, primaryPurpose: str, specificPurposes: Set(str)) -> DataProtector: ...
    def IsReprotectRequired(self, encryptedData: Set(Byte)) -> bool: ...
    def Protect(self, userData: Set(Byte)) -> Set(Byte): ...
    def Unprotect(self, encryptedData: Set(Byte)) -> Set(Byte): ...


class DpapiDataProtector(DataProtector):
    def __init__(self, appName: str, primaryPurpose: str, specificPurpose: Set(str)): ...
    @property
    def Scope(self) -> DataProtectionScope: ...
    def IsReprotectRequired(self, encryptedData: Set(Byte)) -> bool: ...
    @Scope.setter
    def Scope(self, value: DataProtectionScope) -> None: ...


class MemoryProtectionScope:
    SameProcess = 0
    CrossProcess = 1
    SameLogon = 2


class ProtectedData(Object):
    def Protect(userData: Set(Byte), optionalEntropy: Set(Byte), scope: DataProtectionScope) -> Set(Byte): ...
    def Unprotect(encryptedData: Set(Byte), optionalEntropy: Set(Byte), scope: DataProtectionScope) -> Set(Byte): ...


class ProtectedMemory(Object):
    def Protect(userData: Set(Byte), scope: MemoryProtectionScope) -> None: ...
    def Unprotect(encryptedData: Set(Byte), scope: MemoryProtectionScope) -> None: ...
