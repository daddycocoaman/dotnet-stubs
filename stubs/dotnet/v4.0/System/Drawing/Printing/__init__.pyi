from typing import Tuple, Set, Iterable, List


class Duplex:
    Simplex = 1
    Vertical = 2
    Horizontal = 3
    Default = -1


class InvalidPrinterException(SystemException):
    def __init__(self, settings: PrinterSettings): ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class Margins(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, left: int, right: int, top: int, bottom: int): ...
    def Clone(self) -> Object: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Left(self) -> int: ...
    @property
    def Right(self) -> int: ...
    @property
    def Top(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(m1: Margins, m2: Margins) -> bool: ...
    def op_Inequality(m1: Margins, m2: Margins) -> bool: ...
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Right.setter
    def Right(self, value: int) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class MarginsConverter(ExpandableObjectConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> Object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...


class PageSettings(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, printerSettings: PrinterSettings): ...
    def Clone(self) -> Object: ...
    def CopyToHdevmode(self, hdevmode: IntPtr) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Color(self) -> bool: ...
    @property
    def HardMarginX(self) -> Single: ...
    @property
    def HardMarginY(self) -> Single: ...
    @property
    def Landscape(self) -> bool: ...
    @property
    def Margins(self) -> Margins: ...
    @property
    def PaperSize(self) -> PaperSize: ...
    @property
    def PaperSource(self) -> PaperSource: ...
    @property
    def PrintableArea(self) -> RectangleF: ...
    @property
    def PrinterResolution(self) -> PrinterResolution: ...
    @property
    def PrinterSettings(self) -> PrinterSettings: ...
    @Color.setter
    def Color(self, value: bool) -> None: ...
    @Landscape.setter
    def Landscape(self, value: bool) -> None: ...
    @Margins.setter
    def Margins(self, value: Margins) -> None: ...
    @PaperSize.setter
    def PaperSize(self, value: PaperSize) -> None: ...
    @PaperSource.setter
    def PaperSource(self, value: PaperSource) -> None: ...
    @PrinterResolution.setter
    def PrinterResolution(self, value: PrinterResolution) -> None: ...
    @PrinterSettings.setter
    def PrinterSettings(self, value: PrinterSettings) -> None: ...
    def SetHdevmode(self, hdevmode: IntPtr) -> None: ...
    def ToString(self) -> str: ...


class PaperKind:
    Custom = 0
    Letter = 1
    LetterSmall = 2
    Tabloid = 3
    Ledger = 4
    Legal = 5
    Statement = 6
    Executive = 7
    A3 = 8
    A4 = 9
    A4Small = 10
    A5 = 11
    B4 = 12
    B5 = 13
    Folio = 14
    Quarto = 15
    Standard10x14 = 16
    Standard11x17 = 17
    Note = 18
    Number9Envelope = 19
    Number10Envelope = 20
    Number11Envelope = 21
    Number12Envelope = 22
    Number14Envelope = 23
    CSheet = 24
    DSheet = 25
    ESheet = 26
    DLEnvelope = 27
    C5Envelope = 28
    C3Envelope = 29
    C4Envelope = 30
    C6Envelope = 31
    C65Envelope = 32
    B4Envelope = 33
    B5Envelope = 34
    B6Envelope = 35
    ItalyEnvelope = 36
    MonarchEnvelope = 37
    PersonalEnvelope = 38
    USStandardFanfold = 39
    GermanStandardFanfold = 40
    GermanLegalFanfold = 41
    IsoB4 = 42
    JapanesePostcard = 43
    Standard9x11 = 44
    Standard10x11 = 45
    Standard15x11 = 46
    InviteEnvelope = 47
    LetterExtra = 50
    LegalExtra = 51
    TabloidExtra = 52
    A4Extra = 53
    LetterTransverse = 54
    A4Transverse = 55
    LetterExtraTransverse = 56
    APlus = 57
    BPlus = 58
    LetterPlus = 59
    A4Plus = 60
    A5Transverse = 61
    B5Transverse = 62
    A3Extra = 63
    A5Extra = 64
    B5Extra = 65
    A2 = 66
    A3Transverse = 67
    A3ExtraTransverse = 68
    JapaneseDoublePostcard = 69
    A6 = 70
    JapaneseEnvelopeKakuNumber2 = 71
    JapaneseEnvelopeKakuNumber3 = 72
    JapaneseEnvelopeChouNumber3 = 73
    JapaneseEnvelopeChouNumber4 = 74
    LetterRotated = 75
    A3Rotated = 76
    A4Rotated = 77
    A5Rotated = 78
    B4JisRotated = 79
    B5JisRotated = 80
    JapanesePostcardRotated = 81
    JapaneseDoublePostcardRotated = 82
    A6Rotated = 83
    JapaneseEnvelopeKakuNumber2Rotated = 84
    JapaneseEnvelopeKakuNumber3Rotated = 85
    JapaneseEnvelopeChouNumber3Rotated = 86
    JapaneseEnvelopeChouNumber4Rotated = 87
    B6Jis = 88
    B6JisRotated = 89
    Standard12x11 = 90
    JapaneseEnvelopeYouNumber4 = 91
    JapaneseEnvelopeYouNumber4Rotated = 92
    Prc16K = 93
    Prc32K = 94
    Prc32KBig = 95
    PrcEnvelopeNumber1 = 96
    PrcEnvelopeNumber2 = 97
    PrcEnvelopeNumber3 = 98
    PrcEnvelopeNumber4 = 99
    PrcEnvelopeNumber5 = 100
    PrcEnvelopeNumber6 = 101
    PrcEnvelopeNumber7 = 102
    PrcEnvelopeNumber8 = 103
    PrcEnvelopeNumber9 = 104
    PrcEnvelopeNumber10 = 105
    Prc16KRotated = 106
    Prc32KRotated = 107
    Prc32KBigRotated = 108
    PrcEnvelopeNumber1Rotated = 109
    PrcEnvelopeNumber2Rotated = 110
    PrcEnvelopeNumber3Rotated = 111
    PrcEnvelopeNumber4Rotated = 112
    PrcEnvelopeNumber5Rotated = 113
    PrcEnvelopeNumber6Rotated = 114
    PrcEnvelopeNumber7Rotated = 115
    PrcEnvelopeNumber8Rotated = 116
    PrcEnvelopeNumber9Rotated = 117
    PrcEnvelopeNumber10Rotated = 118


class PaperSize(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, width: int, height: int): ...
    @property
    def Height(self) -> int: ...
    @property
    def Kind(self) -> PaperKind: ...
    @property
    def PaperName(self) -> str: ...
    @property
    def RawKind(self) -> int: ...
    @property
    def Width(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @PaperName.setter
    def PaperName(self, value: str) -> None: ...
    @RawKind.setter
    def RawKind(self, value: int) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class PaperSizeCollection(Object):
    def __init__(self, array: Set(PaperSize)): ...
    def Add(self, paperSize: PaperSize) -> int: ...
    def CopyTo(self, paperSizes: Set(PaperSize), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> PaperSize: ...
    def GetEnumerator(self) -> IEnumerator: ...


class PaperSource(Object):
    def __init__(self): ...
    @property
    def Kind(self) -> PaperSourceKind: ...
    @property
    def RawKind(self) -> int: ...
    @property
    def SourceName(self) -> str: ...
    @RawKind.setter
    def RawKind(self, value: int) -> None: ...
    @SourceName.setter
    def SourceName(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class PaperSourceCollection(Object):
    def __init__(self, array: Set(PaperSource)): ...
    def Add(self, paperSource: PaperSource) -> int: ...
    def CopyTo(self, paperSources: Set(PaperSource), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> PaperSource: ...
    def GetEnumerator(self) -> IEnumerator: ...


class PaperSourceKind:
    Upper = 1
    Lower = 2
    Middle = 3
    Manual = 4
    Envelope = 5
    ManualFeed = 6
    AutomaticFeed = 7
    TractorFeed = 8
    SmallFormat = 9
    LargeFormat = 10
    LargeCapacity = 11
    Cassette = 14
    FormSource = 15
    Custom = 257


class PreviewPageInfo(Object):
    def __init__(self, image: Image, physicalSize: Size): ...
    @property
    def Image(self) -> Image: ...
    @property
    def PhysicalSize(self) -> Size: ...


class PreviewPrintController(PrintController):
    def __init__(self): ...
    @property
    def IsPreview(self) -> bool: ...
    @property
    def UseAntiAlias(self) -> bool: ...
    def GetPreviewPageInfo(self) -> Set(PreviewPageInfo): ...
    def OnEndPage(self, document: PrintDocument, e: PrintPageEventArgs) -> None: ...
    def OnEndPrint(self, document: PrintDocument, e: PrintEventArgs) -> None: ...
    def OnStartPage(self, document: PrintDocument, e: PrintPageEventArgs) -> Graphics: ...
    def OnStartPrint(self, document: PrintDocument, e: PrintEventArgs) -> None: ...
    @UseAntiAlias.setter
    def UseAntiAlias(self, value: bool) -> None: ...


class PrintAction:
    PrintToFile = 0
    PrintToPreview = 1
    PrintToPrinter = 2


class PrintController(Object):
    @property
    def IsPreview(self) -> bool: ...
    def OnEndPage(self, document: PrintDocument, e: PrintPageEventArgs) -> None: ...
    def OnEndPrint(self, document: PrintDocument, e: PrintEventArgs) -> None: ...
    def OnStartPage(self, document: PrintDocument, e: PrintPageEventArgs) -> Graphics: ...
    def OnStartPrint(self, document: PrintDocument, e: PrintEventArgs) -> None: ...


class PrintDocument(Component):
    def __init__(self): ...
    def add_BeginPrint(self, value: PrintEventHandler) -> None: ...
    def add_EndPrint(self, value: PrintEventHandler) -> None: ...
    def add_PrintPage(self, value: PrintPageEventHandler) -> None: ...
    def add_QueryPageSettings(self, value: QueryPageSettingsEventHandler) -> None: ...
    @property
    def DefaultPageSettings(self) -> PageSettings: ...
    @property
    def DocumentName(self) -> str: ...
    @property
    def OriginAtMargins(self) -> bool: ...
    @property
    def PrintController(self) -> PrintController: ...
    @property
    def PrinterSettings(self) -> PrinterSettings: ...
    def Print(self) -> None: ...
    def remove_BeginPrint(self, value: PrintEventHandler) -> None: ...
    def remove_EndPrint(self, value: PrintEventHandler) -> None: ...
    def remove_PrintPage(self, value: PrintPageEventHandler) -> None: ...
    def remove_QueryPageSettings(self, value: QueryPageSettingsEventHandler) -> None: ...
    @DefaultPageSettings.setter
    def DefaultPageSettings(self, value: PageSettings) -> None: ...
    @DocumentName.setter
    def DocumentName(self, value: str) -> None: ...
    @OriginAtMargins.setter
    def OriginAtMargins(self, value: bool) -> None: ...
    @PrintController.setter
    def PrintController(self, value: PrintController) -> None: ...
    @PrinterSettings.setter
    def PrinterSettings(self, value: PrinterSettings) -> None: ...
    def ToString(self) -> str: ...


class PrinterResolution(Object):
    def __init__(self): ...
    @property
    def Kind(self) -> PrinterResolutionKind: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @Kind.setter
    def Kind(self, value: PrinterResolutionKind) -> None: ...
    @X.setter
    def X(self, value: int) -> None: ...
    @Y.setter
    def Y(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class PrinterResolutionCollection(Object):
    def __init__(self, array: Set(PrinterResolution)): ...
    def Add(self, printerResolution: PrinterResolution) -> int: ...
    def CopyTo(self, printerResolutions: Set(PrinterResolution), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> PrinterResolution: ...
    def GetEnumerator(self) -> IEnumerator: ...


class PrinterResolutionKind:
    Custom = 0
    High = -4
    Medium = -3
    Low = -2
    Draft = -1


class PrinterSettings(Object):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    @overload
    def CreateMeasurementGraphics(self) -> Graphics: ...
    @overload
    def CreateMeasurementGraphics(self, honorOriginAtMargins: bool) -> Graphics: ...
    @overload
    def CreateMeasurementGraphics(self, pageSettings: PageSettings) -> Graphics: ...
    @overload
    def CreateMeasurementGraphics(self, pageSettings: PageSettings, honorOriginAtMargins: bool) -> Graphics: ...
    @property
    def CanDuplex(self) -> bool: ...
    @property
    def Collate(self) -> bool: ...
    @property
    def Copies(self) -> Int16: ...
    @property
    def DefaultPageSettings(self) -> PageSettings: ...
    @property
    def Duplex(self) -> Duplex: ...
    @property
    def FromPage(self) -> int: ...
    @property
    def InstalledPrinters() -> StringCollection: ...
    @property
    def IsDefaultPrinter(self) -> bool: ...
    @property
    def IsPlotter(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LandscapeAngle(self) -> int: ...
    @property
    def MaximumCopies(self) -> int: ...
    @property
    def MaximumPage(self) -> int: ...
    @property
    def MinimumPage(self) -> int: ...
    @property
    def PaperSizes(self) -> PaperSizeCollection: ...
    @property
    def PaperSources(self) -> PaperSourceCollection: ...
    @property
    def PrinterName(self) -> str: ...
    @property
    def PrinterResolutions(self) -> PrinterResolutionCollection: ...
    @property
    def PrintFileName(self) -> str: ...
    @property
    def PrintRange(self) -> PrintRange: ...
    @property
    def PrintToFile(self) -> bool: ...
    @property
    def SupportsColor(self) -> bool: ...
    @property
    def ToPage(self) -> int: ...
    @overload
    def GetHdevmode(self) -> IntPtr: ...
    @overload
    def GetHdevmode(self, pageSettings: PageSettings) -> IntPtr: ...
    def GetHdevnames(self) -> IntPtr: ...
    @overload
    def IsDirectPrintingSupported(self, imageFormat: ImageFormat) -> bool: ...
    @overload
    def IsDirectPrintingSupported(self, image: Image) -> bool: ...
    @Collate.setter
    def Collate(self, value: bool) -> None: ...
    @Copies.setter
    def Copies(self, value: Int16) -> None: ...
    @Duplex.setter
    def Duplex(self, value: Duplex) -> None: ...
    @FromPage.setter
    def FromPage(self, value: int) -> None: ...
    @MaximumPage.setter
    def MaximumPage(self, value: int) -> None: ...
    @MinimumPage.setter
    def MinimumPage(self, value: int) -> None: ...
    @PrinterName.setter
    def PrinterName(self, value: str) -> None: ...
    @PrintFileName.setter
    def PrintFileName(self, value: str) -> None: ...
    @PrintRange.setter
    def PrintRange(self, value: PrintRange) -> None: ...
    @PrintToFile.setter
    def PrintToFile(self, value: bool) -> None: ...
    @ToPage.setter
    def ToPage(self, value: int) -> None: ...
    def SetHdevmode(self, hdevmode: IntPtr) -> None: ...
    def SetHdevnames(self, hdevnames: IntPtr) -> None: ...
    def ToString(self) -> str: ...


class PrinterUnit:
    Display = 0
    ThousandthsOfAnInch = 1
    HundredthsOfAMillimeter = 2
    TenthsOfAMillimeter = 3


class PrinterUnitConvert(Object):
    @overload
    def Convert(value: float, fromUnit: PrinterUnit, toUnit: PrinterUnit) -> float: ...
    @overload
    def Convert(value: int, fromUnit: PrinterUnit, toUnit: PrinterUnit) -> int: ...
    @overload
    def Convert(value: Point, fromUnit: PrinterUnit, toUnit: PrinterUnit) -> Point: ...
    @overload
    def Convert(value: Size, fromUnit: PrinterUnit, toUnit: PrinterUnit) -> Size: ...
    @overload
    def Convert(value: Rectangle, fromUnit: PrinterUnit, toUnit: PrinterUnit) -> Rectangle: ...
    @overload
    def Convert(value: Margins, fromUnit: PrinterUnit, toUnit: PrinterUnit) -> Margins: ...


class PrintEventArgs(CancelEventArgs):
    def __init__(self): ...
    @property
    def PrintAction(self) -> PrintAction: ...


class PrintEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PrintEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PrintEventArgs) -> None: ...


class PrintingPermission(CodeAccessPermission):
    @overload
    def __init__(self, state: PermissionState): ...
    @overload
    def __init__(self, printingLevel: PrintingPermissionLevel): ...
    def Copy(self) -> IPermission: ...
    def FromXml(self, esd: SecurityElement) -> None: ...
    @property
    def Level(self) -> PrintingPermissionLevel: ...
    def Intersect(self, target: IPermission) -> IPermission: ...
    def IsSubsetOf(self, target: IPermission) -> bool: ...
    def IsUnrestricted(self) -> bool: ...
    @Level.setter
    def Level(self, value: PrintingPermissionLevel) -> None: ...
    def ToXml(self) -> SecurityElement: ...
    def Union(self, target: IPermission) -> IPermission: ...


class PrintingPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...
    @property
    def Level(self) -> PrintingPermissionLevel: ...
    @Level.setter
    def Level(self, value: PrintingPermissionLevel) -> None: ...


class PrintingPermissionLevel:
    NoPrinting = 0
    SafePrinting = 1
    DefaultPrinting = 2
    AllPrinting = 3


class PrintPageEventArgs(EventArgs):
    def __init__(self, graphics: Graphics, marginBounds: Rectangle, pageBounds: Rectangle, pageSettings: PageSettings): ...
    @property
    def Cancel(self) -> bool: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def HasMorePages(self) -> bool: ...
    @property
    def MarginBounds(self) -> Rectangle: ...
    @property
    def PageBounds(self) -> Rectangle: ...
    @property
    def PageSettings(self) -> PageSettings: ...
    @Cancel.setter
    def Cancel(self, value: bool) -> None: ...
    @HasMorePages.setter
    def HasMorePages(self, value: bool) -> None: ...


class PrintPageEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PrintPageEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PrintPageEventArgs) -> None: ...


class PrintRange:
    AllPages = 0
    Selection = 1
    SomePages = 2
    CurrentPage = 4194304


class QueryPageSettingsEventArgs(PrintEventArgs):
    def __init__(self, pageSettings: PageSettings): ...
    @property
    def PageSettings(self) -> PageSettings: ...
    @PageSettings.setter
    def PageSettings(self, value: PageSettings) -> None: ...


class QueryPageSettingsEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: QueryPageSettingsEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: QueryPageSettingsEventArgs) -> None: ...


class StandardPrintController(PrintController):
    def __init__(self): ...
    def OnEndPage(self, document: PrintDocument, e: PrintPageEventArgs) -> None: ...
    def OnEndPrint(self, document: PrintDocument, e: PrintEventArgs) -> None: ...
    def OnStartPage(self, document: PrintDocument, e: PrintPageEventArgs) -> Graphics: ...
    def OnStartPrint(self, document: PrintDocument, e: PrintEventArgs) -> None: ...


class StringCollection(Object):
    def __init__(self, array: Set(str)): ...
    def Add(self, value: str) -> int: ...
    def CopyTo(self, strings: Set(str), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> str: ...
    def GetEnumerator(self) -> IEnumerator: ...
