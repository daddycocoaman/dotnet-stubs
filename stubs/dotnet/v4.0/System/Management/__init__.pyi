__all__ = ['Instrumentation']
from typing import Tuple, Set, Iterable, List


class AuthenticationLevel:
    Default = 0
    #None = 1
    Connect = 2
    Call = 3
    Packet = 4
    PacketIntegrity = 5
    PacketPrivacy = 6
    Unchanged = -1


class CimType:
    #None = 0
    SInt16 = 2
    SInt32 = 3
    Real32 = 4
    Real64 = 5
    String = 8
    Boolean = 11
    Object = 13
    SInt8 = 16
    UInt8 = 17
    UInt16 = 18
    UInt32 = 19
    SInt64 = 20
    UInt64 = 21
    DateTime = 101
    Reference = 102
    Char16 = 103


class CodeLanguage:
    CSharp = 0
    JScript = 1
    VB = 2
    VJSharp = 3
    Mcpp = 4


class ComparisonSettings:
    IncludeAll = 0
    IgnoreQualifiers = 1
    IgnoreObjectSource = 2
    IgnoreDefaultValues = 4
    IgnoreClass = 8
    IgnoreCase = 16
    IgnoreFlavor = 32


class CompletedEventArgs(ManagementEventArgs):
    @property
    def Status(self) -> ManagementStatus: ...
    @property
    def StatusObject(self) -> ManagementBaseObject: ...


class CompletedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: CompletedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: CompletedEventArgs) -> None: ...


class ConnectionOptions(ManagementOptions):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, locale: str, username: str, password: str, authority: str, impersonation: ImpersonationLevel, authentication: AuthenticationLevel, enablePrivileges: bool, context: ManagementNamedValueCollection, timeout: TimeSpan): ...
    @overload
    def __init__(self, locale: str, username: str, password: SecureString, authority: str, impersonation: ImpersonationLevel, authentication: AuthenticationLevel, enablePrivileges: bool, context: ManagementNamedValueCollection, timeout: TimeSpan): ...
    def Clone(self) -> Object: ...
    @property
    def Authentication(self) -> AuthenticationLevel: ...
    @property
    def Authority(self) -> str: ...
    @property
    def EnablePrivileges(self) -> bool: ...
    @property
    def Impersonation(self) -> ImpersonationLevel: ...
    @property
    def Locale(self) -> str: ...
    @property
    def Username(self) -> str: ...
    @Authentication.setter
    def Authentication(self, value: AuthenticationLevel) -> None: ...
    @Authority.setter
    def Authority(self, value: str) -> None: ...
    @EnablePrivileges.setter
    def EnablePrivileges(self, value: bool) -> None: ...
    @Impersonation.setter
    def Impersonation(self, value: ImpersonationLevel) -> None: ...
    @Locale.setter
    def Locale(self, value: str) -> None: ...
    @Password.setter
    def Password(self, value: str) -> None: ...
    @SecurePassword.setter
    def SecurePassword(self, value: SecureString) -> None: ...
    @Username.setter
    def Username(self, value: str) -> None: ...


class DeleteOptions(ManagementOptions):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: TimeSpan): ...
    def Clone(self) -> Object: ...


class EnumerationOptions(ManagementOptions):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: TimeSpan, blockSize: int, rewindable: bool, returnImmediatley: bool, useAmendedQualifiers: bool, ensureLocatable: bool, prototypeOnly: bool, directRead: bool, enumerateDeep: bool): ...
    def Clone(self) -> Object: ...
    @property
    def BlockSize(self) -> int: ...
    @property
    def DirectRead(self) -> bool: ...
    @property
    def EnsureLocatable(self) -> bool: ...
    @property
    def EnumerateDeep(self) -> bool: ...
    @property
    def PrototypeOnly(self) -> bool: ...
    @property
    def ReturnImmediately(self) -> bool: ...
    @property
    def Rewindable(self) -> bool: ...
    @property
    def UseAmendedQualifiers(self) -> bool: ...
    @BlockSize.setter
    def BlockSize(self, value: int) -> None: ...
    @DirectRead.setter
    def DirectRead(self, value: bool) -> None: ...
    @EnsureLocatable.setter
    def EnsureLocatable(self, value: bool) -> None: ...
    @EnumerateDeep.setter
    def EnumerateDeep(self, value: bool) -> None: ...
    @PrototypeOnly.setter
    def PrototypeOnly(self, value: bool) -> None: ...
    @ReturnImmediately.setter
    def ReturnImmediately(self, value: bool) -> None: ...
    @Rewindable.setter
    def Rewindable(self, value: bool) -> None: ...
    @UseAmendedQualifiers.setter
    def UseAmendedQualifiers(self, value: bool) -> None: ...


class EventArrivedEventArgs(ManagementEventArgs):
    @property
    def NewEvent(self) -> ManagementBaseObject: ...


class EventArrivedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EventArrivedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EventArrivedEventArgs) -> None: ...


class EventQuery(ManagementQuery):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, query: str): ...
    @overload
    def __init__(self, language: str, query: str): ...
    def Clone(self) -> Object: ...


class EventWatcherOptions(ManagementOptions):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: TimeSpan, blockSize: int): ...
    def Clone(self) -> Object: ...
    @property
    def BlockSize(self) -> int: ...
    @BlockSize.setter
    def BlockSize(self, value: int) -> None: ...


class ImpersonationLevel:
    Default = 0
    Anonymous = 1
    Identify = 2
    Impersonate = 3
    Delegate = 4


class InvokeMethodOptions(ManagementOptions):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: TimeSpan): ...
    def Clone(self) -> Object: ...


class ManagementBaseObject(Component):
    def Clone(self) -> Object: ...
    def CompareTo(self, otherObject: ManagementBaseObject, settings: ComparisonSettings) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ClassPath(self) -> ManagementPath: ...
    @property
    def Item(self, propertyName: str) -> Object: ...
    @property
    def Properties(self) -> PropertyDataCollection: ...
    @property
    def Qualifiers(self) -> QualifierDataCollection: ...
    @property
    def SystemProperties(self) -> PropertyDataCollection: ...
    def GetHashCode(self) -> int: ...
    def GetPropertyQualifierValue(self, propertyName: str, qualifierName: str) -> Object: ...
    def GetPropertyValue(self, propertyName: str) -> Object: ...
    def GetQualifierValue(self, qualifierName: str) -> Object: ...
    def GetText(self, format: TextFormat) -> str: ...
    def op_Explicit(managementObject: ManagementBaseObject) -> IntPtr: ...
    @Item.setter
    def Item(self, propertyName: str, value: Object) -> None: ...
    def SetPropertyQualifierValue(self, propertyName: str, qualifierName: str, qualifierValue: Object) -> None: ...
    def SetPropertyValue(self, propertyName: str, propertyValue: Object) -> None: ...
    def SetQualifierValue(self, qualifierName: str, qualifierValue: Object) -> None: ...


class ManagementClass(ManagementObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: ManagementPath): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: ManagementPath, options: ObjectGetOptions): ...
    @overload
    def __init__(self, path: str, options: ObjectGetOptions): ...
    @overload
    def __init__(self, scope: ManagementScope, path: ManagementPath, options: ObjectGetOptions): ...
    @overload
    def __init__(self, scope: str, path: str, options: ObjectGetOptions): ...
    def Clone(self) -> Object: ...
    def CreateInstance(self) -> ManagementObject: ...
    def Derive(self, newClassName: str) -> ManagementClass: ...
    @property
    def Derivation(self) -> StringCollection: ...
    @property
    def Methods(self) -> MethodDataCollection: ...
    @property
    def Path(self) -> ManagementPath: ...
    @overload
    def GetInstances(self) -> ManagementObjectCollection: ...
    @overload
    def GetInstances(self, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetInstances(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetInstances(self, watcher: ManagementOperationObserver, options: EnumerationOptions) -> None: ...
    @overload
    def GetRelatedClasses(self) -> ManagementObjectCollection: ...
    @overload
    def GetRelatedClasses(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetRelatedClasses(self, relatedClass: str) -> ManagementObjectCollection: ...
    @overload
    def GetRelatedClasses(self, watcher: ManagementOperationObserver, relatedClass: str) -> None: ...
    @overload
    def GetRelatedClasses(self, relatedClass: str, relationshipClass: str, relationshipQualifier: str, relatedQualifier: str, relatedRole: str, thisRole: str, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetRelatedClasses(self, watcher: ManagementOperationObserver, relatedClass: str, relationshipClass: str, relationshipQualifier: str, relatedQualifier: str, relatedRole: str, thisRole: str, options: EnumerationOptions) -> None: ...
    @overload
    def GetRelationshipClasses(self) -> ManagementObjectCollection: ...
    @overload
    def GetRelationshipClasses(self, relationshipClass: str) -> ManagementObjectCollection: ...
    @overload
    def GetRelationshipClasses(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetRelationshipClasses(self, watcher: ManagementOperationObserver, relationshipClass: str) -> None: ...
    @overload
    def GetRelationshipClasses(self, relationshipClass: str, relationshipQualifier: str, thisRole: str, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetRelationshipClasses(self, watcher: ManagementOperationObserver, relationshipClass: str, relationshipQualifier: str, thisRole: str, options: EnumerationOptions) -> None: ...
    @overload
    def GetStronglyTypedClassCode(self, includeSystemClassInClassDef: bool, systemPropertyClass: bool) -> CodeTypeDeclaration: ...
    @overload
    def GetStronglyTypedClassCode(self, lang: CodeLanguage, filePath: str, classNamespace: str) -> bool: ...
    @overload
    def GetSubclasses(self) -> ManagementObjectCollection: ...
    @overload
    def GetSubclasses(self, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetSubclasses(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetSubclasses(self, watcher: ManagementOperationObserver, options: EnumerationOptions) -> None: ...
    @Path.setter
    def Path(self, value: ManagementPath) -> None: ...


class ManagementDateTimeConverter(Object):
    def ToDateTime(dmtfDate: str) -> DateTime: ...
    def ToDmtfDateTime(date: DateTime) -> str: ...
    def ToDmtfTimeInterval(timespan: TimeSpan) -> str: ...
    def ToTimeSpan(dmtfTimespan: str) -> TimeSpan: ...


class ManagementEventArgs(EventArgs):
    @property
    def Context(self) -> Object: ...


class ManagementEventWatcher(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, query: EventQuery): ...
    @overload
    def __init__(self, query: str): ...
    @overload
    def __init__(self, scope: ManagementScope, query: EventQuery): ...
    @overload
    def __init__(self, scope: str, query: str): ...
    @overload
    def __init__(self, scope: str, query: str, options: EventWatcherOptions): ...
    @overload
    def __init__(self, scope: ManagementScope, query: EventQuery, options: EventWatcherOptions): ...
    def add_EventArrived(self, value: EventArrivedEventHandler) -> None: ...
    def add_Stopped(self, value: StoppedEventHandler) -> None: ...
    @property
    def Options(self) -> EventWatcherOptions: ...
    @property
    def Query(self) -> EventQuery: ...
    @property
    def Scope(self) -> ManagementScope: ...
    def remove_EventArrived(self, value: EventArrivedEventHandler) -> None: ...
    def remove_Stopped(self, value: StoppedEventHandler) -> None: ...
    @Options.setter
    def Options(self, value: EventWatcherOptions) -> None: ...
    @Query.setter
    def Query(self, value: EventQuery) -> None: ...
    @Scope.setter
    def Scope(self, value: ManagementScope) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...
    def WaitForNextEvent(self) -> ManagementBaseObject: ...


class ManagementException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorCode(self) -> ManagementStatus: ...
    @property
    def ErrorInformation(self) -> ManagementBaseObject: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class ManagementNamedValueCollection(NameObjectCollectionBase):
    def __init__(self): ...
    def Add(self, name: str, value: Object) -> None: ...
    def Clone(self) -> ManagementNamedValueCollection: ...
    @property
    def Item(self, name: str) -> Object: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAll(self) -> None: ...


class ManagementObject(ManagementBaseObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: ManagementPath): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: ManagementPath, options: ObjectGetOptions): ...
    @overload
    def __init__(self, path: str, options: ObjectGetOptions): ...
    @overload
    def __init__(self, scope: ManagementScope, path: ManagementPath, options: ObjectGetOptions): ...
    @overload
    def __init__(self, scopeString: str, pathString: str, options: ObjectGetOptions): ...
    def Clone(self) -> Object: ...
    @overload
    def CopyTo(self, path: ManagementPath) -> ManagementPath: ...
    @overload
    def CopyTo(self, path: str) -> ManagementPath: ...
    @overload
    def CopyTo(self, path: str, options: PutOptions) -> ManagementPath: ...
    @overload
    def CopyTo(self, path: ManagementPath, options: PutOptions) -> ManagementPath: ...
    @overload
    def CopyTo(self, watcher: ManagementOperationObserver, path: ManagementPath) -> None: ...
    @overload
    def CopyTo(self, watcher: ManagementOperationObserver, path: str) -> None: ...
    @overload
    def CopyTo(self, watcher: ManagementOperationObserver, path: str, options: PutOptions) -> None: ...
    @overload
    def CopyTo(self, watcher: ManagementOperationObserver, path: ManagementPath, options: PutOptions) -> None: ...
    @overload
    def Delete(self) -> None: ...
    @overload
    def Delete(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def Delete(self, options: DeleteOptions) -> None: ...
    @overload
    def Delete(self, watcher: ManagementOperationObserver, options: DeleteOptions) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Get(self) -> None: ...
    @property
    def ClassPath(self) -> ManagementPath: ...
    @property
    def Options(self) -> ObjectGetOptions: ...
    @property
    def Path(self) -> ManagementPath: ...
    @overload
    def Get(self, watcher: ManagementOperationObserver) -> None: ...
    @property
    def Scope(self) -> ManagementScope: ...
    def GetMethodParameters(self, methodName: str) -> ManagementBaseObject: ...
    @overload
    def GetRelated(self) -> ManagementObjectCollection: ...
    @overload
    def GetRelated(self, relatedClass: str) -> ManagementObjectCollection: ...
    @overload
    def GetRelated(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetRelated(self, watcher: ManagementOperationObserver, relatedClass: str) -> None: ...
    @overload
    def GetRelated(self, relatedClass: str, relationshipClass: str, relationshipQualifier: str, relatedQualifier: str, relatedRole: str, thisRole: str, classDefinitionsOnly: bool, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetRelated(self, watcher: ManagementOperationObserver, relatedClass: str, relationshipClass: str, relationshipQualifier: str, relatedQualifier: str, relatedRole: str, thisRole: str, classDefinitionsOnly: bool, options: EnumerationOptions) -> None: ...
    @overload
    def GetRelationships(self) -> ManagementObjectCollection: ...
    @overload
    def GetRelationships(self, relationshipClass: str) -> ManagementObjectCollection: ...
    @overload
    def GetRelationships(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def GetRelationships(self, watcher: ManagementOperationObserver, relationshipClass: str) -> None: ...
    @overload
    def GetRelationships(self, relationshipClass: str, relationshipQualifier: str, thisRole: str, classDefinitionsOnly: bool, options: EnumerationOptions) -> ManagementObjectCollection: ...
    @overload
    def GetRelationships(self, watcher: ManagementOperationObserver, relationshipClass: str, relationshipQualifier: str, thisRole: str, classDefinitionsOnly: bool, options: EnumerationOptions) -> None: ...
    @overload
    def InvokeMethod(self, methodName: str, args: Set(Object)) -> Object: ...
    @overload
    def InvokeMethod(self, methodName: str, inParameters: ManagementBaseObject, options: InvokeMethodOptions) -> ManagementBaseObject: ...
    @overload
    def InvokeMethod(self, watcher: ManagementOperationObserver, methodName: str, args: Set(Object)) -> None: ...
    @overload
    def InvokeMethod(self, watcher: ManagementOperationObserver, methodName: str, inParameters: ManagementBaseObject, options: InvokeMethodOptions) -> None: ...
    @overload
    def Put(self) -> ManagementPath: ...
    @overload
    def Put(self, watcher: ManagementOperationObserver) -> None: ...
    @overload
    def Put(self, options: PutOptions) -> ManagementPath: ...
    @overload
    def Put(self, watcher: ManagementOperationObserver, options: PutOptions) -> None: ...
    @Options.setter
    def Options(self, value: ObjectGetOptions) -> None: ...
    @Path.setter
    def Path(self, value: ManagementPath) -> None: ...
    @Scope.setter
    def Scope(self, value: ManagementScope) -> None: ...
    def ToString(self) -> str: ...


class ManagementObjectCollection(Object):
    @overload
    def CopyTo(self, array: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, objectCollection: Set(ManagementBaseObject), index: int) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> ManagementObjectEnumerator: ...


class ManagementObjectEnumerator(Object):
    def Dispose(self) -> None: ...
    @property
    def Current(self) -> ManagementBaseObject: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class ManagementObjectSearcher(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryString: str): ...
    @overload
    def __init__(self, query: ObjectQuery): ...
    @overload
    def __init__(self, scope: str, queryString: str): ...
    @overload
    def __init__(self, scope: ManagementScope, query: ObjectQuery): ...
    @overload
    def __init__(self, scope: str, queryString: str, options: EnumerationOptions): ...
    @overload
    def __init__(self, scope: ManagementScope, query: ObjectQuery, options: EnumerationOptions): ...
    @overload
    def Get(self) -> ManagementObjectCollection: ...
    @property
    def Options(self) -> EnumerationOptions: ...
    @property
    def Query(self) -> ObjectQuery: ...
    @overload
    def Get(self, watcher: ManagementOperationObserver) -> None: ...
    @property
    def Scope(self) -> ManagementScope: ...
    @Options.setter
    def Options(self, value: EnumerationOptions) -> None: ...
    @Query.setter
    def Query(self, value: ObjectQuery) -> None: ...
    @Scope.setter
    def Scope(self, value: ManagementScope) -> None: ...


class ManagementOperationObserver(Object):
    def __init__(self): ...
    def add_Completed(self, value: CompletedEventHandler) -> None: ...
    def add_ObjectPut(self, value: ObjectPutEventHandler) -> None: ...
    def add_ObjectReady(self, value: ObjectReadyEventHandler) -> None: ...
    def add_Progress(self, value: ProgressEventHandler) -> None: ...
    def Cancel(self) -> None: ...
    def remove_Completed(self, value: CompletedEventHandler) -> None: ...
    def remove_ObjectPut(self, value: ObjectPutEventHandler) -> None: ...
    def remove_ObjectReady(self, value: ObjectReadyEventHandler) -> None: ...
    def remove_Progress(self, value: ProgressEventHandler) -> None: ...


class ManagementOptions(Object):
    def Clone(self) -> Object: ...
    @property
    def Context(self) -> ManagementNamedValueCollection: ...
    @property
    def Timeout(self) -> TimeSpan: ...
    @Context.setter
    def Context(self, value: ManagementNamedValueCollection) -> None: ...
    @Timeout.setter
    def Timeout(self, value: TimeSpan) -> None: ...


class ManagementPath(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    def Clone(self) -> ManagementPath: ...
    @property
    def ClassName(self) -> str: ...
    @property
    def DefaultPath() -> ManagementPath: ...
    @property
    def IsClass(self) -> bool: ...
    @property
    def IsInstance(self) -> bool: ...
    @property
    def IsSingleton(self) -> bool: ...
    @property
    def NamespacePath(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def RelativePath(self) -> str: ...
    @property
    def Server(self) -> str: ...
    @ClassName.setter
    def ClassName(self, value: str) -> None: ...
    @DefaultPath.setter
    def DefaultPath(value: ManagementPath) -> None: ...
    @NamespacePath.setter
    def NamespacePath(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @RelativePath.setter
    def RelativePath(self, value: str) -> None: ...
    @Server.setter
    def Server(self, value: str) -> None: ...
    def SetAsClass(self) -> None: ...
    def SetAsSingleton(self) -> None: ...
    def ToString(self) -> str: ...


class ManagementQuery(Object):
    def Clone(self) -> Object: ...
    @property
    def QueryLanguage(self) -> str: ...
    @property
    def QueryString(self) -> str: ...
    @QueryLanguage.setter
    def QueryLanguage(self, value: str) -> None: ...
    @QueryString.setter
    def QueryString(self, value: str) -> None: ...


class ManagementScope(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: ManagementPath): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: str, options: ConnectionOptions): ...
    @overload
    def __init__(self, path: ManagementPath, options: ConnectionOptions): ...
    def Clone(self) -> ManagementScope: ...
    def Connect(self) -> None: ...
    @property
    def IsConnected(self) -> bool: ...
    @property
    def Options(self) -> ConnectionOptions: ...
    @property
    def Path(self) -> ManagementPath: ...
    @Options.setter
    def Options(self, value: ConnectionOptions) -> None: ...
    @Path.setter
    def Path(self, value: ManagementPath) -> None: ...


class ManagementStatus:
    NoError = 0
    False = 1
    ResetToDefault = 262146
    Different = 262147
    Timedout = 262148
    NoMoreData = 262149
    OperationCanceled = 262150
    Pending = 262151
    DuplicateObjects = 262152
    PartialResults = 262160
    Failed = -2147217407
    NotFound = -2147217406
    AccessDenied = -2147217405
    ProviderFailure = -2147217404
    TypeMismatch = -2147217403
    OutOfMemory = -2147217402
    InvalidContext = -2147217401
    InvalidParameter = -2147217400
    NotAvailable = -2147217399
    CriticalError = -2147217398
    InvalidStream = -2147217397
    NotSupported = -2147217396
    InvalidSuperclass = -2147217395
    InvalidNamespace = -2147217394
    InvalidObject = -2147217393
    InvalidClass = -2147217392
    ProviderNotFound = -2147217391
    InvalidProviderRegistration = -2147217390
    ProviderLoadFailure = -2147217389
    InitializationFailure = -2147217388
    TransportFailure = -2147217387
    InvalidOperation = -2147217386
    InvalidQuery = -2147217385
    InvalidQueryType = -2147217384
    AlreadyExists = -2147217383
    OverrideNotAllowed = -2147217382
    PropagatedQualifier = -2147217381
    PropagatedProperty = -2147217380
    Unexpected = -2147217379
    IllegalOperation = -2147217378
    CannotBeKey = -2147217377
    IncompleteClass = -2147217376
    InvalidSyntax = -2147217375
    NondecoratedObject = -2147217374
    ReadOnly = -2147217373
    ProviderNotCapable = -2147217372
    ClassHasChildren = -2147217371
    ClassHasInstances = -2147217370
    QueryNotImplemented = -2147217369
    IllegalNull = -2147217368
    InvalidQualifierType = -2147217367
    InvalidPropertyType = -2147217366
    ValueOutOfRange = -2147217365
    CannotBeSingleton = -2147217364
    InvalidCimType = -2147217363
    InvalidMethod = -2147217362
    InvalidMethodParameters = -2147217361
    SystemProperty = -2147217360
    InvalidProperty = -2147217359
    CallCanceled = -2147217358
    ShuttingDown = -2147217357
    PropagatedMethod = -2147217356
    UnsupportedParameter = -2147217355
    MissingParameterID = -2147217354
    InvalidParameterID = -2147217353
    NonconsecutiveParameterIDs = -2147217352
    ParameterIDOnRetval = -2147217351
    InvalidObjectPath = -2147217350
    OutOfDiskSpace = -2147217349
    BufferTooSmall = -2147217348
    UnsupportedPutExtension = -2147217347
    UnknownObjectType = -2147217346
    UnknownPacketType = -2147217345
    MarshalVersionMismatch = -2147217344
    MarshalInvalidSignature = -2147217343
    InvalidQualifier = -2147217342
    InvalidDuplicateParameter = -2147217341
    TooMuchData = -2147217340
    ServerTooBusy = -2147217339
    InvalidFlavor = -2147217338
    CircularReference = -2147217337
    UnsupportedClassUpdate = -2147217336
    CannotChangeKeyInheritance = -2147217335
    CannotChangeIndexInheritance = -2147217328
    TooManyProperties = -2147217327
    UpdateTypeMismatch = -2147217326
    UpdateOverrideNotAllowed = -2147217325
    UpdatePropagatedMethod = -2147217324
    MethodNotImplemented = -2147217323
    MethodDisabled = -2147217322
    RefresherBusy = -2147217321
    UnparsableQuery = -2147217320
    NotEventClass = -2147217319
    MissingGroupWithin = -2147217318
    MissingAggregationList = -2147217317
    PropertyNotAnObject = -2147217316
    AggregatingByObject = -2147217315
    UninterpretableProviderQuery = -2147217313
    BackupRestoreWinmgmtRunning = -2147217312
    QueueOverflow = -2147217311
    PrivilegeNotHeld = -2147217310
    InvalidOperator = -2147217309
    LocalCredentials = -2147217308
    CannotBeAbstract = -2147217307
    AmendedObject = -2147217306
    ClientTooSlow = -2147217305
    RegistrationTooBroad = -2147213311
    RegistrationTooPrecise = -2147213310


class MethodData(Object):
    @property
    def InParameters(self) -> ManagementBaseObject: ...
    @property
    def Name(self) -> str: ...
    @property
    def Origin(self) -> str: ...
    @property
    def OutParameters(self) -> ManagementBaseObject: ...
    @property
    def Qualifiers(self) -> QualifierDataCollection: ...


class MethodDataCollection(Object):
    @overload
    def Add(self, methodName: str) -> None: ...
    @overload
    def Add(self, methodName: str, inParameters: ManagementBaseObject, outParameters: ManagementBaseObject) -> None: ...
    @overload
    def CopyTo(self, array: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, methodArray: Set(MethodData), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, methodName: str) -> MethodData: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> MethodDataEnumerator: ...
    def Remove(self, methodName: str) -> None: ...


class MethodDataEnumerator(Object):
    @property
    def Current(self) -> MethodData: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class ObjectGetOptions(ManagementOptions):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: TimeSpan, useAmendedQualifiers: bool): ...
    def Clone(self) -> Object: ...
    @property
    def UseAmendedQualifiers(self) -> bool: ...
    @UseAmendedQualifiers.setter
    def UseAmendedQualifiers(self, value: bool) -> None: ...


class ObjectPutEventArgs(ManagementEventArgs):
    @property
    def Path(self) -> ManagementPath: ...


class ObjectPutEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ObjectPutEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ObjectPutEventArgs) -> None: ...


class ObjectQuery(ManagementQuery):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, query: str): ...
    @overload
    def __init__(self, language: str, query: str): ...
    def Clone(self) -> Object: ...


class ObjectReadyEventArgs(ManagementEventArgs):
    @property
    def NewObject(self) -> ManagementBaseObject: ...


class ObjectReadyEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ObjectReadyEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ObjectReadyEventArgs) -> None: ...


class ProgressEventArgs(ManagementEventArgs):
    @property
    def Current(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def UpperBound(self) -> int: ...


class ProgressEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ProgressEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ProgressEventArgs) -> None: ...


class PropertyData(Object):
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Origin(self) -> str: ...
    @property
    def Qualifiers(self) -> QualifierDataCollection: ...
    @property
    def Type(self) -> CimType: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class PropertyDataCollection(Object):
    @overload
    def Add(self, propertyName: str, propertyValue: Object) -> None: ...
    @overload
    def Add(self, propertyName: str, propertyValue: Object, propertyType: CimType) -> None: ...
    @overload
    def Add(self, propertyName: str, propertyType: CimType, isArray: bool) -> None: ...
    @overload
    def CopyTo(self, array: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, propertyArray: Set(PropertyData), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, propertyName: str) -> PropertyData: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> PropertyDataEnumerator: ...
    def Remove(self, propertyName: str) -> None: ...


class PropertyDataEnumerator(Object):
    @property
    def Current(self) -> PropertyData: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class PutOptions(ManagementOptions):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection): ...
    @overload
    def __init__(self, context: ManagementNamedValueCollection, timeout: TimeSpan, useAmendedQualifiers: bool, putType: PutType): ...
    def Clone(self) -> Object: ...
    @property
    def Type(self) -> PutType: ...
    @property
    def UseAmendedQualifiers(self) -> bool: ...
    @Type.setter
    def Type(self, value: PutType) -> None: ...
    @UseAmendedQualifiers.setter
    def UseAmendedQualifiers(self, value: bool) -> None: ...


class PutType:
    #None = 0
    UpdateOnly = 1
    CreateOnly = 2
    UpdateOrCreate = 3


class QualifierData(Object):
    @property
    def IsAmended(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def IsOverridable(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def PropagatesToInstance(self) -> bool: ...
    @property
    def PropagatesToSubclass(self) -> bool: ...
    @property
    def Value(self) -> Object: ...
    @IsAmended.setter
    def IsAmended(self, value: bool) -> None: ...
    @IsOverridable.setter
    def IsOverridable(self, value: bool) -> None: ...
    @PropagatesToInstance.setter
    def PropagatesToInstance(self, value: bool) -> None: ...
    @PropagatesToSubclass.setter
    def PropagatesToSubclass(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class QualifierDataCollection(Object):
    @overload
    def Add(self, qualifierName: str, qualifierValue: Object) -> None: ...
    @overload
    def Add(self, qualifierName: str, qualifierValue: Object, isAmended: bool, propagatesToInstance: bool, propagatesToSubclass: bool, isOverridable: bool) -> None: ...
    @overload
    def CopyTo(self, array: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, qualifierArray: Set(QualifierData), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, qualifierName: str) -> QualifierData: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> QualifierDataEnumerator: ...
    def Remove(self, qualifierName: str) -> None: ...


class QualifierDataEnumerator(Object):
    @property
    def Current(self) -> QualifierData: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class RelatedObjectQuery(WqlObjectQuery):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryOrSourceObject: str): ...
    @overload
    def __init__(self, sourceObject: str, relatedClass: str): ...
    @overload
    def __init__(self, sourceObject: str, relatedClass: str, relationshipClass: str, relatedQualifier: str, relationshipQualifier: str, relatedRole: str, thisRole: str, classDefinitionsOnly: bool): ...
    @overload
    def __init__(self, isSchemaQuery: bool, sourceObject: str, relatedClass: str, relationshipClass: str, relatedQualifier: str, relationshipQualifier: str, relatedRole: str, thisRole: str): ...
    def Clone(self) -> Object: ...
    @property
    def ClassDefinitionsOnly(self) -> bool: ...
    @property
    def IsSchemaQuery(self) -> bool: ...
    @property
    def RelatedClass(self) -> str: ...
    @property
    def RelatedQualifier(self) -> str: ...
    @property
    def RelatedRole(self) -> str: ...
    @property
    def RelationshipClass(self) -> str: ...
    @property
    def RelationshipQualifier(self) -> str: ...
    @property
    def SourceObject(self) -> str: ...
    @property
    def ThisRole(self) -> str: ...
    @ClassDefinitionsOnly.setter
    def ClassDefinitionsOnly(self, value: bool) -> None: ...
    @IsSchemaQuery.setter
    def IsSchemaQuery(self, value: bool) -> None: ...
    @RelatedClass.setter
    def RelatedClass(self, value: str) -> None: ...
    @RelatedQualifier.setter
    def RelatedQualifier(self, value: str) -> None: ...
    @RelatedRole.setter
    def RelatedRole(self, value: str) -> None: ...
    @RelationshipClass.setter
    def RelationshipClass(self, value: str) -> None: ...
    @RelationshipQualifier.setter
    def RelationshipQualifier(self, value: str) -> None: ...
    @SourceObject.setter
    def SourceObject(self, value: str) -> None: ...
    @ThisRole.setter
    def ThisRole(self, value: str) -> None: ...


class RelationshipQuery(WqlObjectQuery):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryOrSourceObject: str): ...
    @overload
    def __init__(self, sourceObject: str, relationshipClass: str): ...
    @overload
    def __init__(self, sourceObject: str, relationshipClass: str, relationshipQualifier: str, thisRole: str, classDefinitionsOnly: bool): ...
    @overload
    def __init__(self, isSchemaQuery: bool, sourceObject: str, relationshipClass: str, relationshipQualifier: str, thisRole: str): ...
    def Clone(self) -> Object: ...
    @property
    def ClassDefinitionsOnly(self) -> bool: ...
    @property
    def IsSchemaQuery(self) -> bool: ...
    @property
    def RelationshipClass(self) -> str: ...
    @property
    def RelationshipQualifier(self) -> str: ...
    @property
    def SourceObject(self) -> str: ...
    @property
    def ThisRole(self) -> str: ...
    @ClassDefinitionsOnly.setter
    def ClassDefinitionsOnly(self, value: bool) -> None: ...
    @IsSchemaQuery.setter
    def IsSchemaQuery(self, value: bool) -> None: ...
    @RelationshipClass.setter
    def RelationshipClass(self, value: str) -> None: ...
    @RelationshipQualifier.setter
    def RelationshipQualifier(self, value: str) -> None: ...
    @SourceObject.setter
    def SourceObject(self, value: str) -> None: ...
    @ThisRole.setter
    def ThisRole(self, value: str) -> None: ...


class SelectQuery(WqlObjectQuery):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryOrClassName: str): ...
    @overload
    def __init__(self, className: str, condition: str): ...
    @overload
    def __init__(self, isSchemaQuery: bool, condition: str): ...
    @overload
    def __init__(self, className: str, condition: str, selectedProperties: Set(str)): ...
    def Clone(self) -> Object: ...
    @property
    def ClassName(self) -> str: ...
    @property
    def Condition(self) -> str: ...
    @property
    def IsSchemaQuery(self) -> bool: ...
    @property
    def QueryString(self) -> str: ...
    @property
    def SelectedProperties(self) -> StringCollection: ...
    @ClassName.setter
    def ClassName(self, value: str) -> None: ...
    @Condition.setter
    def Condition(self, value: str) -> None: ...
    @IsSchemaQuery.setter
    def IsSchemaQuery(self, value: bool) -> None: ...
    @QueryString.setter
    def QueryString(self, value: str) -> None: ...
    @SelectedProperties.setter
    def SelectedProperties(self, value: StringCollection) -> None: ...


class StoppedEventArgs(ManagementEventArgs):
    @property
    def Status(self) -> ManagementStatus: ...


class StoppedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: StoppedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: StoppedEventArgs) -> None: ...


class TextFormat:
    Mof = 0
    CimDtd20 = 1
    WmiDtd20 = 2


class WqlEventQuery(EventQuery):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryOrEventClassName: str): ...
    @overload
    def __init__(self, eventClassName: str, condition: str): ...
    @overload
    def __init__(self, eventClassName: str, withinInterval: TimeSpan): ...
    @overload
    def __init__(self, eventClassName: str, withinInterval: TimeSpan, condition: str): ...
    @overload
    def __init__(self, eventClassName: str, condition: str, groupWithinInterval: TimeSpan): ...
    @overload
    def __init__(self, eventClassName: str, condition: str, groupWithinInterval: TimeSpan, groupByPropertyList: Set(str)): ...
    @overload
    def __init__(self, eventClassName: str, withinInterval: TimeSpan, condition: str, groupWithinInterval: TimeSpan, groupByPropertyList: Set(str), havingCondition: str): ...
    def Clone(self) -> Object: ...
    @property
    def Condition(self) -> str: ...
    @property
    def EventClassName(self) -> str: ...
    @property
    def GroupByPropertyList(self) -> StringCollection: ...
    @property
    def GroupWithinInterval(self) -> TimeSpan: ...
    @property
    def HavingCondition(self) -> str: ...
    @property
    def QueryLanguage(self) -> str: ...
    @property
    def QueryString(self) -> str: ...
    @property
    def WithinInterval(self) -> TimeSpan: ...
    @Condition.setter
    def Condition(self, value: str) -> None: ...
    @EventClassName.setter
    def EventClassName(self, value: str) -> None: ...
    @GroupByPropertyList.setter
    def GroupByPropertyList(self, value: StringCollection) -> None: ...
    @GroupWithinInterval.setter
    def GroupWithinInterval(self, value: TimeSpan) -> None: ...
    @HavingCondition.setter
    def HavingCondition(self, value: str) -> None: ...
    @QueryString.setter
    def QueryString(self, value: str) -> None: ...
    @WithinInterval.setter
    def WithinInterval(self, value: TimeSpan) -> None: ...


class WqlObjectQuery(ObjectQuery):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, query: str): ...
    def Clone(self) -> Object: ...
    @property
    def QueryLanguage(self) -> str: ...
