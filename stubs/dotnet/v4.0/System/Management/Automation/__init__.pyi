__all__ = ['Host','Internal','Language','PerformanceData','Provider','Remoting','Runspaces','Security','Tracing']
from typing import Tuple, Set, Iterable, List


class ActionPreference:
    SilentlyContinue = 0
    Stop = 1
    Continue = 2
    Inquire = 3
    Ignore = 4
    Suspend = 5


class ActionPreferenceStopException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class AliasAttribute(ParsingBaseAttribute):
    def __init__(self, aliasNames: Set(str)): ...
    @property
    def AliasNames(self) -> List[str]: ...


class AliasInfo(CommandInfo):
    @property
    def Definition(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Options(self) -> ScopedItemOptions: ...
    @property
    def OutputType(self) -> ReadOnlyCollection: ...
    @property
    def ReferencedCommand(self) -> CommandInfo: ...
    @property
    def ResolvedCommand(self) -> CommandInfo: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Options.setter
    def Options(self, value: ScopedItemOptions) -> None: ...


class Alignment:
    Undefined = 0
    Left = 1
    Center = 2
    Right = 3


class AllowEmptyCollectionAttribute(CmdletMetadataAttribute):
    def __init__(self): ...


class AllowEmptyStringAttribute(CmdletMetadataAttribute):
    def __init__(self): ...


class AllowNullAttribute(CmdletMetadataAttribute):
    def __init__(self): ...


class ApplicationFailedException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ApplicationInfo(CommandInfo):
    @property
    def Definition(self) -> str: ...
    @property
    def Extension(self) -> str: ...
    @property
    def OutputType(self) -> ReadOnlyCollection: ...
    @property
    def Path(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def Version(self) -> Version: ...
    @property
    def Visibility(self) -> SessionStateEntryVisibility: ...
    @Visibility.setter
    def Visibility(self, value: SessionStateEntryVisibility) -> None: ...


class ArgumentCompleterAttribute(Attribute):
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, scriptBlock: ScriptBlock): ...
    @property
    def ScriptBlock(self) -> ScriptBlock: ...
    @property
    def Type(self) -> Type: ...


class ArgumentTransformationAttribute(CmdletMetadataAttribute):
    @property
    def TransformNullOptionalParameters(self) -> bool: ...
    def Transform(self, engineIntrinsics: EngineIntrinsics, inputData: Object) -> Object: ...


class ArgumentTransformationMetadataException(MetadataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class AuthorizationManager(Object):
    def __init__(self, shellId: str): ...


class BackgroundDispatcher(Object):
    def __init__(self, transferProvider: EventProvider, transferEvent: EventDescriptor): ...
    def BeginInvoke(self, callback: WaitCallback, state: Object, completionCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, asyncResult: IAsyncResult) -> None: ...
    @overload
    def QueueUserWorkItem(self, callback: WaitCallback) -> bool: ...
    @overload
    def QueueUserWorkItem(self, callback: WaitCallback, state: Object) -> bool: ...


class BreakException(LoopFlowException):
    pass


class Breakpoint(Object):
    @property
    def Action(self) -> ScriptBlock: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HitCount(self) -> int: ...
    @property
    def Id(self) -> int: ...
    @property
    def Script(self) -> str: ...


class BreakpointUpdatedEventArgs(EventArgs):
    @property
    def Breakpoint(self) -> Breakpoint: ...
    @property
    def BreakpointCount(self) -> int: ...
    @property
    def UpdateType(self) -> BreakpointUpdateType: ...


class BreakpointUpdateType:
    Set = 0
    Removed = 1
    Enabled = 2
    Disabled = 3


class CallStackFrame(Object):
    def __init__(self, invocationInfo: InvocationInfo): ...
    @property
    def FunctionName(self) -> str: ...
    @property
    def InvocationInfo(self) -> InvocationInfo: ...
    @property
    def Position(self) -> IScriptExtent: ...
    @property
    def ScriptLineNumber(self) -> int: ...
    @property
    def ScriptName(self) -> str: ...
    def GetFrameVariables(self) -> Dictionary: ...
    def GetScriptLocation(self) -> str: ...
    def ToString(self) -> str: ...


class CatalogInformation(Object):
    def __init__(self): ...
    @property
    def CatalogItems(self) -> Dictionary: ...
    @property
    def HashAlgorithm(self) -> str: ...
    @property
    def PathItems(self) -> Dictionary: ...
    @property
    def Signature(self) -> Signature: ...
    @property
    def Status(self) -> CatalogValidationStatus: ...
    @CatalogItems.setter
    def CatalogItems(self, value: Dictionary) -> None: ...
    @HashAlgorithm.setter
    def HashAlgorithm(self, value: str) -> None: ...
    @PathItems.setter
    def PathItems(self, value: Dictionary) -> None: ...
    @Signature.setter
    def Signature(self, value: Signature) -> None: ...
    @Status.setter
    def Status(self, value: CatalogValidationStatus) -> None: ...


class CatalogValidationStatus:
    Valid = 0
    ValidationFailed = 1


class ChildItemCmdletProviderIntrinsics(Object):
    @overload
    def Get(self, path: str, recurse: bool) -> Collection: ...
    @overload
    def Get(self, path: Set(str), recurse: bool, force: bool, literalPath: bool) -> Collection: ...
    @overload
    def Get(self, path: Set(str), recurse: bool, depth: UInt32, force: bool, literalPath: bool) -> Collection: ...
    @overload
    def GetNames(self, path: str, returnContainers: ReturnContainers, recurse: bool) -> Collection: ...
    @overload
    def GetNames(self, path: Set(str), returnContainers: ReturnContainers, recurse: bool, force: bool, literalPath: bool) -> Collection: ...
    @overload
    def GetNames(self, path: Set(str), returnContainers: ReturnContainers, recurse: bool, depth: UInt32, force: bool, literalPath: bool) -> Collection: ...
    @overload
    def HasChild(self, path: str) -> bool: ...
    @overload
    def HasChild(self, path: str, force: bool, literalPath: bool) -> bool: ...


class Cmdlet(InternalCommand):
    @property
    def CommandRuntime(self) -> ICommandRuntime: ...
    @property
    def CommonParameters() -> HashSet: ...
    @property
    def CurrentPSTransaction(self) -> PSTransactionContext: ...
    @property
    def OptionalCommonParameters() -> HashSet: ...
    @property
    def Stopping(self) -> bool: ...
    def GetResourceString(self, baseName: str, resourceId: str) -> str: ...
    @overload
    def Invoke(self) -> Iterable[T]: ...
    @overload
    def Invoke(self) -> IEnumerable: ...
    @CommandRuntime.setter
    def CommandRuntime(self, value: ICommandRuntime) -> None: ...
    @overload
    def ShouldContinue(self, query: str, caption: str) -> bool: ...
    @overload
    def ShouldContinue(self, query: str, caption: str, yesToAll: bool, noToAll: bool) -> Tuple[bool, bool, bool]: ...
    @overload
    def ShouldContinue(self, query: str, caption: str, hasSecurityImpact: bool, yesToAll: bool, noToAll: bool) -> Tuple[bool, bool, bool]: ...
    @overload
    def ShouldProcess(self, target: str) -> bool: ...
    @overload
    def ShouldProcess(self, target: str, action: str) -> bool: ...
    @overload
    def ShouldProcess(self, verboseDescription: str, verboseWarning: str, caption: str) -> bool: ...
    @overload
    def ShouldProcess(self, verboseDescription: str, verboseWarning: str, caption: str) -> Tuple[bool, ShouldProcessReason]: ...
    def ThrowTerminatingError(self, errorRecord: ErrorRecord) -> None: ...
    def TransactionAvailable(self) -> bool: ...
    def WriteCommandDetail(self, text: str) -> None: ...
    def WriteDebug(self, text: str) -> None: ...
    def WriteError(self, errorRecord: ErrorRecord) -> None: ...
    @overload
    def WriteInformation(self, informationRecord: InformationRecord) -> None: ...
    @overload
    def WriteInformation(self, messageData: Object, tags: Set(str)) -> None: ...
    @overload
    def WriteObject(self, sendToPipeline: Object) -> None: ...
    @overload
    def WriteObject(self, sendToPipeline: Object, enumerateCollection: bool) -> None: ...
    def WriteProgress(self, progressRecord: ProgressRecord) -> None: ...
    def WriteVerbose(self, text: str) -> None: ...
    def WriteWarning(self, text: str) -> None: ...


class CmdletAttribute(CmdletCommonMetadataAttribute):
    def __init__(self, verbName: str, nounName: str): ...
    @property
    def NounName(self) -> str: ...
    @property
    def VerbName(self) -> str: ...


class CmdletBindingAttribute(CmdletCommonMetadataAttribute):
    def __init__(self): ...
    @property
    def PositionalBinding(self) -> bool: ...
    @PositionalBinding.setter
    def PositionalBinding(self, value: bool) -> None: ...


class CmdletCommonMetadataAttribute(CmdletMetadataAttribute):
    @property
    def ConfirmImpact(self) -> ConfirmImpact: ...
    @property
    def DefaultParameterSetName(self) -> str: ...
    @property
    def HelpUri(self) -> str: ...
    @property
    def RemotingCapability(self) -> RemotingCapability: ...
    @property
    def SupportsPaging(self) -> bool: ...
    @property
    def SupportsShouldProcess(self) -> bool: ...
    @property
    def SupportsTransactions(self) -> bool: ...
    @ConfirmImpact.setter
    def ConfirmImpact(self, value: ConfirmImpact) -> None: ...
    @DefaultParameterSetName.setter
    def DefaultParameterSetName(self, value: str) -> None: ...
    @HelpUri.setter
    def HelpUri(self, value: str) -> None: ...
    @RemotingCapability.setter
    def RemotingCapability(self, value: RemotingCapability) -> None: ...
    @SupportsPaging.setter
    def SupportsPaging(self, value: bool) -> None: ...
    @SupportsShouldProcess.setter
    def SupportsShouldProcess(self, value: bool) -> None: ...
    @SupportsTransactions.setter
    def SupportsTransactions(self, value: bool) -> None: ...


class CmdletInfo(CommandInfo):
    def __init__(self, name: str, implementingType: Type): ...
    @property
    def DefaultParameterSet(self) -> str: ...
    @property
    def Definition(self) -> str: ...
    @property
    def HelpFile(self) -> str: ...
    @property
    def ImplementingType(self) -> Type: ...
    @property
    def Noun(self) -> str: ...
    @property
    def Options(self) -> ScopedItemOptions: ...
    @property
    def OutputType(self) -> ReadOnlyCollection: ...
    @property
    def PSSnapIn(self) -> PSSnapInInfo: ...
    @property
    def Verb(self) -> str: ...
    @property
    def Version(self) -> Version: ...
    @Options.setter
    def Options(self, value: ScopedItemOptions) -> None: ...


class CmdletInvocationException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class CmdletProviderInvocationException(CmdletInvocationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ProviderInfo(self) -> ProviderInfo: ...
    @property
    def ProviderInvocationException(self) -> ProviderInvocationException: ...


class CmdletProviderManagementIntrinsics(Object):
    def Get(self, name: str) -> Collection: ...
    def GetAll(self) -> Iterable[ProviderInfo]: ...
    def GetOne(self, name: str) -> ProviderInfo: ...


class CmsMessageRecipient(Object):
    @overload
    def __init__(self, identifier: str): ...
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @property
    def Certificates(self) -> X509Certificate2Collection: ...
    def Resolve(self, sessionState: SessionState, purpose: ResolutionPurpose) -> Tuple[ErrorRecord]: ...


class CommandBreakpoint(Breakpoint):
    @property
    def Command(self) -> str: ...
    def ToString(self) -> str: ...


class CommandCompletion(Object):
    def __init__(self, matches: Collection, currentMatchIndex: int, replacementIndex: int, replacementLength: int): ...
    @overload
    def CompleteInput(input: str, cursorIndex: int, options: Hashtable) -> CommandCompletion: ...
    @overload
    def CompleteInput(ast: Ast, tokens: Set(Token), positionOfCursor: IScriptPosition, options: Hashtable) -> CommandCompletion: ...
    @overload
    def CompleteInput(input: str, cursorIndex: int, options: Hashtable, powershell: PowerShell) -> CommandCompletion: ...
    @overload
    def CompleteInput(ast: Ast, tokens: Set(Token), cursorPosition: IScriptPosition, options: Hashtable, powershell: PowerShell) -> CommandCompletion: ...
    @property
    def CompletionMatches(self) -> Collection: ...
    @property
    def CurrentMatchIndex(self) -> int: ...
    @property
    def ReplacementIndex(self) -> int: ...
    @property
    def ReplacementLength(self) -> int: ...
    def GetNextResult(self, forward: bool) -> CompletionResult: ...
    def MapStringInputToParsedInput(input: str, cursorIndex: int) -> Tuple`3: ...
    @CompletionMatches.setter
    def CompletionMatches(self, value: Collection) -> None: ...
    @CurrentMatchIndex.setter
    def CurrentMatchIndex(self, value: int) -> None: ...
    @ReplacementIndex.setter
    def ReplacementIndex(self, value: int) -> None: ...
    @ReplacementLength.setter
    def ReplacementLength(self, value: int) -> None: ...


class CommandInfo(Object):
    @property
    def CommandType(self) -> CommandTypes: ...
    @property
    def Definition(self) -> str: ...
    @property
    def Module(self) -> PSModuleInfo: ...
    @property
    def ModuleName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def OutputType(self) -> ReadOnlyCollection: ...
    @property
    def Parameters(self) -> Dictionary: ...
    @property
    def ParameterSets(self) -> ReadOnlyCollection: ...
    @property
    def RemotingCapability(self) -> RemotingCapability: ...
    @property
    def Source(self) -> str: ...
    @property
    def Version(self) -> Version: ...
    @property
    def Visibility(self) -> SessionStateEntryVisibility: ...
    def ResolveParameter(self, name: str) -> ParameterMetadata: ...
    @Visibility.setter
    def Visibility(self, value: SessionStateEntryVisibility) -> None: ...
    def ToString(self) -> str: ...


class CommandInvocationIntrinsics(Object):
    def ExpandString(self, source: str) -> str: ...
    @property
    def CommandNotFoundAction(self) -> EventHandler: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def PostCommandLookupAction(self) -> EventHandler: ...
    @property
    def PreCommandLookupAction(self) -> EventHandler: ...
    def GetCmdlet(self, commandName: str) -> CmdletInfo: ...
    def GetCmdletByTypeName(self, cmdletTypeName: str) -> CmdletInfo: ...
    @overload
    def GetCmdlets(self) -> List: ...
    @overload
    def GetCmdlets(self, pattern: str) -> List: ...
    @overload
    def GetCommand(self, commandName: str, type: CommandTypes) -> CommandInfo: ...
    @overload
    def GetCommand(self, commandName: str, type: CommandTypes, arguments: Set(Object)) -> CommandInfo: ...
    def GetCommandName(self, name: str, nameIsPattern: bool, returnFullName: bool) -> List: ...
    def GetCommands(self, name: str, commandTypes: CommandTypes, nameIsPattern: bool) -> Iterable[CommandInfo]: ...
    @overload
    def InvokeScript(self, script: str) -> Collection: ...
    @overload
    def InvokeScript(self, script: str, args: Set(Object)) -> Collection: ...
    @overload
    def InvokeScript(self, sessionState: SessionState, scriptBlock: ScriptBlock, args: Set(Object)) -> Collection: ...
    @overload
    def InvokeScript(self, useLocalScope: bool, scriptBlock: ScriptBlock, input: IList, args: Set(Object)) -> Collection: ...
    @overload
    def InvokeScript(self, script: str, useNewScope: bool, writeToPipeline: PipelineResultTypes, input: IList, args: Set(Object)) -> Collection: ...
    def NewScriptBlock(self, scriptText: str) -> ScriptBlock: ...
    @CommandNotFoundAction.setter
    def CommandNotFoundAction(self, value: EventHandler) -> None: ...
    @HasErrors.setter
    def HasErrors(self, value: bool) -> None: ...
    @PostCommandLookupAction.setter
    def PostCommandLookupAction(self, value: EventHandler) -> None: ...
    @PreCommandLookupAction.setter
    def PreCommandLookupAction(self, value: EventHandler) -> None: ...


class CommandLookupEventArgs(EventArgs):
    @property
    def Command(self) -> CommandInfo: ...
    @property
    def CommandName(self) -> str: ...
    @property
    def CommandOrigin(self) -> CommandOrigin: ...
    @property
    def CommandScriptBlock(self) -> ScriptBlock: ...
    @property
    def StopSearch(self) -> bool: ...
    @Command.setter
    def Command(self, value: CommandInfo) -> None: ...
    @CommandScriptBlock.setter
    def CommandScriptBlock(self, value: ScriptBlock) -> None: ...
    @StopSearch.setter
    def StopSearch(self, value: bool) -> None: ...


class CommandMetadata(Object):
    @overload
    def __init__(self, commandType: Type): ...
    @overload
    def __init__(self, commandInfo: CommandInfo): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, other: CommandMetadata): ...
    @overload
    def __init__(self, commandInfo: CommandInfo, shouldGenerateCommonParameters: bool): ...
    @property
    def CommandType(self) -> Type: ...
    @property
    def ConfirmImpact(self) -> ConfirmImpact: ...
    @property
    def DefaultParameterSetName(self) -> str: ...
    @property
    def HelpUri(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> Dictionary: ...
    @property
    def PositionalBinding(self) -> bool: ...
    @property
    def RemotingCapability(self) -> RemotingCapability: ...
    @property
    def SupportsPaging(self) -> bool: ...
    @property
    def SupportsShouldProcess(self) -> bool: ...
    @property
    def SupportsTransactions(self) -> bool: ...
    def GetRestrictedCommands(sessionCapabilities: SessionCapabilities) -> Dictionary: ...
    @ConfirmImpact.setter
    def ConfirmImpact(self, value: ConfirmImpact) -> None: ...
    @DefaultParameterSetName.setter
    def DefaultParameterSetName(self, value: str) -> None: ...
    @HelpUri.setter
    def HelpUri(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @PositionalBinding.setter
    def PositionalBinding(self, value: bool) -> None: ...
    @RemotingCapability.setter
    def RemotingCapability(self, value: RemotingCapability) -> None: ...
    @SupportsPaging.setter
    def SupportsPaging(self, value: bool) -> None: ...
    @SupportsShouldProcess.setter
    def SupportsShouldProcess(self, value: bool) -> None: ...
    @SupportsTransactions.setter
    def SupportsTransactions(self, value: bool) -> None: ...


class CommandNotFoundException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def CommandName(self) -> str: ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @CommandName.setter
    def CommandName(self, value: str) -> None: ...


class CommandOrigin:
    Runspace = 0
    Internal = 1


class CommandParameterInfo(Object):
    @property
    def Aliases(self) -> ReadOnlyCollection: ...
    @property
    def Attributes(self) -> ReadOnlyCollection: ...
    @property
    def HelpMessage(self) -> str: ...
    @property
    def IsDynamic(self) -> bool: ...
    @property
    def IsMandatory(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParameterType(self) -> Type: ...
    @property
    def Position(self) -> int: ...
    @property
    def ValueFromPipeline(self) -> bool: ...
    @property
    def ValueFromPipelineByPropertyName(self) -> bool: ...
    @property
    def ValueFromRemainingArguments(self) -> bool: ...


class CommandParameterSetInfo(Object):
    @property
    def IsDefault(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> ReadOnlyCollection: ...
    def ToString(self) -> str: ...


class CommandTypes:
    Alias = 1
    Function = 2
    Filter = 4
    Cmdlet = 8
    ExternalScript = 16
    Application = 32
    Script = 64
    Workflow = 128
    Configuration = 256
    All = 511


class CompletionCompleters(Object):
    @overload
    def CompleteCommand(commandName: str) -> Iterable[CompletionResult]: ...
    @overload
    def CompleteCommand(commandName: str, moduleName: str, commandTypes: CommandTypes) -> Iterable[CompletionResult]: ...
    def CompleteFilename(fileName: str) -> Iterable[CompletionResult]: ...
    def CompleteOperator(wordToComplete: str) -> List: ...
    def CompleteType(typeName: str) -> Iterable[CompletionResult]: ...
    def CompleteVariable(variableName: str) -> Iterable[CompletionResult]: ...


class CompletionResult(Object):
    @overload
    def __init__(self, completionText: str): ...
    @overload
    def __init__(self, completionText: str, listItemText: str, resultType: CompletionResultType, toolTip: str): ...
    @property
    def CompletionText(self) -> str: ...
    @property
    def ListItemText(self) -> str: ...
    @property
    def ResultType(self) -> CompletionResultType: ...
    @property
    def ToolTip(self) -> str: ...


class CompletionResultType:
    Text = 0
    History = 1
    Command = 2
    ProviderItem = 3
    ProviderContainer = 4
    Property = 5
    Method = 6
    ParameterName = 7
    ParameterValue = 8
    Variable = 9
    Namespace = 10
    Type = 11
    Keyword = 12
    DynamicKeyword = 13


class ConfigurationInfo(FunctionInfo):
    @property
    def IsMetaConfiguration(self) -> bool: ...


class ConfirmImpact:
    #None = 0
    Low = 1
    Medium = 2
    High = 3


class ContainerParentJob(Job2):
    @overload
    def __init__(self, command: str): ...
    @overload
    def __init__(self, command: str, name: str): ...
    @overload
    def __init__(self, command: str, name: str, jobId: JobIdentifier): ...
    @overload
    def __init__(self, command: str, name: str, instanceId: Guid): ...
    @overload
    def __init__(self, command: str, name: str, jobType: str): ...
    @overload
    def __init__(self, command: str, name: str, jobId: JobIdentifier, jobType: str): ...
    @overload
    def __init__(self, command: str, name: str, instanceId: Guid, jobType: str): ...
    def AddChildJob(self, childJob: Job2) -> None: ...
    @property
    def HasMoreData(self) -> bool: ...
    @property
    def Location(self) -> str: ...
    @property
    def StatusMessage(self) -> str: ...
    def ResumeJob(self) -> None: ...
    def ResumeJobAsync(self) -> None: ...
    def StartJob(self) -> None: ...
    def StartJobAsync(self) -> None: ...
    @overload
    def StopJob(self) -> None: ...
    @overload
    def StopJob(self, force: bool, reason: str) -> None: ...
    @overload
    def StopJobAsync(self) -> None: ...
    @overload
    def StopJobAsync(self, force: bool, reason: str) -> None: ...
    @overload
    def SuspendJob(self) -> None: ...
    @overload
    def SuspendJob(self, force: bool, reason: str) -> None: ...
    @overload
    def SuspendJobAsync(self) -> None: ...
    @overload
    def SuspendJobAsync(self, force: bool, reason: str) -> None: ...
    def UnblockJob(self) -> None: ...
    def UnblockJobAsync(self) -> None: ...


class ContentCmdletProviderIntrinsics(Object):
    @overload
    def Clear(self, path: str) -> None: ...
    @overload
    def Clear(self, path: Set(str), force: bool, literalPath: bool) -> None: ...
    @overload
    def GetReader(self, path: str) -> Collection: ...
    @overload
    def GetReader(self, path: Set(str), force: bool, literalPath: bool) -> Collection: ...
    @overload
    def GetWriter(self, path: str) -> Collection: ...
    @overload
    def GetWriter(self, path: Set(str), force: bool, literalPath: bool) -> Collection: ...


class ContinueException(LoopFlowException):
    pass


class ConvertThroughString(PSTypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, sourceValue: Object, destinationType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, sourceValue: Object, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, sourceValue: Object, destinationType: Type, formatProvider: IFormatProvider, ignoreCase: bool) -> Object: ...
    @overload
    def ConvertTo(self, sourceValue: Object, destinationType: Type, formatProvider: IFormatProvider, ignoreCase: bool) -> Object: ...


class CopyContainers:
    CopyTargetContainer = 0
    CopyChildrenOfTargetContainer = 1


class CredentialAttribute(ArgumentTransformationAttribute):
    def __init__(self): ...
    @property
    def TransformNullOptionalParameters(self) -> bool: ...
    def Transform(self, engineIntrinsics: EngineIntrinsics, inputData: Object) -> Object: ...


class CustomControl(PSControl):
    def Create(outOfBand: bool) -> CustomControlBuilder: ...
    @property
    def Entries(self) -> List: ...
    @Entries.setter
    def Entries(self, value: List) -> None: ...


class CustomControlBuilder(Object):
    def EndControl(self) -> CustomControl: ...
    def GroupByProperty(self, property: str, customControl: CustomControl, label: str) -> CustomControlBuilder: ...
    def GroupByScriptBlock(self, scriptBlock: str, customControl: CustomControl, label: str) -> CustomControlBuilder: ...
    def StartEntry(self, entrySelectedByType: Iterable[str], entrySelectedByCondition: Iterable[DisplayEntry]) -> CustomEntryBuilder: ...


class CustomControlEntry(Object):
    @property
    def CustomItems(self) -> List: ...
    @property
    def SelectedBy(self) -> EntrySelectedBy: ...
    @CustomItems.setter
    def CustomItems(self, value: List) -> None: ...
    @SelectedBy.setter
    def SelectedBy(self, value: EntrySelectedBy) -> None: ...


class CustomEntryBuilder(Object):
    def AddCustomControlExpressionBinding(self, customControl: CustomControl, enumerateCollection: bool, selectedByType: str, selectedByScript: str) -> CustomEntryBuilder: ...
    def AddNewline(self, count: int) -> CustomEntryBuilder: ...
    def AddPropertyExpressionBinding(self, property: str, enumerateCollection: bool, selectedByType: str, selectedByScript: str, customControl: CustomControl) -> CustomEntryBuilder: ...
    def AddScriptBlockExpressionBinding(self, scriptBlock: str, enumerateCollection: bool, selectedByType: str, selectedByScript: str, customControl: CustomControl) -> CustomEntryBuilder: ...
    def AddText(self, text: str) -> CustomEntryBuilder: ...
    def EndEntry(self) -> CustomControlBuilder: ...
    def EndFrame(self) -> CustomEntryBuilder: ...
    def StartFrame(self, leftIndent: UInt32, rightIndent: UInt32, firstLineHanging: UInt32, firstLineIndent: UInt32) -> CustomEntryBuilder: ...


class CustomItemBase(Object):
    pass


class CustomItemExpression(CustomItemBase):
    @property
    def CustomControl(self) -> CustomControl: ...
    @property
    def EnumerateCollection(self) -> bool: ...
    @property
    def Expression(self) -> DisplayEntry: ...
    @property
    def ItemSelectionCondition(self) -> DisplayEntry: ...
    @CustomControl.setter
    def CustomControl(self, value: CustomControl) -> None: ...
    @EnumerateCollection.setter
    def EnumerateCollection(self, value: bool) -> None: ...
    @Expression.setter
    def Expression(self, value: DisplayEntry) -> None: ...
    @ItemSelectionCondition.setter
    def ItemSelectionCondition(self, value: DisplayEntry) -> None: ...


class CustomItemFrame(CustomItemBase):
    @property
    def CustomItems(self) -> List: ...
    @property
    def FirstLineHanging(self) -> UInt32: ...
    @property
    def FirstLineIndent(self) -> UInt32: ...
    @property
    def LeftIndent(self) -> UInt32: ...
    @property
    def RightIndent(self) -> UInt32: ...
    @CustomItems.setter
    def CustomItems(self, value: List) -> None: ...
    @FirstLineHanging.setter
    def FirstLineHanging(self, value: UInt32) -> None: ...
    @FirstLineIndent.setter
    def FirstLineIndent(self, value: UInt32) -> None: ...
    @LeftIndent.setter
    def LeftIndent(self, value: UInt32) -> None: ...
    @RightIndent.setter
    def RightIndent(self, value: UInt32) -> None: ...


class CustomItemNewline(CustomItemBase):
    def __init__(self): ...
    @property
    def Count(self) -> int: ...
    @Count.setter
    def Count(self, value: int) -> None: ...


class CustomItemText(CustomItemBase):
    def __init__(self): ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class CustomPSSnapIn(PSSnapInInstaller):
    @property
    def Cmdlets(self) -> Collection: ...
    @property
    def Formats(self) -> Collection: ...
    @property
    def Providers(self) -> Collection: ...
    @property
    def Types(self) -> Collection: ...


class DataAddedEventArgs(EventArgs):
    @property
    def Index(self) -> int: ...
    @property
    def PowerShellInstanceId(self) -> Guid: ...


class DataAddingEventArgs(EventArgs):
    @property
    def ItemAdded(self) -> Object: ...
    @property
    def PowerShellInstanceId(self) -> Guid: ...


class Debugger(Object):
    def add_BreakpointUpdated(self, value: EventHandler) -> None: ...
    def add_DebuggerStop(self, value: EventHandler) -> None: ...
    @property
    def DebugMode(self) -> DebugModes: ...
    @property
    def InBreakpoint(self) -> bool: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def IsActive(self) -> bool: ...
    def GetCallStack(self) -> Iterable[CallStackFrame]: ...
    def GetDebuggerStopArgs(self) -> DebuggerStopEventArgs: ...
    def ProcessCommand(self, command: PSCommand, output: PSDataCollection) -> DebuggerCommandResults: ...
    def remove_BreakpointUpdated(self, value: EventHandler) -> None: ...
    def remove_DebuggerStop(self, value: EventHandler) -> None: ...
    def ResetCommandProcessorSource(self) -> None: ...
    def SetBreakpoints(self, breakpoints: Iterable[Breakpoint]) -> None: ...
    def SetDebuggerAction(self, resumeAction: DebuggerResumeAction) -> None: ...
    def SetDebuggerStepMode(self, enabled: bool) -> None: ...
    def SetDebugMode(self, mode: DebugModes) -> None: ...
    @overload
    def SetParent(self, parent: Debugger, breakPoints: Iterable[Breakpoint], startAction: Nullable, host: PSHost, path: PathInfo) -> None: ...
    @overload
    def SetParent(self, parent: Debugger, breakPoints: Iterable[Breakpoint], startAction: Nullable, host: PSHost, path: PathInfo, functionSourceMap: Dictionary) -> None: ...
    def StopProcessCommand(self) -> None: ...


class DebuggerCommandResults(Object):
    def __init__(self, resumeAction: Nullable, evaluatedByDebugger: bool): ...
    @property
    def EvaluatedByDebugger(self) -> bool: ...
    @property
    def ResumeAction(self) -> Nullable: ...


class DebuggerResumeAction:
    Continue = 0
    StepInto = 1
    StepOut = 2
    StepOver = 3
    Stop = 4


class DebuggerStopEventArgs(EventArgs):
    def __init__(self, invocationInfo: InvocationInfo, breakpoints: Collection, resumeAction: DebuggerResumeAction): ...
    @property
    def Breakpoints(self) -> ReadOnlyCollection: ...
    @property
    def InvocationInfo(self) -> InvocationInfo: ...
    @property
    def ResumeAction(self) -> DebuggerResumeAction: ...
    @ResumeAction.setter
    def ResumeAction(self, value: DebuggerResumeAction) -> None: ...


class DebugModes:
    #None = 0
    Default = 1
    LocalScript = 2
    RemoteScript = 4


class DebugRecord(InformationalRecord):
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, record: PSObject): ...


class DebugSource(Object):
    def __init__(self, script: str, scriptFile: str, xamlDefinition: str): ...
    @property
    def Script(self) -> str: ...
    @property
    def ScriptFile(self) -> str: ...
    @property
    def XamlDefinition(self) -> str: ...


class DefaultParameterDictionary(Hashtable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dictionary: IDictionary): ...
    def Add(self, key: Object, value: Object) -> None: ...
    def ChangeSinceLastCheck(self) -> bool: ...
    def Clear(self) -> None: ...
    def Contains(self, key: Object) -> bool: ...
    def ContainsKey(self, key: Object) -> bool: ...
    @property
    def Item(self, key: Object) -> Object: ...
    def Remove(self, key: Object) -> None: ...
    @Item.setter
    def Item(self, key: Object, value: Object) -> None: ...


class DisplayEntry(Object):
    def __init__(self, value: str, type: DisplayEntryValueType): ...
    @property
    def Value(self) -> str: ...
    @property
    def ValueType(self) -> DisplayEntryValueType: ...
    def ToString(self) -> str: ...


class DisplayEntryValueType:
    Property = 0
    ScriptBlock = 1


class DriveManagementIntrinsics(Object):
    @property
    def Current(self) -> PSDriveInfo: ...
    def Get(self, driveName: str) -> PSDriveInfo: ...
    def GetAll(self) -> Collection: ...
    def GetAllAtScope(self, scope: str) -> Collection: ...
    def GetAllForProvider(self, providerName: str) -> Collection: ...
    def GetAtScope(self, driveName: str, scope: str) -> PSDriveInfo: ...
    def New(self, drive: PSDriveInfo, scope: str) -> PSDriveInfo: ...
    def Remove(self, driveName: str, force: bool, scope: str) -> None: ...


class DriveNotFoundException(SessionStateException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class DscLocalConfigurationManagerAttribute(CmdletMetadataAttribute):
    def __init__(self): ...


class DscPropertyAttribute(CmdletMetadataAttribute):
    def __init__(self): ...
    @property
    def Key(self) -> bool: ...
    @property
    def Mandatory(self) -> bool: ...
    @property
    def NotConfigurable(self) -> bool: ...
    @Key.setter
    def Key(self, value: bool) -> None: ...
    @Mandatory.setter
    def Mandatory(self, value: bool) -> None: ...
    @NotConfigurable.setter
    def NotConfigurable(self, value: bool) -> None: ...


class DscResourceAttribute(CmdletMetadataAttribute):
    def __init__(self): ...
    @property
    def RunAsCredential(self) -> DSCResourceRunAsCredential: ...
    @RunAsCredential.setter
    def RunAsCredential(self, value: DSCResourceRunAsCredential) -> None: ...


class DscResourceInfo(Object):
    @property
    def CompanyName(self) -> str: ...
    @property
    def FriendlyName(self) -> str: ...
    @property
    def HelpFile(self) -> str: ...
    @property
    def ImplementedAs(self) -> ImplementedAsType: ...
    @property
    def Module(self) -> PSModuleInfo: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParentPath(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def Properties(self) -> ReadOnlyCollection: ...
    @property
    def ResourceType(self) -> str: ...
    @CompanyName.setter
    def CompanyName(self, value: str) -> None: ...
    @FriendlyName.setter
    def FriendlyName(self, value: str) -> None: ...
    @ImplementedAs.setter
    def ImplementedAs(self, value: ImplementedAsType) -> None: ...
    @ParentPath.setter
    def ParentPath(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @ResourceType.setter
    def ResourceType(self, value: str) -> None: ...
    def UpdateProperties(self, properties: List[DscResourcePropertyInfo]) -> None: ...


class DscResourcePropertyInfo(Object):
    @property
    def IsMandatory(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def PropertyType(self) -> str: ...
    @property
    def Values(self) -> ReadOnlyCollection: ...
    @IsMandatory.setter
    def IsMandatory(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @PropertyType.setter
    def PropertyType(self, value: str) -> None: ...


class DSCResourceRunAsCredential:
    Optional = 0
    Default = 0
    NotSupported = 1
    Mandatory = 2


class DynamicClassImplementationAssemblyAttribute(Attribute):
    def __init__(self): ...


class EngineIntrinsics(Object):
    @property
    def Events(self) -> PSEventManager: ...
    @property
    def Host(self) -> PSHost: ...
    @property
    def InvokeCommand(self) -> CommandInvocationIntrinsics: ...
    @property
    def InvokeProvider(self) -> ProviderIntrinsics: ...
    @property
    def SessionState(self) -> SessionState: ...


class EntrySelectedBy(Object):
    def __init__(self): ...
    @property
    def SelectionCondition(self) -> List: ...
    @property
    def TypeNames(self) -> List: ...
    @SelectionCondition.setter
    def SelectionCondition(self, value: List) -> None: ...
    @TypeNames.setter
    def TypeNames(self, value: List) -> None: ...


class ErrorCategory:
    NotSpecified = 0
    OpenError = 1
    CloseError = 2
    DeviceError = 3
    DeadlockDetected = 4
    InvalidArgument = 5
    InvalidData = 6
    InvalidOperation = 7
    InvalidResult = 8
    InvalidType = 9
    MetadataError = 10
    NotImplemented = 11
    NotInstalled = 12
    ObjectNotFound = 13
    OperationStopped = 14
    OperationTimeout = 15
    SyntaxError = 16
    ParserError = 17
    PermissionDenied = 18
    ResourceBusy = 19
    ResourceExists = 20
    ResourceUnavailable = 21
    ReadError = 22
    WriteError = 23
    FromStdErr = 24
    SecurityError = 25
    ProtocolError = 26
    ConnectionError = 27
    AuthenticationError = 28
    LimitsExceeded = 29
    QuotaExceeded = 30
    NotEnabled = 31


class ErrorCategoryInfo(Object):
    @property
    def Activity(self) -> str: ...
    @property
    def Category(self) -> ErrorCategory: ...
    @property
    def Reason(self) -> str: ...
    @property
    def TargetName(self) -> str: ...
    @property
    def TargetType(self) -> str: ...
    @overload
    def GetMessage(self) -> str: ...
    @overload
    def GetMessage(self, uiCultureInfo: CultureInfo) -> str: ...
    @Activity.setter
    def Activity(self, value: str) -> None: ...
    @Reason.setter
    def Reason(self, value: str) -> None: ...
    @TargetName.setter
    def TargetName(self, value: str) -> None: ...
    @TargetType.setter
    def TargetType(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ErrorDetails(Object):
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, cmdlet: Cmdlet, baseName: str, resourceId: str, args: Set(Object)): ...
    @overload
    def __init__(self, resourceSupplier: IResourceSupplier, baseName: str, resourceId: str, args: Set(Object)): ...
    @overload
    def __init__(self, assembly: Assembly, baseName: str, resourceId: str, args: Set(Object)): ...
    @property
    def Message(self) -> str: ...
    @property
    def RecommendedAction(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @RecommendedAction.setter
    def RecommendedAction(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ErrorRecord(Object):
    @overload
    def __init__(self, errorRecord: ErrorRecord, replaceParentContainsErrorRecordException: Exception): ...
    @overload
    def __init__(self, exception: Exception, errorId: str, errorCategory: ErrorCategory, targetObject: Object): ...
    @property
    def CategoryInfo(self) -> ErrorCategoryInfo: ...
    @property
    def ErrorDetails(self) -> ErrorDetails: ...
    @property
    def Exception(self) -> Exception: ...
    @property
    def FullyQualifiedErrorId(self) -> str: ...
    @property
    def InvocationInfo(self) -> InvocationInfo: ...
    @property
    def PipelineIterationInfo(self) -> ReadOnlyCollection: ...
    @property
    def ScriptStackTrace(self) -> str: ...
    @property
    def TargetObject(self) -> Object: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @ErrorDetails.setter
    def ErrorDetails(self, value: ErrorDetails) -> None: ...
    def ToString(self) -> str: ...


class ExitException(FlowControlException):
    @property
    def Argument(self) -> Object: ...


class ExtendedTypeDefinition(Object):
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, typeName: str, viewDefinitions: Iterable[FormatViewDefinition]): ...
    @property
    def FormatViewDefinition(self) -> List: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def TypeNames(self) -> List: ...
    def ToString(self) -> str: ...


class ExtendedTypeSystemException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ExternalScriptInfo(CommandInfo):
    @property
    def Definition(self) -> str: ...
    @property
    def OriginalEncoding(self) -> Encoding: ...
    @property
    def OutputType(self) -> ReadOnlyCollection: ...
    @property
    def Path(self) -> str: ...
    @property
    def ScriptBlock(self) -> ScriptBlock: ...
    @property
    def ScriptContents(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def Visibility(self) -> SessionStateEntryVisibility: ...
    @Visibility.setter
    def Visibility(self, value: SessionStateEntryVisibility) -> None: ...
    def ValidateScriptInfo(self, host: PSHost) -> None: ...


class FilterInfo(FunctionInfo):
    pass




class FlowControlException(SystemException):
    pass


class FormatViewDefinition(Object):
    def __init__(self, name: str, control: PSControl): ...
    @property
    def Control(self) -> PSControl: ...
    @property
    def Name(self) -> str: ...


class ForwardedEventArgs(EventArgs):
    @property
    def SerializedRemoteEventArgs(self) -> PSObject: ...


class FunctionInfo(CommandInfo):
    @property
    def CmdletBinding(self) -> bool: ...
    @property
    def DefaultParameterSet(self) -> str: ...
    @property
    def Definition(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def HelpFile(self) -> str: ...
    @property
    def Noun(self) -> str: ...
    @property
    def Options(self) -> ScopedItemOptions: ...
    @property
    def OutputType(self) -> ReadOnlyCollection: ...
    @property
    def ScriptBlock(self) -> ScriptBlock: ...
    @property
    def Verb(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Options.setter
    def Options(self, value: ScopedItemOptions) -> None: ...


class GetSymmetricEncryptionKey(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, context: StreamingContext, callback: AsyncCallback, object: Object) -> Tuple[IAsyncResult, Set(Byte), Set(Byte)]: ...
    def EndInvoke(self, result: IAsyncResult) -> Tuple[bool, Set(Byte), Set(Byte)]: ...
    def Invoke(self, context: StreamingContext) -> Tuple[bool, Set(Byte), Set(Byte)]: ...


class GettingValueExceptionEventArgs(EventArgs):
    @property
    def Exception(self) -> Exception: ...
    @property
    def ShouldThrow(self) -> bool: ...
    @property
    def ValueReplacement(self) -> Object: ...
    @ShouldThrow.setter
    def ShouldThrow(self, value: bool) -> None: ...
    @ValueReplacement.setter
    def ValueReplacement(self, value: Object) -> None: ...


class GetValueException(ExtendedTypeSystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class GetValueInvocationException(GetValueException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class HaltCommandException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class HiddenAttribute(ParsingBaseAttribute):
    def __init__(self): ...


class HostInformationMessage(Object):
    def __init__(self): ...
    @property
    def BackgroundColor(self) -> Nullable: ...
    @property
    def ForegroundColor(self) -> Nullable: ...
    @property
    def Message(self) -> str: ...
    @property
    def NoNewLine(self) -> Nullable: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Nullable) -> None: ...
    @ForegroundColor.setter
    def ForegroundColor(self, value: Nullable) -> None: ...
    @Message.setter
    def Message(self, value: str) -> None: ...
    @NoNewLine.setter
    def NoNewLine(self, value: Nullable) -> None: ...
    def ToString(self) -> str: ...


class HostUtilities(Object):
    pass


class IArgumentCompleter:
    def CompleteArgument(self, commandName: str, parameterName: str, wordToComplete: str, commandAst: CommandAst, fakeBoundParameters: IDictionary) -> Iterable[CompletionResult]: ...


class IBackgroundDispatcher:
    def BeginInvoke(self, callback: WaitCallback, state: Object, completionCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, asyncResult: IAsyncResult) -> None: ...
    @overload
    def QueueUserWorkItem(self, callback: WaitCallback) -> bool: ...
    @overload
    def QueueUserWorkItem(self, callback: WaitCallback, state: Object) -> bool: ...


class ICommandRuntime:
    @property
    def CurrentPSTransaction(self) -> PSTransactionContext: ...
    @property
    def Host(self) -> PSHost: ...
    @overload
    def ShouldContinue(self, query: str, caption: str) -> bool: ...
    @overload
    def ShouldContinue(self, query: str, caption: str, yesToAll: bool, noToAll: bool) -> Tuple[bool, bool, bool]: ...
    @overload
    def ShouldProcess(self, target: str) -> bool: ...
    @overload
    def ShouldProcess(self, target: str, action: str) -> bool: ...
    @overload
    def ShouldProcess(self, verboseDescription: str, verboseWarning: str, caption: str) -> bool: ...
    @overload
    def ShouldProcess(self, verboseDescription: str, verboseWarning: str, caption: str) -> Tuple[bool, ShouldProcessReason]: ...
    def ThrowTerminatingError(self, errorRecord: ErrorRecord) -> None: ...
    def TransactionAvailable(self) -> bool: ...
    def WriteCommandDetail(self, text: str) -> None: ...
    def WriteDebug(self, text: str) -> None: ...
    def WriteError(self, errorRecord: ErrorRecord) -> None: ...
    @overload
    def WriteObject(self, sendToPipeline: Object) -> None: ...
    @overload
    def WriteObject(self, sendToPipeline: Object, enumerateCollection: bool) -> None: ...
    @overload
    def WriteProgress(self, progressRecord: ProgressRecord) -> None: ...
    @overload
    def WriteProgress(self, sourceId: Int64, progressRecord: ProgressRecord) -> None: ...
    def WriteVerbose(self, text: str) -> None: ...
    def WriteWarning(self, text: str) -> None: ...


class ICommandRuntime2:
    def ShouldContinue(self, query: str, caption: str, hasSecurityImpact: bool, yesToAll: bool, noToAll: bool) -> Tuple[bool, bool, bool]: ...
    def WriteInformation(self, informationRecord: InformationRecord) -> None: ...


class IContainsErrorRecord:
    @property
    def ErrorRecord(self) -> ErrorRecord: ...


class IDynamicParameters:
    def GetDynamicParameters(self) -> Object: ...


class IJobDebugger:
    @property
    def Debugger(self) -> Debugger: ...
    @property
    def IsAsync(self) -> bool: ...
    @IsAsync.setter
    def IsAsync(self, value: bool) -> None: ...


class IModuleAssemblyCleanup:
    def OnRemove(self, psModuleInfo: PSModuleInfo) -> None: ...


class IModuleAssemblyInitializer:
    def OnImport(self) -> None: ...


class ImplementedAsType:
    #None = 0
    PowerShell = 1
    Binary = 2
    Composite = 3


class IncompleteParseException(ParseException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class InformationalRecord(Object):
    @property
    def InvocationInfo(self) -> InvocationInfo: ...
    @property
    def Message(self) -> str: ...
    @property
    def PipelineIterationInfo(self) -> ReadOnlyCollection: ...
    @Message.setter
    def Message(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class InformationRecord(Object):
    def __init__(self, messageData: Object, source: str): ...
    @property
    def Computer(self) -> str: ...
    @property
    def ManagedThreadId(self) -> UInt32: ...
    @property
    def MessageData(self) -> Object: ...
    @property
    def NativeThreadId(self) -> UInt32: ...
    @property
    def ProcessId(self) -> UInt32: ...
    @property
    def Source(self) -> str: ...
    @property
    def Tags(self) -> List: ...
    @property
    def TimeGenerated(self) -> DateTime: ...
    @property
    def User(self) -> str: ...
    @Computer.setter
    def Computer(self, value: str) -> None: ...
    @ManagedThreadId.setter
    def ManagedThreadId(self, value: UInt32) -> None: ...
    @NativeThreadId.setter
    def NativeThreadId(self, value: UInt32) -> None: ...
    @ProcessId.setter
    def ProcessId(self, value: UInt32) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    @TimeGenerated.setter
    def TimeGenerated(self, value: DateTime) -> None: ...
    @User.setter
    def User(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class InvalidJobStateException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, currentState: JobState, actionMessage: str): ...
    @property
    def CurrentState(self) -> JobState: ...


class InvalidPowerShellStateException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def CurrentState(self) -> PSInvocationState: ...


class InvocationInfo(Object):
    def Create(commandInfo: CommandInfo, scriptPosition: IScriptExtent) -> InvocationInfo: ...
    @property
    def BoundParameters(self) -> Dictionary: ...
    @property
    def CommandOrigin(self) -> CommandOrigin: ...
    @property
    def DisplayScriptPosition(self) -> IScriptExtent: ...
    @property
    def ExpectingInput(self) -> bool: ...
    @property
    def HistoryId(self) -> Int64: ...
    @property
    def InvocationName(self) -> str: ...
    @property
    def Line(self) -> str: ...
    @property
    def MyCommand(self) -> CommandInfo: ...
    @property
    def OffsetInLine(self) -> int: ...
    @property
    def PipelineLength(self) -> int: ...
    @property
    def PipelinePosition(self) -> int: ...
    @property
    def PositionMessage(self) -> str: ...
    @property
    def PSCommandPath(self) -> str: ...
    @property
    def PSScriptRoot(self) -> str: ...
    @property
    def ScriptLineNumber(self) -> int: ...
    @property
    def ScriptName(self) -> str: ...
    @property
    def UnboundArguments(self) -> List: ...
    @DisplayScriptPosition.setter
    def DisplayScriptPosition(self, value: IScriptExtent) -> None: ...


class IResourceSupplier:
    def GetResourceString(self, baseName: str, resourceId: str) -> str: ...


class ItemCmdletProviderIntrinsics(Object):
    @overload
    def Clear(self, path: str) -> Collection: ...
    @overload
    def Clear(self, path: Set(str), force: bool, literalPath: bool) -> Collection: ...
    @overload
    def Copy(self, path: str, destinationPath: str, recurse: bool, copyContainers: CopyContainers) -> Collection: ...
    @overload
    def Copy(self, path: Set(str), destinationPath: str, recurse: bool, copyContainers: CopyContainers, force: bool, literalPath: bool) -> Collection: ...
    @overload
    def Exists(self, path: str) -> bool: ...
    @overload
    def Exists(self, path: str, force: bool, literalPath: bool) -> bool: ...
    @overload
    def Get(self, path: str) -> Collection: ...
    @overload
    def Get(self, path: Set(str), force: bool, literalPath: bool) -> Collection: ...
    @overload
    def Invoke(self, path: str) -> None: ...
    @overload
    def Invoke(self, path: Set(str), literalPath: bool) -> None: ...
    def IsContainer(self, path: str) -> bool: ...
    @overload
    def Move(self, path: str, destination: str) -> Collection: ...
    @overload
    def Move(self, path: Set(str), destination: str, force: bool, literalPath: bool) -> Collection: ...
    @overload
    def New(self, path: str, name: str, itemTypeName: str, content: Object) -> Collection: ...
    @overload
    def New(self, path: Set(str), name: str, itemTypeName: str, content: Object, force: bool) -> Collection: ...
    @overload
    def Remove(self, path: str, recurse: bool) -> None: ...
    @overload
    def Remove(self, path: Set(str), recurse: bool, force: bool, literalPath: bool) -> None: ...
    @overload
    def Rename(self, path: str, newName: str) -> Collection: ...
    @overload
    def Rename(self, path: str, newName: str, force: bool) -> Collection: ...
    @overload
    def Set(self, path: str, value: Object) -> Collection: ...
    @overload
    def Set(self, path: Set(str), value: Object, force: bool, literalPath: bool) -> Collection: ...


class ItemNotFoundException(SessionStateException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class Job(Object):
    def add_StateChanged(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def ChildJobs(self) -> List[Job]: ...
    @property
    def Command(self) -> str: ...
    @property
    def Debug(self) -> PSDataCollection: ...
    @property
    def Error(self) -> PSDataCollection: ...
    @property
    def Finished(self) -> WaitHandle: ...
    @property
    def HasMoreData(self) -> bool: ...
    @property
    def Id(self) -> int: ...
    @property
    def Information(self) -> PSDataCollection: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def JobStateInfo(self) -> JobStateInfo: ...
    @property
    def Location(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Output(self) -> PSDataCollection: ...
    @property
    def Progress(self) -> PSDataCollection: ...
    @property
    def PSBeginTime(self) -> Nullable: ...
    @property
    def PSEndTime(self) -> Nullable: ...
    @property
    def PSJobTypeName(self) -> str: ...
    @property
    def StatusMessage(self) -> str: ...
    @property
    def Verbose(self) -> PSDataCollection: ...
    @property
    def Warning(self) -> PSDataCollection: ...
    def LoadJobStreams(self) -> None: ...
    def remove_StateChanged(self, value: EventHandler) -> None: ...
    @Debug.setter
    def Debug(self, value: PSDataCollection) -> None: ...
    @Error.setter
    def Error(self, value: PSDataCollection) -> None: ...
    @Information.setter
    def Information(self, value: PSDataCollection) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Output.setter
    def Output(self, value: PSDataCollection) -> None: ...
    @Progress.setter
    def Progress(self, value: PSDataCollection) -> None: ...
    @Verbose.setter
    def Verbose(self, value: PSDataCollection) -> None: ...
    @Warning.setter
    def Warning(self, value: PSDataCollection) -> None: ...
    def StopJob(self) -> None: ...
    def UnloadJobStreams(self) -> None: ...


class Job2(Job):
    def add_ResumeJobCompleted(self, value: EventHandler) -> None: ...
    def add_StartJobCompleted(self, value: EventHandler) -> None: ...
    def add_StopJobCompleted(self, value: EventHandler) -> None: ...
    def add_SuspendJobCompleted(self, value: EventHandler) -> None: ...
    def add_UnblockJobCompleted(self, value: EventHandler) -> None: ...
    @property
    def StartParameters(self) -> List: ...
    def remove_ResumeJobCompleted(self, value: EventHandler) -> None: ...
    def remove_StartJobCompleted(self, value: EventHandler) -> None: ...
    def remove_StopJobCompleted(self, value: EventHandler) -> None: ...
    def remove_SuspendJobCompleted(self, value: EventHandler) -> None: ...
    def remove_UnblockJobCompleted(self, value: EventHandler) -> None: ...
    def ResumeJob(self) -> None: ...
    def ResumeJobAsync(self) -> None: ...
    @StartParameters.setter
    def StartParameters(self, value: List) -> None: ...
    def StartJob(self) -> None: ...
    def StartJobAsync(self) -> None: ...
    @overload
    def StopJob(self, force: bool, reason: str) -> None: ...
    @overload
    def StopJobAsync(self) -> None: ...
    @overload
    def StopJobAsync(self, force: bool, reason: str) -> None: ...
    @overload
    def SuspendJob(self) -> None: ...
    @overload
    def SuspendJob(self, force: bool, reason: str) -> None: ...
    @overload
    def SuspendJobAsync(self) -> None: ...
    @overload
    def SuspendJobAsync(self, force: bool, reason: str) -> None: ...
    def UnblockJob(self) -> None: ...
    def UnblockJobAsync(self) -> None: ...


class JobDataAddedEventArgs(EventArgs):
    @property
    def DataType(self) -> PowerShellStreamType: ...
    @property
    def Index(self) -> int: ...
    @property
    def SourceJob(self) -> Job: ...


class JobDefinition(Object):
    def __init__(self, jobSourceAdapterType: Type, command: str, name: str): ...
    @property
    def Command(self) -> str: ...
    @property
    def CommandInfo(self) -> CommandInfo: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def JobSourceAdapterType(self) -> Type: ...
    @property
    def JobSourceAdapterTypeName(self) -> str: ...
    @property
    def ModuleName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def Load(self, stream: Stream) -> None: ...
    def Save(self, stream: Stream) -> None: ...
    @InstanceId.setter
    def InstanceId(self, value: Guid) -> None: ...
    @JobSourceAdapterTypeName.setter
    def JobSourceAdapterTypeName(self, value: str) -> None: ...
    @ModuleName.setter
    def ModuleName(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class JobFailedException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, innerException: Exception, displayScriptPosition: ScriptExtent): ...
    @property
    def DisplayScriptPosition(self) -> ScriptExtent: ...
    @property
    def Message(self) -> str: ...
    @property
    def Reason(self) -> Exception: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class JobIdentifier(Object):
    pass


class JobInvocationInfo(Object):
    @overload
    def __init__(self, definition: JobDefinition, parameters: Dictionary): ...
    @overload
    def __init__(self, definition: JobDefinition, parameterCollectionList: Iterable[Dictionary]): ...
    @overload
    def __init__(self, definition: JobDefinition, parameters: CommandParameterCollection): ...
    @overload
    def __init__(self, definition: JobDefinition, parameters: Iterable[CommandParameterCollection]): ...
    @property
    def Command(self) -> str: ...
    @property
    def Definition(self) -> JobDefinition: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> List: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def Load(self, stream: Stream) -> None: ...
    def Save(self, stream: Stream) -> None: ...
    @Command.setter
    def Command(self, value: str) -> None: ...
    @Definition.setter
    def Definition(self, value: JobDefinition) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class JobManager(Object):
    def IsRegistered(self, typeName: str) -> bool: ...
    @overload
    def NewJob(self, definition: JobDefinition) -> Job2: ...
    @overload
    def NewJob(self, specification: JobInvocationInfo) -> Job2: ...
    def PersistJob(self, job: Job2, definition: JobDefinition) -> None: ...


class JobRepository:
    @property
    def Jobs(self) -> List: ...
    def GetJob(self, instanceId: Guid) -> Job: ...


class JobSourceAdapter(Object):
    @property
    def Name(self) -> str: ...
    def GetJobByInstanceId(self, instanceId: Guid, recurse: bool) -> Job2: ...
    def GetJobBySessionId(self, id: int, recurse: bool) -> Job2: ...
    def GetJobs(self) -> List[Job2]: ...
    def GetJobsByCommand(self, command: str, recurse: bool) -> List[Job2]: ...
    def GetJobsByFilter(self, filter: Dictionary, recurse: bool) -> List[Job2]: ...
    def GetJobsByName(self, name: str, recurse: bool) -> List[Job2]: ...
    def GetJobsByState(self, state: JobState, recurse: bool) -> List[Job2]: ...
    @overload
    def NewJob(self, specification: JobInvocationInfo) -> Job2: ...
    @overload
    def NewJob(self, definition: JobDefinition) -> Job2: ...
    @overload
    def NewJob(self, definitionName: str, definitionPath: str) -> Job2: ...
    def PersistJob(self, job: Job2) -> None: ...
    def RemoveJob(self, job: Job2) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def StoreJobIdForReuse(self, job: Job2, recurse: bool) -> None: ...


class JobState:
    NotStarted = 0
    Running = 1
    Completed = 2
    Failed = 3
    Stopped = 4
    Blocked = 5
    Suspended = 6
    Disconnected = 7
    Suspending = 8
    Stopping = 9
    AtBreakpoint = 10


class JobStateEventArgs(EventArgs):
    @overload
    def __init__(self, jobStateInfo: JobStateInfo): ...
    @overload
    def __init__(self, jobStateInfo: JobStateInfo, previousJobStateInfo: JobStateInfo): ...
    @property
    def JobStateInfo(self) -> JobStateInfo: ...
    @property
    def PreviousJobStateInfo(self) -> JobStateInfo: ...


class JobStateInfo(Object):
    @overload
    def __init__(self, state: JobState): ...
    @overload
    def __init__(self, state: JobState, reason: Exception): ...
    @property
    def Reason(self) -> Exception: ...
    @property
    def State(self) -> JobState: ...
    def ToString(self) -> str: ...


class JobThreadOptions:
    Default = 0
    UseThreadPoolThread = 1
    UseNewThread = 2


class LanguagePrimitives(Object):
    @overload
    def Compare(first: Object, second: Object) -> int: ...
    @overload
    def Compare(first: Object, second: Object, ignoreCase: bool) -> int: ...
    @overload
    def Compare(first: Object, second: Object, ignoreCase: bool, formatProvider: IFormatProvider) -> int: ...
    def ConvertPSObjectToType(valueToConvert: PSObject, resultType: Type, recursion: bool, formatProvider: IFormatProvider, ignoreUnknownMembers: bool) -> Object: ...
    @overload
    def ConvertTo(valueToConvert: Object) -> T: ...
    @overload
    def ConvertTo(valueToConvert: Object, resultType: Type) -> Object: ...
    @overload
    def ConvertTo(valueToConvert: Object, resultType: Type, formatProvider: IFormatProvider) -> Object: ...
    def ConvertTypeNameToPSTypeName(typeName: str) -> str: ...
    @overload
    def Equals(first: Object, second: Object) -> bool: ...
    @overload
    def Equals(first: Object, second: Object, ignoreCase: bool) -> bool: ...
    @overload
    def Equals(first: Object, second: Object, ignoreCase: bool, formatProvider: IFormatProvider) -> bool: ...
    def GetEnumerable(obj: Object) -> IEnumerable: ...
    def GetEnumerator(obj: Object) -> IEnumerator: ...
    def GetPSDataCollection(inputValue: Object) -> PSDataCollection: ...
    def IsTrue(obj: Object) -> bool: ...
    @overload
    def TryConvertTo(valueToConvert: Object) -> Tuple[bool, T]: ...
    @overload
    def TryConvertTo(valueToConvert: Object, formatProvider: IFormatProvider) -> Tuple[bool, T]: ...
    @overload
    def TryConvertTo(valueToConvert: Object, resultType: Type) -> Tuple[bool, Object]: ...
    @overload
    def TryConvertTo(valueToConvert: Object, resultType: Type, formatProvider: IFormatProvider) -> Tuple[bool, Object]: ...


class LineBreakpoint(Breakpoint):
    @property
    def Column(self) -> int: ...
    @property
    def Line(self) -> int: ...
    def ToString(self) -> str: ...


class ListControl(PSControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, entries: Iterable[ListControlEntry]): ...
    def Create(outOfBand: bool) -> ListControlBuilder: ...
    @property
    def Entries(self) -> List: ...


class ListControlBuilder(Object):
    def EndList(self) -> ListControl: ...
    def GroupByProperty(self, property: str, customControl: CustomControl, label: str) -> ListControlBuilder: ...
    def GroupByScriptBlock(self, scriptBlock: str, customControl: CustomControl, label: str) -> ListControlBuilder: ...
    def StartEntry(self, entrySelectedByType: Iterable[str], entrySelectedByCondition: Iterable[DisplayEntry]) -> ListEntryBuilder: ...


class ListControlEntry(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, listItems: Iterable[ListControlEntryItem]): ...
    @overload
    def __init__(self, listItems: Iterable[ListControlEntryItem], selectedBy: Iterable[str]): ...
    @property
    def EntrySelectedBy(self) -> EntrySelectedBy: ...
    @property
    def Items(self) -> List: ...
    @property
    def SelectedBy(self) -> List: ...


class ListControlEntryItem(Object):
    def __init__(self, label: str, entry: DisplayEntry): ...
    @property
    def DisplayEntry(self) -> DisplayEntry: ...
    @property
    def FormatString(self) -> str: ...
    @property
    def ItemSelectionCondition(self) -> DisplayEntry: ...
    @property
    def Label(self) -> str: ...


class ListEntryBuilder(Object):
    def AddItemProperty(self, property: str, label: str, format: str) -> ListEntryBuilder: ...
    def AddItemScriptBlock(self, scriptBlock: str, label: str, format: str) -> ListEntryBuilder: ...
    def EndEntry(self) -> ListControlBuilder: ...


class LoopFlowException(FlowControlException):
    @property
    def Label(self) -> str: ...


class MetadataException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class MethodException(ExtendedTypeSystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class MethodInvocationException(MethodException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ModuleAccessMode:
    ReadWrite = 0
    ReadOnly = 1
    Constant = 2


class ModuleIntrinsics(Object):
    def GetModulePath(currentProcessModulePath: str, hklmMachineModulePath: str, hkcuUserModulePath: str) -> str: ...


class ModuleType:
    Script = 0
    Binary = 1
    Manifest = 2
    Cim = 3
    Workflow = 4


class OutputTypeAttribute(CmdletMetadataAttribute):
    @overload
    def __init__(self, type: Set(Type)): ...
    @overload
    def __init__(self, type: Set(str)): ...
    @property
    def ParameterSetName(self) -> Set(str): ...
    @property
    def ProviderCmdlet(self) -> str: ...
    @property
    def Type(self) -> Set(PSTypeName): ...
    @ParameterSetName.setter
    def ParameterSetName(self, value: Set(str)) -> None: ...
    @ProviderCmdlet.setter
    def ProviderCmdlet(self, value: str) -> None: ...


class PagingParameters(Object):
    @property
    def First(self) -> UInt64: ...
    @property
    def IncludeTotalCount(self) -> SwitchParameter: ...
    @property
    def Skip(self) -> UInt64: ...
    def NewTotalCount(self, totalCount: UInt64, accuracy: float) -> PSObject: ...
    @First.setter
    def First(self, value: UInt64) -> None: ...
    @IncludeTotalCount.setter
    def IncludeTotalCount(self, value: SwitchParameter) -> None: ...
    @Skip.setter
    def Skip(self, value: UInt64) -> None: ...


class ParameterAttribute(ParsingBaseAttribute):
    def __init__(self): ...
    @property
    def DontShow(self) -> bool: ...
    @property
    def HelpMessage(self) -> str: ...
    @property
    def HelpMessageBaseName(self) -> str: ...
    @property
    def HelpMessageResourceId(self) -> str: ...
    @property
    def Mandatory(self) -> bool: ...
    @property
    def ParameterSetName(self) -> str: ...
    @property
    def Position(self) -> int: ...
    @property
    def ValueFromPipeline(self) -> bool: ...
    @property
    def ValueFromPipelineByPropertyName(self) -> bool: ...
    @property
    def ValueFromRemainingArguments(self) -> bool: ...
    @DontShow.setter
    def DontShow(self, value: bool) -> None: ...
    @HelpMessage.setter
    def HelpMessage(self, value: str) -> None: ...
    @HelpMessageBaseName.setter
    def HelpMessageBaseName(self, value: str) -> None: ...
    @HelpMessageResourceId.setter
    def HelpMessageResourceId(self, value: str) -> None: ...
    @Mandatory.setter
    def Mandatory(self, value: bool) -> None: ...
    @ParameterSetName.setter
    def ParameterSetName(self, value: str) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...
    @ValueFromPipeline.setter
    def ValueFromPipeline(self, value: bool) -> None: ...
    @ValueFromPipelineByPropertyName.setter
    def ValueFromPipelineByPropertyName(self, value: bool) -> None: ...
    @ValueFromRemainingArguments.setter
    def ValueFromRemainingArguments(self, value: bool) -> None: ...


class ParameterBindingException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def CommandInvocation(self) -> InvocationInfo: ...
    @property
    def ErrorId(self) -> str: ...
    @property
    def Line(self) -> Int64: ...
    @property
    def Message(self) -> str: ...
    @property
    def Offset(self) -> Int64: ...
    @property
    def ParameterName(self) -> str: ...
    @property
    def ParameterType(self) -> Type: ...
    @property
    def TypeSpecified(self) -> Type: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class ParameterMetadata(Object):
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, other: ParameterMetadata): ...
    @overload
    def __init__(self, name: str, parameterType: Type): ...
    @property
    def Aliases(self) -> Collection: ...
    @property
    def Attributes(self) -> Collection: ...
    @property
    def IsDynamic(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParameterSets(self) -> Dictionary: ...
    @property
    def ParameterType(self) -> Type: ...
    @property
    def SwitchParameter(self) -> bool: ...
    def GetParameterMetadata(type: Type) -> Dictionary: ...
    @IsDynamic.setter
    def IsDynamic(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ParameterType.setter
    def ParameterType(self, value: Type) -> None: ...


class ParameterSetMetadata(Object):
    @property
    def HelpMessage(self) -> str: ...
    @property
    def HelpMessageBaseName(self) -> str: ...
    @property
    def HelpMessageResourceId(self) -> str: ...
    @property
    def IsMandatory(self) -> bool: ...
    @property
    def Position(self) -> int: ...
    @property
    def ValueFromPipeline(self) -> bool: ...
    @property
    def ValueFromPipelineByPropertyName(self) -> bool: ...
    @property
    def ValueFromRemainingArguments(self) -> bool: ...
    @HelpMessage.setter
    def HelpMessage(self, value: str) -> None: ...
    @HelpMessageBaseName.setter
    def HelpMessageBaseName(self, value: str) -> None: ...
    @HelpMessageResourceId.setter
    def HelpMessageResourceId(self, value: str) -> None: ...
    @IsMandatory.setter
    def IsMandatory(self, value: bool) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...
    @ValueFromPipeline.setter
    def ValueFromPipeline(self, value: bool) -> None: ...
    @ValueFromPipelineByPropertyName.setter
    def ValueFromPipelineByPropertyName(self, value: bool) -> None: ...
    @ValueFromRemainingArguments.setter
    def ValueFromRemainingArguments(self, value: bool) -> None: ...


class ParentContainsErrorRecordException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wrapperException: Exception): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def Message(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class ParseException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, errors: Set(ParseError)): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def Errors(self) -> Set(ParseError): ...
    @property
    def Message(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class ParsingMetadataException(MetadataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class PathInfo(Object):
    @property
    def Drive(self) -> PSDriveInfo: ...
    @property
    def Path(self) -> str: ...
    @property
    def Provider(self) -> ProviderInfo: ...
    @property
    def ProviderPath(self) -> str: ...
    def ToString(self) -> str: ...


class PathInfoStack:
    @property
    def Name(self) -> str: ...


class PathIntrinsics(Object):
    def Combine(self, parent: str, child: str) -> str: ...
    def CurrentProviderLocation(self, providerName: str) -> PathInfo: ...
    @property
    def CurrentFileSystemLocation(self) -> PathInfo: ...
    @property
    def CurrentLocation(self) -> PathInfo: ...
    def GetResolvedProviderPathFromProviderPath(self, path: str, providerId: str) -> Collection: ...
    def GetResolvedProviderPathFromPSPath(self, path: str) -> Tuple[Collection, ProviderInfo]: ...
    def GetResolvedPSPathFromPSPath(self, path: str) -> Collection: ...
    @overload
    def GetUnresolvedProviderPathFromPSPath(self, path: str) -> str: ...
    @overload
    def GetUnresolvedProviderPathFromPSPath(self, path: str) -> Tuple[str, ProviderInfo, PSDriveInfo]: ...
    def IsProviderQualified(self, path: str) -> bool: ...
    def IsPSAbsolute(self, path: str) -> Tuple[bool, str]: ...
    def IsValid(self, path: str) -> bool: ...
    def LocationStack(self, stackName: str) -> PathInfoStack: ...
    def NormalizeRelativePath(self, path: str, basePath: str) -> str: ...
    def ParseChildName(self, path: str) -> str: ...
    def ParseParent(self, path: str, root: str) -> str: ...
    def PopLocation(self, stackName: str) -> PathInfo: ...
    def PushCurrentLocation(self, stackName: str) -> None: ...
    def SetDefaultLocationStack(self, stackName: str) -> PathInfoStack: ...
    def SetLocation(self, path: str) -> PathInfo: ...


class PipelineClosedException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class PipelineDepthException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def CallDepth(self) -> int: ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PipelineStoppedException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class PowerShell(Object):
    def add_InvocationStateChanged(self, value: EventHandler) -> None: ...
    def AddArgument(self, value: Object) -> PowerShell: ...
    @overload
    def AddCommand(self, cmdlet: str) -> PowerShell: ...
    @overload
    def AddCommand(self, commandInfo: CommandInfo) -> PowerShell: ...
    @overload
    def AddCommand(self, cmdlet: str, useLocalScope: bool) -> PowerShell: ...
    @overload
    def AddParameter(self, parameterName: str) -> PowerShell: ...
    @overload
    def AddParameter(self, parameterName: str, value: Object) -> PowerShell: ...
    @overload
    def AddParameters(self, parameters: IDictionary) -> PowerShell: ...
    @overload
    def AddParameters(self, parameters: IList) -> PowerShell: ...
    @overload
    def AddScript(self, script: str) -> PowerShell: ...
    @overload
    def AddScript(self, script: str, useLocalScope: bool) -> PowerShell: ...
    def AddStatement(self) -> PowerShell: ...
    def AsJobProxy(self) -> PSJobProxy: ...
    @overload
    def BeginInvoke(self) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, input: PSDataCollection) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, input: PSDataCollection, output: PSDataCollection) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, input: PSDataCollection, settings: PSInvocationSettings, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, input: PSDataCollection, output: PSDataCollection, settings: PSInvocationSettings, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginStop(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def Connect(self) -> Collection: ...
    @overload
    def ConnectAsync(self) -> IAsyncResult: ...
    @overload
    def ConnectAsync(self, output: PSDataCollection, invocationCallback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def Create() -> PowerShell: ...
    @overload
    def Create(runspace: RunspaceMode) -> PowerShell: ...
    @overload
    def Create(initialSessionState: InitialSessionState) -> PowerShell: ...
    def CreateNestedPowerShell(self) -> PowerShell: ...
    def Dispose(self) -> None: ...
    def EndInvoke(self, asyncResult: IAsyncResult) -> PSDataCollection: ...
    def EndStop(self, asyncResult: IAsyncResult) -> None: ...
    @property
    def Commands(self) -> PSCommand: ...
    @property
    def HadErrors(self) -> bool: ...
    @property
    def HistoryString(self) -> str: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def InvocationStateInfo(self) -> PSInvocationStateInfo: ...
    @property
    def IsNested(self) -> bool: ...
    @property
    def IsRunspaceOwner(self) -> bool: ...
    @property
    def Runspace(self) -> Runspace: ...
    @property
    def RunspacePool(self) -> RunspacePool: ...
    @property
    def Streams(self) -> PSDataStreams: ...
    @overload
    def Invoke(self) -> Collection: ...
    @overload
    def Invoke(self) -> Collection: ...
    @overload
    def Invoke(self, input: IEnumerable) -> Collection: ...
    @overload
    def Invoke(self, input: IEnumerable) -> Collection: ...
    @overload
    def Invoke(self, input: IEnumerable, settings: PSInvocationSettings) -> Collection: ...
    @overload
    def Invoke(self, input: IEnumerable, output: IList) -> None: ...
    @overload
    def Invoke(self, input: IEnumerable, settings: PSInvocationSettings) -> Collection: ...
    @overload
    def Invoke(self, input: PSDataCollection, output: PSDataCollection, settings: PSInvocationSettings) -> None: ...
    @overload
    def Invoke(self, input: IEnumerable, output: IList, settings: PSInvocationSettings) -> None: ...
    def remove_InvocationStateChanged(self, value: EventHandler) -> None: ...
    @Commands.setter
    def Commands(self, value: PSCommand) -> None: ...
    @HistoryString.setter
    def HistoryString(self, value: str) -> None: ...
    @Runspace.setter
    def Runspace(self, value: Runspace) -> None: ...
    @RunspacePool.setter
    def RunspacePool(self, value: RunspacePool) -> None: ...
    def Stop(self) -> None: ...




class PowerShellStreamType:
    Input = 0
    Output = 1
    Error = 2
    Warning = 3
    Verbose = 4
    Debug = 5
    Progress = 6
    Information = 7


class ProgressRecord(Object):
    def __init__(self, activityId: int, activity: str, statusDescription: str): ...
    @property
    def Activity(self) -> str: ...
    @property
    def ActivityId(self) -> int: ...
    @property
    def CurrentOperation(self) -> str: ...
    @property
    def ParentActivityId(self) -> int: ...
    @property
    def PercentComplete(self) -> int: ...
    @property
    def RecordType(self) -> ProgressRecordType: ...
    @property
    def SecondsRemaining(self) -> int: ...
    @property
    def StatusDescription(self) -> str: ...
    @Activity.setter
    def Activity(self, value: str) -> None: ...
    @CurrentOperation.setter
    def CurrentOperation(self, value: str) -> None: ...
    @ParentActivityId.setter
    def ParentActivityId(self, value: int) -> None: ...
    @PercentComplete.setter
    def PercentComplete(self, value: int) -> None: ...
    @RecordType.setter
    def RecordType(self, value: ProgressRecordType) -> None: ...
    @SecondsRemaining.setter
    def SecondsRemaining(self, value: int) -> None: ...
    @StatusDescription.setter
    def StatusDescription(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ProgressRecordType:
    Processing = 0
    Completed = 1


class PropertyCmdletProviderIntrinsics(Object):
    @overload
    def Clear(self, path: str, propertyToClear: Collection) -> None: ...
    @overload
    def Clear(self, path: Set(str), propertyToClear: Collection, force: bool, literalPath: bool) -> None: ...
    @overload
    def Copy(self, sourcePath: str, sourceProperty: str, destinationPath: str, destinationProperty: str) -> Collection: ...
    @overload
    def Copy(self, sourcePath: Set(str), sourceProperty: str, destinationPath: str, destinationProperty: str, force: bool, literalPath: bool) -> Collection: ...
    @overload
    def Get(self, path: str, providerSpecificPickList: Collection) -> Collection: ...
    @overload
    def Get(self, path: Set(str), providerSpecificPickList: Collection, literalPath: bool) -> Collection: ...
    @overload
    def Move(self, sourcePath: str, sourceProperty: str, destinationPath: str, destinationProperty: str) -> Collection: ...
    @overload
    def Move(self, sourcePath: Set(str), sourceProperty: str, destinationPath: str, destinationProperty: str, force: bool, literalPath: bool) -> Collection: ...
    @overload
    def New(self, path: str, propertyName: str, propertyTypeName: str, value: Object) -> Collection: ...
    @overload
    def New(self, path: Set(str), propertyName: str, propertyTypeName: str, value: Object, force: bool, literalPath: bool) -> Collection: ...
    @overload
    def Remove(self, path: str, propertyName: str) -> None: ...
    @overload
    def Remove(self, path: Set(str), propertyName: str, force: bool, literalPath: bool) -> None: ...
    @overload
    def Rename(self, path: str, sourceProperty: str, destinationProperty: str) -> Collection: ...
    @overload
    def Rename(self, path: Set(str), sourceProperty: str, destinationProperty: str, force: bool, literalPath: bool) -> Collection: ...
    @overload
    def Set(self, path: str, propertyValue: PSObject) -> Collection: ...
    @overload
    def Set(self, path: Set(str), propertyValue: PSObject, force: bool, literalPath: bool) -> Collection: ...


class PropertyNotFoundException(ExtendedTypeSystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ProviderCmdlet(Object):
    pass


class ProviderInfo(Object):
    @property
    def Capabilities(self) -> ProviderCapabilities: ...
    @property
    def Description(self) -> str: ...
    @property
    def Drives(self) -> Collection: ...
    @property
    def HelpFile(self) -> str: ...
    @property
    def Home(self) -> str: ...
    @property
    def ImplementingType(self) -> Type: ...
    @property
    def Module(self) -> PSModuleInfo: ...
    @property
    def ModuleName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def PSSnapIn(self) -> PSSnapInInfo: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Home.setter
    def Home(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ProviderIntrinsics(Object):
    @property
    def ChildItem(self) -> ChildItemCmdletProviderIntrinsics: ...
    @property
    def Content(self) -> ContentCmdletProviderIntrinsics: ...
    @property
    def Item(self) -> ItemCmdletProviderIntrinsics: ...
    @property
    def Property(self) -> PropertyCmdletProviderIntrinsics: ...
    @property
    def SecurityDescriptor(self) -> SecurityDescriptorCmdletProviderIntrinsics: ...


class ProviderInvocationException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    @property
    def Message(self) -> str: ...
    @property
    def ProviderInfo(self) -> ProviderInfo: ...


class ProviderNameAmbiguousException(ProviderNotFoundException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def PossibleMatches(self) -> ReadOnlyCollection: ...


class ProviderNotFoundException(SessionStateException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ProxyCommand(Object):
    @overload
    def Create(commandMetadata: CommandMetadata) -> str: ...
    @overload
    def Create(commandMetadata: CommandMetadata, helpComment: str) -> str: ...
    @overload
    def Create(commandMetadata: CommandMetadata, helpComment: str, generateDynamicParameters: bool) -> str: ...
    def GetBegin(commandMetadata: CommandMetadata) -> str: ...
    def GetCmdletBindingAttribute(commandMetadata: CommandMetadata) -> str: ...
    def GetDynamicParam(commandMetadata: CommandMetadata) -> str: ...
    def GetEnd(commandMetadata: CommandMetadata) -> str: ...
    def GetHelpComments(help: PSObject) -> str: ...
    def GetParamBlock(commandMetadata: CommandMetadata) -> str: ...
    def GetProcess(commandMetadata: CommandMetadata) -> str: ...


class PSAdaptedProperty(PSProperty):
    def __init__(self, name: str, tag: Object): ...
    def Copy(self) -> PSMemberInfo: ...
    @property
    def BaseObject(self) -> Object: ...
    @property
    def Tag(self) -> Object: ...


class PSAliasProperty(PSPropertyInfo):
    @overload
    def __init__(self, name: str, referencedMemberName: str): ...
    @overload
    def __init__(self, name: str, referencedMemberName: str, conversionType: Type): ...
    def Copy(self) -> PSMemberInfo: ...
    @property
    def ConversionType(self) -> Type: ...
    @property
    def IsGettable(self) -> bool: ...
    @property
    def IsSettable(self) -> bool: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def ReferencedMemberName(self) -> str: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class PSArgumentException(ArgumentException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, paramName: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    @property
    def Message(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PSArgumentNullException(ArgumentNullException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, paramName: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, paramName: str, message: str): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    @property
    def Message(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PSArgumentOutOfRangeException(ArgumentOutOfRangeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, paramName: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, paramName: str, actualValue: Object, message: str): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PSChildJobProxy(Job2):
    def add_JobDataAdded(self, value: EventHandler) -> None: ...
    @property
    def HasMoreData(self) -> bool: ...
    @property
    def Location(self) -> str: ...
    @property
    def StatusMessage(self) -> str: ...
    def remove_JobDataAdded(self, value: EventHandler) -> None: ...
    def ResumeJob(self) -> None: ...
    def ResumeJobAsync(self) -> None: ...
    def StartJob(self) -> None: ...
    def StartJobAsync(self) -> None: ...
    @overload
    def StopJob(self) -> None: ...
    @overload
    def StopJob(self, force: bool, reason: str) -> None: ...
    @overload
    def StopJobAsync(self) -> None: ...
    @overload
    def StopJobAsync(self, force: bool, reason: str) -> None: ...
    @overload
    def SuspendJob(self) -> None: ...
    @overload
    def SuspendJob(self, force: bool, reason: str) -> None: ...
    @overload
    def SuspendJobAsync(self) -> None: ...
    @overload
    def SuspendJobAsync(self, force: bool, reason: str) -> None: ...
    def UnblockJob(self) -> None: ...
    def UnblockJobAsync(self) -> None: ...


class PSClassInfo(Object):
    @property
    def HelpFile(self) -> str: ...
    @property
    def Members(self) -> ReadOnlyCollection: ...
    @property
    def Module(self) -> PSModuleInfo: ...
    @property
    def Name(self) -> str: ...
    def UpdateMembers(self, members: List[PSClassMemberInfo]) -> None: ...


class PSClassMemberInfo(Object):
    @property
    def DefaultValue(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeName(self) -> str: ...


class PSCmdlet(Cmdlet):
    def CurrentProviderLocation(self, providerId: str) -> PathInfo: ...
    @property
    def Events(self) -> PSEventManager: ...
    @property
    def Host(self) -> PSHost: ...
    @property
    def InvokeCommand(self) -> CommandInvocationIntrinsics: ...
    @property
    def InvokeProvider(self) -> ProviderIntrinsics: ...
    @property
    def JobManager(self) -> JobManager: ...
    @property
    def JobRepository(self) -> JobRepository: ...
    @property
    def MyInvocation(self) -> InvocationInfo: ...
    @property
    def PagingParameters(self) -> PagingParameters: ...
    @property
    def ParameterSetName(self) -> str: ...
    @property
    def SessionState(self) -> SessionState: ...
    def GetResolvedProviderPathFromPSPath(self, path: str) -> Tuple[Collection, ProviderInfo]: ...
    def GetUnresolvedProviderPathFromPSPath(self, path: str) -> str: ...
    @overload
    def GetVariableValue(self, name: str) -> Object: ...
    @overload
    def GetVariableValue(self, name: str, defaultValue: Object) -> Object: ...


class PSCodeMethod(PSMethodInfo):
    def __init__(self, name: str, codeReference: MethodInfo): ...
    def Copy(self) -> PSMemberInfo: ...
    @property
    def CodeReference(self) -> MethodInfo: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def OverloadDefinitions(self) -> Collection: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    def Invoke(self, arguments: Set(Object)) -> Object: ...
    def ToString(self) -> str: ...


class PSCodeProperty(PSPropertyInfo):
    @overload
    def __init__(self, name: str, getterCodeReference: MethodInfo): ...
    @overload
    def __init__(self, name: str, getterCodeReference: MethodInfo, setterCodeReference: MethodInfo): ...
    def Copy(self) -> PSMemberInfo: ...
    @property
    def GetterCodeReference(self) -> MethodInfo: ...
    @property
    def IsGettable(self) -> bool: ...
    @property
    def IsSettable(self) -> bool: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def SetterCodeReference(self) -> MethodInfo: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class PSCommand(Object):
    def __init__(self): ...
    def AddArgument(self, value: Object) -> PSCommand: ...
    @overload
    def AddCommand(self, command: str) -> PSCommand: ...
    @overload
    def AddCommand(self, command: Command) -> PSCommand: ...
    @overload
    def AddCommand(self, cmdlet: str, useLocalScope: bool) -> PSCommand: ...
    @overload
    def AddParameter(self, parameterName: str) -> PSCommand: ...
    @overload
    def AddParameter(self, parameterName: str, value: Object) -> PSCommand: ...
    @overload
    def AddScript(self, script: str) -> PSCommand: ...
    @overload
    def AddScript(self, script: str, useLocalScope: bool) -> PSCommand: ...
    def AddStatement(self) -> PSCommand: ...
    def Clear(self) -> None: ...
    def Clone(self) -> PSCommand: ...
    @property
    def Commands(self) -> CommandCollection: ...


class PSControl(Object):
    @property
    def GroupBy(self) -> PSControlGroupBy: ...
    @property
    def OutOfBand(self) -> bool: ...
    @GroupBy.setter
    def GroupBy(self, value: PSControlGroupBy) -> None: ...
    @OutOfBand.setter
    def OutOfBand(self, value: bool) -> None: ...


class PSControlGroupBy(Object):
    def __init__(self): ...
    @property
    def CustomControl(self) -> CustomControl: ...
    @property
    def Expression(self) -> DisplayEntry: ...
    @property
    def Label(self) -> str: ...
    @CustomControl.setter
    def CustomControl(self, value: CustomControl) -> None: ...
    @Expression.setter
    def Expression(self, value: DisplayEntry) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...


class PSCredential(Object):
    @overload
    def __init__(self, pso: PSObject): ...
    @overload
    def __init__(self, userName: str, password: SecureString): ...
    @property
    def Empty() -> PSCredential: ...
    @property
    def GetSymmetricEncryptionKeyDelegate() -> GetSymmetricEncryptionKey: ...
    @property
    def Password(self) -> SecureString: ...
    @property
    def UserName(self) -> str: ...
    def GetNetworkCredential(self) -> NetworkCredential: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def op_Explicit(credential: PSCredential) -> NetworkCredential: ...
    @GetSymmetricEncryptionKeyDelegate.setter
    def GetSymmetricEncryptionKeyDelegate(value: GetSymmetricEncryptionKey) -> None: ...


class PSCredentialTypes:
    Generic = 1
    Domain = 2
    Default = 3


class PSCredentialUIOptions:
    #None = 0
    ValidateUserNameSyntax = 1
    Default = 1
    AlwaysPrompt = 2
    ReadOnlyUserName = 3


class PSCustomObject(Object):
    def ToString(self) -> str: ...




class PSDataStreams(Object):
    def ClearStreams(self) -> None: ...
    @property
    def Debug(self) -> PSDataCollection: ...
    @property
    def Error(self) -> PSDataCollection: ...
    @property
    def Information(self) -> PSDataCollection: ...
    @property
    def Progress(self) -> PSDataCollection: ...
    @property
    def Verbose(self) -> PSDataCollection: ...
    @property
    def Warning(self) -> PSDataCollection: ...
    @Debug.setter
    def Debug(self, value: PSDataCollection) -> None: ...
    @Error.setter
    def Error(self, value: PSDataCollection) -> None: ...
    @Information.setter
    def Information(self, value: PSDataCollection) -> None: ...
    @Progress.setter
    def Progress(self, value: PSDataCollection) -> None: ...
    @Verbose.setter
    def Verbose(self, value: PSDataCollection) -> None: ...
    @Warning.setter
    def Warning(self, value: PSDataCollection) -> None: ...


class PSDebugContext(Object):
    def __init__(self, invocationInfo: InvocationInfo, breakpoints: List): ...
    @property
    def Breakpoints(self) -> Set(Breakpoint): ...
    @property
    def InvocationInfo(self) -> InvocationInfo: ...


class PSDefaultValueAttribute(ParsingBaseAttribute):
    def __init__(self): ...
    @property
    def Help(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Help.setter
    def Help(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class PSDriveInfo(Object):
    @overload
    def __init__(self, name: str, provider: ProviderInfo, root: str, description: str, credential: PSCredential): ...
    @overload
    def __init__(self, name: str, provider: ProviderInfo, root: str, description: str, credential: PSCredential, displayRoot: str): ...
    @overload
    def __init__(self, name: str, provider: ProviderInfo, root: str, description: str, credential: PSCredential, persist: bool): ...
    @overload
    def CompareTo(self, drive: PSDriveInfo) -> int: ...
    @overload
    def CompareTo(self, obj: Object) -> int: ...
    @overload
    def Equals(self, drive: PSDriveInfo) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Credential(self) -> PSCredential: ...
    @property
    def CurrentLocation(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def DisplayRoot(self) -> str: ...
    @property
    def MaximumSize(self) -> Nullable: ...
    @property
    def Name(self) -> str: ...
    @property
    def Provider(self) -> ProviderInfo: ...
    @property
    def Root(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(drive1: PSDriveInfo, drive2: PSDriveInfo) -> bool: ...
    def op_GreaterThan(drive1: PSDriveInfo, drive2: PSDriveInfo) -> bool: ...
    def op_Inequality(drive1: PSDriveInfo, drive2: PSDriveInfo) -> bool: ...
    def op_LessThan(drive1: PSDriveInfo, drive2: PSDriveInfo) -> bool: ...
    @CurrentLocation.setter
    def CurrentLocation(self, value: str) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class PSDynamicMember(PSMemberInfo):
    def Copy(self) -> PSMemberInfo: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class PSEngineEvent(Object):
    pass


class PSEvent(PSMemberInfo):
    def Copy(self) -> PSMemberInfo: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class PSEventArgs(EventArgs):
    @property
    def ComputerName(self) -> str: ...
    @property
    def EventIdentifier(self) -> int: ...
    @property
    def MessageData(self) -> PSObject: ...
    @property
    def RunspaceId(self) -> Guid: ...
    @property
    def Sender(self) -> Object: ...
    @property
    def SourceArgs(self) -> Set(Object): ...
    @property
    def SourceEventArgs(self) -> EventArgs: ...
    @property
    def SourceIdentifier(self) -> str: ...
    @property
    def TimeGenerated(self) -> DateTime: ...


class PSEventArgsCollection(Object):
    def __init__(self): ...
    def add_PSEventReceived(self, value: PSEventReceivedEventHandler) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> PSEventArgs: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def remove_PSEventReceived(self, value: PSEventReceivedEventHandler) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class PSEventHandler(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, eventManager: PSEventManager, sender: Object, sourceIdentifier: str, extraData: PSObject): ...


class PSEventJob(Job):
    def __init__(self, eventManager: PSEventManager, subscriber: PSEventSubscriber, action: ScriptBlock, name: str): ...
    @property
    def HasMoreData(self) -> bool: ...
    @property
    def Location(self) -> str: ...
    @property
    def Module(self) -> PSModuleInfo: ...
    @property
    def StatusMessage(self) -> str: ...
    def StopJob(self) -> None: ...


class PSEventManager(Object):
    @overload
    def GenerateEvent(self, sourceIdentifier: str, sender: Object, args: Set(Object), extraData: PSObject) -> PSEventArgs: ...
    @overload
    def GenerateEvent(self, sourceIdentifier: str, sender: Object, args: Set(Object), extraData: PSObject, processInCurrentThread: bool, waitForCompletionInCurrentThread: bool) -> PSEventArgs: ...
    @property
    def ReceivedEvents(self) -> PSEventArgsCollection: ...
    @property
    def Subscribers(self) -> List: ...
    def GetEventSubscribers(self, sourceIdentifier: str) -> Iterable[PSEventSubscriber]: ...
    @overload
    def SubscribeEvent(self, source: Object, eventName: str, sourceIdentifier: str, data: PSObject, action: ScriptBlock, supportEvent: bool, forwardEvent: bool) -> PSEventSubscriber: ...
    @overload
    def SubscribeEvent(self, source: Object, eventName: str, sourceIdentifier: str, data: PSObject, handlerDelegate: PSEventReceivedEventHandler, supportEvent: bool, forwardEvent: bool) -> PSEventSubscriber: ...
    @overload
    def SubscribeEvent(self, source: Object, eventName: str, sourceIdentifier: str, data: PSObject, action: ScriptBlock, supportEvent: bool, forwardEvent: bool, maxTriggerCount: int) -> PSEventSubscriber: ...
    @overload
    def SubscribeEvent(self, source: Object, eventName: str, sourceIdentifier: str, data: PSObject, handlerDelegate: PSEventReceivedEventHandler, supportEvent: bool, forwardEvent: bool, maxTriggerCount: int) -> PSEventSubscriber: ...
    def UnsubscribeEvent(self, subscriber: PSEventSubscriber) -> None: ...


class PSEventReceivedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PSEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PSEventArgs) -> None: ...


class PSEventSubscriber(Object):
    def add_Unsubscribed(self, value: PSEventUnsubscribedEventHandler) -> None: ...
    @overload
    def Equals(self, other: PSEventSubscriber) -> bool: ...
    @property
    def Action(self) -> PSEventJob: ...
    @property
    def EventName(self) -> str: ...
    @property
    def ForwardEvent(self) -> bool: ...
    @property
    def HandlerDelegate(self) -> PSEventReceivedEventHandler: ...
    @property
    def SourceIdentifier(self) -> str: ...
    @property
    def SourceObject(self) -> Object: ...
    @property
    def SubscriptionId(self) -> int: ...
    @property
    def SupportEvent(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def remove_Unsubscribed(self, value: PSEventUnsubscribedEventHandler) -> None: ...
    @SubscriptionId.setter
    def SubscriptionId(self, value: int) -> None: ...


class PSEventUnsubscribedEventArgs(EventArgs):
    @property
    def EventSubscriber(self) -> PSEventSubscriber: ...


class PSEventUnsubscribedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PSEventUnsubscribedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PSEventUnsubscribedEventArgs) -> None: ...


class PSInstaller(Installer):
    def Install(self, stateSaver: IDictionary) -> None: ...
    def Rollback(self, savedState: IDictionary) -> None: ...
    def Uninstall(self, savedState: IDictionary) -> None: ...


class PSInvalidCastException(InvalidCastException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PSInvalidOperationException(InvalidOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PSInvocationSettings(Object):
    def __init__(self): ...
    @property
    def AddToHistory(self) -> bool: ...
    @property
    def ApartmentState(self) -> ApartmentState: ...
    @property
    def ErrorActionPreference(self) -> Nullable: ...
    @property
    def ExposeFlowControlExceptions(self) -> bool: ...
    @property
    def FlowImpersonationPolicy(self) -> bool: ...
    @property
    def Host(self) -> PSHost: ...
    @property
    def RemoteStreamOptions(self) -> RemoteStreamOptions: ...
    @AddToHistory.setter
    def AddToHistory(self, value: bool) -> None: ...
    @ApartmentState.setter
    def ApartmentState(self, value: ApartmentState) -> None: ...
    @ErrorActionPreference.setter
    def ErrorActionPreference(self, value: Nullable) -> None: ...
    @ExposeFlowControlExceptions.setter
    def ExposeFlowControlExceptions(self, value: bool) -> None: ...
    @FlowImpersonationPolicy.setter
    def FlowImpersonationPolicy(self, value: bool) -> None: ...
    @Host.setter
    def Host(self, value: PSHost) -> None: ...
    @RemoteStreamOptions.setter
    def RemoteStreamOptions(self, value: RemoteStreamOptions) -> None: ...


class PSInvocationState:
    NotStarted = 0
    Running = 1
    Stopping = 2
    Stopped = 3
    Completed = 4
    Failed = 5
    Disconnected = 6


class PSInvocationStateChangedEventArgs(EventArgs):
    @property
    def InvocationStateInfo(self) -> PSInvocationStateInfo: ...


class PSInvocationStateInfo(Object):
    @property
    def Reason(self) -> Exception: ...
    @property
    def State(self) -> PSInvocationState: ...


class PSJobProxy(Job2):
    def add_RemoveJobCompleted(self, value: EventHandler) -> None: ...
    @overload
    def Create(runspace: Runspace) -> ICollection: ...
    @overload
    def Create(runspacePool: RunspacePool) -> ICollection: ...
    @overload
    def Create(runspacePool: RunspacePool, filter: Hashtable) -> ICollection: ...
    @overload
    def Create(runspace: Runspace, filter: Hashtable) -> ICollection: ...
    @overload
    def Create(runspacePool: RunspacePool, filter: Hashtable, receiveImmediately: bool) -> ICollection: ...
    @overload
    def Create(runspace: Runspace, filter: Hashtable, receiveImmediately: bool) -> ICollection: ...
    @overload
    def Create(runspace: Runspace, filter: Hashtable, dataAdded: EventHandler, stateChanged: EventHandler) -> ICollection: ...
    @overload
    def Create(runspacePool: RunspacePool, filter: Hashtable, dataAdded: EventHandler, stateChanged: EventHandler) -> ICollection: ...
    @property
    def HasMoreData(self) -> bool: ...
    @property
    def Location(self) -> str: ...
    @property
    def RemoteJobInstanceId(self) -> Guid: ...
    @property
    def RemoveRemoteJobOnCompletion(self) -> bool: ...
    @property
    def Runspace(self) -> Runspace: ...
    @property
    def RunspacePool(self) -> RunspacePool: ...
    @property
    def StatusMessage(self) -> str: ...
    @overload
    def ReceiveJob(self) -> None: ...
    @overload
    def ReceiveJob(self, dataAdded: EventHandler, stateChanged: EventHandler) -> None: ...
    def remove_RemoveJobCompleted(self, value: EventHandler) -> None: ...
    @overload
    def RemoveJob(self, removeRemoteJob: bool) -> None: ...
    @overload
    def RemoveJob(self, removeRemoteJob: bool, force: bool) -> None: ...
    @overload
    def RemoveJobAsync(self, removeRemoteJob: bool) -> None: ...
    @overload
    def RemoveJobAsync(self, removeRemoteJob: bool, force: bool) -> None: ...
    def ResumeJob(self) -> None: ...
    def ResumeJobAsync(self) -> None: ...
    @RemoveRemoteJobOnCompletion.setter
    def RemoveRemoteJobOnCompletion(self, value: bool) -> None: ...
    @Runspace.setter
    def Runspace(self, value: Runspace) -> None: ...
    @RunspacePool.setter
    def RunspacePool(self, value: RunspacePool) -> None: ...
    @overload
    def StartJob(self) -> None: ...
    @overload
    def StartJob(self, input: PSDataCollection) -> None: ...
    @overload
    def StartJob(self, dataAdded: EventHandler, stateChanged: EventHandler, input: PSDataCollection) -> None: ...
    @overload
    def StartJobAsync(self) -> None: ...
    @overload
    def StartJobAsync(self, input: PSDataCollection) -> None: ...
    @overload
    def StartJobAsync(self, dataAdded: EventHandler, stateChanged: EventHandler, input: PSDataCollection) -> None: ...
    @overload
    def StopJob(self) -> None: ...
    @overload
    def StopJob(self, force: bool, reason: str) -> None: ...
    @overload
    def StopJobAsync(self) -> None: ...
    @overload
    def StopJobAsync(self, force: bool, reason: str) -> None: ...
    @overload
    def SuspendJob(self) -> None: ...
    @overload
    def SuspendJob(self, force: bool, reason: str) -> None: ...
    @overload
    def SuspendJobAsync(self) -> None: ...
    @overload
    def SuspendJobAsync(self, force: bool, reason: str) -> None: ...
    def UnblockJob(self) -> None: ...
    def UnblockJobAsync(self) -> None: ...


class PSJobStartEventArgs(EventArgs):
    def __init__(self, job: Job, debugger: Debugger, isAsync: bool): ...
    @property
    def Debugger(self) -> Debugger: ...
    @property
    def IsAsync(self) -> bool: ...
    @property
    def Job(self) -> Job: ...


class PSLanguageMode:
    FullLanguage = 0
    RestrictedLanguage = 1
    NoLanguage = 2
    ConstrainedLanguage = 3


class PSListModifier(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, replacementItems: Object): ...
    @overload
    def __init__(self, hash: Hashtable): ...
    @overload
    def __init__(self, removeItems: Collection, addItems: Collection): ...
    @overload
    def ApplyTo(self, collectionToUpdate: IList) -> None: ...
    @overload
    def ApplyTo(self, collectionToUpdate: Object) -> None: ...
    @property
    def Add(self) -> Collection: ...
    @property
    def Remove(self) -> Collection: ...
    @property
    def Replace(self) -> Collection: ...




class PSMemberInfo(Object):
    def Copy(self) -> PSMemberInfo: ...
    @property
    def IsInstance(self) -> bool: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...




class PSMemberSet(PSMemberInfo):
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, members: Iterable[PSMemberInfo]): ...
    def Copy(self) -> PSMemberInfo: ...
    @property
    def InheritMembers(self) -> bool: ...
    @property
    def Members(self) -> PSMemberInfoCollection: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def Methods(self) -> PSMemberInfoCollection: ...
    @property
    def Properties(self) -> PSMemberInfoCollection: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class PSMemberTypes:
    AliasProperty = 1
    CodeProperty = 2
    Property = 4
    NoteProperty = 8
    ScriptProperty = 16
    Properties = 31
    PropertySet = 32
    Method = 64
    CodeMethod = 128
    ScriptMethod = 256
    Methods = 448
    ParameterizedProperty = 512
    MemberSet = 1024
    Event = 2048
    Dynamic = 4096
    All = 8191


class PSMemberViewTypes:
    Extended = 1
    Adapted = 2
    Base = 4
    All = 7


class PSMethod(PSMethodInfo):
    def Copy(self) -> PSMemberInfo: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def OverloadDefinitions(self) -> Collection: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    def Invoke(self, arguments: Set(Object)) -> Object: ...
    def ToString(self) -> str: ...


class PSMethodInfo(PSMemberInfo):
    @property
    def OverloadDefinitions(self) -> Collection: ...
    @property
    def Value(self) -> Object: ...
    def Invoke(self, arguments: Set(Object)) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class PSModuleAutoLoadingPreference:
    #None = 0
    ModuleQualified = 1
    All = 2


class PSModuleInfo(Object):
    @overload
    def __init__(self, linkToGlobal: bool): ...
    @overload
    def __init__(self, scriptBlock: ScriptBlock): ...
    def AsCustomObject(self) -> PSObject: ...
    def ClearAppDomainLevelModulePathCache() -> None: ...
    def Clone(self) -> PSModuleInfo: ...
    @property
    def AccessMode(self) -> ModuleAccessMode: ...
    @property
    def Author(self) -> str: ...
    @property
    def ClrVersion(self) -> Version: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def CompatiblePSEditions(self) -> Iterable[str]: ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Definition(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def DotNetFrameworkVersion(self) -> Version: ...
    @property
    def ExportedAliases(self) -> Dictionary: ...
    @property
    def ExportedCmdlets(self) -> Dictionary: ...
    @property
    def ExportedCommands(self) -> Dictionary: ...
    @property
    def ExportedDscResources(self) -> ReadOnlyCollection: ...
    @property
    def ExportedFormatFiles(self) -> ReadOnlyCollection: ...
    @property
    def ExportedFunctions(self) -> Dictionary: ...
    @property
    def ExportedTypeFiles(self) -> ReadOnlyCollection: ...
    @property
    def ExportedVariables(self) -> Dictionary: ...
    @property
    def ExportedWorkflows(self) -> Dictionary: ...
    @property
    def FileList(self) -> Iterable[str]: ...
    @property
    def Guid(self) -> Guid: ...
    @property
    def HelpInfoUri(self) -> str: ...
    @property
    def IconUri(self) -> Uri: ...
    @property
    def ImplementingAssembly(self) -> Assembly: ...
    @property
    def LicenseUri(self) -> Uri: ...
    @property
    def LogPipelineExecutionDetails(self) -> bool: ...
    @property
    def ModuleBase(self) -> str: ...
    @property
    def ModuleList(self) -> Iterable[Object]: ...
    @property
    def ModuleType(self) -> ModuleType: ...
    @property
    def Name(self) -> str: ...
    @property
    def NestedModules(self) -> ReadOnlyCollection: ...
    @property
    def OnRemove(self) -> ScriptBlock: ...
    @property
    def Path(self) -> str: ...
    @property
    def PowerShellHostName(self) -> str: ...
    @property
    def PowerShellHostVersion(self) -> Version: ...
    @property
    def PowerShellVersion(self) -> Version: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def PrivateData(self) -> Object: ...
    @property
    def ProcessorArchitecture(self) -> ProcessorArchitecture: ...
    @property
    def ProjectUri(self) -> Uri: ...
    @property
    def ReleaseNotes(self) -> str: ...
    @property
    def RepositorySourceLocation(self) -> Uri: ...
    @property
    def RequiredAssemblies(self) -> Iterable[str]: ...
    @property
    def RequiredModules(self) -> ReadOnlyCollection: ...
    @property
    def RootModule(self) -> str: ...
    @property
    def Scripts(self) -> Iterable[str]: ...
    @property
    def SessionState(self) -> SessionState: ...
    @property
    def Tags(self) -> Iterable[str]: ...
    @property
    def UseAppDomainLevelModuleCache() -> bool: ...
    @property
    def Version(self) -> Version: ...
    def GetExportedTypeDefinitions(self) -> ReadOnlyDictionary: ...
    def GetVariableFromCallersModule(self, variableName: str) -> PSVariable: ...
    def Invoke(self, sb: ScriptBlock, args: Set(Object)) -> Object: ...
    def NewBoundScriptBlock(self, scriptBlockToBind: ScriptBlock) -> ScriptBlock: ...
    @AccessMode.setter
    def AccessMode(self, value: ModuleAccessMode) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @LogPipelineExecutionDetails.setter
    def LogPipelineExecutionDetails(self, value: bool) -> None: ...
    @OnRemove.setter
    def OnRemove(self, value: ScriptBlock) -> None: ...
    @PrivateData.setter
    def PrivateData(self, value: Object) -> None: ...
    @SessionState.setter
    def SessionState(self, value: SessionState) -> None: ...
    @UseAppDomainLevelModuleCache.setter
    def UseAppDomainLevelModuleCache(value: bool) -> None: ...
    def ToString(self) -> str: ...


class PSNoteProperty(PSPropertyInfo):
    def __init__(self, name: str, value: Object): ...
    def Copy(self) -> PSMemberInfo: ...
    @property
    def IsGettable(self) -> bool: ...
    @property
    def IsSettable(self) -> bool: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class PSNotImplementedException(NotImplementedException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PSNotSupportedException(NotSupportedException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PSObject(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, obj: Object): ...
    def AsPSObject(obj: Object) -> PSObject: ...
    def CompareTo(self, obj: Object) -> int: ...
    def Copy(self) -> PSObject: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def BaseObject(self) -> Object: ...
    @property
    def ImmediateBaseObject(self) -> Object: ...
    @property
    def Members(self) -> PSMemberInfoCollection: ...
    @property
    def Methods(self) -> PSMemberInfoCollection: ...
    @property
    def Properties(self) -> PSMemberInfoCollection: ...
    @property
    def TypeNames(self) -> Collection: ...
    def GetHashCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def op_Implicit(valueToConvert: bool) -> PSObject: ...
    @overload
    def op_Implicit(valueToConvert: Hashtable) -> PSObject: ...
    @overload
    def op_Implicit(valueToConvert: str) -> PSObject: ...
    @overload
    def op_Implicit(valueToConvert: int) -> PSObject: ...
    @overload
    def op_Implicit(valueToConvert: float) -> PSObject: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, format: str, formatProvider: IFormatProvider) -> str: ...


class PSObjectDisposedException(ObjectDisposedException):
    @overload
    def __init__(self, objectName: str): ...
    @overload
    def __init__(self, objectName: str, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PSObjectPropertyDescriptor(PropertyDescriptor):
    def CanResetValue(self, component: Object) -> bool: ...
    @property
    def Attributes(self) -> AttributeCollection: ...
    @property
    def ComponentType(self) -> Type: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def PropertyType(self) -> Type: ...
    def GetValue(self, component: Object) -> Object: ...
    def ResetValue(self, component: Object) -> None: ...
    def SetValue(self, component: Object, value: Object) -> None: ...
    def ShouldSerializeValue(self, component: Object) -> bool: ...


class PSObjectTypeDescriptionProvider(TypeDescriptionProvider):
    def __init__(self): ...
    def add_GettingValueException(self, value: EventHandler) -> None: ...
    def add_SettingValueException(self, value: EventHandler) -> None: ...
    @overload
    def GetTypeDescriptor(self, objectType: Type, instance: Object) -> ICustomTypeDescriptor: ...
    def remove_GettingValueException(self, value: EventHandler) -> None: ...
    def remove_SettingValueException(self, value: EventHandler) -> None: ...


class PSObjectTypeDescriptor(CustomTypeDescriptor):
    def __init__(self, instance: PSObject): ...
    def add_GettingValueException(self, value: EventHandler) -> None: ...
    def add_SettingValueException(self, value: EventHandler) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Instance(self) -> PSObject: ...
    def GetAttributes(self) -> AttributeCollection: ...
    def GetClassName(self) -> str: ...
    def GetComponentName(self) -> str: ...
    def GetConverter(self) -> TypeConverter: ...
    def GetDefaultEvent(self) -> EventDescriptor: ...
    def GetDefaultProperty(self) -> PropertyDescriptor: ...
    def GetEditor(self, editorBaseType: Type) -> Object: ...
    @overload
    def GetEvents(self) -> EventDescriptorCollection: ...
    @overload
    def GetEvents(self, attributes: Set(Attribute)) -> EventDescriptorCollection: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetProperties(self) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    def GetPropertyOwner(self, pd: PropertyDescriptor) -> Object: ...
    def remove_GettingValueException(self, value: EventHandler) -> None: ...
    def remove_SettingValueException(self, value: EventHandler) -> None: ...


class PSParameterizedProperty(PSMethodInfo):
    def Copy(self) -> PSMemberInfo: ...
    @property
    def IsGettable(self) -> bool: ...
    @property
    def IsSettable(self) -> bool: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def OverloadDefinitions(self) -> Collection: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    def Invoke(self, arguments: Set(Object)) -> Object: ...
    def InvokeSet(self, valueToSet: Object, arguments: Set(Object)) -> None: ...
    def ToString(self) -> str: ...


class PSParseError(Object):
    @property
    def Message(self) -> str: ...
    @property
    def Token(self) -> PSToken: ...


class PSParser(Object):
    @overload
    def Tokenize(script: str) -> Tuple[Collection, Collection]: ...
    @overload
    def Tokenize(script: Set(Object)) -> Tuple[Collection, Collection]: ...


class PSPrimitiveDictionary(Hashtable):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Hashtable): ...
    @overload
    def Add(self, key: Object, value: Object) -> None: ...
    @overload
    def Add(self, key: str, value: SByte) -> None: ...
    @overload
    def Add(self, key: str, value: Set(SByte)) -> None: ...
    @overload
    def Add(self, key: str, value: Single) -> None: ...
    @overload
    def Add(self, key: str, value: Set(Single)) -> None: ...
    @overload
    def Add(self, key: str, value: str) -> None: ...
    @overload
    def Add(self, key: str, value: Set(str)) -> None: ...
    @overload
    def Add(self, key: str, value: TimeSpan) -> None: ...
    @overload
    def Add(self, key: str, value: UInt16) -> None: ...
    @overload
    def Add(self, key: str, value: Set(UInt16)) -> None: ...
    @overload
    def Add(self, key: str, value: UInt32) -> None: ...
    @overload
    def Add(self, key: str, value: Set(UInt32)) -> None: ...
    @overload
    def Add(self, key: str, value: UInt64) -> None: ...
    @overload
    def Add(self, key: str, value: Set(UInt64)) -> None: ...
    @overload
    def Add(self, key: str, value: Uri) -> None: ...
    @overload
    def Add(self, key: str, value: Set(Uri)) -> None: ...
    @overload
    def Add(self, key: str, value: Version) -> None: ...
    @overload
    def Add(self, key: str, value: Set(Version)) -> None: ...
    @overload
    def Add(self, key: str, value: PSPrimitiveDictionary) -> None: ...
    @overload
    def Add(self, key: str, value: Set(PSPrimitiveDictionary)) -> None: ...
    @overload
    def Add(self, key: str, value: Set(Int64)) -> None: ...
    @overload
    def Add(self, key: str, value: Int64) -> None: ...
    @overload
    def Add(self, key: str, value: Set(TimeSpan)) -> None: ...
    @overload
    def Add(self, key: str, value: int) -> None: ...
    @overload
    def Add(self, key: str, value: Set(int)) -> None: ...
    @overload
    def Add(self, key: str, value: bool) -> None: ...
    @overload
    def Add(self, key: str, value: Set(bool)) -> None: ...
    @overload
    def Add(self, key: str, value: Set(Byte)) -> None: ...
    @overload
    def Add(self, key: str, value: Char) -> None: ...
    @overload
    def Add(self, key: str, value: Set(Char)) -> None: ...
    @overload
    def Add(self, key: str, value: DateTime) -> None: ...
    @overload
    def Add(self, key: str, value: Byte) -> None: ...
    @overload
    def Add(self, key: str, value: Set(DateTime)) -> None: ...
    @overload
    def Add(self, key: str, value: Decimal) -> None: ...
    @overload
    def Add(self, key: str, value: Set(Decimal)) -> None: ...
    @overload
    def Add(self, key: str, value: float) -> None: ...
    @overload
    def Add(self, key: str, value: Set(float)) -> None: ...
    @overload
    def Add(self, key: str, value: Guid) -> None: ...
    @overload
    def Add(self, key: str, value: Set(Guid)) -> None: ...
    def Clone(self) -> Object: ...
    @property
    def Item(self, key: Object) -> Object: ...
    @property
    def Item(self, key: str) -> Object: ...
    @Item.setter
    def Item(self, key: Object, value: Object) -> None: ...
    @Item.setter
    def Item(self, key: str, value: Object) -> None: ...


class PSProperty(PSPropertyInfo):
    def Copy(self) -> PSMemberInfo: ...
    @property
    def IsGettable(self) -> bool: ...
    @property
    def IsSettable(self) -> bool: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class PSPropertyAdapter(Object):
    def GetProperties(self, baseObject: Object) -> Collection: ...
    def GetProperty(self, baseObject: Object, propertyName: str) -> PSAdaptedProperty: ...
    def GetPropertyTypeName(self, adaptedProperty: PSAdaptedProperty) -> str: ...
    def GetPropertyValue(self, adaptedProperty: PSAdaptedProperty) -> Object: ...
    def GetTypeNameHierarchy(self, baseObject: Object) -> Collection: ...
    def IsGettable(self, adaptedProperty: PSAdaptedProperty) -> bool: ...
    def IsSettable(self, adaptedProperty: PSAdaptedProperty) -> bool: ...
    def SetPropertyValue(self, adaptedProperty: PSAdaptedProperty, value: Object) -> None: ...


class PSPropertyInfo(PSMemberInfo):
    @property
    def IsGettable(self) -> bool: ...
    @property
    def IsSettable(self) -> bool: ...


class PSPropertySet(PSMemberInfo):
    def __init__(self, name: str, referencedPropertyNames: Iterable[str]): ...
    def Copy(self) -> PSMemberInfo: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def ReferencedPropertyNames(self) -> Collection: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class PSReference(Object):
    def __init__(self, value: Object): ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class PSScriptMethod(PSMethodInfo):
    def __init__(self, name: str, script: ScriptBlock): ...
    def Copy(self) -> PSMemberInfo: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def OverloadDefinitions(self) -> Collection: ...
    @property
    def Script(self) -> ScriptBlock: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    def Invoke(self, arguments: Set(Object)) -> Object: ...
    def ToString(self) -> str: ...


class PSScriptProperty(PSPropertyInfo):
    @overload
    def __init__(self, name: str, getterScript: ScriptBlock): ...
    @overload
    def __init__(self, name: str, getterScript: ScriptBlock, setterScript: ScriptBlock): ...
    def Copy(self) -> PSMemberInfo: ...
    @property
    def GetterScript(self) -> ScriptBlock: ...
    @property
    def IsGettable(self) -> bool: ...
    @property
    def IsSettable(self) -> bool: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def SetterScript(self) -> ScriptBlock: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class PSSecurityException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    @property
    def Message(self) -> str: ...


class PSSerializer(Object):
    def Deserialize(source: str) -> Object: ...
    def DeserializeAsList(source: str) -> Set(Object): ...
    @overload
    def Serialize(source: Object) -> str: ...
    @overload
    def Serialize(source: Object, depth: int) -> str: ...


class PSSessionTypeOption(Object):
    pass


class PSSnapIn(PSSnapInInstaller):
    @property
    def Formats(self) -> Set(str): ...
    @property
    def Types(self) -> Set(str): ...


class PSSnapInInfo(Object):
    @property
    def ApplicationBase(self) -> str: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Formats(self) -> Collection: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def LogPipelineExecutionDetails(self) -> bool: ...
    @property
    def ModuleName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def PSVersion(self) -> Version: ...
    @property
    def Types(self) -> Collection: ...
    @property
    def Vendor(self) -> str: ...
    @property
    def Version(self) -> Version: ...
    @LogPipelineExecutionDetails.setter
    def LogPipelineExecutionDetails(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class PSSnapInInstaller(PSInstaller):
    @property
    def Description(self) -> str: ...
    @property
    def DescriptionResource(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Vendor(self) -> str: ...
    @property
    def VendorResource(self) -> str: ...


class PSSnapInSpecification(Object):
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> Version: ...


class PSToken(Object):
    @property
    def Content(self) -> str: ...
    @property
    def EndColumn(self) -> int: ...
    @property
    def EndLine(self) -> int: ...
    @property
    def Length(self) -> int: ...
    @property
    def Start(self) -> int: ...
    @property
    def StartColumn(self) -> int: ...
    @property
    def StartLine(self) -> int: ...
    @property
    def Type(self) -> PSTokenType: ...
    def GetPSTokenType(token: Token) -> PSTokenType: ...


class PSTokenType:
    Unknown = 0
    Command = 1
    CommandParameter = 2
    CommandArgument = 3
    Number = 4
    String = 5
    Variable = 6
    Member = 7
    LoopLabel = 8
    Attribute = 9
    Type = 10
    Operator = 11
    GroupStart = 12
    GroupEnd = 13
    Keyword = 14
    Comment = 15
    StatementSeparator = 16
    NewLine = 17
    LineContinuation = 18
    Position = 19


class PSTraceSource(Object):
    @property
    def Attributes(self) -> StringDictionary: ...
    @property
    def Description(self) -> str: ...
    @property
    def Listeners(self) -> TraceListenerCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Options(self) -> PSTraceSourceOptions: ...
    @property
    def Switch(self) -> SourceSwitch: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Options.setter
    def Options(self, value: PSTraceSourceOptions) -> None: ...
    @Switch.setter
    def Switch(self, value: SourceSwitch) -> None: ...


class PSTraceSourceOptions:
    #None = 0
    Constructor = 1
    Dispose = 2
    Finalizer = 4
    Method = 8
    Property = 16
    Delegates = 32
    Events = 64
    Exception = 128
    Lock = 256
    Error = 512
    Errors = 640
    Warning = 1024
    Verbose = 2048
    WriteLine = 4096
    Data = 6167
    Scope = 8192
    ExecutionFlow = 8303
    Assert = 16384
    All = 32767


class PSTransaction(Object):
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dispose(self, disposing: bool) -> None: ...
    @property
    def RollbackPreference(self) -> RollbackSeverity: ...
    @property
    def Status(self) -> PSTransactionStatus: ...
    @property
    def SubscriberCount(self) -> int: ...
    @SubscriberCount.setter
    def SubscriberCount(self, value: int) -> None: ...


class PSTransactionContext(Object):
    def Dispose(self) -> None: ...


class PSTransactionStatus:
    RolledBack = 0
    Committed = 1
    Active = 2


class PSTransportOption(Object):
    def Clone(self) -> Object: ...


class PSTypeConverter(Object):
    @overload
    def CanConvertFrom(self, sourceValue: Object, destinationType: Type) -> bool: ...
    @overload
    def CanConvertFrom(self, sourceValue: PSObject, destinationType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, sourceValue: Object, destinationType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, sourceValue: PSObject, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, sourceValue: Object, destinationType: Type, formatProvider: IFormatProvider, ignoreCase: bool) -> Object: ...
    @overload
    def ConvertFrom(self, sourceValue: PSObject, destinationType: Type, formatProvider: IFormatProvider, ignoreCase: bool) -> Object: ...
    @overload
    def ConvertTo(self, sourceValue: Object, destinationType: Type, formatProvider: IFormatProvider, ignoreCase: bool) -> Object: ...
    @overload
    def ConvertTo(self, sourceValue: PSObject, destinationType: Type, formatProvider: IFormatProvider, ignoreCase: bool) -> Object: ...


class PSTypeName(Object):
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, typeDefinitionAst: TypeDefinitionAst): ...
    @overload
    def __init__(self, typeName: ITypeName): ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @property
    def TypeDefinitionAst(self) -> TypeDefinitionAst: ...
    def ToString(self) -> str: ...


class PSTypeNameAttribute(Attribute):
    def __init__(self, psTypeName: str): ...
    @property
    def PSTypeName(self) -> str: ...


class PSVariable(Object):
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, value: Object): ...
    @overload
    def __init__(self, name: str, value: Object, options: ScopedItemOptions): ...
    @overload
    def __init__(self, name: str, value: Object, options: ScopedItemOptions, attributes: Collection): ...
    @property
    def Attributes(self) -> Collection: ...
    @property
    def Description(self) -> str: ...
    @property
    def Module(self) -> PSModuleInfo: ...
    @property
    def ModuleName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Options(self) -> ScopedItemOptions: ...
    @property
    def Value(self) -> Object: ...
    @property
    def Visibility(self) -> SessionStateEntryVisibility: ...
    def IsValidValue(self, value: Object) -> bool: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Options.setter
    def Options(self, value: ScopedItemOptions) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    @Visibility.setter
    def Visibility(self, value: SessionStateEntryVisibility) -> None: ...


class PSVariableIntrinsics(Object):
    def Get(self, name: str) -> PSVariable: ...
    @overload
    def GetValue(self, name: str) -> Object: ...
    @overload
    def GetValue(self, name: str, defaultValue: Object) -> Object: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, variable: PSVariable) -> None: ...
    @overload
    def Set(self, variable: PSVariable) -> None: ...
    @overload
    def Set(self, name: str, value: Object) -> None: ...


class PSVariableProperty(PSNoteProperty):
    def __init__(self, variable: PSVariable): ...
    def Copy(self) -> PSMemberInfo: ...
    @property
    def IsGettable(self) -> bool: ...
    @property
    def IsSettable(self) -> bool: ...
    @property
    def MemberType(self) -> PSMemberTypes: ...
    @property
    def TypeNameOfValue(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...




class RedirectedException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class RegisterArgumentCompleterCommand(PSCmdlet):
    def __init__(self): ...
    @property
    def CommandName(self) -> Set(str): ...
    @property
    def Native(self) -> SwitchParameter: ...
    @property
    def ParameterName(self) -> str: ...
    @property
    def ScriptBlock(self) -> ScriptBlock: ...
    @CommandName.setter
    def CommandName(self, value: Set(str)) -> None: ...
    @Native.setter
    def Native(self, value: SwitchParameter) -> None: ...
    @ParameterName.setter
    def ParameterName(self, value: str) -> None: ...
    @ScriptBlock.setter
    def ScriptBlock(self, value: ScriptBlock) -> None: ...


class RemoteCommandInfo(CommandInfo):
    @property
    def Definition(self) -> str: ...
    @property
    def OutputType(self) -> ReadOnlyCollection: ...


class RemoteException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    @property
    def SerializedRemoteException(self) -> PSObject: ...
    @property
    def SerializedRemoteInvocationInfo(self) -> PSObject: ...


class RemoteStreamOptions:
    AddInvocationInfoToErrorRecord = 1
    AddInvocationInfoToWarningRecord = 2
    AddInvocationInfoToDebugRecord = 4
    AddInvocationInfoToVerboseRecord = 8
    AddInvocationInfo = 15


class RemotingBehavior:
    #None = 0
    PowerShell = 1
    Custom = 2


class RemotingCapability:
    #None = 0
    PowerShell = 1
    SupportedByCommand = 2
    OwnedByCommand = 3




class ResolutionPurpose:
    Encryption = 0
    Decryption = 1


class ReturnContainers:
    ReturnMatchingContainers = 0
    ReturnAllContainers = 1


class RollbackSeverity:
    Error = 0
    TerminatingError = 1
    Never = 2


class RunspaceInvoke(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, runspaceConfiguration: RunspaceConfiguration): ...
    @overload
    def __init__(self, consoleFilePath: str): ...
    @overload
    def __init__(self, runspace: Runspace): ...
    def Dispose(self) -> None: ...
    @overload
    def Invoke(self, script: str) -> Collection: ...
    @overload
    def Invoke(self, script: str, input: IEnumerable) -> Collection: ...
    @overload
    def Invoke(self, script: str, input: IEnumerable) -> Tuple[Collection, IList]: ...


class RunspaceMode:
    CurrentRunspace = 0
    NewRunspace = 1


class RunspacePoolStateInfo(Object):
    def __init__(self, state: RunspacePoolState, reason: Exception): ...
    @property
    def Reason(self) -> Exception: ...
    @property
    def State(self) -> RunspacePoolState: ...


class RunspaceRepository:
    @property
    def Runspaces(self) -> List: ...


class RuntimeDefinedParameter(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, parameterType: Type, attributes: Collection): ...
    @property
    def Attributes(self) -> Collection: ...
    @property
    def IsSet(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParameterType(self) -> Type: ...
    @property
    def Value(self) -> Object: ...
    @IsSet.setter
    def IsSet(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ParameterType.setter
    def ParameterType(self, value: Type) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class RuntimeDefinedParameterDictionary:
    def __init__(self): ...
    @property
    def Data(self) -> Object: ...
    @property
    def HelpFile(self) -> str: ...
    @Data.setter
    def Data(self, value: Object) -> None: ...
    @HelpFile.setter
    def HelpFile(self, value: str) -> None: ...


class RuntimeException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception, errorRecord: ErrorRecord): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    @property
    def WasThrownFromThrowStatement(self) -> bool: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @WasThrownFromThrowStatement.setter
    def WasThrownFromThrowStatement(self, value: bool) -> None: ...


class ScopedItemOptions:
    #None = 0
    ReadOnly = 1
    Constant = 2
    Private = 4
    AllScope = 8
    Unspecified = 16


class ScriptBlock(Object):
    def CheckRestrictedLanguage(self, allowedCommands: Iterable[str], allowedVariables: Iterable[str], allowEnvironmentVariables: bool) -> None: ...
    def Create(script: str) -> ScriptBlock: ...
    @property
    def Ast(self) -> Ast: ...
    @property
    def Attributes(self) -> List: ...
    @property
    def DebuggerHidden(self) -> bool: ...
    @property
    def File(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsConfiguration(self) -> bool: ...
    @property
    def IsFilter(self) -> bool: ...
    @property
    def Module(self) -> PSModuleInfo: ...
    @property
    def StartPosition(self) -> PSToken: ...
    def GetNewClosure(self) -> ScriptBlock: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetPowerShell(self, args: Set(Object)) -> PowerShell: ...
    @overload
    def GetPowerShell(self, isTrustedInput: bool, args: Set(Object)) -> PowerShell: ...
    @overload
    def GetPowerShell(self, variables: Dictionary, args: Set(Object)) -> PowerShell: ...
    @overload
    def GetPowerShell(self, variables: Dictionary, args: Set(Object)) -> Tuple[PowerShell, Dictionary]: ...
    @overload
    def GetPowerShell(self, variables: Dictionary, isTrustedInput: bool, args: Set(Object)) -> Tuple[PowerShell, Dictionary]: ...
    @overload
    def GetSteppablePipeline(self) -> SteppablePipeline: ...
    @overload
    def GetSteppablePipeline(self, commandOrigin: CommandOrigin) -> SteppablePipeline: ...
    @overload
    def GetSteppablePipeline(self, commandOrigin: CommandOrigin, args: Set(Object)) -> SteppablePipeline: ...
    def Invoke(self, args: Set(Object)) -> Collection: ...
    def InvokeReturnAsIs(self, args: Set(Object)) -> Object: ...
    @overload
    def InvokeWithContext(self, functionsToDefine: Dictionary, variablesToDefine: List, args: Set(Object)) -> Collection: ...
    @overload
    def InvokeWithContext(self, functionsToDefine: IDictionary, variablesToDefine: List, args: Set(Object)) -> Collection: ...
    @DebuggerHidden.setter
    def DebuggerHidden(self, value: bool) -> None: ...
    @IsConfiguration.setter
    def IsConfiguration(self, value: bool) -> None: ...
    @IsFilter.setter
    def IsFilter(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class ScriptBlockToPowerShellNotSupportedException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ScriptCallDepthException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def CallDepth(self) -> int: ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class ScriptInfo(CommandInfo):
    @property
    def Definition(self) -> str: ...
    @property
    def OutputType(self) -> ReadOnlyCollection: ...
    @property
    def ScriptBlock(self) -> ScriptBlock: ...
    def ToString(self) -> str: ...


class ScriptRequiresException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def CommandName(self) -> str: ...
    @property
    def MissingPSSnapIns(self) -> ReadOnlyCollection: ...
    @property
    def RequiresPSVersion(self) -> Version: ...
    @property
    def RequiresShellId(self) -> str: ...
    @property
    def RequiresShellPath(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class SecurityDescriptorCmdletProviderIntrinsics(Object):
    def Get(self, path: str, includeSections: AccessControlSections) -> Collection: ...
    def NewFromPath(self, path: str, includeSections: AccessControlSections) -> ObjectSecurity: ...
    def NewOfType(self, providerId: str, type: str, includeSections: AccessControlSections) -> ObjectSecurity: ...
    def Set(self, path: str, sd: ObjectSecurity) -> Collection: ...


class SessionCapabilities:
    RemoteServer = 1
    WorkflowServer = 2
    Language = 4


class SessionState(Object):
    def __init__(self): ...
    @property
    def Applications(self) -> List: ...
    @property
    def Drive(self) -> DriveManagementIntrinsics: ...
    @property
    def InvokeCommand(self) -> CommandInvocationIntrinsics: ...
    @property
    def InvokeProvider(self) -> ProviderIntrinsics: ...
    @property
    def LanguageMode(self) -> PSLanguageMode: ...
    @property
    def Module(self) -> PSModuleInfo: ...
    @property
    def Path(self) -> PathIntrinsics: ...
    @property
    def Provider(self) -> CmdletProviderManagementIntrinsics: ...
    @property
    def PSVariable(self) -> PSVariableIntrinsics: ...
    @property
    def Scripts(self) -> List: ...
    @property
    def UseFullLanguageModeInDebugger(self) -> bool: ...
    @overload
    def IsVisible(origin: CommandOrigin, valueToCheck: Object) -> bool: ...
    @overload
    def IsVisible(origin: CommandOrigin, variable: PSVariable) -> bool: ...
    @overload
    def IsVisible(origin: CommandOrigin, commandInfo: CommandInfo) -> bool: ...
    @LanguageMode.setter
    def LanguageMode(self, value: PSLanguageMode) -> None: ...
    def ThrowIfNotVisible(origin: CommandOrigin, valueToCheck: Object) -> None: ...


class SessionStateCategory:
    Variable = 0
    Alias = 1
    Function = 2
    Filter = 3
    Drive = 4
    CmdletProvider = 5
    Scope = 6
    Command = 7
    Resource = 8
    Cmdlet = 9


class SessionStateEntryVisibility:
    Public = 0
    Private = 1


class SessionStateException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorRecord(self) -> ErrorRecord: ...
    @property
    def ItemName(self) -> str: ...
    @property
    def SessionStateCategory(self) -> SessionStateCategory: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class SessionStateOverflowException(SessionStateException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class SessionStateUnauthorizedAccessException(SessionStateException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class SettingValueExceptionEventArgs(EventArgs):
    @property
    def Exception(self) -> Exception: ...
    @property
    def ShouldThrow(self) -> bool: ...
    @ShouldThrow.setter
    def ShouldThrow(self, value: bool) -> None: ...


class SetValueException(ExtendedTypeSystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class SetValueInvocationException(SetValueException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ShouldProcessReason:
    #None = 0
    WhatIf = 1


class Signature(Object):
    @property
    def IsOSBinary(self) -> bool: ...
    @property
    def Path(self) -> str: ...
    @property
    def SignatureType(self) -> SignatureType: ...
    @property
    def SignerCertificate(self) -> X509Certificate2: ...
    @property
    def Status(self) -> SignatureStatus: ...
    @property
    def StatusMessage(self) -> str: ...
    @property
    def TimeStamperCertificate(self) -> X509Certificate2: ...


class SignatureStatus:
    Valid = 0
    UnknownError = 1
    NotSigned = 2
    HashMismatch = 3
    NotTrusted = 4
    NotSupportedFileFormat = 5
    Incompatible = 6


class SignatureType:
    #None = 0
    Authenticode = 1
    Catalog = 2


class SigningOption:
    AddOnlyCertificate = 0
    AddFullCertificateChain = 1
    AddFullCertificateChainExceptRoot = 2
    Default = 2


class SplitOptions:
    SimpleMatch = 1
    RegexMatch = 2
    CultureInvariant = 4
    IgnorePatternWhitespace = 8
    Multiline = 16
    Singleline = 32
    IgnoreCase = 64
    ExplicitCapture = 128


class SteppablePipeline(Object):
    @overload
    def Begin(self, expectInput: bool) -> None: ...
    @overload
    def Begin(self, command: InternalCommand) -> None: ...
    @overload
    def Begin(self, expectInput: bool, contextToRedirectTo: EngineIntrinsics) -> None: ...
    def Dispose(self) -> None: ...
    def End(self) -> Array: ...
    @overload
    def Process(self) -> Array: ...
    @overload
    def Process(self, input: Object) -> Array: ...
    @overload
    def Process(self, input: PSObject) -> Array: ...


class SupportsWildcardsAttribute(ParsingBaseAttribute):
    def __init__(self): ...


class SwitchParameter(ValueType):
    def __init__(self, isPresent: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsPresent(self) -> bool: ...
    @property
    def Present() -> SwitchParameter: ...
    def GetHashCode(self) -> int: ...
    @overload
    def op_Equality(first: SwitchParameter, second: SwitchParameter) -> bool: ...
    @overload
    def op_Equality(first: SwitchParameter, second: bool) -> bool: ...
    @overload
    def op_Equality(first: bool, second: SwitchParameter) -> bool: ...
    @overload
    def op_Implicit(switchParameter: SwitchParameter) -> bool: ...
    @overload
    def op_Implicit(value: bool) -> SwitchParameter: ...
    @overload
    def op_Inequality(first: SwitchParameter, second: SwitchParameter) -> bool: ...
    @overload
    def op_Inequality(first: SwitchParameter, second: bool) -> bool: ...
    @overload
    def op_Inequality(first: bool, second: SwitchParameter) -> bool: ...
    def ToBool(self) -> bool: ...
    def ToString(self) -> str: ...


class TableControl(PSControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tableControlRow: TableControlRow): ...
    @overload
    def __init__(self, tableControlRow: TableControlRow, tableControlColumnHeaders: Iterable[TableControlColumnHeader]): ...
    def Create(outOfBand: bool, autoSize: bool, hideTableHeaders: bool) -> TableControlBuilder: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def Headers(self) -> List: ...
    @property
    def HideTableHeaders(self) -> bool: ...
    @property
    def Rows(self) -> List: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @Headers.setter
    def Headers(self, value: List) -> None: ...
    @HideTableHeaders.setter
    def HideTableHeaders(self, value: bool) -> None: ...
    @Rows.setter
    def Rows(self, value: List) -> None: ...


class TableControlBuilder(Object):
    def AddHeader(self, alignment: Alignment, width: int, label: str) -> TableControlBuilder: ...
    def EndTable(self) -> TableControl: ...
    def GroupByProperty(self, property: str, customControl: CustomControl, label: str) -> TableControlBuilder: ...
    def GroupByScriptBlock(self, scriptBlock: str, customControl: CustomControl, label: str) -> TableControlBuilder: ...
    def StartRowDefinition(self, wrap: bool, entrySelectedByType: Iterable[str], entrySelectedByCondition: Iterable[DisplayEntry]) -> TableRowDefinitionBuilder: ...


class TableControlColumn(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, alignment: Alignment, entry: DisplayEntry): ...
    @property
    def Alignment(self) -> Alignment: ...
    @property
    def DisplayEntry(self) -> DisplayEntry: ...
    @property
    def FormatString(self) -> str: ...
    @Alignment.setter
    def Alignment(self, value: Alignment) -> None: ...
    @DisplayEntry.setter
    def DisplayEntry(self, value: DisplayEntry) -> None: ...
    def ToString(self) -> str: ...


class TableControlColumnHeader(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, label: str, width: int, alignment: Alignment): ...
    @property
    def Alignment(self) -> Alignment: ...
    @property
    def Label(self) -> str: ...
    @property
    def Width(self) -> int: ...
    @Alignment.setter
    def Alignment(self, value: Alignment) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...


class TableControlRow(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, columns: Iterable[TableControlColumn]): ...
    @property
    def Columns(self) -> List: ...
    @property
    def SelectedBy(self) -> EntrySelectedBy: ...
    @property
    def Wrap(self) -> bool: ...
    @Columns.setter
    def Columns(self, value: List) -> None: ...
    @Wrap.setter
    def Wrap(self, value: bool) -> None: ...


class TableRowDefinitionBuilder(Object):
    def AddPropertyColumn(self, propertyName: str, alignment: Alignment, format: str) -> TableRowDefinitionBuilder: ...
    def AddScriptBlockColumn(self, scriptBlock: str, alignment: Alignment, format: str) -> TableRowDefinitionBuilder: ...
    def EndRowDefinition(self) -> TableControlBuilder: ...


class TerminateException(FlowControlException):
    def __init__(self): ...


class ValidateArgumentsAttribute(CmdletMetadataAttribute):
    pass


class ValidateCountAttribute(ValidateArgumentsAttribute):
    def __init__(self, minLength: int, maxLength: int): ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def MinLength(self) -> int: ...


class ValidateDriveAttribute(ValidateArgumentsAttribute):
    def __init__(self, validRootDrives: Set(str)): ...


class ValidateEnumeratedArgumentsAttribute(ValidateArgumentsAttribute):
    pass


class ValidateLengthAttribute(ValidateEnumeratedArgumentsAttribute):
    def __init__(self, minLength: int, maxLength: int): ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def MinLength(self) -> int: ...


class ValidateNotNullAttribute(ValidateArgumentsAttribute):
    def __init__(self): ...


class ValidateNotNullOrEmptyAttribute(ValidateArgumentsAttribute):
    def __init__(self): ...


class ValidatePatternAttribute(ValidateEnumeratedArgumentsAttribute):
    def __init__(self, regexPattern: str): ...
    @property
    def Options(self) -> RegexOptions: ...
    @property
    def RegexPattern(self) -> str: ...
    @Options.setter
    def Options(self, value: RegexOptions) -> None: ...


class ValidateRangeAttribute(ValidateEnumeratedArgumentsAttribute):
    def __init__(self, minRange: Object, maxRange: Object): ...
    @property
    def MaxRange(self) -> Object: ...
    @property
    def MinRange(self) -> Object: ...


class ValidateScriptAttribute(ValidateEnumeratedArgumentsAttribute):
    def __init__(self, scriptBlock: ScriptBlock): ...
    @property
    def ScriptBlock(self) -> ScriptBlock: ...


class ValidateSetAttribute(ValidateEnumeratedArgumentsAttribute):
    def __init__(self, validValues: Set(str)): ...
    @property
    def IgnoreCase(self) -> bool: ...
    @property
    def ValidValues(self) -> List[str]: ...
    @IgnoreCase.setter
    def IgnoreCase(self, value: bool) -> None: ...


class ValidateTrustedDataAttribute(ValidateArgumentsAttribute):
    def __init__(self): ...


class ValidateUserDriveAttribute(ValidateDriveAttribute):
    def __init__(self): ...


class ValidationMetadataException(MetadataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class VariableAccessMode:
    Read = 0
    Write = 1
    ReadWrite = 2


class VariableBreakpoint(Breakpoint):
    @property
    def AccessMode(self) -> VariableAccessMode: ...
    @property
    def Variable(self) -> str: ...
    def ToString(self) -> str: ...


class VariablePath(Object):
    def __init__(self, path: str): ...
    @property
    def DriveName(self) -> str: ...
    @property
    def IsDriveQualified(self) -> bool: ...
    @property
    def IsGlobal(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def IsScript(self) -> bool: ...
    @property
    def IsUnqualified(self) -> bool: ...
    @property
    def IsUnscopedVariable(self) -> bool: ...
    @property
    def IsVariable(self) -> bool: ...
    @property
    def UserPath(self) -> str: ...
    def ToString(self) -> str: ...


class VerboseRecord(InformationalRecord):
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, record: PSObject): ...


class VerbsCommon(Object):
    pass


class VerbsCommunications(Object):
    pass


class VerbsData(Object):
    pass


class VerbsDiagnostic(Object):
    pass


class VerbsLifecycle(Object):
    pass


class VerbsOther(Object):
    pass


class VerbsSecurity(Object):
    pass


class WarningRecord(InformationalRecord):
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, record: PSObject): ...
    @overload
    def __init__(self, fullyQualifiedWarningId: str, message: str): ...
    @overload
    def __init__(self, fullyQualifiedWarningId: str, record: PSObject): ...
    @property
    def FullyQualifiedWarningId(self) -> str: ...


class WhereOperatorSelectionMode:
    Default = 0
    First = 1
    Last = 2
    SkipUntil = 3
    Until = 4
    Split = 5


class WideControl(PSControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wideEntries: Iterable[WideControlEntryItem]): ...
    @overload
    def __init__(self, columns: UInt32): ...
    @overload
    def __init__(self, wideEntries: Iterable[WideControlEntryItem], columns: UInt32): ...
    def Create(outOfBand: bool, autoSize: bool, columns: UInt32) -> WideControlBuilder: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def Columns(self) -> UInt32: ...
    @property
    def Entries(self) -> List: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...


class WideControlBuilder(Object):
    def AddPropertyEntry(self, propertyName: str, format: str, entrySelectedByType: Iterable[str], entrySelectedByCondition: Iterable[DisplayEntry]) -> WideControlBuilder: ...
    def AddScriptBlockEntry(self, scriptBlock: str, format: str, entrySelectedByType: Iterable[str], entrySelectedByCondition: Iterable[DisplayEntry]) -> WideControlBuilder: ...
    def EndWideControl(self) -> WideControl: ...
    def GroupByProperty(self, property: str, customControl: CustomControl, label: str) -> WideControlBuilder: ...
    def GroupByScriptBlock(self, scriptBlock: str, customControl: CustomControl, label: str) -> WideControlBuilder: ...


class WideControlEntryItem(Object):
    @overload
    def __init__(self, entry: DisplayEntry): ...
    @overload
    def __init__(self, entry: DisplayEntry, selectedBy: Iterable[str]): ...
    @property
    def DisplayEntry(self) -> DisplayEntry: ...
    @property
    def EntrySelectedBy(self) -> EntrySelectedBy: ...
    @property
    def FormatString(self) -> str: ...
    @property
    def SelectedBy(self) -> List: ...


class WildcardOptions:
    #None = 0
    Compiled = 1
    IgnoreCase = 2
    CultureInvariant = 4


class WildcardPattern(Object):
    @overload
    def __init__(self, pattern: str): ...
    @overload
    def __init__(self, pattern: str, options: WildcardOptions): ...
    def ContainsWildcardCharacters(pattern: str) -> bool: ...
    def Escape(pattern: str) -> str: ...
    def Get(pattern: str, options: WildcardOptions) -> WildcardPattern: ...
    def IsMatch(self, input: str) -> bool: ...
    def ToWql(self) -> str: ...
    def Unescape(pattern: str) -> str: ...


class WildcardPatternException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class WorkflowInfo(FunctionInfo):
    @overload
    def __init__(self, name: str, definition: str, workflow: ScriptBlock, xamlDefinition: str, workflowsCalled: Set(WorkflowInfo)): ...
    @overload
    def __init__(self, name: str, definition: str, workflow: ScriptBlock, xamlDefinition: str, workflowsCalled: Set(WorkflowInfo), module: PSModuleInfo): ...
    @property
    def Definition(self) -> str: ...
    @property
    def NestedXamlDefinition(self) -> str: ...
    @property
    def WorkflowsCalled(self) -> ReadOnlyCollection: ...
    @property
    def XamlDefinition(self) -> str: ...
    @NestedXamlDefinition.setter
    def NestedXamlDefinition(self, value: str) -> None: ...
