from typing import Tuple, Set, Iterable, List


class ArrayExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, statementBlock: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def StaticType(self) -> Type: ...
    @property
    def SubExpression(self) -> StatementBlockAst: ...


class ArrayLiteralAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, elements: List[ExpressionAst]): ...
    def Copy(self) -> Ast: ...
    @property
    def Elements(self) -> ReadOnlyCollection: ...
    @property
    def StaticType(self) -> Type: ...


class ArrayTypeName(Object):
    def __init__(self, extent: IScriptExtent, elementType: ITypeName, rank: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def ElementType(self) -> ITypeName: ...
    @property
    def Extent(self) -> IScriptExtent: ...
    @property
    def FullName(self) -> str: ...
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsGeneric(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Rank(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetReflectionAttributeType(self) -> Type: ...
    def GetReflectionType(self) -> Type: ...
    def ToString(self) -> str: ...


class AssignmentStatementAst(PipelineBaseAst):
    def __init__(self, extent: IScriptExtent, left: ExpressionAst, operator: TokenKind, right: StatementAst, errorPosition: IScriptExtent): ...
    def Copy(self) -> Ast: ...
    @property
    def ErrorPosition(self) -> IScriptExtent: ...
    @property
    def Left(self) -> ExpressionAst: ...
    @property
    def Operator(self) -> TokenKind: ...
    @property
    def Right(self) -> StatementAst: ...
    def GetAssignmentTargets(self) -> Iterable[ExpressionAst]: ...


class Ast(Object):
    def Copy(self) -> Ast: ...
    def Find(self, predicate: Func, searchNestedScriptBlocks: bool) -> Ast: ...
    def FindAll(self, predicate: Func, searchNestedScriptBlocks: bool) -> Iterable[Ast]: ...
    @property
    def Extent(self) -> IScriptExtent: ...
    @property
    def Parent(self) -> Ast: ...
    def SafeGetValue(self) -> Object: ...
    def ToString(self) -> str: ...
    @overload
    def Visit(self, astVisitor: ICustomAstVisitor) -> Object: ...
    @overload
    def Visit(self, astVisitor: AstVisitor) -> None: ...


class AstVisitAction:
    Continue = 0
    SkipChildren = 1
    StopVisit = 2


class AstVisitor(Object):
    def VisitArrayExpression(self, arrayExpressionAst: ArrayExpressionAst) -> AstVisitAction: ...
    def VisitArrayLiteral(self, arrayLiteralAst: ArrayLiteralAst) -> AstVisitAction: ...
    def VisitAssignmentStatement(self, assignmentStatementAst: AssignmentStatementAst) -> AstVisitAction: ...
    def VisitAttribute(self, attributeAst: AttributeAst) -> AstVisitAction: ...
    def VisitAttributedExpression(self, attributedExpressionAst: AttributedExpressionAst) -> AstVisitAction: ...
    def VisitBinaryExpression(self, binaryExpressionAst: BinaryExpressionAst) -> AstVisitAction: ...
    def VisitBlockStatement(self, blockStatementAst: BlockStatementAst) -> AstVisitAction: ...
    def VisitBreakStatement(self, breakStatementAst: BreakStatementAst) -> AstVisitAction: ...
    def VisitCatchClause(self, catchClauseAst: CatchClauseAst) -> AstVisitAction: ...
    def VisitCommand(self, commandAst: CommandAst) -> AstVisitAction: ...
    def VisitCommandExpression(self, commandExpressionAst: CommandExpressionAst) -> AstVisitAction: ...
    def VisitCommandParameter(self, commandParameterAst: CommandParameterAst) -> AstVisitAction: ...
    def VisitConstantExpression(self, constantExpressionAst: ConstantExpressionAst) -> AstVisitAction: ...
    def VisitContinueStatement(self, continueStatementAst: ContinueStatementAst) -> AstVisitAction: ...
    def VisitConvertExpression(self, convertExpressionAst: ConvertExpressionAst) -> AstVisitAction: ...
    def VisitDataStatement(self, dataStatementAst: DataStatementAst) -> AstVisitAction: ...
    def VisitDoUntilStatement(self, doUntilStatementAst: DoUntilStatementAst) -> AstVisitAction: ...
    def VisitDoWhileStatement(self, doWhileStatementAst: DoWhileStatementAst) -> AstVisitAction: ...
    def VisitErrorExpression(self, errorExpressionAst: ErrorExpressionAst) -> AstVisitAction: ...
    def VisitErrorStatement(self, errorStatementAst: ErrorStatementAst) -> AstVisitAction: ...
    def VisitExitStatement(self, exitStatementAst: ExitStatementAst) -> AstVisitAction: ...
    def VisitExpandableStringExpression(self, expandableStringExpressionAst: ExpandableStringExpressionAst) -> AstVisitAction: ...
    def VisitFileRedirection(self, redirectionAst: FileRedirectionAst) -> AstVisitAction: ...
    def VisitForEachStatement(self, forEachStatementAst: ForEachStatementAst) -> AstVisitAction: ...
    def VisitForStatement(self, forStatementAst: ForStatementAst) -> AstVisitAction: ...
    def VisitFunctionDefinition(self, functionDefinitionAst: FunctionDefinitionAst) -> AstVisitAction: ...
    def VisitHashtable(self, hashtableAst: HashtableAst) -> AstVisitAction: ...
    def VisitIfStatement(self, ifStmtAst: IfStatementAst) -> AstVisitAction: ...
    def VisitIndexExpression(self, indexExpressionAst: IndexExpressionAst) -> AstVisitAction: ...
    def VisitInvokeMemberExpression(self, methodCallAst: InvokeMemberExpressionAst) -> AstVisitAction: ...
    def VisitMemberExpression(self, memberExpressionAst: MemberExpressionAst) -> AstVisitAction: ...
    def VisitMergingRedirection(self, redirectionAst: MergingRedirectionAst) -> AstVisitAction: ...
    def VisitNamedAttributeArgument(self, namedAttributeArgumentAst: NamedAttributeArgumentAst) -> AstVisitAction: ...
    def VisitNamedBlock(self, namedBlockAst: NamedBlockAst) -> AstVisitAction: ...
    def VisitParamBlock(self, paramBlockAst: ParamBlockAst) -> AstVisitAction: ...
    def VisitParameter(self, parameterAst: ParameterAst) -> AstVisitAction: ...
    def VisitParenExpression(self, parenExpressionAst: ParenExpressionAst) -> AstVisitAction: ...
    def VisitPipeline(self, pipelineAst: PipelineAst) -> AstVisitAction: ...
    def VisitReturnStatement(self, returnStatementAst: ReturnStatementAst) -> AstVisitAction: ...
    def VisitScriptBlock(self, scriptBlockAst: ScriptBlockAst) -> AstVisitAction: ...
    def VisitScriptBlockExpression(self, scriptBlockExpressionAst: ScriptBlockExpressionAst) -> AstVisitAction: ...
    def VisitStatementBlock(self, statementBlockAst: StatementBlockAst) -> AstVisitAction: ...
    def VisitStringConstantExpression(self, stringConstantExpressionAst: StringConstantExpressionAst) -> AstVisitAction: ...
    def VisitSubExpression(self, subExpressionAst: SubExpressionAst) -> AstVisitAction: ...
    def VisitSwitchStatement(self, switchStatementAst: SwitchStatementAst) -> AstVisitAction: ...
    def VisitThrowStatement(self, throwStatementAst: ThrowStatementAst) -> AstVisitAction: ...
    def VisitTrap(self, trapStatementAst: TrapStatementAst) -> AstVisitAction: ...
    def VisitTryStatement(self, tryStatementAst: TryStatementAst) -> AstVisitAction: ...
    def VisitTypeConstraint(self, typeConstraintAst: TypeConstraintAst) -> AstVisitAction: ...
    def VisitTypeExpression(self, typeExpressionAst: TypeExpressionAst) -> AstVisitAction: ...
    def VisitUnaryExpression(self, unaryExpressionAst: UnaryExpressionAst) -> AstVisitAction: ...
    def VisitUsingExpression(self, usingExpressionAst: UsingExpressionAst) -> AstVisitAction: ...
    def VisitVariableExpression(self, variableExpressionAst: VariableExpressionAst) -> AstVisitAction: ...
    def VisitWhileStatement(self, whileStatementAst: WhileStatementAst) -> AstVisitAction: ...


class AstVisitor2(AstVisitor):
    def VisitBaseCtorInvokeMemberExpression(self, baseCtorInvokeMemberExpressionAst: BaseCtorInvokeMemberExpressionAst) -> AstVisitAction: ...
    def VisitConfigurationDefinition(self, configurationDefinitionAst: ConfigurationDefinitionAst) -> AstVisitAction: ...
    def VisitDynamicKeywordStatement(self, dynamicKeywordStatementAst: DynamicKeywordStatementAst) -> AstVisitAction: ...
    def VisitFunctionMember(self, functionMemberAst: FunctionMemberAst) -> AstVisitAction: ...
    def VisitPropertyMember(self, propertyMemberAst: PropertyMemberAst) -> AstVisitAction: ...
    def VisitTypeDefinition(self, typeDefinitionAst: TypeDefinitionAst) -> AstVisitAction: ...
    def VisitUsingStatement(self, usingStatementAst: UsingStatementAst) -> AstVisitAction: ...


class AttributeAst(AttributeBaseAst):
    def __init__(self, extent: IScriptExtent, typeName: ITypeName, positionalArguments: Iterable[ExpressionAst], namedArguments: Iterable[NamedAttributeArgumentAst]): ...
    def Copy(self) -> Ast: ...
    @property
    def NamedArguments(self) -> ReadOnlyCollection: ...
    @property
    def PositionalArguments(self) -> ReadOnlyCollection: ...


class AttributeBaseAst(Ast):
    @property
    def TypeName(self) -> ITypeName: ...


class AttributedExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, attribute: AttributeBaseAst, child: ExpressionAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Attribute(self) -> AttributeBaseAst: ...
    @property
    def Child(self) -> ExpressionAst: ...


class BaseCtorInvokeMemberExpressionAst(InvokeMemberExpressionAst):
    def __init__(self, baseKeywordExtent: IScriptExtent, baseCallExtent: IScriptExtent, arguments: Iterable[ExpressionAst]): ...


class BinaryExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, left: ExpressionAst, operator: TokenKind, right: ExpressionAst, errorPosition: IScriptExtent): ...
    def Copy(self) -> Ast: ...
    @property
    def ErrorPosition(self) -> IScriptExtent: ...
    @property
    def Left(self) -> ExpressionAst: ...
    @property
    def Operator(self) -> TokenKind: ...
    @property
    def Right(self) -> ExpressionAst: ...
    @property
    def StaticType(self) -> Type: ...


class BlockStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, kind: Token, body: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Body(self) -> StatementBlockAst: ...
    @property
    def Kind(self) -> Token: ...


class BreakStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, label: ExpressionAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Label(self) -> ExpressionAst: ...


class CatchClauseAst(Ast):
    def __init__(self, extent: IScriptExtent, catchTypes: Iterable[TypeConstraintAst], body: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Body(self) -> StatementBlockAst: ...
    @property
    def CatchTypes(self) -> ReadOnlyCollection: ...
    @property
    def IsCatchAll(self) -> bool: ...


class CodeGeneration(Object):
    def EscapeBlockCommentContent(value: str) -> str: ...
    def EscapeFormatStringContent(value: str) -> str: ...
    def EscapeSingleQuotedStringContent(value: str) -> str: ...
    def EscapeVariableName(value: str) -> str: ...


class CommandAst(CommandBaseAst):
    def __init__(self, extent: IScriptExtent, commandElements: Iterable[CommandElementAst], invocationOperator: TokenKind, redirections: Iterable[RedirectionAst]): ...
    def Copy(self) -> Ast: ...
    @property
    def CommandElements(self) -> ReadOnlyCollection: ...
    @property
    def DefiningKeyword(self) -> DynamicKeyword: ...
    @property
    def InvocationOperator(self) -> TokenKind: ...
    def GetCommandName(self) -> str: ...
    @DefiningKeyword.setter
    def DefiningKeyword(self, value: DynamicKeyword) -> None: ...


class CommandBaseAst(StatementAst):
    @property
    def Redirections(self) -> ReadOnlyCollection: ...


class CommandElementAst(Ast):
    pass


class CommandExpressionAst(CommandBaseAst):
    def __init__(self, extent: IScriptExtent, expression: ExpressionAst, redirections: Iterable[RedirectionAst]): ...
    def Copy(self) -> Ast: ...
    @property
    def Expression(self) -> ExpressionAst: ...


class CommandParameterAst(CommandElementAst):
    def __init__(self, extent: IScriptExtent, parameterName: str, argument: ExpressionAst, errorPosition: IScriptExtent): ...
    def Copy(self) -> Ast: ...
    @property
    def Argument(self) -> ExpressionAst: ...
    @property
    def ErrorPosition(self) -> IScriptExtent: ...
    @property
    def ParameterName(self) -> str: ...


class CommentHelpInfo(Object):
    def __init__(self): ...
    @property
    def Component(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Examples(self) -> ReadOnlyCollection: ...
    @property
    def ForwardHelpCategory(self) -> str: ...
    @property
    def ForwardHelpTargetName(self) -> str: ...
    @property
    def Functionality(self) -> str: ...
    @property
    def Inputs(self) -> ReadOnlyCollection: ...
    @property
    def Links(self) -> ReadOnlyCollection: ...
    @property
    def MamlHelpFile(self) -> str: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Outputs(self) -> ReadOnlyCollection: ...
    @property
    def Parameters(self) -> IDictionary: ...
    @property
    def RemoteHelpRunspace(self) -> str: ...
    @property
    def Role(self) -> str: ...
    @property
    def Synopsis(self) -> str: ...
    def GetCommentBlock(self) -> str: ...


class ConfigurationDefinitionAst(StatementAst):
    def __init__(self, extent: IScriptExtent, body: ScriptBlockExpressionAst, type: ConfigurationType, instanceName: ExpressionAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Body(self) -> ScriptBlockExpressionAst: ...
    @property
    def ConfigurationType(self) -> ConfigurationType: ...
    @property
    def InstanceName(self) -> ExpressionAst: ...


class ConfigurationType:
    Resource = 0
    Meta = 1


class ConstantExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, value: Object): ...
    def Copy(self) -> Ast: ...
    @property
    def StaticType(self) -> Type: ...
    @property
    def Value(self) -> Object: ...


class ContinueStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, label: ExpressionAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Label(self) -> ExpressionAst: ...


class ConvertExpressionAst(AttributedExpressionAst):
    def __init__(self, extent: IScriptExtent, typeConstraint: TypeConstraintAst, child: ExpressionAst): ...
    def Copy(self) -> Ast: ...
    @property
    def StaticType(self) -> Type: ...
    @property
    def Type(self) -> TypeConstraintAst: ...


class DataStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, variableName: str, commandsAllowed: Iterable[ExpressionAst], body: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Body(self) -> StatementBlockAst: ...
    @property
    def CommandsAllowed(self) -> ReadOnlyCollection: ...
    @property
    def Variable(self) -> str: ...


class DefaultCustomAstVisitor(Object):
    def VisitArrayExpression(self, arrayExpressionAst: ArrayExpressionAst) -> Object: ...
    def VisitArrayLiteral(self, arrayLiteralAst: ArrayLiteralAst) -> Object: ...
    def VisitAssignmentStatement(self, assignmentStatementAst: AssignmentStatementAst) -> Object: ...
    def VisitAttribute(self, attributeAst: AttributeAst) -> Object: ...
    def VisitAttributedExpression(self, attributedExpressionAst: AttributedExpressionAst) -> Object: ...
    def VisitBinaryExpression(self, binaryExpressionAst: BinaryExpressionAst) -> Object: ...
    def VisitBlockStatement(self, blockStatementAst: BlockStatementAst) -> Object: ...
    def VisitBreakStatement(self, breakStatementAst: BreakStatementAst) -> Object: ...
    def VisitCatchClause(self, catchClauseAst: CatchClauseAst) -> Object: ...
    def VisitCommand(self, commandAst: CommandAst) -> Object: ...
    def VisitCommandExpression(self, commandExpressionAst: CommandExpressionAst) -> Object: ...
    def VisitCommandParameter(self, commandParameterAst: CommandParameterAst) -> Object: ...
    def VisitConstantExpression(self, constantExpressionAst: ConstantExpressionAst) -> Object: ...
    def VisitContinueStatement(self, continueStatementAst: ContinueStatementAst) -> Object: ...
    def VisitConvertExpression(self, convertExpressionAst: ConvertExpressionAst) -> Object: ...
    def VisitDataStatement(self, dataStatementAst: DataStatementAst) -> Object: ...
    def VisitDoUntilStatement(self, doUntilStatementAst: DoUntilStatementAst) -> Object: ...
    def VisitDoWhileStatement(self, doWhileStatementAst: DoWhileStatementAst) -> Object: ...
    def VisitErrorExpression(self, errorExpressionAst: ErrorExpressionAst) -> Object: ...
    def VisitErrorStatement(self, errorStatementAst: ErrorStatementAst) -> Object: ...
    def VisitExitStatement(self, exitStatementAst: ExitStatementAst) -> Object: ...
    def VisitExpandableStringExpression(self, expandableStringExpressionAst: ExpandableStringExpressionAst) -> Object: ...
    def VisitFileRedirection(self, fileRedirectionAst: FileRedirectionAst) -> Object: ...
    def VisitForEachStatement(self, forEachStatementAst: ForEachStatementAst) -> Object: ...
    def VisitForStatement(self, forStatementAst: ForStatementAst) -> Object: ...
    def VisitFunctionDefinition(self, functionDefinitionAst: FunctionDefinitionAst) -> Object: ...
    def VisitHashtable(self, hashtableAst: HashtableAst) -> Object: ...
    def VisitIfStatement(self, ifStmtAst: IfStatementAst) -> Object: ...
    def VisitIndexExpression(self, indexExpressionAst: IndexExpressionAst) -> Object: ...
    def VisitInvokeMemberExpression(self, invokeMemberExpressionAst: InvokeMemberExpressionAst) -> Object: ...
    def VisitMemberExpression(self, memberExpressionAst: MemberExpressionAst) -> Object: ...
    def VisitMergingRedirection(self, mergingRedirectionAst: MergingRedirectionAst) -> Object: ...
    def VisitNamedAttributeArgument(self, namedAttributeArgumentAst: NamedAttributeArgumentAst) -> Object: ...
    def VisitNamedBlock(self, namedBlockAst: NamedBlockAst) -> Object: ...
    def VisitParamBlock(self, paramBlockAst: ParamBlockAst) -> Object: ...
    def VisitParameter(self, parameterAst: ParameterAst) -> Object: ...
    def VisitParenExpression(self, parenExpressionAst: ParenExpressionAst) -> Object: ...
    def VisitPipeline(self, pipelineAst: PipelineAst) -> Object: ...
    def VisitReturnStatement(self, returnStatementAst: ReturnStatementAst) -> Object: ...
    def VisitScriptBlock(self, scriptBlockAst: ScriptBlockAst) -> Object: ...
    def VisitScriptBlockExpression(self, scriptBlockExpressionAst: ScriptBlockExpressionAst) -> Object: ...
    def VisitStatementBlock(self, statementBlockAst: StatementBlockAst) -> Object: ...
    def VisitStringConstantExpression(self, stringConstantExpressionAst: StringConstantExpressionAst) -> Object: ...
    def VisitSubExpression(self, subExpressionAst: SubExpressionAst) -> Object: ...
    def VisitSwitchStatement(self, switchStatementAst: SwitchStatementAst) -> Object: ...
    def VisitThrowStatement(self, throwStatementAst: ThrowStatementAst) -> Object: ...
    def VisitTrap(self, trapStatementAst: TrapStatementAst) -> Object: ...
    def VisitTryStatement(self, tryStatementAst: TryStatementAst) -> Object: ...
    def VisitTypeConstraint(self, typeConstraintAst: TypeConstraintAst) -> Object: ...
    def VisitTypeExpression(self, typeExpressionAst: TypeExpressionAst) -> Object: ...
    def VisitUnaryExpression(self, unaryExpressionAst: UnaryExpressionAst) -> Object: ...
    def VisitUsingExpression(self, usingExpressionAst: UsingExpressionAst) -> Object: ...
    def VisitVariableExpression(self, variableExpressionAst: VariableExpressionAst) -> Object: ...
    def VisitWhileStatement(self, whileStatementAst: WhileStatementAst) -> Object: ...


class DefaultCustomAstVisitor2(DefaultCustomAstVisitor):
    def VisitBaseCtorInvokeMemberExpression(self, baseCtorInvokeMemberExpressionAst: BaseCtorInvokeMemberExpressionAst) -> Object: ...
    def VisitConfigurationDefinition(self, configurationAst: ConfigurationDefinitionAst) -> Object: ...
    def VisitDynamicKeywordStatement(self, dynamicKeywordAst: DynamicKeywordStatementAst) -> Object: ...
    def VisitFunctionMember(self, functionMemberAst: FunctionMemberAst) -> Object: ...
    def VisitPropertyMember(self, propertyMemberAst: PropertyMemberAst) -> Object: ...
    def VisitTypeDefinition(self, typeDefinitionAst: TypeDefinitionAst) -> Object: ...
    def VisitUsingStatement(self, usingStatement: UsingStatementAst) -> Object: ...


class DoUntilStatementAst(LoopStatementAst):
    def __init__(self, extent: IScriptExtent, label: str, condition: PipelineBaseAst, body: StatementBlockAst): ...
    def Copy(self) -> Ast: ...


class DoWhileStatementAst(LoopStatementAst):
    def __init__(self, extent: IScriptExtent, label: str, condition: PipelineBaseAst, body: StatementBlockAst): ...
    def Copy(self) -> Ast: ...


class DynamicKeyword(Object):
    def __init__(self): ...
    def AddKeyword(keywordToAdd: DynamicKeyword) -> None: ...
    def ContainsKeyword(name: str) -> bool: ...
    def Copy(self) -> DynamicKeyword: ...
    @property
    def BodyMode(self) -> DynamicKeywordBodyMode: ...
    @property
    def DirectCall(self) -> bool: ...
    @property
    def HasReservedProperties(self) -> bool: ...
    @property
    def ImplementingModule(self) -> str: ...
    @property
    def ImplementingModuleVersion(self) -> Version: ...
    @property
    def IsReservedKeyword(self) -> bool: ...
    @property
    def Keyword(self) -> str: ...
    @property
    def MetaStatement(self) -> bool: ...
    @property
    def NameMode(self) -> DynamicKeywordNameMode: ...
    @property
    def Parameters(self) -> Dictionary: ...
    @property
    def PostParse(self) -> Func: ...
    @property
    def PreParse(self) -> Func: ...
    @property
    def Properties(self) -> Dictionary: ...
    @property
    def ResourceName(self) -> str: ...
    @property
    def SemanticCheck(self) -> Func: ...
    @overload
    def GetKeyword() -> List: ...
    @overload
    def GetKeyword(name: str) -> DynamicKeyword: ...
    def Pop() -> None: ...
    def Push() -> None: ...
    def RemoveKeyword(name: str) -> None: ...
    def Reset() -> None: ...
    @BodyMode.setter
    def BodyMode(self, value: DynamicKeywordBodyMode) -> None: ...
    @DirectCall.setter
    def DirectCall(self, value: bool) -> None: ...
    @HasReservedProperties.setter
    def HasReservedProperties(self, value: bool) -> None: ...
    @ImplementingModule.setter
    def ImplementingModule(self, value: str) -> None: ...
    @ImplementingModuleVersion.setter
    def ImplementingModuleVersion(self, value: Version) -> None: ...
    @IsReservedKeyword.setter
    def IsReservedKeyword(self, value: bool) -> None: ...
    @Keyword.setter
    def Keyword(self, value: str) -> None: ...
    @MetaStatement.setter
    def MetaStatement(self, value: bool) -> None: ...
    @NameMode.setter
    def NameMode(self, value: DynamicKeywordNameMode) -> None: ...
    @PostParse.setter
    def PostParse(self, value: Func) -> None: ...
    @PreParse.setter
    def PreParse(self, value: Func) -> None: ...
    @ResourceName.setter
    def ResourceName(self, value: str) -> None: ...
    @SemanticCheck.setter
    def SemanticCheck(self, value: Func) -> None: ...


class DynamicKeywordBodyMode:
    Command = 0
    ScriptBlock = 1
    Hashtable = 2


class DynamicKeywordNameMode:
    NoName = 0
    SimpleNameRequired = 1
    NameRequired = 2
    SimpleOptionalName = 3
    OptionalName = 4


class DynamicKeywordParameter(DynamicKeywordProperty):
    def __init__(self): ...
    @property
    def Switch(self) -> bool: ...
    @Switch.setter
    def Switch(self, value: bool) -> None: ...


class DynamicKeywordProperty(Object):
    def __init__(self): ...
    @property
    def Attributes(self) -> List: ...
    @property
    def IsKey(self) -> bool: ...
    @property
    def Mandatory(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Range(self) -> Tuple: ...
    @property
    def TypeConstraint(self) -> str: ...
    @property
    def ValueMap(self) -> Dictionary: ...
    @property
    def Values(self) -> List: ...
    @IsKey.setter
    def IsKey(self, value: bool) -> None: ...
    @Mandatory.setter
    def Mandatory(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Range.setter
    def Range(self, value: Tuple) -> None: ...
    @TypeConstraint.setter
    def TypeConstraint(self, value: str) -> None: ...


class DynamicKeywordStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, commandElements: Iterable[CommandElementAst]): ...
    def Copy(self) -> Ast: ...
    @property
    def CommandElements(self) -> ReadOnlyCollection: ...


class ErrorExpressionAst(ExpressionAst):
    def Copy(self) -> Ast: ...
    @property
    def NestedAst(self) -> ReadOnlyCollection: ...


class ErrorStatementAst(PipelineBaseAst):
    def Copy(self) -> Ast: ...
    @property
    def Bodies(self) -> ReadOnlyCollection: ...
    @property
    def Conditions(self) -> ReadOnlyCollection: ...
    @property
    def Flags(self) -> Dictionary: ...
    @property
    def Kind(self) -> Token: ...
    @property
    def NestedAst(self) -> ReadOnlyCollection: ...


class ExitStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, pipeline: PipelineBaseAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Pipeline(self) -> PipelineBaseAst: ...


class ExpandableStringExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, value: str, type: StringConstantType): ...
    def Copy(self) -> Ast: ...
    @property
    def NestedExpressions(self) -> ReadOnlyCollection: ...
    @property
    def StaticType(self) -> Type: ...
    @property
    def StringConstantType(self) -> StringConstantType: ...
    @property
    def Value(self) -> str: ...


class ExpressionAst(CommandElementAst):
    @property
    def StaticType(self) -> Type: ...


class FileRedirectionAst(RedirectionAst):
    def __init__(self, extent: IScriptExtent, stream: RedirectionStream, file: ExpressionAst, append: bool): ...
    def Copy(self) -> Ast: ...
    @property
    def Append(self) -> bool: ...
    @property
    def Location(self) -> ExpressionAst: ...


class FileRedirectionToken(RedirectionToken):
    @property
    def Append(self) -> bool: ...
    @property
    def FromStream(self) -> RedirectionStream: ...


class ForEachFlags:
    #None = 0
    Parallel = 1


class ForEachStatementAst(LoopStatementAst):
    @overload
    def __init__(self, extent: IScriptExtent, label: str, flags: ForEachFlags, variable: VariableExpressionAst, expression: PipelineBaseAst, body: StatementBlockAst): ...
    @overload
    def __init__(self, extent: IScriptExtent, label: str, flags: ForEachFlags, throttleLimit: ExpressionAst, variable: VariableExpressionAst, expression: PipelineBaseAst, body: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Flags(self) -> ForEachFlags: ...
    @property
    def ThrottleLimit(self) -> ExpressionAst: ...
    @property
    def Variable(self) -> VariableExpressionAst: ...


class ForStatementAst(LoopStatementAst):
    def __init__(self, extent: IScriptExtent, label: str, initializer: PipelineBaseAst, condition: PipelineBaseAst, iterator: PipelineBaseAst, body: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Initializer(self) -> PipelineBaseAst: ...
    @property
    def Iterator(self) -> PipelineBaseAst: ...


class FunctionDefinitionAst(StatementAst):
    def __init__(self, extent: IScriptExtent, isFilter: bool, isWorkflow: bool, name: str, parameters: Iterable[ParameterAst], body: ScriptBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Body(self) -> ScriptBlockAst: ...
    @property
    def IsFilter(self) -> bool: ...
    @property
    def IsWorkflow(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> ReadOnlyCollection: ...
    @overload
    def GetHelpContent(self) -> CommentHelpInfo: ...
    @overload
    def GetHelpContent(self, scriptBlockTokenCache: Dictionary) -> CommentHelpInfo: ...


class FunctionMemberAst(MemberAst):
    def __init__(self, extent: IScriptExtent, functionDefinitionAst: FunctionDefinitionAst, returnType: TypeConstraintAst, attributes: Iterable[AttributeAst], methodAttributes: MethodAttributes): ...
    def Copy(self) -> Ast: ...
    @property
    def Attributes(self) -> ReadOnlyCollection: ...
    @property
    def Body(self) -> ScriptBlockAst: ...
    @property
    def IsConstructor(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def MethodAttributes(self) -> MethodAttributes: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> ReadOnlyCollection: ...
    @property
    def ReturnType(self) -> TypeConstraintAst: ...


class GenericTypeName(Object):
    def __init__(self, extent: IScriptExtent, genericTypeName: ITypeName, genericArguments: Iterable[ITypeName]): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def Extent(self) -> IScriptExtent: ...
    @property
    def FullName(self) -> str: ...
    @property
    def GenericArguments(self) -> ReadOnlyCollection: ...
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsGeneric(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeName(self) -> ITypeName: ...
    def GetHashCode(self) -> int: ...
    def GetReflectionAttributeType(self) -> Type: ...
    def GetReflectionType(self) -> Type: ...
    def ToString(self) -> str: ...


class HashtableAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, keyValuePairs: Iterable[Tuple]): ...
    def Copy(self) -> Ast: ...
    @property
    def KeyValuePairs(self) -> ReadOnlyCollection: ...
    @property
    def StaticType(self) -> Type: ...


class IAstPostVisitHandler:
    def PostVisit(self, ast: Ast) -> None: ...


class ICustomAstVisitor:
    def VisitArrayExpression(self, arrayExpressionAst: ArrayExpressionAst) -> Object: ...
    def VisitArrayLiteral(self, arrayLiteralAst: ArrayLiteralAst) -> Object: ...
    def VisitAssignmentStatement(self, assignmentStatementAst: AssignmentStatementAst) -> Object: ...
    def VisitAttribute(self, attributeAst: AttributeAst) -> Object: ...
    def VisitAttributedExpression(self, attributedExpressionAst: AttributedExpressionAst) -> Object: ...
    def VisitBinaryExpression(self, binaryExpressionAst: BinaryExpressionAst) -> Object: ...
    def VisitBlockStatement(self, blockStatementAst: BlockStatementAst) -> Object: ...
    def VisitBreakStatement(self, breakStatementAst: BreakStatementAst) -> Object: ...
    def VisitCatchClause(self, catchClauseAst: CatchClauseAst) -> Object: ...
    def VisitCommand(self, commandAst: CommandAst) -> Object: ...
    def VisitCommandExpression(self, commandExpressionAst: CommandExpressionAst) -> Object: ...
    def VisitCommandParameter(self, commandParameterAst: CommandParameterAst) -> Object: ...
    def VisitConstantExpression(self, constantExpressionAst: ConstantExpressionAst) -> Object: ...
    def VisitContinueStatement(self, continueStatementAst: ContinueStatementAst) -> Object: ...
    def VisitConvertExpression(self, convertExpressionAst: ConvertExpressionAst) -> Object: ...
    def VisitDataStatement(self, dataStatementAst: DataStatementAst) -> Object: ...
    def VisitDoUntilStatement(self, doUntilStatementAst: DoUntilStatementAst) -> Object: ...
    def VisitDoWhileStatement(self, doWhileStatementAst: DoWhileStatementAst) -> Object: ...
    def VisitErrorExpression(self, errorExpressionAst: ErrorExpressionAst) -> Object: ...
    def VisitErrorStatement(self, errorStatementAst: ErrorStatementAst) -> Object: ...
    def VisitExitStatement(self, exitStatementAst: ExitStatementAst) -> Object: ...
    def VisitExpandableStringExpression(self, expandableStringExpressionAst: ExpandableStringExpressionAst) -> Object: ...
    def VisitFileRedirection(self, fileRedirectionAst: FileRedirectionAst) -> Object: ...
    def VisitForEachStatement(self, forEachStatementAst: ForEachStatementAst) -> Object: ...
    def VisitForStatement(self, forStatementAst: ForStatementAst) -> Object: ...
    def VisitFunctionDefinition(self, functionDefinitionAst: FunctionDefinitionAst) -> Object: ...
    def VisitHashtable(self, hashtableAst: HashtableAst) -> Object: ...
    def VisitIfStatement(self, ifStmtAst: IfStatementAst) -> Object: ...
    def VisitIndexExpression(self, indexExpressionAst: IndexExpressionAst) -> Object: ...
    def VisitInvokeMemberExpression(self, invokeMemberExpressionAst: InvokeMemberExpressionAst) -> Object: ...
    def VisitMemberExpression(self, memberExpressionAst: MemberExpressionAst) -> Object: ...
    def VisitMergingRedirection(self, mergingRedirectionAst: MergingRedirectionAst) -> Object: ...
    def VisitNamedAttributeArgument(self, namedAttributeArgumentAst: NamedAttributeArgumentAst) -> Object: ...
    def VisitNamedBlock(self, namedBlockAst: NamedBlockAst) -> Object: ...
    def VisitParamBlock(self, paramBlockAst: ParamBlockAst) -> Object: ...
    def VisitParameter(self, parameterAst: ParameterAst) -> Object: ...
    def VisitParenExpression(self, parenExpressionAst: ParenExpressionAst) -> Object: ...
    def VisitPipeline(self, pipelineAst: PipelineAst) -> Object: ...
    def VisitReturnStatement(self, returnStatementAst: ReturnStatementAst) -> Object: ...
    def VisitScriptBlock(self, scriptBlockAst: ScriptBlockAst) -> Object: ...
    def VisitScriptBlockExpression(self, scriptBlockExpressionAst: ScriptBlockExpressionAst) -> Object: ...
    def VisitStatementBlock(self, statementBlockAst: StatementBlockAst) -> Object: ...
    def VisitStringConstantExpression(self, stringConstantExpressionAst: StringConstantExpressionAst) -> Object: ...
    def VisitSubExpression(self, subExpressionAst: SubExpressionAst) -> Object: ...
    def VisitSwitchStatement(self, switchStatementAst: SwitchStatementAst) -> Object: ...
    def VisitThrowStatement(self, throwStatementAst: ThrowStatementAst) -> Object: ...
    def VisitTrap(self, trapStatementAst: TrapStatementAst) -> Object: ...
    def VisitTryStatement(self, tryStatementAst: TryStatementAst) -> Object: ...
    def VisitTypeConstraint(self, typeConstraintAst: TypeConstraintAst) -> Object: ...
    def VisitTypeExpression(self, typeExpressionAst: TypeExpressionAst) -> Object: ...
    def VisitUnaryExpression(self, unaryExpressionAst: UnaryExpressionAst) -> Object: ...
    def VisitUsingExpression(self, usingExpressionAst: UsingExpressionAst) -> Object: ...
    def VisitVariableExpression(self, variableExpressionAst: VariableExpressionAst) -> Object: ...
    def VisitWhileStatement(self, whileStatementAst: WhileStatementAst) -> Object: ...


class ICustomAstVisitor2:
    def VisitBaseCtorInvokeMemberExpression(self, baseCtorInvokeMemberExpressionAst: BaseCtorInvokeMemberExpressionAst) -> Object: ...
    def VisitConfigurationDefinition(self, configurationDefinitionAst: ConfigurationDefinitionAst) -> Object: ...
    def VisitDynamicKeywordStatement(self, dynamicKeywordAst: DynamicKeywordStatementAst) -> Object: ...
    def VisitFunctionMember(self, functionMemberAst: FunctionMemberAst) -> Object: ...
    def VisitPropertyMember(self, propertyMemberAst: PropertyMemberAst) -> Object: ...
    def VisitTypeDefinition(self, typeDefinitionAst: TypeDefinitionAst) -> Object: ...
    def VisitUsingStatement(self, usingStatement: UsingStatementAst) -> Object: ...


class IfStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, clauses: Iterable[Tuple], elseClause: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Clauses(self) -> ReadOnlyCollection: ...
    @property
    def ElseClause(self) -> StatementBlockAst: ...


class IndexExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, target: ExpressionAst, index: ExpressionAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Index(self) -> ExpressionAst: ...
    @property
    def Target(self) -> ExpressionAst: ...


class InputRedirectionToken(RedirectionToken):
    pass


class InvokeMemberExpressionAst(MemberExpressionAst):
    def __init__(self, extent: IScriptExtent, expression: ExpressionAst, method: CommandElementAst, arguments: Iterable[ExpressionAst], static: bool): ...
    def Copy(self) -> Ast: ...
    @property
    def Arguments(self) -> ReadOnlyCollection: ...


class IScriptExtent:
    @property
    def EndColumnNumber(self) -> int: ...
    @property
    def EndLineNumber(self) -> int: ...
    @property
    def EndOffset(self) -> int: ...
    @property
    def EndScriptPosition(self) -> IScriptPosition: ...
    @property
    def File(self) -> str: ...
    @property
    def StartColumnNumber(self) -> int: ...
    @property
    def StartLineNumber(self) -> int: ...
    @property
    def StartOffset(self) -> int: ...
    @property
    def StartScriptPosition(self) -> IScriptPosition: ...
    @property
    def Text(self) -> str: ...


class IScriptPosition:
    @property
    def ColumnNumber(self) -> int: ...
    @property
    def File(self) -> str: ...
    @property
    def Line(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def Offset(self) -> int: ...
    def GetFullScript(self) -> str: ...


class ITypeName:
    @property
    def AssemblyName(self) -> str: ...
    @property
    def Extent(self) -> IScriptExtent: ...
    @property
    def FullName(self) -> str: ...
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsGeneric(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetReflectionAttributeType(self) -> Type: ...
    def GetReflectionType(self) -> Type: ...


class LabeledStatementAst(StatementAst):
    @property
    def Condition(self) -> PipelineBaseAst: ...
    @property
    def Label(self) -> str: ...


class LabelToken(Token):
    @property
    def LabelText(self) -> str: ...


class LoopStatementAst(LabeledStatementAst):
    @property
    def Body(self) -> StatementBlockAst: ...


class MemberAst(Ast):
    @property
    def Name(self) -> str: ...


class MemberExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, expression: ExpressionAst, member: CommandElementAst, static: bool): ...
    def Copy(self) -> Ast: ...
    @property
    def Expression(self) -> ExpressionAst: ...
    @property
    def Member(self) -> CommandElementAst: ...
    @property
    def Static(self) -> bool: ...


class MergingRedirectionAst(RedirectionAst):
    def __init__(self, extent: IScriptExtent, from_: RedirectionStream, to: RedirectionStream): ...
    def Copy(self) -> Ast: ...
    @property
    def ToStream(self) -> RedirectionStream: ...


class MergingRedirectionToken(RedirectionToken):
    @property
    def FromStream(self) -> RedirectionStream: ...
    @property
    def ToStream(self) -> RedirectionStream: ...


class MethodAttributes:
    #None = 0
    Public = 1
    Private = 2
    Static = 16
    Hidden = 64


class NamedAttributeArgumentAst(Ast):
    def __init__(self, extent: IScriptExtent, argumentName: str, argument: ExpressionAst, expressionOmitted: bool): ...
    def Copy(self) -> Ast: ...
    @property
    def Argument(self) -> ExpressionAst: ...
    @property
    def ArgumentName(self) -> str: ...
    @property
    def ExpressionOmitted(self) -> bool: ...


class NamedBlockAst(Ast):
    def __init__(self, extent: IScriptExtent, blockName: TokenKind, statementBlock: StatementBlockAst, unnamed: bool): ...
    def Copy(self) -> Ast: ...
    @property
    def BlockKind(self) -> TokenKind: ...
    @property
    def Statements(self) -> ReadOnlyCollection: ...
    @property
    def Traps(self) -> ReadOnlyCollection: ...
    @property
    def Unnamed(self) -> bool: ...


class NullString(Object):
    @property
    def Value() -> NullString: ...
    def ToString(self) -> str: ...


class NumberToken(Token):
    @property
    def Value(self) -> Object: ...


class ParamBlockAst(Ast):
    def __init__(self, extent: IScriptExtent, attributes: Iterable[AttributeAst], parameters: Iterable[ParameterAst]): ...
    def Copy(self) -> Ast: ...
    @property
    def Attributes(self) -> ReadOnlyCollection: ...
    @property
    def Parameters(self) -> ReadOnlyCollection: ...


class ParameterAst(Ast):
    def __init__(self, extent: IScriptExtent, name: VariableExpressionAst, attributes: Iterable[AttributeBaseAst], defaultValue: ExpressionAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Attributes(self) -> ReadOnlyCollection: ...
    @property
    def DefaultValue(self) -> ExpressionAst: ...
    @property
    def Name(self) -> VariableExpressionAst: ...
    @property
    def StaticType(self) -> Type: ...


class ParameterBindingResult(Object):
    @property
    def ConstantValue(self) -> Object: ...
    @property
    def Parameter(self) -> ParameterMetadata: ...
    @property
    def Value(self) -> CommandElementAst: ...


class ParameterToken(Token):
    @property
    def ParameterName(self) -> str: ...
    @property
    def UsedColon(self) -> bool: ...


class ParenExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, pipeline: PipelineBaseAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Pipeline(self) -> PipelineBaseAst: ...


class ParseError(Object):
    def __init__(self, extent: IScriptExtent, errorId: str, message: str): ...
    @property
    def ErrorId(self) -> str: ...
    @property
    def Extent(self) -> IScriptExtent: ...
    @property
    def IncompleteInput(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    def ToString(self) -> str: ...


class Parser(Object):
    def ParseFile(fileName: str) -> Tuple[ScriptBlockAst, Set(Token), Set(ParseError)]: ...
    @overload
    def ParseInput(input: str) -> Tuple[ScriptBlockAst, Set(Token), Set(ParseError)]: ...
    @overload
    def ParseInput(input: str, fileName: str) -> Tuple[ScriptBlockAst, Set(Token), Set(ParseError)]: ...


class PipelineAst(PipelineBaseAst):
    @overload
    def __init__(self, extent: IScriptExtent, pipelineElements: Iterable[CommandBaseAst]): ...
    @overload
    def __init__(self, extent: IScriptExtent, commandAst: CommandBaseAst): ...
    def Copy(self) -> Ast: ...
    @property
    def PipelineElements(self) -> ReadOnlyCollection: ...
    def GetPureExpression(self) -> ExpressionAst: ...


class PipelineBaseAst(StatementAst):
    def GetPureExpression(self) -> ExpressionAst: ...


class PropertyAttributes:
    #None = 0
    Public = 1
    Private = 2
    Static = 16
    Literal = 32
    Hidden = 64


class PropertyMemberAst(MemberAst):
    def __init__(self, extent: IScriptExtent, name: str, propertyType: TypeConstraintAst, attributes: Iterable[AttributeAst], propertyAttributes: PropertyAttributes, initialValue: ExpressionAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Attributes(self) -> ReadOnlyCollection: ...
    @property
    def InitialValue(self) -> ExpressionAst: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def PropertyAttributes(self) -> PropertyAttributes: ...
    @property
    def PropertyType(self) -> TypeConstraintAst: ...


class RedirectionAst(Ast):
    @property
    def FromStream(self) -> RedirectionStream: ...


class RedirectionStream:
    All = 0
    Output = 1
    Error = 2
    Warning = 3
    Verbose = 4
    Debug = 5
    Information = 6


class RedirectionToken(Token):
    pass


class ReflectionTypeName(Object):
    def __init__(self, type: Type): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def Extent(self) -> IScriptExtent: ...
    @property
    def FullName(self) -> str: ...
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsGeneric(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetReflectionAttributeType(self) -> Type: ...
    def GetReflectionType(self) -> Type: ...
    def ToString(self) -> str: ...


class ReturnStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, pipeline: PipelineBaseAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Pipeline(self) -> PipelineBaseAst: ...


class ScriptBlockAst(Ast):
    @overload
    def __init__(self, extent: IScriptExtent, paramBlock: ParamBlockAst, statements: StatementBlockAst, isFilter: bool): ...
    @overload
    def __init__(self, extent: IScriptExtent, usingStatements: List, paramBlock: ParamBlockAst, statements: StatementBlockAst, isFilter: bool): ...
    @overload
    def __init__(self, extent: IScriptExtent, paramBlock: ParamBlockAst, statements: StatementBlockAst, isFilter: bool, isConfiguration: bool): ...
    @overload
    def __init__(self, extent: IScriptExtent, paramBlock: ParamBlockAst, beginBlock: NamedBlockAst, processBlock: NamedBlockAst, endBlock: NamedBlockAst, dynamicParamBlock: NamedBlockAst): ...
    @overload
    def __init__(self, extent: IScriptExtent, usingStatements: Iterable[UsingStatementAst], paramBlock: ParamBlockAst, statements: StatementBlockAst, isFilter: bool, isConfiguration: bool): ...
    @overload
    def __init__(self, extent: IScriptExtent, attributes: Iterable[AttributeAst], paramBlock: ParamBlockAst, statements: StatementBlockAst, isFilter: bool, isConfiguration: bool): ...
    @overload
    def __init__(self, extent: IScriptExtent, usingStatements: Iterable[UsingStatementAst], paramBlock: ParamBlockAst, beginBlock: NamedBlockAst, processBlock: NamedBlockAst, endBlock: NamedBlockAst, dynamicParamBlock: NamedBlockAst): ...
    @overload
    def __init__(self, extent: IScriptExtent, usingStatements: Iterable[UsingStatementAst], attributes: Iterable[AttributeAst], paramBlock: ParamBlockAst, statements: StatementBlockAst, isFilter: bool, isConfiguration: bool): ...
    @overload
    def __init__(self, extent: IScriptExtent, usingStatements: Iterable[UsingStatementAst], attributes: Iterable[AttributeAst], paramBlock: ParamBlockAst, beginBlock: NamedBlockAst, processBlock: NamedBlockAst, endBlock: NamedBlockAst, dynamicParamBlock: NamedBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Attributes(self) -> ReadOnlyCollection: ...
    @property
    def BeginBlock(self) -> NamedBlockAst: ...
    @property
    def DynamicParamBlock(self) -> NamedBlockAst: ...
    @property
    def EndBlock(self) -> NamedBlockAst: ...
    @property
    def ParamBlock(self) -> ParamBlockAst: ...
    @property
    def ProcessBlock(self) -> NamedBlockAst: ...
    @property
    def ScriptRequirements(self) -> ScriptRequirements: ...
    @property
    def UsingStatements(self) -> ReadOnlyCollection: ...
    def GetHelpContent(self) -> CommentHelpInfo: ...
    def GetScriptBlock(self) -> ScriptBlock: ...


class ScriptBlockExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, scriptBlock: ScriptBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def ScriptBlock(self) -> ScriptBlockAst: ...
    @property
    def StaticType(self) -> Type: ...


class ScriptExtent(Object):
    def __init__(self, startPosition: ScriptPosition, endPosition: ScriptPosition): ...
    @property
    def EndColumnNumber(self) -> int: ...
    @property
    def EndLineNumber(self) -> int: ...
    @property
    def EndOffset(self) -> int: ...
    @property
    def EndScriptPosition(self) -> IScriptPosition: ...
    @property
    def File(self) -> str: ...
    @property
    def StartColumnNumber(self) -> int: ...
    @property
    def StartLineNumber(self) -> int: ...
    @property
    def StartOffset(self) -> int: ...
    @property
    def StartScriptPosition(self) -> IScriptPosition: ...
    @property
    def Text(self) -> str: ...


class ScriptPosition(Object):
    @overload
    def __init__(self, scriptName: str, scriptLineNumber: int, offsetInLine: int, line: str): ...
    @overload
    def __init__(self, scriptName: str, scriptLineNumber: int, offsetInLine: int, line: str, fullScript: str): ...
    @property
    def ColumnNumber(self) -> int: ...
    @property
    def File(self) -> str: ...
    @property
    def Line(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def Offset(self) -> int: ...
    def GetFullScript(self) -> str: ...


class ScriptRequirements(Object):
    def __init__(self): ...
    @property
    def IsElevationRequired(self) -> bool: ...
    @property
    def RequiredApplicationId(self) -> str: ...
    @property
    def RequiredAssemblies(self) -> ReadOnlyCollection: ...
    @property
    def RequiredModules(self) -> ReadOnlyCollection: ...
    @property
    def RequiredPSEditions(self) -> ReadOnlyCollection: ...
    @property
    def RequiredPSVersion(self) -> Version: ...
    @property
    def RequiresPSSnapIns(self) -> ReadOnlyCollection: ...


class StatementAst(Ast):
    pass


class StatementBlockAst(Ast):
    def __init__(self, extent: IScriptExtent, statements: Iterable[StatementAst], traps: Iterable[TrapStatementAst]): ...
    def Copy(self) -> Ast: ...
    @property
    def Statements(self) -> ReadOnlyCollection: ...
    @property
    def Traps(self) -> ReadOnlyCollection: ...


class StaticBindingError(Object):
    @property
    def BindingException(self) -> ParameterBindingException: ...
    @property
    def CommandElement(self) -> CommandElementAst: ...


class StaticBindingResult(Object):
    @property
    def BindingExceptions(self) -> Dictionary: ...
    @property
    def BoundParameters(self) -> Dictionary: ...


class StaticParameterBinder(Object):
    @overload
    def BindCommand(commandAst: CommandAst) -> StaticBindingResult: ...
    @overload
    def BindCommand(commandAst: CommandAst, resolve: bool) -> StaticBindingResult: ...
    @overload
    def BindCommand(commandAst: CommandAst, resolve: bool, desiredParameters: Set(str)) -> StaticBindingResult: ...


class StringConstantExpressionAst(ConstantExpressionAst):
    def __init__(self, extent: IScriptExtent, value: str, stringConstantType: StringConstantType): ...
    def Copy(self) -> Ast: ...
    @property
    def StaticType(self) -> Type: ...
    @property
    def StringConstantType(self) -> StringConstantType: ...
    @property
    def Value(self) -> str: ...


class StringConstantType:
    SingleQuoted = 0
    SingleQuotedHereString = 1
    DoubleQuoted = 2
    DoubleQuotedHereString = 3
    BareWord = 4


class StringExpandableToken(StringToken):
    @property
    def NestedTokens(self) -> ReadOnlyCollection: ...


class StringLiteralToken(StringToken):
    pass


class StringToken(Token):
    @property
    def Value(self) -> str: ...


class SubExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, statementBlock: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def SubExpression(self) -> StatementBlockAst: ...


class SwitchFlags:
    #None = 0
    File = 1
    Regex = 2
    Wildcard = 4
    Exact = 8
    CaseSensitive = 16
    Parallel = 32


class SwitchStatementAst(LabeledStatementAst):
    def __init__(self, extent: IScriptExtent, label: str, condition: PipelineBaseAst, flags: SwitchFlags, clauses: Iterable[Tuple], default: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Clauses(self) -> ReadOnlyCollection: ...
    @property
    def Default(self) -> StatementBlockAst: ...
    @property
    def Flags(self) -> SwitchFlags: ...


class ThrowStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, pipeline: PipelineBaseAst): ...
    def Copy(self) -> Ast: ...
    @property
    def IsRethrow(self) -> bool: ...
    @property
    def Pipeline(self) -> PipelineBaseAst: ...


class Token(Object):
    @property
    def Extent(self) -> IScriptExtent: ...
    @property
    def HasError(self) -> bool: ...
    @property
    def Kind(self) -> TokenKind: ...
    @property
    def Text(self) -> str: ...
    @property
    def TokenFlags(self) -> TokenFlags: ...
    def ToString(self) -> str: ...


class TokenFlags:
    #None = 0
    BinaryPrecedenceLogical = 1
    BinaryPrecedenceBitwise = 2
    BinaryPrecedenceComparison = 3
    BinaryPrecedenceAdd = 4
    BinaryPrecedenceMultiply = 5
    BinaryPrecedenceFormat = 6
    BinaryPrecedenceRange = 7
    BinaryPrecedenceMask = 7
    Keyword = 16
    ScriptBlockBlockName = 32
    BinaryOperator = 256
    UnaryOperator = 512
    CaseSensitiveOperator = 1024
    SpecialOperator = 4096
    AssignmentOperator = 8192
    ParseModeInvariant = 32768
    TokenInError = 65536
    DisallowedInRestrictedMode = 131072
    PrefixOrPostfixOperator = 262144
    CommandName = 524288
    MemberName = 1048576
    TypeName = 2097152
    AttributeName = 4194304
    CanConstantFold = 8388608
    StatementDoesntSupportAttributes = 16777216


class TokenKind:
    Unknown = 0
    Variable = 1
    SplattedVariable = 2
    Parameter = 3
    Number = 4
    Label = 5
    Identifier = 6
    Generic = 7
    NewLine = 8
    LineContinuation = 9
    Comment = 10
    EndOfInput = 11
    StringLiteral = 12
    StringExpandable = 13
    HereStringLiteral = 14
    HereStringExpandable = 15
    LParen = 16
    RParen = 17
    LCurly = 18
    RCurly = 19
    LBracket = 20
    RBracket = 21
    AtParen = 22
    AtCurly = 23
    DollarParen = 24
    Semi = 25
    AndAnd = 26
    OrOr = 27
    Ampersand = 28
    Pipe = 29
    Comma = 30
    MinusMinus = 31
    PlusPlus = 32
    DotDot = 33
    ColonColon = 34
    Dot = 35
    Exclaim = 36
    Multiply = 37
    Divide = 38
    Rem = 39
    Plus = 40
    Minus = 41
    Equals = 42
    PlusEquals = 43
    MinusEquals = 44
    MultiplyEquals = 45
    DivideEquals = 46
    RemainderEquals = 47
    Redirection = 48
    RedirectInStd = 49
    Format = 50
    Not = 51
    Bnot = 52
    And = 53
    Or = 54
    Xor = 55
    Band = 56
    Bor = 57
    Bxor = 58
    Join = 59
    Ieq = 60
    Ine = 61
    Ige = 62
    Igt = 63
    Ilt = 64
    Ile = 65
    Ilike = 66
    Inotlike = 67
    Imatch = 68
    Inotmatch = 69
    Ireplace = 70
    Icontains = 71
    Inotcontains = 72
    Iin = 73
    Inotin = 74
    Isplit = 75
    Ceq = 76
    Cne = 77
    Cge = 78
    Cgt = 79
    Clt = 80
    Cle = 81
    Clike = 82
    Cnotlike = 83
    Cmatch = 84
    Cnotmatch = 85
    Creplace = 86
    Ccontains = 87
    Cnotcontains = 88
    Cin = 89
    Cnotin = 90
    Csplit = 91
    Is = 92
    IsNot = 93
    As = 94
    PostfixPlusPlus = 95
    PostfixMinusMinus = 96
    Shl = 97
    Shr = 98
    Colon = 99
    Begin = 119
    Break = 120
    Catch = 121
    Class = 122
    Continue = 123
    Data = 124
    Define = 125
    Do = 126
    Dynamicparam = 127
    Else = 128
    ElseIf = 129
    End = 130
    Exit = 131
    Filter = 132
    Finally = 133
    For = 134
    Foreach = 135
    From = 136
    Function = 137
    If = 138
    In = 139
    Param = 140
    Process = 141
    Return = 142
    Switch = 143
    Throw = 144
    Trap = 145
    Try = 146
    Until = 147
    Using = 148
    Var = 149
    While = 150
    Workflow = 151
    Parallel = 152
    Sequence = 153
    InlineScript = 154
    Configuration = 155
    DynamicKeyword = 156
    Public = 157
    Private = 158
    Static = 159
    Interface = 160
    Enum = 161
    Namespace = 162
    Module = 163
    Type = 164
    Assembly = 165
    Command = 166
    Hidden = 167
    Base = 168


class TokenTraits(Object):
    def GetTraits(kind: TokenKind) -> TokenFlags: ...
    def HasTrait(kind: TokenKind, flag: TokenFlags) -> bool: ...
    def Text(kind: TokenKind) -> str: ...


class TrapStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, trapType: TypeConstraintAst, body: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Body(self) -> StatementBlockAst: ...
    @property
    def TrapType(self) -> TypeConstraintAst: ...


class TryStatementAst(StatementAst):
    def __init__(self, extent: IScriptExtent, body: StatementBlockAst, catchClauses: Iterable[CatchClauseAst], finally: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Body(self) -> StatementBlockAst: ...
    @property
    def CatchClauses(self) -> ReadOnlyCollection: ...
    @property
    def Finally(self) -> StatementBlockAst: ...


class TypeAttributes:
    #None = 0
    Class = 1
    Interface = 2
    Enum = 4


class TypeConstraintAst(AttributeBaseAst):
    @overload
    def __init__(self, extent: IScriptExtent, typeName: ITypeName): ...
    @overload
    def __init__(self, extent: IScriptExtent, type: Type): ...
    def Copy(self) -> Ast: ...


class TypeDefinitionAst(StatementAst):
    def __init__(self, extent: IScriptExtent, name: str, attributes: Iterable[AttributeAst], members: Iterable[MemberAst], typeAttributes: TypeAttributes, baseTypes: Iterable[TypeConstraintAst]): ...
    def Copy(self) -> Ast: ...
    @property
    def Attributes(self) -> ReadOnlyCollection: ...
    @property
    def BaseTypes(self) -> ReadOnlyCollection: ...
    @property
    def IsClass(self) -> bool: ...
    @property
    def IsEnum(self) -> bool: ...
    @property
    def IsInterface(self) -> bool: ...
    @property
    def Members(self) -> ReadOnlyCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeAttributes(self) -> TypeAttributes: ...


class TypeExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, typeName: ITypeName): ...
    def Copy(self) -> Ast: ...
    @property
    def StaticType(self) -> Type: ...
    @property
    def TypeName(self) -> ITypeName: ...


class TypeName(Object):
    @overload
    def __init__(self, extent: IScriptExtent, name: str): ...
    @overload
    def __init__(self, extent: IScriptExtent, name: str, assembly: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def Extent(self) -> IScriptExtent: ...
    @property
    def FullName(self) -> str: ...
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsGeneric(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetReflectionAttributeType(self) -> Type: ...
    def GetReflectionType(self) -> Type: ...
    def ToString(self) -> str: ...


class UnaryExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, tokenKind: TokenKind, child: ExpressionAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Child(self) -> ExpressionAst: ...
    @property
    def StaticType(self) -> Type: ...
    @property
    def TokenKind(self) -> TokenKind: ...


class UsingExpressionAst(ExpressionAst):
    def __init__(self, extent: IScriptExtent, expressionAst: ExpressionAst): ...
    def Copy(self) -> Ast: ...
    def ExtractUsingVariable(usingExpressionAst: UsingExpressionAst) -> VariableExpressionAst: ...
    @property
    def SubExpression(self) -> ExpressionAst: ...


class UsingStatementAst(StatementAst):
    @overload
    def __init__(self, extent: IScriptExtent, moduleSpecification: HashtableAst): ...
    @overload
    def __init__(self, extent: IScriptExtent, kind: UsingStatementKind, name: StringConstantExpressionAst): ...
    @overload
    def __init__(self, extent: IScriptExtent, aliasName: StringConstantExpressionAst, moduleSpecification: HashtableAst): ...
    @overload
    def __init__(self, extent: IScriptExtent, kind: UsingStatementKind, aliasName: StringConstantExpressionAst, resolvedAliasAst: StringConstantExpressionAst): ...
    def Copy(self) -> Ast: ...
    @property
    def Alias(self) -> StringConstantExpressionAst: ...
    @property
    def ModuleSpecification(self) -> HashtableAst: ...
    @property
    def Name(self) -> StringConstantExpressionAst: ...
    @property
    def UsingStatementKind(self) -> UsingStatementKind: ...


class UsingStatementKind:
    Assembly = 0
    Command = 1
    Module = 2
    Namespace = 3
    Type = 4


class VariableExpressionAst(ExpressionAst):
    @overload
    def __init__(self, extent: IScriptExtent, variableName: str, splatted: bool): ...
    @overload
    def __init__(self, extent: IScriptExtent, variablePath: VariablePath, splatted: bool): ...
    def Copy(self) -> Ast: ...
    @property
    def Splatted(self) -> bool: ...
    @property
    def VariablePath(self) -> VariablePath: ...
    def IsConstantVariable(self) -> bool: ...


class VariableToken(Token):
    @property
    def Name(self) -> str: ...
    @property
    def VariablePath(self) -> VariablePath: ...


class WhileStatementAst(LoopStatementAst):
    def __init__(self, extent: IScriptExtent, label: str, condition: PipelineBaseAst, body: StatementBlockAst): ...
    def Copy(self) -> Ast: ...
