from typing import Tuple, Set, Iterable, List


class AlternateDataStreamUtilities(Object):
    pass


class AlternateStreamData(Object):
    def __init__(self): ...
    @property
    def FileName(self) -> str: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Stream(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> None: ...
    @Length.setter
    def Length(self, value: Int64) -> None: ...
    @Stream.setter
    def Stream(self, value: str) -> None: ...


class AutomationNull(Object):
    @property
    def Value() -> PSObject: ...


class ClassOps(Object):
    def CallBaseCtor(target: Object, ci: ConstructorInfo, args: Set(Object)) -> None: ...
    def CallMethodNonVirtually(target: Object, mi: MethodInfo, args: Set(Object)) -> Object: ...
    def CallVoidMethodNonVirtually(target: Object, mi: MethodInfo, args: Set(Object)) -> None: ...
    def ValidateSetProperty(type: Type, propertyName: str, value: Object) -> None: ...


class CmdletMetadataAttribute(Attribute):
    pass


class CommonParameters(Object):
    @property
    def Debug(self) -> SwitchParameter: ...
    @property
    def ErrorAction(self) -> ActionPreference: ...
    @property
    def ErrorVariable(self) -> str: ...
    @property
    def InformationAction(self) -> ActionPreference: ...
    @property
    def InformationVariable(self) -> str: ...
    @property
    def OutBuffer(self) -> int: ...
    @property
    def OutVariable(self) -> str: ...
    @property
    def PipelineVariable(self) -> str: ...
    @property
    def Verbose(self) -> SwitchParameter: ...
    @property
    def WarningAction(self) -> ActionPreference: ...
    @property
    def WarningVariable(self) -> str: ...
    @Debug.setter
    def Debug(self, value: SwitchParameter) -> None: ...
    @ErrorAction.setter
    def ErrorAction(self, value: ActionPreference) -> None: ...
    @ErrorVariable.setter
    def ErrorVariable(self, value: str) -> None: ...
    @InformationAction.setter
    def InformationAction(self, value: ActionPreference) -> None: ...
    @InformationVariable.setter
    def InformationVariable(self, value: str) -> None: ...
    @OutBuffer.setter
    def OutBuffer(self, value: int) -> None: ...
    @OutVariable.setter
    def OutVariable(self, value: str) -> None: ...
    @PipelineVariable.setter
    def PipelineVariable(self, value: str) -> None: ...
    @Verbose.setter
    def Verbose(self, value: SwitchParameter) -> None: ...
    @WarningAction.setter
    def WarningAction(self, value: ActionPreference) -> None: ...
    @WarningVariable.setter
    def WarningVariable(self, value: str) -> None: ...


class DebuggerUtils(Object):
    def EndMonitoringRunspace(debugger: Debugger, runspaceInfo: PSMonitorRunspaceInfo) -> None: ...
    def GetWorkflowDebuggerFunctions() -> Iterable[str]: ...
    def ShouldAddCommandToHistory(command: str) -> bool: ...
    def StartMonitoringRunspace(debugger: Debugger, runspaceInfo: PSMonitorRunspaceInfo) -> None: ...


class IAstToWorkflowConverter:
    def CompileWorkflow(self, name: str, definition: str, initialSessionState: InitialSessionState) -> WorkflowInfo: ...
    @overload
    def CompileWorkflows(self, ast: ScriptBlockAst, definingModule: PSModuleInfo) -> List: ...
    @overload
    def CompileWorkflows(self, ast: ScriptBlockAst, definingModule: PSModuleInfo, rootWorkflowName: str) -> List: ...
    @overload
    def CompileWorkflows(self, ast: ScriptBlockAst, definingModule: PSModuleInfo, initialSessionState: InitialSessionState) -> Tuple[List, ParseException]: ...
    @overload
    def CompileWorkflows(self, ast: ScriptBlockAst, definingModule: PSModuleInfo, initialSessionState: InitialSessionState, languageMode: Nullable) -> Tuple[List, ParseException]: ...
    @overload
    def CompileWorkflows(self, ast: ScriptBlockAst, definingModule: PSModuleInfo, initialSessionState: InitialSessionState, rootWorkflowName: str) -> Tuple[List, ParseException]: ...
    def ValidateAst(self, ast: FunctionDefinitionAst) -> List: ...


class InternalCommand(Object):
    @property
    def CommandOrigin(self) -> CommandOrigin: ...


class InternalTestHooks(Object):
    def SetTestHook(property: str, value: bool) -> None: ...


class ParsingBaseAttribute(CmdletMetadataAttribute):
    pass


class PSEmbeddedMonitorRunspaceInfo(PSMonitorRunspaceInfo):
    def __init__(self, runspace: Runspace, runspaceType: PSMonitorRunspaceType, command: PowerShell, parentDebuggerId: Guid): ...
    @property
    def Command(self) -> PowerShell: ...
    @property
    def ParentDebuggerId(self) -> Guid: ...


class PSMonitorRunspaceInfo(Object):
    @property
    def Runspace(self) -> Runspace: ...
    @property
    def RunspaceType(self) -> PSMonitorRunspaceType: ...


class PSMonitorRunspaceType:
    Standalone = 0
    InvokeCommand = 1
    WorkflowInlineScript = 2


class PSStandaloneMonitorRunspaceInfo(PSMonitorRunspaceInfo):
    def __init__(self, runspace: Runspace): ...


class ScriptBlockMemberMethodWrapper(Object):
    def InvokeHelper(self, instance: Object, sessionStateInternal: Object, args: Set(Object)) -> None: ...
    def InvokeHelperT(self, instance: Object, sessionStateInternal: Object, args: Set(Object)) -> T: ...


class SecuritySupport(Object):
    def IsProductBinary(file: str) -> bool: ...


class SessionStateKeeper(Object):
    def GetSessionState(self) -> Object: ...


class ShouldProcessParameters(Object):
    @property
    def Confirm(self) -> SwitchParameter: ...
    @property
    def WhatIf(self) -> SwitchParameter: ...
    @Confirm.setter
    def Confirm(self, value: SwitchParameter) -> None: ...
    @WhatIf.setter
    def WhatIf(self, value: SwitchParameter) -> None: ...


class TransactionParameters(Object):
    @property
    def UseTransaction(self) -> SwitchParameter: ...
    @UseTransaction.setter
    def UseTransaction(self, value: SwitchParameter) -> None: ...
