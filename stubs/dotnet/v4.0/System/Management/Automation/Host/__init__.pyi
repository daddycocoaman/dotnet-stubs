from typing import Tuple, Set, Iterable, List


class BufferCell(ValueType):
    def __init__(self, character: Char, foreground: ConsoleColor, background: ConsoleColor, bufferCellType: BufferCellType): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def BackgroundColor(self) -> ConsoleColor: ...
    @property
    def BufferCellType(self) -> BufferCellType: ...
    @property
    def Character(self) -> Char: ...
    @property
    def ForegroundColor(self) -> ConsoleColor: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(first: BufferCell, second: BufferCell) -> bool: ...
    def op_Inequality(first: BufferCell, second: BufferCell) -> bool: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: ConsoleColor) -> None: ...
    @BufferCellType.setter
    def BufferCellType(self, value: BufferCellType) -> None: ...
    @Character.setter
    def Character(self, value: Char) -> None: ...
    @ForegroundColor.setter
    def ForegroundColor(self, value: ConsoleColor) -> None: ...
    def ToString(self) -> str: ...


class BufferCellType:
    Complete = 0
    Leading = 1
    Trailing = 2


class ChoiceDescription(Object):
    @overload
    def __init__(self, label: str): ...
    @overload
    def __init__(self, label: str, helpMessage: str): ...
    @property
    def HelpMessage(self) -> str: ...
    @property
    def Label(self) -> str: ...
    @HelpMessage.setter
    def HelpMessage(self, value: str) -> None: ...


class ControlKeyStates:
    RightAltPressed = 1
    LeftAltPressed = 2
    RightCtrlPressed = 4
    LeftCtrlPressed = 8
    ShiftPressed = 16
    NumLockOn = 32
    ScrollLockOn = 64
    CapsLockOn = 128
    EnhancedKey = 256


class Coordinates(ValueType):
    def __init__(self, x: int, y: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(first: Coordinates, second: Coordinates) -> bool: ...
    def op_Inequality(first: Coordinates, second: Coordinates) -> bool: ...
    @X.setter
    def X(self, value: int) -> None: ...
    @Y.setter
    def Y(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class FieldDescription(Object):
    def __init__(self, name: str): ...
    @property
    def Attributes(self) -> Collection: ...
    @property
    def DefaultValue(self) -> PSObject: ...
    @property
    def HelpMessage(self) -> str: ...
    @property
    def IsMandatory(self) -> bool: ...
    @property
    def Label(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParameterAssemblyFullName(self) -> str: ...
    @property
    def ParameterTypeFullName(self) -> str: ...
    @property
    def ParameterTypeName(self) -> str: ...
    @DefaultValue.setter
    def DefaultValue(self, value: PSObject) -> None: ...
    @HelpMessage.setter
    def HelpMessage(self, value: str) -> None: ...
    @IsMandatory.setter
    def IsMandatory(self, value: bool) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...
    def SetParameterType(self, parameterType: Type) -> None: ...


class HostException(RuntimeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception, errorId: str, errorCategory: ErrorCategory): ...


class IHostSupportsInteractiveSession:
    @property
    def IsRunspacePushed(self) -> bool: ...
    @property
    def Runspace(self) -> Runspace: ...
    def PopRunspace(self) -> None: ...
    def PushRunspace(self, runspace: Runspace) -> None: ...


class IHostUISupportsMultipleChoiceSelection:
    def PromptForChoice(self, caption: str, message: str, choices: Collection, defaultChoices: Iterable[int]) -> Collection: ...


class KeyInfo(ValueType):
    def __init__(self, virtualKeyCode: int, ch: Char, controlKeyState: ControlKeyStates, keyDown: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Character(self) -> Char: ...
    @property
    def ControlKeyState(self) -> ControlKeyStates: ...
    @property
    def KeyDown(self) -> bool: ...
    @property
    def VirtualKeyCode(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(first: KeyInfo, second: KeyInfo) -> bool: ...
    def op_Inequality(first: KeyInfo, second: KeyInfo) -> bool: ...
    @Character.setter
    def Character(self, value: Char) -> None: ...
    @ControlKeyState.setter
    def ControlKeyState(self, value: ControlKeyStates) -> None: ...
    @KeyDown.setter
    def KeyDown(self, value: bool) -> None: ...
    @VirtualKeyCode.setter
    def VirtualKeyCode(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class PromptingException(HostException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception, errorId: str, errorCategory: ErrorCategory): ...


class PSHost(Object):
    def EnterNestedPrompt(self) -> None: ...
    def ExitNestedPrompt(self) -> None: ...
    @property
    def CurrentCulture(self) -> CultureInfo: ...
    @property
    def CurrentUICulture(self) -> CultureInfo: ...
    @property
    def DebuggerEnabled(self) -> bool: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def PrivateData(self) -> PSObject: ...
    @property
    def UI(self) -> PSHostUserInterface: ...
    @property
    def Version(self) -> Version: ...
    def NotifyBeginApplication(self) -> None: ...
    def NotifyEndApplication(self) -> None: ...
    @DebuggerEnabled.setter
    def DebuggerEnabled(self, value: bool) -> None: ...
    def SetShouldExit(self, exitCode: int) -> None: ...


class PSHostRawUserInterface(Object):
    def FlushInputBuffer(self) -> None: ...
    @property
    def BackgroundColor(self) -> ConsoleColor: ...
    @property
    def BufferSize(self) -> Size: ...
    @property
    def CursorPosition(self) -> Coordinates: ...
    @property
    def CursorSize(self) -> int: ...
    @property
    def ForegroundColor(self) -> ConsoleColor: ...
    @property
    def KeyAvailable(self) -> bool: ...
    @property
    def MaxPhysicalWindowSize(self) -> Size: ...
    @property
    def MaxWindowSize(self) -> Size: ...
    @property
    def WindowPosition(self) -> Coordinates: ...
    @property
    def WindowSize(self) -> Size: ...
    @property
    def WindowTitle(self) -> str: ...
    def GetBufferContents(self, rectangle: Rectangle) -> BufferCell[,]: ...
    @overload
    def LengthInBufferCells(self, source: str) -> int: ...
    @overload
    def LengthInBufferCells(self, source: Char) -> int: ...
    @overload
    def LengthInBufferCells(self, source: str, offset: int) -> int: ...
    @overload
    def NewBufferCellArray(self, size: Size, contents: BufferCell) -> BufferCell[,]: ...
    @overload
    def NewBufferCellArray(self, contents: Set(str), foregroundColor: ConsoleColor, backgroundColor: ConsoleColor) -> BufferCell[,]: ...
    @overload
    def NewBufferCellArray(self, width: int, height: int, contents: BufferCell) -> BufferCell[,]: ...
    @overload
    def ReadKey(self) -> KeyInfo: ...
    @overload
    def ReadKey(self, options: ReadKeyOptions) -> KeyInfo: ...
    def ScrollBufferContents(self, source: Rectangle, destination: Coordinates, clip: Rectangle, fill: BufferCell) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: ConsoleColor) -> None: ...
    @BufferSize.setter
    def BufferSize(self, value: Size) -> None: ...
    @CursorPosition.setter
    def CursorPosition(self, value: Coordinates) -> None: ...
    @CursorSize.setter
    def CursorSize(self, value: int) -> None: ...
    @ForegroundColor.setter
    def ForegroundColor(self, value: ConsoleColor) -> None: ...
    @WindowPosition.setter
    def WindowPosition(self, value: Coordinates) -> None: ...
    @WindowSize.setter
    def WindowSize(self, value: Size) -> None: ...
    @WindowTitle.setter
    def WindowTitle(self, value: str) -> None: ...
    @overload
    def SetBufferContents(self, origin: Coordinates, contents: BufferCell[,]) -> None: ...
    @overload
    def SetBufferContents(self, rectangle: Rectangle, fill: BufferCell) -> None: ...


class PSHostUserInterface(Object):
    @property
    def RawUI(self) -> PSHostRawUserInterface: ...
    @property
    def SupportsVirtualTerminal(self) -> bool: ...
    def Prompt(self, caption: str, message: str, descriptions: Collection) -> Dictionary: ...
    def PromptForChoice(self, caption: str, message: str, choices: Collection, defaultChoice: int) -> int: ...
    @overload
    def PromptForCredential(self, caption: str, message: str, userName: str, targetName: str) -> PSCredential: ...
    @overload
    def PromptForCredential(self, caption: str, message: str, userName: str, targetName: str, allowedCredentialTypes: PSCredentialTypes, options: PSCredentialUIOptions) -> PSCredential: ...
    def ReadLine(self) -> str: ...
    def ReadLineAsSecureString(self) -> SecureString: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, foregroundColor: ConsoleColor, backgroundColor: ConsoleColor, value: str) -> None: ...
    def WriteDebugLine(self, message: str) -> None: ...
    def WriteErrorLine(self, value: str) -> None: ...
    def WriteInformation(self, record: InformationRecord) -> None: ...
    @overload
    def WriteLine(self) -> None: ...
    @overload
    def WriteLine(self, value: str) -> None: ...
    @overload
    def WriteLine(self, foregroundColor: ConsoleColor, backgroundColor: ConsoleColor, value: str) -> None: ...
    def WriteProgress(self, sourceId: Int64, record: ProgressRecord) -> None: ...
    def WriteVerboseLine(self, message: str) -> None: ...
    def WriteWarningLine(self, message: str) -> None: ...


class ReadKeyOptions:
    AllowCtrlC = 1
    NoEcho = 2
    IncludeKeyDown = 4
    IncludeKeyUp = 8


class Rectangle(ValueType):
    @overload
    def __init__(self, upperLeft: Coordinates, lowerRight: Coordinates): ...
    @overload
    def __init__(self, left: int, top: int, right: int, bottom: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Left(self) -> int: ...
    @property
    def Right(self) -> int: ...
    @property
    def Top(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(first: Rectangle, second: Rectangle) -> bool: ...
    def op_Inequality(first: Rectangle, second: Rectangle) -> bool: ...
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Right.setter
    def Right(self, value: int) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class Size(ValueType):
    def __init__(self, width: int, height: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(first: Size, second: Size) -> bool: ...
    def op_Inequality(first: Size, second: Size) -> bool: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def ToString(self) -> str: ...
