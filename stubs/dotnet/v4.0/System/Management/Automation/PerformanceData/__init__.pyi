from typing import Tuple, Set, Iterable, List


class CounterInfo(ValueType):
    @overload
    def __init__(self, id: int, type: CounterType): ...
    @overload
    def __init__(self, id: int, type: CounterType, name: str): ...
    @property
    def Id(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> CounterType: ...


class CounterSetInstanceBase(Object):
    def Dispose(self) -> None: ...
    @overload
    def GetCounterValue(self, counterId: int, isNumerator: bool) -> Tuple[bool, Int64]: ...
    @overload
    def GetCounterValue(self, counterName: str, isNumerator: bool) -> Tuple[bool, Int64]: ...
    @overload
    def SetCounterValue(self, counterId: int, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def SetCounterValue(self, counterName: str, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterId: int, stepAmount: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterName: str, stepAmount: Int64, isNumerator: bool) -> bool: ...


class CounterSetRegistrarBase(Object):
    def DisposeCounterSetInstance(self) -> None: ...
    @property
    def CounterInfoArray(self) -> Set(CounterInfo): ...
    @property
    def CounterSetId(self) -> Guid: ...
    @property
    def CounterSetInstance(self) -> CounterSetInstanceBase: ...
    @property
    def CounterSetInstType(self) -> CounterSetInstanceType: ...
    @property
    def CounterSetName(self) -> str: ...
    @property
    def ProviderId(self) -> Guid: ...


class PSCounterSetInstance(CounterSetInstanceBase):
    def __init__(self, counterSetRegBaseObj: CounterSetRegistrarBase): ...
    def Dispose(self) -> None: ...
    @overload
    def GetCounterValue(self, counterId: int, isNumerator: bool) -> Tuple[bool, Int64]: ...
    @overload
    def GetCounterValue(self, counterName: str, isNumerator: bool) -> Tuple[bool, Int64]: ...
    @overload
    def SetCounterValue(self, counterId: int, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def SetCounterValue(self, counterName: str, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterId: int, stepAmount: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterName: str, stepAmount: Int64, isNumerator: bool) -> bool: ...


class PSCounterSetRegistrar(CounterSetRegistrarBase):
    @overload
    def __init__(self, srcPSCounterSetRegistrar: PSCounterSetRegistrar): ...
    @overload
    def __init__(self, providerId: Guid, counterSetId: Guid, counterSetInstType: CounterSetInstanceType, counterInfoArray: Set(CounterInfo), counterSetName: str): ...
    def DisposeCounterSetInstance(self) -> None: ...


class PSPerfCountersMgr(Object):
    def AddCounterSetInstance(self, counterSetRegistrarInstance: CounterSetRegistrarBase) -> bool: ...
    @property
    def Instance() -> PSPerfCountersMgr: ...
    def GetCounterSetInstanceName(self) -> str: ...
    @overload
    def IsCounterSetRegistered(self, counterSetName: str) -> Tuple[bool, Guid]: ...
    @overload
    def IsCounterSetRegistered(self, counterSetId: Guid) -> Tuple[bool, CounterSetInstanceBase]: ...
    @overload
    def SetCounterValue(self, counterSetName: str, counterName: str, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def SetCounterValue(self, counterSetId: Guid, counterId: int, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def SetCounterValue(self, counterSetId: Guid, counterName: str, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def SetCounterValue(self, counterSetName: str, counterId: int, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterSetId: Guid, counterName: str, stepAmount: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterSetId: Guid, counterId: int, stepAmount: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterSetName: str, counterId: int, stepAmount: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterSetName: str, counterName: str, stepAmount: Int64, isNumerator: bool) -> bool: ...
