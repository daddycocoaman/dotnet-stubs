from typing import Tuple, Set, Iterable, List


class PSPerfCountersMgr(Object):
    def AddCounterSetInstance(self, counterSetRegistrarInstance: CounterSetRegistrarBase) -> bool: ...
    @property
    def Instance() -> PSPerfCountersMgr: ...
    def GetCounterSetInstanceName(self) -> str: ...
    @overload
    def IsCounterSetRegistered(self, counterSetName: str) -> Tuple[bool, Guid]: ...
    @overload
    def IsCounterSetRegistered(self, counterSetId: Guid) -> Tuple[bool, CounterSetInstanceBase]: ...
    @overload
    def SetCounterValue(self, counterSetName: str, counterName: str, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def SetCounterValue(self, counterSetId: Guid, counterId: int, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def SetCounterValue(self, counterSetId: Guid, counterName: str, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def SetCounterValue(self, counterSetName: str, counterId: int, counterValue: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterSetId: Guid, counterName: str, stepAmount: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterSetId: Guid, counterId: int, stepAmount: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterSetName: str, counterId: int, stepAmount: Int64, isNumerator: bool) -> bool: ...
    @overload
    def UpdateCounterByValue(self, counterSetName: str, counterName: str, stepAmount: Int64, isNumerator: bool) -> bool: ...
