from typing import Tuple, Set, Iterable, List


class TextExpression(Object):
    @property
    def DefaultNamespaces() -> List[str]: ...
    @property
    def DefaultReferences() -> List[AssemblyReference]: ...
    def GetNamespaces(target: Object) -> List[str]: ...
    def GetNamespacesForImplementation(target: Object) -> List[str]: ...
    def GetNamespacesInScope(activity: Activity) -> List[str]: ...
    def GetReferences(target: Object) -> List[AssemblyReference]: ...
    def GetReferencesForImplementation(target: Object) -> List[AssemblyReference]: ...
    def GetReferencesInScope(activity: Activity) -> List[AssemblyReference]: ...
    @overload
    def SetNamespaces(target: Object, namespaces: Set(str)) -> None: ...
    @overload
    def SetNamespaces(target: Object, namespaces: List[str]) -> None: ...
    @overload
    def SetNamespacesForImplementation(target: Object, namespaces: List[str]) -> None: ...
    @overload
    def SetNamespacesForImplementation(target: Object, namespaces: Set(str)) -> None: ...
    @overload
    def SetReferences(target: Object, references: List[AssemblyReference]) -> None: ...
    @overload
    def SetReferences(target: Object, references: Set(AssemblyReference)) -> None: ...
    @overload
    def SetReferencesForImplementation(target: Object, references: List[AssemblyReference]) -> None: ...
    @overload
    def SetReferencesForImplementation(target: Object, references: Set(AssemblyReference)) -> None: ...
    def ShouldSerializeNamespaces(target: Object) -> bool: ...
    def ShouldSerializeNamespacesForImplementation(target: Object) -> bool: ...
    def ShouldSerializeReferences(target: Object) -> bool: ...
    def ShouldSerializeReferencesForImplementation(target: Object) -> bool: ...
