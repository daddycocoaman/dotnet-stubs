from typing import Tuple, Set, Iterable, List


class ActivityBlockingUpdate(Object):
    @overload
    def __init__(self, activity: Activity, originalActivityId: str, reason: str): ...
    @overload
    def __init__(self, updatedActivityId: str, originalActivityId: str, reason: str): ...
    @overload
    def __init__(self, activity: Activity, originalActivityId: str, reason: str, activityInstanceId: str): ...
    @overload
    def __init__(self, updatedActivityId: str, originalActivityId: str, reason: str, activityInstanceId: str): ...
    @property
    def Activity(self) -> Activity: ...
    @property
    def ActivityInstanceId(self) -> str: ...
    @property
    def OriginalActivityId(self) -> str: ...
    @property
    def Reason(self) -> str: ...
    @property
    def UpdatedActivityId(self) -> str: ...


class DynamicUpdateInfo(Object):
    def GetMapItem(instance: Object) -> DynamicUpdateMapItem: ...
    def GetOriginalActivityBuilder(instance: Object) -> ActivityBuilder: ...
    def GetOriginalDefinition(instance: Object) -> Activity: ...
    def SetMapItem(instance: Object, mapItem: DynamicUpdateMapItem) -> None: ...
    def SetOriginalActivityBuilder(instance: Object, originalActivityBuilder: ActivityBuilder) -> None: ...
    def SetOriginalDefinition(instance: Object, originalDefinition: Activity) -> None: ...


class DynamicUpdateMap(Object):
    @overload
    def CalculateImplementationMapItems(activityDefinitionToBeUpdated: Activity) -> IDictionary: ...
    @overload
    def CalculateImplementationMapItems(activityDefinitionToBeUpdated: Activity, environment: LocationReferenceEnvironment) -> IDictionary: ...
    @overload
    def CalculateMapItems(workflowDefinitionToBeUpdated: Activity) -> IDictionary: ...
    @overload
    def CalculateMapItems(workflowDefinitionToBeUpdated: Activity, environment: LocationReferenceEnvironment) -> IDictionary: ...
    @property
    def NoChanges() -> DynamicUpdateMap: ...
    @overload
    def Merge(maps: Set(DynamicUpdateMap)) -> DynamicUpdateMap: ...
    @overload
    def Merge(maps: Iterable[DynamicUpdateMap]) -> DynamicUpdateMap: ...
    def Query(self, updatedWorkflowDefinition: Activity, originalWorkflowDefinition: Activity) -> DynamicUpdateMapQuery: ...


class DynamicUpdateMapBuilder(Object):
    def __init__(self): ...
    @overload
    def CreateMap(self) -> DynamicUpdateMap: ...
    @overload
    def CreateMap(self) -> Tuple[DynamicUpdateMap, List[ActivityBlockingUpdate]]: ...
    @property
    def DisallowUpdateInside(self) -> ISet: ...
    @property
    def ForImplementation(self) -> bool: ...
    @property
    def LookupImplementationMap(self) -> Func: ...
    @property
    def LookupMapItem(self) -> Func: ...
    @property
    def OriginalEnvironment(self) -> LocationReferenceEnvironment: ...
    @property
    def OriginalWorkflowDefinition(self) -> Activity: ...
    @property
    def UpdatedEnvironment(self) -> LocationReferenceEnvironment: ...
    @property
    def UpdatedWorkflowDefinition(self) -> Activity: ...
    @ForImplementation.setter
    def ForImplementation(self, value: bool) -> None: ...
    @LookupImplementationMap.setter
    def LookupImplementationMap(self, value: Func) -> None: ...
    @LookupMapItem.setter
    def LookupMapItem(self, value: Func) -> None: ...
    @OriginalEnvironment.setter
    def OriginalEnvironment(self, value: LocationReferenceEnvironment) -> None: ...
    @OriginalWorkflowDefinition.setter
    def OriginalWorkflowDefinition(self, value: Activity) -> None: ...
    @UpdatedEnvironment.setter
    def UpdatedEnvironment(self, value: LocationReferenceEnvironment) -> None: ...
    @UpdatedWorkflowDefinition.setter
    def UpdatedWorkflowDefinition(self, value: Activity) -> None: ...


class DynamicUpdateMapItem(Object):
    pass


class DynamicUpdateMapQuery(Object):
    def CanApplyUpdateWhileRunning(self, activity: Activity) -> bool: ...
    @overload
    def FindMatch(self, activity: Activity) -> Activity: ...
    @overload
    def FindMatch(self, variable: Variable) -> Variable: ...


class DynamicUpdateServices(Object):
    @overload
    def CreateUpdateMap(updatedWorkflowDefinition: Activity) -> DynamicUpdateMap: ...
    @overload
    def CreateUpdateMap(updatedActivityDefinition: ActivityBuilder) -> DynamicUpdateMap: ...
    @overload
    def CreateUpdateMap(updatedWorkflowDefinition: Activity, disallowUpdateInsideActivities: Iterable[Activity]) -> DynamicUpdateMap: ...
    @overload
    def CreateUpdateMap(updatedActivityDefinition: ActivityBuilder, disallowUpdateInsideActivities: Iterable[Activity]) -> DynamicUpdateMap: ...
    @overload
    def CreateUpdateMap(updatedWorkflowDefinition: Activity, disallowUpdateInsideActivities: Iterable[Activity]) -> Tuple[DynamicUpdateMap, List[ActivityBlockingUpdate]]: ...
    @overload
    def CreateUpdateMap(updatedActivityDefinition: ActivityBuilder, disallowUpdateInsideActivities: Iterable[Activity]) -> Tuple[DynamicUpdateMap, List[ActivityBlockingUpdate]]: ...
    def GetImplementationMap(targetActivity: Activity) -> DynamicUpdateMap: ...
    @overload
    def PrepareForUpdate(workflowDefinitionToBeUpdated: Activity) -> None: ...
    @overload
    def PrepareForUpdate(activityDefinitionToBeUpdated: ActivityBuilder) -> None: ...
    def SetImplementationMap(targetActivity: Activity, implementationMap: DynamicUpdateMap) -> None: ...


class InstanceUpdateException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, blockingActivities: List[ActivityBlockingUpdate]): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, blockingActivities: List[ActivityBlockingUpdate]): ...
    @overload
    def __init__(self, message: str, blockingActivities: List[ActivityBlockingUpdate], innerException: Exception): ...
    @property
    def BlockingActivities(self) -> List[ActivityBlockingUpdate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class NativeActivityUpdateContext(Object):
    @overload
    def CreateBookmark(self) -> Bookmark: ...
    @overload
    def CreateBookmark(self, callback: BookmarkCallback) -> Bookmark: ...
    @overload
    def CreateBookmark(self, name: str) -> Bookmark: ...
    @overload
    def CreateBookmark(self, callback: BookmarkCallback, options: BookmarkOptions) -> Bookmark: ...
    @overload
    def CreateBookmark(self, name: str, callback: BookmarkCallback) -> Bookmark: ...
    @overload
    def CreateBookmark(self, name: str, callback: BookmarkCallback, scope: BookmarkScope) -> Bookmark: ...
    @overload
    def CreateBookmark(self, name: str, callback: BookmarkCallback, options: BookmarkOptions) -> Bookmark: ...
    @overload
    def CreateBookmark(self, name: str, callback: BookmarkCallback, scope: BookmarkScope, options: BookmarkOptions) -> Bookmark: ...
    def DisallowUpdate(self, reason: str) -> None: ...
    def FindExecutionProperty(self, name: str) -> Object: ...
    @property
    def ActivityInstanceId(self) -> str: ...
    @property
    def DefaultBookmarkScope(self) -> BookmarkScope: ...
    @property
    def IsCancellationRequested(self) -> bool: ...
    def GetLocation(self, variable: Variable) -> Location: ...
    @overload
    def GetSavedOriginalValue(self, childActivity: Activity) -> Object: ...
    @overload
    def GetSavedOriginalValue(self, propertyName: str) -> Object: ...
    @overload
    def GetValue(self, variable: Variable) -> Object: ...
    @overload
    def GetValue(self, variable: Variable) -> T: ...
    @overload
    def GetValue(self, runtimeArgument: RuntimeArgument) -> Object: ...
    @overload
    def GetValue(self, argument: Argument) -> Object: ...
    def IsNewlyAdded(self, childActivity: Activity) -> bool: ...
    def RemoveAllBookmarks(self) -> None: ...
    @overload
    def RemoveBookmark(self, name: str) -> bool: ...
    @overload
    def RemoveBookmark(self, bookmark: Bookmark) -> bool: ...
    @overload
    def RemoveBookmark(self, name: str, scope: BookmarkScope) -> bool: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction, argument: T, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction, argument1: T1, argument2: T2, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`3, argument1: T1, argument2: T2, argument3: T3, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`4, argument1: T1, argument2: T2, argument3: T3, argument4: T4, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`5, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`6, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`7, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`8, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`9, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`10, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`11, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`12, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`13, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`14, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`15, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, argument15: T15, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`16, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, argument15: T15, argument16: T16, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleActivity(self, activity: Activity) -> None: ...
    @overload
    def ScheduleActivity(self, activity: Activity, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleActivity(self, activity: Activity, onCompleted: CompletionCallback) -> None: ...
    @overload
    def ScheduleActivity(self, activity: Activity, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleActivity(self, activity: Activity, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    def ScheduleDelegate(self, activityDelegate: ActivityDelegate, inputParameters: IDictionary, onCompleted: DelegateCompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc, argument: T, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`3, argument1: T1, argument2: T2, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`4, argument1: T1, argument2: T2, argument3: T3, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`5, argument1: T1, argument2: T2, argument3: T3, argument4: T4, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`6, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`7, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`8, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`9, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`10, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`11, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`12, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`13, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`14, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`15, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`16, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, argument15: T15, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`17, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, argument15: T15, argument16: T16, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> None: ...
    @overload
    def SetValue(self, variable: Variable, value: Object) -> None: ...
    @overload
    def SetValue(self, variable: Variable, value: T) -> None: ...
    @overload
    def SetValue(self, argument: Argument, value: Object) -> None: ...


class NativeActivityUpdateMapMetadata(UpdateMapMetadata):
    @overload
    def SaveOriginalValue(self, updatedChildActivity: Activity, originalValue: Object) -> None: ...
    @overload
    def SaveOriginalValue(self, propertyName: str, originalValue: Object) -> None: ...


class UpdateMapMetadata(Object):
    @overload
    def AddMatch(self, updatedChild: Activity, originalChild: Activity) -> None: ...
    @overload
    def AddMatch(self, updatedVariable: Variable, originalVariable: Variable) -> None: ...
    def AllowUpdateInsideThisActivity(self) -> None: ...
    def DisallowUpdateInsideThisActivity(self, reason: str) -> None: ...
    @overload
    def GetMatch(self, updatedChild: Activity) -> Activity: ...
    @overload
    def GetMatch(self, updatedVariable: Variable) -> Variable: ...
    def IsReferenceToImportedChild(self, childActivity: Activity) -> bool: ...
