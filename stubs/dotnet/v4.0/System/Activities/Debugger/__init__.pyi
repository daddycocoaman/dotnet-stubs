__all__ = ['Symbol']
from typing import Tuple, Set, Iterable, List


class DebugInfo(Object):
    pass


class IDebuggableWorkflowTree:
    def GetWorkflowRoot(self) -> Activity: ...


class LocalsItemDescription(Object):
    def __init__(self, name: str, type: Type): ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    def ToString(self) -> str: ...


class SourceLocation(Object):
    @overload
    def __init__(self, fileName: str, line: int): ...
    @overload
    def __init__(self, fileName: str, startLine: int, startColumn: int, endLine: int, endColumn: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def EndColumn(self) -> int: ...
    @property
    def EndLine(self) -> int: ...
    @property
    def FileName(self) -> str: ...
    @property
    def IsSingleWholeLine(self) -> bool: ...
    @property
    def StartColumn(self) -> int: ...
    @property
    def StartLine(self) -> int: ...
    def GetHashCode(self) -> int: ...


class SourceLocationFoundEventArgs(EventArgs):
    def __init__(self, target: Object, sourceLocation: SourceLocation): ...
    @property
    def SourceLocation(self) -> SourceLocation: ...
    @property
    def Target(self) -> Object: ...


class SourceLocationProvider(Object):
    def CollectMapping(rootActivity1: Activity, rootActivity2: Activity, mapping: Dictionary, path: str) -> None: ...
    def GetSourceLocations(rootActivity: Activity, symbol: WorkflowSymbol) -> Dictionary: ...
    def GetSymbols(rootActivity: Activity, sourceLocations: Dictionary) -> ICollection: ...


class State(Object):
    pass


class StateManager(Object):
    def Dispose(self) -> None: ...
    def Exit(self, threadIndex: int) -> None: ...


class ThreadWorkerController(Object):
    def __init__(self): ...
    def IslandWorker(controller: ThreadWorkerController) -> None: ...


class VirtualStackFrame(Object):
    @overload
    def __init__(self, state: State): ...
    @overload
    def __init__(self, state: State, locals: IDictionary): ...
    @property
    def Locals(self) -> IDictionary: ...
    @property
    def State(self) -> State: ...
    def ToString(self) -> str: ...


class XamlDebuggerXmlReader(XamlReader):
    @overload
    def __init__(self, underlyingTextReader: TextReader): ...
    @overload
    def __init__(self, underlyingTextReader: TextReader, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, underlyingReader: XamlReader, textReader: TextReader): ...
    @overload
    def __init__(self, underlyingReader: XamlReader, xamlLineInfo: IXamlLineInfo, textReader: TextReader): ...
    def add_SourceLocationFound(self, value: EventHandler) -> None: ...
    def CopyAttachedSourceLocation(source: Object, destination: Object) -> None: ...
    @property
    def CollectNonActivitySourceLocation(self) -> bool: ...
    @property
    def HasLineInfo(self) -> bool: ...
    @property
    def IsEof(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def Member(self) -> XamlMember: ...
    @property
    def Namespace(self) -> NamespaceDeclaration: ...
    @property
    def NodeType(self) -> XamlNodeType: ...
    @property
    def SchemaContext(self) -> XamlSchemaContext: ...
    @property
    def Type(self) -> XamlType: ...
    @property
    def Value(self) -> Object: ...
    def GetEndColumn(instance: Object) -> Object: ...
    def GetEndLine(instance: Object) -> Object: ...
    def GetFileName(instance: Object) -> Object: ...
    def GetStartColumn(instance: Object) -> Object: ...
    def GetStartLine(instance: Object) -> Object: ...
    def Read(self) -> bool: ...
    def remove_SourceLocationFound(self, value: EventHandler) -> None: ...
    @CollectNonActivitySourceLocation.setter
    def CollectNonActivitySourceLocation(self, value: bool) -> None: ...
    def SetEndColumn(instance: Object, value: Object) -> None: ...
    def SetEndLine(instance: Object, value: Object) -> None: ...
    def SetFileName(instance: Object, value: Object) -> None: ...
    def SetStartColumn(instance: Object, value: Object) -> None: ...
    def SetStartLine(instance: Object, value: Object) -> None: ...
