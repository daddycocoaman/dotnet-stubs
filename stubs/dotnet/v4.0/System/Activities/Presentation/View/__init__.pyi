__all__ = ['OutlineView']
from typing import Tuple, Set, Iterable, List


class CommandMenuMode(Object):
    pass


class DesignerView(UserControl):
    def FlushState(self) -> None: ...
    @property
    def ActivitySchema(self) -> ModelItem: ...
    @property
    def Context(self) -> EditingContext: ...
    @property
    def FocusedViewElement(self) -> WorkflowViewElement: ...
    @property
    def IsMultipleSelectionMode(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def MenuItemStyle(self) -> Style: ...
    @property
    def MenuSeparatorStyle(self) -> Style: ...
    @property
    def RootDesigner(self) -> UIElement: ...
    @property
    def ShouldCollapseAll(self) -> bool: ...
    @property
    def ShouldExpandAll(self) -> bool: ...
    @property
    def WorkflowShellBarItemVisibility(self) -> ShellBarItemVisibility: ...
    @property
    def WorkflowShellHeaderItemsVisibility(self) -> ShellHeaderItemsVisibility: ...
    @property
    def ZoomFactor(self) -> float: ...
    def GetCommandMenuMode(obj: DependencyObject) -> CommandMenuMode: ...
    def InitializeComponent(self) -> None: ...
    def MakeRootDesigner(self, modelItem: ModelItem) -> None: ...
    def OnReferenceUpdated(self, updatedReference: AssemblyName, isAdded: bool) -> None: ...
    def RegisterViewElement(self, viewElement: WorkflowViewElement) -> None: ...
    @IsReadOnly.setter
    def IsReadOnly(self, value: bool) -> None: ...
    @MenuItemStyle.setter
    def MenuItemStyle(self, value: Style) -> None: ...
    @MenuSeparatorStyle.setter
    def MenuSeparatorStyle(self, value: Style) -> None: ...
    @RootDesigner.setter
    def RootDesigner(self, value: UIElement) -> None: ...
    @ShouldCollapseAll.setter
    def ShouldCollapseAll(self, value: bool) -> None: ...
    @ShouldExpandAll.setter
    def ShouldExpandAll(self, value: bool) -> None: ...
    @WorkflowShellBarItemVisibility.setter
    def WorkflowShellBarItemVisibility(self, value: ShellBarItemVisibility) -> None: ...
    @WorkflowShellHeaderItemsVisibility.setter
    def WorkflowShellHeaderItemsVisibility(self, value: ShellHeaderItemsVisibility) -> None: ...
    def SetCommandMenuMode(obj: DependencyObject, value: CommandMenuMode) -> None: ...
    def UnregisterViewElement(self, viewElement: WorkflowViewElement) -> None: ...


class EditingState:
    Editing = 0
    Validating = 1
    Idle = 2


class ExpressionTextBox(UserControl):
    def __init__(self): ...
    def add_EditorLostLogicalFocus(self, value: RoutedEventHandler) -> None: ...
    def BeginEdit(self) -> None: ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def DefaultValue(self) -> str: ...
    @property
    def ExplicitCommit(self) -> bool: ...
    @property
    def Expression(self) -> ModelItem: ...
    @property
    def ExpressionActivityEditor(self) -> str: ...
    @property
    def ExpressionEditorService(self) -> IExpressionEditorService: ...
    @property
    def ExpressionType(self) -> Type: ...
    @property
    def HintText(self) -> str: ...
    @property
    def HorizontalScrollBarVisibility(self) -> ScrollBarVisibility: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSupportedExpression(self) -> bool: ...
    @property
    def MaxLines(self) -> int: ...
    @property
    def MinLines(self) -> int: ...
    @property
    def OwnerActivity(self) -> ModelItem: ...
    @property
    def PathToArgument(self) -> str: ...
    @property
    def UseLocationExpression(self) -> bool: ...
    @property
    def VerticalScrollBarVisibility(self) -> ScrollBarVisibility: ...
    def InitializeComponent(self) -> None: ...
    def RegisterExpressionActivityEditor(name: str, expressionActivityEditorType: Type, convertFromString: CreateExpressionFromStringCallback) -> None: ...
    def remove_EditorLostLogicalFocus(self, value: RoutedEventHandler) -> None: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: bool) -> None: ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: bool) -> None: ...
    @DefaultValue.setter
    def DefaultValue(self, value: str) -> None: ...
    @ExplicitCommit.setter
    def ExplicitCommit(self, value: bool) -> None: ...
    @Expression.setter
    def Expression(self, value: ModelItem) -> None: ...
    @ExpressionActivityEditor.setter
    def ExpressionActivityEditor(self, value: str) -> None: ...
    @ExpressionType.setter
    def ExpressionType(self, value: Type) -> None: ...
    @HintText.setter
    def HintText(self, value: str) -> None: ...
    @HorizontalScrollBarVisibility.setter
    def HorizontalScrollBarVisibility(self, value: ScrollBarVisibility) -> None: ...
    @IsReadOnly.setter
    def IsReadOnly(self, value: bool) -> None: ...
    @IsSupportedExpression.setter
    def IsSupportedExpression(self, value: bool) -> None: ...
    @MaxLines.setter
    def MaxLines(self, value: int) -> None: ...
    @MinLines.setter
    def MinLines(self, value: int) -> None: ...
    @OwnerActivity.setter
    def OwnerActivity(self, value: ModelItem) -> None: ...
    @PathToArgument.setter
    def PathToArgument(self, value: str) -> None: ...
    @UseLocationExpression.setter
    def UseLocationExpression(self, value: bool) -> None: ...
    @VerticalScrollBarVisibility.setter
    def VerticalScrollBarVisibility(self, value: ScrollBarVisibility) -> None: ...


class IExpressionEditorInstance:
    def add_Closing(self, value: EventHandler) -> None: ...
    def add_GotAggregateFocus(self, value: EventHandler) -> None: ...
    def add_LostAggregateFocus(self, value: EventHandler) -> None: ...
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def CanCompleteWord(self) -> bool: ...
    def CanCopy(self) -> bool: ...
    def CanCut(self) -> bool: ...
    def CanDecreaseFilterLevel(self) -> bool: ...
    def CanGlobalIntellisense(self) -> bool: ...
    def CanIncreaseFilterLevel(self) -> bool: ...
    def CanParameterInfo(self) -> bool: ...
    def CanPaste(self) -> bool: ...
    def CanQuickInfo(self) -> bool: ...
    def CanRedo(self) -> bool: ...
    def CanUndo(self) -> bool: ...
    def ClearSelection(self) -> None: ...
    def Close(self) -> None: ...
    def CompleteWord(self) -> bool: ...
    def Copy(self) -> bool: ...
    def Cut(self) -> bool: ...
    def DecreaseFilterLevel(self) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def HasAggregateFocus(self) -> bool: ...
    @property
    def HorizontalScrollBarVisibility(self) -> ScrollBarVisibility: ...
    @property
    def HostControl(self) -> Control: ...
    @property
    def MaxLines(self) -> int: ...
    @property
    def MinLines(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def VerticalScrollBarVisibility(self) -> ScrollBarVisibility: ...
    def GetCommittedText(self) -> str: ...
    def GlobalIntellisense(self) -> bool: ...
    def IncreaseFilterLevel(self) -> bool: ...
    def ParameterInfo(self) -> bool: ...
    def Paste(self) -> bool: ...
    def QuickInfo(self) -> bool: ...
    def Redo(self) -> bool: ...
    def remove_Closing(self, value: EventHandler) -> None: ...
    def remove_GotAggregateFocus(self, value: EventHandler) -> None: ...
    def remove_LostAggregateFocus(self, value: EventHandler) -> None: ...
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: bool) -> None: ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: bool) -> None: ...
    @HorizontalScrollBarVisibility.setter
    def HorizontalScrollBarVisibility(self, value: ScrollBarVisibility) -> None: ...
    @MaxLines.setter
    def MaxLines(self, value: int) -> None: ...
    @MinLines.setter
    def MinLines(self, value: int) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @VerticalScrollBarVisibility.setter
    def VerticalScrollBarVisibility(self, value: ScrollBarVisibility) -> None: ...
    def Undo(self) -> bool: ...


class IExpressionEditorService:
    def CloseExpressionEditors(self) -> None: ...
    @overload
    def CreateExpressionEditor(self, assemblies: AssemblyContextControlItem, importedNamespaces: ImportedNamespaceContextItem, variables: List, text: str) -> IExpressionEditorInstance: ...
    @overload
    def CreateExpressionEditor(self, assemblies: AssemblyContextControlItem, importedNamespaces: ImportedNamespaceContextItem, variables: List, text: str, expressionType: Type) -> IExpressionEditorInstance: ...
    @overload
    def CreateExpressionEditor(self, assemblies: AssemblyContextControlItem, importedNamespaces: ImportedNamespaceContextItem, variables: List, text: str, initialSize: Size) -> IExpressionEditorInstance: ...
    @overload
    def CreateExpressionEditor(self, assemblies: AssemblyContextControlItem, importedNamespaces: ImportedNamespaceContextItem, variables: List, text: str, expressionType: Type, initialSize: Size) -> IExpressionEditorInstance: ...
    def UpdateContext(self, assemblies: AssemblyContextControlItem, importedNamespaces: ImportedNamespaceContextItem) -> None: ...


class PropertyKind:
    InArgument = 0
    InOutArgument = 1
    OutArgument = 2
    Property = 3


class Selection(ContextItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, selectedObjects: Iterable[ModelItem]): ...
    @overload
    def __init__(self, selectedObjects: IEnumerable): ...
    @overload
    def __init__(self, selectedObjects: Set(ModelItem)): ...
    @overload
    def __init__(self, selectedObjects: Iterable[ModelItem], match: Predicate): ...
    @overload
    def __init__(self, selectedObjects: IEnumerable, match: Predicate): ...
    @property
    def ItemType(self) -> Type: ...
    @property
    def PrimarySelection(self) -> ModelItem: ...
    @property
    def SelectedObjects(self) -> Iterable[ModelItem]: ...
    @property
    def SelectionCount(self) -> int: ...
    def Select(context: EditingContext, itemToSelect: ModelItem) -> Selection: ...
    def SelectOnly(context: EditingContext, itemToSelect: ModelItem) -> Selection: ...
    def Subscribe(context: EditingContext, handler: SubscribeContextCallback) -> None: ...
    def Toggle(context: EditingContext, itemToToggle: ModelItem) -> Selection: ...
    def Union(context: EditingContext, itemToAdd: ModelItem) -> Selection: ...
    def Unsubscribe(context: EditingContext, handler: SubscribeContextCallback) -> None: ...


class ShellBarItemVisibility:
    #None = 0
    Variables = 1
    Arguments = 2
    Imports = 4
    Zoom = 8
    MiniMap = 16
    PanMode = 32
    All = -1


class ShellHeaderItemsVisibility:
    #None = 0
    Breadcrumb = 1
    ExpandAll = 2
    CollapseAll = 4
    All = -1


class TypePresenter(ContentControl):
    def __init__(self): ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def add_TypeBrowserClosed(self, value: RoutedEventHandler) -> None: ...
    def add_TypeBrowserOpened(self, value: RoutedEventHandler) -> None: ...
    def add_TypeChanged(self, value: RoutedEventHandler) -> None: ...
    def FocusOnVisibleControl(self) -> None: ...
    @property
    def AllowNull(self) -> bool: ...
    @property
    def BrowseTypeDirectly(self) -> bool: ...
    @property
    def CenterActivityTypeResolverDialog(self) -> bool: ...
    @property
    def CenterTypeBrowserDialog(self) -> bool: ...
    @property
    def Context(self) -> EditingContext: ...
    @property
    def DefaultMostRecentlyUsedTypes() -> ObservableCollection: ...
    @property
    def Filter(self) -> Func: ...
    @property
    def Items(self) -> Iterable[TypeWrapper]: ...
    @property
    def Label(self) -> str: ...
    @property
    def MostRecentlyUsedTypes(self) -> ObservableCollection: ...
    @property
    def Text(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @property
    def TypeName(self) -> str: ...
    def InitializeComponent(self) -> None: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def remove_TypeBrowserClosed(self, value: RoutedEventHandler) -> None: ...
    def remove_TypeBrowserOpened(self, value: RoutedEventHandler) -> None: ...
    def remove_TypeChanged(self, value: RoutedEventHandler) -> None: ...
    @AllowNull.setter
    def AllowNull(self, value: bool) -> None: ...
    @BrowseTypeDirectly.setter
    def BrowseTypeDirectly(self, value: bool) -> None: ...
    @CenterActivityTypeResolverDialog.setter
    def CenterActivityTypeResolverDialog(self, value: bool) -> None: ...
    @CenterTypeBrowserDialog.setter
    def CenterTypeBrowserDialog(self, value: bool) -> None: ...
    @Context.setter
    def Context(self, value: EditingContext) -> None: ...
    @Filter.setter
    def Filter(self, value: Func) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...
    @MostRecentlyUsedTypes.setter
    def MostRecentlyUsedTypes(self, value: ObservableCollection) -> None: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...


class TypeResolvingOptions(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, defaultTypes: Iterable[Type]): ...
    @property
    def BrowseTypeDirectly(self) -> bool: ...
    @property
    def Filter(self) -> Func: ...
    @BrowseTypeDirectly.setter
    def BrowseTypeDirectly(self, value: bool) -> None: ...
    @Filter.setter
    def Filter(self, value: Func) -> None: ...


class TypeWrapper(Object):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsTypeDefinition(self) -> bool: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Type(self) -> Type: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class ViewCreatedEventArgs(EventArgs):
    def __init__(self, view: WorkflowViewElement): ...
    @property
    def View(self) -> WorkflowViewElement: ...


class ViewStateChangedEventArgs(EventArgs):
    def __init__(self, modelItem: ModelItem, key: str, newValue: Object, oldValue: Object): ...
    @property
    def Key(self) -> str: ...
    @property
    def NewValue(self) -> Object: ...
    @property
    def OldValue(self) -> Object: ...
    @property
    def ParentModelItem(self) -> ModelItem: ...


class ViewStateChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ViewStateChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ViewStateChangedEventArgs) -> None: ...


class ViewStateService(Object):
    def add_UndoableViewStateChanged(self, value: ViewStateChangedEventHandler) -> None: ...
    def add_ViewStateChanged(self, value: ViewStateChangedEventHandler) -> None: ...
    def remove_UndoableViewStateChanged(self, value: ViewStateChangedEventHandler) -> None: ...
    def remove_ViewStateChanged(self, value: ViewStateChangedEventHandler) -> None: ...
    def RemoveViewState(self, modelItem: ModelItem, key: str) -> bool: ...
    def RetrieveAllViewState(self, modelItem: ModelItem) -> Dictionary: ...
    def RetrieveViewState(self, modelItem: ModelItem, key: str) -> Object: ...
    def StoreViewState(self, modelItem: ModelItem, key: str, value: Object) -> None: ...
    def StoreViewStateWithUndo(self, modelItem: ModelItem, key: str, value: Object) -> None: ...


class VirtualizedContainerService(Object):
    def __init__(self, context: EditingContext): ...
    def GetContainer(self, modelItem: ModelItem, sourceContainer: ICompositeView) -> UIElement: ...
    def GetHintSize(instance: Object) -> Object: ...
    def GetViewElement(self, modelItem: ModelItem, sourceContainer: ICompositeView) -> WorkflowViewElement: ...
    def SetHintSize(instance: Object, value: Object) -> None: ...


class WorkflowViewService(ViewService):
    def __init__(self, context: EditingContext): ...
    def add_ViewCreated(self, value: EventHandler) -> None: ...
    def GetModel(self, view: DependencyObject) -> ModelItem: ...
    def GetView(self, model: ModelItem) -> DependencyObject: ...
    def GetViewElement(self, modelItem: ModelItem) -> WorkflowViewElement: ...
    def remove_ViewCreated(self, value: EventHandler) -> None: ...


class WorkflowViewStateService(ViewStateService):
    def __init__(self, context: EditingContext): ...
    def add_UndoableViewStateChanged(self, value: ViewStateChangedEventHandler) -> None: ...
    def add_ViewStateChanged(self, value: ViewStateChangedEventHandler) -> None: ...
    def GetViewState(instance: Object) -> Dictionary: ...
    def remove_UndoableViewStateChanged(self, value: ViewStateChangedEventHandler) -> None: ...
    def remove_ViewStateChanged(self, value: ViewStateChangedEventHandler) -> None: ...
    def RemoveViewState(self, modelItem: ModelItem, key: str) -> bool: ...
    def RetrieveAllViewState(self, modelItem: ModelItem) -> Dictionary: ...
    def RetrieveViewState(self, modelItem: ModelItem, key: str) -> Object: ...
    def SetViewState(instance: Object, value: Dictionary) -> None: ...
    def StoreViewState(self, modelItem: ModelItem, key: str, value: Object) -> None: ...
    def StoreViewStateWithUndo(self, modelItem: ModelItem, key: str, value: Object) -> None: ...
