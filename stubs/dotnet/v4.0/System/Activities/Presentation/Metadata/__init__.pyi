from typing import Tuple, Set, Iterable, List


class ActivityArgumentHelper(Object):
    def RegisterAccessorsGenerator(activityType: Type, argumentAccessorsGenerator: Func) -> None: ...


class AttributeCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, builder: AttributeCallbackBuilder, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, builder: AttributeCallbackBuilder) -> None: ...


class AttributeCallbackBuilder(Object):
    @overload
    def AddCustomAttributes(self, attributes: Set(Attribute)) -> None: ...
    @overload
    def AddCustomAttributes(self, descriptor: MemberDescriptor, attributes: Set(Attribute)) -> None: ...
    @overload
    def AddCustomAttributes(self, member: MemberInfo, attributes: Set(Attribute)) -> None: ...
    @overload
    def AddCustomAttributes(self, memberName: str, attributes: Set(Attribute)) -> None: ...
    @overload
    def AddCustomAttributes(self, dp: DependencyProperty, attributes: Set(Attribute)) -> None: ...
    @property
    def CallbackType(self) -> Type: ...


class AttributeTable(Object):
    def ContainsAttributes(self, type: Type) -> bool: ...
    @property
    def AttributedTypes(self) -> Iterable[Type]: ...
    @overload
    def GetCustomAttributes(self, type: Type) -> IEnumerable: ...
    @overload
    def GetCustomAttributes(self, ownerType: Type, descriptor: MemberDescriptor) -> IEnumerable: ...
    @overload
    def GetCustomAttributes(self, ownerType: Type, dp: DependencyProperty) -> IEnumerable: ...
    @overload
    def GetCustomAttributes(self, ownerType: Type, member: MemberInfo) -> IEnumerable: ...
    @overload
    def GetCustomAttributes(self, ownerType: Type, memberName: str) -> IEnumerable: ...


class AttributeTableBuilder(Object):
    def __init__(self): ...
    def AddCallback(self, type: Type, callback: AttributeCallback) -> None: ...
    @overload
    def AddCustomAttributes(self, type: Type, attributes: Set(Attribute)) -> None: ...
    @overload
    def AddCustomAttributes(self, ownerType: Type, descriptor: MemberDescriptor, attributes: Set(Attribute)) -> None: ...
    @overload
    def AddCustomAttributes(self, ownerType: Type, member: MemberInfo, attributes: Set(Attribute)) -> None: ...
    @overload
    def AddCustomAttributes(self, ownerType: Type, memberName: str, attributes: Set(Attribute)) -> None: ...
    @overload
    def AddCustomAttributes(self, ownerType: Type, dp: DependencyProperty, attributes: Set(Attribute)) -> None: ...
    def AddTable(self, table: AttributeTable) -> None: ...
    def CreateTable(self) -> AttributeTable: ...
    def ValidateTable(self) -> None: ...


class AttributeTableValidationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, message: str, validationErrors: Iterable[str]): ...
    @overload
    def __init__(self, message: str, inner: Exception, validationErrors: Iterable[str]): ...
    @property
    def ValidationErrors(self) -> Iterable[str]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class IRegisterMetadata:
    def Register(self) -> None: ...


class MetadataStore(Object):
    def AddAttributeTable(table: AttributeTable) -> None: ...
