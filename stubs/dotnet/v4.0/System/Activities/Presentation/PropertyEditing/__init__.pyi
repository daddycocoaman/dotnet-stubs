from typing import Tuple, Set, Iterable, List


class CategoryEditor(Object):
    def ConsumesProperty(self, propertyEntry: PropertyEntry) -> bool: ...
    @overload
    def CreateEditorAttribute(editor: CategoryEditor) -> EditorAttribute: ...
    @overload
    def CreateEditorAttribute(categoryEditorType: Type) -> EditorAttribute: ...
    @property
    def EditorTemplate(self) -> DataTemplate: ...
    @property
    def TargetCategory(self) -> str: ...
    def GetImage(self, desiredSize: Size) -> Object: ...


class CategoryEntry(Object):
    def add_FilterApplied(self, value: EventHandler) -> None: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def ApplyFilter(self, filter: PropertyFilter) -> None: ...
    @property
    def CategoryName(self) -> str: ...
    @property
    def Item(self, propertyName: str) -> PropertyEntry: ...
    @property
    def MatchesFilter(self) -> bool: ...
    @property
    def Properties(self) -> Iterable[PropertyEntry]: ...
    def MatchesPredicate(self, predicate: PropertyFilterPredicate) -> bool: ...
    def remove_FilterApplied(self, value: EventHandler) -> None: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...


class DependencyPropertyValueSource(PropertyValueSource):
    @property
    def CustomMarkupExtension() -> DependencyPropertyValueSource: ...
    @property
    def DataBound() -> DependencyPropertyValueSource: ...
    @property
    def DefaultValue() -> DependencyPropertyValueSource: ...
    @property
    def Inherited() -> DependencyPropertyValueSource: ...
    @property
    def IsCustomMarkupExtension(self) -> bool: ...
    @property
    def IsDataBound(self) -> bool: ...
    @property
    def IsDefaultValue(self) -> bool: ...
    @property
    def IsExpression(self) -> bool: ...
    @property
    def IsInherited(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def IsLocalResource(self) -> bool: ...
    @property
    def IsResource(self) -> bool: ...
    @property
    def IsSystemResource(self) -> bool: ...
    @property
    def IsTemplateBinding(self) -> bool: ...
    @property
    def Local() -> DependencyPropertyValueSource: ...
    @property
    def LocalDynamicResource() -> DependencyPropertyValueSource: ...
    @property
    def LocalStaticResource() -> DependencyPropertyValueSource: ...
    @property
    def SystemResource() -> DependencyPropertyValueSource: ...
    @property
    def TemplateBinding() -> DependencyPropertyValueSource: ...


class DialogPropertyValueEditor(PropertyValueEditor):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dialogEditorTemplate: DataTemplate, inlineEditorTemplate: DataTemplate): ...
    @property
    def DialogEditorTemplate(self) -> DataTemplate: ...
    @DialogEditorTemplate.setter
    def DialogEditorTemplate(self, value: DataTemplate) -> None: ...
    def ShowDialog(self, propertyValue: PropertyValue, commandSource: IInputElement) -> None: ...


class EditModeSwitchButton(Button):
    def __init__(self): ...
    @property
    def SyncModeToOwningContainer(self) -> bool: ...
    @property
    def TargetEditMode(self) -> PropertyContainerEditMode: ...
    @SyncModeToOwningContainer.setter
    def SyncModeToOwningContainer(self, value: bool) -> None: ...
    @TargetEditMode.setter
    def TargetEditMode(self, value: PropertyContainerEditMode) -> None: ...


class EditorOptionAttribute(Attribute):
    def __init__(self): ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeId(self) -> Object: ...
    @property
    def Value(self) -> Object: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def TryGetOptionValue(attributes: IEnumerable, optionName: str) -> Tuple[bool, Object]: ...


class EditorReuseAttribute(Attribute):
    def __init__(self, reuseEditor: bool): ...
    @property
    def ReuseEditor(self) -> bool: ...


class ExtendedPropertyValueEditor(PropertyValueEditor):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, extendedEditorTemplate: DataTemplate, inlineEditorTemplate: DataTemplate): ...
    @property
    def ExtendedEditorTemplate(self) -> DataTemplate: ...
    @ExtendedEditorTemplate.setter
    def ExtendedEditorTemplate(self, value: DataTemplate) -> None: ...


class IPropertyFilterTarget:
    def add_FilterApplied(self, value: EventHandler) -> None: ...
    def ApplyFilter(self, filter: PropertyFilter) -> None: ...
    @property
    def MatchesFilter(self) -> bool: ...
    def MatchesPredicate(self, predicate: PropertyFilterPredicate) -> bool: ...
    def remove_FilterApplied(self, value: EventHandler) -> None: ...


class PropertyContainerEditMode:
    Inline = 0
    ExtendedPopup = 1
    ExtendedPinned = 2
    Dialog = 3


class PropertyEntry(Object):
    def add_FilterApplied(self, value: EventHandler) -> None: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def ApplyFilter(self, filter: PropertyFilter) -> None: ...
    @property
    def CategoryName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsAdvanced(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def MatchesFilter(self) -> bool: ...
    @property
    def ParentValue(self) -> PropertyValue: ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def PropertyType(self) -> Type: ...
    @property
    def PropertyValue(self) -> PropertyValue: ...
    @property
    def PropertyValueEditor(self) -> PropertyValueEditor: ...
    @property
    def StandardValues(self) -> ICollection: ...
    def MatchesPredicate(self, predicate: PropertyFilterPredicate) -> bool: ...
    def remove_FilterApplied(self, value: EventHandler) -> None: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...


class PropertyEntryCollection(Object):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, propertyName: str) -> PropertyEntry: ...
    @property
    def ParentValue(self) -> PropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...


class PropertyFilter(Object):
    @overload
    def __init__(self, filterText: str): ...
    @overload
    def __init__(self, predicates: Iterable[PropertyFilterPredicate]): ...
    @property
    def IsEmpty(self) -> bool: ...
    def Match(self, target: IPropertyFilterTarget) -> bool: ...


class PropertyFilterAppliedEventArgs(EventArgs):
    def __init__(self, filter: PropertyFilter): ...
    @property
    def Filter(self) -> PropertyFilter: ...


class PropertyFilterPredicate(Object):
    def __init__(self, matchText: str): ...
    def Match(self, target: str) -> bool: ...


class PropertyValue(Object):
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def add_PropertyValueException(self, value: EventHandler) -> None: ...
    def add_RootValueChanged(self, value: EventHandler) -> None: ...
    def add_SubPropertyChanged(self, value: EventHandler) -> None: ...
    def ClearValue(self) -> None: ...
    @property
    def CanConvertFromString(self) -> bool: ...
    @property
    def Collection(self) -> PropertyValueCollection: ...
    @property
    def HasSubProperties(self) -> bool: ...
    @property
    def IsCollection(self) -> bool: ...
    @property
    def IsDefaultValue(self) -> bool: ...
    @property
    def IsMixedValue(self) -> bool: ...
    @property
    def ParentProperty(self) -> PropertyEntry: ...
    @property
    def Source(self) -> PropertyValueSource: ...
    @property
    def StringValue(self) -> str: ...
    @property
    def SubProperties(self) -> PropertyEntryCollection: ...
    @property
    def Value(self) -> Object: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyValueException(self, value: EventHandler) -> None: ...
    def remove_RootValueChanged(self, value: EventHandler) -> None: ...
    def remove_SubPropertyChanged(self, value: EventHandler) -> None: ...
    @StringValue.setter
    def StringValue(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class PropertyValueCollection(Object):
    def add_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    def Add(self, value: Object) -> PropertyValue: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> PropertyValue: ...
    @property
    def ParentValue(self) -> PropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Insert(self, value: Object, index: int) -> PropertyValue: ...
    def remove_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    def Remove(self, propertyValue: PropertyValue) -> bool: ...
    def RemoveAt(self, index: int) -> None: ...
    def SetIndex(self, currentIndex: int, newIndex: int) -> None: ...


class PropertyValueEditor(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, inlineEditorTemplate: DataTemplate): ...
    @overload
    def CreateEditorAttribute(editor: PropertyValueEditor) -> EditorAttribute: ...
    @overload
    def CreateEditorAttribute(propertyValueEditorType: Type) -> EditorAttribute: ...
    @property
    def InlineEditorTemplate(self) -> DataTemplate: ...
    @InlineEditorTemplate.setter
    def InlineEditorTemplate(self, value: DataTemplate) -> None: ...


class PropertyValueEditorCommands(Object):
    @property
    def AbortTransaction() -> RoutedCommand: ...
    @property
    def BeginTransaction() -> RoutedCommand: ...
    @property
    def CommitTransaction() -> RoutedCommand: ...
    @property
    def FinishEditing() -> RoutedCommand: ...
    @property
    def ShowDialogEditor() -> RoutedCommand: ...
    @property
    def ShowExtendedPinnedEditor() -> RoutedCommand: ...
    @property
    def ShowExtendedPopupEditor() -> RoutedCommand: ...
    @property
    def ShowInlineEditor() -> RoutedCommand: ...


class PropertyValueExceptionEventArgs(EventArgs):
    def __init__(self, message: str, value: PropertyValue, source: PropertyValueExceptionSource, exception: Exception): ...
    @property
    def Exception(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def PropertyValue(self) -> PropertyValue: ...
    @property
    def Source(self) -> PropertyValueExceptionSource: ...


class PropertyValueExceptionSource:
    Get = 0
    Set = 1


class PropertyValueSource(Object):
    pass
