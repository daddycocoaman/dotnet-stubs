from typing import Tuple, Set, Iterable, List


class CreateExpressionFromStringCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, expressionText: str, useLocationExpression: bool, expressionType: Type, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> ActivityWithResult: ...
    def Invoke(self, expressionText: str, useLocationExpression: bool, expressionType: Type) -> ActivityWithResult: ...


class ExpressionActivityEditor(UserControl):
    def BeginEdit(self) -> None: ...
    def CanCommit(self) -> bool: ...
    def Commit(self, isExplicitCommit: bool) -> bool: ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def ExplicitCommit(self) -> bool: ...
    @property
    def Expression(self) -> ModelItem: ...
    @property
    def ExpressionType(self) -> Type: ...
    @property
    def HintText(self) -> str: ...
    @property
    def HorizontalScrollBarVisibility(self) -> ScrollBarVisibility: ...
    @property
    def IsIndependentExpression(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSupportedExpression(self) -> bool: ...
    @property
    def OwnerActivity(self) -> ModelItem: ...
    @property
    def PathToArgument(self) -> str: ...
    @property
    def UseLocationExpression(self) -> bool: ...
    @property
    def VerticalScrollBarVisibility(self) -> ScrollBarVisibility: ...
    def GetExpressionActivityEditor(target: Object) -> str: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: bool) -> None: ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: bool) -> None: ...
    @ExplicitCommit.setter
    def ExplicitCommit(self, value: bool) -> None: ...
    @Expression.setter
    def Expression(self, value: ModelItem) -> None: ...
    @ExpressionType.setter
    def ExpressionType(self, value: Type) -> None: ...
    @HintText.setter
    def HintText(self, value: str) -> None: ...
    @HorizontalScrollBarVisibility.setter
    def HorizontalScrollBarVisibility(self, value: ScrollBarVisibility) -> None: ...
    @IsIndependentExpression.setter
    def IsIndependentExpression(self, value: bool) -> None: ...
    @IsReadOnly.setter
    def IsReadOnly(self, value: bool) -> None: ...
    @IsSupportedExpression.setter
    def IsSupportedExpression(self, value: bool) -> None: ...
    @OwnerActivity.setter
    def OwnerActivity(self, value: ModelItem) -> None: ...
    @PathToArgument.setter
    def PathToArgument(self, value: str) -> None: ...
    @UseLocationExpression.setter
    def UseLocationExpression(self, value: bool) -> None: ...
    @VerticalScrollBarVisibility.setter
    def VerticalScrollBarVisibility(self, value: ScrollBarVisibility) -> None: ...
    def SetExpressionActivityEditor(target: Object, name: str) -> None: ...


class ExpressionMorphHelper(Object):
    def TryInferReturnType(self, expression: ActivityWithResult, context: EditingContext) -> Tuple[bool, Type]: ...
    def TryMorphExpression(self, expression: ActivityWithResult, isLocationExpression: bool, newType: Type, context: EditingContext) -> Tuple[bool, ActivityWithResult]: ...


class ExpressionMorphHelperAttribute(Attribute):
    def __init__(self, expressionMorphHelperType: Type): ...
    @property
    def ExpressionMorphHelperType(self) -> Type: ...


class TextualExpressionEditor(ExpressionActivityEditor):
    @property
    def DefaultValue(self) -> str: ...
    @property
    def ExpressionEditorService(self) -> IExpressionEditorService: ...
    @property
    def MaxLines(self) -> int: ...
    @property
    def MinLines(self) -> int: ...
    def OnCompleteWordCommandCanExecute(self, e: CanExecuteRoutedEventArgs) -> None: ...
    def OnCompleteWordCommandExecute(self, e: ExecutedRoutedEventArgs) -> None: ...
    def OnDecreaseFilterLevelCommandCanExecute(self, e: CanExecuteRoutedEventArgs) -> None: ...
    def OnDecreaseFilterLevelCommandExecute(self, e: ExecutedRoutedEventArgs) -> None: ...
    def OnGlobalIntellisenseCommandCanExecute(self, e: CanExecuteRoutedEventArgs) -> None: ...
    def OnGlobalIntellisenseCommandExecute(self, e: ExecutedRoutedEventArgs) -> None: ...
    def OnIncreaseFilterLevelCommandCanExecute(self, e: CanExecuteRoutedEventArgs) -> None: ...
    def OnIncreaseFilterLevelCommandExecute(self, e: ExecutedRoutedEventArgs) -> None: ...
    def OnParameterInfoCommandCanExecute(self, e: CanExecuteRoutedEventArgs) -> None: ...
    def OnParameterInfoCommandExecute(self, e: ExecutedRoutedEventArgs) -> None: ...
    def OnQuickInfoCommandCanExecute(self, e: CanExecuteRoutedEventArgs) -> None: ...
    def OnQuickInfoCommandExecute(self, e: ExecutedRoutedEventArgs) -> None: ...
    @DefaultValue.setter
    def DefaultValue(self, value: str) -> None: ...
    @MaxLines.setter
    def MaxLines(self, value: int) -> None: ...
    @MinLines.setter
    def MinLines(self, value: int) -> None: ...
