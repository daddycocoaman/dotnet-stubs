from typing import Tuple, Set, Iterable, List


class ArgumentToExpressionConverter(Object):
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class ArgumentToExpressionModelItemConverter(Object):
    def __init__(self): ...
    def Convert(self, values: Set(Object), targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetTypes: Set(Type), parameter: Object, culture: CultureInfo) -> Set(Object): ...


class ModelPropertyEntryToModelItemConverter(Object):
    def __init__(self): ...
    @overload
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    @overload
    def Convert(self, values: Set(Object), targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    @overload
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    @overload
    def ConvertBack(self, value: Object, targetTypes: Set(Type), parameter: Object, culture: CultureInfo) -> Set(Object): ...


class ModelPropertyEntryToOwnerActivityConverter(Object):
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class ModelToObjectValueConverter(Object):
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class ObjectToModelValueConverter(Object):
    def __init__(self): ...
    def Convert(self, values: Set(Object), targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetTypes: Set(Type), parameter: Object, culture: CultureInfo) -> Set(Object): ...
