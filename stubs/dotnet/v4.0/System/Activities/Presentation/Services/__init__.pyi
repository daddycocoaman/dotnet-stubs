from typing import Tuple, Set, Iterable, List


class ModelService(Object):
    def add_ModelChanged(self, value: EventHandler) -> None: ...
    @overload
    def Find(self, startingItem: ModelItem, type: Type) -> Iterable[ModelItem]: ...
    @overload
    def Find(self, startingItem: ModelItem, match: Predicate) -> Iterable[ModelItem]: ...
    @overload
    def FromName(self, scope: ModelItem, name: str) -> ModelItem: ...
    @overload
    def FromName(self, scope: ModelItem, name: str, comparison: StringComparison) -> ModelItem: ...
    @property
    def Root(self) -> ModelItem: ...
    def remove_ModelChanged(self, value: EventHandler) -> None: ...
