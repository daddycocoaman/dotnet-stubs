__all__ = ['Annotations','Converters','Debug','Expressions','Hosting','Metadata','Model','PropertyEditing','Services','Sqm','Toolbox','Validation','View','ViewState']
from typing import Tuple, Set, Iterable, List


class Activities(Object):
    @property
    def AddToCollection() -> DrawingBrush: ...
    @property
    def Assign() -> DrawingBrush: ...
    @property
    def CancellationScope() -> DrawingBrush: ...
    @property
    def ClearCollection() -> DrawingBrush: ...
    @property
    def CompensableActivity() -> DrawingBrush: ...
    @property
    def Compensate() -> DrawingBrush: ...
    @property
    def Confirm() -> DrawingBrush: ...
    @property
    def CorrelationScope() -> DrawingBrush: ...
    @property
    def DefaultCustomActivity() -> DrawingBrush: ...
    @property
    def Delay() -> DrawingBrush: ...
    @property
    def DoWhile() -> DrawingBrush: ...
    @property
    def ExistsInCollection() -> DrawingBrush: ...
    @property
    def FinalState() -> DrawingBrush: ...
    @property
    def Flowchart() -> DrawingBrush: ...
    @property
    def FlowDecision() -> DrawingBrush: ...
    @property
    def FlowDecisionNode() -> DrawingBrush: ...
    @property
    def FlowSwitch() -> DrawingBrush: ...
    @property
    def FlowSwitchNode() -> DrawingBrush: ...
    @property
    def ForEach() -> DrawingBrush: ...
    @property
    def If() -> DrawingBrush: ...
    @property
    def InitializeCorrelation() -> DrawingBrush: ...
    @property
    def Interop() -> DrawingBrush: ...
    @property
    def InvokeDelegate() -> DrawingBrush: ...
    @property
    def InvokeMethod() -> DrawingBrush: ...
    @property
    def NoPersistScope() -> DrawingBrush: ...
    @property
    def Parallel() -> DrawingBrush: ...
    @property
    def ParallelForEach() -> DrawingBrush: ...
    @property
    def Persist() -> DrawingBrush: ...
    @property
    def Pick() -> DrawingBrush: ...
    @property
    def PickBranch() -> DrawingBrush: ...
    @property
    def Receive() -> DrawingBrush: ...
    @property
    def ReceiveAndSendReply() -> DrawingBrush: ...
    @property
    def ReceiveReply() -> DrawingBrush: ...
    @property
    def RemoveFromCollection() -> DrawingBrush: ...
    @property
    def Rethrow() -> DrawingBrush: ...
    @property
    def Send() -> DrawingBrush: ...
    @property
    def SendAndReceiveReply() -> DrawingBrush: ...
    @property
    def SendReply() -> DrawingBrush: ...
    @property
    def Sequence() -> DrawingBrush: ...
    @property
    def StartNode() -> DrawingBrush: ...
    @property
    def State() -> DrawingBrush: ...
    @property
    def StateEntry() -> DrawingBrush: ...
    @property
    def StateExit() -> DrawingBrush: ...
    @property
    def StateMachine() -> DrawingBrush: ...
    @property
    def StateTransition() -> DrawingBrush: ...
    @property
    def Switch() -> DrawingBrush: ...
    @property
    def TerminateWorkflow() -> DrawingBrush: ...
    @property
    def Throw() -> DrawingBrush: ...
    @property
    def TransactedReceiveScope() -> DrawingBrush: ...
    @property
    def TransactionScope() -> DrawingBrush: ...
    @property
    def TryCatch() -> DrawingBrush: ...
    @property
    def While() -> DrawingBrush: ...
    @property
    def WriteLine() -> DrawingBrush: ...
    @AddToCollection.setter
    def AddToCollection(value: DrawingBrush) -> None: ...
    @Assign.setter
    def Assign(value: DrawingBrush) -> None: ...
    @CancellationScope.setter
    def CancellationScope(value: DrawingBrush) -> None: ...
    @ClearCollection.setter
    def ClearCollection(value: DrawingBrush) -> None: ...
    @CompensableActivity.setter
    def CompensableActivity(value: DrawingBrush) -> None: ...
    @Compensate.setter
    def Compensate(value: DrawingBrush) -> None: ...
    @Confirm.setter
    def Confirm(value: DrawingBrush) -> None: ...
    @CorrelationScope.setter
    def CorrelationScope(value: DrawingBrush) -> None: ...
    @DefaultCustomActivity.setter
    def DefaultCustomActivity(value: DrawingBrush) -> None: ...
    @Delay.setter
    def Delay(value: DrawingBrush) -> None: ...
    @DoWhile.setter
    def DoWhile(value: DrawingBrush) -> None: ...
    @ExistsInCollection.setter
    def ExistsInCollection(value: DrawingBrush) -> None: ...
    @FinalState.setter
    def FinalState(value: DrawingBrush) -> None: ...
    @Flowchart.setter
    def Flowchart(value: DrawingBrush) -> None: ...
    @FlowDecision.setter
    def FlowDecision(value: DrawingBrush) -> None: ...
    @FlowDecisionNode.setter
    def FlowDecisionNode(value: DrawingBrush) -> None: ...
    @FlowSwitch.setter
    def FlowSwitch(value: DrawingBrush) -> None: ...
    @FlowSwitchNode.setter
    def FlowSwitchNode(value: DrawingBrush) -> None: ...
    @ForEach.setter
    def ForEach(value: DrawingBrush) -> None: ...
    @If.setter
    def If(value: DrawingBrush) -> None: ...
    @InitializeCorrelation.setter
    def InitializeCorrelation(value: DrawingBrush) -> None: ...
    @Interop.setter
    def Interop(value: DrawingBrush) -> None: ...
    @InvokeDelegate.setter
    def InvokeDelegate(value: DrawingBrush) -> None: ...
    @InvokeMethod.setter
    def InvokeMethod(value: DrawingBrush) -> None: ...
    @NoPersistScope.setter
    def NoPersistScope(value: DrawingBrush) -> None: ...
    @Parallel.setter
    def Parallel(value: DrawingBrush) -> None: ...
    @ParallelForEach.setter
    def ParallelForEach(value: DrawingBrush) -> None: ...
    @Persist.setter
    def Persist(value: DrawingBrush) -> None: ...
    @Pick.setter
    def Pick(value: DrawingBrush) -> None: ...
    @PickBranch.setter
    def PickBranch(value: DrawingBrush) -> None: ...
    @Receive.setter
    def Receive(value: DrawingBrush) -> None: ...
    @ReceiveAndSendReply.setter
    def ReceiveAndSendReply(value: DrawingBrush) -> None: ...
    @ReceiveReply.setter
    def ReceiveReply(value: DrawingBrush) -> None: ...
    @RemoveFromCollection.setter
    def RemoveFromCollection(value: DrawingBrush) -> None: ...
    @Rethrow.setter
    def Rethrow(value: DrawingBrush) -> None: ...
    @Send.setter
    def Send(value: DrawingBrush) -> None: ...
    @SendAndReceiveReply.setter
    def SendAndReceiveReply(value: DrawingBrush) -> None: ...
    @SendReply.setter
    def SendReply(value: DrawingBrush) -> None: ...
    @Sequence.setter
    def Sequence(value: DrawingBrush) -> None: ...
    @StartNode.setter
    def StartNode(value: DrawingBrush) -> None: ...
    @State.setter
    def State(value: DrawingBrush) -> None: ...
    @StateEntry.setter
    def StateEntry(value: DrawingBrush) -> None: ...
    @StateExit.setter
    def StateExit(value: DrawingBrush) -> None: ...
    @StateMachine.setter
    def StateMachine(value: DrawingBrush) -> None: ...
    @StateTransition.setter
    def StateTransition(value: DrawingBrush) -> None: ...
    @Switch.setter
    def Switch(value: DrawingBrush) -> None: ...
    @TerminateWorkflow.setter
    def TerminateWorkflow(value: DrawingBrush) -> None: ...
    @Throw.setter
    def Throw(value: DrawingBrush) -> None: ...
    @TransactedReceiveScope.setter
    def TransactedReceiveScope(value: DrawingBrush) -> None: ...
    @TransactionScope.setter
    def TransactionScope(value: DrawingBrush) -> None: ...
    @TryCatch.setter
    def TryCatch(value: DrawingBrush) -> None: ...
    @While.setter
    def While(value: DrawingBrush) -> None: ...
    @WriteLine.setter
    def WriteLine(value: DrawingBrush) -> None: ...


class ActivityDesigner(WorkflowViewElement):
    def __init__(self): ...
    @property
    def Icon(self) -> DrawingBrush: ...
    def OnApplyTemplate(self) -> None: ...
    @Icon.setter
    def Icon(self, value: DrawingBrush) -> None: ...


class ActivityDesignerOptionsAttribute(Attribute):
    def __init__(self): ...
    @property
    def AllowDrillIn(self) -> bool: ...
    @property
    def AlwaysCollapseChildren(self) -> bool: ...
    @property
    def OutlineViewIconProvider(self) -> Func: ...
    @AllowDrillIn.setter
    def AllowDrillIn(self, value: bool) -> None: ...
    @AlwaysCollapseChildren.setter
    def AlwaysCollapseChildren(self, value: bool) -> None: ...
    @OutlineViewIconProvider.setter
    def OutlineViewIconProvider(self, value: Func) -> None: ...


class ArgumentAccessor(Object):
    def __init__(self): ...
    @property
    def Getter(self) -> Func: ...
    @property
    def Setter(self) -> Action: ...
    @Getter.setter
    def Getter(self, value: Func) -> None: ...
    @Setter.setter
    def Setter(self, value: Action) -> None: ...


class CachedResourceDictionaryExtension(MarkupExtension):
    def __init__(self): ...
    @property
    def Source(self) -> Uri: ...
    def ProvideValue(self, serviceProvider: IServiceProvider) -> Object: ...
    @Source.setter
    def Source(self, value: Uri) -> None: ...


class ClipboardData(Object):
    def __init__(self): ...
    @property
    def Data(self) -> List: ...
    @property
    def Metadata(self) -> List: ...
    @property
    def Version(self) -> str: ...
    @Data.setter
    def Data(self, value: List) -> None: ...
    @Metadata.setter
    def Metadata(self, value: List) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...


class ContextItem(Object):
    @property
    def ItemType(self) -> Type: ...


class ContextItemManager(Object):
    @overload
    def Contains(self) -> bool: ...
    @overload
    def Contains(self, itemType: Type) -> bool: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetValue(self) -> TItemType: ...
    @overload
    def GetValue(self, itemType: Type) -> ContextItem: ...
    def SetValue(self, value: ContextItem) -> None: ...
    @overload
    def Subscribe(self, callback: SubscribeContextCallback) -> None: ...
    @overload
    def Subscribe(self, contextItemType: Type, callback: SubscribeContextCallback) -> None: ...
    @overload
    def Unsubscribe(self, callback: SubscribeContextCallback) -> None: ...
    @overload
    def Unsubscribe(self, contextItemType: Type, callback: SubscribeContextCallback) -> None: ...


class ContextMenuItems(Object):
    @property
    def Copy() -> DrawingBrush: ...
    @property
    def CopyDisabled() -> DrawingBrush: ...
    @property
    def Cut() -> DrawingBrush: ...
    @property
    def CutDisabled() -> DrawingBrush: ...
    @property
    def Delete() -> DrawingBrush: ...
    @property
    def DeleteDisabled() -> DrawingBrush: ...
    @property
    def Paste() -> DrawingBrush: ...
    @property
    def PasteDisabled() -> DrawingBrush: ...
    @Copy.setter
    def Copy(value: DrawingBrush) -> None: ...
    @CopyDisabled.setter
    def CopyDisabled(value: DrawingBrush) -> None: ...
    @Cut.setter
    def Cut(value: DrawingBrush) -> None: ...
    @CutDisabled.setter
    def CutDisabled(value: DrawingBrush) -> None: ...
    @Delete.setter
    def Delete(value: DrawingBrush) -> None: ...
    @DeleteDisabled.setter
    def DeleteDisabled(value: DrawingBrush) -> None: ...
    @Paste.setter
    def Paste(value: DrawingBrush) -> None: ...
    @PasteDisabled.setter
    def PasteDisabled(value: DrawingBrush) -> None: ...


class CutCopyPasteHelper(Object):
    def CanCopy(context: EditingContext) -> bool: ...
    def CanCut(context: EditingContext) -> bool: ...
    def CanPaste(context: EditingContext) -> bool: ...
    def DoCopy(context: EditingContext) -> None: ...
    def DoCut(context: EditingContext) -> None: ...
    def DoPaste(context: EditingContext) -> None: ...


class DefaultTypeArgumentAttribute(Attribute):
    def __init__(self, type: Type): ...
    @property
    def Type(self) -> Type: ...


class DesignerConfigurationService(Object):
    @property
    def AnnotationEnabled(self) -> bool: ...
    @property
    def AutoConnectEnabled(self) -> bool: ...
    @property
    def AutoSplitEnabled(self) -> bool: ...
    @property
    def AutoSurroundWithSequenceEnabled(self) -> bool: ...
    @property
    def BackgroundValidationEnabled(self) -> bool: ...
    @property
    def LoadingFromUntrustedSourceEnabled(self) -> bool: ...
    @property
    def MultipleItemsContextMenuEnabled(self) -> bool: ...
    @property
    def MultipleItemsDragDropEnabled(self) -> bool: ...
    @property
    def NamespaceConversionEnabled(self) -> bool: ...
    @property
    def PanModeEnabled(self) -> bool: ...
    @property
    def RubberBandSelectionEnabled(self) -> bool: ...
    @property
    def TargetFrameworkName(self) -> FrameworkName: ...
    @AnnotationEnabled.setter
    def AnnotationEnabled(self, value: bool) -> None: ...
    @AutoConnectEnabled.setter
    def AutoConnectEnabled(self, value: bool) -> None: ...
    @AutoSplitEnabled.setter
    def AutoSplitEnabled(self, value: bool) -> None: ...
    @AutoSurroundWithSequenceEnabled.setter
    def AutoSurroundWithSequenceEnabled(self, value: bool) -> None: ...
    @BackgroundValidationEnabled.setter
    def BackgroundValidationEnabled(self, value: bool) -> None: ...
    @LoadingFromUntrustedSourceEnabled.setter
    def LoadingFromUntrustedSourceEnabled(self, value: bool) -> None: ...
    @MultipleItemsContextMenuEnabled.setter
    def MultipleItemsContextMenuEnabled(self, value: bool) -> None: ...
    @MultipleItemsDragDropEnabled.setter
    def MultipleItemsDragDropEnabled(self, value: bool) -> None: ...
    @NamespaceConversionEnabled.setter
    def NamespaceConversionEnabled(self, value: bool) -> None: ...
    @PanModeEnabled.setter
    def PanModeEnabled(self, value: bool) -> None: ...
    @RubberBandSelectionEnabled.setter
    def RubberBandSelectionEnabled(self, value: bool) -> None: ...
    @TargetFrameworkName.setter
    def TargetFrameworkName(self, value: FrameworkName) -> None: ...


class DesignerItems(Object):
    @property
    def ActivityErrorValidation() -> DrawingBrush: ...
    @property
    def Annotation() -> DrawingBrush: ...
    @property
    def DeleteButton() -> DrawingBrush: ...
    @property
    def DeleteDisabledButton() -> DrawingBrush: ...
    @property
    def FitToScreen() -> DrawingBrush: ...
    @property
    def MoveDownButton() -> DrawingBrush: ...
    @property
    def MoveDownDisabledButton() -> DrawingBrush: ...
    @property
    def MoveUpButton() -> DrawingBrush: ...
    @property
    def MoveUpDisabledButton() -> DrawingBrush: ...
    @property
    def Overview() -> DrawingBrush: ...
    @property
    def OverviewWindowCloseButton() -> DrawingBrush: ...
    @property
    def PanMode() -> DrawingBrush: ...
    @property
    def ResizeGrip() -> DrawingBrush: ...
    @property
    def TextBoxErrorValidation() -> DrawingBrush: ...
    @property
    def WarningValidation() -> DrawingBrush: ...
    @property
    def WorkflowErrorValidation() -> DrawingBrush: ...
    @property
    def Zoom() -> DrawingBrush: ...
    @ActivityErrorValidation.setter
    def ActivityErrorValidation(value: DrawingBrush) -> None: ...
    @Annotation.setter
    def Annotation(value: DrawingBrush) -> None: ...
    @DeleteButton.setter
    def DeleteButton(value: DrawingBrush) -> None: ...
    @DeleteDisabledButton.setter
    def DeleteDisabledButton(value: DrawingBrush) -> None: ...
    @FitToScreen.setter
    def FitToScreen(value: DrawingBrush) -> None: ...
    @MoveDownButton.setter
    def MoveDownButton(value: DrawingBrush) -> None: ...
    @MoveDownDisabledButton.setter
    def MoveDownDisabledButton(value: DrawingBrush) -> None: ...
    @MoveUpButton.setter
    def MoveUpButton(value: DrawingBrush) -> None: ...
    @MoveUpDisabledButton.setter
    def MoveUpDisabledButton(value: DrawingBrush) -> None: ...
    @Overview.setter
    def Overview(value: DrawingBrush) -> None: ...
    @OverviewWindowCloseButton.setter
    def OverviewWindowCloseButton(value: DrawingBrush) -> None: ...
    @PanMode.setter
    def PanMode(value: DrawingBrush) -> None: ...
    @ResizeGrip.setter
    def ResizeGrip(value: DrawingBrush) -> None: ...
    @TextBoxErrorValidation.setter
    def TextBoxErrorValidation(value: DrawingBrush) -> None: ...
    @WarningValidation.setter
    def WarningValidation(value: DrawingBrush) -> None: ...
    @WorkflowErrorValidation.setter
    def WorkflowErrorValidation(value: DrawingBrush) -> None: ...
    @Zoom.setter
    def Zoom(value: DrawingBrush) -> None: ...


class DragDropHelper(Object):
    def AllowDrop(draggedDataObject: IDataObject, context: EditingContext, allowedItemTypes: Set(Type)) -> bool: ...
    def GetCompositeView(workflowViewElement: WorkflowViewElement) -> UIElement: ...
    def GetDragDropAnchorPoint(e: DragEventArgs) -> Point: ...
    def GetDraggedModelItems(e: DragEventArgs) -> Iterable[ModelItem]: ...
    def GetDroppedObjects(dropTarget: DependencyObject, e: DragEventArgs, context: EditingContext) -> Iterable[Object]: ...
    def SetCompositeView(workflowViewElement: WorkflowViewElement, dragSource: UIElement) -> None: ...


class EditingContext(Object):
    def __init__(self): ...
    def add_Disposing(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Items(self) -> ContextItemManager: ...
    @property
    def Services(self) -> ServiceManager: ...
    def remove_Disposing(self, value: EventHandler) -> None: ...


class IActivityTemplateFactory:
    def Create(self, target: DependencyObject) -> Activity: ...




class IActivityToolboxService:
    def AddCategory(self, categoryName: str) -> None: ...
    def AddItem(self, qualifiedTypeName: str, categoryName: str) -> None: ...
    def EnumCategories(self) -> List[str]: ...
    def EnumItems(self, categoryName: str) -> List[str]: ...
    def RemoveCategory(self, categoryName: str) -> None: ...
    def RemoveItem(self, qualifiedTypeName: str, categoryName: str) -> None: ...


class ICompositeView:
    def CanPasteItems(self, itemsToPaste: List) -> bool: ...
    @property
    def DroppingTypeResolvingOptions(self) -> TypeResolvingOptions: ...
    @property
    def IsDefaultContainer(self) -> bool: ...
    def OnItemMoved(self, modelItem: ModelItem) -> None: ...
    def OnItemsCopied(self, itemsToCopy: List) -> Object: ...
    def OnItemsCut(self, itemsToCut: List) -> Object: ...
    def OnItemsDelete(self, itemsToDelete: List) -> None: ...
    def OnItemsPasted(self, itemsToPaste: List, metadata: List, pastePoint: Point, pastePointReference: WorkflowViewElement) -> None: ...


class ICompositeViewEvents:
    def RegisterCompositeView(self, container: ICompositeView) -> None: ...
    def RegisterDefaultCompositeView(self, container: ICompositeView) -> None: ...
    def UnregisterCompositeView(self, container: ICompositeView) -> None: ...
    def UnregisterDefaultCompositeView(self, container: ICompositeView) -> None: ...


class IIntegratedHelpService:
    def AddContextAttribute(self, name: str, value: str, keywordType: HelpKeywordType) -> None: ...
    def RemoveContextAttribute(self, name: str, value: str) -> None: ...
    def ShowHelpFromKeyword(self, helpKeyword: str) -> None: ...
    def ShowHelpFromUrl(self, helpUrl: str) -> None: ...


class IModalService:
    def SetModalState(self, isModal: bool) -> None: ...


class IMultipleDragEnabledCompositeView:
    def OnItemsMoved(self, movedItems: List) -> None: ...
    def SortSelectedItems(self, selectedItems: List) -> List: ...


class IWorkflowDesignerStorageService:
    def AddData(self, key: str, value: Object) -> None: ...
    def ContainsKey(self, key: str) -> bool: ...
    def GetData(self, key: str) -> Object: ...
    def RemoveData(self, key: str) -> None: ...
    def SetData(self, key: str, value: Object) -> None: ...


class IXamlLoadErrorService:
    def ShowXamlLoadErrors(self, errors: List[XamlLoadErrorInfo]) -> None: ...


class ObjectReferenceService(Object):
    def __init__(self, context: EditingContext): ...
    @overload
    def AcquireObjectReference(self, obj: Object) -> Guid: ...
    @overload
    def AcquireObjectReference(self, startLine: int, startColumn: int, endLine: int, endColumn: int) -> Guid: ...
    def add_SourceLocationUpdated(self, value: EventHandler) -> None: ...
    def ReleaseObjectReference(self, objectReferenceId: Guid) -> None: ...
    def remove_SourceLocationUpdated(self, value: EventHandler) -> None: ...
    def TryGetObject(self, objectReferenceId: Guid) -> Tuple[bool, Object]: ...


class PublishServiceCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, serviceType: Type, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Object: ...
    def Invoke(self, serviceType: Type) -> Object: ...




class ServiceManager(Object):
    @overload
    def Contains(self) -> bool: ...
    @overload
    def Contains(self, serviceType: Type) -> bool: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetRequiredService(self) -> TServiceType: ...
    @overload
    def GetService(self) -> TServiceType: ...
    @overload
    def GetService(self, serviceType: Type) -> Object: ...
    @overload
    def Publish(self, serviceInstance: TServiceType) -> None: ...
    @overload
    def Publish(self, callback: PublishServiceCallback) -> None: ...
    @overload
    def Publish(self, serviceType: Type, callback: PublishServiceCallback) -> None: ...
    @overload
    def Publish(self, serviceType: Type, serviceInstance: Object) -> None: ...
    @overload
    def Subscribe(self, callback: SubscribeServiceCallback) -> None: ...
    @overload
    def Subscribe(self, serviceType: Type, callback: SubscribeServiceCallback) -> None: ...
    @overload
    def Unsubscribe(self, callback: SubscribeServiceCallback) -> None: ...
    @overload
    def Unsubscribe(self, serviceType: Type, callback: SubscribeServiceCallback) -> None: ...


class SourceLocationUpdatedEventArgs(EventArgs):
    def __init__(self, objectReference: Guid, updatedSourceLocation: SourceLocation): ...
    @property
    def ObjectReference(self) -> Guid: ...
    @property
    def UpdatedSourceLocation(self) -> SourceLocation: ...


class SubscribeContextCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, item: ContextItem, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, item: ContextItem) -> None: ...




class SubscribeServiceCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, serviceType: Type, serviceInstance: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, serviceType: Type, serviceInstance: Object) -> None: ...




class TypeResolvingOptionsAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, options: TypeResolvingOptions): ...
    @property
    def TypeResolvingOptions(self) -> TypeResolvingOptions: ...
    @TypeResolvingOptions.setter
    def TypeResolvingOptions(self, value: TypeResolvingOptions) -> None: ...


class UndoEngine(Object):
    def __init__(self, context: EditingContext): ...
    def add_RedoCompleted(self, value: EventHandler) -> None: ...
    def add_UndoCompleted(self, value: EventHandler) -> None: ...
    def add_UndoRedoBufferChanged(self, value: EventHandler) -> None: ...
    def add_UndoUnitAdded(self, value: EventHandler) -> None: ...
    def add_UndoUnitCancelled(self, value: EventHandler) -> None: ...
    def add_UndoUnitDiscarded(self, value: EventHandler) -> None: ...
    def AddUndoUnit(self, unit: UndoUnit) -> None: ...
    @property
    def IsUndoRedoInProgress(self) -> bool: ...
    def GetRedoActions(self) -> Iterable[str]: ...
    def GetUndoActions(self) -> Iterable[str]: ...
    def Redo(self) -> bool: ...
    def remove_RedoCompleted(self, value: EventHandler) -> None: ...
    def remove_UndoCompleted(self, value: EventHandler) -> None: ...
    def remove_UndoRedoBufferChanged(self, value: EventHandler) -> None: ...
    def remove_UndoUnitAdded(self, value: EventHandler) -> None: ...
    def remove_UndoUnitCancelled(self, value: EventHandler) -> None: ...
    def remove_UndoUnitDiscarded(self, value: EventHandler) -> None: ...
    def Undo(self) -> bool: ...


class UndoUnit(Object):
    @property
    def Description(self) -> str: ...
    def Redo(self) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    def Undo(self) -> None: ...


class UndoUnitEventArgs(EventArgs):
    def __init__(self): ...
    @property
    def UndoUnit(self) -> UndoUnit: ...
    @UndoUnit.setter
    def UndoUnit(self, value: UndoUnit) -> None: ...


class WorkflowDesigner(Object):
    def __init__(self): ...
    def add_ModelChanged(self, value: EventHandler) -> None: ...
    def add_TextChanged(self, value: TextChangedEventHandler) -> None: ...
    def Flush(self) -> None: ...
    @property
    def Context(self) -> EditingContext: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def DebugManagerView(self) -> IDesignerDebugView: ...
    @property
    def OutlineView(self) -> UIElement: ...
    @property
    def PropertyInspectorView(self) -> UIElement: ...
    @property
    def Text(self) -> str: ...
    @property
    def View(self) -> UIElement: ...
    def IsInErrorState(self) -> bool: ...
    @overload
    def Load(self) -> None: ...
    @overload
    def Load(self, fileName: str) -> None: ...
    @overload
    def Load(self, instance: Object) -> None: ...
    def remove_ModelChanged(self, value: EventHandler) -> None: ...
    def remove_TextChanged(self, value: TextChangedEventHandler) -> None: ...
    def Save(self, fileName: str) -> None: ...
    @PropertyInspectorFontAndColorData.setter
    def PropertyInspectorFontAndColorData(self, value: str) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class WorkflowDesignerColors(Object):
    @property
    def ActivityDesignerSelectedTitleForegroundColor() -> Color: ...
    @property
    def AnnotationBackgroundGradientBeginColor() -> Color: ...
    @property
    def AnnotationBackgroundGradientEndColor() -> Color: ...
    @property
    def AnnotationBackgroundGradientMiddleColor() -> Color: ...
    @property
    def AnnotationBorderColor() -> Color: ...
    @property
    def AnnotationDockButtonColor() -> Color: ...
    @property
    def AnnotationDockButtonHoverBackgroundColor() -> Color: ...
    @property
    def AnnotationDockButtonHoverBorderColor() -> Color: ...
    @property
    def AnnotationDockButtonHoverColor() -> Color: ...
    @property
    def AnnotationDockTextColor() -> Color: ...
    @property
    def AnnotationUndockTextColor() -> Color: ...
    @property
    def ContextMenuBackgroundGradientBeginColor() -> Color: ...
    @property
    def ContextMenuBackgroundGradientEndColor() -> Color: ...
    @property
    def ContextMenuBorderColor() -> Color: ...
    @property
    def ContextMenuIconAreaColor() -> Color: ...
    @property
    def ContextMenuItemTextColor() -> Color: ...
    @property
    def ContextMenuItemTextDisabledColor() -> Color: ...
    @property
    def ContextMenuItemTextHoverColor() -> Color: ...
    @property
    def ContextMenuItemTextHoverQuirkedColor() -> Color: ...
    @property
    def ContextMenuItemTextSelectedColor() -> Color: ...
    @property
    def ContextMenuMouseOverBeginColor() -> Color: ...
    @property
    def ContextMenuMouseOverBorderColor() -> Color: ...
    @property
    def ContextMenuMouseOverEndColor() -> Color: ...
    @property
    def ContextMenuMouseOverMiddle1Color() -> Color: ...
    @property
    def ContextMenuMouseOverMiddle2Color() -> Color: ...
    @property
    def ContextMenuSeparatorColor() -> Color: ...
    @property
    def DesignerViewBackgroundColor() -> Color: ...
    @property
    def DesignerViewExpandAllCollapseAllButtonBrush() -> Brush: ...
    @property
    def DesignerViewExpandAllCollapseAllButtonMouseOverBrush() -> Brush: ...
    @property
    def DesignerViewExpandAllCollapseAllPressedBrush() -> Brush: ...
    @property
    def DesignerViewShellBarCaptionActiveColor() -> Color: ...
    @property
    def DesignerViewShellBarCaptionColor() -> Color: ...
    @property
    def DesignerViewShellBarColorGradientBeginColor() -> Color: ...
    @property
    def DesignerViewShellBarColorGradientEndColor() -> Color: ...
    @property
    def DesignerViewShellBarControlBackgroundColor() -> Color: ...
    @property
    def DesignerViewShellBarHoverColorGradientBeginColor() -> Color: ...
    @property
    def DesignerViewShellBarHoverColorGradientEndColor() -> Color: ...
    @property
    def DesignerViewShellBarSelectedColorGradientBeginColor() -> Color: ...
    @property
    def DesignerViewShellBarSelectedColorGradientEndColor() -> Color: ...
    @property
    def DesignerViewStatusBarBackgroundColor() -> Color: ...
    @property
    def FlowchartConnectorColor() -> Color: ...
    @property
    def FlowchartExpressionButtonBrush() -> Brush: ...
    @property
    def FlowchartExpressionButtonMouseOverBrush() -> Brush: ...
    @property
    def FlowchartExpressionButtonPressedBrush() -> Brush: ...
    @property
    def FontFamily() -> FontFamily: ...
    @property
    def FontSize() -> float: ...
    @property
    def FontWeight() -> FontWeight: ...
    @property
    def GridViewRowHoverColor() -> Color: ...
    @property
    def OutlineViewBackgroundColor() -> Color: ...
    @property
    def OutlineViewCollapsedArrowBorderColor() -> Color: ...
    @property
    def OutlineViewCollapsedArrowHoverBorderColor() -> Color: ...
    @property
    def OutlineViewExpandedArrowBorderColor() -> Color: ...
    @property
    def OutlineViewExpandedArrowColor() -> Color: ...
    @property
    def OutlineViewItemHighlightBackgroundColor() -> Color: ...
    @property
    def OutlineViewItemSelectedTextColor() -> Color: ...
    @property
    def OutlineViewItemTextColor() -> Color: ...
    @property
    def PropertyInspectorBackgroundBrushKey() -> str: ...
    @property
    def PropertyInspectorBorderBrushKey() -> str: ...
    @property
    def PropertyInspectorCategoryCaptionTextBrushKey() -> str: ...
    @property
    def PropertyInspectorPaneBrushKey() -> str: ...
    @property
    def PropertyInspectorPopupBrushKey() -> str: ...
    @property
    def PropertyInspectorSelectedBackgroundBrushKey() -> str: ...
    @property
    def PropertyInspectorSelectedForegroundBrushKey() -> str: ...
    @property
    def PropertyInspectorTextBrushKey() -> str: ...
    @property
    def PropertyInspectorToolBarBackgroundBrushKey() -> str: ...
    @property
    def PropertyInspectorToolBarItemHoverBackgroundBrushKey() -> str: ...
    @property
    def PropertyInspectorToolBarItemHoverBorderBrushKey() -> str: ...
    @property
    def PropertyInspectorToolBarItemSelectedBackgroundBrushKey() -> str: ...
    @property
    def PropertyInspectorToolBarItemSelectedBorderBrushKey() -> str: ...
    @property
    def PropertyInspectorToolBarSeparatorBrushKey() -> str: ...
    @property
    def PropertyInspectorToolBarTextBoxBorderBrushKey() -> str: ...
    @property
    def PropertyToolBarHightlightedButtonForegroundColor() -> Color: ...
    @property
    def WorkflowViewElementBackgroundColor() -> Color: ...
    @property
    def WorkflowViewElementBorderColor() -> Color: ...
    @property
    def WorkflowViewElementCaptionColor() -> Color: ...
    @property
    def WorkflowViewElementSelectedBackgroundColor() -> Color: ...
    @property
    def WorkflowViewElementSelectedBorderColor() -> Color: ...
    @property
    def WorkflowViewElementSelectedCaptionColor() -> Color: ...


class WorkflowDesignerIcons(Object):
    def UseWindowsStoreAppStyleIcons() -> None: ...


class WorkflowElementDialog(ContentControl):
    @property
    def Context(self) -> EditingContext: ...
    @property
    def EnableMaximizeButton(self) -> bool: ...
    @property
    def EnableMinimizeButton(self) -> bool: ...
    @property
    def HelpKeyword(self) -> str: ...
    @property
    def ModelItem(self) -> ModelItem: ...
    @property
    def Owner(self) -> DependencyObject: ...
    @property
    def Title(self) -> str: ...
    @property
    def WindowResizeMode(self) -> ResizeMode: ...
    @property
    def WindowSizeToContent(self) -> SizeToContent: ...
    @Context.setter
    def Context(self, value: EditingContext) -> None: ...
    @EnableMaximizeButton.setter
    def EnableMaximizeButton(self, value: bool) -> None: ...
    @EnableMinimizeButton.setter
    def EnableMinimizeButton(self, value: bool) -> None: ...
    @HelpKeyword.setter
    def HelpKeyword(self, value: str) -> None: ...
    @ModelItem.setter
    def ModelItem(self, value: ModelItem) -> None: ...
    @Owner.setter
    def Owner(self, value: DependencyObject) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @WindowResizeMode.setter
    def WindowResizeMode(self, value: ResizeMode) -> None: ...
    @WindowSizeToContent.setter
    def WindowSizeToContent(self, value: SizeToContent) -> None: ...
    def Show(self) -> None: ...
    def ShowOkCancel(self) -> bool: ...


class WorkflowFileItem(ContextItem):
    def __init__(self): ...
    @property
    def ItemType(self) -> Type: ...
    @property
    def LoadedFile(self) -> str: ...
    @LoadedFile.setter
    def LoadedFile(self, value: str) -> None: ...


class WorkflowItemPresenter(ContentControl):
    def __init__(self): ...
    @property
    def AllowedItemType(self) -> Type: ...
    @property
    def DroppingTypeResolvingOptions(self) -> TypeResolvingOptions: ...
    @property
    def HintText(self) -> str: ...
    @property
    def IsDefaultContainer(self) -> bool: ...
    @property
    def Item(self) -> ModelItem: ...
    @AllowedItemType.setter
    def AllowedItemType(self, value: Type) -> None: ...
    @DroppingTypeResolvingOptions.setter
    def DroppingTypeResolvingOptions(self, value: TypeResolvingOptions) -> None: ...
    @HintText.setter
    def HintText(self, value: str) -> None: ...
    @IsDefaultContainer.setter
    def IsDefaultContainer(self, value: bool) -> None: ...
    @Item.setter
    def Item(self, value: ModelItem) -> None: ...


class WorkflowItemsPresenter(ContentControl):
    def __init__(self): ...
    def CanPasteItems(self, itemsToPaste: List) -> bool: ...
    @property
    def AllowedItemType(self) -> Type: ...
    @property
    def DroppingTypeResolvingOptions(self) -> TypeResolvingOptions: ...
    @property
    def FooterTemplate(self) -> DataTemplate: ...
    @property
    def HeaderTemplate(self) -> DataTemplate: ...
    @property
    def HintText(self) -> str: ...
    @property
    def IsDefaultContainer(self) -> bool: ...
    @property
    def Items(self) -> ModelItemCollection: ...
    @property
    def ItemsPanel(self) -> ItemsPanelTemplate: ...
    @property
    def SpacerTemplate(self) -> DataTemplate: ...
    def OnItemMoved(self, modelItem: ModelItem) -> None: ...
    def OnItemsCopied(self, itemsToCopy: List) -> Object: ...
    def OnItemsCut(self, itemsToCut: List) -> Object: ...
    def OnItemsDelete(self, itemsToDelete: List) -> None: ...
    def OnItemsMoved(self, movedItems: List) -> None: ...
    def OnItemsPasted(self, itemsToPaste: List, metaData: List, pastePoint: Point, pastePointReference: WorkflowViewElement) -> None: ...
    @AllowedItemType.setter
    def AllowedItemType(self, value: Type) -> None: ...
    @DroppingTypeResolvingOptions.setter
    def DroppingTypeResolvingOptions(self, value: TypeResolvingOptions) -> None: ...
    @FooterTemplate.setter
    def FooterTemplate(self, value: DataTemplate) -> None: ...
    @HeaderTemplate.setter
    def HeaderTemplate(self, value: DataTemplate) -> None: ...
    @HintText.setter
    def HintText(self, value: str) -> None: ...
    @IsDefaultContainer.setter
    def IsDefaultContainer(self, value: bool) -> None: ...
    @Items.setter
    def Items(self, value: ModelItemCollection) -> None: ...
    @ItemsPanel.setter
    def ItemsPanel(self, value: ItemsPanelTemplate) -> None: ...
    @SpacerTemplate.setter
    def SpacerTemplate(self, value: DataTemplate) -> None: ...
    def SortSelectedItems(self, selectedItems: List) -> List: ...


class WorkflowViewElement(ContentControl):
    def __init__(self): ...
    @property
    def Collapsible(self) -> bool: ...
    @property
    def Context(self) -> EditingContext: ...
    @property
    def DragHandle(self) -> FrameworkElement: ...
    @property
    def ExpandState(self) -> bool: ...
    @property
    def IsRootDesigner(self) -> bool: ...
    @property
    def ModelItem(self) -> ModelItem: ...
    @property
    def PinState(self) -> bool: ...
    @property
    def ShowExpanded(self) -> bool: ...
    def RegisterCompositeView(self, container: ICompositeView) -> None: ...
    def RegisterDefaultCompositeView(self, container: ICompositeView) -> None: ...
    @Collapsible.setter
    def Collapsible(self, value: bool) -> None: ...
    @Context.setter
    def Context(self, value: EditingContext) -> None: ...
    @DragHandle.setter
    def DragHandle(self, value: FrameworkElement) -> None: ...
    @ExpandState.setter
    def ExpandState(self, value: bool) -> None: ...
    @ModelItem.setter
    def ModelItem(self, value: ModelItem) -> None: ...
    @PinState.setter
    def PinState(self, value: bool) -> None: ...
    def UnregisterCompositeView(self, container: ICompositeView) -> None: ...
    def UnregisterDefaultCompositeView(self, container: ICompositeView) -> None: ...


class XamlLoadErrorInfo(Object):
    def __init__(self, message: str, lineNumber: int, linePosition: int): ...
    @property
    def FileName(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> None: ...
