__all__ = ['Debugger','DurableInstancing','DynamicUpdate','ExpressionParser','Expressions','Hosting','Persistence','Statements','Tracking','Validation','XamlIntegration']
from typing import Tuple, Set, Iterable, List


class Activity(Object):
    @property
    def DisplayName(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    def ShouldSerializeDisplayName(self) -> bool: ...
    def ToString(self) -> str: ...




class ActivityAction(ActivityDelegate):
    def __init__(self): ...


































class ActivityBuilder(Object):
    def __init__(self): ...
    @property
    def Attributes(self) -> Collection: ...
    @property
    def Constraints(self) -> Collection: ...
    @property
    def Implementation(self) -> Activity: ...
    @property
    def ImplementationVersion(self) -> Version: ...
    @property
    def Name(self) -> str: ...
    @property
    def Properties(self) -> KeyedCollection: ...
    def GetPropertyReference(target: Object) -> ActivityPropertyReference: ...
    def GetPropertyReferences(target: Object) -> List[ActivityPropertyReference]: ...
    @Implementation.setter
    def Implementation(self, value: Activity) -> None: ...
    @ImplementationVersion.setter
    def ImplementationVersion(self, value: Version) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def SetPropertyReference(target: Object, value: ActivityPropertyReference) -> None: ...
    def ShouldSerializePropertyReference(target: Object) -> bool: ...
    def ShouldSerializePropertyReferences(target: Object) -> bool: ...




class ActivityContext(Object):
    @property
    def ActivityInstanceId(self) -> str: ...
    @property
    def DataContext(self) -> WorkflowDataContext: ...
    @property
    def WorkflowInstanceId(self) -> Guid: ...
    def GetExtension(self) -> T: ...
    def GetLocation(self, locationReference: LocationReference) -> Location: ...
    @overload
    def GetValue(self, runtimeArgument: RuntimeArgument) -> Object: ...
    @overload
    def GetValue(self, argument: Argument) -> Object: ...
    @overload
    def GetValue(self, argument: InArgument) -> T: ...
    @overload
    def GetValue(self, argument: OutArgument) -> T: ...
    @overload
    def GetValue(self, locationReference: LocationReference) -> T: ...
    @overload
    def GetValue(self, argument: InOutArgument) -> T: ...
    @overload
    def SetValue(self, argument: OutArgument, value: T) -> None: ...
    @overload
    def SetValue(self, argument: InOutArgument, value: T) -> None: ...
    @overload
    def SetValue(self, argument: InArgument, value: T) -> None: ...
    @overload
    def SetValue(self, argument: Argument, value: Object) -> None: ...
    @overload
    def SetValue(self, locationReference: LocationReference, value: T) -> None: ...


class ActivityDelegate(Object):
    @property
    def DisplayName(self) -> str: ...
    @property
    def Handler(self) -> Activity: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @Handler.setter
    def Handler(self, value: Activity) -> None: ...
    def ShouldSerializeDisplayName(self) -> bool: ...
    def ToString(self) -> str: ...




































class ActivityInstance(Object):
    @property
    def Activity(self) -> Activity: ...
    @property
    def Id(self) -> str: ...
    @property
    def ImplementationVersion(self) -> Version: ...
    @property
    def IsCompleted(self) -> bool: ...
    @property
    def State(self) -> ActivityInstanceState: ...


class ActivityInstanceState:
    Executing = 0
    Closed = 1
    Canceled = 2
    Faulted = 3


class ActivityMetadata(ValueType):
    def AddArgument(self, argument: RuntimeArgument) -> None: ...
    def AddDefaultExtensionProvider(self, extensionProvider: Func) -> None: ...
    @overload
    def AddImportedChild(self, importedChild: Activity) -> None: ...
    @overload
    def AddImportedChild(self, importedChild: Activity, origin: Object) -> None: ...
    @overload
    def AddImportedDelegate(self, importedDelegate: ActivityDelegate) -> None: ...
    @overload
    def AddImportedDelegate(self, importedDelegate: ActivityDelegate, origin: Object) -> None: ...
    @overload
    def AddValidationError(self, validationErrorMessage: str) -> None: ...
    @overload
    def AddValidationError(self, validationError: ValidationError) -> None: ...
    @overload
    def AddVariable(self, variable: Variable) -> None: ...
    @overload
    def AddVariable(self, variable: Variable, origin: Object) -> None: ...
    def Bind(self, binding: Argument, argument: RuntimeArgument) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Environment(self) -> LocationReferenceEnvironment: ...
    @property
    def HasViolations(self) -> bool: ...
    def GetArgumentsWithReflection(self) -> Collection: ...
    def GetHashCode(self) -> int: ...
    def GetImportedChildrenWithReflection(self) -> Collection: ...
    def GetImportedDelegatesWithReflection(self) -> Collection: ...
    def GetVariablesWithReflection(self) -> Collection: ...
    def op_Equality(left: ActivityMetadata, right: ActivityMetadata) -> bool: ...
    def op_Inequality(left: ActivityMetadata, right: ActivityMetadata) -> bool: ...
    @overload
    def RequireExtension(self) -> None: ...
    @overload
    def RequireExtension(self, extensionType: Type) -> None: ...
    def SetArgumentsCollection(self, arguments: Collection) -> None: ...
    def SetImportedChildrenCollection(self, importedChildren: Collection) -> None: ...
    def SetImportedDelegatesCollection(self, importedDelegates: Collection) -> None: ...
    def SetValidationErrorsCollection(self, validationErrors: Collection) -> None: ...
    def SetVariablesCollection(self, variables: Collection) -> None: ...


class ActivityPropertyReference(Object):
    def __init__(self): ...
    @property
    def SourceProperty(self) -> str: ...
    @property
    def TargetProperty(self) -> str: ...
    @SourceProperty.setter
    def SourceProperty(self, value: str) -> None: ...
    @TargetProperty.setter
    def TargetProperty(self, value: str) -> None: ...


class ActivityWithResult(Activity):
    @property
    def Result(self) -> OutArgument: ...
    @property
    def ResultType(self) -> Type: ...
    @Result.setter
    def Result(self, value: OutArgument) -> None: ...


class Argument(Object):
    def Create(type: Type, direction: ArgumentDirection) -> Argument: ...
    def CreateReference(argumentToReference: Argument, referencedArgumentName: str) -> Argument: ...
    @property
    def ArgumentType(self) -> Type: ...
    @property
    def Direction(self) -> ArgumentDirection: ...
    @property
    def EvaluationOrder(self) -> int: ...
    @property
    def Expression(self) -> ActivityWithResult: ...
    @overload
    def Get(self, context: ActivityContext) -> Object: ...
    @overload
    def Get(self, context: ActivityContext) -> T: ...
    def GetLocation(self, context: ActivityContext) -> Location: ...
    @EvaluationOrder.setter
    def EvaluationOrder(self, value: int) -> None: ...
    @Expression.setter
    def Expression(self, value: ActivityWithResult) -> None: ...
    def Set(self, context: ActivityContext, value: Object) -> None: ...


class ArgumentDirection:
    In = 0
    Out = 1
    InOut = 2


class AsyncCodeActivity(Activity):
    pass




class AsyncCodeActivityContext(CodeActivityContext):
    @property
    def IsCancellationRequested(self) -> bool: ...
    @property
    def UserState(self) -> Object: ...
    def MarkCanceled(self) -> None: ...
    @UserState.setter
    def UserState(self, value: Object) -> None: ...


class Bookmark(Object):
    def __init__(self, name: str): ...
    @overload
    def Equals(self, other: Bookmark) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class BookmarkCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, context: NativeActivityContext, bookmark: Bookmark, value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, context: NativeActivityContext, bookmark: Bookmark, value: Object) -> None: ...


class BookmarkOptions:
    #None = 0
    MultipleResume = 1
    NonBlocking = 2


class BookmarkResumptionResult:
    Success = 0
    NotFound = 1
    NotReady = 2


class BookmarkScope(Object):
    def __init__(self, id: Guid): ...
    @overload
    def Equals(self, other: BookmarkScope) -> bool: ...
    @property
    def Default() -> BookmarkScope: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsInitialized(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Initialize(self, context: NativeActivityContext, id: Guid) -> None: ...


class BookmarkScopeHandle(Handle):
    def __init__(self): ...
    @overload
    def CreateBookmarkScope(self, context: NativeActivityContext) -> None: ...
    @overload
    def CreateBookmarkScope(self, context: NativeActivityContext, scopeId: Guid) -> None: ...
    @property
    def BookmarkScope(self) -> BookmarkScope: ...
    @property
    def Default() -> BookmarkScopeHandle: ...
    def Initialize(self, context: NativeActivityContext, scope: Guid) -> None: ...


class CodeActivity(Activity):
    pass




class CodeActivityContext(ActivityContext):
    def GetProperty(self) -> THandle: ...
    def Track(self, record: CustomTrackingRecord) -> None: ...


class CodeActivityMetadata(ValueType):
    def AddArgument(self, argument: RuntimeArgument) -> None: ...
    def AddDefaultExtensionProvider(self, extensionProvider: Func) -> None: ...
    @overload
    def AddValidationError(self, validationErrorMessage: str) -> None: ...
    @overload
    def AddValidationError(self, validationError: ValidationError) -> None: ...
    def Bind(self, binding: Argument, argument: RuntimeArgument) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Environment(self) -> LocationReferenceEnvironment: ...
    @property
    def HasViolations(self) -> bool: ...
    def GetArgumentsWithReflection(self) -> Collection: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: CodeActivityMetadata, right: CodeActivityMetadata) -> bool: ...
    def op_Inequality(left: CodeActivityMetadata, right: CodeActivityMetadata) -> bool: ...
    @overload
    def RequireExtension(self) -> None: ...
    @overload
    def RequireExtension(self, extensionType: Type) -> None: ...
    def SetArgumentsCollection(self, arguments: Collection) -> None: ...
    def SetValidationErrorsCollection(self, validationErrors: Collection) -> None: ...


class CodeActivityPublicEnvironmentAccessor(ValueType):
    def Create(metadata: CodeActivityMetadata) -> CodeActivityPublicEnvironmentAccessor: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ActivityMetadata(self) -> CodeActivityMetadata: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: CodeActivityPublicEnvironmentAccessor, right: CodeActivityPublicEnvironmentAccessor) -> bool: ...
    def op_Inequality(left: CodeActivityPublicEnvironmentAccessor, right: CodeActivityPublicEnvironmentAccessor) -> bool: ...
    def TryGetAccessToPublicLocation(self, publicLocation: LocationReference, accessDirection: ArgumentDirection) -> Tuple[bool, LocationReference]: ...
    def TryGetReferenceToPublicLocation(self, publicReference: LocationReference) -> Tuple[bool, LocationReference]: ...


class CompletionCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, context: NativeActivityContext, completedInstance: ActivityInstance, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, context: NativeActivityContext, completedInstance: ActivityInstance) -> None: ...




class DelegateArgument(LocationReference):
    @property
    def Direction(self) -> ArgumentDirection: ...
    @property
    def Name(self) -> str: ...
    def Get(self, context: ActivityContext) -> Object: ...
    def GetLocation(self, context: ActivityContext) -> Location: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class DelegateCompletionCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, context: NativeActivityContext, completedInstance: ActivityInstance, outArguments: IDictionary, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, context: NativeActivityContext, completedInstance: ActivityInstance, outArguments: IDictionary) -> None: ...


class DelegateInArgument(DelegateArgument):
    pass




class DelegateOutArgument(DelegateArgument):
    pass




class DynamicActivity(Activity):
    def __init__(self): ...
    @property
    def Attributes(self) -> Collection: ...
    @property
    def Constraints(self) -> Collection: ...
    @property
    def Implementation(self) -> Func: ...
    @property
    def ImplementationVersion(self) -> Version: ...
    @property
    def Name(self) -> str: ...
    @property
    def Properties(self) -> KeyedCollection: ...
    @Implementation.setter
    def Implementation(self, value: Func) -> None: ...
    @ImplementationVersion.setter
    def ImplementationVersion(self, value: Version) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...




class DynamicActivityProperty(Object):
    def __init__(self): ...
    @property
    def Attributes(self) -> Collection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @property
    def Value(self) -> Object: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class ExceptionPersistenceExtension(Object):
    def __init__(self): ...
    @property
    def PersistExceptions(self) -> bool: ...
    @PersistExceptions.setter
    def PersistExceptions(self, value: bool) -> None: ...


class ExclusiveHandle(Handle):
    def __init__(self): ...
    @property
    def RegisteredBookmarkScopes(self) -> ReadOnlyCollection: ...
    def RegisterBookmarkScope(self, context: NativeActivityContext, bookmarkScopeHandle: BookmarkScopeHandle) -> None: ...
    def Reinitialize(self, context: NativeActivityContext) -> None: ...


class ExecutionProperties(Object):
    @overload
    def Add(self, name: str, property: Object) -> None: ...
    @overload
    def Add(self, name: str, property: Object, onlyVisibleToPublicChildren: bool) -> None: ...
    def Find(self, name: str) -> Object: ...
    @property
    def IsEmpty(self) -> bool: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, name: str) -> bool: ...


class FaultCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, faultContext: NativeActivityFaultContext, propagatedException: Exception, propagatedFrom: ActivityInstance, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, faultContext: NativeActivityFaultContext, propagatedException: Exception, propagatedFrom: ActivityInstance) -> None: ...


class Handle(Object):
    @property
    def ExecutionPropertyName(self) -> str: ...
    @property
    def Owner(self) -> ActivityInstance: ...


class HandleInitializationContext(Object):
    def CreateAndInitializeHandle(self) -> THandle: ...
    def GetExtension(self) -> T: ...
    def UninitializeHandle(self, handle: Handle) -> None: ...


class IExecutionProperty:
    def CleanupWorkflowThread(self) -> None: ...
    def SetupWorkflowThread(self) -> None: ...


class InArgument(Argument):
    @overload
    def CreateReference(argumentToReference: InArgument, referencedArgumentName: str) -> InArgument: ...
    @overload
    def CreateReference(argumentToReference: InOutArgument, referencedArgumentName: str) -> InArgument: ...




class InOutArgument(Argument):
    def CreateReference(argumentToReference: InOutArgument, referencedArgumentName: str) -> InOutArgument: ...




class InvalidWorkflowException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class InvokeCompletedEventArgs(AsyncCompletedEventArgs):
    @property
    def Outputs(self) -> IDictionary: ...


class IPropertyRegistrationCallback:
    def Register(self, context: RegistrationContext) -> None: ...
    def Unregister(self, context: RegistrationContext) -> None: ...


class Location(Object):
    @property
    def LocationType(self) -> Type: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...




class LocationReference(Object):
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    def GetLocation(self, context: ActivityContext) -> Location: ...


class LocationReferenceEnvironment(Object):
    @property
    def Parent(self) -> LocationReferenceEnvironment: ...
    @property
    def Root(self) -> Activity: ...
    def GetLocationReferences(self) -> Iterable[LocationReference]: ...
    def IsVisible(self, locationReference: LocationReference) -> bool: ...
    def TryGetLocationReference(self, name: str) -> Tuple[bool, LocationReference]: ...


class NativeActivity(Activity):
    pass




class NativeActivityAbortContext(ActivityContext):
    @property
    def Reason(self) -> Exception: ...


class NativeActivityContext(ActivityContext):
    @overload
    def Abort(self) -> None: ...
    @overload
    def Abort(self, reason: Exception) -> None: ...
    @overload
    def AbortChildInstance(self, activity: ActivityInstance) -> None: ...
    @overload
    def AbortChildInstance(self, activity: ActivityInstance, reason: Exception) -> None: ...
    def CancelChild(self, activityInstance: ActivityInstance) -> None: ...
    def CancelChildren(self) -> None: ...
    @overload
    def CreateBookmark(self) -> Bookmark: ...
    @overload
    def CreateBookmark(self, callback: BookmarkCallback) -> Bookmark: ...
    @overload
    def CreateBookmark(self, name: str) -> Bookmark: ...
    @overload
    def CreateBookmark(self, name: str, callback: BookmarkCallback) -> Bookmark: ...
    @overload
    def CreateBookmark(self, callback: BookmarkCallback, options: BookmarkOptions) -> Bookmark: ...
    @overload
    def CreateBookmark(self, name: str, callback: BookmarkCallback, options: BookmarkOptions) -> Bookmark: ...
    @overload
    def CreateBookmark(self, name: str, callback: BookmarkCallback, scope: BookmarkScope) -> Bookmark: ...
    @overload
    def CreateBookmark(self, name: str, callback: BookmarkCallback, scope: BookmarkScope, options: BookmarkOptions) -> Bookmark: ...
    @property
    def DefaultBookmarkScope(self) -> BookmarkScope: ...
    @property
    def IsCancellationRequested(self) -> bool: ...
    @property
    def Properties(self) -> ExecutionProperties: ...
    def GetChildren(self) -> ReadOnlyCollection: ...
    @overload
    def GetValue(self, variable: Variable) -> Object: ...
    @overload
    def GetValue(self, variable: Variable) -> T: ...
    def MarkCanceled(self) -> None: ...
    def RemoveAllBookmarks(self) -> None: ...
    @overload
    def RemoveBookmark(self, name: str) -> bool: ...
    @overload
    def RemoveBookmark(self, bookmark: Bookmark) -> bool: ...
    @overload
    def RemoveBookmark(self, name: str, scope: BookmarkScope) -> bool: ...
    def ResumeBookmark(self, bookmark: Bookmark, value: Object) -> BookmarkResumptionResult: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction, argument: T, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction, argument1: T1, argument2: T2, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`3, argument1: T1, argument2: T2, argument3: T3, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`4, argument1: T1, argument2: T2, argument3: T3, argument4: T4, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`5, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`6, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`7, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`8, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`9, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`10, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`11, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`12, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`13, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`14, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`15, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, argument15: T15, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleAction(self, activityAction: ActivityAction`16, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, argument15: T15, argument16: T16, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleActivity(self, activity: Activity) -> ActivityInstance: ...
    @overload
    def ScheduleActivity(self, activity: Activity, onCompleted: CompletionCallback) -> ActivityInstance: ...
    @overload
    def ScheduleActivity(self, activity: Activity, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleActivity(self, activity: Activity, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleActivity(self, activity: Activity, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    def ScheduleDelegate(self, activityDelegate: ActivityDelegate, inputParameters: IDictionary, onCompleted: DelegateCompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc, argument: T, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`3, argument1: T1, argument2: T2, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`4, argument1: T1, argument2: T2, argument3: T3, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`5, argument1: T1, argument2: T2, argument3: T3, argument4: T4, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`6, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`7, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`8, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`9, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`10, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`11, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`12, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`13, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`14, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`15, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`16, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, argument15: T15, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def ScheduleFunc(self, activityFunc: ActivityFunc`17, argument1: T1, argument2: T2, argument3: T3, argument4: T4, argument5: T5, argument6: T6, argument7: T7, argument8: T8, argument9: T9, argument10: T10, argument11: T11, argument12: T12, argument13: T13, argument14: T14, argument15: T15, argument16: T16, onCompleted: CompletionCallback, onFaulted: FaultCallback) -> ActivityInstance: ...
    @overload
    def SetValue(self, variable: Variable, value: Object) -> None: ...
    @overload
    def SetValue(self, variable: Variable, value: T) -> None: ...
    def Track(self, record: CustomTrackingRecord) -> None: ...


class NativeActivityFaultContext(NativeActivityContext):
    def HandleFault(self) -> None: ...


class NativeActivityMetadata(ValueType):
    def AddArgument(self, argument: RuntimeArgument) -> None: ...
    @overload
    def AddChild(self, child: Activity) -> None: ...
    @overload
    def AddChild(self, child: Activity, origin: Object) -> None: ...
    def AddDefaultExtensionProvider(self, extensionProvider: Func) -> None: ...
    @overload
    def AddDelegate(self, activityDelegate: ActivityDelegate) -> None: ...
    @overload
    def AddDelegate(self, activityDelegate: ActivityDelegate, origin: Object) -> None: ...
    def AddImplementationChild(self, implementationChild: Activity) -> None: ...
    def AddImplementationDelegate(self, implementationDelegate: ActivityDelegate) -> None: ...
    def AddImplementationVariable(self, implementationVariable: Variable) -> None: ...
    @overload
    def AddImportedChild(self, importedChild: Activity) -> None: ...
    @overload
    def AddImportedChild(self, importedChild: Activity, origin: Object) -> None: ...
    @overload
    def AddImportedDelegate(self, importedDelegate: ActivityDelegate) -> None: ...
    @overload
    def AddImportedDelegate(self, importedDelegate: ActivityDelegate, origin: Object) -> None: ...
    @overload
    def AddValidationError(self, validationError: ValidationError) -> None: ...
    @overload
    def AddValidationError(self, validationErrorMessage: str) -> None: ...
    @overload
    def AddVariable(self, variable: Variable) -> None: ...
    @overload
    def AddVariable(self, variable: Variable, origin: Object) -> None: ...
    def Bind(self, binding: Argument, argument: RuntimeArgument) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Environment(self) -> LocationReferenceEnvironment: ...
    @property
    def HasViolations(self) -> bool: ...
    def GetArgumentsWithReflection(self) -> Collection: ...
    def GetChildrenWithReflection(self) -> Collection: ...
    def GetDelegatesWithReflection(self) -> Collection: ...
    def GetHashCode(self) -> int: ...
    def GetVariablesWithReflection(self) -> Collection: ...
    def op_Equality(left: NativeActivityMetadata, right: NativeActivityMetadata) -> bool: ...
    def op_Inequality(left: NativeActivityMetadata, right: NativeActivityMetadata) -> bool: ...
    @overload
    def RequireExtension(self) -> None: ...
    @overload
    def RequireExtension(self, extensionType: Type) -> None: ...
    def SetArgumentsCollection(self, arguments: Collection) -> None: ...
    def SetChildrenCollection(self, children: Collection) -> None: ...
    def SetDelegatesCollection(self, delegates: Collection) -> None: ...
    def SetImplementationChildrenCollection(self, implementationChildren: Collection) -> None: ...
    def SetImplementationDelegatesCollection(self, implementationDelegates: Collection) -> None: ...
    def SetImplementationVariablesCollection(self, implementationVariables: Collection) -> None: ...
    def SetImportedChildrenCollection(self, importedChildren: Collection) -> None: ...
    def SetImportedDelegatesCollection(self, importedDelegates: Collection) -> None: ...
    def SetValidationErrorsCollection(self, validationErrors: Collection) -> None: ...
    def SetVariablesCollection(self, variables: Collection) -> None: ...


class NativeActivityTransactionContext(NativeActivityContext):
    def SetRuntimeTransaction(self, transaction: Transaction) -> None: ...


class NoPersistHandle(Handle):
    def __init__(self): ...
    def Enter(self, context: NativeActivityContext) -> None: ...
    def Exit(self, context: NativeActivityContext) -> None: ...


class OutArgument(Argument):
    @overload
    def CreateReference(argumentToReference: OutArgument, referencedArgumentName: str) -> OutArgument: ...
    @overload
    def CreateReference(argumentToReference: InOutArgument, referencedArgumentName: str) -> OutArgument: ...




class OverloadGroupAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, groupName: str): ...
    @property
    def GroupName(self) -> str: ...
    @property
    def TypeId(self) -> Object: ...
    @GroupName.setter
    def GroupName(self, value: str) -> None: ...


class PersistableIdleAction:
    #None = 0
    Unload = 1
    Persist = 2


class RegistrationContext(Object):
    def FindProperty(self, name: str) -> Object: ...


class RequiredArgumentAttribute(Attribute):
    def __init__(self): ...
    @property
    def TypeId(self) -> Object: ...


class RuntimeArgument(LocationReference):
    @overload
    def __init__(self, name: str, argumentType: Type, direction: ArgumentDirection): ...
    @overload
    def __init__(self, name: str, argumentType: Type, direction: ArgumentDirection, overloadGroupNames: List): ...
    @overload
    def __init__(self, name: str, argumentType: Type, direction: ArgumentDirection, isRequired: bool): ...
    @overload
    def __init__(self, name: str, argumentType: Type, direction: ArgumentDirection, isRequired: bool, overloadGroupNames: List): ...
    @property
    def Direction(self) -> ArgumentDirection: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def OverloadGroupNames(self) -> ReadOnlyCollection: ...
    @overload
    def Get(self, context: ActivityContext) -> Object: ...
    @overload
    def Get(self, context: ActivityContext) -> T: ...
    def GetLocation(self, context: ActivityContext) -> Location: ...
    def Set(self, context: ActivityContext, value: Object) -> None: ...


class RuntimeDelegateArgument(Object):
    def __init__(self, name: str, type: Type, direction: ArgumentDirection, boundArgument: DelegateArgument): ...
    @property
    def BoundArgument(self) -> DelegateArgument: ...
    @property
    def Direction(self) -> ArgumentDirection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Type: ...


class RuntimeTransactionHandle(Handle):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rootTransaction: Transaction): ...
    @overload
    def CompleteTransaction(self, context: NativeActivityContext) -> None: ...
    @overload
    def CompleteTransaction(self, context: NativeActivityContext, callback: BookmarkCallback) -> None: ...
    @property
    def AbortInstanceOnTransactionFailure(self) -> bool: ...
    @property
    def SuppressTransaction(self) -> bool: ...
    @overload
    def GetCurrentTransaction(self, context: NativeActivityContext) -> Transaction: ...
    @overload
    def GetCurrentTransaction(self, context: CodeActivityContext) -> Transaction: ...
    @overload
    def GetCurrentTransaction(self, context: AsyncCodeActivityContext) -> Transaction: ...
    def RequestTransactionContext(self, context: NativeActivityContext, callback: Action, state: Object) -> None: ...
    def RequireTransactionContext(self, context: NativeActivityContext, callback: Action, state: Object) -> None: ...
    @AbortInstanceOnTransactionFailure.setter
    def AbortInstanceOnTransactionFailure(self, value: bool) -> None: ...
    @SuppressTransaction.setter
    def SuppressTransaction(self, value: bool) -> None: ...


class UnhandledExceptionAction:
    Abort = 0
    Cancel = 1
    Terminate = 2


class ValidationException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class Variable(LocationReference):
    def Create(name: str, type: Type, modifiers: VariableModifiers) -> Variable: ...
    @property
    def Default(self) -> ActivityWithResult: ...
    @property
    def Modifiers(self) -> VariableModifiers: ...
    @property
    def Name(self) -> str: ...
    def Get(self, context: ActivityContext) -> Object: ...
    def GetLocation(self, context: ActivityContext) -> Location: ...
    @Default.setter
    def Default(self, value: ActivityWithResult) -> None: ...
    @Modifiers.setter
    def Modifiers(self, value: VariableModifiers) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def Set(self, context: ActivityContext, value: Object) -> None: ...




class VariableModifiers:
    #None = 0
    ReadOnly = 1
    Mapped = 2


class VersionMismatchException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, expectedVersion: WorkflowIdentity, actualVersion: WorkflowIdentity): ...
    @overload
    def __init__(self, message: str, expectedVersion: WorkflowIdentity, actualVersion: WorkflowIdentity): ...
    @overload
    def __init__(self, message: str, expectedVersion: WorkflowIdentity, actualVersion: WorkflowIdentity, innerException: Exception): ...
    @property
    def ActualVersion(self) -> WorkflowIdentity: ...
    @property
    def ExpectedVersion(self) -> WorkflowIdentity: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class WorkflowApplication(WorkflowInstance):
    @overload
    def __init__(self, workflowDefinition: Activity): ...
    @overload
    def __init__(self, workflowDefinition: Activity, inputs: IDictionary): ...
    @overload
    def __init__(self, workflowDefinition: Activity, definitionIdentity: WorkflowIdentity): ...
    @overload
    def __init__(self, workflowDefinition: Activity, inputs: IDictionary, definitionIdentity: WorkflowIdentity): ...
    @overload
    def Abort(self) -> None: ...
    @overload
    def Abort(self, reason: str) -> None: ...
    def AddInitialInstanceValues(self, writeOnlyValues: IDictionary) -> None: ...
    @overload
    def BeginCancel(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginCancel(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginCreateDefaultInstanceOwner(instanceStore: InstanceStore, definitionIdentity: WorkflowIdentity, identityFilter: WorkflowIdentityFilter, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginCreateDefaultInstanceOwner(instanceStore: InstanceStore, definitionIdentity: WorkflowIdentity, identityFilter: WorkflowIdentityFilter, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginDeleteDefaultInstanceOwner(instanceStore: InstanceStore, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginDeleteDefaultInstanceOwner(instanceStore: InstanceStore, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginGetInstance(instanceId: Guid, instanceStore: InstanceStore, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginGetInstance(instanceId: Guid, instanceStore: InstanceStore, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginGetRunnableInstance(instanceStore: InstanceStore, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginGetRunnableInstance(instanceStore: InstanceStore, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoad(self, instance: WorkflowApplicationInstance, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoad(self, instanceId: Guid, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoad(self, instance: WorkflowApplicationInstance, updateMap: DynamicUpdateMap, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoad(self, instance: WorkflowApplicationInstance, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoad(self, instanceId: Guid, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoad(self, instance: WorkflowApplicationInstance, updateMap: DynamicUpdateMap, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoadRunnableInstance(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoadRunnableInstance(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginPersist(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginPersist(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginResumeBookmark(self, bookmarkName: str, value: Object, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginResumeBookmark(self, bookmark: Bookmark, value: Object, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginResumeBookmark(self, bookmarkName: str, value: Object, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginResumeBookmark(self, bookmark: Bookmark, value: Object, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginRun(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginRun(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginTerminate(self, reason: Exception, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginTerminate(self, reason: str, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginTerminate(self, reason: Exception, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginTerminate(self, reason: str, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginUnload(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginUnload(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def Cancel(self) -> None: ...
    @overload
    def Cancel(self, timeout: TimeSpan) -> None: ...
    @overload
    def CreateDefaultInstanceOwner(instanceStore: InstanceStore, definitionIdentity: WorkflowIdentity, identityFilter: WorkflowIdentityFilter) -> None: ...
    @overload
    def CreateDefaultInstanceOwner(instanceStore: InstanceStore, definitionIdentity: WorkflowIdentity, identityFilter: WorkflowIdentityFilter, timeout: TimeSpan) -> None: ...
    @overload
    def DeleteDefaultInstanceOwner(instanceStore: InstanceStore) -> None: ...
    @overload
    def DeleteDefaultInstanceOwner(instanceStore: InstanceStore, timeout: TimeSpan) -> None: ...
    def EndCancel(self, result: IAsyncResult) -> None: ...
    def EndCreateDefaultInstanceOwner(asyncResult: IAsyncResult) -> None: ...
    def EndDeleteDefaultInstanceOwner(asyncResult: IAsyncResult) -> None: ...
    def EndGetInstance(asyncResult: IAsyncResult) -> WorkflowApplicationInstance: ...
    def EndGetRunnableInstance(asyncResult: IAsyncResult) -> WorkflowApplicationInstance: ...
    def EndLoad(self, result: IAsyncResult) -> None: ...
    def EndLoadRunnableInstance(self, result: IAsyncResult) -> None: ...
    def EndPersist(self, result: IAsyncResult) -> None: ...
    def EndResumeBookmark(self, result: IAsyncResult) -> BookmarkResumptionResult: ...
    def EndRun(self, result: IAsyncResult) -> None: ...
    def EndTerminate(self, result: IAsyncResult) -> None: ...
    def EndUnload(self, result: IAsyncResult) -> None: ...
    @property
    def Aborted(self) -> Action: ...
    @property
    def Completed(self) -> Action: ...
    @property
    def Extensions(self) -> WorkflowInstanceExtensionManager: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def Idle(self) -> Action: ...
    @property
    def InstanceStore(self) -> InstanceStore: ...
    @property
    def OnUnhandledException(self) -> Func: ...
    @property
    def PersistableIdle(self) -> Func: ...
    @property
    def Unloaded(self) -> Action: ...
    @overload
    def GetBookmarks(self) -> ReadOnlyCollection: ...
    @overload
    def GetBookmarks(self, timeout: TimeSpan) -> ReadOnlyCollection: ...
    @overload
    def GetInstance(instanceId: Guid, instanceStore: InstanceStore) -> WorkflowApplicationInstance: ...
    @overload
    def GetInstance(instanceId: Guid, instanceStore: InstanceStore, timeout: TimeSpan) -> WorkflowApplicationInstance: ...
    @overload
    def GetRunnableInstance(instanceStore: InstanceStore) -> WorkflowApplicationInstance: ...
    @overload
    def GetRunnableInstance(instanceStore: InstanceStore, timeout: TimeSpan) -> WorkflowApplicationInstance: ...
    @overload
    def Load(self, instanceId: Guid) -> None: ...
    @overload
    def Load(self, instance: WorkflowApplicationInstance) -> None: ...
    @overload
    def Load(self, instanceId: Guid, timeout: TimeSpan) -> None: ...
    @overload
    def Load(self, instance: WorkflowApplicationInstance, updateMap: DynamicUpdateMap) -> None: ...
    @overload
    def Load(self, instance: WorkflowApplicationInstance, timeout: TimeSpan) -> None: ...
    @overload
    def Load(self, instance: WorkflowApplicationInstance, updateMap: DynamicUpdateMap, timeout: TimeSpan) -> None: ...
    @overload
    def LoadRunnableInstance(self) -> None: ...
    @overload
    def LoadRunnableInstance(self, timeout: TimeSpan) -> None: ...
    @overload
    def Persist(self) -> None: ...
    @overload
    def Persist(self, timeout: TimeSpan) -> None: ...
    @overload
    def ResumeBookmark(self, bookmark: Bookmark, value: Object) -> BookmarkResumptionResult: ...
    @overload
    def ResumeBookmark(self, bookmarkName: str, value: Object) -> BookmarkResumptionResult: ...
    @overload
    def ResumeBookmark(self, bookmark: Bookmark, value: Object, timeout: TimeSpan) -> BookmarkResumptionResult: ...
    @overload
    def ResumeBookmark(self, bookmarkName: str, value: Object, timeout: TimeSpan) -> BookmarkResumptionResult: ...
    @overload
    def Run(self) -> None: ...
    @overload
    def Run(self, timeout: TimeSpan) -> None: ...
    @Aborted.setter
    def Aborted(self, value: Action) -> None: ...
    @Completed.setter
    def Completed(self, value: Action) -> None: ...
    @Idle.setter
    def Idle(self, value: Action) -> None: ...
    @InstanceStore.setter
    def InstanceStore(self, value: InstanceStore) -> None: ...
    @OnUnhandledException.setter
    def OnUnhandledException(self, value: Func) -> None: ...
    @PersistableIdle.setter
    def PersistableIdle(self, value: Func) -> None: ...
    @Unloaded.setter
    def Unloaded(self, value: Action) -> None: ...
    @overload
    def Terminate(self, reason: Exception) -> None: ...
    @overload
    def Terminate(self, reason: str) -> None: ...
    @overload
    def Terminate(self, reason: Exception, timeout: TimeSpan) -> None: ...
    @overload
    def Terminate(self, reason: str, timeout: TimeSpan) -> None: ...
    @overload
    def Unload(self) -> None: ...
    @overload
    def Unload(self, timeout: TimeSpan) -> None: ...


class WorkflowApplicationAbortedEventArgs(WorkflowApplicationEventArgs):
    @property
    def Reason(self) -> Exception: ...


class WorkflowApplicationAbortedException(WorkflowApplicationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, instanceId: Guid): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, instanceId: Guid, innerException: Exception): ...


class WorkflowApplicationCompletedEventArgs(WorkflowApplicationEventArgs):
    @property
    def CompletionState(self) -> ActivityInstanceState: ...
    @property
    def Outputs(self) -> IDictionary: ...
    @property
    def TerminationException(self) -> Exception: ...


class WorkflowApplicationCompletedException(WorkflowApplicationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, instanceId: Guid): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, instanceId: Guid, innerException: Exception): ...


class WorkflowApplicationEventArgs(EventArgs):
    @property
    def InstanceId(self) -> Guid: ...
    def GetInstanceExtensions(self) -> Iterable[T]: ...


class WorkflowApplicationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, instanceId: Guid): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, instanceId: Guid, innerException: Exception): ...
    @property
    def InstanceId(self) -> Guid: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class WorkflowApplicationIdleEventArgs(WorkflowApplicationEventArgs):
    @property
    def Bookmarks(self) -> ReadOnlyCollection: ...


class WorkflowApplicationInstance(Object):
    @overload
    def Abandon(self) -> None: ...
    @overload
    def Abandon(self, timeout: TimeSpan) -> None: ...
    @overload
    def BeginAbandon(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginAbandon(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def CanApplyUpdate(self, updateMap: DynamicUpdateMap) -> Tuple[bool, List[ActivityBlockingUpdate]]: ...
    def EndAbandon(self, asyncResult: IAsyncResult) -> None: ...
    @property
    def DefinitionIdentity(self) -> WorkflowIdentity: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def InstanceStore(self) -> InstanceStore: ...


class WorkflowApplicationTerminatedException(WorkflowApplicationCompletedException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, instanceId: Guid): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, instanceId: Guid, innerException: Exception): ...


class WorkflowApplicationUnhandledExceptionEventArgs(WorkflowApplicationEventArgs):
    @property
    def ExceptionSource(self) -> Activity: ...
    @property
    def ExceptionSourceInstanceId(self) -> str: ...
    @property
    def UnhandledException(self) -> Exception: ...


class WorkflowApplicationUnloadedException(WorkflowApplicationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, instanceId: Guid): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, instanceId: Guid, innerException: Exception): ...


class WorkflowDataContext(CustomTypeDescriptor):
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def GetProperties(self) -> PropertyDescriptorCollection: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...


class WorkflowIdentity(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, version: Version, package: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: WorkflowIdentity) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Package(self) -> str: ...
    @property
    def Version(self) -> Version: ...
    def GetHashCode(self) -> int: ...
    def Parse(identity: str) -> WorkflowIdentity: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Package.setter
    def Package(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: Version) -> None: ...
    def ToString(self) -> str: ...
    def TryParse(identity: str) -> Tuple[bool, WorkflowIdentity]: ...


class WorkflowIdentityFilter:
    Exact = 0
    Any = 1
    AnyRevision = 2


class WorkflowInspectionServices(Object):
    @overload
    def CacheMetadata(rootActivity: Activity) -> None: ...
    @overload
    def CacheMetadata(rootActivity: Activity, hostEnvironment: LocationReferenceEnvironment) -> None: ...
    def CanInduceIdle(activity: Activity) -> bool: ...
    def GetActivities(activity: Activity) -> Iterable[Activity]: ...
    def GetImplementationVersion(activity: Activity) -> Version: ...
    def Resolve(root: Activity, id: str) -> Activity: ...


class WorkflowInvoker(Object):
    def __init__(self, workflow: Activity): ...
    def add_InvokeCompleted(self, value: EventHandler) -> None: ...
    @overload
    def BeginInvoke(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, inputs: IDictionary, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, inputs: IDictionary, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def CancelAsync(self, userState: Object) -> None: ...
    def EndInvoke(self, result: IAsyncResult) -> IDictionary: ...
    @property
    def Extensions(self) -> WorkflowInstanceExtensionManager: ...
    @overload
    def Invoke(self) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity) -> TResult: ...
    @overload
    def Invoke(self, timeout: TimeSpan) -> IDictionary: ...
    @overload
    def Invoke(self, inputs: IDictionary) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity, timeout: TimeSpan) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity, inputs: IDictionary) -> IDictionary: ...
    @overload
    def Invoke(self, inputs: IDictionary, timeout: TimeSpan) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity, inputs: IDictionary) -> TResult: ...
    @overload
    def Invoke(workflow: Activity, inputs: IDictionary, timeout: TimeSpan) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity, inputs: IDictionary, timeout: TimeSpan) -> TResult: ...
    @overload
    def Invoke(workflow: Activity, inputs: IDictionary, timeout: TimeSpan) -> Tuple[TResult, IDictionary]: ...
    @overload
    def InvokeAsync(self) -> None: ...
    @overload
    def InvokeAsync(self, userState: Object) -> None: ...
    @overload
    def InvokeAsync(self, timeout: TimeSpan) -> None: ...
    @overload
    def InvokeAsync(self, inputs: IDictionary) -> None: ...
    @overload
    def InvokeAsync(self, timeout: TimeSpan, userState: Object) -> None: ...
    @overload
    def InvokeAsync(self, inputs: IDictionary, timeout: TimeSpan) -> None: ...
    @overload
    def InvokeAsync(self, inputs: IDictionary, userState: Object) -> None: ...
    @overload
    def InvokeAsync(self, inputs: IDictionary, timeout: TimeSpan, userState: Object) -> None: ...
    def remove_InvokeCompleted(self, value: EventHandler) -> None: ...
