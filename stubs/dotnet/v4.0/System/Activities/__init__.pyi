__all__ = ['Debugger','Debugger','Debugger','Debugger','Debugger','Debugger','Debugger','Debugger','Debugger','Debugger','Debugger','DurableInstancing','DurableInstancing','DurableInstancing','DurableInstancing','DurableInstancing','DurableInstancing','DurableInstancing','DurableInstancing','DurableInstancing','DurableInstancing','DurableInstancing','DynamicUpdate','DynamicUpdate','DynamicUpdate','DynamicUpdate','DynamicUpdate','DynamicUpdate','DynamicUpdate','DynamicUpdate','DynamicUpdate','DynamicUpdate','DynamicUpdate','ExpressionParser','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Expressions','Hosting','Hosting','Hosting','Hosting','Hosting','Hosting','Hosting','Hosting','Hosting','Persistence','Persistence','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Statements','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Tracking','Validation','Validation','Validation','Validation','Validation','Validation','Validation','Validation','Validation','Validation','Validation','Validation','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration','XamlIntegration']
from typing import Tuple, Set, Iterable, List


class WorkflowInvoker(Object):
    def __init__(self, workflow: Activity): ...
    def add_InvokeCompleted(self, value: EventHandler) -> None: ...
    @overload
    def BeginInvoke(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, inputs: IDictionary, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, inputs: IDictionary, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def CancelAsync(self, userState: Object) -> None: ...
    def EndInvoke(self, result: IAsyncResult) -> IDictionary: ...
    @property
    def Extensions(self) -> WorkflowInstanceExtensionManager: ...
    @overload
    def Invoke(self) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity) -> TResult: ...
    @overload
    def Invoke(self, timeout: TimeSpan) -> IDictionary: ...
    @overload
    def Invoke(self, inputs: IDictionary) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity, timeout: TimeSpan) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity, inputs: IDictionary) -> IDictionary: ...
    @overload
    def Invoke(self, inputs: IDictionary, timeout: TimeSpan) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity, inputs: IDictionary) -> TResult: ...
    @overload
    def Invoke(workflow: Activity, inputs: IDictionary, timeout: TimeSpan) -> IDictionary: ...
    @overload
    def Invoke(workflow: Activity, inputs: IDictionary, timeout: TimeSpan) -> TResult: ...
    @overload
    def Invoke(workflow: Activity, inputs: IDictionary, timeout: TimeSpan) -> Tuple[TResult, IDictionary]: ...
    @overload
    def InvokeAsync(self) -> None: ...
    @overload
    def InvokeAsync(self, userState: Object) -> None: ...
    @overload
    def InvokeAsync(self, timeout: TimeSpan) -> None: ...
    @overload
    def InvokeAsync(self, inputs: IDictionary) -> None: ...
    @overload
    def InvokeAsync(self, timeout: TimeSpan, userState: Object) -> None: ...
    @overload
    def InvokeAsync(self, inputs: IDictionary, timeout: TimeSpan) -> None: ...
    @overload
    def InvokeAsync(self, inputs: IDictionary, userState: Object) -> None: ...
    @overload
    def InvokeAsync(self, inputs: IDictionary, timeout: TimeSpan, userState: Object) -> None: ...
    def remove_InvokeCompleted(self, value: EventHandler) -> None: ...
