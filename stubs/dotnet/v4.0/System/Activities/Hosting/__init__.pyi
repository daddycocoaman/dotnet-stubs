from typing import Tuple, Set, Iterable, List


class BookmarkInfo(Object):
    @property
    def BookmarkName(self) -> str: ...
    @property
    def OwnerDisplayName(self) -> str: ...
    @property
    def ScopeInfo(self) -> BookmarkScopeInfo: ...


class BookmarkScopeInfo(Object):
    @property
    def Id(self) -> Guid: ...
    @property
    def IsInitialized(self) -> bool: ...
    @property
    def TemporaryId(self) -> str: ...


class IWorkflowInstanceExtension:
    def GetAdditionalExtensions(self) -> Iterable[Object]: ...
    def SetInstance(self, instance: WorkflowInstanceProxy) -> None: ...


class LocationInfo(Object):
    @property
    def Name(self) -> str: ...
    @property
    def OwnerDisplayName(self) -> str: ...
    @property
    def Value(self) -> Object: ...


class SymbolResolver(Object):
    def __init__(self): ...
    @overload
    def Add(self, item: KeyValuePair) -> None: ...
    @overload
    def Add(self, key: str, value: Object) -> None: ...
    @overload
    def Add(self, key: str, type: Type) -> None: ...
    @overload
    def Add(self, key: str, value: Object, type: Type) -> None: ...
    def AsLocationReferenceEnvironment(self) -> LocationReferenceEnvironment: ...
    def Clear(self) -> None: ...
    def Contains(self, item: KeyValuePair) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    def CopyTo(self, array: Set(KeyValuePair), arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, key: str) -> Object: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Values(self) -> ICollection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def Remove(self, key: str) -> bool: ...
    @overload
    def Remove(self, item: KeyValuePair) -> bool: ...
    @Item.setter
    def Item(self, key: str, value: Object) -> None: ...
    def TryGetValue(self, key: str) -> Tuple[bool, Object]: ...


class WorkflowInstance(Object):
    @property
    def DefinitionIdentity(self) -> WorkflowIdentity: ...
    @property
    def HostEnvironment(self) -> LocationReferenceEnvironment: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def SynchronizationContext(self) -> SynchronizationContext: ...
    @property
    def WorkflowDefinition(self) -> Activity: ...
    @HostEnvironment.setter
    def HostEnvironment(self, value: LocationReferenceEnvironment) -> None: ...
    @SynchronizationContext.setter
    def SynchronizationContext(self, value: SynchronizationContext) -> None: ...


class WorkflowInstanceExtensionManager(Object):
    def __init__(self): ...
    @overload
    def Add(self, singletonExtension: Object) -> None: ...
    @overload
    def Add(self, extensionCreationFunction: Func) -> None: ...
    def MakeReadOnly(self) -> None: ...


class WorkflowInstanceProxy(Object):
    @overload
    def BeginResumeBookmark(self, bookmark: Bookmark, value: Object, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginResumeBookmark(self, bookmark: Bookmark, value: Object, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def EndResumeBookmark(self, result: IAsyncResult) -> BookmarkResumptionResult: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def WorkflowDefinition(self) -> Activity: ...


class WorkflowInstanceState:
    Idle = 0
    Runnable = 1
    Complete = 2
    Aborted = 3
