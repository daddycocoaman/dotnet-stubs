from typing import Tuple, Set, Iterable, List


class ActivityWithResultConverter(TypeConverterBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type: Type): ...


class ActivityWithResultValueSerializer(ValueSerializer):
    def __init__(self): ...
    def CanConvertToString(self, value: Object, context: IValueSerializerContext) -> bool: ...
    def ConvertToString(self, value: Object, context: IValueSerializerContext) -> str: ...


class ActivityXamlServices(Object):
    @overload
    def CreateBuilderReader(innerReader: XamlReader) -> XamlReader: ...
    @overload
    def CreateBuilderReader(innerReader: XamlReader, schemaContext: XamlSchemaContext) -> XamlReader: ...
    def CreateBuilderWriter(innerWriter: XamlWriter) -> XamlWriter: ...
    @overload
    def CreateFactory(reader: XamlReader) -> Func: ...
    @overload
    def CreateFactory(reader: XamlReader, resultType: Type) -> Func: ...
    @overload
    def CreateReader(innerReader: XamlReader) -> XamlReader: ...
    @overload
    def CreateReader(stream: Stream) -> XamlReader: ...
    @overload
    def CreateReader(innerReader: XamlReader, schemaContext: XamlSchemaContext) -> XamlReader: ...
    def InitializeComponent(componentType: Type, componentInstance: Object) -> None: ...
    @overload
    def Load(stream: Stream) -> Activity: ...
    @overload
    def Load(xamlReader: XamlReader) -> Activity: ...
    @overload
    def Load(xmlReader: XmlReader) -> Activity: ...
    @overload
    def Load(textReader: TextReader) -> Activity: ...
    @overload
    def Load(fileName: str) -> Activity: ...
    @overload
    def Load(xmlReader: XmlReader, settings: ActivityXamlServicesSettings) -> Activity: ...
    @overload
    def Load(textReader: TextReader, settings: ActivityXamlServicesSettings) -> Activity: ...
    @overload
    def Load(fileName: str, settings: ActivityXamlServicesSettings) -> Activity: ...
    @overload
    def Load(stream: Stream, settings: ActivityXamlServicesSettings) -> Activity: ...
    @overload
    def Load(xamlReader: XamlReader, settings: ActivityXamlServicesSettings) -> Activity: ...


class ActivityXamlServicesSettings(Object):
    def __init__(self): ...
    @property
    def CompileExpressions(self) -> bool: ...
    @property
    def LocationReferenceEnvironment(self) -> LocationReferenceEnvironment: ...
    @CompileExpressions.setter
    def CompileExpressions(self, value: bool) -> None: ...
    @LocationReferenceEnvironment.setter
    def LocationReferenceEnvironment(self, value: LocationReferenceEnvironment) -> None: ...


class ArgumentValueSerializer(ValueSerializer):
    def __init__(self): ...
    def CanConvertToString(self, value: Object, context: IValueSerializerContext) -> bool: ...
    def ConvertToString(self, value: Object, context: IValueSerializerContext) -> str: ...


class AssemblyReferenceConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class CompiledDataContext(Object):
    @overload
    def GetLocation(self, getMethod: Func, setMethod: Action) -> Location: ...
    @overload
    def GetLocation(self, getMethod: Func, setMethod: Action, expressionId: int, compiledRootActivity: Activity, activityContext: ActivityContext) -> Location: ...


class DynamicUpdateMapConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class DynamicUpdateMapExtension(MarkupExtension):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, updateMap: DynamicUpdateMap): ...
    @property
    def UpdateMap(self) -> DynamicUpdateMap: ...
    @property
    def XmlContent(self) -> IXmlSerializable: ...
    def ProvideValue(self, serviceProvider: IServiceProvider) -> Object: ...


class DynamicUpdateMapItemConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class FuncDeferringLoader(XamlDeferringLoader):
    def __init__(self): ...
    def Load(self, xamlReader: XamlReader, context: IServiceProvider) -> Object: ...
    def Save(self, value: Object, serviceProvider: IServiceProvider) -> XamlReader: ...


class ICompiledExpressionRoot:
    def CanExecuteExpression(self, expressionText: str, isReference: bool, locations: List[LocationReference]) -> Tuple[bool, int]: ...
    def GetExpressionTreeForExpression(self, expressionId: int, locationReferences: List[LocationReference]) -> Expression: ...
    def GetLanguage(self) -> str: ...
    def GetRequiredLocations(self, expressionId: int) -> List[str]: ...
    @overload
    def InvokeExpression(self, expressionId: int, locations: List[Location]) -> Object: ...
    @overload
    def InvokeExpression(self, expressionId: int, locations: List[LocationReference], activityContext: ActivityContext) -> Object: ...


class ImplementationVersionConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class InArgumentConverter(TypeConverterBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type: Type): ...


class InOutArgumentConverter(TypeConverterBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type: Type): ...


class IValueSerializableExpression:
    def CanConvertToString(self, context: IValueSerializerContext) -> bool: ...
    def ConvertToString(self, context: IValueSerializerContext) -> str: ...


class OutArgumentConverter(TypeConverterBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type: Type): ...




class SerializableFuncDeferringLoader(XamlDeferringLoader):
    def __init__(self): ...
    def Load(self, xamlReader: XamlReader, context: IServiceProvider) -> Object: ...
    def Save(self, value: Object, serviceProvider: IServiceProvider) -> XamlReader: ...


class TextExpressionCompiler(Object):
    def __init__(self, settings: TextExpressionCompilerSettings): ...
    def Compile(self) -> TextExpressionCompilerResults: ...
    def GenerateSource(self, textWriter: TextWriter) -> bool: ...


class TextExpressionCompilerError(Object):
    @property
    def IsWarning(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Number(self) -> str: ...
    @property
    def SourceLineNumber(self) -> int: ...


class TextExpressionCompilerResults(Object):
    @property
    def CompilerMessages(self) -> ReadOnlyCollection: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def HasSourceInfo(self) -> bool: ...
    @property
    def ResultType(self) -> Type: ...


class TextExpressionCompilerSettings(Object):
    def __init__(self): ...
    @property
    def Activity(self) -> Activity: ...
    @property
    def ActivityName(self) -> str: ...
    @property
    def ActivityNamespace(self) -> str: ...
    @property
    def AlwaysGenerateSource(self) -> bool: ...
    @property
    def ForImplementation(self) -> bool: ...
    @property
    def GenerateAsPartialClass(self) -> bool: ...
    @property
    def Language(self) -> str: ...
    @property
    def LogSourceGenerationMessage(self) -> Action: ...
    @property
    def RootNamespace(self) -> str: ...
    @Activity.setter
    def Activity(self, value: Activity) -> None: ...
    @ActivityName.setter
    def ActivityName(self, value: str) -> None: ...
    @ActivityNamespace.setter
    def ActivityNamespace(self, value: str) -> None: ...
    @AlwaysGenerateSource.setter
    def AlwaysGenerateSource(self, value: bool) -> None: ...
    @ForImplementation.setter
    def ForImplementation(self, value: bool) -> None: ...
    @GenerateAsPartialClass.setter
    def GenerateAsPartialClass(self, value: bool) -> None: ...
    @Language.setter
    def Language(self, value: str) -> None: ...
    @LogSourceGenerationMessage.setter
    def LogSourceGenerationMessage(self, value: Action) -> None: ...
    @RootNamespace.setter
    def RootNamespace(self, value: str) -> None: ...


class TypeConverterBase(TypeConverter):
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class WorkflowIdentityConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
