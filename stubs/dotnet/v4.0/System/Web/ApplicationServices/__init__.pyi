from typing import Tuple, Set, Iterable, List


class ApplicationServicesHostFactory(ServiceHostFactory):
    def __init__(self): ...


class AuthenticatingEventArgs(EventArgs):
    @property
    def Authenticated(self) -> bool: ...
    @property
    def AuthenticationIsComplete(self) -> bool: ...
    @property
    def CustomCredential(self) -> str: ...
    @property
    def Password(self) -> str: ...
    @property
    def UserName(self) -> str: ...
    @Authenticated.setter
    def Authenticated(self, value: bool) -> None: ...
    @AuthenticationIsComplete.setter
    def AuthenticationIsComplete(self, value: bool) -> None: ...


class AuthenticationService(Object):
    def __init__(self): ...
    def add_Authenticating(value: EventHandler) -> None: ...
    def add_CreatingCookie(value: EventHandler) -> None: ...
    def IsLoggedIn(self) -> bool: ...
    def Login(self, username: str, password: str, customCredential: str, isPersistent: bool) -> bool: ...
    def Logout(self) -> None: ...
    def remove_Authenticating(value: EventHandler) -> None: ...
    def remove_CreatingCookie(value: EventHandler) -> None: ...
    def ValidateUser(self, username: str, password: str, customCredential: str) -> bool: ...


class CreatingCookieEventArgs(EventArgs):
    @property
    def CookieIsSet(self) -> bool: ...
    @property
    def CustomCredential(self) -> str: ...
    @property
    def IsPersistent(self) -> bool: ...
    @property
    def Password(self) -> str: ...
    @property
    def UserName(self) -> str: ...
    @CookieIsSet.setter
    def CookieIsSet(self, value: bool) -> None: ...


class KnownTypesProvider(Object):
    def GetKnownTypes(knownTypeAttributeTarget: ICustomAttributeProvider) -> Set(Type): ...


class ProfilePropertyMetadata(Object):
    def __init__(self): ...
    @property
    def AllowAnonymousAccess(self) -> bool: ...
    @property
    def DefaultValue(self) -> str: ...
    @property
    def ExtensionData(self) -> ExtensionDataObject: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def SerializeAs(self) -> int: ...
    @property
    def TypeName(self) -> str: ...
    @AllowAnonymousAccess.setter
    def AllowAnonymousAccess(self, value: bool) -> None: ...
    @DefaultValue.setter
    def DefaultValue(self, value: str) -> None: ...
    @ExtensionData.setter
    def ExtensionData(self, value: ExtensionDataObject) -> None: ...
    @IsReadOnly.setter
    def IsReadOnly(self, value: bool) -> None: ...
    @PropertyName.setter
    def PropertyName(self, value: str) -> None: ...
    @SerializeAs.setter
    def SerializeAs(self, value: int) -> None: ...
    @TypeName.setter
    def TypeName(self, value: str) -> None: ...


class ProfileService(Object):
    def __init__(self): ...
    def add_ValidatingProperties(value: EventHandler) -> None: ...
    def GetAllPropertiesForCurrentUser(self, authenticatedUserOnly: bool) -> Dictionary: ...
    def GetPropertiesForCurrentUser(self, properties: Iterable[str], authenticatedUserOnly: bool) -> Dictionary: ...
    def GetPropertiesMetadata(self) -> Set(ProfilePropertyMetadata): ...
    def remove_ValidatingProperties(value: EventHandler) -> None: ...
    def SetPropertiesForCurrentUser(self, values: IDictionary, authenticatedUserOnly: bool) -> Collection: ...


class RoleService(Object):
    def __init__(self): ...
    def add_SelectingProvider(value: EventHandler) -> None: ...
    def GetRolesForCurrentUser(self) -> Set(str): ...
    def IsCurrentUserInRole(self, role: str) -> bool: ...
    def remove_SelectingProvider(value: EventHandler) -> None: ...


class SelectingProviderEventArgs(EventArgs):
    @property
    def ProviderName(self) -> str: ...
    @property
    def User(self) -> IPrincipal: ...
    @ProviderName.setter
    def ProviderName(self, value: str) -> None: ...


class ValidatingPropertiesEventArgs(EventArgs):
    @property
    def FailedProperties(self) -> Collection: ...
    @property
    def Properties(self) -> IDictionary: ...
