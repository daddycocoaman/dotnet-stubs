from typing import Tuple, Set, Iterable, List


class ContractReference(DiscoveryReference):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, href: str): ...
    @overload
    def __init__(self, href: str, docRef: str): ...
    @property
    def Contract(self) -> ServiceDescription: ...
    @property
    def DefaultFilename(self) -> str: ...
    @property
    def DocRef(self) -> str: ...
    @property
    def Ref(self) -> str: ...
    @property
    def Url(self) -> str: ...
    def ReadDocument(self, stream: Stream) -> Object: ...
    @DocRef.setter
    def DocRef(self, value: str) -> None: ...
    @Ref.setter
    def Ref(self, value: str) -> None: ...
    @Url.setter
    def Url(self, value: str) -> None: ...
    def WriteDocument(self, document: Object, stream: Stream) -> None: ...


class ContractSearchPattern(DiscoverySearchPattern):
    def __init__(self): ...
    @property
    def Pattern(self) -> str: ...
    def GetDiscoveryReference(self, filename: str) -> DiscoveryReference: ...


class DiscoveryClientDocumentCollection(DictionaryBase):
    def __init__(self): ...
    def Add(self, url: str, value: Object) -> None: ...
    def Contains(self, url: str) -> bool: ...
    @property
    def Item(self, url: str) -> Object: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Values(self) -> ICollection: ...
    def Remove(self, url: str) -> None: ...
    @Item.setter
    def Item(self, url: str, value: Object) -> None: ...


class DiscoveryClientProtocol(HttpWebClientProtocol):
    def __init__(self): ...
    def Discover(self, url: str) -> DiscoveryDocument: ...
    def DiscoverAny(self, url: str) -> DiscoveryDocument: ...
    @overload
    def Download(self, url: str) -> Tuple[Stream, str]: ...
    @overload
    def Download(self, url: str, contentType: str) -> Tuple[Stream, str, str]: ...
    @property
    def AdditionalInformation(self) -> IList: ...
    @property
    def Documents(self) -> DiscoveryClientDocumentCollection: ...
    @property
    def Errors(self) -> DiscoveryExceptionDictionary: ...
    @property
    def References(self) -> DiscoveryClientReferenceCollection: ...
    def ReadAll(self, topLevelFilename: str) -> DiscoveryClientResultCollection: ...
    def ResolveAll(self) -> None: ...
    def ResolveOneLevel(self) -> None: ...
    def WriteAll(self, directory: str, topLevelFilename: str) -> DiscoveryClientResultCollection: ...


class DiscoveryClientReferenceCollection(DictionaryBase):
    def __init__(self): ...
    @overload
    def Add(self, value: DiscoveryReference) -> None: ...
    @overload
    def Add(self, url: str, value: DiscoveryReference) -> None: ...
    def Contains(self, url: str) -> bool: ...
    @property
    def Item(self, url: str) -> DiscoveryReference: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Values(self) -> ICollection: ...
    def Remove(self, url: str) -> None: ...
    @Item.setter
    def Item(self, url: str, value: DiscoveryReference) -> None: ...


class DiscoveryClientResult(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, referenceType: Type, url: str, filename: str): ...
    @property
    def Filename(self) -> str: ...
    @property
    def ReferenceTypeName(self) -> str: ...
    @property
    def Url(self) -> str: ...
    @Filename.setter
    def Filename(self, value: str) -> None: ...
    @ReferenceTypeName.setter
    def ReferenceTypeName(self, value: str) -> None: ...
    @Url.setter
    def Url(self, value: str) -> None: ...


class DiscoveryClientResultCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, value: DiscoveryClientResult) -> int: ...
    def Contains(self, value: DiscoveryClientResult) -> bool: ...
    @property
    def Item(self, i: int) -> DiscoveryClientResult: ...
    def Remove(self, value: DiscoveryClientResult) -> None: ...
    @Item.setter
    def Item(self, i: int, value: DiscoveryClientResult) -> None: ...


class DiscoveryClientResultsFile(Object):
    def __init__(self): ...
    @property
    def Results(self) -> DiscoveryClientResultCollection: ...


class DiscoveryDocument(Object):
    def __init__(self): ...
    def CanRead(xmlReader: XmlReader) -> bool: ...
    @property
    def References(self) -> IList: ...
    @overload
    def Read(stream: Stream) -> DiscoveryDocument: ...
    @overload
    def Read(reader: TextReader) -> DiscoveryDocument: ...
    @overload
    def Read(xmlReader: XmlReader) -> DiscoveryDocument: ...
    @overload
    def Write(self, stream: Stream) -> None: ...
    @overload
    def Write(self, writer: TextWriter) -> None: ...
    @overload
    def Write(self, writer: XmlWriter) -> None: ...


class DiscoveryDocumentLinksPattern(DiscoverySearchPattern):
    def __init__(self): ...
    @property
    def Pattern(self) -> str: ...
    def GetDiscoveryReference(self, filename: str) -> DiscoveryReference: ...


class DiscoveryDocumentReference(DiscoveryReference):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, href: str): ...
    @property
    def DefaultFilename(self) -> str: ...
    @property
    def Document(self) -> DiscoveryDocument: ...
    @property
    def Ref(self) -> str: ...
    @property
    def Url(self) -> str: ...
    def ReadDocument(self, stream: Stream) -> Object: ...
    def ResolveAll(self) -> None: ...
    @Ref.setter
    def Ref(self, value: str) -> None: ...
    @Url.setter
    def Url(self, value: str) -> None: ...
    def WriteDocument(self, document: Object, stream: Stream) -> None: ...


class DiscoveryDocumentSearchPattern(DiscoverySearchPattern):
    def __init__(self): ...
    @property
    def Pattern(self) -> str: ...
    def GetDiscoveryReference(self, filename: str) -> DiscoveryReference: ...


class DiscoveryExceptionDictionary(DictionaryBase):
    def __init__(self): ...
    def Add(self, url: str, value: Exception) -> None: ...
    def Contains(self, url: str) -> bool: ...
    @property
    def Item(self, url: str) -> Exception: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Values(self) -> ICollection: ...
    def Remove(self, url: str) -> None: ...
    @Item.setter
    def Item(self, url: str, value: Exception) -> None: ...


class DiscoveryReference(Object):
    def FilenameFromUrl(url: str) -> str: ...
    @property
    def ClientProtocol(self) -> DiscoveryClientProtocol: ...
    @property
    def DefaultFilename(self) -> str: ...
    @property
    def Url(self) -> str: ...
    def ReadDocument(self, stream: Stream) -> Object: ...
    def Resolve(self) -> None: ...
    @ClientProtocol.setter
    def ClientProtocol(self, value: DiscoveryClientProtocol) -> None: ...
    @Url.setter
    def Url(self, value: str) -> None: ...
    def WriteDocument(self, document: Object, stream: Stream) -> None: ...


class DiscoveryReferenceCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, value: DiscoveryReference) -> int: ...
    def Contains(self, value: DiscoveryReference) -> bool: ...
    @property
    def Item(self, i: int) -> DiscoveryReference: ...
    def Remove(self, value: DiscoveryReference) -> None: ...
    @Item.setter
    def Item(self, i: int, value: DiscoveryReference) -> None: ...


class DiscoveryRequestHandler(Object):
    def __init__(self): ...
    @property
    def IsReusable(self) -> bool: ...
    def ProcessRequest(self, context: HttpContext) -> None: ...


class DiscoverySearchPattern(Object):
    @property
    def Pattern(self) -> str: ...
    def GetDiscoveryReference(self, filename: str) -> DiscoveryReference: ...


class DynamicDiscoveryDocument(Object):
    def __init__(self): ...
    @property
    def ExcludePaths(self) -> Set(ExcludePathInfo): ...
    def Load(stream: Stream) -> DynamicDiscoveryDocument: ...
    @ExcludePaths.setter
    def ExcludePaths(self, value: Set(ExcludePathInfo)) -> None: ...
    def Write(self, stream: Stream) -> None: ...


class ExcludePathInfo(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @property
    def Path(self) -> str: ...
    @Path.setter
    def Path(self, value: str) -> None: ...


class SchemaReference(DiscoveryReference):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, url: str): ...
    @property
    def DefaultFilename(self) -> str: ...
    @property
    def Ref(self) -> str: ...
    @property
    def Schema(self) -> XmlSchema: ...
    @property
    def TargetNamespace(self) -> str: ...
    @property
    def Url(self) -> str: ...
    def ReadDocument(self, stream: Stream) -> Object: ...
    @Ref.setter
    def Ref(self, value: str) -> None: ...
    @TargetNamespace.setter
    def TargetNamespace(self, value: str) -> None: ...
    @Url.setter
    def Url(self, value: str) -> None: ...
    def WriteDocument(self, document: Object, stream: Stream) -> None: ...


class SoapBinding(Object):
    def __init__(self): ...
    @property
    def Address(self) -> str: ...
    @property
    def Binding(self) -> XmlQualifiedName: ...
    @Address.setter
    def Address(self, value: str) -> None: ...
    @Binding.setter
    def Binding(self, value: XmlQualifiedName) -> None: ...


class XmlSchemaSearchPattern(DiscoverySearchPattern):
    def __init__(self): ...
    @property
    def Pattern(self) -> str: ...
    def GetDiscoveryReference(self, filename: str) -> DiscoveryReference: ...
