from typing import Tuple, Set, Iterable, List


class BasicProfileViolation(Object):
    @property
    def Claims(self) -> WsiProfiles: ...
    @property
    def Details(self) -> str: ...
    @property
    def Elements(self) -> StringCollection: ...
    @property
    def NormativeStatement(self) -> str: ...
    @property
    def Recommendation(self) -> str: ...
    def ToString(self) -> str: ...


class BasicProfileViolationCollection(CollectionBase):
    def __init__(self): ...
    def Contains(self, violation: BasicProfileViolation) -> bool: ...
    def CopyTo(self, array: Set(BasicProfileViolation), index: int) -> None: ...
    @property
    def Item(self, index: int) -> BasicProfileViolation: ...
    def IndexOf(self, violation: BasicProfileViolation) -> int: ...
    def Insert(self, index: int, violation: BasicProfileViolation) -> None: ...
    def Remove(self, violation: BasicProfileViolation) -> None: ...
    @Item.setter
    def Item(self, index: int, value: BasicProfileViolation) -> None: ...
    def ToString(self) -> str: ...


class BasicProfileViolationEnumerator(Object):
    def __init__(self, list: BasicProfileViolationCollection): ...
    def Dispose(self) -> None: ...
    @property
    def Current(self) -> BasicProfileViolation: ...
    def MoveNext(self) -> bool: ...


class Binding(NamedItem):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Operations(self) -> OperationBindingCollection: ...
    @property
    def ServiceDescription(self) -> ServiceDescription: ...
    @property
    def Type(self) -> XmlQualifiedName: ...
    @Type.setter
    def Type(self, value: XmlQualifiedName) -> None: ...


class BindingCollection(ServiceDescriptionBaseCollection):
    def Add(self, binding: Binding) -> int: ...
    def Contains(self, binding: Binding) -> bool: ...
    def CopyTo(self, array: Set(Binding), index: int) -> None: ...
    @property
    def Item(self, name: str) -> Binding: ...
    @property
    def Item(self, index: int) -> Binding: ...
    def IndexOf(self, binding: Binding) -> int: ...
    def Insert(self, index: int, binding: Binding) -> None: ...
    def Remove(self, binding: Binding) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Binding) -> None: ...


class DocumentableItem(Object):
    @property
    def Documentation(self) -> str: ...
    @property
    def DocumentationElement(self) -> XmlElement: ...
    @property
    def ExtensibleAttributes(self) -> Set(XmlAttribute): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Namespaces(self) -> XmlSerializerNamespaces: ...
    @Documentation.setter
    def Documentation(self, value: str) -> None: ...
    @DocumentationElement.setter
    def DocumentationElement(self, value: XmlElement) -> None: ...
    @ExtensibleAttributes.setter
    def ExtensibleAttributes(self, value: Set(XmlAttribute)) -> None: ...
    @Namespaces.setter
    def Namespaces(self, value: XmlSerializerNamespaces) -> None: ...


class FaultBinding(MessageBinding):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...


class FaultBindingCollection(ServiceDescriptionBaseCollection):
    def Add(self, bindingOperationFault: FaultBinding) -> int: ...
    def Contains(self, bindingOperationFault: FaultBinding) -> bool: ...
    def CopyTo(self, array: Set(FaultBinding), index: int) -> None: ...
    @property
    def Item(self, name: str) -> FaultBinding: ...
    @property
    def Item(self, index: int) -> FaultBinding: ...
    def IndexOf(self, bindingOperationFault: FaultBinding) -> int: ...
    def Insert(self, index: int, bindingOperationFault: FaultBinding) -> None: ...
    def Remove(self, bindingOperationFault: FaultBinding) -> None: ...
    @Item.setter
    def Item(self, index: int, value: FaultBinding) -> None: ...


class HttpAddressBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Location(self) -> str: ...
    @Location.setter
    def Location(self, value: str) -> None: ...


class HttpBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Verb(self) -> str: ...
    @Verb.setter
    def Verb(self, value: str) -> None: ...


class HttpOperationBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Location(self) -> str: ...
    @Location.setter
    def Location(self, value: str) -> None: ...


class HttpUrlEncodedBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...


class HttpUrlReplacementBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...


class Import(DocumentableItem):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Location(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ServiceDescription(self) -> ServiceDescription: ...
    @Location.setter
    def Location(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...


class ImportCollection(ServiceDescriptionBaseCollection):
    def Add(self, import: Import) -> int: ...
    def Contains(self, import: Import) -> bool: ...
    def CopyTo(self, array: Set(Import), index: int) -> None: ...
    @property
    def Item(self, index: int) -> Import: ...
    def IndexOf(self, import: Import) -> int: ...
    def Insert(self, index: int, import: Import) -> None: ...
    def Remove(self, import: Import) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Import) -> None: ...


class InputBinding(MessageBinding):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...


class Message(NamedItem):
    def __init__(self): ...
    def FindPartByName(self, partName: str) -> MessagePart: ...
    def FindPartsByName(self, partNames: Set(str)) -> Set(MessagePart): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Parts(self) -> MessagePartCollection: ...
    @property
    def ServiceDescription(self) -> ServiceDescription: ...


class MessageBinding(NamedItem):
    @property
    def OperationBinding(self) -> OperationBinding: ...


class MessageCollection(ServiceDescriptionBaseCollection):
    def Add(self, message: Message) -> int: ...
    def Contains(self, message: Message) -> bool: ...
    def CopyTo(self, array: Set(Message), index: int) -> None: ...
    @property
    def Item(self, name: str) -> Message: ...
    @property
    def Item(self, index: int) -> Message: ...
    def IndexOf(self, message: Message) -> int: ...
    def Insert(self, index: int, message: Message) -> None: ...
    def Remove(self, message: Message) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Message) -> None: ...


class MessagePart(NamedItem):
    def __init__(self): ...
    @property
    def Element(self) -> XmlQualifiedName: ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Message(self) -> Message: ...
    @property
    def Type(self) -> XmlQualifiedName: ...
    @Element.setter
    def Element(self, value: XmlQualifiedName) -> None: ...
    @Type.setter
    def Type(self, value: XmlQualifiedName) -> None: ...


class MessagePartCollection(ServiceDescriptionBaseCollection):
    def Add(self, messagePart: MessagePart) -> int: ...
    def Contains(self, messagePart: MessagePart) -> bool: ...
    def CopyTo(self, array: Set(MessagePart), index: int) -> None: ...
    @property
    def Item(self, name: str) -> MessagePart: ...
    @property
    def Item(self, index: int) -> MessagePart: ...
    def IndexOf(self, messagePart: MessagePart) -> int: ...
    def Insert(self, index: int, messagePart: MessagePart) -> None: ...
    def Remove(self, messagePart: MessagePart) -> None: ...
    @Item.setter
    def Item(self, index: int, value: MessagePart) -> None: ...


class MimeContentBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Part(self) -> str: ...
    @property
    def Type(self) -> str: ...
    @Part.setter
    def Part(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class MimeMultipartRelatedBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Parts(self) -> MimePartCollection: ...


class MimePart(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...


class MimePartCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, mimePart: MimePart) -> int: ...
    def Contains(self, mimePart: MimePart) -> bool: ...
    def CopyTo(self, array: Set(MimePart), index: int) -> None: ...
    @property
    def Item(self, index: int) -> MimePart: ...
    def IndexOf(self, mimePart: MimePart) -> int: ...
    def Insert(self, index: int, mimePart: MimePart) -> None: ...
    def Remove(self, mimePart: MimePart) -> None: ...
    @Item.setter
    def Item(self, index: int, value: MimePart) -> None: ...


class MimeTextBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Matches(self) -> MimeTextMatchCollection: ...


class MimeTextMatch(Object):
    def __init__(self): ...
    @property
    def Capture(self) -> int: ...
    @property
    def Group(self) -> int: ...
    @property
    def IgnoreCase(self) -> bool: ...
    @property
    def Matches(self) -> MimeTextMatchCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Pattern(self) -> str: ...
    @property
    def Repeats(self) -> int: ...
    @property
    def RepeatsString(self) -> str: ...
    @property
    def Type(self) -> str: ...
    @Capture.setter
    def Capture(self, value: int) -> None: ...
    @Group.setter
    def Group(self, value: int) -> None: ...
    @IgnoreCase.setter
    def IgnoreCase(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Pattern.setter
    def Pattern(self, value: str) -> None: ...
    @Repeats.setter
    def Repeats(self, value: int) -> None: ...
    @RepeatsString.setter
    def RepeatsString(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class MimeTextMatchCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, match: MimeTextMatch) -> int: ...
    def Contains(self, match: MimeTextMatch) -> bool: ...
    def CopyTo(self, array: Set(MimeTextMatch), index: int) -> None: ...
    @property
    def Item(self, index: int) -> MimeTextMatch: ...
    def IndexOf(self, match: MimeTextMatch) -> int: ...
    def Insert(self, index: int, match: MimeTextMatch) -> None: ...
    def Remove(self, match: MimeTextMatch) -> None: ...
    @Item.setter
    def Item(self, index: int, value: MimeTextMatch) -> None: ...


class MimeXmlBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Part(self) -> str: ...
    @Part.setter
    def Part(self, value: str) -> None: ...


class NamedItem(DocumentableItem):
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class Operation(NamedItem):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Faults(self) -> OperationFaultCollection: ...
    @property
    def Messages(self) -> OperationMessageCollection: ...
    @property
    def ParameterOrder(self) -> Set(str): ...
    @property
    def ParameterOrderString(self) -> str: ...
    @property
    def PortType(self) -> PortType: ...
    def IsBoundBy(self, operationBinding: OperationBinding) -> bool: ...
    @ParameterOrder.setter
    def ParameterOrder(self, value: Set(str)) -> None: ...
    @ParameterOrderString.setter
    def ParameterOrderString(self, value: str) -> None: ...


class OperationBinding(NamedItem):
    def __init__(self): ...
    @property
    def Binding(self) -> Binding: ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Faults(self) -> FaultBindingCollection: ...
    @property
    def Input(self) -> InputBinding: ...
    @property
    def Output(self) -> OutputBinding: ...
    @Input.setter
    def Input(self, value: InputBinding) -> None: ...
    @Output.setter
    def Output(self, value: OutputBinding) -> None: ...


class OperationBindingCollection(ServiceDescriptionBaseCollection):
    def Add(self, bindingOperation: OperationBinding) -> int: ...
    def Contains(self, bindingOperation: OperationBinding) -> bool: ...
    def CopyTo(self, array: Set(OperationBinding), index: int) -> None: ...
    @property
    def Item(self, index: int) -> OperationBinding: ...
    def IndexOf(self, bindingOperation: OperationBinding) -> int: ...
    def Insert(self, index: int, bindingOperation: OperationBinding) -> None: ...
    def Remove(self, bindingOperation: OperationBinding) -> None: ...
    @Item.setter
    def Item(self, index: int, value: OperationBinding) -> None: ...


class OperationCollection(ServiceDescriptionBaseCollection):
    def Add(self, operation: Operation) -> int: ...
    def Contains(self, operation: Operation) -> bool: ...
    def CopyTo(self, array: Set(Operation), index: int) -> None: ...
    @property
    def Item(self, index: int) -> Operation: ...
    def IndexOf(self, operation: Operation) -> int: ...
    def Insert(self, index: int, operation: Operation) -> None: ...
    def Remove(self, operation: Operation) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Operation) -> None: ...


class OperationFault(OperationMessage):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...


class OperationFaultCollection(ServiceDescriptionBaseCollection):
    def Add(self, operationFaultMessage: OperationFault) -> int: ...
    def Contains(self, operationFaultMessage: OperationFault) -> bool: ...
    def CopyTo(self, array: Set(OperationFault), index: int) -> None: ...
    @property
    def Item(self, name: str) -> OperationFault: ...
    @property
    def Item(self, index: int) -> OperationFault: ...
    def IndexOf(self, operationFaultMessage: OperationFault) -> int: ...
    def Insert(self, index: int, operationFaultMessage: OperationFault) -> None: ...
    def Remove(self, operationFaultMessage: OperationFault) -> None: ...
    @Item.setter
    def Item(self, index: int, value: OperationFault) -> None: ...


class OperationFlow:
    #None = 0
    OneWay = 1
    Notification = 2
    RequestResponse = 3
    SolicitResponse = 4


class OperationInput(OperationMessage):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...


class OperationMessage(NamedItem):
    @property
    def Message(self) -> XmlQualifiedName: ...
    @property
    def Operation(self) -> Operation: ...
    @Message.setter
    def Message(self, value: XmlQualifiedName) -> None: ...


class OperationMessageCollection(ServiceDescriptionBaseCollection):
    def Add(self, operationMessage: OperationMessage) -> int: ...
    def Contains(self, operationMessage: OperationMessage) -> bool: ...
    def CopyTo(self, array: Set(OperationMessage), index: int) -> None: ...
    @property
    def Flow(self) -> OperationFlow: ...
    @property
    def Input(self) -> OperationInput: ...
    @property
    def Item(self, index: int) -> OperationMessage: ...
    @property
    def Output(self) -> OperationOutput: ...
    def IndexOf(self, operationMessage: OperationMessage) -> int: ...
    def Insert(self, index: int, operationMessage: OperationMessage) -> None: ...
    def Remove(self, operationMessage: OperationMessage) -> None: ...
    @Item.setter
    def Item(self, index: int, value: OperationMessage) -> None: ...


class OperationOutput(OperationMessage):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...


class OutputBinding(MessageBinding):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...


class Port(NamedItem):
    def __init__(self): ...
    @property
    def Binding(self) -> XmlQualifiedName: ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Service(self) -> Service: ...
    @Binding.setter
    def Binding(self, value: XmlQualifiedName) -> None: ...


class PortCollection(ServiceDescriptionBaseCollection):
    def Add(self, port: Port) -> int: ...
    def Contains(self, port: Port) -> bool: ...
    def CopyTo(self, array: Set(Port), index: int) -> None: ...
    @property
    def Item(self, name: str) -> Port: ...
    @property
    def Item(self, index: int) -> Port: ...
    def IndexOf(self, port: Port) -> int: ...
    def Insert(self, index: int, port: Port) -> None: ...
    def Remove(self, port: Port) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Port) -> None: ...


class PortType(NamedItem):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Operations(self) -> OperationCollection: ...
    @property
    def ServiceDescription(self) -> ServiceDescription: ...


class PortTypeCollection(ServiceDescriptionBaseCollection):
    def Add(self, portType: PortType) -> int: ...
    def Contains(self, portType: PortType) -> bool: ...
    def CopyTo(self, array: Set(PortType), index: int) -> None: ...
    @property
    def Item(self, name: str) -> PortType: ...
    @property
    def Item(self, index: int) -> PortType: ...
    def IndexOf(self, portType: PortType) -> int: ...
    def Insert(self, index: int, portType: PortType) -> None: ...
    def Remove(self, portType: PortType) -> None: ...
    @Item.setter
    def Item(self, index: int, value: PortType) -> None: ...


class ProtocolImporter(Object):
    def AddExtensionWarningComments(self, comments: CodeCommentStatementCollection, extensions: ServiceDescriptionFormatExtensionCollection) -> None: ...
    @property
    def AbstractSchemas(self) -> XmlSchemas: ...
    @property
    def Binding(self) -> Binding: ...
    @property
    def ClassName(self) -> str: ...
    @property
    def ClassNames(self) -> CodeIdentifiers: ...
    @property
    def CodeNamespace(self) -> CodeNamespace: ...
    @property
    def CodeTypeDeclaration(self) -> CodeTypeDeclaration: ...
    @property
    def ConcreteSchemas(self) -> XmlSchemas: ...
    @property
    def InputMessage(self) -> Message: ...
    @property
    def MethodName(self) -> str: ...
    @property
    def Operation(self) -> Operation: ...
    @property
    def OperationBinding(self) -> OperationBinding: ...
    @property
    def OutputMessage(self) -> Message: ...
    @property
    def Port(self) -> Port: ...
    @property
    def PortType(self) -> PortType: ...
    @property
    def ProtocolName(self) -> str: ...
    @property
    def Schemas(self) -> XmlSchemas: ...
    @property
    def Service(self) -> Service: ...
    @property
    def ServiceDescriptions(self) -> ServiceDescriptionCollection: ...
    @property
    def Style(self) -> ServiceDescriptionImportStyle: ...
    @property
    def Warnings(self) -> ServiceDescriptionImportWarnings: ...
    def OperationBindingSyntaxException(self, text: str) -> Exception: ...
    def OperationSyntaxException(self, text: str) -> Exception: ...
    @Warnings.setter
    def Warnings(self, value: ServiceDescriptionImportWarnings) -> None: ...
    def UnsupportedBindingWarning(self, text: str) -> None: ...
    def UnsupportedOperationBindingWarning(self, text: str) -> None: ...
    def UnsupportedOperationWarning(self, text: str) -> None: ...


class ProtocolReflector(Object):
    @property
    def Binding(self) -> Binding: ...
    @property
    def DefaultNamespace(self) -> str: ...
    @property
    def HeaderMessages(self) -> MessageCollection: ...
    @property
    def InputMessage(self) -> Message: ...
    @property
    def Method(self) -> LogicalMethodInfo: ...
    @property
    def MethodAttribute(self) -> WebMethodAttribute: ...
    @property
    def Methods(self) -> Set(LogicalMethodInfo): ...
    @property
    def Operation(self) -> Operation: ...
    @property
    def OperationBinding(self) -> OperationBinding: ...
    @property
    def OutputMessage(self) -> Message: ...
    @property
    def Port(self) -> Port: ...
    @property
    def PortType(self) -> PortType: ...
    @property
    def ProtocolName(self) -> str: ...
    @property
    def ReflectionImporter(self) -> XmlReflectionImporter: ...
    @property
    def SchemaExporter(self) -> XmlSchemaExporter: ...
    @property
    def Schemas(self) -> XmlSchemas: ...
    @property
    def Service(self) -> Service: ...
    @property
    def ServiceDescription(self) -> ServiceDescription: ...
    @property
    def ServiceDescriptions(self) -> ServiceDescriptionCollection: ...
    @property
    def ServiceType(self) -> Type: ...
    @property
    def ServiceUrl(self) -> str: ...
    def GetServiceDescription(self, ns: str) -> ServiceDescription: ...


class Service(NamedItem):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Ports(self) -> PortCollection: ...
    @property
    def ServiceDescription(self) -> ServiceDescription: ...


class ServiceCollection(ServiceDescriptionBaseCollection):
    def Add(self, service: Service) -> int: ...
    def Contains(self, service: Service) -> bool: ...
    def CopyTo(self, array: Set(Service), index: int) -> None: ...
    @property
    def Item(self, name: str) -> Service: ...
    @property
    def Item(self, index: int) -> Service: ...
    def IndexOf(self, service: Service) -> int: ...
    def Insert(self, index: int, service: Service) -> None: ...
    def Remove(self, service: Service) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Service) -> None: ...


class ServiceDescription(NamedItem):
    def __init__(self): ...
    def CanRead(reader: XmlReader) -> bool: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Imports(self) -> ImportCollection: ...
    @property
    def Messages(self) -> MessageCollection: ...
    @property
    def PortTypes(self) -> PortTypeCollection: ...
    @property
    def RetrievalUrl(self) -> str: ...
    @property
    def Schema() -> XmlSchema: ...
    @property
    def Serializer() -> XmlSerializer: ...
    @property
    def ServiceDescriptions(self) -> ServiceDescriptionCollection: ...
    @property
    def Services(self) -> ServiceCollection: ...
    @property
    def TargetNamespace(self) -> str: ...
    @property
    def Types(self) -> Types: ...
    @property
    def ValidationWarnings(self) -> StringCollection: ...
    @overload
    def Read(textReader: TextReader) -> ServiceDescription: ...
    @overload
    def Read(stream: Stream) -> ServiceDescription: ...
    @overload
    def Read(reader: XmlReader) -> ServiceDescription: ...
    @overload
    def Read(fileName: str) -> ServiceDescription: ...
    @overload
    def Read(reader: XmlReader, validate: bool) -> ServiceDescription: ...
    @overload
    def Read(stream: Stream, validate: bool) -> ServiceDescription: ...
    @overload
    def Read(textReader: TextReader, validate: bool) -> ServiceDescription: ...
    @overload
    def Read(fileName: str, validate: bool) -> ServiceDescription: ...
    @RetrievalUrl.setter
    def RetrievalUrl(self, value: str) -> None: ...
    @TargetNamespace.setter
    def TargetNamespace(self, value: str) -> None: ...
    @Types.setter
    def Types(self, value: Types) -> None: ...
    @overload
    def Write(self, stream: Stream) -> None: ...
    @overload
    def Write(self, fileName: str) -> None: ...
    @overload
    def Write(self, writer: TextWriter) -> None: ...
    @overload
    def Write(self, writer: XmlWriter) -> None: ...


class ServiceDescriptionBaseCollection(CollectionBase):
    pass


class ServiceDescriptionCollection(ServiceDescriptionBaseCollection):
    def __init__(self): ...
    def Add(self, serviceDescription: ServiceDescription) -> int: ...
    def Contains(self, serviceDescription: ServiceDescription) -> bool: ...
    def CopyTo(self, array: Set(ServiceDescription), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ServiceDescription: ...
    @property
    def Item(self, ns: str) -> ServiceDescription: ...
    def GetBinding(self, name: XmlQualifiedName) -> Binding: ...
    def GetMessage(self, name: XmlQualifiedName) -> Message: ...
    def GetPortType(self, name: XmlQualifiedName) -> PortType: ...
    def GetService(self, name: XmlQualifiedName) -> Service: ...
    def IndexOf(self, serviceDescription: ServiceDescription) -> int: ...
    def Insert(self, index: int, serviceDescription: ServiceDescription) -> None: ...
    def Remove(self, serviceDescription: ServiceDescription) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ServiceDescription) -> None: ...


class ServiceDescriptionFormatExtension(Object):
    @property
    def Handled(self) -> bool: ...
    @property
    def Parent(self) -> Object: ...
    @property
    def Required(self) -> bool: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...
    @Required.setter
    def Required(self, value: bool) -> None: ...


class ServiceDescriptionFormatExtensionCollection(ServiceDescriptionBaseCollection):
    def __init__(self, parent: Object): ...
    def Add(self, extension: Object) -> int: ...
    def Contains(self, extension: Object) -> bool: ...
    def CopyTo(self, array: Set(Object), index: int) -> None: ...
    @overload
    def Find(self, type: Type) -> Object: ...
    @overload
    def Find(self, name: str, ns: str) -> XmlElement: ...
    @overload
    def FindAll(self, type: Type) -> Set(Object): ...
    @overload
    def FindAll(self, name: str, ns: str) -> Set(XmlElement): ...
    @property
    def Item(self, index: int) -> Object: ...
    def IndexOf(self, extension: Object) -> int: ...
    def Insert(self, index: int, extension: Object) -> None: ...
    def IsHandled(self, item: Object) -> bool: ...
    def IsRequired(self, item: Object) -> bool: ...
    def Remove(self, extension: Object) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...


class ServiceDescriptionImporter(Object):
    def __init__(self): ...
    def AddServiceDescription(self, serviceDescription: ServiceDescription, appSettingUrlKey: str, appSettingBaseUrl: str) -> None: ...
    def GenerateWebReferences(webReferences: WebReferenceCollection, codeProvider: CodeDomProvider, codeCompileUnit: CodeCompileUnit, options: WebReferenceOptions) -> StringCollection: ...
    @property
    def CodeGenerationOptions(self) -> CodeGenerationOptions: ...
    @property
    def CodeGenerator(self) -> CodeDomProvider: ...
    @property
    def ProtocolName(self) -> str: ...
    @property
    def Schemas(self) -> XmlSchemas: ...
    @property
    def ServiceDescriptions(self) -> ServiceDescriptionCollection: ...
    @property
    def Style(self) -> ServiceDescriptionImportStyle: ...
    def Import(self, codeNamespace: CodeNamespace, codeCompileUnit: CodeCompileUnit) -> ServiceDescriptionImportWarnings: ...
    @CodeGenerationOptions.setter
    def CodeGenerationOptions(self, value: CodeGenerationOptions) -> None: ...
    @CodeGenerator.setter
    def CodeGenerator(self, value: CodeDomProvider) -> None: ...
    @ProtocolName.setter
    def ProtocolName(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: ServiceDescriptionImportStyle) -> None: ...


class ServiceDescriptionImportStyle:
    Client = 0
    Server = 1
    ServerInterface = 2


class ServiceDescriptionImportWarnings:
    NoCodeGenerated = 1
    OptionalExtensionsIgnored = 2
    RequiredExtensionsIgnored = 4
    UnsupportedOperationsIgnored = 8
    UnsupportedBindingsIgnored = 16
    NoMethodsGenerated = 32
    SchemaValidation = 64
    WsiConformance = 128


class ServiceDescriptionReflector(Object):
    def __init__(self): ...
    @property
    def Schemas(self) -> XmlSchemas: ...
    @property
    def ServiceDescriptions(self) -> ServiceDescriptionCollection: ...
    def Reflect(self, type: Type, url: str) -> None: ...


class Soap12AddressBinding(SoapAddressBinding):
    def __init__(self): ...


class Soap12Binding(SoapBinding):
    def __init__(self): ...


class Soap12BodyBinding(SoapBodyBinding):
    def __init__(self): ...


class Soap12FaultBinding(SoapFaultBinding):
    def __init__(self): ...


class Soap12HeaderBinding(SoapHeaderBinding):
    def __init__(self): ...


class Soap12OperationBinding(SoapOperationBinding):
    def __init__(self): ...
    @property
    def SoapActionRequired(self) -> bool: ...
    @SoapActionRequired.setter
    def SoapActionRequired(self, value: bool) -> None: ...


class SoapAddressBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Location(self) -> str: ...
    @Location.setter
    def Location(self, value: str) -> None: ...


class SoapBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Schema() -> XmlSchema: ...
    @property
    def Style(self) -> SoapBindingStyle: ...
    @property
    def Transport(self) -> str: ...
    @Style.setter
    def Style(self, value: SoapBindingStyle) -> None: ...
    @Transport.setter
    def Transport(self, value: str) -> None: ...


class SoapBindingStyle:
    Default = 0
    Document = 1
    Rpc = 2


class SoapBindingUse:
    Default = 0
    Encoded = 1
    Literal = 2


class SoapBodyBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Encoding(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Parts(self) -> Set(str): ...
    @property
    def PartsString(self) -> str: ...
    @property
    def Use(self) -> SoapBindingUse: ...
    @Encoding.setter
    def Encoding(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Parts.setter
    def Parts(self, value: Set(str)) -> None: ...
    @PartsString.setter
    def PartsString(self, value: str) -> None: ...
    @Use.setter
    def Use(self, value: SoapBindingUse) -> None: ...


class SoapExtensionImporter(Object):
    @property
    def ImportContext(self) -> SoapProtocolImporter: ...
    def ImportMethod(self, metadata: CodeAttributeDeclarationCollection) -> None: ...
    @ImportContext.setter
    def ImportContext(self, value: SoapProtocolImporter) -> None: ...


class SoapExtensionReflector(Object):
    @property
    def ReflectionContext(self) -> ProtocolReflector: ...
    def ReflectDescription(self) -> None: ...
    def ReflectMethod(self) -> None: ...
    @ReflectionContext.setter
    def ReflectionContext(self, value: ProtocolReflector) -> None: ...


class SoapFaultBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Encoding(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Use(self) -> SoapBindingUse: ...
    @Encoding.setter
    def Encoding(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Use.setter
    def Use(self, value: SoapBindingUse) -> None: ...


class SoapHeaderBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Encoding(self) -> str: ...
    @property
    def Fault(self) -> SoapHeaderFaultBinding: ...
    @property
    def MapToProperty(self) -> bool: ...
    @property
    def Message(self) -> XmlQualifiedName: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Part(self) -> str: ...
    @property
    def Use(self) -> SoapBindingUse: ...
    @Encoding.setter
    def Encoding(self, value: str) -> None: ...
    @Fault.setter
    def Fault(self, value: SoapHeaderFaultBinding) -> None: ...
    @MapToProperty.setter
    def MapToProperty(self, value: bool) -> None: ...
    @Message.setter
    def Message(self, value: XmlQualifiedName) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Part.setter
    def Part(self, value: str) -> None: ...
    @Use.setter
    def Use(self, value: SoapBindingUse) -> None: ...


class SoapHeaderFaultBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def Encoding(self) -> str: ...
    @property
    def Message(self) -> XmlQualifiedName: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Part(self) -> str: ...
    @property
    def Use(self) -> SoapBindingUse: ...
    @Encoding.setter
    def Encoding(self, value: str) -> None: ...
    @Message.setter
    def Message(self, value: XmlQualifiedName) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Part.setter
    def Part(self, value: str) -> None: ...
    @Use.setter
    def Use(self, value: SoapBindingUse) -> None: ...


class SoapOperationBinding(ServiceDescriptionFormatExtension):
    def __init__(self): ...
    @property
    def SoapAction(self) -> str: ...
    @property
    def Style(self) -> SoapBindingStyle: ...
    @SoapAction.setter
    def SoapAction(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: SoapBindingStyle) -> None: ...


class SoapProtocolImporter(ProtocolImporter):
    def __init__(self): ...
    @property
    def ProtocolName(self) -> str: ...
    @property
    def SoapBinding(self) -> SoapBinding: ...
    @property
    def SoapExporter(self) -> SoapCodeExporter: ...
    @property
    def SoapImporter(self) -> SoapSchemaImporter: ...
    @property
    def XmlExporter(self) -> XmlCodeExporter: ...
    @property
    def XmlImporter(self) -> XmlSchemaImporter: ...


class SoapTransportImporter(Object):
    @property
    def ImportContext(self) -> SoapProtocolImporter: ...
    def ImportClass(self) -> None: ...
    def IsSupportedTransport(self, transport: str) -> bool: ...
    @ImportContext.setter
    def ImportContext(self, value: SoapProtocolImporter) -> None: ...


class Types(DocumentableItem):
    def __init__(self): ...
    @property
    def Extensions(self) -> ServiceDescriptionFormatExtensionCollection: ...
    @property
    def Schemas(self) -> XmlSchemas: ...


class WebReference(Object):
    @overload
    def __init__(self, documents: DiscoveryClientDocumentCollection, proxyCode: CodeNamespace): ...
    @overload
    def __init__(self, documents: DiscoveryClientDocumentCollection, proxyCode: CodeNamespace, appSettingUrlKey: str, appSettingBaseUrl: str): ...
    @overload
    def __init__(self, documents: DiscoveryClientDocumentCollection, proxyCode: CodeNamespace, protocolName: str, appSettingUrlKey: str, appSettingBaseUrl: str): ...
    @property
    def AppSettingBaseUrl(self) -> str: ...
    @property
    def AppSettingUrlKey(self) -> str: ...
    @property
    def Documents(self) -> DiscoveryClientDocumentCollection: ...
    @property
    def ProtocolName(self) -> str: ...
    @property
    def ProxyCode(self) -> CodeNamespace: ...
    @property
    def ValidationWarnings(self) -> StringCollection: ...
    @property
    def Warnings(self) -> ServiceDescriptionImportWarnings: ...
    @ProtocolName.setter
    def ProtocolName(self, value: str) -> None: ...
    @Warnings.setter
    def Warnings(self, value: ServiceDescriptionImportWarnings) -> None: ...


class WebReferenceCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, webReference: WebReference) -> int: ...
    def Contains(self, webReference: WebReference) -> bool: ...
    def CopyTo(self, array: Set(WebReference), index: int) -> None: ...
    @property
    def Item(self, index: int) -> WebReference: ...
    def IndexOf(self, webReference: WebReference) -> int: ...
    def Insert(self, index: int, webReference: WebReference) -> None: ...
    def Remove(self, webReference: WebReference) -> None: ...
    @Item.setter
    def Item(self, index: int, value: WebReference) -> None: ...


class WebReferenceOptions(Object):
    def __init__(self): ...
    @property
    def CodeGenerationOptions(self) -> CodeGenerationOptions: ...
    @property
    def Schema() -> XmlSchema: ...
    @property
    def SchemaImporterExtensions(self) -> StringCollection: ...
    @property
    def Style(self) -> ServiceDescriptionImportStyle: ...
    @property
    def Verbose(self) -> bool: ...
    @overload
    def Read(reader: TextReader, validationEventHandler: ValidationEventHandler) -> WebReferenceOptions: ...
    @overload
    def Read(stream: Stream, validationEventHandler: ValidationEventHandler) -> WebReferenceOptions: ...
    @overload
    def Read(xmlReader: XmlReader, validationEventHandler: ValidationEventHandler) -> WebReferenceOptions: ...
    @CodeGenerationOptions.setter
    def CodeGenerationOptions(self, value: CodeGenerationOptions) -> None: ...
    @Style.setter
    def Style(self, value: ServiceDescriptionImportStyle) -> None: ...
    @Verbose.setter
    def Verbose(self, value: bool) -> None: ...


class WebServicesInteroperability(Object):
    @overload
    def CheckConformance(claims: WsiProfiles, description: ServiceDescription, violations: BasicProfileViolationCollection) -> bool: ...
    @overload
    def CheckConformance(claims: WsiProfiles, descriptions: ServiceDescriptionCollection, violations: BasicProfileViolationCollection) -> bool: ...
    @overload
    def CheckConformance(claims: WsiProfiles, webReference: WebReference, violations: BasicProfileViolationCollection) -> bool: ...
