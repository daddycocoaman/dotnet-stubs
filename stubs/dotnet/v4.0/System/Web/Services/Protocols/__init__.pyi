from typing import Tuple, Set, Iterable, List


class AnyReturnReader(MimeReturnReader):
    def __init__(self): ...
    def GetInitializer(self, methodInfo: LogicalMethodInfo) -> Object: ...
    def Initialize(self, o: Object) -> None: ...
    def Read(self, response: WebResponse, responseStream: Stream) -> Object: ...


class HtmlFormParameterReader(ValueCollectionParameterReader):
    def __init__(self): ...
    def Read(self, request: HttpRequest) -> Set(Object): ...


class HtmlFormParameterWriter(UrlEncodedParameterWriter):
    def __init__(self): ...
    @property
    def UsesWriteRequest(self) -> bool: ...
    def InitializeRequest(self, request: WebRequest, values: Set(Object)) -> None: ...
    def WriteRequest(self, requestStream: Stream, values: Set(Object)) -> None: ...


class HttpGetClientProtocol(HttpSimpleClientProtocol):
    def __init__(self): ...


class HttpMethodAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, returnFormatter: Type, parameterFormatter: Type): ...
    @property
    def ParameterFormatter(self) -> Type: ...
    @property
    def ReturnFormatter(self) -> Type: ...
    @ParameterFormatter.setter
    def ParameterFormatter(self, value: Type) -> None: ...
    @ReturnFormatter.setter
    def ReturnFormatter(self, value: Type) -> None: ...


class HttpPostClientProtocol(HttpSimpleClientProtocol):
    def __init__(self): ...


class HttpSimpleClientProtocol(HttpWebClientProtocol):
    pass


class HttpWebClientProtocol(WebClientProtocol):
    @overload
    def GenerateXmlMappings(type: Type, mappings: ArrayList) -> bool: ...
    @overload
    def GenerateXmlMappings(types: Set(Type), mappings: ArrayList) -> Hashtable: ...
    @property
    def AllowAutoRedirect(self) -> bool: ...
    @property
    def ClientCertificates(self) -> X509CertificateCollection: ...
    @property
    def CookieContainer(self) -> CookieContainer: ...
    @property
    def EnableDecompression(self) -> bool: ...
    @property
    def Proxy(self) -> IWebProxy: ...
    @property
    def UnsafeAuthenticatedConnectionSharing(self) -> bool: ...
    @property
    def UserAgent(self) -> str: ...
    @AllowAutoRedirect.setter
    def AllowAutoRedirect(self, value: bool) -> None: ...
    @CookieContainer.setter
    def CookieContainer(self, value: CookieContainer) -> None: ...
    @EnableDecompression.setter
    def EnableDecompression(self, value: bool) -> None: ...
    @Proxy.setter
    def Proxy(self, value: IWebProxy) -> None: ...
    @UnsafeAuthenticatedConnectionSharing.setter
    def UnsafeAuthenticatedConnectionSharing(self, value: bool) -> None: ...
    @UserAgent.setter
    def UserAgent(self, value: str) -> None: ...


class InvokeCompletedEventArgs(AsyncCompletedEventArgs):
    @property
    def Results(self) -> Set(Object): ...


class InvokeCompletedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: InvokeCompletedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: InvokeCompletedEventArgs) -> None: ...


class LogicalMethodInfo(Object):
    def __init__(self, methodInfo: MethodInfo): ...
    def BeginInvoke(self, target: Object, values: Set(Object), callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def Create(methodInfos: Set(MethodInfo)) -> Set(LogicalMethodInfo): ...
    @overload
    def Create(methodInfos: Set(MethodInfo), types: LogicalMethodTypes) -> Set(LogicalMethodInfo): ...
    def EndInvoke(self, target: Object, asyncResult: IAsyncResult) -> Set(Object): ...
    @property
    def AsyncCallbackParameter(self) -> ParameterInfo: ...
    @property
    def AsyncResultParameter(self) -> ParameterInfo: ...
    @property
    def AsyncStateParameter(self) -> ParameterInfo: ...
    @property
    def BeginMethodInfo(self) -> MethodInfo: ...
    @property
    def CustomAttributeProvider(self) -> ICustomAttributeProvider: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def EndMethodInfo(self) -> MethodInfo: ...
    @property
    def InParameters(self) -> Set(ParameterInfo): ...
    @property
    def IsAsync(self) -> bool: ...
    @property
    def IsVoid(self) -> bool: ...
    @property
    def MethodInfo(self) -> MethodInfo: ...
    @property
    def Name(self) -> str: ...
    @property
    def OutParameters(self) -> Set(ParameterInfo): ...
    @property
    def Parameters(self) -> Set(ParameterInfo): ...
    @property
    def ReturnType(self) -> Type: ...
    @property
    def ReturnTypeCustomAttributeProvider(self) -> ICustomAttributeProvider: ...
    def GetCustomAttribute(self, type: Type) -> Object: ...
    def GetCustomAttributes(self, type: Type) -> Set(Object): ...
    def Invoke(self, target: Object, values: Set(Object)) -> Set(Object): ...
    def IsBeginMethod(methodInfo: MethodInfo) -> bool: ...
    def IsEndMethod(methodInfo: MethodInfo) -> bool: ...
    def ToString(self) -> str: ...


class LogicalMethodTypes:
    Sync = 1
    Async = 2


class MatchAttribute(Attribute):
    def __init__(self, pattern: str): ...
    @property
    def Capture(self) -> int: ...
    @property
    def Group(self) -> int: ...
    @property
    def IgnoreCase(self) -> bool: ...
    @property
    def MaxRepeats(self) -> int: ...
    @property
    def Pattern(self) -> str: ...
    @Capture.setter
    def Capture(self, value: int) -> None: ...
    @Group.setter
    def Group(self, value: int) -> None: ...
    @IgnoreCase.setter
    def IgnoreCase(self, value: bool) -> None: ...
    @MaxRepeats.setter
    def MaxRepeats(self, value: int) -> None: ...
    @Pattern.setter
    def Pattern(self, value: str) -> None: ...


class MimeFormatter(Object):
    def CreateInstance(type: Type, initializer: Object) -> MimeFormatter: ...
    @overload
    def GetInitializer(self, methodInfo: LogicalMethodInfo) -> Object: ...
    @overload
    def GetInitializer(type: Type, methodInfo: LogicalMethodInfo) -> Object: ...
    @overload
    def GetInitializers(self, methodInfos: Set(LogicalMethodInfo)) -> Set(Object): ...
    @overload
    def GetInitializers(type: Type, methodInfos: Set(LogicalMethodInfo)) -> Set(Object): ...
    def Initialize(self, initializer: Object) -> None: ...


class MimeParameterReader(MimeFormatter):
    def Read(self, request: HttpRequest) -> Set(Object): ...


class MimeParameterWriter(MimeFormatter):
    @property
    def RequestEncoding(self) -> Encoding: ...
    @property
    def UsesWriteRequest(self) -> bool: ...
    def GetRequestUrl(self, url: str, parameters: Set(Object)) -> str: ...
    def InitializeRequest(self, request: WebRequest, values: Set(Object)) -> None: ...
    @RequestEncoding.setter
    def RequestEncoding(self, value: Encoding) -> None: ...
    def WriteRequest(self, requestStream: Stream, values: Set(Object)) -> None: ...


class MimeReturnReader(MimeFormatter):
    def Read(self, response: WebResponse, responseStream: Stream) -> Object: ...


class NopReturnReader(MimeReturnReader):
    def __init__(self): ...
    def GetInitializer(self, methodInfo: LogicalMethodInfo) -> Object: ...
    def Initialize(self, initializer: Object) -> None: ...
    def Read(self, response: WebResponse, responseStream: Stream) -> Object: ...


class PatternMatcher(Object):
    def __init__(self, type: Type): ...
    def Match(self, text: str) -> Object: ...


class ServerProtocol(Object):
    pass


class ServerProtocolFactory(Object):
    pass


class ServerType(Object):
    def __init__(self, type: Type): ...


class Soap12FaultCodes(Object):
    pass


class SoapClientMessage(SoapMessage):
    @property
    def Action(self) -> str: ...
    @property
    def Client(self) -> SoapHttpClientProtocol: ...
    @property
    def MethodInfo(self) -> LogicalMethodInfo: ...
    @property
    def OneWay(self) -> bool: ...
    @property
    def SoapVersion(self) -> SoapProtocolVersion: ...
    @property
    def Url(self) -> str: ...


class SoapDocumentMethodAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, action: str): ...
    @property
    def Action(self) -> str: ...
    @property
    def Binding(self) -> str: ...
    @property
    def OneWay(self) -> bool: ...
    @property
    def ParameterStyle(self) -> SoapParameterStyle: ...
    @property
    def RequestElementName(self) -> str: ...
    @property
    def RequestNamespace(self) -> str: ...
    @property
    def ResponseElementName(self) -> str: ...
    @property
    def ResponseNamespace(self) -> str: ...
    @property
    def Use(self) -> SoapBindingUse: ...
    @Action.setter
    def Action(self, value: str) -> None: ...
    @Binding.setter
    def Binding(self, value: str) -> None: ...
    @OneWay.setter
    def OneWay(self, value: bool) -> None: ...
    @ParameterStyle.setter
    def ParameterStyle(self, value: SoapParameterStyle) -> None: ...
    @RequestElementName.setter
    def RequestElementName(self, value: str) -> None: ...
    @RequestNamespace.setter
    def RequestNamespace(self, value: str) -> None: ...
    @ResponseElementName.setter
    def ResponseElementName(self, value: str) -> None: ...
    @ResponseNamespace.setter
    def ResponseNamespace(self, value: str) -> None: ...
    @Use.setter
    def Use(self, value: SoapBindingUse) -> None: ...


class SoapDocumentServiceAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, use: SoapBindingUse): ...
    @overload
    def __init__(self, use: SoapBindingUse, paramStyle: SoapParameterStyle): ...
    @property
    def ParameterStyle(self) -> SoapParameterStyle: ...
    @property
    def RoutingStyle(self) -> SoapServiceRoutingStyle: ...
    @property
    def Use(self) -> SoapBindingUse: ...
    @ParameterStyle.setter
    def ParameterStyle(self, value: SoapParameterStyle) -> None: ...
    @RoutingStyle.setter
    def RoutingStyle(self, value: SoapServiceRoutingStyle) -> None: ...
    @Use.setter
    def Use(self, value: SoapBindingUse) -> None: ...


class SoapException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, actor: str): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, innerException: Exception): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, subCode: SoapFaultSubCode): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, actor: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, actor: str, detail: XmlNode): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, actor: str, detail: XmlNode, innerException: Exception): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, actor: str, role: str, detail: XmlNode, subCode: SoapFaultSubCode, innerException: Exception): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, actor: str, role: str, lang: str, detail: XmlNode, subCode: SoapFaultSubCode, innerException: Exception): ...
    @property
    def Actor(self) -> str: ...
    @property
    def Code(self) -> XmlQualifiedName: ...
    @property
    def Detail(self) -> XmlNode: ...
    @property
    def Lang(self) -> str: ...
    @property
    def Node(self) -> str: ...
    @property
    def Role(self) -> str: ...
    @property
    def SubCode(self) -> SoapFaultSubCode: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def IsClientFaultCode(code: XmlQualifiedName) -> bool: ...
    def IsMustUnderstandFaultCode(code: XmlQualifiedName) -> bool: ...
    def IsServerFaultCode(code: XmlQualifiedName) -> bool: ...
    def IsVersionMismatchFaultCode(code: XmlQualifiedName) -> bool: ...


class SoapExtension(Object):
    def ChainStream(self, stream: Stream) -> Stream: ...
    @overload
    def GetInitializer(self, serviceType: Type) -> Object: ...
    @overload
    def GetInitializer(self, methodInfo: LogicalMethodInfo, attribute: SoapExtensionAttribute) -> Object: ...
    def Initialize(self, initializer: Object) -> None: ...
    def ProcessMessage(self, message: SoapMessage) -> None: ...


class SoapExtensionAttribute(Attribute):
    @property
    def ExtensionType(self) -> Type: ...
    @property
    def Priority(self) -> int: ...
    @Priority.setter
    def Priority(self, value: int) -> None: ...


class SoapFaultSubCode(Object):
    @overload
    def __init__(self, code: XmlQualifiedName): ...
    @overload
    def __init__(self, code: XmlQualifiedName, subCode: SoapFaultSubCode): ...
    @property
    def Code(self) -> XmlQualifiedName: ...
    @property
    def SubCode(self) -> SoapFaultSubCode: ...


class SoapHeader(Object):
    @property
    def Actor(self) -> str: ...
    @property
    def DidUnderstand(self) -> bool: ...
    @property
    def EncodedMustUnderstand(self) -> str: ...
    @property
    def EncodedMustUnderstand12(self) -> str: ...
    @property
    def EncodedRelay(self) -> str: ...
    @property
    def MustUnderstand(self) -> bool: ...
    @property
    def Relay(self) -> bool: ...
    @property
    def Role(self) -> str: ...
    @Actor.setter
    def Actor(self, value: str) -> None: ...
    @DidUnderstand.setter
    def DidUnderstand(self, value: bool) -> None: ...
    @EncodedMustUnderstand.setter
    def EncodedMustUnderstand(self, value: str) -> None: ...
    @EncodedMustUnderstand12.setter
    def EncodedMustUnderstand12(self, value: str) -> None: ...
    @EncodedRelay.setter
    def EncodedRelay(self, value: str) -> None: ...
    @MustUnderstand.setter
    def MustUnderstand(self, value: bool) -> None: ...
    @Relay.setter
    def Relay(self, value: bool) -> None: ...
    @Role.setter
    def Role(self, value: str) -> None: ...


class SoapHeaderAttribute(Attribute):
    def __init__(self, memberName: str): ...
    @property
    def Direction(self) -> SoapHeaderDirection: ...
    @property
    def MemberName(self) -> str: ...
    @property
    def Required(self) -> bool: ...
    @Direction.setter
    def Direction(self, value: SoapHeaderDirection) -> None: ...
    @MemberName.setter
    def MemberName(self, value: str) -> None: ...
    @Required.setter
    def Required(self, value: bool) -> None: ...


class SoapHeaderCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, header: SoapHeader) -> int: ...
    def Contains(self, header: SoapHeader) -> bool: ...
    def CopyTo(self, array: Set(SoapHeader), index: int) -> None: ...
    @property
    def Item(self, index: int) -> SoapHeader: ...
    def IndexOf(self, header: SoapHeader) -> int: ...
    def Insert(self, index: int, header: SoapHeader) -> None: ...
    def Remove(self, header: SoapHeader) -> None: ...
    @Item.setter
    def Item(self, index: int, value: SoapHeader) -> None: ...


class SoapHeaderDirection:
    In = 1
    Out = 2
    InOut = 3
    Fault = 4


class SoapHeaderException(SoapException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, actor: str): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, innerException: Exception): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, actor: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, actor: str, role: str, subCode: SoapFaultSubCode, innerException: Exception): ...
    @overload
    def __init__(self, message: str, code: XmlQualifiedName, actor: str, role: str, lang: str, subCode: SoapFaultSubCode, innerException: Exception): ...


class SoapHeaderHandling(Object):
    def __init__(self): ...
    def EnsureHeadersUnderstood(headers: SoapHeaderCollection) -> None: ...
    def GetHeaderMembers(headers: SoapHeaderCollection, target: Object, mappings: Set(SoapHeaderMapping), direction: SoapHeaderDirection, client: bool) -> None: ...
    def ReadHeaders(self, reader: XmlReader, serializer: XmlSerializer, headers: SoapHeaderCollection, mappings: Set(SoapHeaderMapping), direction: SoapHeaderDirection, envelopeNS: str, encodingStyle: str, checkRequiredHeaders: bool) -> str: ...
    def SetHeaderMembers(headers: SoapHeaderCollection, target: Object, mappings: Set(SoapHeaderMapping), direction: SoapHeaderDirection, client: bool) -> None: ...
    def WriteHeaders(writer: XmlWriter, serializer: XmlSerializer, headers: SoapHeaderCollection, mappings: Set(SoapHeaderMapping), direction: SoapHeaderDirection, isEncoded: bool, defaultNS: str, serviceDefaultIsEncoded: bool, envelopeNS: str) -> None: ...
    def WriteUnknownHeaders(writer: XmlWriter, headers: SoapHeaderCollection, envelopeNS: str) -> None: ...


class SoapHeaderMapping(Object):
    @property
    def Custom(self) -> bool: ...
    @property
    def Direction(self) -> SoapHeaderDirection: ...
    @property
    def HeaderType(self) -> Type: ...
    @property
    def MemberInfo(self) -> MemberInfo: ...
    @property
    def Repeats(self) -> bool: ...


class SoapHttpClientProtocol(HttpWebClientProtocol):
    def __init__(self): ...
    def Discover(self) -> None: ...
    @property
    def SoapVersion(self) -> SoapProtocolVersion: ...
    @SoapVersion.setter
    def SoapVersion(self, value: SoapProtocolVersion) -> None: ...


class SoapMessage(Object):
    @property
    def Action(self) -> str: ...
    @property
    def ContentEncoding(self) -> str: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Exception(self) -> SoapException: ...
    @property
    def Headers(self) -> SoapHeaderCollection: ...
    @property
    def MethodInfo(self) -> LogicalMethodInfo: ...
    @property
    def OneWay(self) -> bool: ...
    @property
    def SoapVersion(self) -> SoapProtocolVersion: ...
    @property
    def Stage(self) -> SoapMessageStage: ...
    @property
    def Stream(self) -> Stream: ...
    @property
    def Url(self) -> str: ...
    def GetInParameterValue(self, index: int) -> Object: ...
    def GetOutParameterValue(self, index: int) -> Object: ...
    def GetReturnValue(self) -> Object: ...
    @ContentEncoding.setter
    def ContentEncoding(self, value: str) -> None: ...
    @ContentType.setter
    def ContentType(self, value: str) -> None: ...
    @Exception.setter
    def Exception(self, value: SoapException) -> None: ...


class SoapMessageStage:
    BeforeSerialize = 1
    AfterSerialize = 2
    BeforeDeserialize = 4
    AfterDeserialize = 8


class SoapParameterStyle:
    Default = 0
    Bare = 1
    Wrapped = 2


class SoapProtocolVersion:
    Default = 0
    Soap11 = 1
    Soap12 = 2


class SoapRpcMethodAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, action: str): ...
    @property
    def Action(self) -> str: ...
    @property
    def Binding(self) -> str: ...
    @property
    def OneWay(self) -> bool: ...
    @property
    def RequestElementName(self) -> str: ...
    @property
    def RequestNamespace(self) -> str: ...
    @property
    def ResponseElementName(self) -> str: ...
    @property
    def ResponseNamespace(self) -> str: ...
    @property
    def Use(self) -> SoapBindingUse: ...
    @Action.setter
    def Action(self, value: str) -> None: ...
    @Binding.setter
    def Binding(self, value: str) -> None: ...
    @OneWay.setter
    def OneWay(self, value: bool) -> None: ...
    @RequestElementName.setter
    def RequestElementName(self, value: str) -> None: ...
    @RequestNamespace.setter
    def RequestNamespace(self, value: str) -> None: ...
    @ResponseElementName.setter
    def ResponseElementName(self, value: str) -> None: ...
    @ResponseNamespace.setter
    def ResponseNamespace(self, value: str) -> None: ...
    @Use.setter
    def Use(self, value: SoapBindingUse) -> None: ...


class SoapRpcServiceAttribute(Attribute):
    def __init__(self): ...
    @property
    def RoutingStyle(self) -> SoapServiceRoutingStyle: ...
    @property
    def Use(self) -> SoapBindingUse: ...
    @RoutingStyle.setter
    def RoutingStyle(self, value: SoapServiceRoutingStyle) -> None: ...
    @Use.setter
    def Use(self, value: SoapBindingUse) -> None: ...


class SoapServerMessage(SoapMessage):
    @property
    def Action(self) -> str: ...
    @property
    def MethodInfo(self) -> LogicalMethodInfo: ...
    @property
    def OneWay(self) -> bool: ...
    @property
    def Server(self) -> Object: ...
    @property
    def SoapVersion(self) -> SoapProtocolVersion: ...
    @property
    def Url(self) -> str: ...


class SoapServerMethod(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, serverType: Type, methodInfo: LogicalMethodInfo): ...
    @property
    def Action(self) -> str: ...
    @property
    def BindingUse(self) -> SoapBindingUse: ...
    @property
    def InHeaderMappings(self) -> Set(SoapHeaderMapping): ...
    @property
    def InHeaderSerializer(self) -> XmlSerializer: ...
    @property
    def MethodInfo(self) -> LogicalMethodInfo: ...
    @property
    def OneWay(self) -> bool: ...
    @property
    def OutHeaderMappings(self) -> Set(SoapHeaderMapping): ...
    @property
    def OutHeaderSerializer(self) -> XmlSerializer: ...
    @property
    def ParameterSerializer(self) -> XmlSerializer: ...
    @property
    def ParameterStyle(self) -> SoapParameterStyle: ...
    @property
    def ReturnSerializer(self) -> XmlSerializer: ...
    @property
    def Rpc(self) -> bool: ...
    @property
    def WsiClaims(self) -> WsiProfiles: ...


class SoapServerProtocol(ServerProtocol):
    pass


class SoapServerProtocolFactory(ServerProtocolFactory):
    def __init__(self): ...


class SoapServerType(ServerType):
    def __init__(self, type: Type, protocolsSupported: WebServiceProtocols): ...
    @property
    def ServiceDefaultIsEncoded(self) -> bool: ...
    @property
    def ServiceNamespace(self) -> str: ...
    @property
    def ServiceRoutingOnSoapAction(self) -> bool: ...
    def GetDuplicateMethod(self, key: Object) -> SoapServerMethod: ...
    def GetMethod(self, key: Object) -> SoapServerMethod: ...


class SoapServiceRoutingStyle:
    SoapAction = 0
    RequestElement = 1


class SoapUnknownHeader(SoapHeader):
    def __init__(self): ...
    @property
    def Element(self) -> XmlElement: ...
    @Element.setter
    def Element(self, value: XmlElement) -> None: ...


class TextReturnReader(MimeReturnReader):
    def __init__(self): ...
    def GetInitializer(self, methodInfo: LogicalMethodInfo) -> Object: ...
    def Initialize(self, o: Object) -> None: ...
    def Read(self, response: WebResponse, responseStream: Stream) -> Object: ...


class UrlEncodedParameterWriter(MimeParameterWriter):
    @property
    def RequestEncoding(self) -> Encoding: ...
    def GetInitializer(self, methodInfo: LogicalMethodInfo) -> Object: ...
    def Initialize(self, initializer: Object) -> None: ...
    @RequestEncoding.setter
    def RequestEncoding(self, value: Encoding) -> None: ...


class UrlParameterReader(ValueCollectionParameterReader):
    def __init__(self): ...
    def Read(self, request: HttpRequest) -> Set(Object): ...


class UrlParameterWriter(UrlEncodedParameterWriter):
    def __init__(self): ...
    def GetRequestUrl(self, url: str, parameters: Set(Object)) -> str: ...


class ValueCollectionParameterReader(MimeParameterReader):
    def GetInitializer(self, methodInfo: LogicalMethodInfo) -> Object: ...
    def Initialize(self, o: Object) -> None: ...
    @overload
    def IsSupported(methodInfo: LogicalMethodInfo) -> bool: ...
    @overload
    def IsSupported(paramInfo: ParameterInfo) -> bool: ...


class WebClientAsyncResult(Object):
    def Abort(self) -> None: ...
    @property
    def AsyncState(self) -> Object: ...
    @property
    def AsyncWaitHandle(self) -> WaitHandle: ...
    @property
    def CompletedSynchronously(self) -> bool: ...
    @property
    def IsCompleted(self) -> bool: ...


class WebClientProtocol(Component):
    def Abort(self) -> None: ...
    @property
    def ConnectionGroupName(self) -> str: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def PreAuthenticate(self) -> bool: ...
    @property
    def RequestEncoding(self) -> Encoding: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def Url(self) -> str: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @ConnectionGroupName.setter
    def ConnectionGroupName(self, value: str) -> None: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...
    @PreAuthenticate.setter
    def PreAuthenticate(self, value: bool) -> None: ...
    @RequestEncoding.setter
    def RequestEncoding(self, value: Encoding) -> None: ...
    @Timeout.setter
    def Timeout(self, value: int) -> None: ...
    @Url.setter
    def Url(self, value: str) -> None: ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: bool) -> None: ...


class WebServiceHandlerFactory(Object):
    def __init__(self): ...
    def GetHandler(self, context: HttpContext, verb: str, url: str, filePath: str) -> IHttpHandler: ...
    def ReleaseHandler(self, handler: IHttpHandler) -> None: ...


class XmlReturnReader(MimeReturnReader):
    def __init__(self): ...
    def GetInitializer(self, methodInfo: LogicalMethodInfo) -> Object: ...
    def GetInitializers(self, methodInfos: Set(LogicalMethodInfo)) -> Set(Object): ...
    def Initialize(self, o: Object) -> None: ...
    def Read(self, response: WebResponse, responseStream: Stream) -> Object: ...
