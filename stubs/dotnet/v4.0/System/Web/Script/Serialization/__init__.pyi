from typing import Tuple, Set, Iterable, List


class JavaScriptConverter(Object):
    def Deserialize(self, dictionary: IDictionary, type: Type, serializer: JavaScriptSerializer) -> Object: ...
    @property
    def SupportedTypes(self) -> Iterable[Type]: ...
    def Serialize(self, obj: Object, serializer: JavaScriptSerializer) -> IDictionary: ...


class JavaScriptSerializer(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, resolver: JavaScriptTypeResolver): ...
    @overload
    def ConvertToType(self, obj: Object) -> T: ...
    @overload
    def ConvertToType(self, obj: Object, targetType: Type) -> Object: ...
    @overload
    def Deserialize(self, input: str) -> T: ...
    @overload
    def Deserialize(self, input: str, targetType: Type) -> Object: ...
    def DeserializeObject(self, input: str) -> Object: ...
    @property
    def MaxJsonLength(self) -> int: ...
    @property
    def RecursionLimit(self) -> int: ...
    def RegisterConverters(self, converters: Iterable[JavaScriptConverter]) -> None: ...
    @overload
    def Serialize(self, obj: Object) -> str: ...
    @overload
    def Serialize(self, obj: Object, output: StringBuilder) -> None: ...
    @MaxJsonLength.setter
    def MaxJsonLength(self, value: int) -> None: ...
    @RecursionLimit.setter
    def RecursionLimit(self, value: int) -> None: ...


class JavaScriptTypeResolver(Object):
    def ResolveType(self, id: str) -> Type: ...
    def ResolveTypeId(self, type: Type) -> str: ...


class ScriptIgnoreAttribute(Attribute):
    def __init__(self): ...
    @property
    def ApplyToOverrides(self) -> bool: ...
    @ApplyToOverrides.setter
    def ApplyToOverrides(self, value: bool) -> None: ...


class SimpleTypeResolver(JavaScriptTypeResolver):
    def __init__(self): ...
    def ResolveType(self, id: str) -> Type: ...
    def ResolveTypeId(self, type: Type) -> str: ...
