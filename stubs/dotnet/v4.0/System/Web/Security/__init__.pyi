from typing import Tuple, Set, Iterable, List


class MembershipCreateStatus:
    Success = 0
    InvalidUserName = 1
    InvalidPassword = 2
    InvalidQuestion = 3
    InvalidAnswer = 4
    InvalidEmail = 5
    DuplicateUserName = 6
    DuplicateEmail = 7
    UserRejected = 8
    InvalidProviderUserKey = 9
    DuplicateProviderUserKey = 10
    ProviderError = 11


class MembershipCreateUserException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, statusCode: MembershipCreateStatus): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def StatusCode(self) -> MembershipCreateStatus: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class MembershipPasswordException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class MembershipPasswordFormat:
    Clear = 0
    Hashed = 1
    Encrypted = 2


class MembershipProvider(ProviderBase):
    def add_ValidatingPassword(self, value: MembershipValidatePasswordEventHandler) -> None: ...
    def ChangePassword(self, username: str, oldPassword: str, newPassword: str) -> bool: ...
    def ChangePasswordQuestionAndAnswer(self, username: str, password: str, newPasswordQuestion: str, newPasswordAnswer: str) -> bool: ...
    def CreateUser(self, username: str, password: str, email: str, passwordQuestion: str, passwordAnswer: str, isApproved: bool, providerUserKey: Object) -> Tuple[MembershipUser, MembershipCreateStatus]: ...
    def DeleteUser(self, username: str, deleteAllRelatedData: bool) -> bool: ...
    def FindUsersByEmail(self, emailToMatch: str, pageIndex: int, pageSize: int) -> Tuple[MembershipUserCollection, int]: ...
    def FindUsersByName(self, usernameToMatch: str, pageIndex: int, pageSize: int) -> Tuple[MembershipUserCollection, int]: ...
    @property
    def ApplicationName(self) -> str: ...
    @property
    def EnablePasswordReset(self) -> bool: ...
    @property
    def EnablePasswordRetrieval(self) -> bool: ...
    @property
    def MaxInvalidPasswordAttempts(self) -> int: ...
    @property
    def MinRequiredNonAlphanumericCharacters(self) -> int: ...
    @property
    def MinRequiredPasswordLength(self) -> int: ...
    @property
    def PasswordAttemptWindow(self) -> int: ...
    @property
    def PasswordFormat(self) -> MembershipPasswordFormat: ...
    @property
    def PasswordStrengthRegularExpression(self) -> str: ...
    @property
    def RequiresQuestionAndAnswer(self) -> bool: ...
    @property
    def RequiresUniqueEmail(self) -> bool: ...
    def GetAllUsers(self, pageIndex: int, pageSize: int) -> Tuple[MembershipUserCollection, int]: ...
    def GetNumberOfUsersOnline(self) -> int: ...
    def GetPassword(self, username: str, answer: str) -> str: ...
    @overload
    def GetUser(self, username: str, userIsOnline: bool) -> MembershipUser: ...
    @overload
    def GetUser(self, providerUserKey: Object, userIsOnline: bool) -> MembershipUser: ...
    def GetUserNameByEmail(self, email: str) -> str: ...
    def remove_ValidatingPassword(self, value: MembershipValidatePasswordEventHandler) -> None: ...
    def ResetPassword(self, username: str, answer: str) -> str: ...
    @ApplicationName.setter
    def ApplicationName(self, value: str) -> None: ...
    def UnlockUser(self, userName: str) -> bool: ...
    def UpdateUser(self, user: MembershipUser) -> None: ...
    def ValidateUser(self, username: str, password: str) -> bool: ...


class MembershipProviderCollection(ProviderCollection):
    def __init__(self): ...
    def Add(self, provider: ProviderBase) -> None: ...
    @overload
    def CopyTo(self, array: Set(MembershipProvider), index: int) -> None: ...
    @property
    def Item(self, name: str) -> MembershipProvider: ...


class MembershipUser(Object):
    def __init__(self, providerName: str, name: str, providerUserKey: Object, email: str, passwordQuestion: str, comment: str, isApproved: bool, isLockedOut: bool, creationDate: DateTime, lastLoginDate: DateTime, lastActivityDate: DateTime, lastPasswordChangedDate: DateTime, lastLockoutDate: DateTime): ...
    def ChangePassword(self, oldPassword: str, newPassword: str) -> bool: ...
    def ChangePasswordQuestionAndAnswer(self, password: str, newPasswordQuestion: str, newPasswordAnswer: str) -> bool: ...
    @property
    def Comment(self) -> str: ...
    @property
    def CreationDate(self) -> DateTime: ...
    @property
    def Email(self) -> str: ...
    @property
    def IsApproved(self) -> bool: ...
    @property
    def IsLockedOut(self) -> bool: ...
    @property
    def IsOnline(self) -> bool: ...
    @property
    def LastActivityDate(self) -> DateTime: ...
    @property
    def LastLockoutDate(self) -> DateTime: ...
    @property
    def LastLoginDate(self) -> DateTime: ...
    @property
    def LastPasswordChangedDate(self) -> DateTime: ...
    @property
    def PasswordQuestion(self) -> str: ...
    @property
    def ProviderName(self) -> str: ...
    @property
    def ProviderUserKey(self) -> Object: ...
    @property
    def UserName(self) -> str: ...
    @overload
    def GetPassword(self) -> str: ...
    @overload
    def GetPassword(self, passwordAnswer: str) -> str: ...
    @overload
    def ResetPassword(self) -> str: ...
    @overload
    def ResetPassword(self, passwordAnswer: str) -> str: ...
    @Comment.setter
    def Comment(self, value: str) -> None: ...
    @Email.setter
    def Email(self, value: str) -> None: ...
    @IsApproved.setter
    def IsApproved(self, value: bool) -> None: ...
    @LastActivityDate.setter
    def LastActivityDate(self, value: DateTime) -> None: ...
    @LastLoginDate.setter
    def LastLoginDate(self, value: DateTime) -> None: ...
    def ToString(self) -> str: ...
    def UnlockUser(self) -> bool: ...


class MembershipUserCollection(Object):
    def __init__(self): ...
    def Add(self, user: MembershipUser) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: Set(MembershipUser), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, name: str) -> MembershipUser: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, name: str) -> None: ...
    def SetReadOnly(self) -> None: ...


class MembershipValidatePasswordEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ValidatePasswordEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ValidatePasswordEventArgs) -> None: ...


class RoleProvider(ProviderBase):
    def AddUsersToRoles(self, usernames: Set(str), roleNames: Set(str)) -> None: ...
    def CreateRole(self, roleName: str) -> None: ...
    def DeleteRole(self, roleName: str, throwOnPopulatedRole: bool) -> bool: ...
    def FindUsersInRole(self, roleName: str, usernameToMatch: str) -> Set(str): ...
    @property
    def ApplicationName(self) -> str: ...
    def GetAllRoles(self) -> Set(str): ...
    def GetRolesForUser(self, username: str) -> Set(str): ...
    def GetUsersInRole(self, roleName: str) -> Set(str): ...
    def IsUserInRole(self, username: str, roleName: str) -> bool: ...
    def RemoveUsersFromRoles(self, usernames: Set(str), roleNames: Set(str)) -> None: ...
    def RoleExists(self, roleName: str) -> bool: ...
    @ApplicationName.setter
    def ApplicationName(self, value: str) -> None: ...


class ValidatePasswordEventArgs(EventArgs):
    def __init__(self, userName: str, password: str, isNewUser: bool): ...
    @property
    def Cancel(self) -> bool: ...
    @property
    def FailureInformation(self) -> Exception: ...
    @property
    def IsNewUser(self) -> bool: ...
    @property
    def Password(self) -> str: ...
    @property
    def UserName(self) -> str: ...
    @Cancel.setter
    def Cancel(self, value: bool) -> None: ...
    @FailureInformation.setter
    def FailureInformation(self, value: Exception) -> None: ...
