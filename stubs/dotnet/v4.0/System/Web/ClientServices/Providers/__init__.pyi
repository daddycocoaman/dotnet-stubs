from typing import Tuple, Set, Iterable, List


class ClientFormsAuthenticationCredentials(Object):
    def __init__(self, username: str, password: str, rememberMe: bool): ...
    @property
    def Password(self) -> str: ...
    @property
    def RememberMe(self) -> bool: ...
    @property
    def UserName(self) -> str: ...
    @Password.setter
    def Password(self, value: str) -> None: ...
    @RememberMe.setter
    def RememberMe(self, value: bool) -> None: ...
    @UserName.setter
    def UserName(self, value: str) -> None: ...


class ClientFormsAuthenticationMembershipProvider(MembershipProvider):
    def __init__(self): ...
    def add_UserValidated(self, value: EventHandler) -> None: ...
    def ChangePassword(self, username: str, oldPassword: str, newPassword: str) -> bool: ...
    def ChangePasswordQuestionAndAnswer(self, username: str, password: str, newPasswordQuestion: str, newPasswordAnswer: str) -> bool: ...
    def CreateUser(self, username: str, password: str, email: str, passwordQuestion: str, passwordAnswer: str, isApproved: bool, providerUserKey: Object) -> Tuple[MembershipUser, MembershipCreateStatus]: ...
    def DeleteUser(self, username: str, deleteAllRelatedData: bool) -> bool: ...
    def FindUsersByEmail(self, emailToMatch: str, pageIndex: int, pageSize: int) -> Tuple[MembershipUserCollection, int]: ...
    def FindUsersByName(self, usernameToMatch: str, pageIndex: int, pageSize: int) -> Tuple[MembershipUserCollection, int]: ...
    @property
    def ApplicationName(self) -> str: ...
    @property
    def EnablePasswordReset(self) -> bool: ...
    @property
    def EnablePasswordRetrieval(self) -> bool: ...
    @property
    def MaxInvalidPasswordAttempts(self) -> int: ...
    @property
    def MinRequiredNonAlphanumericCharacters(self) -> int: ...
    @property
    def MinRequiredPasswordLength(self) -> int: ...
    @property
    def PasswordAttemptWindow(self) -> int: ...
    @property
    def PasswordFormat(self) -> MembershipPasswordFormat: ...
    @property
    def PasswordStrengthRegularExpression(self) -> str: ...
    @property
    def RequiresQuestionAndAnswer(self) -> bool: ...
    @property
    def RequiresUniqueEmail(self) -> bool: ...
    @property
    def ServiceUri(self) -> str: ...
    def GetAllUsers(self, pageIndex: int, pageSize: int) -> Tuple[MembershipUserCollection, int]: ...
    def GetNumberOfUsersOnline(self) -> int: ...
    def GetPassword(self, username: str, answer: str) -> str: ...
    @overload
    def GetUser(self, providerUserKey: Object, userIsOnline: bool) -> MembershipUser: ...
    @overload
    def GetUser(self, username: str, userIsOnline: bool) -> MembershipUser: ...
    def GetUserNameByEmail(self, email: str) -> str: ...
    def Initialize(self, name: str, config: NameValueCollection) -> None: ...
    def Logout(self) -> None: ...
    def remove_UserValidated(self, value: EventHandler) -> None: ...
    def ResetPassword(self, username: str, answer: str) -> str: ...
    @ApplicationName.setter
    def ApplicationName(self, value: str) -> None: ...
    @ServiceUri.setter
    def ServiceUri(self, value: str) -> None: ...
    def UnlockUser(self, username: str) -> bool: ...
    def UpdateUser(self, user: MembershipUser) -> None: ...
    @overload
    def ValidateUser(self, username: str, password: str) -> bool: ...
    @overload
    def ValidateUser(self, username: str, password: str, rememberMe: bool) -> bool: ...
    @overload
    def ValidateUser(username: str, password: str, serviceUri: str) -> bool: ...


class ClientRoleProvider(RoleProvider):
    def __init__(self): ...
    def AddUsersToRoles(self, usernames: Set(str), roleNames: Set(str)) -> None: ...
    def CreateRole(self, roleName: str) -> None: ...
    def DeleteRole(self, roleName: str, throwOnPopulatedRole: bool) -> bool: ...
    def FindUsersInRole(self, roleName: str, usernameToMatch: str) -> Set(str): ...
    @property
    def ApplicationName(self) -> str: ...
    @property
    def ServiceUri(self) -> str: ...
    def GetAllRoles(self) -> Set(str): ...
    def GetRolesForUser(self, username: str) -> Set(str): ...
    def GetUsersInRole(self, roleName: str) -> Set(str): ...
    def Initialize(self, name: str, config: NameValueCollection) -> None: ...
    def IsUserInRole(self, username: str, roleName: str) -> bool: ...
    def RemoveUsersFromRoles(self, usernames: Set(str), roleNames: Set(str)) -> None: ...
    def ResetCache(self) -> None: ...
    def RoleExists(self, roleName: str) -> bool: ...
    @ApplicationName.setter
    def ApplicationName(self, value: str) -> None: ...
    @ServiceUri.setter
    def ServiceUri(self, value: str) -> None: ...


class ClientSettingsProvider(SettingsProvider):
    def __init__(self): ...
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    @property
    def ApplicationName(self) -> str: ...
    @property
    def ServiceUri() -> str: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def GetPropertyMetadata(serviceUri: str) -> SettingsPropertyCollection: ...
    def GetPropertyValues(self, context: SettingsContext, propertyCollection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def Initialize(self, name: str, config: NameValueCollection) -> None: ...
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    def Reset(self, context: SettingsContext) -> None: ...
    @ApplicationName.setter
    def ApplicationName(self, value: str) -> None: ...
    @ServiceUri.setter
    def ServiceUri(value: str) -> None: ...
    def SetPropertyValues(self, context: SettingsContext, propertyValueCollection: SettingsPropertyValueCollection) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...


class ClientWindowsAuthenticationMembershipProvider(MembershipProvider):
    def __init__(self): ...
    def ChangePassword(self, username: str, oldPassword: str, newPassword: str) -> bool: ...
    def ChangePasswordQuestionAndAnswer(self, username: str, password: str, newPasswordQuestion: str, newPasswordAnswer: str) -> bool: ...
    def CreateUser(self, username: str, password: str, email: str, passwordQuestion: str, passwordAnswer: str, isApproved: bool, providerUserKey: Object) -> Tuple[MembershipUser, MembershipCreateStatus]: ...
    def DeleteUser(self, username: str, deleteAllRelatedData: bool) -> bool: ...
    def FindUsersByEmail(self, emailToMatch: str, pageIndex: int, pageSize: int) -> Tuple[MembershipUserCollection, int]: ...
    def FindUsersByName(self, usernameToMatch: str, pageIndex: int, pageSize: int) -> Tuple[MembershipUserCollection, int]: ...
    @property
    def ApplicationName(self) -> str: ...
    @property
    def EnablePasswordReset(self) -> bool: ...
    @property
    def EnablePasswordRetrieval(self) -> bool: ...
    @property
    def MaxInvalidPasswordAttempts(self) -> int: ...
    @property
    def MinRequiredNonAlphanumericCharacters(self) -> int: ...
    @property
    def MinRequiredPasswordLength(self) -> int: ...
    @property
    def PasswordAttemptWindow(self) -> int: ...
    @property
    def PasswordFormat(self) -> MembershipPasswordFormat: ...
    @property
    def PasswordStrengthRegularExpression(self) -> str: ...
    @property
    def RequiresQuestionAndAnswer(self) -> bool: ...
    @property
    def RequiresUniqueEmail(self) -> bool: ...
    def GetAllUsers(self, pageIndex: int, pageSize: int) -> Tuple[MembershipUserCollection, int]: ...
    def GetNumberOfUsersOnline(self) -> int: ...
    def GetPassword(self, username: str, answer: str) -> str: ...
    @overload
    def GetUser(self, providerUserKey: Object, userIsOnline: bool) -> MembershipUser: ...
    @overload
    def GetUser(self, username: str, userIsOnline: bool) -> MembershipUser: ...
    def GetUserNameByEmail(self, email: str) -> str: ...
    def Logout(self) -> None: ...
    def ResetPassword(self, username: str, answer: str) -> str: ...
    @ApplicationName.setter
    def ApplicationName(self, value: str) -> None: ...
    def UnlockUser(self, username: str) -> bool: ...
    def UpdateUser(self, user: MembershipUser) -> None: ...
    def ValidateUser(self, username: str, password: str) -> bool: ...


class IClientFormsAuthenticationCredentialsProvider:
    def GetCredentials(self) -> ClientFormsAuthenticationCredentials: ...


class SettingsSavedEventArgs(EventArgs):
    def __init__(self, failedSettingsList: Iterable[str]): ...
    @property
    def FailedSettingsList(self) -> ReadOnlyCollection: ...


class UserValidatedEventArgs(EventArgs):
    def __init__(self, username: str): ...
    @property
    def UserName(self) -> str: ...
