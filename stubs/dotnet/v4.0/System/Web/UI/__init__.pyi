__all__ = ['WebControls']
from typing import Tuple, Set, Iterable, List


class AjaxFrameworkMode:
    Enabled = 0
    Disabled = 1
    Explicit = 2


class AsyncPostBackErrorEventArgs(EventArgs):
    def __init__(self, exception: Exception): ...
    @property
    def Exception(self) -> Exception: ...


class AsyncPostBackTrigger(UpdatePanelControlTrigger):
    def __init__(self): ...
    @property
    def ControlID(self) -> str: ...
    @property
    def EventName(self) -> str: ...
    def OnEvent(self, sender: Object, e: EventArgs) -> None: ...
    @ControlID.setter
    def ControlID(self, value: str) -> None: ...
    @EventName.setter
    def EventName(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class AuthenticationServiceManager(Object):
    def __init__(self): ...
    @property
    def Path(self) -> str: ...
    @Path.setter
    def Path(self, value: str) -> None: ...


class CompositeScriptReference(ScriptReferenceBase):
    def __init__(self): ...
    @property
    def Scripts(self) -> ScriptReferenceCollection: ...


class CompositeScriptReferenceEventArgs(EventArgs):
    def __init__(self, compositeScript: CompositeScriptReference): ...
    @property
    def CompositeScript(self) -> CompositeScriptReference: ...


class ExtenderControl(Control):
    @property
    def TargetControlID(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @TargetControlID.setter
    def TargetControlID(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class HistoryEventArgs(EventArgs):
    def __init__(self, state: NameValueCollection): ...
    @property
    def State(self) -> NameValueCollection: ...


class IExtenderControl:
    def GetScriptDescriptors(self, targetControl: Control) -> Iterable[ScriptDescriptor]: ...
    def GetScriptReferences(self) -> Iterable[ScriptReference]: ...


class IScriptControl:
    def GetScriptDescriptors(self) -> Iterable[ScriptDescriptor]: ...
    def GetScriptReferences(self) -> Iterable[ScriptReference]: ...


class PostBackTrigger(UpdatePanelControlTrigger):
    def __init__(self): ...
    @property
    def ControlID(self) -> str: ...
    @ControlID.setter
    def ControlID(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ProfileServiceManager(Object):
    def __init__(self): ...
    @property
    def LoadProperties(self) -> Set(str): ...
    @property
    def Path(self) -> str: ...
    @LoadProperties.setter
    def LoadProperties(self, value: Set(str)) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...


class RegisteredArrayDeclaration(Object):
    @property
    def Control(self) -> Control: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> str: ...


class RegisteredDisposeScript(Object):
    @property
    def Control(self) -> Control: ...
    @property
    def Script(self) -> str: ...


class RegisteredExpandoAttribute(Object):
    @property
    def Control(self) -> Control: ...
    @property
    def ControlId(self) -> str: ...
    @property
    def Encode(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> str: ...


class RegisteredHiddenField(Object):
    @property
    def Control(self) -> Control: ...
    @property
    def InitialValue(self) -> str: ...
    @property
    def Name(self) -> str: ...


class RegisteredScript(Object):
    @property
    def AddScriptTags(self) -> bool: ...
    @property
    def Control(self) -> Control: ...
    @property
    def Key(self) -> str: ...
    @property
    def Script(self) -> str: ...
    @property
    def ScriptType(self) -> RegisteredScriptType: ...
    @property
    def Type(self) -> Type: ...
    @property
    def Url(self) -> str: ...


class RegisteredScriptType:
    ClientScriptInclude = 0
    ClientScriptBlock = 1
    ClientStartupScript = 2
    OnSubmitStatement = 3


class RoleServiceManager(Object):
    def __init__(self): ...
    @property
    def LoadRoles(self) -> bool: ...
    @property
    def Path(self) -> str: ...
    @LoadRoles.setter
    def LoadRoles(self, value: bool) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...


class ScriptBehaviorDescriptor(ScriptComponentDescriptor):
    def __init__(self, type: str, elementID: str): ...
    @property
    def ClientID(self) -> str: ...
    @property
    def ElementID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class ScriptComponentDescriptor(ScriptDescriptor):
    def __init__(self, type: str): ...
    def AddComponentProperty(self, name: str, componentID: str) -> None: ...
    def AddElementProperty(self, name: str, elementID: str) -> None: ...
    def AddEvent(self, name: str, handler: str) -> None: ...
    def AddProperty(self, name: str, value: Object) -> None: ...
    def AddScriptProperty(self, name: str, script: str) -> None: ...
    @property
    def ClientID(self) -> str: ...
    @property
    def ID(self) -> str: ...
    @property
    def Type(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class ScriptControl(WebControl):
    pass


class ScriptControlDescriptor(ScriptComponentDescriptor):
    def __init__(self, type: str, elementID: str): ...
    @property
    def ClientID(self) -> str: ...
    @property
    def ElementID(self) -> str: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> None: ...


class ScriptDescriptor(Object):
    pass


class ScriptManager(Control):
    def __init__(self): ...
    def add_AsyncPostBackError(self, value: EventHandler) -> None: ...
    def add_Navigate(self, value: EventHandler) -> None: ...
    def add_ResolveCompositeScriptReference(self, value: EventHandler) -> None: ...
    def add_ResolveScriptReference(self, value: EventHandler) -> None: ...
    @overload
    def AddHistoryPoint(self, key: str, value: str) -> None: ...
    @overload
    def AddHistoryPoint(self, state: NameValueCollection, title: str) -> None: ...
    @overload
    def AddHistoryPoint(self, key: str, value: str, title: str) -> None: ...
    @property
    def AjaxFrameworkAssembly(self) -> Assembly: ...
    @property
    def AjaxFrameworkMode(self) -> AjaxFrameworkMode: ...
    @property
    def AllowCustomErrorsRedirect(self) -> bool: ...
    @property
    def AsyncPostBackErrorMessage(self) -> str: ...
    @property
    def AsyncPostBackSourceElementID(self) -> str: ...
    @property
    def AsyncPostBackTimeout(self) -> int: ...
    @property
    def AuthenticationService(self) -> AuthenticationServiceManager: ...
    @property
    def ClientNavigateHandler(self) -> str: ...
    @property
    def CompositeScript(self) -> CompositeScriptReference: ...
    @property
    def EmptyPageUrl(self) -> str: ...
    @property
    def EnableCdn(self) -> bool: ...
    @property
    def EnableCdnFallback(self) -> bool: ...
    @property
    def EnableHistory(self) -> bool: ...
    @property
    def EnablePageMethods(self) -> bool: ...
    @property
    def EnablePartialRendering(self) -> bool: ...
    @property
    def EnableScriptGlobalization(self) -> bool: ...
    @property
    def EnableScriptLocalization(self) -> bool: ...
    @property
    def EnableSecureHistoryState(self) -> bool: ...
    @property
    def IsDebuggingEnabled(self) -> bool: ...
    @property
    def IsInAsyncPostBack(self) -> bool: ...
    @property
    def IsNavigating(self) -> bool: ...
    @property
    def LoadScriptsBeforeUI(self) -> bool: ...
    @property
    def ProfileService(self) -> ProfileServiceManager: ...
    @property
    def RoleService(self) -> RoleServiceManager: ...
    @property
    def ScriptMode(self) -> ScriptMode: ...
    @property
    def ScriptPath(self) -> str: ...
    @property
    def ScriptResourceMapping() -> ScriptResourceMapping: ...
    @property
    def Scripts(self) -> ScriptReferenceCollection: ...
    @property
    def Services(self) -> ServiceReferenceCollection: ...
    @property
    def SupportsPartialRendering(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    def GetCurrent(page: Page) -> ScriptManager: ...
    def GetRegisteredArrayDeclarations(self) -> ReadOnlyCollection: ...
    def GetRegisteredClientScriptBlocks(self) -> ReadOnlyCollection: ...
    def GetRegisteredDisposeScripts(self) -> ReadOnlyCollection: ...
    def GetRegisteredExpandoAttributes(self) -> ReadOnlyCollection: ...
    def GetRegisteredHiddenFields(self) -> ReadOnlyCollection: ...
    def GetRegisteredOnSubmitStatements(self) -> ReadOnlyCollection: ...
    def GetRegisteredStartupScripts(self) -> ReadOnlyCollection: ...
    def GetStateString(self) -> str: ...
    @overload
    def RegisterArrayDeclaration(control: Control, arrayName: str, arrayValue: str) -> None: ...
    @overload
    def RegisterArrayDeclaration(page: Page, arrayName: str, arrayValue: str) -> None: ...
    def RegisterAsyncPostBackControl(self, control: Control) -> None: ...
    @overload
    def RegisterClientScriptBlock(page: Page, type: Type, key: str, script: str, addScriptTags: bool) -> None: ...
    @overload
    def RegisterClientScriptBlock(control: Control, type: Type, key: str, script: str, addScriptTags: bool) -> None: ...
    @overload
    def RegisterClientScriptInclude(control: Control, type: Type, key: str, url: str) -> None: ...
    @overload
    def RegisterClientScriptInclude(page: Page, type: Type, key: str, url: str) -> None: ...
    @overload
    def RegisterClientScriptResource(control: Control, type: Type, resourceName: str) -> None: ...
    @overload
    def RegisterClientScriptResource(page: Page, type: Type, resourceName: str) -> None: ...
    @overload
    def RegisterDataItem(self, control: Control, dataItem: str) -> None: ...
    @overload
    def RegisterDataItem(self, control: Control, dataItem: str, isJsonSerialized: bool) -> None: ...
    def RegisterDispose(self, control: Control, disposeScript: str) -> None: ...
    def RegisterExpandoAttribute(control: Control, controlId: str, attributeName: str, attributeValue: str, encode: bool) -> None: ...
    def RegisterExtenderControl(self, extenderControl: TExtenderControl, targetControl: Control) -> None: ...
    @overload
    def RegisterHiddenField(control: Control, hiddenFieldName: str, hiddenFieldInitialValue: str) -> None: ...
    @overload
    def RegisterHiddenField(page: Page, hiddenFieldName: str, hiddenFieldInitialValue: str) -> None: ...
    @overload
    def RegisterNamedClientScriptResource(page: Page, resourceName: str) -> None: ...
    @overload
    def RegisterNamedClientScriptResource(control: Control, resourceName: str) -> None: ...
    @overload
    def RegisterOnSubmitStatement(page: Page, type: Type, key: str, script: str) -> None: ...
    @overload
    def RegisterOnSubmitStatement(control: Control, type: Type, key: str, script: str) -> None: ...
    def RegisterPostBackControl(self, control: Control) -> None: ...
    def RegisterScriptControl(self, scriptControl: TScriptControl) -> None: ...
    @overload
    def RegisterScriptDescriptors(self, scriptControl: IScriptControl) -> None: ...
    @overload
    def RegisterScriptDescriptors(self, extenderControl: IExtenderControl) -> None: ...
    @overload
    def RegisterStartupScript(page: Page, type: Type, key: str, script: str, addScriptTags: bool) -> None: ...
    @overload
    def RegisterStartupScript(control: Control, type: Type, key: str, script: str, addScriptTags: bool) -> None: ...
    def remove_AsyncPostBackError(self, value: EventHandler) -> None: ...
    def remove_Navigate(self, value: EventHandler) -> None: ...
    def remove_ResolveCompositeScriptReference(self, value: EventHandler) -> None: ...
    def remove_ResolveScriptReference(self, value: EventHandler) -> None: ...
    @AjaxFrameworkMode.setter
    def AjaxFrameworkMode(self, value: AjaxFrameworkMode) -> None: ...
    @AllowCustomErrorsRedirect.setter
    def AllowCustomErrorsRedirect(self, value: bool) -> None: ...
    @AsyncPostBackErrorMessage.setter
    def AsyncPostBackErrorMessage(self, value: str) -> None: ...
    @AsyncPostBackTimeout.setter
    def AsyncPostBackTimeout(self, value: int) -> None: ...
    @ClientNavigateHandler.setter
    def ClientNavigateHandler(self, value: str) -> None: ...
    @EmptyPageUrl.setter
    def EmptyPageUrl(self, value: str) -> None: ...
    @EnableCdn.setter
    def EnableCdn(self, value: bool) -> None: ...
    @EnableCdnFallback.setter
    def EnableCdnFallback(self, value: bool) -> None: ...
    @EnableHistory.setter
    def EnableHistory(self, value: bool) -> None: ...
    @EnablePageMethods.setter
    def EnablePageMethods(self, value: bool) -> None: ...
    @EnablePartialRendering.setter
    def EnablePartialRendering(self, value: bool) -> None: ...
    @EnableScriptGlobalization.setter
    def EnableScriptGlobalization(self, value: bool) -> None: ...
    @EnableScriptLocalization.setter
    def EnableScriptLocalization(self, value: bool) -> None: ...
    @EnableSecureHistoryState.setter
    def EnableSecureHistoryState(self, value: bool) -> None: ...
    @LoadScriptsBeforeUI.setter
    def LoadScriptsBeforeUI(self, value: bool) -> None: ...
    @ScriptMode.setter
    def ScriptMode(self, value: ScriptMode) -> None: ...
    @ScriptPath.setter
    def ScriptPath(self, value: str) -> None: ...
    @SupportsPartialRendering.setter
    def SupportsPartialRendering(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @overload
    def SetFocus(self, control: Control) -> None: ...
    @overload
    def SetFocus(self, clientID: str) -> None: ...


class ScriptManagerProxy(Control):
    def __init__(self): ...
    def add_Navigate(self, value: EventHandler) -> None: ...
    @property
    def AuthenticationService(self) -> AuthenticationServiceManager: ...
    @property
    def CompositeScript(self) -> CompositeScriptReference: ...
    @property
    def ProfileService(self) -> ProfileServiceManager: ...
    @property
    def RoleService(self) -> RoleServiceManager: ...
    @property
    def Scripts(self) -> ScriptReferenceCollection: ...
    @property
    def Services(self) -> ServiceReferenceCollection: ...
    @property
    def Visible(self) -> bool: ...
    def remove_Navigate(self, value: EventHandler) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class ScriptMode:
    Auto = 0
    Inherit = 1
    Debug = 2
    Release = 3


class ScriptReference(ScriptReferenceBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, name: str, assembly: str): ...
    @property
    def Assembly(self) -> str: ...
    @property
    def IgnoreScriptPath(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Assembly.setter
    def Assembly(self, value: str) -> None: ...
    @IgnoreScriptPath.setter
    def IgnoreScriptPath(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ScriptReferenceBase(Object):
    @property
    def NotifyScriptLoaded(self) -> bool: ...
    @property
    def Path(self) -> str: ...
    @property
    def ResourceUICultures(self) -> Set(str): ...
    @property
    def ScriptMode(self) -> ScriptMode: ...
    @NotifyScriptLoaded.setter
    def NotifyScriptLoaded(self, value: bool) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @ResourceUICultures.setter
    def ResourceUICultures(self, value: Set(str)) -> None: ...
    @ScriptMode.setter
    def ScriptMode(self, value: ScriptMode) -> None: ...


class ScriptReferenceCollection:
    def __init__(self): ...


class ScriptReferenceEventArgs(EventArgs):
    def __init__(self, script: ScriptReference): ...
    @property
    def Script(self) -> ScriptReference: ...


class ScriptResourceAttribute(Attribute):
    @overload
    def __init__(self, scriptName: str): ...
    @overload
    def __init__(self, scriptName: str, stringResourceName: str, stringResourceClientTypeName: str): ...
    @property
    def ScriptName(self) -> str: ...
    @property
    def ScriptResourceName(self) -> str: ...
    @property
    def StringResourceClientTypeName(self) -> str: ...
    @property
    def StringResourceName(self) -> str: ...
    @property
    def TypeName(self) -> str: ...


class ScriptResourceDefinition(Object):
    def __init__(self): ...
    @property
    def CdnDebugPath(self) -> str: ...
    @property
    def CdnPath(self) -> str: ...
    @property
    def CdnSupportsSecureConnection(self) -> bool: ...
    @property
    def DebugPath(self) -> str: ...
    @property
    def LoadSuccessExpression(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def ResourceAssembly(self) -> Assembly: ...
    @property
    def ResourceName(self) -> str: ...
    @CdnDebugPath.setter
    def CdnDebugPath(self, value: str) -> None: ...
    @CdnPath.setter
    def CdnPath(self, value: str) -> None: ...
    @CdnSupportsSecureConnection.setter
    def CdnSupportsSecureConnection(self, value: bool) -> None: ...
    @DebugPath.setter
    def DebugPath(self, value: str) -> None: ...
    @LoadSuccessExpression.setter
    def LoadSuccessExpression(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @ResourceAssembly.setter
    def ResourceAssembly(self, value: Assembly) -> None: ...
    @ResourceName.setter
    def ResourceName(self, value: str) -> None: ...


class ScriptResourceMapping(Object):
    def __init__(self): ...
    @overload
    def AddDefinition(self, name: str, definition: ScriptResourceDefinition) -> None: ...
    @overload
    def AddDefinition(self, name: str, assembly: Assembly, definition: ScriptResourceDefinition) -> None: ...
    def Clear(self) -> None: ...
    @overload
    def GetDefinition(self, name: str) -> ScriptResourceDefinition: ...
    @overload
    def GetDefinition(self, scriptReference: ScriptReference) -> ScriptResourceDefinition: ...
    @overload
    def GetDefinition(self, name: str, assembly: Assembly) -> ScriptResourceDefinition: ...
    @overload
    def RemoveDefinition(self, name: str) -> ScriptResourceDefinition: ...
    @overload
    def RemoveDefinition(self, name: str, assembly: Assembly) -> ScriptResourceDefinition: ...


class ServiceReference(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @property
    def InlineScript(self) -> bool: ...
    @property
    def Path(self) -> str: ...
    @InlineScript.setter
    def InlineScript(self, value: bool) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ServiceReferenceCollection:
    def __init__(self): ...


class TargetControlTypeAttribute(Attribute):
    def __init__(self, targetControlType: Type): ...
    @property
    def TargetControlType(self) -> Type: ...
    @property
    def TypeId(self) -> Object: ...


class Timer(Control):
    def __init__(self): ...
    def add_Tick(self, value: EventHandler) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Interval(self) -> int: ...
    @property
    def Visible(self) -> bool: ...
    def remove_Tick(self, value: EventHandler) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Interval.setter
    def Interval(self, value: int) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class UpdatePanel(Control):
    def __init__(self): ...
    @property
    def Attributes(self) -> AttributeCollection: ...
    @property
    def ChildrenAsTriggers(self) -> bool: ...
    @property
    def ContentTemplate(self) -> ITemplate: ...
    @property
    def ContentTemplateContainer(self) -> Control: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def IsInPartialRendering(self) -> bool: ...
    @property
    def RenderMode(self) -> UpdatePanelRenderMode: ...
    @property
    def Triggers(self) -> UpdatePanelTriggerCollection: ...
    @property
    def UpdateMode(self) -> UpdatePanelUpdateMode: ...
    @ChildrenAsTriggers.setter
    def ChildrenAsTriggers(self, value: bool) -> None: ...
    @ContentTemplate.setter
    def ContentTemplate(self, value: ITemplate) -> None: ...
    @RenderMode.setter
    def RenderMode(self, value: UpdatePanelRenderMode) -> None: ...
    @UpdateMode.setter
    def UpdateMode(self, value: UpdatePanelUpdateMode) -> None: ...
    def Update(self) -> None: ...


class UpdatePanelControlTrigger(UpdatePanelTrigger):
    @property
    def ControlID(self) -> str: ...
    @ControlID.setter
    def ControlID(self, value: str) -> None: ...


class UpdatePanelRenderMode:
    Block = 0
    Inline = 1


class UpdatePanelTrigger(Object):
    @property
    def Owner(self) -> UpdatePanel: ...


class UpdatePanelTriggerCollection:
    def __init__(self, owner: UpdatePanel): ...
    @property
    def Owner(self) -> UpdatePanel: ...


class UpdatePanelUpdateMode:
    Always = 0
    Conditional = 1


class UpdateProgress(Control):
    def __init__(self): ...
    def DataBind(self) -> None: ...
    @property
    def AssociatedUpdatePanelID(self) -> str: ...
    @property
    def Attributes(self) -> AttributeCollection: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def DisplayAfter(self) -> int: ...
    @property
    def DynamicLayout(self) -> bool: ...
    @property
    def ProgressTemplate(self) -> ITemplate: ...
    @AssociatedUpdatePanelID.setter
    def AssociatedUpdatePanelID(self, value: str) -> None: ...
    @DisplayAfter.setter
    def DisplayAfter(self, value: int) -> None: ...
    @DynamicLayout.setter
    def DynamicLayout(self, value: bool) -> None: ...
    @ProgressTemplate.setter
    def ProgressTemplate(self, value: ITemplate) -> None: ...
