__all__ = ['Expressions']
from typing import Tuple, Set, Iterable, List


class ContextDataSource(QueryableDataSource):
    @property
    def ContextTypeName(self) -> str: ...
    @property
    def EntityTypeName(self) -> str: ...
    @ContextTypeName.setter
    def ContextTypeName(self, value: str) -> None: ...
    @EntityTypeName.setter
    def EntityTypeName(self, value: str) -> None: ...


class ContextDataSourceContextData(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: Object): ...
    @property
    def Context(self) -> Object: ...
    @property
    def EntitySet(self) -> Object: ...
    @Context.setter
    def Context(self, value: Object) -> None: ...
    @EntitySet.setter
    def EntitySet(self, value: Object) -> None: ...


class ContextDataSourceView(QueryableDataSourceView):
    @property
    def ContextType(self) -> Type: ...
    @property
    def ContextTypeName(self) -> str: ...
    @property
    def EntitySetName(self) -> str: ...
    @property
    def EntityTypeName(self) -> str: ...
    @ContextTypeName.setter
    def ContextTypeName(self, value: str) -> None: ...
    @EntitySetName.setter
    def EntitySetName(self, value: str) -> None: ...
    @EntityTypeName.setter
    def EntityTypeName(self, value: str) -> None: ...


class DataPager(Control):
    def __init__(self): ...
    def DataBind(self) -> None: ...
    @property
    def Attributes(self) -> AttributeCollection: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Fields(self) -> DataPagerFieldCollection: ...
    @property
    def MaximumRows(self) -> int: ...
    @property
    def PagedControlID(self) -> str: ...
    @property
    def PageSize(self) -> int: ...
    @property
    def QueryStringField(self) -> str: ...
    @property
    def StartRowIndex(self) -> int: ...
    @property
    def TotalRowCount(self) -> int: ...
    def RenderBeginTag(self, writer: HtmlTextWriter) -> None: ...
    @PagedControlID.setter
    def PagedControlID(self, value: str) -> None: ...
    @PageSize.setter
    def PageSize(self, value: int) -> None: ...
    @QueryStringField.setter
    def QueryStringField(self, value: str) -> None: ...
    def SetPageProperties(self, startRowIndex: int, maximumRows: int, databind: bool) -> None: ...


class DataPagerCommandEventArgs(CommandEventArgs):
    def __init__(self, pagerField: DataPagerField, totalRowCount: int, originalArgs: CommandEventArgs, item: DataPagerFieldItem): ...
    @property
    def Item(self) -> DataPagerFieldItem: ...
    @property
    def NewMaximumRows(self) -> int: ...
    @property
    def NewStartRowIndex(self) -> int: ...
    @property
    def PagerField(self) -> DataPagerField: ...
    @property
    def TotalRowCount(self) -> int: ...
    @NewMaximumRows.setter
    def NewMaximumRows(self, value: int) -> None: ...
    @NewStartRowIndex.setter
    def NewStartRowIndex(self, value: int) -> None: ...


class DataPagerField(Object):
    def CreateDataPagers(self, container: DataPagerFieldItem, startRowIndex: int, maximumRows: int, totalRowCount: int, fieldIndex: int) -> None: ...
    @property
    def Visible(self) -> bool: ...
    def HandleEvent(self, e: CommandEventArgs) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class DataPagerFieldCollection(StateManagedCollection):
    def __init__(self, dataPager: DataPager): ...
    def add_FieldsChanged(self, value: EventHandler) -> None: ...
    def Add(self, field: DataPagerField) -> None: ...
    def CloneFields(self, pager: DataPager) -> DataPagerFieldCollection: ...
    def Contains(self, field: DataPagerField) -> bool: ...
    @overload
    def CopyTo(self, array: Set(DataPagerField), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DataPagerField: ...
    def IndexOf(self, field: DataPagerField) -> int: ...
    def Insert(self, index: int, field: DataPagerField) -> None: ...
    def remove_FieldsChanged(self, value: EventHandler) -> None: ...
    def Remove(self, field: DataPagerField) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class DataPagerFieldCommandEventArgs(CommandEventArgs):
    def __init__(self, item: DataPagerFieldItem, commandSource: Object, originalArgs: CommandEventArgs): ...
    @property
    def CommandSource(self) -> Object: ...
    @property
    def Item(self) -> DataPagerFieldItem: ...


class DataPagerFieldItem(Control):
    def __init__(self, field: DataPagerField, pager: DataPager): ...
    @property
    def Pager(self) -> DataPager: ...
    @property
    def PagerField(self) -> DataPagerField: ...


class InsertItemPosition:
    #None = 0
    FirstItem = 1
    LastItem = 2


class IPageableItemContainer:
    def add_TotalRowCountAvailable(self, value: EventHandler) -> None: ...
    @property
    def MaximumRows(self) -> int: ...
    @property
    def StartRowIndex(self) -> int: ...
    def remove_TotalRowCountAvailable(self, value: EventHandler) -> None: ...
    def SetPageProperties(self, startRowIndex: int, maximumRows: int, databind: bool) -> None: ...


class IQueryableDataSource:
    def add_QueryCreated(self, value: EventHandler) -> None: ...
    def RaiseViewChanged(self) -> None: ...
    def remove_QueryCreated(self, value: EventHandler) -> None: ...


class LinqDataSource(ContextDataSource):
    def __init__(self): ...
    def add_ContextCreated(self, value: EventHandler) -> None: ...
    def add_ContextCreating(self, value: EventHandler) -> None: ...
    def add_ContextDisposing(self, value: EventHandler) -> None: ...
    def add_Deleted(self, value: EventHandler) -> None: ...
    def add_Deleting(self, value: EventHandler) -> None: ...
    def add_Inserted(self, value: EventHandler) -> None: ...
    def add_Inserting(self, value: EventHandler) -> None: ...
    def add_Selected(self, value: EventHandler) -> None: ...
    def add_Selecting(self, value: EventHandler) -> None: ...
    def add_Updated(self, value: EventHandler) -> None: ...
    def add_Updating(self, value: EventHandler) -> None: ...
    def Delete(self, keys: IDictionary, oldValues: IDictionary) -> int: ...
    @property
    def AutoGenerateOrderByClause(self) -> bool: ...
    @property
    def AutoGenerateWhereClause(self) -> bool: ...
    @property
    def AutoPage(self) -> bool: ...
    @property
    def AutoSort(self) -> bool: ...
    @property
    def ContextTypeName(self) -> str: ...
    @property
    def DeleteParameters(self) -> ParameterCollection: ...
    @property
    def EnableDelete(self) -> bool: ...
    @property
    def EnableInsert(self) -> bool: ...
    @property
    def EnableObjectTracking(self) -> bool: ...
    @property
    def EnableUpdate(self) -> bool: ...
    @property
    def GroupBy(self) -> str: ...
    @property
    def GroupByParameters(self) -> ParameterCollection: ...
    @property
    def InsertParameters(self) -> ParameterCollection: ...
    @property
    def OrderBy(self) -> str: ...
    @property
    def OrderByParameters(self) -> ParameterCollection: ...
    @property
    def OrderGroupsBy(self) -> str: ...
    @property
    def OrderGroupsByParameters(self) -> ParameterCollection: ...
    @property
    def Select(self) -> str: ...
    @property
    def SelectParameters(self) -> ParameterCollection: ...
    @property
    def StoreOriginalValuesInViewState(self) -> bool: ...
    @property
    def TableName(self) -> str: ...
    @property
    def UpdateParameters(self) -> ParameterCollection: ...
    @property
    def Where(self) -> str: ...
    @property
    def WhereParameters(self) -> ParameterCollection: ...
    def Insert(self, values: IDictionary) -> int: ...
    def remove_ContextCreated(self, value: EventHandler) -> None: ...
    def remove_ContextCreating(self, value: EventHandler) -> None: ...
    def remove_ContextDisposing(self, value: EventHandler) -> None: ...
    def remove_Deleted(self, value: EventHandler) -> None: ...
    def remove_Deleting(self, value: EventHandler) -> None: ...
    def remove_Inserted(self, value: EventHandler) -> None: ...
    def remove_Inserting(self, value: EventHandler) -> None: ...
    def remove_Selected(self, value: EventHandler) -> None: ...
    def remove_Selecting(self, value: EventHandler) -> None: ...
    def remove_Updated(self, value: EventHandler) -> None: ...
    def remove_Updating(self, value: EventHandler) -> None: ...
    @AutoGenerateOrderByClause.setter
    def AutoGenerateOrderByClause(self, value: bool) -> None: ...
    @AutoGenerateWhereClause.setter
    def AutoGenerateWhereClause(self, value: bool) -> None: ...
    @AutoPage.setter
    def AutoPage(self, value: bool) -> None: ...
    @AutoSort.setter
    def AutoSort(self, value: bool) -> None: ...
    @ContextTypeName.setter
    def ContextTypeName(self, value: str) -> None: ...
    @EnableDelete.setter
    def EnableDelete(self, value: bool) -> None: ...
    @EnableInsert.setter
    def EnableInsert(self, value: bool) -> None: ...
    @EnableObjectTracking.setter
    def EnableObjectTracking(self, value: bool) -> None: ...
    @EnableUpdate.setter
    def EnableUpdate(self, value: bool) -> None: ...
    @GroupBy.setter
    def GroupBy(self, value: str) -> None: ...
    @OrderBy.setter
    def OrderBy(self, value: str) -> None: ...
    @OrderGroupsBy.setter
    def OrderGroupsBy(self, value: str) -> None: ...
    @Select.setter
    def Select(self, value: str) -> None: ...
    @StoreOriginalValuesInViewState.setter
    def StoreOriginalValuesInViewState(self, value: bool) -> None: ...
    @TableName.setter
    def TableName(self, value: str) -> None: ...
    @Where.setter
    def Where(self, value: str) -> None: ...
    def Update(self, keys: IDictionary, values: IDictionary, oldValues: IDictionary) -> int: ...


class LinqDataSourceContextEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, operation: DataSourceOperation): ...
    @property
    def ObjectInstance(self) -> Object: ...
    @property
    def Operation(self) -> DataSourceOperation: ...
    @ObjectInstance.setter
    def ObjectInstance(self, value: Object) -> None: ...


class LinqDataSourceDeleteEventArgs(CancelEventArgs):
    @overload
    def __init__(self, originalObject: Object): ...
    @overload
    def __init__(self, exception: LinqDataSourceValidationException): ...
    @property
    def Exception(self) -> LinqDataSourceValidationException: ...
    @property
    def ExceptionHandled(self) -> bool: ...
    @property
    def OriginalObject(self) -> Object: ...
    @ExceptionHandled.setter
    def ExceptionHandled(self, value: bool) -> None: ...


class LinqDataSourceDisposeEventArgs(CancelEventArgs):
    def __init__(self, instance: Object): ...
    @property
    def ObjectInstance(self) -> Object: ...


class LinqDataSourceInsertEventArgs(CancelEventArgs):
    @overload
    def __init__(self, newObject: Object): ...
    @overload
    def __init__(self, exception: LinqDataSourceValidationException): ...
    @property
    def Exception(self) -> LinqDataSourceValidationException: ...
    @property
    def ExceptionHandled(self) -> bool: ...
    @property
    def NewObject(self) -> Object: ...
    @ExceptionHandled.setter
    def ExceptionHandled(self, value: bool) -> None: ...


class LinqDataSourceSelectEventArgs(CancelEventArgs):
    def __init__(self, arguments: DataSourceSelectArguments, whereParameters: IDictionary, orderByParameters: IOrderedDictionary, groupByParameters: IDictionary, orderGroupsByParameters: IDictionary, selectParameters: IDictionary): ...
    @property
    def Arguments(self) -> DataSourceSelectArguments: ...
    @property
    def GroupByParameters(self) -> IDictionary: ...
    @property
    def OrderByParameters(self) -> IOrderedDictionary: ...
    @property
    def OrderGroupsByParameters(self) -> IDictionary: ...
    @property
    def Result(self) -> Object: ...
    @property
    def SelectParameters(self) -> IDictionary: ...
    @property
    def WhereParameters(self) -> IDictionary: ...
    @Result.setter
    def Result(self, value: Object) -> None: ...


class LinqDataSourceStatusEventArgs(EventArgs):
    @overload
    def __init__(self, result: Object): ...
    @overload
    def __init__(self, exception: Exception): ...
    @overload
    def __init__(self, result: Object, totalRowCount: int): ...
    @property
    def Exception(self) -> Exception: ...
    @property
    def ExceptionHandled(self) -> bool: ...
    @property
    def Result(self) -> Object: ...
    @property
    def TotalRowCount(self) -> int: ...
    @ExceptionHandled.setter
    def ExceptionHandled(self, value: bool) -> None: ...


class LinqDataSourceUpdateEventArgs(CancelEventArgs):
    @overload
    def __init__(self, exception: LinqDataSourceValidationException): ...
    @overload
    def __init__(self, originalObject: Object, newObject: Object): ...
    @property
    def Exception(self) -> LinqDataSourceValidationException: ...
    @property
    def ExceptionHandled(self) -> bool: ...
    @property
    def NewObject(self) -> Object: ...
    @property
    def OriginalObject(self) -> Object: ...
    @ExceptionHandled.setter
    def ExceptionHandled(self, value: bool) -> None: ...


class LinqDataSourceValidationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerExceptions: IDictionary): ...
    @property
    def InnerExceptions(self) -> IDictionary: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class LinqDataSourceView(ContextDataSourceView):
    def __init__(self, owner: LinqDataSource, name: str, context: HttpContext): ...
    def add_ContextCreated(self, value: EventHandler) -> None: ...
    def add_ContextCreating(self, value: EventHandler) -> None: ...
    def add_ContextDisposing(self, value: EventHandler) -> None: ...
    def add_Deleted(self, value: EventHandler) -> None: ...
    def add_Deleting(self, value: EventHandler) -> None: ...
    def add_Inserted(self, value: EventHandler) -> None: ...
    def add_Inserting(self, value: EventHandler) -> None: ...
    def add_Selected(self, value: EventHandler) -> None: ...
    def add_Selecting(self, value: EventHandler) -> None: ...
    def add_Updated(self, value: EventHandler) -> None: ...
    def add_Updating(self, value: EventHandler) -> None: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def CanInsert(self) -> bool: ...
    @property
    def CanPage(self) -> bool: ...
    @property
    def CanRetrieveTotalRowCount(self) -> bool: ...
    @property
    def CanSort(self) -> bool: ...
    @property
    def CanUpdate(self) -> bool: ...
    @property
    def ContextType(self) -> Type: ...
    @property
    def ContextTypeName(self) -> str: ...
    @property
    def EnableDelete(self) -> bool: ...
    @property
    def EnableInsert(self) -> bool: ...
    @property
    def EnableObjectTracking(self) -> bool: ...
    @property
    def EnableUpdate(self) -> bool: ...
    @property
    def StoreOriginalValuesInViewState(self) -> bool: ...
    @property
    def TableName(self) -> str: ...
    def remove_ContextCreated(self, value: EventHandler) -> None: ...
    def remove_ContextCreating(self, value: EventHandler) -> None: ...
    def remove_ContextDisposing(self, value: EventHandler) -> None: ...
    def remove_Deleted(self, value: EventHandler) -> None: ...
    def remove_Deleting(self, value: EventHandler) -> None: ...
    def remove_Inserted(self, value: EventHandler) -> None: ...
    def remove_Inserting(self, value: EventHandler) -> None: ...
    def remove_Selected(self, value: EventHandler) -> None: ...
    def remove_Selecting(self, value: EventHandler) -> None: ...
    def remove_Updated(self, value: EventHandler) -> None: ...
    def remove_Updating(self, value: EventHandler) -> None: ...
    @overload
    def Select(self, arguments: DataSourceSelectArguments) -> IEnumerable: ...
    @ContextTypeName.setter
    def ContextTypeName(self, value: str) -> None: ...
    @EnableDelete.setter
    def EnableDelete(self, value: bool) -> None: ...
    @EnableInsert.setter
    def EnableInsert(self, value: bool) -> None: ...
    @EnableObjectTracking.setter
    def EnableObjectTracking(self, value: bool) -> None: ...
    @EnableUpdate.setter
    def EnableUpdate(self, value: bool) -> None: ...
    @StoreOriginalValuesInViewState.setter
    def StoreOriginalValuesInViewState(self, value: bool) -> None: ...
    @TableName.setter
    def TableName(self, value: str) -> None: ...


class ListView(DataBoundControl):
    def __init__(self): ...
    def add_ItemCanceling(self, value: EventHandler) -> None: ...
    def add_ItemCommand(self, value: EventHandler) -> None: ...
    def add_ItemCreated(self, value: EventHandler) -> None: ...
    def add_ItemDataBound(self, value: EventHandler) -> None: ...
    def add_ItemDeleted(self, value: EventHandler) -> None: ...
    def add_ItemDeleting(self, value: EventHandler) -> None: ...
    def add_ItemEditing(self, value: EventHandler) -> None: ...
    def add_ItemInserted(self, value: EventHandler) -> None: ...
    def add_ItemInserting(self, value: EventHandler) -> None: ...
    def add_ItemUpdated(self, value: EventHandler) -> None: ...
    def add_ItemUpdating(self, value: EventHandler) -> None: ...
    def add_LayoutCreated(self, value: EventHandler) -> None: ...
    def add_PagePropertiesChanged(self, value: EventHandler) -> None: ...
    def add_PagePropertiesChanging(self, value: EventHandler) -> None: ...
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def add_SelectedIndexChanging(self, value: EventHandler) -> None: ...
    def add_Sorted(self, value: EventHandler) -> None: ...
    def add_Sorting(self, value: EventHandler) -> None: ...
    def DeleteItem(self, itemIndex: int) -> None: ...
    def ExtractItemValues(self, itemValues: IOrderedDictionary, item: ListViewItem, includePrimaryKey: bool) -> None: ...
    @property
    def AccessKey(self) -> str: ...
    @property
    def AlternatingItemTemplate(self) -> ITemplate: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BorderColor(self) -> Color: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def BorderWidth(self) -> Unit: ...
    @property
    def ClientIDRowSuffix(self) -> Set(str): ...
    @property
    def ClientIDRowSuffixDataKeys(self) -> DataKeyArray: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def ConvertEmptyStringToNull(self) -> bool: ...
    @property
    def CssClass(self) -> str: ...
    @property
    def DataKeyNames(self) -> Set(str): ...
    @property
    def DataKeys(self) -> DataKeyArray: ...
    @property
    def DeleteMethod(self) -> str: ...
    @property
    def EditIndex(self) -> int: ...
    @property
    def EditItem(self) -> ListViewItem: ...
    @property
    def EditItemTemplate(self) -> ITemplate: ...
    @property
    def EmptyDataTemplate(self) -> ITemplate: ...
    @property
    def EmptyItemTemplate(self) -> ITemplate: ...
    @property
    def EnableModelValidation(self) -> bool: ...
    @property
    def EnablePersistedSelection(self) -> bool: ...
    @property
    def Font(self) -> FontInfo: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def GroupItemCount(self) -> int: ...
    @property
    def GroupPlaceholderID(self) -> str: ...
    @property
    def GroupSeparatorTemplate(self) -> ITemplate: ...
    @property
    def GroupTemplate(self) -> ITemplate: ...
    @property
    def Height(self) -> Unit: ...
    @property
    def InsertItem(self) -> ListViewItem: ...
    @property
    def InsertItemPosition(self) -> InsertItemPosition: ...
    @property
    def InsertItemTemplate(self) -> ITemplate: ...
    @property
    def InsertMethod(self) -> str: ...
    @property
    def ItemPlaceholderID(self) -> str: ...
    @property
    def Items(self) -> List[ListViewDataItem]: ...
    @property
    def ItemSeparatorTemplate(self) -> ITemplate: ...
    @property
    def ItemTemplate(self) -> ITemplate: ...
    @property
    def LayoutTemplate(self) -> ITemplate: ...
    @property
    def SelectedDataKey(self) -> DataKey: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedItemTemplate(self) -> ITemplate: ...
    @property
    def SelectedPersistedDataKey(self) -> DataKey: ...
    @property
    def SelectedValue(self) -> Object: ...
    @property
    def SortDirection(self) -> SortDirection: ...
    @property
    def SortExpression(self) -> str: ...
    @property
    def TabIndex(self) -> Int16: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def UpdateMethod(self) -> str: ...
    @property
    def Width(self) -> Unit: ...
    def InsertNewItem(self, causesValidation: bool) -> None: ...
    def remove_ItemCanceling(self, value: EventHandler) -> None: ...
    def remove_ItemCommand(self, value: EventHandler) -> None: ...
    def remove_ItemCreated(self, value: EventHandler) -> None: ...
    def remove_ItemDataBound(self, value: EventHandler) -> None: ...
    def remove_ItemDeleted(self, value: EventHandler) -> None: ...
    def remove_ItemDeleting(self, value: EventHandler) -> None: ...
    def remove_ItemEditing(self, value: EventHandler) -> None: ...
    def remove_ItemInserted(self, value: EventHandler) -> None: ...
    def remove_ItemInserting(self, value: EventHandler) -> None: ...
    def remove_ItemUpdated(self, value: EventHandler) -> None: ...
    def remove_ItemUpdating(self, value: EventHandler) -> None: ...
    def remove_LayoutCreated(self, value: EventHandler) -> None: ...
    def remove_PagePropertiesChanged(self, value: EventHandler) -> None: ...
    def remove_PagePropertiesChanging(self, value: EventHandler) -> None: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedIndexChanging(self, value: EventHandler) -> None: ...
    def remove_Sorted(self, value: EventHandler) -> None: ...
    def remove_Sorting(self, value: EventHandler) -> None: ...
    def SelectItem(self, rowIndex: int) -> None: ...
    @AccessKey.setter
    def AccessKey(self, value: str) -> None: ...
    @AlternatingItemTemplate.setter
    def AlternatingItemTemplate(self, value: ITemplate) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BorderColor.setter
    def BorderColor(self, value: Color) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @BorderWidth.setter
    def BorderWidth(self, value: Unit) -> None: ...
    @ClientIDRowSuffix.setter
    def ClientIDRowSuffix(self, value: Set(str)) -> None: ...
    @ConvertEmptyStringToNull.setter
    def ConvertEmptyStringToNull(self, value: bool) -> None: ...
    @CssClass.setter
    def CssClass(self, value: str) -> None: ...
    @DataKeyNames.setter
    def DataKeyNames(self, value: Set(str)) -> None: ...
    @DeleteMethod.setter
    def DeleteMethod(self, value: str) -> None: ...
    @EditIndex.setter
    def EditIndex(self, value: int) -> None: ...
    @EditItemTemplate.setter
    def EditItemTemplate(self, value: ITemplate) -> None: ...
    @EmptyDataTemplate.setter
    def EmptyDataTemplate(self, value: ITemplate) -> None: ...
    @EmptyItemTemplate.setter
    def EmptyItemTemplate(self, value: ITemplate) -> None: ...
    @EnableModelValidation.setter
    def EnableModelValidation(self, value: bool) -> None: ...
    @EnablePersistedSelection.setter
    def EnablePersistedSelection(self, value: bool) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @GroupItemCount.setter
    def GroupItemCount(self, value: int) -> None: ...
    @GroupPlaceholderID.setter
    def GroupPlaceholderID(self, value: str) -> None: ...
    @GroupSeparatorTemplate.setter
    def GroupSeparatorTemplate(self, value: ITemplate) -> None: ...
    @GroupTemplate.setter
    def GroupTemplate(self, value: ITemplate) -> None: ...
    @Height.setter
    def Height(self, value: Unit) -> None: ...
    @InsertItemPosition.setter
    def InsertItemPosition(self, value: InsertItemPosition) -> None: ...
    @InsertItemTemplate.setter
    def InsertItemTemplate(self, value: ITemplate) -> None: ...
    @InsertMethod.setter
    def InsertMethod(self, value: str) -> None: ...
    @ItemPlaceholderID.setter
    def ItemPlaceholderID(self, value: str) -> None: ...
    @ItemSeparatorTemplate.setter
    def ItemSeparatorTemplate(self, value: ITemplate) -> None: ...
    @ItemTemplate.setter
    def ItemTemplate(self, value: ITemplate) -> None: ...
    @LayoutTemplate.setter
    def LayoutTemplate(self, value: ITemplate) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedItemTemplate.setter
    def SelectedItemTemplate(self, value: ITemplate) -> None: ...
    @SelectedPersistedDataKey.setter
    def SelectedPersistedDataKey(self, value: DataKey) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: Int16) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @UpdateMethod.setter
    def UpdateMethod(self, value: str) -> None: ...
    @Width.setter
    def Width(self, value: Unit) -> None: ...
    def SetEditItem(self, rowIndex: int) -> None: ...
    def Sort(self, sortExpression: str, sortDirection: SortDirection) -> None: ...
    def UpdateItem(self, itemIndex: int, causesValidation: bool) -> None: ...


class ListViewCancelEventArgs(CancelEventArgs):
    def __init__(self, itemIndex: int, cancelMode: ListViewCancelMode): ...
    @property
    def CancelMode(self) -> ListViewCancelMode: ...
    @property
    def ItemIndex(self) -> int: ...


class ListViewCancelMode:
    CancelingEdit = 0
    CancelingInsert = 1


class ListViewCommandEventArgs(CommandEventArgs):
    def __init__(self, item: ListViewItem, commandSource: Object, originalArgs: CommandEventArgs): ...
    @property
    def CommandSource(self) -> Object: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def Item(self) -> ListViewItem: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class ListViewDataItem(ListViewItem):
    def __init__(self, dataItemIndex: int, displayIndex: int): ...
    @property
    def DataItem(self) -> Object: ...
    @property
    def DataItemIndex(self) -> int: ...
    @property
    def DisplayIndex(self) -> int: ...
    @DataItem.setter
    def DataItem(self, value: Object) -> None: ...


class ListViewDeletedEventArgs(EventArgs):
    def __init__(self, affectedRows: int, exception: Exception): ...
    @property
    def AffectedRows(self) -> int: ...
    @property
    def Exception(self) -> Exception: ...
    @property
    def ExceptionHandled(self) -> bool: ...
    @property
    def Keys(self) -> IOrderedDictionary: ...
    @property
    def Values(self) -> IOrderedDictionary: ...
    @ExceptionHandled.setter
    def ExceptionHandled(self, value: bool) -> None: ...


class ListViewDeleteEventArgs(CancelEventArgs):
    def __init__(self, itemIndex: int): ...
    @property
    def ItemIndex(self) -> int: ...
    @property
    def Keys(self) -> IOrderedDictionary: ...
    @property
    def Values(self) -> IOrderedDictionary: ...


class ListViewEditEventArgs(CancelEventArgs):
    def __init__(self, newEditIndex: int): ...
    @property
    def NewEditIndex(self) -> int: ...


class ListViewInsertedEventArgs(EventArgs):
    def __init__(self, affectedRows: int, exception: Exception): ...
    @property
    def AffectedRows(self) -> int: ...
    @property
    def Exception(self) -> Exception: ...
    @property
    def ExceptionHandled(self) -> bool: ...
    @property
    def KeepInInsertMode(self) -> bool: ...
    @property
    def Values(self) -> IOrderedDictionary: ...
    @ExceptionHandled.setter
    def ExceptionHandled(self, value: bool) -> None: ...
    @KeepInInsertMode.setter
    def KeepInInsertMode(self, value: bool) -> None: ...


class ListViewInsertEventArgs(CancelEventArgs):
    def __init__(self, item: ListViewItem): ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def Values(self) -> IOrderedDictionary: ...


class ListViewItem(Control):
    def __init__(self, itemType: ListViewItemType): ...
    @property
    def DataItem(self) -> Object: ...
    @property
    def DataItemIndex(self) -> int: ...
    @property
    def DisplayIndex(self) -> int: ...
    @property
    def ItemType(self) -> ListViewItemType: ...
    @DataItem.setter
    def DataItem(self, value: Object) -> None: ...


class ListViewItemEventArgs(EventArgs):
    def __init__(self, item: ListViewItem): ...
    @property
    def Item(self) -> ListViewItem: ...


class ListViewItemType:
    DataItem = 0
    InsertItem = 1
    EmptyItem = 2


class ListViewPagedDataSource(Object):
    def __init__(self): ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def AllowServerPaging(self) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def DataSource(self) -> IEnumerable: ...
    @property
    def DataSourceCount(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsServerPagingEnabled(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def MaximumRows(self) -> int: ...
    @property
    def StartRowIndex(self) -> int: ...
    @property
    def SyncRoot(self) -> Object: ...
    @property
    def TotalRowCount(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetItemProperties(self, listAccessors: Set(PropertyDescriptor)) -> PropertyDescriptorCollection: ...
    def GetListName(self, listAccessors: Set(PropertyDescriptor)) -> str: ...
    @AllowServerPaging.setter
    def AllowServerPaging(self, value: bool) -> None: ...
    @DataSource.setter
    def DataSource(self, value: IEnumerable) -> None: ...
    @MaximumRows.setter
    def MaximumRows(self, value: int) -> None: ...
    @StartRowIndex.setter
    def StartRowIndex(self, value: int) -> None: ...
    @TotalRowCount.setter
    def TotalRowCount(self, value: int) -> None: ...


class ListViewSelectEventArgs(CancelEventArgs):
    def __init__(self, newSelectedIndex: int): ...
    @property
    def NewSelectedIndex(self) -> int: ...
    @NewSelectedIndex.setter
    def NewSelectedIndex(self, value: int) -> None: ...


class ListViewSortEventArgs(CancelEventArgs):
    def __init__(self, sortExpression: str, sortDirection: SortDirection): ...
    @property
    def SortDirection(self) -> SortDirection: ...
    @property
    def SortExpression(self) -> str: ...
    @SortDirection.setter
    def SortDirection(self, value: SortDirection) -> None: ...
    @SortExpression.setter
    def SortExpression(self, value: str) -> None: ...


class ListViewUpdatedEventArgs(EventArgs):
    def __init__(self, affectedRows: int, exception: Exception): ...
    @property
    def AffectedRows(self) -> int: ...
    @property
    def Exception(self) -> Exception: ...
    @property
    def ExceptionHandled(self) -> bool: ...
    @property
    def KeepInEditMode(self) -> bool: ...
    @property
    def NewValues(self) -> IOrderedDictionary: ...
    @property
    def OldValues(self) -> IOrderedDictionary: ...
    @ExceptionHandled.setter
    def ExceptionHandled(self, value: bool) -> None: ...
    @KeepInEditMode.setter
    def KeepInEditMode(self, value: bool) -> None: ...


class ListViewUpdateEventArgs(CancelEventArgs):
    def __init__(self, itemIndex: int): ...
    @property
    def ItemIndex(self) -> int: ...
    @property
    def Keys(self) -> IOrderedDictionary: ...
    @property
    def NewValues(self) -> IOrderedDictionary: ...
    @property
    def OldValues(self) -> IOrderedDictionary: ...


class NextPreviousPagerField(DataPagerField):
    def __init__(self): ...
    def CreateDataPagers(self, container: DataPagerFieldItem, startRowIndex: int, maximumRows: int, totalRowCount: int, fieldIndex: int) -> None: ...
    def Equals(self, o: Object) -> bool: ...
    @property
    def ButtonCssClass(self) -> str: ...
    @property
    def ButtonType(self) -> ButtonType: ...
    @property
    def FirstPageImageUrl(self) -> str: ...
    @property
    def FirstPageText(self) -> str: ...
    @property
    def LastPageImageUrl(self) -> str: ...
    @property
    def LastPageText(self) -> str: ...
    @property
    def NextPageImageUrl(self) -> str: ...
    @property
    def NextPageText(self) -> str: ...
    @property
    def PreviousPageImageUrl(self) -> str: ...
    @property
    def PreviousPageText(self) -> str: ...
    @property
    def RenderDisabledButtonsAsLabels(self) -> bool: ...
    @property
    def RenderNonBreakingSpacesBetweenControls(self) -> bool: ...
    @property
    def ShowFirstPageButton(self) -> bool: ...
    @property
    def ShowLastPageButton(self) -> bool: ...
    @property
    def ShowNextPageButton(self) -> bool: ...
    @property
    def ShowPreviousPageButton(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def HandleEvent(self, e: CommandEventArgs) -> None: ...
    @ButtonCssClass.setter
    def ButtonCssClass(self, value: str) -> None: ...
    @ButtonType.setter
    def ButtonType(self, value: ButtonType) -> None: ...
    @FirstPageImageUrl.setter
    def FirstPageImageUrl(self, value: str) -> None: ...
    @FirstPageText.setter
    def FirstPageText(self, value: str) -> None: ...
    @LastPageImageUrl.setter
    def LastPageImageUrl(self, value: str) -> None: ...
    @LastPageText.setter
    def LastPageText(self, value: str) -> None: ...
    @NextPageImageUrl.setter
    def NextPageImageUrl(self, value: str) -> None: ...
    @NextPageText.setter
    def NextPageText(self, value: str) -> None: ...
    @PreviousPageImageUrl.setter
    def PreviousPageImageUrl(self, value: str) -> None: ...
    @PreviousPageText.setter
    def PreviousPageText(self, value: str) -> None: ...
    @RenderDisabledButtonsAsLabels.setter
    def RenderDisabledButtonsAsLabels(self, value: bool) -> None: ...
    @RenderNonBreakingSpacesBetweenControls.setter
    def RenderNonBreakingSpacesBetweenControls(self, value: bool) -> None: ...
    @ShowFirstPageButton.setter
    def ShowFirstPageButton(self, value: bool) -> None: ...
    @ShowLastPageButton.setter
    def ShowLastPageButton(self, value: bool) -> None: ...
    @ShowNextPageButton.setter
    def ShowNextPageButton(self, value: bool) -> None: ...
    @ShowPreviousPageButton.setter
    def ShowPreviousPageButton(self, value: bool) -> None: ...


class NumericPagerField(DataPagerField):
    def __init__(self): ...
    def CreateDataPagers(self, container: DataPagerFieldItem, startRowIndex: int, maximumRows: int, totalRowCount: int, fieldIndex: int) -> None: ...
    def Equals(self, o: Object) -> bool: ...
    @property
    def ButtonCount(self) -> int: ...
    @property
    def ButtonType(self) -> ButtonType: ...
    @property
    def CurrentPageLabelCssClass(self) -> str: ...
    @property
    def NextPageImageUrl(self) -> str: ...
    @property
    def NextPageText(self) -> str: ...
    @property
    def NextPreviousButtonCssClass(self) -> str: ...
    @property
    def NumericButtonCssClass(self) -> str: ...
    @property
    def PreviousPageImageUrl(self) -> str: ...
    @property
    def PreviousPageText(self) -> str: ...
    @property
    def RenderNonBreakingSpacesBetweenControls(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def HandleEvent(self, e: CommandEventArgs) -> None: ...
    @ButtonCount.setter
    def ButtonCount(self, value: int) -> None: ...
    @ButtonType.setter
    def ButtonType(self, value: ButtonType) -> None: ...
    @CurrentPageLabelCssClass.setter
    def CurrentPageLabelCssClass(self, value: str) -> None: ...
    @NextPageImageUrl.setter
    def NextPageImageUrl(self, value: str) -> None: ...
    @NextPageText.setter
    def NextPageText(self, value: str) -> None: ...
    @NextPreviousButtonCssClass.setter
    def NextPreviousButtonCssClass(self, value: str) -> None: ...
    @NumericButtonCssClass.setter
    def NumericButtonCssClass(self, value: str) -> None: ...
    @PreviousPageImageUrl.setter
    def PreviousPageImageUrl(self, value: str) -> None: ...
    @PreviousPageText.setter
    def PreviousPageText(self, value: str) -> None: ...
    @RenderNonBreakingSpacesBetweenControls.setter
    def RenderNonBreakingSpacesBetweenControls(self, value: bool) -> None: ...


class PageEventArgs(EventArgs):
    def __init__(self, startRowIndex: int, maximumRows: int, totalRowCount: int): ...
    @property
    def MaximumRows(self) -> int: ...
    @property
    def StartRowIndex(self) -> int: ...
    @property
    def TotalRowCount(self) -> int: ...


class PagePropertiesChangingEventArgs(EventArgs):
    def __init__(self, startRowIndex: int, maximumRows: int): ...
    @property
    def MaximumRows(self) -> int: ...
    @property
    def StartRowIndex(self) -> int: ...


class QueryableDataSource(DataSourceControl):
    def add_QueryCreated(self, value: EventHandler) -> None: ...
    def RaiseViewChanged(self) -> None: ...
    def remove_QueryCreated(self, value: EventHandler) -> None: ...


class QueryableDataSourceEditData(Object):
    def __init__(self): ...
    @property
    def NewDataObject(self) -> Object: ...
    @property
    def OriginalDataObject(self) -> Object: ...
    @NewDataObject.setter
    def NewDataObject(self, value: Object) -> None: ...
    @OriginalDataObject.setter
    def OriginalDataObject(self, value: Object) -> None: ...


class QueryableDataSourceView(DataSourceView):
    def add_QueryCreated(self, value: EventHandler) -> None: ...
    @overload
    def Delete(self, keys: IDictionary, oldValues: IDictionary) -> int: ...
    @property
    def AutoGenerateOrderByClause(self) -> bool: ...
    @property
    def AutoGenerateWhereClause(self) -> bool: ...
    @property
    def AutoPage(self) -> bool: ...
    @property
    def AutoSort(self) -> bool: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def CanInsert(self) -> bool: ...
    @property
    def CanPage(self) -> bool: ...
    @property
    def CanRetrieveTotalRowCount(self) -> bool: ...
    @property
    def CanSort(self) -> bool: ...
    @property
    def CanUpdate(self) -> bool: ...
    @property
    def DeleteParameters(self) -> ParameterCollection: ...
    @property
    def GroupBy(self) -> str: ...
    @property
    def GroupByParameters(self) -> ParameterCollection: ...
    @property
    def InsertParameters(self) -> ParameterCollection: ...
    @property
    def OrderBy(self) -> str: ...
    @property
    def OrderByParameters(self) -> ParameterCollection: ...
    @property
    def OrderGroupsBy(self) -> str: ...
    @property
    def OrderGroupsByParameters(self) -> ParameterCollection: ...
    @property
    def SelectNew(self) -> str: ...
    @property
    def SelectNewParameters(self) -> ParameterCollection: ...
    @property
    def UpdateParameters(self) -> ParameterCollection: ...
    @property
    def Where(self) -> str: ...
    @property
    def WhereParameters(self) -> ParameterCollection: ...
    @overload
    def Insert(self, values: IDictionary) -> int: ...
    def RaiseViewChanged(self) -> None: ...
    def remove_QueryCreated(self, value: EventHandler) -> None: ...
    @AutoGenerateOrderByClause.setter
    def AutoGenerateOrderByClause(self, value: bool) -> None: ...
    @AutoGenerateWhereClause.setter
    def AutoGenerateWhereClause(self, value: bool) -> None: ...
    @AutoPage.setter
    def AutoPage(self, value: bool) -> None: ...
    @AutoSort.setter
    def AutoSort(self, value: bool) -> None: ...
    @GroupBy.setter
    def GroupBy(self, value: str) -> None: ...
    @OrderBy.setter
    def OrderBy(self, value: str) -> None: ...
    @OrderGroupsBy.setter
    def OrderGroupsBy(self, value: str) -> None: ...
    @SelectNew.setter
    def SelectNew(self, value: str) -> None: ...
    @Where.setter
    def Where(self, value: str) -> None: ...
    @overload
    def Update(self, keys: IDictionary, values: IDictionary, oldValues: IDictionary) -> int: ...


class QueryContext(Object):
    def __init__(self, whereParameters: IDictionary, orderGroupsByParameters: IDictionary, orderByParameters: IOrderedDictionary, groupByParameters: IDictionary, selectParameters: IDictionary, arguments: DataSourceSelectArguments): ...
    @property
    def Arguments(self) -> DataSourceSelectArguments: ...
    @property
    def GroupByParameters(self) -> IDictionary: ...
    @property
    def OrderByParameters(self) -> IOrderedDictionary: ...
    @property
    def OrderGroupsByParameters(self) -> IDictionary: ...
    @property
    def SelectParameters(self) -> IDictionary: ...
    @property
    def WhereParameters(self) -> IDictionary: ...


class QueryCreatedEventArgs(EventArgs):
    def __init__(self, query: IQueryable): ...
    @property
    def Query(self) -> IQueryable: ...
    @Query.setter
    def Query(self, value: IQueryable) -> None: ...


class QueryExtender(Control):
    def __init__(self): ...
    @property
    def DataSource(self) -> IQueryableDataSource: ...
    @property
    def Expressions(self) -> DataSourceExpressionCollection: ...
    @property
    def TargetControlID(self) -> str: ...
    @TargetControlID.setter
    def TargetControlID(self, value: str) -> None: ...


class TemplatePagerField(DataPagerField):
    def __init__(self): ...
    def add_PagerCommand(self, value: EventHandler) -> None: ...
    def CreateDataPagers(self, container: DataPagerFieldItem, startRowIndex: int, maximumRows: int, totalRowCount: int, fieldIndex: int) -> None: ...
    @property
    def PagerTemplate(self) -> ITemplate: ...
    def HandleEvent(self, e: CommandEventArgs) -> None: ...
    def remove_PagerCommand(self, value: EventHandler) -> None: ...
    @PagerTemplate.setter
    def PagerTemplate(self, value: ITemplate) -> None: ...
