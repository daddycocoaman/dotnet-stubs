from typing import Tuple, Set, Iterable, List


class CustomExpression(ParameterDataSourceExpression):
    def __init__(self): ...
    def add_Querying(self, value: EventHandler) -> None: ...
    def GetQueryable(self, source: IQueryable) -> IQueryable: ...
    def remove_Querying(self, value: EventHandler) -> None: ...


class CustomExpressionEventArgs(EventArgs):
    def __init__(self, source: IQueryable, values: IDictionary): ...
    @property
    def Query(self) -> IQueryable: ...
    @property
    def Values(self) -> IDictionary: ...
    @Query.setter
    def Query(self, value: IQueryable) -> None: ...


class DataSourceExpression(Object):
    @property
    def DataSource(self) -> IQueryableDataSource: ...
    def GetQueryable(self, source: IQueryable) -> IQueryable: ...
    def SetContext(self, owner: Control, context: HttpContext, dataSource: IQueryableDataSource) -> None: ...
    def SetDirty(self) -> None: ...


class DataSourceExpressionCollection(StateManagedCollection):
    def __init__(self): ...
    def Add(self, expression: DataSourceExpression) -> None: ...
    def Contains(self, expression: DataSourceExpression) -> None: ...
    @overload
    def CopyTo(self, expressionArray: Set(DataSourceExpression), index: int) -> None: ...
    @property
    def Context(self) -> HttpContext: ...
    @property
    def Item(self, index: int) -> DataSourceExpression: ...
    @property
    def Owner(self) -> Control: ...
    def IndexOf(self, expression: DataSourceExpression) -> int: ...
    def Insert(self, index: int, expression: DataSourceExpression) -> None: ...
    def Remove(self, expression: DataSourceExpression) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DataSourceExpression) -> None: ...


class MethodExpression(ParameterDataSourceExpression):
    def __init__(self): ...
    @property
    def IgnoreIfNotFound(self) -> bool: ...
    @property
    def MethodName(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def GetQueryable(self, source: IQueryable) -> IQueryable: ...
    @IgnoreIfNotFound.setter
    def IgnoreIfNotFound(self, value: bool) -> None: ...
    @MethodName.setter
    def MethodName(self, value: str) -> None: ...
    @TypeName.setter
    def TypeName(self, value: str) -> None: ...


class OfTypeExpression(DataSourceExpression):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type: Type): ...
    @property
    def TypeName(self) -> str: ...
    def GetQueryable(self, query: IQueryable) -> IQueryable: ...
    @TypeName.setter
    def TypeName(self, value: str) -> None: ...


class OrderByExpression(DataSourceExpression):
    def __init__(self): ...
    @property
    def DataField(self) -> str: ...
    @property
    def Direction(self) -> SortDirection: ...
    @property
    def ThenByExpressions(self) -> Collection: ...
    def GetQueryable(self, source: IQueryable) -> IQueryable: ...
    @DataField.setter
    def DataField(self, value: str) -> None: ...
    @Direction.setter
    def Direction(self, value: SortDirection) -> None: ...


class ParameterDataSourceExpression(DataSourceExpression):
    @property
    def Parameters(self) -> ParameterCollection: ...
    def SetContext(self, owner: Control, context: HttpContext, dataSource: IQueryableDataSource) -> None: ...


class PropertyExpression(ParameterDataSourceExpression):
    def __init__(self): ...
    def GetQueryable(self, source: IQueryable) -> IQueryable: ...


class QueryExpression(Object):
    def __init__(self): ...
    @property
    def Expressions(self) -> DataSourceExpressionCollection: ...
    def GetQueryable(self, source: IQueryable) -> IQueryable: ...
    def Initialize(self, owner: Control, context: HttpContext, dataSource: IQueryableDataSource) -> None: ...


class RangeExpression(ParameterDataSourceExpression):
    def __init__(self): ...
    @property
    def DataField(self) -> str: ...
    @property
    def MaxType(self) -> RangeType: ...
    @property
    def MinType(self) -> RangeType: ...
    def GetQueryable(self, source: IQueryable) -> IQueryable: ...
    @DataField.setter
    def DataField(self, value: str) -> None: ...
    @MaxType.setter
    def MaxType(self, value: RangeType) -> None: ...
    @MinType.setter
    def MinType(self, value: RangeType) -> None: ...


class RangeType:
    #None = 0
    Exclusive = 1
    Inclusive = 2


class SearchExpression(ParameterDataSourceExpression):
    def __init__(self): ...
    @property
    def ComparisonType(self) -> StringComparison: ...
    @property
    def DataFields(self) -> str: ...
    @property
    def SearchType(self) -> SearchType: ...
    def GetQueryable(self, source: IQueryable) -> IQueryable: ...
    @ComparisonType.setter
    def ComparisonType(self, value: StringComparison) -> None: ...
    @DataFields.setter
    def DataFields(self, value: str) -> None: ...
    @SearchType.setter
    def SearchType(self, value: SearchType) -> None: ...


class SearchType:
    Contains = 0
    StartsWith = 1
    EndsWith = 2


class ThenBy(Object):
    def __init__(self): ...
    @property
    def DataField(self) -> str: ...
    @property
    def Direction(self) -> SortDirection: ...
    @DataField.setter
    def DataField(self, value: str) -> None: ...
    @Direction.setter
    def Direction(self, value: SortDirection) -> None: ...
