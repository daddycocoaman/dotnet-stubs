from typing import Tuple, Set, Iterable, List


class DynamicDataSourceOperation:
    Delete = 0
    Insert = 1
    Select = 2
    Update = 3
    ContextCreate = 4


class DynamicValidatorEventArgs(EventArgs):
    def __init__(self, exception: Exception, operation: DynamicDataSourceOperation): ...
    @property
    def Exception(self) -> Exception: ...
    @property
    def Operation(self) -> DynamicDataSourceOperation: ...


class IDynamicDataSource:
    def add_Exception(self, value: EventHandler) -> None: ...
    @property
    def AutoGenerateWhereClause(self) -> bool: ...
    @property
    def ContextType(self) -> Type: ...
    @property
    def EnableDelete(self) -> bool: ...
    @property
    def EnableInsert(self) -> bool: ...
    @property
    def EnableUpdate(self) -> bool: ...
    @property
    def EntitySetName(self) -> str: ...
    @property
    def Where(self) -> str: ...
    @property
    def WhereParameters(self) -> ParameterCollection: ...
    def remove_Exception(self, value: EventHandler) -> None: ...
    @AutoGenerateWhereClause.setter
    def AutoGenerateWhereClause(self, value: bool) -> None: ...
    @ContextType.setter
    def ContextType(self, value: Type) -> None: ...
    @EnableDelete.setter
    def EnableDelete(self, value: bool) -> None: ...
    @EnableInsert.setter
    def EnableInsert(self, value: bool) -> None: ...
    @EnableUpdate.setter
    def EnableUpdate(self, value: bool) -> None: ...
    @EntitySetName.setter
    def EntitySetName(self, value: str) -> None: ...
    @Where.setter
    def Where(self, value: str) -> None: ...


class IDynamicValidatorException:
    @property
    def InnerExceptions(self) -> IDictionary: ...
