from typing import Tuple, Set, Iterable, List


class DataControlReferenceCollectionEditor(CollectionEditor):
    def __init__(self, type: Type): ...


class DataControlReferenceIDConverter(StringConverter):
    def __init__(self): ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class DynamicDataManagerDesigner(ControlDesigner):
    def __init__(self): ...
    @property
    def ActionLists(self) -> DesignerActionListCollection: ...
    @overload
    def GetDesignTimeHtml(self) -> str: ...


class DynamicFieldDesigner(DataControlFieldDesigner):
    def __init__(self): ...
    @overload
    def CreateField(self) -> DataControlField: ...
    @overload
    def CreateField(self, fieldSchema: IDataSourceFieldSchema) -> DataControlField: ...
    def CreateTemplateField(self, dataControlField: DataControlField, dataBoundControl: DataBoundControl) -> TemplateField: ...
    @property
    def DefaultNodeText(self) -> str: ...
    @property
    def UsesSchema(self) -> bool: ...
    def GetNodeText(self, dataControlField: DataControlField) -> str: ...
    def GetTemplateContent(self, dataControlField: DataControlField, mode: DataBoundControlMode) -> str: ...
    def IsEnabled(self, parent: DataBoundControl) -> bool: ...
