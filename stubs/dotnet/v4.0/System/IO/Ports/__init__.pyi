from typing import Tuple, Set, Iterable, List


class Handshake:
    #None = 0
    XOnXOff = 1
    RequestToSend = 2
    RequestToSendXOnXOff = 3


class Parity:
    #None = 0
    Odd = 1
    Even = 2
    Mark = 3
    Space = 4


class SerialData:
    Chars = 1
    Eof = 2


class SerialDataReceivedEventArgs(EventArgs):
    @property
    def EventType(self) -> SerialData: ...


class SerialDataReceivedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: SerialDataReceivedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: SerialDataReceivedEventArgs) -> None: ...


class SerialError:
    RXOver = 1
    Overrun = 2
    RXParity = 4
    Frame = 8
    TXFull = 256


class SerialErrorReceivedEventArgs(EventArgs):
    @property
    def EventType(self) -> SerialError: ...


class SerialErrorReceivedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: SerialErrorReceivedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: SerialErrorReceivedEventArgs) -> None: ...


class SerialPinChange:
    CtsChanged = 8
    DsrChanged = 16
    CDChanged = 32
    Break = 64
    Ring = 256


class SerialPinChangedEventArgs(EventArgs):
    @property
    def EventType(self) -> SerialPinChange: ...


class SerialPinChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: SerialPinChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: SerialPinChangedEventArgs) -> None: ...


class SerialPort(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: IContainer): ...
    @overload
    def __init__(self, portName: str): ...
    @overload
    def __init__(self, portName: str, baudRate: int): ...
    @overload
    def __init__(self, portName: str, baudRate: int, parity: Parity): ...
    @overload
    def __init__(self, portName: str, baudRate: int, parity: Parity, dataBits: int): ...
    @overload
    def __init__(self, portName: str, baudRate: int, parity: Parity, dataBits: int, stopBits: StopBits): ...
    def add_DataReceived(self, value: SerialDataReceivedEventHandler) -> None: ...
    def add_ErrorReceived(self, value: SerialErrorReceivedEventHandler) -> None: ...
    def add_PinChanged(self, value: SerialPinChangedEventHandler) -> None: ...
    def Close(self) -> None: ...
    def DiscardInBuffer(self) -> None: ...
    def DiscardOutBuffer(self) -> None: ...
    @property
    def BaseStream(self) -> Stream: ...
    @property
    def BaudRate(self) -> int: ...
    @property
    def BreakState(self) -> bool: ...
    @property
    def BytesToRead(self) -> int: ...
    @property
    def BytesToWrite(self) -> int: ...
    @property
    def CDHolding(self) -> bool: ...
    @property
    def CtsHolding(self) -> bool: ...
    @property
    def DataBits(self) -> int: ...
    @property
    def DiscardNull(self) -> bool: ...
    @property
    def DsrHolding(self) -> bool: ...
    @property
    def DtrEnable(self) -> bool: ...
    @property
    def Encoding(self) -> Encoding: ...
    @property
    def Handshake(self) -> Handshake: ...
    @property
    def IsOpen(self) -> bool: ...
    @property
    def NewLine(self) -> str: ...
    @property
    def Parity(self) -> Parity: ...
    @property
    def ParityReplace(self) -> Byte: ...
    @property
    def PortName(self) -> str: ...
    @property
    def ReadBufferSize(self) -> int: ...
    @property
    def ReadTimeout(self) -> int: ...
    @property
    def ReceivedBytesThreshold(self) -> int: ...
    @property
    def RtsEnable(self) -> bool: ...
    @property
    def StopBits(self) -> StopBits: ...
    @property
    def WriteBufferSize(self) -> int: ...
    @property
    def WriteTimeout(self) -> int: ...
    def GetPortNames() -> Set(str): ...
    def Open(self) -> None: ...
    @overload
    def Read(self, buffer: Set(Byte), offset: int, count: int) -> int: ...
    @overload
    def Read(self, buffer: Set(Char), offset: int, count: int) -> int: ...
    def ReadByte(self) -> int: ...
    def ReadChar(self) -> int: ...
    def ReadExisting(self) -> str: ...
    def ReadLine(self) -> str: ...
    def ReadTo(self, value: str) -> str: ...
    def remove_DataReceived(self, value: SerialDataReceivedEventHandler) -> None: ...
    def remove_ErrorReceived(self, value: SerialErrorReceivedEventHandler) -> None: ...
    def remove_PinChanged(self, value: SerialPinChangedEventHandler) -> None: ...
    @BaudRate.setter
    def BaudRate(self, value: int) -> None: ...
    @BreakState.setter
    def BreakState(self, value: bool) -> None: ...
    @DataBits.setter
    def DataBits(self, value: int) -> None: ...
    @DiscardNull.setter
    def DiscardNull(self, value: bool) -> None: ...
    @DtrEnable.setter
    def DtrEnable(self, value: bool) -> None: ...
    @Encoding.setter
    def Encoding(self, value: Encoding) -> None: ...
    @Handshake.setter
    def Handshake(self, value: Handshake) -> None: ...
    @NewLine.setter
    def NewLine(self, value: str) -> None: ...
    @Parity.setter
    def Parity(self, value: Parity) -> None: ...
    @ParityReplace.setter
    def ParityReplace(self, value: Byte) -> None: ...
    @PortName.setter
    def PortName(self, value: str) -> None: ...
    @ReadBufferSize.setter
    def ReadBufferSize(self, value: int) -> None: ...
    @ReadTimeout.setter
    def ReadTimeout(self, value: int) -> None: ...
    @ReceivedBytesThreshold.setter
    def ReceivedBytesThreshold(self, value: int) -> None: ...
    @RtsEnable.setter
    def RtsEnable(self, value: bool) -> None: ...
    @StopBits.setter
    def StopBits(self, value: StopBits) -> None: ...
    @WriteBufferSize.setter
    def WriteBufferSize(self, value: int) -> None: ...
    @WriteTimeout.setter
    def WriteTimeout(self, value: int) -> None: ...
    @overload
    def Write(self, text: str) -> None: ...
    @overload
    def Write(self, buffer: Set(Byte), offset: int, count: int) -> None: ...
    @overload
    def Write(self, buffer: Set(Char), offset: int, count: int) -> None: ...
    def WriteLine(self, text: str) -> None: ...


class StopBits:
    #None = 0
    One = 1
    Two = 2
    OnePointFive = 3
