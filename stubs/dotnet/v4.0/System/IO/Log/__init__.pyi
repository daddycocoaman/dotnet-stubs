from typing import Tuple, Set, Iterable, List


class FileRecordSequence(Object):
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: str, access: FileAccess): ...
    @overload
    def __init__(self, path: str, access: FileAccess, size: int): ...
    def add_TailPinned(self, value: EventHandler) -> None: ...
    def AdvanceBaseSequenceNumber(self, newBaseSequenceNumber: SequenceNumber) -> None: ...
    @overload
    def Append(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions) -> SequenceNumber: ...
    @overload
    def Append(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions) -> SequenceNumber: ...
    @overload
    def Append(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection) -> SequenceNumber: ...
    @overload
    def Append(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection) -> SequenceNumber: ...
    @overload
    def BeginAppend(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginAppend(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginFlush(self, sequenceNumber: SequenceNumber, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginReserveAndAppend(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64), callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginReserveAndAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64), callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginWriteRestartArea(self, data: ArraySegment, newBaseSeqNum: SequenceNumber, reservation: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginWriteRestartArea(self, data: List[Byte], newBaseSeqNum: SequenceNumber, reservation: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def CreateReservationCollection(self) -> ReservationCollection: ...
    def Dispose(self) -> None: ...
    def EndAppend(self, result: IAsyncResult) -> SequenceNumber: ...
    def EndFlush(self, result: IAsyncResult) -> SequenceNumber: ...
    def EndReserveAndAppend(self, result: IAsyncResult) -> SequenceNumber: ...
    def EndWriteRestartArea(self, result: IAsyncResult) -> SequenceNumber: ...
    @overload
    def Flush(self) -> SequenceNumber: ...
    @overload
    def Flush(self, sequenceNumber: SequenceNumber) -> SequenceNumber: ...
    @property
    def BaseSequenceNumber(self) -> SequenceNumber: ...
    @property
    def LastSequenceNumber(self) -> SequenceNumber: ...
    @property
    def MaximumRecordLength(self) -> Int64: ...
    @property
    def ReservedBytes(self) -> Int64: ...
    @property
    def RestartSequenceNumber(self) -> SequenceNumber: ...
    @property
    def RetryAppend(self) -> bool: ...
    def ReadLogRecords(self, start: SequenceNumber, logRecordEnum: LogRecordEnumeratorType) -> Iterable[LogRecord]: ...
    def ReadRestartAreas(self) -> Iterable[LogRecord]: ...
    def remove_TailPinned(self, value: EventHandler) -> None: ...
    @overload
    def ReserveAndAppend(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64)) -> SequenceNumber: ...
    @overload
    def ReserveAndAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64)) -> SequenceNumber: ...
    @RetryAppend.setter
    def RetryAppend(self, value: bool) -> None: ...
    @overload
    def WriteRestartArea(self, data: List[Byte]) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: ArraySegment) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: ArraySegment, newBaseSeqNum: SequenceNumber) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: List[Byte], newBaseSeqNum: SequenceNumber) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: ArraySegment, newBaseSeqNum: SequenceNumber, reservations: ReservationCollection) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: List[Byte], newBaseSeqNum: SequenceNumber, reservations: ReservationCollection) -> SequenceNumber: ...


class FileRegion(Object):
    @property
    def FileLength(self) -> Int64: ...
    @property
    def Offset(self) -> Int64: ...
    @property
    def Path(self) -> str: ...
    def GetStream(self) -> Stream: ...


class IRecordSequence:
    def add_TailPinned(self, value: EventHandler) -> None: ...
    def AdvanceBaseSequenceNumber(self, newBaseSequenceNumber: SequenceNumber) -> None: ...
    @overload
    def Append(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions) -> SequenceNumber: ...
    @overload
    def Append(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions) -> SequenceNumber: ...
    @overload
    def Append(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection) -> SequenceNumber: ...
    @overload
    def Append(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection) -> SequenceNumber: ...
    @overload
    def BeginAppend(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginAppend(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousUndoRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginFlush(self, sequenceNumber: SequenceNumber, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginReserveAndAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64), callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginReserveAndAppend(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64), callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginWriteRestartArea(self, data: List[Byte], newBaseSequenceNumber: SequenceNumber, reservation: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginWriteRestartArea(self, data: ArraySegment, newBaseSequenceNumber: SequenceNumber, reservation: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def CreateReservationCollection(self) -> ReservationCollection: ...
    def EndAppend(self, result: IAsyncResult) -> SequenceNumber: ...
    def EndFlush(self, result: IAsyncResult) -> SequenceNumber: ...
    def EndReserveAndAppend(self, result: IAsyncResult) -> SequenceNumber: ...
    def EndWriteRestartArea(self, result: IAsyncResult) -> SequenceNumber: ...
    @overload
    def Flush(self) -> SequenceNumber: ...
    @overload
    def Flush(self, sequenceNumber: SequenceNumber) -> SequenceNumber: ...
    @property
    def BaseSequenceNumber(self) -> SequenceNumber: ...
    @property
    def LastSequenceNumber(self) -> SequenceNumber: ...
    @property
    def MaximumRecordLength(self) -> Int64: ...
    @property
    def ReservedBytes(self) -> Int64: ...
    @property
    def RestartSequenceNumber(self) -> SequenceNumber: ...
    @property
    def RetryAppend(self) -> bool: ...
    def ReadLogRecords(self, start: SequenceNumber, logRecordEnum: LogRecordEnumeratorType) -> Iterable[LogRecord]: ...
    def ReadRestartAreas(self) -> Iterable[LogRecord]: ...
    def remove_TailPinned(self, value: EventHandler) -> None: ...
    @overload
    def ReserveAndAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64)) -> SequenceNumber: ...
    @overload
    def ReserveAndAppend(self, data: List[Byte], nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64)) -> SequenceNumber: ...
    @RetryAppend.setter
    def RetryAppend(self, value: bool) -> None: ...
    @overload
    def WriteRestartArea(self, data: ArraySegment) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: List[Byte]) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: ArraySegment, newBaseSequenceNumber: SequenceNumber) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: List[Byte], newBaseSequenceNumber: SequenceNumber) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: ArraySegment, newBaseSequenceNumber: SequenceNumber, reservation: ReservationCollection) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: List[Byte], newBaseSequenceNumber: SequenceNumber, reservation: ReservationCollection) -> SequenceNumber: ...


class LogArchiveSnapshot(Object):
    @property
    def ArchiveRegions(self) -> Iterable[FileRegion]: ...
    @property
    def ArchiveTail(self) -> SequenceNumber: ...
    @property
    def BaseSequenceNumber(self) -> SequenceNumber: ...
    @property
    def LastSequenceNumber(self) -> SequenceNumber: ...


class LogExtent(Object):
    @property
    def Path(self) -> str: ...
    @property
    def Size(self) -> Int64: ...
    @property
    def State(self) -> LogExtentState: ...


class LogExtentCollection(Object):
    @overload
    def Add(self, path: str) -> None: ...
    @overload
    def Add(self, path: str, size: Int64) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def FreeCount(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def Remove(self, path: str, force: bool) -> None: ...
    @overload
    def Remove(self, extent: LogExtent, force: bool) -> None: ...


class LogExtentState:
    Unknown = 0
    Initializing = 1
    Inactive = 2
    Active = 4
    ActivePendingDelete = 8
    PendingArchive = 16
    PendingArchiveAndDelete = 32


class LogPolicy(Object):
    def Commit(self) -> None: ...
    @property
    def AutoGrow(self) -> bool: ...
    @property
    def AutoShrinkPercentage(self) -> int: ...
    @property
    def GrowthRate(self) -> PolicyUnit: ...
    @property
    def MaximumExtentCount(self) -> int: ...
    @property
    def MinimumExtentCount(self) -> int: ...
    @property
    def NewExtentPrefix(self) -> str: ...
    @property
    def NextExtentSuffix(self) -> Int64: ...
    @property
    def PinnedTailThreshold(self) -> PolicyUnit: ...
    def Refresh(self) -> None: ...
    @AutoGrow.setter
    def AutoGrow(self, value: bool) -> None: ...
    @AutoShrinkPercentage.setter
    def AutoShrinkPercentage(self, value: int) -> None: ...
    @GrowthRate.setter
    def GrowthRate(self, value: PolicyUnit) -> None: ...
    @MaximumExtentCount.setter
    def MaximumExtentCount(self, value: int) -> None: ...
    @MinimumExtentCount.setter
    def MinimumExtentCount(self, value: int) -> None: ...
    @NewExtentPrefix.setter
    def NewExtentPrefix(self, value: str) -> None: ...
    @NextExtentSuffix.setter
    def NextExtentSuffix(self, value: Int64) -> None: ...
    @PinnedTailThreshold.setter
    def PinnedTailThreshold(self, value: PolicyUnit) -> None: ...


class LogRecord(Object):
    def Dispose(self) -> None: ...
    @property
    def Data(self) -> Stream: ...
    @property
    def Previous(self) -> SequenceNumber: ...
    @property
    def SequenceNumber(self) -> SequenceNumber: ...
    @property
    def User(self) -> SequenceNumber: ...


class LogRecordEnumeratorType:
    User = 0
    Previous = 1
    Next = 2


class LogRecordSequence(Object):
    @overload
    def __init__(self, logStore: LogStore): ...
    @overload
    def __init__(self, path: str, mode: FileMode): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess): ...
    @overload
    def __init__(self, logStore: LogStore, bufferSize: int, bufferCount: int): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, bufferSize: int, bufferCount: int): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, bufferSize: int, bufferCount: int, fileSecurity: FileSecurity): ...
    def add_TailPinned(self, value: EventHandler) -> None: ...
    def AdvanceBaseSequenceNumber(self, newBaseSequenceNumber: SequenceNumber) -> None: ...
    @overload
    def Append(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions) -> SequenceNumber: ...
    @overload
    def Append(self, data: List[Byte], userRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions) -> SequenceNumber: ...
    @overload
    def Append(self, data: List[Byte], userRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection) -> SequenceNumber: ...
    @overload
    def Append(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection) -> SequenceNumber: ...
    @overload
    def BeginAppend(self, data: List[Byte], userRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginAppend(self, data: List[Byte], userRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservations: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginFlush(self, sequenceNumber: SequenceNumber, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginReserveAndAppend(self, data: List[Byte], userRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64), callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginReserveAndAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64), callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginWriteRestartArea(self, data: List[Byte], newBaseSeqNum: SequenceNumber, reservationCollection: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginWriteRestartArea(self, data: ArraySegment, newBaseSeqNum: SequenceNumber, reservation: ReservationCollection, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def CreateReservationCollection(self) -> ReservationCollection: ...
    def Dispose(self) -> None: ...
    def EndAppend(self, result: IAsyncResult) -> SequenceNumber: ...
    def EndFlush(self, result: IAsyncResult) -> SequenceNumber: ...
    def EndReserveAndAppend(self, result: IAsyncResult) -> SequenceNumber: ...
    def EndWriteRestartArea(self, result: IAsyncResult) -> SequenceNumber: ...
    @overload
    def Flush(self) -> SequenceNumber: ...
    @overload
    def Flush(self, sequenceNumber: SequenceNumber) -> SequenceNumber: ...
    @property
    def BaseSequenceNumber(self) -> SequenceNumber: ...
    @property
    def LastSequenceNumber(self) -> SequenceNumber: ...
    @property
    def LogStore(self) -> LogStore: ...
    @property
    def MaximumRecordLength(self) -> Int64: ...
    @property
    def ReservedBytes(self) -> Int64: ...
    @property
    def RestartSequenceNumber(self) -> SequenceNumber: ...
    @property
    def RetryAppend(self) -> bool: ...
    def ReadLogRecords(self, start: SequenceNumber, logRecordEnum: LogRecordEnumeratorType) -> Iterable[LogRecord]: ...
    def ReadRestartAreas(self) -> Iterable[LogRecord]: ...
    def remove_TailPinned(self, value: EventHandler) -> None: ...
    @overload
    def ReserveAndAppend(self, data: List[Byte], userRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64)) -> SequenceNumber: ...
    @overload
    def ReserveAndAppend(self, data: ArraySegment, nextUndoRecord: SequenceNumber, previousRecord: SequenceNumber, recordAppendOptions: RecordAppendOptions, reservationCollection: ReservationCollection, reservations: Set(Int64)) -> SequenceNumber: ...
    @RetryAppend.setter
    def RetryAppend(self, value: bool) -> None: ...
    def SetLastRecord(self, sequenceNumber: SequenceNumber) -> None: ...
    @overload
    def WriteRestartArea(self, data: ArraySegment) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: List[Byte]) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: ArraySegment, newBaseSeqNum: SequenceNumber) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: List[Byte], newBaseSeqNum: SequenceNumber) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: ArraySegment, newBaseSeqNum: SequenceNumber, reservations: ReservationCollection) -> SequenceNumber: ...
    @overload
    def WriteRestartArea(self, data: List[Byte], newBaseSeqNum: SequenceNumber, reservationCollection: ReservationCollection) -> SequenceNumber: ...


class LogStore(Object):
    @overload
    def __init__(self, handle: SafeFileHandle): ...
    @overload
    def __init__(self, path: str, mode: FileMode): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, fileSecurity: FileSecurity): ...
    @overload
    def CreateLogArchiveSnapshot(self) -> LogArchiveSnapshot: ...
    @overload
    def CreateLogArchiveSnapshot(self, first: SequenceNumber, last: SequenceNumber) -> LogArchiveSnapshot: ...
    def Delete(path: str) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Archivable(self) -> bool: ...
    @property
    def BaseSequenceNumber(self) -> SequenceNumber: ...
    @property
    def Extents(self) -> LogExtentCollection: ...
    @property
    def FreeBytes(self) -> Int64: ...
    @property
    def Handle(self) -> SafeFileHandle: ...
    @property
    def LastSequenceNumber(self) -> SequenceNumber: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Policy(self) -> LogPolicy: ...
    @property
    def StreamCount(self) -> int: ...
    @Archivable.setter
    def Archivable(self, value: bool) -> None: ...
    def SetArchiveTail(self, archiveTail: SequenceNumber) -> None: ...


class PolicyUnit(ValueType):
    def __init__(self, value: Int64, type: PolicyUnitType): ...
    def Equals(self, obj: Object) -> bool: ...
    def Extents(value: Int64) -> PolicyUnit: ...
    @property
    def Type(self) -> PolicyUnitType: ...
    @property
    def Value(self) -> Int64: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: PolicyUnit, right: PolicyUnit) -> bool: ...
    def op_Inequality(left: PolicyUnit, right: PolicyUnit) -> bool: ...
    def Percentage(value: Int64) -> PolicyUnit: ...
    def ToString(self) -> str: ...


class PolicyUnitType:
    Extents = 0
    Percentage = 1


class RecordAppendOptions:
    #None = 0
    ForceAppend = 1
    ForceFlush = 2


class ReservationCollection(Object):
    def Add(self, size: Int64) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, size: Int64) -> bool: ...
    def CopyTo(self, array: Set(Int64), arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, item: Int64) -> bool: ...


class ReservationNotFoundException(ArgumentException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class SequenceFullException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class SequenceNumber(ValueType):
    def __init__(self, sequenceNumber: Set(Byte)): ...
    def CompareTo(self, other: SequenceNumber) -> int: ...
    @overload
    def Equals(self, other: SequenceNumber) -> bool: ...
    @overload
    def Equals(self, other: Object) -> bool: ...
    @property
    def Invalid() -> SequenceNumber: ...
    def GetBytes(self) -> Set(Byte): ...
    def GetHashCode(self) -> int: ...
    def op_Equality(c1: SequenceNumber, c2: SequenceNumber) -> bool: ...
    def op_GreaterThan(c1: SequenceNumber, c2: SequenceNumber) -> bool: ...
    def op_GreaterThanOrEqual(c1: SequenceNumber, c2: SequenceNumber) -> bool: ...
    def op_Inequality(c1: SequenceNumber, c2: SequenceNumber) -> bool: ...
    def op_LessThan(c1: SequenceNumber, c2: SequenceNumber) -> bool: ...
    def op_LessThanOrEqual(c1: SequenceNumber, c2: SequenceNumber) -> bool: ...


class TailPinnedEventArgs(EventArgs):
    def __init__(self, sequenceNumber: SequenceNumber): ...
    @property
    def TargetSequenceNumber(self) -> SequenceNumber: ...
