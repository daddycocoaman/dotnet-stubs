__all__ = ['IO','ServiceModel']
from typing import Tuple, Set, Iterable, List


class UriTemplate(Object):
    @overload
    def __init__(self, template: str): ...
    @overload
    def __init__(self, template: str, ignoreTrailingSlash: bool): ...
    @overload
    def __init__(self, template: str, additionalDefaults: IDictionary): ...
    @overload
    def __init__(self, template: str, ignoreTrailingSlash: bool, additionalDefaults: IDictionary): ...
    @overload
    def BindByName(self, baseAddress: Uri, parameters: IDictionary) -> Uri: ...
    @overload
    def BindByName(self, baseAddress: Uri, parameters: NameValueCollection) -> Uri: ...
    @overload
    def BindByName(self, baseAddress: Uri, parameters: IDictionary, omitDefaults: bool) -> Uri: ...
    @overload
    def BindByName(self, baseAddress: Uri, parameters: NameValueCollection, omitDefaults: bool) -> Uri: ...
    def BindByPosition(self, baseAddress: Uri, values: Set(str)) -> Uri: ...
    @property
    def Defaults(self) -> IDictionary: ...
    @property
    def IgnoreTrailingSlash(self) -> bool: ...
    @property
    def PathSegmentVariableNames(self) -> ReadOnlyCollection: ...
    @property
    def QueryValueVariableNames(self) -> ReadOnlyCollection: ...
    def IsEquivalentTo(self, other: UriTemplate) -> bool: ...
    def Match(self, baseAddress: Uri, candidate: Uri) -> UriTemplateMatch: ...
    def ToString(self) -> str: ...


class UriTemplateEquivalenceComparer(Object):
    def __init__(self): ...
    @overload
    def Equals(self, x: UriTemplate, y: UriTemplate) -> bool: ...
    @overload
    def GetHashCode(self, obj: UriTemplate) -> int: ...


class UriTemplateMatch(Object):
    def __init__(self): ...
    @property
    def BaseUri(self) -> Uri: ...
    @property
    def BoundVariables(self) -> NameValueCollection: ...
    @property
    def Data(self) -> Object: ...
    @property
    def QueryParameters(self) -> NameValueCollection: ...
    @property
    def RelativePathSegments(self) -> Collection: ...
    @property
    def RequestUri(self) -> Uri: ...
    @property
    def Template(self) -> UriTemplate: ...
    @property
    def WildcardPathSegments(self) -> Collection: ...
    @BaseUri.setter
    def BaseUri(self, value: Uri) -> None: ...
    @Data.setter
    def Data(self, value: Object) -> None: ...
    @RequestUri.setter
    def RequestUri(self, value: Uri) -> None: ...
    @Template.setter
    def Template(self, value: UriTemplate) -> None: ...


class UriTemplateMatchException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class UriTemplateTable(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keyValuePairs: Iterable[KeyValuePair]): ...
    @overload
    def __init__(self, baseAddress: Uri): ...
    @overload
    def __init__(self, baseAddress: Uri, keyValuePairs: Iterable[KeyValuePair]): ...
    @property
    def BaseAddress(self) -> Uri: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def KeyValuePairs(self) -> List[UriTemplate]: ...
    @property
    def OriginalBaseAddress(self) -> Uri: ...
    def MakeReadOnly(self, allowDuplicateEquivalentUriTemplates: bool) -> None: ...
    def Match(self, uri: Uri) -> Collection: ...
    def MatchSingle(self, uri: Uri) -> UriTemplateMatch: ...
    @BaseAddress.setter
    def BaseAddress(self, value: Uri) -> None: ...
