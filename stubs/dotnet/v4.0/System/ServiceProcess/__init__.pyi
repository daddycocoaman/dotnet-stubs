__all__ = ['Design']
from typing import Tuple, Set, Iterable, List


class PowerBroadcastStatus:
    QuerySuspend = 0
    QuerySuspendFailed = 2
    Suspend = 4
    ResumeCritical = 6
    ResumeSuspend = 7
    BatteryLow = 9
    PowerStatusChange = 10
    OemEvent = 11
    ResumeAutomatic = 18


class ServiceAccount:
    LocalService = 0
    NetworkService = 1
    LocalSystem = 2
    User = 3


class ServiceBase(Component):
    def __init__(self): ...
    @property
    def AutoLog(self) -> bool: ...
    @property
    def CanHandlePowerEvent(self) -> bool: ...
    @property
    def CanHandleSessionChangeEvent(self) -> bool: ...
    @property
    def CanPauseAndContinue(self) -> bool: ...
    @property
    def CanShutdown(self) -> bool: ...
    @property
    def CanStop(self) -> bool: ...
    @property
    def EventLog(self) -> EventLog: ...
    @property
    def ExitCode(self) -> int: ...
    @property
    def ServiceName(self) -> str: ...
    def RequestAdditionalTime(self, milliseconds: int) -> None: ...
    @overload
    def Run(service: ServiceBase) -> None: ...
    @overload
    def Run(services: Set(ServiceBase)) -> None: ...
    def ServiceMainCallback(self, argCount: int, argPointer: IntPtr) -> None: ...
    @AutoLog.setter
    def AutoLog(self, value: bool) -> None: ...
    @CanHandlePowerEvent.setter
    def CanHandlePowerEvent(self, value: bool) -> None: ...
    @CanHandleSessionChangeEvent.setter
    def CanHandleSessionChangeEvent(self, value: bool) -> None: ...
    @CanPauseAndContinue.setter
    def CanPauseAndContinue(self, value: bool) -> None: ...
    @CanShutdown.setter
    def CanShutdown(self, value: bool) -> None: ...
    @CanStop.setter
    def CanStop(self, value: bool) -> None: ...
    @ExitCode.setter
    def ExitCode(self, value: int) -> None: ...
    @ServiceName.setter
    def ServiceName(self, value: str) -> None: ...
    def Stop(self) -> None: ...


class ServiceController(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, machineName: str): ...
    def Close(self) -> None: ...
    def Continue(self) -> None: ...
    def ExecuteCommand(self, command: int) -> None: ...
    @property
    def CanPauseAndContinue(self) -> bool: ...
    @property
    def CanShutdown(self) -> bool: ...
    @property
    def CanStop(self) -> bool: ...
    @property
    def DependentServices(self) -> Set(ServiceController): ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def ServiceHandle(self) -> SafeHandle: ...
    @property
    def ServiceName(self) -> str: ...
    @property
    def ServicesDependedOn(self) -> Set(ServiceController): ...
    @property
    def ServiceType(self) -> ServiceType: ...
    @property
    def StartType(self) -> ServiceStartMode: ...
    @property
    def Status(self) -> ServiceControllerStatus: ...
    @overload
    def GetDevices() -> Set(ServiceController): ...
    @overload
    def GetDevices(machineName: str) -> Set(ServiceController): ...
    @overload
    def GetServices() -> Set(ServiceController): ...
    @overload
    def GetServices(machineName: str) -> Set(ServiceController): ...
    def Pause(self) -> None: ...
    def Refresh(self) -> None: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...
    @ServiceName.setter
    def ServiceName(self, value: str) -> None: ...
    @overload
    def Start(self) -> None: ...
    @overload
    def Start(self, args: Set(str)) -> None: ...
    def Stop(self) -> None: ...
    @overload
    def WaitForStatus(self, desiredStatus: ServiceControllerStatus) -> None: ...
    @overload
    def WaitForStatus(self, desiredStatus: ServiceControllerStatus, timeout: TimeSpan) -> None: ...


class ServiceControllerPermission(ResourcePermissionBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, state: PermissionState): ...
    @overload
    def __init__(self, permissionAccessEntries: Set(ServiceControllerPermissionEntry)): ...
    @overload
    def __init__(self, permissionAccess: ServiceControllerPermissionAccess, machineName: str, serviceName: str): ...
    @property
    def PermissionEntries(self) -> ServiceControllerPermissionEntryCollection: ...


class ServiceControllerPermissionAccess:
    #None = 0
    Browse = 2
    Control = 6


class ServiceControllerPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def PermissionAccess(self) -> ServiceControllerPermissionAccess: ...
    @property
    def ServiceName(self) -> str: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...
    @PermissionAccess.setter
    def PermissionAccess(self, value: ServiceControllerPermissionAccess) -> None: ...
    @ServiceName.setter
    def ServiceName(self, value: str) -> None: ...


class ServiceControllerPermissionEntry(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, permissionAccess: ServiceControllerPermissionAccess, machineName: str, serviceName: str): ...
    @property
    def MachineName(self) -> str: ...
    @property
    def PermissionAccess(self) -> ServiceControllerPermissionAccess: ...
    @property
    def ServiceName(self) -> str: ...


class ServiceControllerPermissionEntryCollection(CollectionBase):
    def Add(self, value: ServiceControllerPermissionEntry) -> int: ...
    @overload
    def AddRange(self, value: Set(ServiceControllerPermissionEntry)) -> None: ...
    @overload
    def AddRange(self, value: ServiceControllerPermissionEntryCollection) -> None: ...
    def Contains(self, value: ServiceControllerPermissionEntry) -> bool: ...
    def CopyTo(self, array: Set(ServiceControllerPermissionEntry), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ServiceControllerPermissionEntry: ...
    def IndexOf(self, value: ServiceControllerPermissionEntry) -> int: ...
    def Insert(self, index: int, value: ServiceControllerPermissionEntry) -> None: ...
    def Remove(self, value: ServiceControllerPermissionEntry) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ServiceControllerPermissionEntry) -> None: ...


class ServiceControllerStatus:
    Stopped = 1
    StartPending = 2
    StopPending = 3
    Running = 4
    ContinuePending = 5
    PausePending = 6
    Paused = 7


class ServiceInstaller(ComponentInstaller):
    def __init__(self): ...
    def CopyFromComponent(self, component: IComponent) -> None: ...
    @property
    def DelayedAutoStart(self) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def ServiceName(self) -> str: ...
    @property
    def ServicesDependedOn(self) -> Set(str): ...
    @property
    def StartType(self) -> ServiceStartMode: ...
    def Install(self, stateSaver: IDictionary) -> None: ...
    def IsEquivalentInstaller(self, otherInstaller: ComponentInstaller) -> bool: ...
    def Rollback(self, savedState: IDictionary) -> None: ...
    @DelayedAutoStart.setter
    def DelayedAutoStart(self, value: bool) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @ServiceName.setter
    def ServiceName(self, value: str) -> None: ...
    @ServicesDependedOn.setter
    def ServicesDependedOn(self, value: Set(str)) -> None: ...
    @StartType.setter
    def StartType(self, value: ServiceStartMode) -> None: ...
    def Uninstall(self, savedState: IDictionary) -> None: ...


class ServiceProcessDescriptionAttribute(DescriptionAttribute):
    def __init__(self, description: str): ...
    @property
    def Description(self) -> str: ...


class ServiceProcessInstaller(ComponentInstaller):
    def __init__(self): ...
    def CopyFromComponent(self, comp: IComponent) -> None: ...
    @property
    def Account(self) -> ServiceAccount: ...
    @property
    def HelpText(self) -> str: ...
    @property
    def Password(self) -> str: ...
    @property
    def Username(self) -> str: ...
    def Install(self, stateSaver: IDictionary) -> None: ...
    def Rollback(self, savedState: IDictionary) -> None: ...
    @Account.setter
    def Account(self, value: ServiceAccount) -> None: ...
    @Password.setter
    def Password(self, value: str) -> None: ...
    @Username.setter
    def Username(self, value: str) -> None: ...


class ServiceStartMode:
    Boot = 0
    System = 1
    Automatic = 2
    Manual = 3
    Disabled = 4


class ServiceType:
    KernelDriver = 1
    FileSystemDriver = 2
    Adapter = 4
    RecognizerDriver = 8
    Win32OwnProcess = 16
    Win32ShareProcess = 32
    InteractiveProcess = 256


class SessionChangeDescription(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, changeDescription: SessionChangeDescription) -> bool: ...
    @property
    def Reason(self) -> SessionChangeReason: ...
    @property
    def SessionId(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(a: SessionChangeDescription, b: SessionChangeDescription) -> bool: ...
    def op_Inequality(a: SessionChangeDescription, b: SessionChangeDescription) -> bool: ...


class SessionChangeReason:
    ConsoleConnect = 1
    ConsoleDisconnect = 2
    RemoteConnect = 3
    RemoteDisconnect = 4
    SessionLogon = 5
    SessionLogoff = 6
    SessionLock = 7
    SessionUnlock = 8
    SessionRemoteControl = 9


class TimeoutException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
