__all__ = ['Design']
from typing import Tuple, Set, Iterable, List


class AccessControlEntry(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, trustee: Trustee): ...
    @overload
    def __init__(self, trustee: Trustee, genericAccessRights: GenericAccessRights, standardAccessRights: StandardAccessRights, entryType: AccessControlEntryType): ...
    @property
    def EntryType(self) -> AccessControlEntryType: ...
    @property
    def GenericAccessRights(self) -> GenericAccessRights: ...
    @property
    def StandardAccessRights(self) -> StandardAccessRights: ...
    @property
    def Trustee(self) -> Trustee: ...
    @EntryType.setter
    def EntryType(self, value: AccessControlEntryType) -> None: ...
    @GenericAccessRights.setter
    def GenericAccessRights(self, value: GenericAccessRights) -> None: ...
    @StandardAccessRights.setter
    def StandardAccessRights(self, value: StandardAccessRights) -> None: ...
    @Trustee.setter
    def Trustee(self, value: Trustee) -> None: ...


class AccessControlEntryType:
    Allow = 1
    Set = 2
    Deny = 3
    Revoke = 4


class AccessControlList(CollectionBase):
    def __init__(self): ...
    def Add(self, entry: AccessControlEntry) -> int: ...
    def Contains(self, entry: AccessControlEntry) -> bool: ...
    def CopyTo(self, array: Set(AccessControlEntry), index: int) -> None: ...
    def IndexOf(self, entry: AccessControlEntry) -> int: ...
    def Insert(self, index: int, entry: AccessControlEntry) -> None: ...
    def Remove(self, entry: AccessControlEntry) -> None: ...


class AcknowledgeTypes:
    #None = 0
    PositiveArrival = 1
    PositiveReceive = 2
    NotAcknowledgeReachQueue = 4
    FullReachQueue = 5
    NegativeReceive = 8
    NotAcknowledgeReceive = 12
    FullReceive = 14


class Acknowledgment:
    #None = 0
    ReachQueue = 2
    Receive = 16384
    BadDestinationQueue = 32768
    Purged = 32769
    ReachQueueTimeout = 32770
    QueueExceedMaximumSize = 32771
    AccessDenied = 32772
    HopCountExceeded = 32773
    BadSignature = 32774
    BadEncryption = 32775
    CouldNotEncrypt = 32776
    NotTransactionalQueue = 32777
    NotTransactionalMessage = 32778
    QueueDeleted = 49152
    QueuePurged = 49153
    ReceiveTimeout = 49154


class ActiveXMessageFormatter(Object):
    def __init__(self): ...
    def CanRead(self, message: Message) -> bool: ...
    def Clone(self) -> Object: ...
    def InitStreamedObject(streamedObject: Object) -> None: ...
    def Read(self, message: Message) -> Object: ...
    def Write(self, message: Message, obj: Object) -> None: ...


class BinaryMessageFormatter(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, topObjectFormat: FormatterAssemblyStyle, typeFormat: FormatterTypeStyle): ...
    def CanRead(self, message: Message) -> bool: ...
    def Clone(self) -> Object: ...
    @property
    def TopObjectFormat(self) -> FormatterAssemblyStyle: ...
    @property
    def TypeFormat(self) -> FormatterTypeStyle: ...
    def Read(self, message: Message) -> Object: ...
    @TopObjectFormat.setter
    def TopObjectFormat(self, value: FormatterAssemblyStyle) -> None: ...
    @TypeFormat.setter
    def TypeFormat(self, value: FormatterTypeStyle) -> None: ...
    def Write(self, message: Message, obj: Object) -> None: ...


class CryptographicProviderType:
    #None = 0
    RsaFull = 1
    RsqSig = 2
    Dss = 3
    Fortezza = 4
    MicrosoftExchange = 5
    Ssl = 6
    SttMer = 7
    SttAcq = 8
    SttBrnd = 9
    SttRoot = 10
    SttIss = 11


class Cursor(Object):
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...


class DefaultPropertiesToSend(Object):
    def __init__(self): ...
    @property
    def AcknowledgeType(self) -> AcknowledgeTypes: ...
    @property
    def AdministrationQueue(self) -> MessageQueue: ...
    @property
    def AppSpecific(self) -> int: ...
    @property
    def AttachSenderId(self) -> bool: ...
    @property
    def EncryptionAlgorithm(self) -> EncryptionAlgorithm: ...
    @property
    def Extension(self) -> Set(Byte): ...
    @property
    def HashAlgorithm(self) -> HashAlgorithm: ...
    @property
    def Label(self) -> str: ...
    @property
    def Priority(self) -> MessagePriority: ...
    @property
    def Recoverable(self) -> bool: ...
    @property
    def ResponseQueue(self) -> MessageQueue: ...
    @property
    def TimeToBeReceived(self) -> TimeSpan: ...
    @property
    def TimeToReachQueue(self) -> TimeSpan: ...
    @property
    def TransactionStatusQueue(self) -> MessageQueue: ...
    @property
    def UseAuthentication(self) -> bool: ...
    @property
    def UseDeadLetterQueue(self) -> bool: ...
    @property
    def UseEncryption(self) -> bool: ...
    @property
    def UseJournalQueue(self) -> bool: ...
    @property
    def UseTracing(self) -> bool: ...
    @AcknowledgeType.setter
    def AcknowledgeType(self, value: AcknowledgeTypes) -> None: ...
    @AdministrationQueue.setter
    def AdministrationQueue(self, value: MessageQueue) -> None: ...
    @AppSpecific.setter
    def AppSpecific(self, value: int) -> None: ...
    @AttachSenderId.setter
    def AttachSenderId(self, value: bool) -> None: ...
    @EncryptionAlgorithm.setter
    def EncryptionAlgorithm(self, value: EncryptionAlgorithm) -> None: ...
    @Extension.setter
    def Extension(self, value: Set(Byte)) -> None: ...
    @HashAlgorithm.setter
    def HashAlgorithm(self, value: HashAlgorithm) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...
    @Priority.setter
    def Priority(self, value: MessagePriority) -> None: ...
    @Recoverable.setter
    def Recoverable(self, value: bool) -> None: ...
    @ResponseQueue.setter
    def ResponseQueue(self, value: MessageQueue) -> None: ...
    @TimeToBeReceived.setter
    def TimeToBeReceived(self, value: TimeSpan) -> None: ...
    @TimeToReachQueue.setter
    def TimeToReachQueue(self, value: TimeSpan) -> None: ...
    @TransactionStatusQueue.setter
    def TransactionStatusQueue(self, value: MessageQueue) -> None: ...
    @UseAuthentication.setter
    def UseAuthentication(self, value: bool) -> None: ...
    @UseDeadLetterQueue.setter
    def UseDeadLetterQueue(self, value: bool) -> None: ...
    @UseEncryption.setter
    def UseEncryption(self, value: bool) -> None: ...
    @UseJournalQueue.setter
    def UseJournalQueue(self, value: bool) -> None: ...
    @UseTracing.setter
    def UseTracing(self, value: bool) -> None: ...


class EncryptionAlgorithm:
    #None = 0
    Rc2 = 26114
    Rc4 = 26625


class EncryptionRequired:
    #None = 0
    Optional = 1
    Body = 2


class GenericAccessRights:
    #None = 0
    All = 268435456
    Execute = 536870912
    Write = 1073741824
    Read = -2147483648


class HashAlgorithm:
    #None = 0
    Md2 = 32769
    Md4 = 32770
    Md5 = 32771
    Sha = 32772
    Mac = 32773
    Sha256 = 32780
    Sha384 = 32781
    Sha512 = 32782


class IMessageFormatter:
    def CanRead(self, message: Message) -> bool: ...
    def Read(self, message: Message) -> Object: ...
    def Write(self, message: Message, obj: Object) -> None: ...


class Message(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, body: Object): ...
    @overload
    def __init__(self, body: Object, formatter: IMessageFormatter): ...
    @property
    def AcknowledgeType(self) -> AcknowledgeTypes: ...
    @property
    def Acknowledgment(self) -> Acknowledgment: ...
    @property
    def AdministrationQueue(self) -> MessageQueue: ...
    @property
    def AppSpecific(self) -> int: ...
    @property
    def ArrivedTime(self) -> DateTime: ...
    @property
    def AttachSenderId(self) -> bool: ...
    @property
    def Authenticated(self) -> bool: ...
    @property
    def AuthenticationProviderName(self) -> str: ...
    @property
    def AuthenticationProviderType(self) -> CryptographicProviderType: ...
    @property
    def Body(self) -> Object: ...
    @property
    def BodyStream(self) -> Stream: ...
    @property
    def BodyType(self) -> int: ...
    @property
    def ConnectorType(self) -> Guid: ...
    @property
    def CorrelationId(self) -> str: ...
    @property
    def DestinationQueue(self) -> MessageQueue: ...
    @property
    def DestinationSymmetricKey(self) -> Set(Byte): ...
    @property
    def DigitalSignature(self) -> Set(Byte): ...
    @property
    def EncryptionAlgorithm(self) -> EncryptionAlgorithm: ...
    @property
    def Extension(self) -> Set(Byte): ...
    @property
    def Formatter(self) -> IMessageFormatter: ...
    @property
    def HashAlgorithm(self) -> HashAlgorithm: ...
    @property
    def Id(self) -> str: ...
    @property
    def IsFirstInTransaction(self) -> bool: ...
    @property
    def IsLastInTransaction(self) -> bool: ...
    @property
    def Label(self) -> str: ...
    @property
    def LookupId(self) -> Int64: ...
    @property
    def MessageType(self) -> MessageType: ...
    @property
    def Priority(self) -> MessagePriority: ...
    @property
    def Recoverable(self) -> bool: ...
    @property
    def ResponseQueue(self) -> MessageQueue: ...
    @property
    def SecurityContext(self) -> SecurityContext: ...
    @property
    def SenderCertificate(self) -> Set(Byte): ...
    @property
    def SenderId(self) -> Set(Byte): ...
    @property
    def SenderVersion(self) -> Int64: ...
    @property
    def SentTime(self) -> DateTime: ...
    @property
    def SourceMachine(self) -> str: ...
    @property
    def TimeToBeReceived(self) -> TimeSpan: ...
    @property
    def TimeToReachQueue(self) -> TimeSpan: ...
    @property
    def TransactionId(self) -> str: ...
    @property
    def TransactionStatusQueue(self) -> MessageQueue: ...
    @property
    def UseAuthentication(self) -> bool: ...
    @property
    def UseDeadLetterQueue(self) -> bool: ...
    @property
    def UseEncryption(self) -> bool: ...
    @property
    def UseJournalQueue(self) -> bool: ...
    @property
    def UseTracing(self) -> bool: ...
    @AcknowledgeType.setter
    def AcknowledgeType(self, value: AcknowledgeTypes) -> None: ...
    @AdministrationQueue.setter
    def AdministrationQueue(self, value: MessageQueue) -> None: ...
    @AppSpecific.setter
    def AppSpecific(self, value: int) -> None: ...
    @AttachSenderId.setter
    def AttachSenderId(self, value: bool) -> None: ...
    @AuthenticationProviderName.setter
    def AuthenticationProviderName(self, value: str) -> None: ...
    @AuthenticationProviderType.setter
    def AuthenticationProviderType(self, value: CryptographicProviderType) -> None: ...
    @Body.setter
    def Body(self, value: Object) -> None: ...
    @BodyStream.setter
    def BodyStream(self, value: Stream) -> None: ...
    @BodyType.setter
    def BodyType(self, value: int) -> None: ...
    @ConnectorType.setter
    def ConnectorType(self, value: Guid) -> None: ...
    @CorrelationId.setter
    def CorrelationId(self, value: str) -> None: ...
    @DestinationSymmetricKey.setter
    def DestinationSymmetricKey(self, value: Set(Byte)) -> None: ...
    @DigitalSignature.setter
    def DigitalSignature(self, value: Set(Byte)) -> None: ...
    @EncryptionAlgorithm.setter
    def EncryptionAlgorithm(self, value: EncryptionAlgorithm) -> None: ...
    @Extension.setter
    def Extension(self, value: Set(Byte)) -> None: ...
    @Formatter.setter
    def Formatter(self, value: IMessageFormatter) -> None: ...
    @HashAlgorithm.setter
    def HashAlgorithm(self, value: HashAlgorithm) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...
    @Priority.setter
    def Priority(self, value: MessagePriority) -> None: ...
    @Recoverable.setter
    def Recoverable(self, value: bool) -> None: ...
    @ResponseQueue.setter
    def ResponseQueue(self, value: MessageQueue) -> None: ...
    @SecurityContext.setter
    def SecurityContext(self, value: SecurityContext) -> None: ...
    @SenderCertificate.setter
    def SenderCertificate(self, value: Set(Byte)) -> None: ...
    @TimeToBeReceived.setter
    def TimeToBeReceived(self, value: TimeSpan) -> None: ...
    @TimeToReachQueue.setter
    def TimeToReachQueue(self, value: TimeSpan) -> None: ...
    @TransactionStatusQueue.setter
    def TransactionStatusQueue(self, value: MessageQueue) -> None: ...
    @UseAuthentication.setter
    def UseAuthentication(self, value: bool) -> None: ...
    @UseDeadLetterQueue.setter
    def UseDeadLetterQueue(self, value: bool) -> None: ...
    @UseEncryption.setter
    def UseEncryption(self, value: bool) -> None: ...
    @UseJournalQueue.setter
    def UseJournalQueue(self, value: bool) -> None: ...
    @UseTracing.setter
    def UseTracing(self, value: bool) -> None: ...


class MessageEnumerator(MarshalByRefObject):
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Current(self) -> Message: ...
    @property
    def CursorHandle(self) -> IntPtr: ...
    @overload
    def MoveNext(self) -> bool: ...
    @overload
    def MoveNext(self, timeout: TimeSpan) -> bool: ...
    @overload
    def RemoveCurrent(self) -> Message: ...
    @overload
    def RemoveCurrent(self, transactionType: MessageQueueTransactionType) -> Message: ...
    @overload
    def RemoveCurrent(self, timeout: TimeSpan) -> Message: ...
    @overload
    def RemoveCurrent(self, transaction: MessageQueueTransaction) -> Message: ...
    @overload
    def RemoveCurrent(self, timeout: TimeSpan, transaction: MessageQueueTransaction) -> Message: ...
    @overload
    def RemoveCurrent(self, timeout: TimeSpan, transactionType: MessageQueueTransactionType) -> Message: ...
    def Reset(self) -> None: ...


class MessageLookupAction:
    Current = 0
    Next = 1
    Previous = 2
    First = 4
    Last = 8


class MessagePriority:
    Lowest = 0
    VeryLow = 1
    Low = 2
    Normal = 3
    AboveNormal = 4
    High = 5
    VeryHigh = 6
    Highest = 7


class MessagePropertyFilter(Object):
    def __init__(self): ...
    def ClearAll(self) -> None: ...
    def Clone(self) -> Object: ...
    @property
    def AcknowledgeType(self) -> bool: ...
    @property
    def Acknowledgment(self) -> bool: ...
    @property
    def AdministrationQueue(self) -> bool: ...
    @property
    def AppSpecific(self) -> bool: ...
    @property
    def ArrivedTime(self) -> bool: ...
    @property
    def AttachSenderId(self) -> bool: ...
    @property
    def Authenticated(self) -> bool: ...
    @property
    def AuthenticationProviderName(self) -> bool: ...
    @property
    def AuthenticationProviderType(self) -> bool: ...
    @property
    def Body(self) -> bool: ...
    @property
    def ConnectorType(self) -> bool: ...
    @property
    def CorrelationId(self) -> bool: ...
    @property
    def DefaultBodySize(self) -> int: ...
    @property
    def DefaultExtensionSize(self) -> int: ...
    @property
    def DefaultLabelSize(self) -> int: ...
    @property
    def DestinationQueue(self) -> bool: ...
    @property
    def DestinationSymmetricKey(self) -> bool: ...
    @property
    def DigitalSignature(self) -> bool: ...
    @property
    def EncryptionAlgorithm(self) -> bool: ...
    @property
    def Extension(self) -> bool: ...
    @property
    def HashAlgorithm(self) -> bool: ...
    @property
    def Id(self) -> bool: ...
    @property
    def IsFirstInTransaction(self) -> bool: ...
    @property
    def IsLastInTransaction(self) -> bool: ...
    @property
    def Label(self) -> bool: ...
    @property
    def LookupId(self) -> bool: ...
    @property
    def MessageType(self) -> bool: ...
    @property
    def Priority(self) -> bool: ...
    @property
    def Recoverable(self) -> bool: ...
    @property
    def ResponseQueue(self) -> bool: ...
    @property
    def SenderCertificate(self) -> bool: ...
    @property
    def SenderId(self) -> bool: ...
    @property
    def SenderVersion(self) -> bool: ...
    @property
    def SentTime(self) -> bool: ...
    @property
    def SourceMachine(self) -> bool: ...
    @property
    def TimeToBeReceived(self) -> bool: ...
    @property
    def TimeToReachQueue(self) -> bool: ...
    @property
    def TransactionId(self) -> bool: ...
    @property
    def TransactionStatusQueue(self) -> bool: ...
    @property
    def UseAuthentication(self) -> bool: ...
    @property
    def UseDeadLetterQueue(self) -> bool: ...
    @property
    def UseEncryption(self) -> bool: ...
    @property
    def UseJournalQueue(self) -> bool: ...
    @property
    def UseTracing(self) -> bool: ...
    @AcknowledgeType.setter
    def AcknowledgeType(self, value: bool) -> None: ...
    @Acknowledgment.setter
    def Acknowledgment(self, value: bool) -> None: ...
    @AdministrationQueue.setter
    def AdministrationQueue(self, value: bool) -> None: ...
    @AppSpecific.setter
    def AppSpecific(self, value: bool) -> None: ...
    @ArrivedTime.setter
    def ArrivedTime(self, value: bool) -> None: ...
    @AttachSenderId.setter
    def AttachSenderId(self, value: bool) -> None: ...
    @Authenticated.setter
    def Authenticated(self, value: bool) -> None: ...
    @AuthenticationProviderName.setter
    def AuthenticationProviderName(self, value: bool) -> None: ...
    @AuthenticationProviderType.setter
    def AuthenticationProviderType(self, value: bool) -> None: ...
    @Body.setter
    def Body(self, value: bool) -> None: ...
    @ConnectorType.setter
    def ConnectorType(self, value: bool) -> None: ...
    @CorrelationId.setter
    def CorrelationId(self, value: bool) -> None: ...
    @DefaultBodySize.setter
    def DefaultBodySize(self, value: int) -> None: ...
    @DefaultExtensionSize.setter
    def DefaultExtensionSize(self, value: int) -> None: ...
    @DefaultLabelSize.setter
    def DefaultLabelSize(self, value: int) -> None: ...
    @DestinationQueue.setter
    def DestinationQueue(self, value: bool) -> None: ...
    @DestinationSymmetricKey.setter
    def DestinationSymmetricKey(self, value: bool) -> None: ...
    @DigitalSignature.setter
    def DigitalSignature(self, value: bool) -> None: ...
    @EncryptionAlgorithm.setter
    def EncryptionAlgorithm(self, value: bool) -> None: ...
    @Extension.setter
    def Extension(self, value: bool) -> None: ...
    @HashAlgorithm.setter
    def HashAlgorithm(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: bool) -> None: ...
    @IsFirstInTransaction.setter
    def IsFirstInTransaction(self, value: bool) -> None: ...
    @IsLastInTransaction.setter
    def IsLastInTransaction(self, value: bool) -> None: ...
    @Label.setter
    def Label(self, value: bool) -> None: ...
    @LookupId.setter
    def LookupId(self, value: bool) -> None: ...
    @MessageType.setter
    def MessageType(self, value: bool) -> None: ...
    @Priority.setter
    def Priority(self, value: bool) -> None: ...
    @Recoverable.setter
    def Recoverable(self, value: bool) -> None: ...
    @ResponseQueue.setter
    def ResponseQueue(self, value: bool) -> None: ...
    @SenderCertificate.setter
    def SenderCertificate(self, value: bool) -> None: ...
    @SenderId.setter
    def SenderId(self, value: bool) -> None: ...
    @SenderVersion.setter
    def SenderVersion(self, value: bool) -> None: ...
    @SentTime.setter
    def SentTime(self, value: bool) -> None: ...
    @SourceMachine.setter
    def SourceMachine(self, value: bool) -> None: ...
    @TimeToBeReceived.setter
    def TimeToBeReceived(self, value: bool) -> None: ...
    @TimeToReachQueue.setter
    def TimeToReachQueue(self, value: bool) -> None: ...
    @TransactionId.setter
    def TransactionId(self, value: bool) -> None: ...
    @TransactionStatusQueue.setter
    def TransactionStatusQueue(self, value: bool) -> None: ...
    @UseAuthentication.setter
    def UseAuthentication(self, value: bool) -> None: ...
    @UseDeadLetterQueue.setter
    def UseDeadLetterQueue(self, value: bool) -> None: ...
    @UseEncryption.setter
    def UseEncryption(self, value: bool) -> None: ...
    @UseJournalQueue.setter
    def UseJournalQueue(self, value: bool) -> None: ...
    @UseTracing.setter
    def UseTracing(self, value: bool) -> None: ...
    def SetAll(self) -> None: ...
    def SetDefaults(self) -> None: ...


class MessageQueue(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: str, accessMode: QueueAccessMode): ...
    @overload
    def __init__(self, path: str, sharedModeDenyReceive: bool): ...
    @overload
    def __init__(self, path: str, sharedModeDenyReceive: bool, enableCache: bool): ...
    @overload
    def __init__(self, path: str, sharedModeDenyReceive: bool, enableCache: bool, accessMode: QueueAccessMode): ...
    def add_PeekCompleted(self, value: PeekCompletedEventHandler) -> None: ...
    def add_ReceiveCompleted(self, value: ReceiveCompletedEventHandler) -> None: ...
    @overload
    def BeginPeek(self) -> IAsyncResult: ...
    @overload
    def BeginPeek(self, timeout: TimeSpan) -> IAsyncResult: ...
    @overload
    def BeginPeek(self, timeout: TimeSpan, stateObject: Object) -> IAsyncResult: ...
    @overload
    def BeginPeek(self, timeout: TimeSpan, stateObject: Object, callback: AsyncCallback) -> IAsyncResult: ...
    @overload
    def BeginPeek(self, timeout: TimeSpan, cursor: Cursor, action: PeekAction, state: Object, callback: AsyncCallback) -> IAsyncResult: ...
    @overload
    def BeginReceive(self) -> IAsyncResult: ...
    @overload
    def BeginReceive(self, timeout: TimeSpan) -> IAsyncResult: ...
    @overload
    def BeginReceive(self, timeout: TimeSpan, stateObject: Object) -> IAsyncResult: ...
    @overload
    def BeginReceive(self, timeout: TimeSpan, stateObject: Object, callback: AsyncCallback) -> IAsyncResult: ...
    @overload
    def BeginReceive(self, timeout: TimeSpan, cursor: Cursor, state: Object, callback: AsyncCallback) -> IAsyncResult: ...
    def ClearConnectionCache() -> None: ...
    def Close(self) -> None: ...
    @overload
    def Create(path: str) -> MessageQueue: ...
    @overload
    def Create(path: str, transactional: bool) -> MessageQueue: ...
    def CreateCursor(self) -> Cursor: ...
    def Delete(path: str) -> None: ...
    def EndPeek(self, asyncResult: IAsyncResult) -> Message: ...
    def EndReceive(self, asyncResult: IAsyncResult) -> Message: ...
    def Exists(path: str) -> bool: ...
    @property
    def AccessMode(self) -> QueueAccessMode: ...
    @property
    def Authenticate(self) -> bool: ...
    @property
    def BasePriority(self) -> Int16: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Category(self) -> Guid: ...
    @property
    def CreateTime(self) -> DateTime: ...
    @property
    def DefaultPropertiesToSend(self) -> DefaultPropertiesToSend: ...
    @property
    def DenySharedReceive(self) -> bool: ...
    @property
    def EnableConnectionCache() -> bool: ...
    @property
    def EncryptionRequired(self) -> EncryptionRequired: ...
    @property
    def FormatName(self) -> str: ...
    @property
    def Formatter(self) -> IMessageFormatter: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def Label(self) -> str: ...
    @property
    def LastModifyTime(self) -> DateTime: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def MaximumJournalSize(self) -> Int64: ...
    @property
    def MaximumQueueSize(self) -> Int64: ...
    @property
    def MessageReadPropertyFilter(self) -> MessagePropertyFilter: ...
    @property
    def MulticastAddress(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def QueueName(self) -> str: ...
    @property
    def ReadHandle(self) -> IntPtr: ...
    @property
    def SynchronizingObject(self) -> ISynchronizeInvoke: ...
    @property
    def Transactional(self) -> bool: ...
    @property
    def UseJournalQueue(self) -> bool: ...
    @property
    def WriteHandle(self) -> IntPtr: ...
    def GetAllMessages(self) -> Set(Message): ...
    def GetMachineId(machineName: str) -> Guid: ...
    def GetMessageEnumerator2(self) -> MessageEnumerator: ...
    @overload
    def GetMessageQueueEnumerator() -> MessageQueueEnumerator: ...
    @overload
    def GetMessageQueueEnumerator(criteria: MessageQueueCriteria) -> MessageQueueEnumerator: ...
    def GetPrivateQueuesByMachine(machineName: str) -> Set(MessageQueue): ...
    @overload
    def GetPublicQueues() -> Set(MessageQueue): ...
    @overload
    def GetPublicQueues(criteria: MessageQueueCriteria) -> Set(MessageQueue): ...
    def GetPublicQueuesByCategory(category: Guid) -> Set(MessageQueue): ...
    def GetPublicQueuesByLabel(label: str) -> Set(MessageQueue): ...
    def GetPublicQueuesByMachine(machineName: str) -> Set(MessageQueue): ...
    def GetSecurityContext() -> SecurityContext: ...
    @overload
    def Peek(self) -> Message: ...
    @overload
    def Peek(self, timeout: TimeSpan) -> Message: ...
    @overload
    def Peek(self, timeout: TimeSpan, cursor: Cursor, action: PeekAction) -> Message: ...
    @overload
    def PeekByCorrelationId(self, correlationId: str) -> Message: ...
    @overload
    def PeekByCorrelationId(self, correlationId: str, timeout: TimeSpan) -> Message: ...
    @overload
    def PeekById(self, id: str) -> Message: ...
    @overload
    def PeekById(self, id: str, timeout: TimeSpan) -> Message: ...
    @overload
    def PeekByLookupId(self, lookupId: Int64) -> Message: ...
    @overload
    def PeekByLookupId(self, action: MessageLookupAction, lookupId: Int64) -> Message: ...
    def Purge(self) -> None: ...
    @overload
    def Receive(self) -> Message: ...
    @overload
    def Receive(self, timeout: TimeSpan) -> Message: ...
    @overload
    def Receive(self, transaction: MessageQueueTransaction) -> Message: ...
    @overload
    def Receive(self, transactionType: MessageQueueTransactionType) -> Message: ...
    @overload
    def Receive(self, timeout: TimeSpan, cursor: Cursor) -> Message: ...
    @overload
    def Receive(self, timeout: TimeSpan, transaction: MessageQueueTransaction) -> Message: ...
    @overload
    def Receive(self, timeout: TimeSpan, transactionType: MessageQueueTransactionType) -> Message: ...
    @overload
    def Receive(self, timeout: TimeSpan, cursor: Cursor, transactionType: MessageQueueTransactionType) -> Message: ...
    @overload
    def Receive(self, timeout: TimeSpan, cursor: Cursor, transaction: MessageQueueTransaction) -> Message: ...
    @overload
    def ReceiveByCorrelationId(self, correlationId: str) -> Message: ...
    @overload
    def ReceiveByCorrelationId(self, correlationId: str, transaction: MessageQueueTransaction) -> Message: ...
    @overload
    def ReceiveByCorrelationId(self, correlationId: str, transactionType: MessageQueueTransactionType) -> Message: ...
    @overload
    def ReceiveByCorrelationId(self, correlationId: str, timeout: TimeSpan) -> Message: ...
    @overload
    def ReceiveByCorrelationId(self, correlationId: str, timeout: TimeSpan, transaction: MessageQueueTransaction) -> Message: ...
    @overload
    def ReceiveByCorrelationId(self, correlationId: str, timeout: TimeSpan, transactionType: MessageQueueTransactionType) -> Message: ...
    @overload
    def ReceiveById(self, id: str) -> Message: ...
    @overload
    def ReceiveById(self, id: str, transaction: MessageQueueTransaction) -> Message: ...
    @overload
    def ReceiveById(self, id: str, transactionType: MessageQueueTransactionType) -> Message: ...
    @overload
    def ReceiveById(self, id: str, timeout: TimeSpan) -> Message: ...
    @overload
    def ReceiveById(self, id: str, timeout: TimeSpan, transaction: MessageQueueTransaction) -> Message: ...
    @overload
    def ReceiveById(self, id: str, timeout: TimeSpan, transactionType: MessageQueueTransactionType) -> Message: ...
    @overload
    def ReceiveByLookupId(self, lookupId: Int64) -> Message: ...
    @overload
    def ReceiveByLookupId(self, action: MessageLookupAction, lookupId: Int64, transaction: MessageQueueTransaction) -> Message: ...
    @overload
    def ReceiveByLookupId(self, action: MessageLookupAction, lookupId: Int64, transactionType: MessageQueueTransactionType) -> Message: ...
    def Refresh(self) -> None: ...
    def remove_PeekCompleted(self, value: PeekCompletedEventHandler) -> None: ...
    def remove_ReceiveCompleted(self, value: ReceiveCompletedEventHandler) -> None: ...
    def ResetPermissions(self) -> None: ...
    @overload
    def Send(self, obj: Object) -> None: ...
    @overload
    def Send(self, obj: Object, transaction: MessageQueueTransaction) -> None: ...
    @overload
    def Send(self, obj: Object, label: str) -> None: ...
    @overload
    def Send(self, obj: Object, transactionType: MessageQueueTransactionType) -> None: ...
    @overload
    def Send(self, obj: Object, label: str, transactionType: MessageQueueTransactionType) -> None: ...
    @overload
    def Send(self, obj: Object, label: str, transaction: MessageQueueTransaction) -> None: ...
    @Authenticate.setter
    def Authenticate(self, value: bool) -> None: ...
    @BasePriority.setter
    def BasePriority(self, value: Int16) -> None: ...
    @Category.setter
    def Category(self, value: Guid) -> None: ...
    @DefaultPropertiesToSend.setter
    def DefaultPropertiesToSend(self, value: DefaultPropertiesToSend) -> None: ...
    @DenySharedReceive.setter
    def DenySharedReceive(self, value: bool) -> None: ...
    @EnableConnectionCache.setter
    def EnableConnectionCache(value: bool) -> None: ...
    @EncryptionRequired.setter
    def EncryptionRequired(self, value: EncryptionRequired) -> None: ...
    @Formatter.setter
    def Formatter(self, value: IMessageFormatter) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...
    @MaximumJournalSize.setter
    def MaximumJournalSize(self, value: Int64) -> None: ...
    @MaximumQueueSize.setter
    def MaximumQueueSize(self, value: Int64) -> None: ...
    @MessageReadPropertyFilter.setter
    def MessageReadPropertyFilter(self, value: MessagePropertyFilter) -> None: ...
    @MulticastAddress.setter
    def MulticastAddress(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @QueueName.setter
    def QueueName(self, value: str) -> None: ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: ISynchronizeInvoke) -> None: ...
    @UseJournalQueue.setter
    def UseJournalQueue(self, value: bool) -> None: ...
    @overload
    def SetPermissions(self, ace: MessageQueueAccessControlEntry) -> None: ...
    @overload
    def SetPermissions(self, dacl: AccessControlList) -> None: ...
    @overload
    def SetPermissions(self, user: str, rights: MessageQueueAccessRights) -> None: ...
    @overload
    def SetPermissions(self, user: str, rights: MessageQueueAccessRights, entryType: AccessControlEntryType) -> None: ...


class MessageQueueAccessControlEntry(AccessControlEntry):
    @overload
    def __init__(self, trustee: Trustee, rights: MessageQueueAccessRights): ...
    @overload
    def __init__(self, trustee: Trustee, rights: MessageQueueAccessRights, entryType: AccessControlEntryType): ...
    @property
    def MessageQueueAccessRights(self) -> MessageQueueAccessRights: ...
    @MessageQueueAccessRights.setter
    def MessageQueueAccessRights(self, value: MessageQueueAccessRights) -> None: ...


class MessageQueueAccessRights:
    DeleteMessage = 1
    PeekMessage = 2
    ReceiveMessage = 3
    WriteMessage = 4
    DeleteJournalMessage = 8
    ReceiveJournalMessage = 10
    SetQueueProperties = 16
    GetQueueProperties = 32
    DeleteQueue = 65536
    GetQueuePermissions = 131072
    GenericWrite = 131108
    GenericRead = 131115
    ChangeQueuePermissions = 262144
    TakeQueueOwnership = 524288
    FullControl = 983103


class MessageQueueCriteria(Object):
    def __init__(self): ...
    def ClearAll(self) -> None: ...
    @property
    def Category(self) -> Guid: ...
    @property
    def CreatedAfter(self) -> DateTime: ...
    @property
    def CreatedBefore(self) -> DateTime: ...
    @property
    def Label(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def ModifiedAfter(self) -> DateTime: ...
    @property
    def ModifiedBefore(self) -> DateTime: ...
    @Category.setter
    def Category(self, value: Guid) -> None: ...
    @CreatedAfter.setter
    def CreatedAfter(self, value: DateTime) -> None: ...
    @CreatedBefore.setter
    def CreatedBefore(self, value: DateTime) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...
    @ModifiedAfter.setter
    def ModifiedAfter(self, value: DateTime) -> None: ...
    @ModifiedBefore.setter
    def ModifiedBefore(self, value: DateTime) -> None: ...


class MessageQueueEnumerator(MarshalByRefObject):
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Current(self) -> MessageQueue: ...
    @property
    def LocatorHandle(self) -> IntPtr: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class MessageQueueErrorCode:
    Base = -1072824320
    Generic = -1072824319
    Property = -1072824318
    QueueNotFound = -1072824317
    QueueExists = -1072824315
    InvalidParameter = -1072824314
    InvalidHandle = -1072824313
    OperationCanceled = -1072824312
    SharingViolation = -1072824311
    ServiceNotAvailable = -1072824309
    MachineNotFound = -1072824307
    IllegalSort = -1072824304
    IllegalUser = -1072824303
    NoDs = -1072824301
    IllegalQueuePathName = -1072824300
    IllegalPropertyValue = -1072824296
    IllegalPropertyVt = -1072824295
    BufferOverflow = -1072824294
    IOTimeout = -1072824293
    IllegalCursorAction = -1072824292
    MessageAlreadyReceived = -1072824291
    IllegalFormatName = -1072824290
    FormatNameBufferTooSmall = -1072824289
    UnsupportedFormatNameOperation = -1072824288
    IllegalSecurityDescriptor = -1072824287
    SenderIdBufferTooSmall = -1072824286
    SecurityDescriptorBufferTooSmall = -1072824285
    CannotImpersonateClient = -1072824284
    AccessDenied = -1072824283
    PrivilegeNotHeld = -1072824282
    InsufficientResources = -1072824281
    UserBufferTooSmall = -1072824280
    MessageStorageFailed = -1072824278
    SenderCertificateBufferTooSmall = -1072824277
    InvalidCertificate = -1072824276
    CorruptedInternalCertificate = -1072824275
    NoInternalUserCertificate = -1072824273
    CorruptedSecurityData = -1072824272
    CorruptedPersonalCertStore = -1072824271
    ComputerDoesNotSupportEncryption = -1072824269
    BadSecurityContext = -1072824267
    CouldNotGetUserSid = -1072824266
    CouldNotGetAccountInfo = -1072824265
    IllegalCriteriaColumns = -1072824264
    IllegalPropertyId = -1072824263
    IllegalRelation = -1072824262
    IllegalPropertySize = -1072824261
    IllegalRestrictionPropertyId = -1072824260
    IllegalQueueProperties = -1072824259
    PropertyNotAllowed = -1072824258
    InsufficientProperties = -1072824257
    MachineExists = -1072824256
    IllegalMessageProperties = -1072824255
    DsIsFull = -1072824254
    DsError = -1072824253
    InvalidOwner = -1072824252
    UnsupportedAccessMode = -1072824251
    ResultBufferTooSmall = -1072824250
    DeleteConnectedNetworkInUse = -1072824248
    NoResponseFromObjectServer = -1072824247
    ObjectServerNotAvailable = -1072824246
    QueueNotAvailable = -1072824245
    DtcConnect = -1072824244
    TransactionImport = -1072824242
    TransactionUsage = -1072824240
    TransactionSequence = -1072824239
    MissingConnectorType = -1072824235
    StaleHandle = -1072824234
    TransactionEnlist = -1072824232
    QueueDeleted = -1072824230
    IllegalContext = -1072824229
    IllegalSortPropertyId = -1072824228
    LabelBufferTooSmall = -1072824226
    MqisServerEmpty = -1072824225
    MqisReadOnlyMode = -1072824224
    SymmetricKeyBufferTooSmall = -1072824223
    SignatureBufferTooSmall = -1072824222
    ProviderNameBufferTooSmall = -1072824221
    IllegalOperation = -1072824220
    WriteNotAllowed = -1072824219
    WksCantServeClient = -1072824218
    DependentClientLicenseOverflow = -1072824217
    CorruptedQueueWasDeleted = -1072824216
    RemoteMachineNotAvailable = -1072824215
    UnsupportedOperation = -1072824214
    EncryptionProviderNotSupported = -1072824213
    CannotSetCryptographicSecurityDescriptor = -1072824212
    CertificateNotProvided = -1072824211
    QDnsPropertyNotSupported = -1072824210
    CannotCreateCertificateStore = -1072824209
    CannotOpenCertificateStore = -1072824208
    IllegalEnterpriseOperation = -1072824207
    CannotGrantAddGuid = -1072824206
    CannotLoadMsmqOcm = -1072824205
    NoEntryPointMsmqOcm = -1072824204
    NoMsmqServersOnDc = -1072824203
    CannotJoinDomain = -1072824202
    CannotCreateOnGlobalCatalog = -1072824201
    GuidNotMatching = -1072824200
    PublicKeyNotFound = -1072824199
    PublicKeyDoesNotExist = -1072824198
    IllegalPrivateProperties = -1072824197
    NoGlobalCatalogInDomain = -1072824196
    NoMsmqServersOnGlobalCatalog = -1072824195
    CannotGetDistinguishedName = -1072824194
    CannotHashDataEx = -1072824193
    CannotSignDataEx = -1072824192
    CannotCreateHashEx = -1072824191
    FailVerifySignatureEx = -1072824190
    MessageNotFound = -1072824184


class MessageQueueException(ExternalException):
    @property
    def Message(self) -> str: ...
    @property
    def MessageQueueErrorCode(self) -> MessageQueueErrorCode: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class MessageQueueInstaller(ComponentInstaller):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, componentToCopy: MessageQueue): ...
    def Commit(self, savedState: IDictionary) -> None: ...
    def CopyFromComponent(self, component: IComponent) -> None: ...
    @property
    def Authenticate(self) -> bool: ...
    @property
    def BasePriority(self) -> Int16: ...
    @property
    def Category(self) -> Guid: ...
    @property
    def EncryptionRequired(self) -> EncryptionRequired: ...
    @property
    def Label(self) -> str: ...
    @property
    def MaximumJournalSize(self) -> Int64: ...
    @property
    def MaximumQueueSize(self) -> Int64: ...
    @property
    def MulticastAddress(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def Permissions(self) -> AccessControlList: ...
    @property
    def Transactional(self) -> bool: ...
    @property
    def UninstallAction(self) -> UninstallAction: ...
    @property
    def UseJournalQueue(self) -> bool: ...
    def Install(self, stateSaver: IDictionary) -> None: ...
    def IsEquivalentInstaller(self, otherInstaller: ComponentInstaller) -> bool: ...
    def Rollback(self, savedState: IDictionary) -> None: ...
    @Authenticate.setter
    def Authenticate(self, value: bool) -> None: ...
    @BasePriority.setter
    def BasePriority(self, value: Int16) -> None: ...
    @Category.setter
    def Category(self, value: Guid) -> None: ...
    @EncryptionRequired.setter
    def EncryptionRequired(self, value: EncryptionRequired) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...
    @MaximumJournalSize.setter
    def MaximumJournalSize(self, value: Int64) -> None: ...
    @MaximumQueueSize.setter
    def MaximumQueueSize(self, value: Int64) -> None: ...
    @MulticastAddress.setter
    def MulticastAddress(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @Permissions.setter
    def Permissions(self, value: AccessControlList) -> None: ...
    @Transactional.setter
    def Transactional(self, value: bool) -> None: ...
    @UninstallAction.setter
    def UninstallAction(self, value: UninstallAction) -> None: ...
    @UseJournalQueue.setter
    def UseJournalQueue(self, value: bool) -> None: ...
    def Uninstall(self, savedState: IDictionary) -> None: ...


class MessageQueuePermission(CodeAccessPermission):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, state: PermissionState): ...
    @overload
    def __init__(self, permissionAccessEntries: Set(MessageQueuePermissionEntry)): ...
    @overload
    def __init__(self, permissionAccess: MessageQueuePermissionAccess, path: str): ...
    @overload
    def __init__(self, permissionAccess: MessageQueuePermissionAccess, machineName: str, label: str, category: str): ...
    def Copy(self) -> IPermission: ...
    def FromXml(self, securityElement: SecurityElement) -> None: ...
    @property
    def PermissionEntries(self) -> MessageQueuePermissionEntryCollection: ...
    def Intersect(self, target: IPermission) -> IPermission: ...
    def IsSubsetOf(self, target: IPermission) -> bool: ...
    def IsUnrestricted(self) -> bool: ...
    def ToXml(self) -> SecurityElement: ...
    def Union(self, target: IPermission) -> IPermission: ...


class MessageQueuePermissionAccess:
    #None = 0
    Browse = 2
    Send = 6
    Peek = 10
    Receive = 26
    Administer = 62


class MessageQueuePermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...
    @property
    def Category(self) -> str: ...
    @property
    def Label(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def PermissionAccess(self) -> MessageQueuePermissionAccess: ...
    @Category.setter
    def Category(self, value: str) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @PermissionAccess.setter
    def PermissionAccess(self, value: MessageQueuePermissionAccess) -> None: ...


class MessageQueuePermissionEntry(Object):
    @overload
    def __init__(self, permissionAccess: MessageQueuePermissionAccess, path: str): ...
    @overload
    def __init__(self, permissionAccess: MessageQueuePermissionAccess, machineName: str, label: str, category: str): ...
    @property
    def Category(self) -> str: ...
    @property
    def Label(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def PermissionAccess(self) -> MessageQueuePermissionAccess: ...


class MessageQueuePermissionEntryCollection(CollectionBase):
    def Add(self, value: MessageQueuePermissionEntry) -> int: ...
    @overload
    def AddRange(self, value: Set(MessageQueuePermissionEntry)) -> None: ...
    @overload
    def AddRange(self, value: MessageQueuePermissionEntryCollection) -> None: ...
    def Contains(self, value: MessageQueuePermissionEntry) -> bool: ...
    def CopyTo(self, array: Set(MessageQueuePermissionEntry), index: int) -> None: ...
    @property
    def Item(self, index: int) -> MessageQueuePermissionEntry: ...
    def IndexOf(self, value: MessageQueuePermissionEntry) -> int: ...
    def Insert(self, index: int, value: MessageQueuePermissionEntry) -> None: ...
    def Remove(self, value: MessageQueuePermissionEntry) -> None: ...
    @Item.setter
    def Item(self, index: int, value: MessageQueuePermissionEntry) -> None: ...


class MessageQueueTransaction(Object):
    def __init__(self): ...
    def Abort(self) -> None: ...
    def Begin(self) -> None: ...
    def Commit(self) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Status(self) -> MessageQueueTransactionStatus: ...


class MessageQueueTransactionStatus:
    Aborted = 0
    Committed = 1
    Initialized = 2
    Pending = 3


class MessageQueueTransactionType:
    #None = 0
    Automatic = 1
    Single = 3


class MessageType:
    Acknowledgment = 1
    Normal = 2
    Report = 3


class MessagingDescriptionAttribute(DescriptionAttribute):
    def __init__(self, description: str): ...
    @property
    def Description(self) -> str: ...


class PeekAction:
    Current = -2147483648
    Next = -2147483647


class PeekCompletedEventArgs(EventArgs):
    @property
    def AsyncResult(self) -> IAsyncResult: ...
    @property
    def Message(self) -> Message: ...
    @AsyncResult.setter
    def AsyncResult(self, value: IAsyncResult) -> None: ...


class PeekCompletedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PeekCompletedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PeekCompletedEventArgs) -> None: ...


class QueueAccessMode:
    Receive = 1
    Send = 2
    SendAndReceive = 3
    Peek = 32
    ReceiveAndAdmin = 129
    PeekAndAdmin = 160


class ReceiveCompletedEventArgs(EventArgs):
    @property
    def AsyncResult(self) -> IAsyncResult: ...
    @property
    def Message(self) -> Message: ...
    @AsyncResult.setter
    def AsyncResult(self, value: IAsyncResult) -> None: ...


class ReceiveCompletedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ReceiveCompletedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ReceiveCompletedEventArgs) -> None: ...


class SecurityContext(Object):
    def Dispose(self) -> None: ...


class StandardAccessRights:
    #None = 0
    Delete = 65536
    Read = 131072
    Write = 131072
    Execute = 131072
    ReadSecurity = 131072
    WriteSecurity = 262144
    ModifyOwner = 524288
    Required = 851968
    Synchronize = 1048576
    All = 2031616


class Trustee(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, systemName: str): ...
    @overload
    def __init__(self, name: str, systemName: str, trusteeType: TrusteeType): ...
    @property
    def Name(self) -> str: ...
    @property
    def SystemName(self) -> str: ...
    @property
    def TrusteeType(self) -> TrusteeType: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SystemName.setter
    def SystemName(self, value: str) -> None: ...
    @TrusteeType.setter
    def TrusteeType(self, value: TrusteeType) -> None: ...


class TrusteeType:
    Unknown = 0
    User = 1
    Group = 2
    Domain = 3
    Alias = 4
    Computer = 5


class XmlMessageFormatter(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, targetTypeNames: Set(str)): ...
    @overload
    def __init__(self, targetTypes: Set(Type)): ...
    def CanRead(self, message: Message) -> bool: ...
    def Clone(self) -> Object: ...
    @property
    def TargetTypeNames(self) -> Set(str): ...
    @property
    def TargetTypes(self) -> Set(Type): ...
    def Read(self, message: Message) -> Object: ...
    @TargetTypeNames.setter
    def TargetTypeNames(self, value: Set(str)) -> None: ...
    @TargetTypes.setter
    def TargetTypes(self, value: Set(Type)) -> None: ...
    def Write(self, message: Message, obj: Object) -> None: ...
