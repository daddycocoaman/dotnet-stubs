__all__ = ['TtsEngine']
from typing import Tuple, Set, Iterable, List


class BookmarkReachedEventArgs(PromptEventArgs):
    @property
    def AudioPosition(self) -> TimeSpan: ...
    @property
    def Bookmark(self) -> str: ...


class FilePrompt(Prompt):
    @overload
    def __init__(self, path: str, media: SynthesisMediaType): ...
    @overload
    def __init__(self, promptFile: Uri, media: SynthesisMediaType): ...


class InstalledVoice(Object):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def VoiceInfo(self) -> VoiceInfo: ...
    def GetHashCode(self) -> int: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...


class PhonemeReachedEventArgs(PromptEventArgs):
    @property
    def AudioPosition(self) -> TimeSpan: ...
    @property
    def Duration(self) -> TimeSpan: ...
    @property
    def Emphasis(self) -> SynthesizerEmphasis: ...
    @property
    def NextPhoneme(self) -> str: ...
    @property
    def Phoneme(self) -> str: ...


class Prompt(Object):
    @overload
    def __init__(self, textToSpeak: str): ...
    @overload
    def __init__(self, promptBuilder: PromptBuilder): ...
    @overload
    def __init__(self, textToSpeak: str, media: SynthesisTextFormat): ...
    @property
    def IsCompleted(self) -> bool: ...


class PromptBreak:
    #None = 0
    ExtraSmall = 1
    Small = 2
    Medium = 3
    Large = 4
    ExtraLarge = 5


class PromptBuilder(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, culture: CultureInfo): ...
    @overload
    def AppendAudio(self, path: str) -> None: ...
    @overload
    def AppendAudio(self, audioFile: Uri) -> None: ...
    @overload
    def AppendAudio(self, audioFile: Uri, alternateText: str) -> None: ...
    def AppendBookmark(self, bookmarkName: str) -> None: ...
    @overload
    def AppendBreak(self) -> None: ...
    @overload
    def AppendBreak(self, duration: TimeSpan) -> None: ...
    @overload
    def AppendBreak(self, strength: PromptBreak) -> None: ...
    def AppendPromptBuilder(self, promptBuilder: PromptBuilder) -> None: ...
    @overload
    def AppendSsml(self, ssmlFile: XmlReader) -> None: ...
    @overload
    def AppendSsml(self, ssmlFile: Uri) -> None: ...
    @overload
    def AppendSsml(self, path: str) -> None: ...
    def AppendSsmlMarkup(self, ssmlMarkup: str) -> None: ...
    @overload
    def AppendText(self, textToSpeak: str) -> None: ...
    @overload
    def AppendText(self, textToSpeak: str, emphasis: PromptEmphasis) -> None: ...
    @overload
    def AppendText(self, textToSpeak: str, volume: PromptVolume) -> None: ...
    @overload
    def AppendText(self, textToSpeak: str, rate: PromptRate) -> None: ...
    def AppendTextWithAlias(self, textToSpeak: str, substitute: str) -> None: ...
    @overload
    def AppendTextWithHint(self, textToSpeak: str, sayAs: str) -> None: ...
    @overload
    def AppendTextWithHint(self, textToSpeak: str, sayAs: SayAs) -> None: ...
    def AppendTextWithPronunciation(self, textToSpeak: str, pronunciation: str) -> None: ...
    def ClearContent(self) -> None: ...
    def EndParagraph(self) -> None: ...
    def EndSentence(self) -> None: ...
    def EndStyle(self) -> None: ...
    def EndVoice(self) -> None: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def IsEmpty(self) -> bool: ...
    @Culture.setter
    def Culture(self, value: CultureInfo) -> None: ...
    @overload
    def StartParagraph(self) -> None: ...
    @overload
    def StartParagraph(self, culture: CultureInfo) -> None: ...
    @overload
    def StartSentence(self) -> None: ...
    @overload
    def StartSentence(self, culture: CultureInfo) -> None: ...
    def StartStyle(self, style: PromptStyle) -> None: ...
    @overload
    def StartVoice(self, name: str) -> None: ...
    @overload
    def StartVoice(self, voice: VoiceInfo) -> None: ...
    @overload
    def StartVoice(self, gender: VoiceGender) -> None: ...
    @overload
    def StartVoice(self, culture: CultureInfo) -> None: ...
    @overload
    def StartVoice(self, gender: VoiceGender, age: VoiceAge) -> None: ...
    @overload
    def StartVoice(self, gender: VoiceGender, age: VoiceAge, voiceAlternate: int) -> None: ...
    def ToXml(self) -> str: ...


class PromptEmphasis:
    NotSet = 0
    Strong = 1
    Moderate = 2
    #None = 3
    Reduced = 4


class PromptEventArgs(AsyncCompletedEventArgs):
    @property
    def Prompt(self) -> Prompt: ...


class PromptRate:
    NotSet = 0
    ExtraFast = 1
    Fast = 2
    Medium = 3
    Slow = 4
    ExtraSlow = 5


class PromptStyle(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rate: PromptRate): ...
    @overload
    def __init__(self, volume: PromptVolume): ...
    @overload
    def __init__(self, emphasis: PromptEmphasis): ...
    @property
    def Emphasis(self) -> PromptEmphasis: ...
    @property
    def Rate(self) -> PromptRate: ...
    @property
    def Volume(self) -> PromptVolume: ...
    @Emphasis.setter
    def Emphasis(self, value: PromptEmphasis) -> None: ...
    @Rate.setter
    def Rate(self, value: PromptRate) -> None: ...
    @Volume.setter
    def Volume(self, value: PromptVolume) -> None: ...


class PromptVolume:
    NotSet = 0
    Silent = 1
    ExtraSoft = 2
    Soft = 3
    Medium = 4
    Loud = 5
    ExtraLoud = 6
    Default = 7


class SayAs:
    SpellOut = 0
    NumberOrdinal = 1
    NumberCardinal = 2
    Date = 3
    DayMonthYear = 4
    MonthDayYear = 5
    YearMonthDay = 6
    YearMonth = 7
    MonthYear = 8
    MonthDay = 9
    DayMonth = 10
    Year = 11
    Month = 12
    Day = 13
    Time = 14
    Time24 = 15
    Time12 = 16
    Telephone = 17
    Text = 18


class SpeakCompletedEventArgs(PromptEventArgs):
    pass


class SpeakProgressEventArgs(PromptEventArgs):
    @property
    def AudioPosition(self) -> TimeSpan: ...
    @property
    def CharacterCount(self) -> int: ...
    @property
    def CharacterPosition(self) -> int: ...
    @property
    def Text(self) -> str: ...


class SpeakStartedEventArgs(PromptEventArgs):
    pass


class SpeechSynthesizer(Object):
    def __init__(self): ...
    def add_BookmarkReached(self, value: EventHandler) -> None: ...
    def add_PhonemeReached(self, value: EventHandler) -> None: ...
    def add_SpeakCompleted(self, value: EventHandler) -> None: ...
    def add_SpeakProgress(self, value: EventHandler) -> None: ...
    def add_SpeakStarted(self, value: EventHandler) -> None: ...
    def add_StateChanged(self, value: EventHandler) -> None: ...
    def add_VisemeReached(self, value: EventHandler) -> None: ...
    def add_VoiceChange(self, value: EventHandler) -> None: ...
    def AddLexicon(self, uri: Uri, mediaType: str) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Rate(self) -> int: ...
    @property
    def State(self) -> SynthesizerState: ...
    @property
    def Voice(self) -> VoiceInfo: ...
    @property
    def Volume(self) -> int: ...
    def GetCurrentlySpokenPrompt(self) -> Prompt: ...
    @overload
    def GetInstalledVoices(self) -> ReadOnlyCollection: ...
    @overload
    def GetInstalledVoices(self, culture: CultureInfo) -> ReadOnlyCollection: ...
    def Pause(self) -> None: ...
    def remove_BookmarkReached(self, value: EventHandler) -> None: ...
    def remove_PhonemeReached(self, value: EventHandler) -> None: ...
    def remove_SpeakCompleted(self, value: EventHandler) -> None: ...
    def remove_SpeakProgress(self, value: EventHandler) -> None: ...
    def remove_SpeakStarted(self, value: EventHandler) -> None: ...
    def remove_StateChanged(self, value: EventHandler) -> None: ...
    def remove_VisemeReached(self, value: EventHandler) -> None: ...
    def remove_VoiceChange(self, value: EventHandler) -> None: ...
    def RemoveLexicon(self, uri: Uri) -> None: ...
    def Resume(self) -> None: ...
    def SelectVoice(self, name: str) -> None: ...
    @overload
    def SelectVoiceByHints(self, gender: VoiceGender) -> None: ...
    @overload
    def SelectVoiceByHints(self, gender: VoiceGender, age: VoiceAge) -> None: ...
    @overload
    def SelectVoiceByHints(self, gender: VoiceGender, age: VoiceAge, voiceAlternate: int) -> None: ...
    @overload
    def SelectVoiceByHints(self, gender: VoiceGender, age: VoiceAge, voiceAlternate: int, culture: CultureInfo) -> None: ...
    @Rate.setter
    def Rate(self, value: int) -> None: ...
    @Volume.setter
    def Volume(self, value: int) -> None: ...
    def SetOutputToAudioStream(self, audioDestination: Stream, formatInfo: SpeechAudioFormatInfo) -> None: ...
    def SetOutputToDefaultAudioDevice(self) -> None: ...
    def SetOutputToNull(self) -> None: ...
    @overload
    def SetOutputToWaveFile(self, path: str) -> None: ...
    @overload
    def SetOutputToWaveFile(self, path: str, formatInfo: SpeechAudioFormatInfo) -> None: ...
    def SetOutputToWaveStream(self, audioDestination: Stream) -> None: ...
    @overload
    def Speak(self, textToSpeak: str) -> None: ...
    @overload
    def Speak(self, promptBuilder: PromptBuilder) -> None: ...
    @overload
    def Speak(self, prompt: Prompt) -> None: ...
    @overload
    def SpeakAsync(self, promptBuilder: PromptBuilder) -> Prompt: ...
    @overload
    def SpeakAsync(self, prompt: Prompt) -> None: ...
    @overload
    def SpeakAsync(self, textToSpeak: str) -> Prompt: ...
    def SpeakAsyncCancel(self, prompt: Prompt) -> None: ...
    def SpeakAsyncCancelAll(self) -> None: ...
    def SpeakSsml(self, textToSpeak: str) -> None: ...
    def SpeakSsmlAsync(self, textToSpeak: str) -> Prompt: ...


class StateChangedEventArgs(EventArgs):
    @property
    def PreviousState(self) -> SynthesizerState: ...
    @property
    def State(self) -> SynthesizerState: ...


class SynthesisMediaType:
    Text = 0
    Ssml = 1
    WaveAudio = 2


class SynthesisTextFormat:
    Text = 0
    Ssml = 1


class SynthesizerEmphasis:
    Stressed = 1
    Emphasized = 2


class SynthesizerState:
    Ready = 0
    Speaking = 1
    Paused = 2


class VisemeReachedEventArgs(PromptEventArgs):
    @property
    def AudioPosition(self) -> TimeSpan: ...
    @property
    def Duration(self) -> TimeSpan: ...
    @property
    def Emphasis(self) -> SynthesizerEmphasis: ...
    @property
    def NextViseme(self) -> int: ...
    @property
    def Viseme(self) -> int: ...


class VoiceAge:
    NotSet = 0
    Child = 10
    Teen = 15
    Adult = 30
    Senior = 65


class VoiceChangeEventArgs(PromptEventArgs):
    @property
    def Voice(self) -> VoiceInfo: ...


class VoiceGender:
    NotSet = 0
    Male = 1
    Female = 2
    Neutral = 3


class VoiceInfo(Object):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AdditionalInfo(self) -> IDictionary: ...
    @property
    def Age(self) -> VoiceAge: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def Description(self) -> str: ...
    @property
    def Gender(self) -> VoiceGender: ...
    @property
    def Id(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def SupportedAudioFormats(self) -> ReadOnlyCollection: ...
    def GetHashCode(self) -> int: ...
