from typing import Tuple, Set, Iterable, List


class SrgsDocument(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, srgsGrammar: XmlReader): ...
    @overload
    def __init__(self, builder: GrammarBuilder): ...
    @overload
    def __init__(self, grammarRootRule: SrgsRule): ...
    @property
    def AssemblyReferences(self) -> Collection: ...
    @property
    def CodeBehind(self) -> Collection: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def Debug(self) -> bool: ...
    @property
    def ImportNamespaces(self) -> Collection: ...
    @property
    def Language(self) -> str: ...
    @property
    def Mode(self) -> SrgsGrammarMode: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def PhoneticAlphabet(self) -> SrgsPhoneticAlphabet: ...
    @property
    def Root(self) -> SrgsRule: ...
    @property
    def Rules(self) -> SrgsRulesCollection: ...
    @property
    def Script(self) -> str: ...
    @property
    def XmlBase(self) -> Uri: ...
    @Culture.setter
    def Culture(self, value: CultureInfo) -> None: ...
    @Debug.setter
    def Debug(self, value: bool) -> None: ...
    @Language.setter
    def Language(self, value: str) -> None: ...
    @Mode.setter
    def Mode(self, value: SrgsGrammarMode) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @PhoneticAlphabet.setter
    def PhoneticAlphabet(self, value: SrgsPhoneticAlphabet) -> None: ...
    @Root.setter
    def Root(self, value: SrgsRule) -> None: ...
    @Script.setter
    def Script(self, value: str) -> None: ...
    @XmlBase.setter
    def XmlBase(self, value: Uri) -> None: ...
    def WriteSrgs(self, srgsGrammar: XmlWriter) -> None: ...


class SrgsElement(MarshalByRefObject):
    pass


class SrgsGrammarCompiler(Object):
    @overload
    def Compile(inputPath: str, outputStream: Stream) -> None: ...
    @overload
    def Compile(srgsGrammar: SrgsDocument, outputStream: Stream) -> None: ...
    @overload
    def Compile(reader: XmlReader, outputStream: Stream) -> None: ...
    @overload
    def CompileClassLibrary(inputPaths: Set(str), outputPath: str, referencedAssemblies: Set(str), keyFile: str) -> None: ...
    @overload
    def CompileClassLibrary(srgsGrammar: SrgsDocument, outputPath: str, referencedAssemblies: Set(str), keyFile: str) -> None: ...
    @overload
    def CompileClassLibrary(reader: XmlReader, outputPath: str, referencedAssemblies: Set(str), keyFile: str) -> None: ...


class SrgsGrammarMode:
    Voice = 0
    Dtmf = 1


class SrgsItem(SrgsElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, elements: Set(SrgsElement)): ...
    @overload
    def __init__(self, repeatCount: int): ...
    @overload
    def __init__(self, min: int, max: int): ...
    @overload
    def __init__(self, min: int, max: int, text: str): ...
    @overload
    def __init__(self, min: int, max: int, elements: Set(SrgsElement)): ...
    def Add(self, element: SrgsElement) -> None: ...
    @property
    def Elements(self) -> Collection: ...
    @property
    def MaxRepeat(self) -> int: ...
    @property
    def MinRepeat(self) -> int: ...
    @property
    def RepeatProbability(self) -> Single: ...
    @property
    def Weight(self) -> Single: ...
    @RepeatProbability.setter
    def RepeatProbability(self, value: Single) -> None: ...
    @Weight.setter
    def Weight(self, value: Single) -> None: ...
    @overload
    def SetRepeat(self, count: int) -> None: ...
    @overload
    def SetRepeat(self, minRepeat: int, maxRepeat: int) -> None: ...


class SrgsNameValueTag(SrgsElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Object): ...
    @overload
    def __init__(self, name: str, value: Object): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class SrgsOneOf(SrgsElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Set(str)): ...
    @overload
    def __init__(self, items: Set(SrgsItem)): ...
    def Add(self, item: SrgsItem) -> None: ...
    @property
    def Items(self) -> Collection: ...


class SrgsPhoneticAlphabet:
    Sapi = 0
    Ipa = 1
    Ups = 2


class SrgsRule(Object):
    @overload
    def __init__(self, id: str): ...
    @overload
    def __init__(self, id: str, elements: Set(SrgsElement)): ...
    def Add(self, element: SrgsElement) -> None: ...
    @property
    def BaseClass(self) -> str: ...
    @property
    def Elements(self) -> Collection: ...
    @property
    def Id(self) -> str: ...
    @property
    def OnError(self) -> str: ...
    @property
    def OnInit(self) -> str: ...
    @property
    def OnParse(self) -> str: ...
    @property
    def OnRecognition(self) -> str: ...
    @property
    def Scope(self) -> SrgsRuleScope: ...
    @property
    def Script(self) -> str: ...
    @BaseClass.setter
    def BaseClass(self, value: str) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...
    @OnError.setter
    def OnError(self, value: str) -> None: ...
    @OnInit.setter
    def OnInit(self, value: str) -> None: ...
    @OnParse.setter
    def OnParse(self, value: str) -> None: ...
    @OnRecognition.setter
    def OnRecognition(self, value: str) -> None: ...
    @Scope.setter
    def Scope(self, value: SrgsRuleScope) -> None: ...
    @Script.setter
    def Script(self, value: str) -> None: ...


class SrgsRuleRef(SrgsElement):
    @overload
    def __init__(self, uri: Uri): ...
    @overload
    def __init__(self, rule: SrgsRule): ...
    @overload
    def __init__(self, uri: Uri, rule: str): ...
    @overload
    def __init__(self, rule: SrgsRule, semanticKey: str): ...
    @overload
    def __init__(self, uri: Uri, rule: str, semanticKey: str): ...
    @overload
    def __init__(self, rule: SrgsRule, semanticKey: str, parameters: str): ...
    @overload
    def __init__(self, uri: Uri, rule: str, semanticKey: str, parameters: str): ...
    @property
    def Params(self) -> str: ...
    @property
    def SemanticKey(self) -> str: ...
    @property
    def Uri(self) -> Uri: ...


class SrgsRulesCollection:
    def __init__(self): ...
    @overload
    def Add(self, rules: Set(SrgsRule)) -> None: ...


class SrgsRuleScope:
    Public = 0
    Private = 1


class SrgsSemanticInterpretationTag(SrgsElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, script: str): ...
    @property
    def Script(self) -> str: ...
    @Script.setter
    def Script(self, value: str) -> None: ...


class SrgsSubset(SrgsElement):
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, text: str, matchingMode: SubsetMatchingMode): ...
    @property
    def MatchingMode(self) -> SubsetMatchingMode: ...
    @property
    def Text(self) -> str: ...
    @MatchingMode.setter
    def MatchingMode(self, value: SubsetMatchingMode) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class SrgsText(SrgsElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class SrgsToken(SrgsElement):
    def __init__(self, text: str): ...
    @property
    def Display(self) -> str: ...
    @property
    def Pronunciation(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @Display.setter
    def Display(self, value: str) -> None: ...
    @Pronunciation.setter
    def Pronunciation(self, value: str) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
