from typing import Tuple, Set, Iterable, List


class Converter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class ResXDataNode(Object):
    @overload
    def __init__(self, name: str, value: Object): ...
    @overload
    def __init__(self, name: str, fileRef: ResXFileRef): ...
    @overload
    def __init__(self, name: str, value: Object, typeNameConverter: Func): ...
    @overload
    def __init__(self, name: str, fileRef: ResXFileRef, typeNameConverter: Func): ...
    @property
    def Comment(self) -> str: ...
    @property
    def FileRef(self) -> ResXFileRef: ...
    @property
    def Name(self) -> str: ...
    def GetNodePosition(self) -> Point: ...
    @overload
    def GetValue(self, names: Set(AssemblyName)) -> Object: ...
    @overload
    def GetValue(self, typeResolver: ITypeResolutionService) -> Object: ...
    @overload
    def GetValueTypeName(self, typeResolver: ITypeResolutionService) -> str: ...
    @overload
    def GetValueTypeName(self, names: Set(AssemblyName)) -> str: ...
    @Comment.setter
    def Comment(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class ResXFileRef(Object):
    @overload
    def __init__(self, fileName: str, typeName: str): ...
    @overload
    def __init__(self, fileName: str, typeName: str, textFileEncoding: Encoding): ...
    @property
    def FileName(self) -> str: ...
    @property
    def TextFileEncoding(self) -> Encoding: ...
    @property
    def TypeName(self) -> str: ...
    def ToString(self) -> str: ...


class ResXResourceReader(Object):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, reader: TextReader): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, fileName: str, typeResolver: ITypeResolutionService): ...
    @overload
    def __init__(self, reader: TextReader, typeResolver: ITypeResolutionService): ...
    @overload
    def __init__(self, stream: Stream, typeResolver: ITypeResolutionService): ...
    @overload
    def __init__(self, stream: Stream, assemblyNames: Set(AssemblyName)): ...
    @overload
    def __init__(self, reader: TextReader, assemblyNames: Set(AssemblyName)): ...
    @overload
    def __init__(self, fileName: str, assemblyNames: Set(AssemblyName)): ...
    def Close(self) -> None: ...
    @overload
    def FromFileContents(fileContents: str) -> ResXResourceReader: ...
    @overload
    def FromFileContents(fileContents: str, typeResolver: ITypeResolutionService) -> ResXResourceReader: ...
    @overload
    def FromFileContents(fileContents: str, assemblyNames: Set(AssemblyName)) -> ResXResourceReader: ...
    @property
    def BasePath(self) -> str: ...
    @property
    def UseResXDataNodes(self) -> bool: ...
    def GetEnumerator(self) -> IDictionaryEnumerator: ...
    def GetMetadataEnumerator(self) -> IDictionaryEnumerator: ...
    @BasePath.setter
    def BasePath(self, value: str) -> None: ...
    @UseResXDataNodes.setter
    def UseResXDataNodes(self, value: bool) -> None: ...


class ResXResourceSet(ResourceSet):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    def GetDefaultReader(self) -> Type: ...
    def GetDefaultWriter(self) -> Type: ...


class ResXResourceWriter(Object):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, textWriter: TextWriter): ...
    @overload
    def __init__(self, fileName: str, typeNameConverter: Func): ...
    @overload
    def __init__(self, stream: Stream, typeNameConverter: Func): ...
    @overload
    def __init__(self, textWriter: TextWriter, typeNameConverter: Func): ...
    def AddAlias(self, aliasName: str, assemblyName: AssemblyName) -> None: ...
    @overload
    def AddMetadata(self, name: str, value: Set(Byte)) -> None: ...
    @overload
    def AddMetadata(self, name: str, value: str) -> None: ...
    @overload
    def AddMetadata(self, name: str, value: Object) -> None: ...
    @overload
    def AddResource(self, node: ResXDataNode) -> None: ...
    @overload
    def AddResource(self, name: str, value: Set(Byte)) -> None: ...
    @overload
    def AddResource(self, name: str, value: Object) -> None: ...
    @overload
    def AddResource(self, name: str, value: str) -> None: ...
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    def Generate(self) -> None: ...
    @property
    def BasePath(self) -> str: ...
    @BasePath.setter
    def BasePath(self, value: str) -> None: ...
