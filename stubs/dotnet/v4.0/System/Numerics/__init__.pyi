from typing import Tuple, Set, Iterable, List


class BigInteger(ValueType):
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: UInt32): ...
    @overload
    def __init__(self, value: Int64): ...
    @overload
    def __init__(self, value: UInt64): ...
    @overload
    def __init__(self, value: Single): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, value: Decimal): ...
    @overload
    def __init__(self, value: Set(Byte)): ...
    def Abs(value: BigInteger) -> BigInteger: ...
    def Add(left: BigInteger, right: BigInteger) -> BigInteger: ...
    def Compare(left: BigInteger, right: BigInteger) -> int: ...
    @overload
    def CompareTo(self, obj: Object) -> int: ...
    @overload
    def CompareTo(self, other: BigInteger) -> int: ...
    @overload
    def CompareTo(self, other: UInt64) -> int: ...
    @overload
    def CompareTo(self, other: Int64) -> int: ...
    def Divide(dividend: BigInteger, divisor: BigInteger) -> BigInteger: ...
    def DivRem(dividend: BigInteger, divisor: BigInteger) -> Tuple[BigInteger, BigInteger]: ...
    @overload
    def Equals(self, other: BigInteger) -> bool: ...
    @overload
    def Equals(self, other: UInt64) -> bool: ...
    @overload
    def Equals(self, other: Int64) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsEven(self) -> bool: ...
    @property
    def IsOne(self) -> bool: ...
    @property
    def IsPowerOfTwo(self) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def MinusOne() -> BigInteger: ...
    @property
    def One() -> BigInteger: ...
    @property
    def Sign(self) -> int: ...
    @property
    def Zero() -> BigInteger: ...
    def GetHashCode(self) -> int: ...
    def GreatestCommonDivisor(left: BigInteger, right: BigInteger) -> BigInteger: ...
    @overload
    def Log(value: BigInteger) -> float: ...
    @overload
    def Log(value: BigInteger, baseValue: float) -> float: ...
    def Log10(value: BigInteger) -> float: ...
    def Max(left: BigInteger, right: BigInteger) -> BigInteger: ...
    def Min(left: BigInteger, right: BigInteger) -> BigInteger: ...
    def ModPow(value: BigInteger, exponent: BigInteger, modulus: BigInteger) -> BigInteger: ...
    def Multiply(left: BigInteger, right: BigInteger) -> BigInteger: ...
    def Negate(value: BigInteger) -> BigInteger: ...
    def op_Addition(left: BigInteger, right: BigInteger) -> BigInteger: ...
    def op_BitwiseAnd(left: BigInteger, right: BigInteger) -> BigInteger: ...
    def op_BitwiseOr(left: BigInteger, right: BigInteger) -> BigInteger: ...
    def op_Decrement(value: BigInteger) -> BigInteger: ...
    def op_Division(dividend: BigInteger, divisor: BigInteger) -> BigInteger: ...
    @overload
    def op_Equality(left: BigInteger, right: BigInteger) -> bool: ...
    @overload
    def op_Equality(left: BigInteger, right: Int64) -> bool: ...
    @overload
    def op_Equality(left: Int64, right: BigInteger) -> bool: ...
    @overload
    def op_Equality(left: BigInteger, right: UInt64) -> bool: ...
    @overload
    def op_Equality(left: UInt64, right: BigInteger) -> bool: ...
    def op_ExclusiveOr(left: BigInteger, right: BigInteger) -> BigInteger: ...
    @overload
    def op_Explicit(value: BigInteger) -> Int16: ...
    @overload
    def op_Explicit(value: BigInteger) -> Decimal: ...
    @overload
    def op_Explicit(value: BigInteger) -> float: ...
    @overload
    def op_Explicit(value: BigInteger) -> Single: ...
    @overload
    def op_Explicit(value: BigInteger) -> UInt64: ...
    @overload
    def op_Explicit(value: BigInteger) -> Int64: ...
    @overload
    def op_Explicit(value: BigInteger) -> UInt32: ...
    @overload
    def op_Explicit(value: BigInteger) -> UInt16: ...
    @overload
    def op_Explicit(value: BigInteger) -> SByte: ...
    @overload
    def op_Explicit(value: BigInteger) -> int: ...
    @overload
    def op_Explicit(value: Decimal) -> BigInteger: ...
    @overload
    def op_Explicit(value: float) -> BigInteger: ...
    @overload
    def op_Explicit(value: Single) -> BigInteger: ...
    @overload
    def op_Explicit(value: BigInteger) -> Byte: ...
    @overload
    def op_GreaterThan(left: UInt64, right: BigInteger) -> bool: ...
    @overload
    def op_GreaterThan(left: BigInteger, right: UInt64) -> bool: ...
    @overload
    def op_GreaterThan(left: Int64, right: BigInteger) -> bool: ...
    @overload
    def op_GreaterThan(left: BigInteger, right: Int64) -> bool: ...
    @overload
    def op_GreaterThan(left: BigInteger, right: BigInteger) -> bool: ...
    @overload
    def op_GreaterThanOrEqual(left: UInt64, right: BigInteger) -> bool: ...
    @overload
    def op_GreaterThanOrEqual(left: BigInteger, right: UInt64) -> bool: ...
    @overload
    def op_GreaterThanOrEqual(left: Int64, right: BigInteger) -> bool: ...
    @overload
    def op_GreaterThanOrEqual(left: BigInteger, right: BigInteger) -> bool: ...
    @overload
    def op_GreaterThanOrEqual(left: BigInteger, right: Int64) -> bool: ...
    @overload
    def op_Implicit(value: SByte) -> BigInteger: ...
    @overload
    def op_Implicit(value: UInt64) -> BigInteger: ...
    @overload
    def op_Implicit(value: UInt16) -> BigInteger: ...
    @overload
    def op_Implicit(value: int) -> BigInteger: ...
    @overload
    def op_Implicit(value: Int64) -> BigInteger: ...
    @overload
    def op_Implicit(value: UInt32) -> BigInteger: ...
    @overload
    def op_Implicit(value: Byte) -> BigInteger: ...
    @overload
    def op_Implicit(value: Int16) -> BigInteger: ...
    def op_Increment(value: BigInteger) -> BigInteger: ...
    @overload
    def op_Inequality(left: UInt64, right: BigInteger) -> bool: ...
    @overload
    def op_Inequality(left: BigInteger, right: UInt64) -> bool: ...
    @overload
    def op_Inequality(left: BigInteger, right: BigInteger) -> bool: ...
    @overload
    def op_Inequality(left: Int64, right: BigInteger) -> bool: ...
    @overload
    def op_Inequality(left: BigInteger, right: Int64) -> bool: ...
    def op_LeftShift(value: BigInteger, shift: int) -> BigInteger: ...
    @overload
    def op_LessThan(left: BigInteger, right: BigInteger) -> bool: ...
    @overload
    def op_LessThan(left: BigInteger, right: UInt64) -> bool: ...
    @overload
    def op_LessThan(left: BigInteger, right: Int64) -> bool: ...
    @overload
    def op_LessThan(left: UInt64, right: BigInteger) -> bool: ...
    @overload
    def op_LessThan(left: Int64, right: BigInteger) -> bool: ...
    @overload
    def op_LessThanOrEqual(left: BigInteger, right: UInt64) -> bool: ...
    @overload
    def op_LessThanOrEqual(left: UInt64, right: BigInteger) -> bool: ...
    @overload
    def op_LessThanOrEqual(left: BigInteger, right: Int64) -> bool: ...
    @overload
    def op_LessThanOrEqual(left: BigInteger, right: BigInteger) -> bool: ...
    @overload
    def op_LessThanOrEqual(left: Int64, right: BigInteger) -> bool: ...
    def op_Modulus(dividend: BigInteger, divisor: BigInteger) -> BigInteger: ...
    def op_Multiply(left: BigInteger, right: BigInteger) -> BigInteger: ...
    def op_OnesComplement(value: BigInteger) -> BigInteger: ...
    def op_RightShift(value: BigInteger, shift: int) -> BigInteger: ...
    def op_Subtraction(left: BigInteger, right: BigInteger) -> BigInteger: ...
    def op_UnaryNegation(value: BigInteger) -> BigInteger: ...
    def op_UnaryPlus(value: BigInteger) -> BigInteger: ...
    @overload
    def Parse(value: str) -> BigInteger: ...
    @overload
    def Parse(value: str, style: NumberStyles) -> BigInteger: ...
    @overload
    def Parse(value: str, provider: IFormatProvider) -> BigInteger: ...
    @overload
    def Parse(value: str, style: NumberStyles, provider: IFormatProvider) -> BigInteger: ...
    def Pow(value: BigInteger, exponent: int) -> BigInteger: ...
    def Remainder(dividend: BigInteger, divisor: BigInteger) -> BigInteger: ...
    def Subtract(left: BigInteger, right: BigInteger) -> BigInteger: ...
    def ToByteArray(self) -> Set(Byte): ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, format: str) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format: str, provider: IFormatProvider) -> str: ...
    @overload
    def TryParse(value: str) -> Tuple[bool, BigInteger]: ...
    @overload
    def TryParse(value: str, style: NumberStyles, provider: IFormatProvider) -> Tuple[bool, BigInteger]: ...


class Complex(ValueType):
    def __init__(self, real: float, imaginary: float): ...
    def Abs(value: Complex) -> float: ...
    def Acos(value: Complex) -> Complex: ...
    def Add(left: Complex, right: Complex) -> Complex: ...
    def Asin(value: Complex) -> Complex: ...
    def Atan(value: Complex) -> Complex: ...
    def Conjugate(value: Complex) -> Complex: ...
    def Cos(value: Complex) -> Complex: ...
    def Cosh(value: Complex) -> Complex: ...
    def Divide(dividend: Complex, divisor: Complex) -> Complex: ...
    @overload
    def Equals(self, value: Complex) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def Exp(value: Complex) -> Complex: ...
    def FromPolarCoordinates(magnitude: float, phase: float) -> Complex: ...
    @property
    def Imaginary(self) -> float: ...
    @property
    def Magnitude(self) -> float: ...
    @property
    def Phase(self) -> float: ...
    @property
    def Real(self) -> float: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Log(value: Complex) -> Complex: ...
    @overload
    def Log(value: Complex, baseValue: float) -> Complex: ...
    def Log10(value: Complex) -> Complex: ...
    def Multiply(left: Complex, right: Complex) -> Complex: ...
    def Negate(value: Complex) -> Complex: ...
    def op_Addition(left: Complex, right: Complex) -> Complex: ...
    def op_Division(left: Complex, right: Complex) -> Complex: ...
    def op_Equality(left: Complex, right: Complex) -> bool: ...
    @overload
    def op_Explicit(value: Decimal) -> Complex: ...
    @overload
    def op_Explicit(value: BigInteger) -> Complex: ...
    @overload
    def op_Implicit(value: float) -> Complex: ...
    @overload
    def op_Implicit(value: SByte) -> Complex: ...
    @overload
    def op_Implicit(value: Byte) -> Complex: ...
    @overload
    def op_Implicit(value: UInt32) -> Complex: ...
    @overload
    def op_Implicit(value: UInt16) -> Complex: ...
    @overload
    def op_Implicit(value: Int64) -> Complex: ...
    @overload
    def op_Implicit(value: int) -> Complex: ...
    @overload
    def op_Implicit(value: Int16) -> Complex: ...
    @overload
    def op_Implicit(value: Single) -> Complex: ...
    @overload
    def op_Implicit(value: UInt64) -> Complex: ...
    def op_Inequality(left: Complex, right: Complex) -> bool: ...
    def op_Multiply(left: Complex, right: Complex) -> Complex: ...
    def op_Subtraction(left: Complex, right: Complex) -> Complex: ...
    def op_UnaryNegation(value: Complex) -> Complex: ...
    @overload
    def Pow(value: Complex, power: Complex) -> Complex: ...
    @overload
    def Pow(value: Complex, power: float) -> Complex: ...
    def Reciprocal(value: Complex) -> Complex: ...
    def Sin(value: Complex) -> Complex: ...
    def Sinh(value: Complex) -> Complex: ...
    def Sqrt(value: Complex) -> Complex: ...
    def Subtract(left: Complex, right: Complex) -> Complex: ...
    def Tan(value: Complex) -> Complex: ...
    def Tanh(value: Complex) -> Complex: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, format: str) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format: str, provider: IFormatProvider) -> str: ...


class Matrix3x2(ValueType):
    def __init__(self, m11: Single, m12: Single, m21: Single, m22: Single, m31: Single, m32: Single): ...
    def Add(value1: Matrix3x2, value2: Matrix3x2) -> Matrix3x2: ...
    @overload
    def CreateRotation(radians: Single) -> Matrix3x2: ...
    @overload
    def CreateRotation(radians: Single, centerPoint: Vector2) -> Matrix3x2: ...
    @overload
    def CreateScale(scale: Single) -> Matrix3x2: ...
    @overload
    def CreateScale(scales: Vector2) -> Matrix3x2: ...
    @overload
    def CreateScale(scale: Single, centerPoint: Vector2) -> Matrix3x2: ...
    @overload
    def CreateScale(scales: Vector2, centerPoint: Vector2) -> Matrix3x2: ...
    @overload
    def CreateScale(xScale: Single, yScale: Single) -> Matrix3x2: ...
    @overload
    def CreateScale(xScale: Single, yScale: Single, centerPoint: Vector2) -> Matrix3x2: ...
    @overload
    def CreateSkew(radiansX: Single, radiansY: Single) -> Matrix3x2: ...
    @overload
    def CreateSkew(radiansX: Single, radiansY: Single, centerPoint: Vector2) -> Matrix3x2: ...
    @overload
    def CreateTranslation(position: Vector2) -> Matrix3x2: ...
    @overload
    def CreateTranslation(xPosition: Single, yPosition: Single) -> Matrix3x2: ...
    @overload
    def Equals(self, other: Matrix3x2) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Identity() -> Matrix3x2: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def Translation(self) -> Vector2: ...
    def GetDeterminant(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    def Invert(matrix: Matrix3x2) -> Tuple[bool, Matrix3x2]: ...
    def Lerp(matrix1: Matrix3x2, matrix2: Matrix3x2, amount: Single) -> Matrix3x2: ...
    @overload
    def Multiply(value1: Matrix3x2, value2: Matrix3x2) -> Matrix3x2: ...
    @overload
    def Multiply(value1: Matrix3x2, value2: Single) -> Matrix3x2: ...
    def Negate(value: Matrix3x2) -> Matrix3x2: ...
    def op_Addition(value1: Matrix3x2, value2: Matrix3x2) -> Matrix3x2: ...
    def op_Equality(value1: Matrix3x2, value2: Matrix3x2) -> bool: ...
    def op_Inequality(value1: Matrix3x2, value2: Matrix3x2) -> bool: ...
    @overload
    def op_Multiply(value1: Matrix3x2, value2: Matrix3x2) -> Matrix3x2: ...
    @overload
    def op_Multiply(value1: Matrix3x2, value2: Single) -> Matrix3x2: ...
    def op_Subtraction(value1: Matrix3x2, value2: Matrix3x2) -> Matrix3x2: ...
    def op_UnaryNegation(value: Matrix3x2) -> Matrix3x2: ...
    @Translation.setter
    def Translation(self, value: Vector2) -> None: ...
    def Subtract(value1: Matrix3x2, value2: Matrix3x2) -> Matrix3x2: ...
    def ToString(self) -> str: ...


class Matrix4x4(ValueType):
    @overload
    def __init__(self, value: Matrix3x2): ...
    @overload
    def __init__(self, m11: Single, m12: Single, m13: Single, m14: Single, m21: Single, m22: Single, m23: Single, m24: Single, m31: Single, m32: Single, m33: Single, m34: Single, m41: Single, m42: Single, m43: Single, m44: Single): ...
    def Add(value1: Matrix4x4, value2: Matrix4x4) -> Matrix4x4: ...
    def CreateBillboard(objectPosition: Vector3, cameraPosition: Vector3, cameraUpVector: Vector3, cameraForwardVector: Vector3) -> Matrix4x4: ...
    def CreateConstrainedBillboard(objectPosition: Vector3, cameraPosition: Vector3, rotateAxis: Vector3, cameraForwardVector: Vector3, objectForwardVector: Vector3) -> Matrix4x4: ...
    def CreateFromAxisAngle(axis: Vector3, angle: Single) -> Matrix4x4: ...
    def CreateFromQuaternion(quaternion: Quaternion) -> Matrix4x4: ...
    def CreateFromYawPitchRoll(yaw: Single, pitch: Single, roll: Single) -> Matrix4x4: ...
    def CreateLookAt(cameraPosition: Vector3, cameraTarget: Vector3, cameraUpVector: Vector3) -> Matrix4x4: ...
    def CreateOrthographic(width: Single, height: Single, zNearPlane: Single, zFarPlane: Single) -> Matrix4x4: ...
    def CreateOrthographicOffCenter(left: Single, right: Single, bottom: Single, top: Single, zNearPlane: Single, zFarPlane: Single) -> Matrix4x4: ...
    def CreatePerspective(width: Single, height: Single, nearPlaneDistance: Single, farPlaneDistance: Single) -> Matrix4x4: ...
    def CreatePerspectiveFieldOfView(fieldOfView: Single, aspectRatio: Single, nearPlaneDistance: Single, farPlaneDistance: Single) -> Matrix4x4: ...
    def CreatePerspectiveOffCenter(left: Single, right: Single, bottom: Single, top: Single, nearPlaneDistance: Single, farPlaneDistance: Single) -> Matrix4x4: ...
    def CreateReflection(value: Plane) -> Matrix4x4: ...
    @overload
    def CreateRotationX(radians: Single) -> Matrix4x4: ...
    @overload
    def CreateRotationX(radians: Single, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    def CreateRotationY(radians: Single) -> Matrix4x4: ...
    @overload
    def CreateRotationY(radians: Single, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    def CreateRotationZ(radians: Single) -> Matrix4x4: ...
    @overload
    def CreateRotationZ(radians: Single, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    def CreateScale(scale: Single) -> Matrix4x4: ...
    @overload
    def CreateScale(scales: Vector3) -> Matrix4x4: ...
    @overload
    def CreateScale(scales: Vector3, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    def CreateScale(scale: Single, centerPoint: Vector3) -> Matrix4x4: ...
    @overload
    def CreateScale(xScale: Single, yScale: Single, zScale: Single) -> Matrix4x4: ...
    @overload
    def CreateScale(xScale: Single, yScale: Single, zScale: Single, centerPoint: Vector3) -> Matrix4x4: ...
    def CreateShadow(lightDirection: Vector3, plane: Plane) -> Matrix4x4: ...
    @overload
    def CreateTranslation(position: Vector3) -> Matrix4x4: ...
    @overload
    def CreateTranslation(xPosition: Single, yPosition: Single, zPosition: Single) -> Matrix4x4: ...
    def CreateWorld(position: Vector3, forward: Vector3, up: Vector3) -> Matrix4x4: ...
    def Decompose(matrix: Matrix4x4) -> Tuple[bool, Vector3, Quaternion, Vector3]: ...
    @overload
    def Equals(self, other: Matrix4x4) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Identity() -> Matrix4x4: ...
    @property
    def IsIdentity(self) -> bool: ...
    @property
    def Translation(self) -> Vector3: ...
    def GetDeterminant(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    def Invert(matrix: Matrix4x4) -> Tuple[bool, Matrix4x4]: ...
    def Lerp(matrix1: Matrix4x4, matrix2: Matrix4x4, amount: Single) -> Matrix4x4: ...
    @overload
    def Multiply(value1: Matrix4x4, value2: Matrix4x4) -> Matrix4x4: ...
    @overload
    def Multiply(value1: Matrix4x4, value2: Single) -> Matrix4x4: ...
    def Negate(value: Matrix4x4) -> Matrix4x4: ...
    def op_Addition(value1: Matrix4x4, value2: Matrix4x4) -> Matrix4x4: ...
    def op_Equality(value1: Matrix4x4, value2: Matrix4x4) -> bool: ...
    def op_Inequality(value1: Matrix4x4, value2: Matrix4x4) -> bool: ...
    @overload
    def op_Multiply(value1: Matrix4x4, value2: Matrix4x4) -> Matrix4x4: ...
    @overload
    def op_Multiply(value1: Matrix4x4, value2: Single) -> Matrix4x4: ...
    def op_Subtraction(value1: Matrix4x4, value2: Matrix4x4) -> Matrix4x4: ...
    def op_UnaryNegation(value: Matrix4x4) -> Matrix4x4: ...
    @Translation.setter
    def Translation(self, value: Vector3) -> None: ...
    def Subtract(value1: Matrix4x4, value2: Matrix4x4) -> Matrix4x4: ...
    def ToString(self) -> str: ...
    def Transform(value: Matrix4x4, rotation: Quaternion) -> Matrix4x4: ...
    def Transpose(matrix: Matrix4x4) -> Matrix4x4: ...


class Plane(ValueType):
    @overload
    def __init__(self, value: Vector4): ...
    @overload
    def __init__(self, normal: Vector3, d: Single): ...
    @overload
    def __init__(self, x: Single, y: Single, z: Single, d: Single): ...
    def CreateFromVertices(point1: Vector3, point2: Vector3, point3: Vector3) -> Plane: ...
    def Dot(plane: Plane, value: Vector4) -> Single: ...
    def DotCoordinate(plane: Plane, value: Vector3) -> Single: ...
    def DotNormal(plane: Plane, value: Vector3) -> Single: ...
    @overload
    def Equals(self, other: Plane) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Normalize(value: Plane) -> Plane: ...
    def op_Equality(value1: Plane, value2: Plane) -> bool: ...
    def op_Inequality(value1: Plane, value2: Plane) -> bool: ...
    def ToString(self) -> str: ...
    @overload
    def Transform(plane: Plane, matrix: Matrix4x4) -> Plane: ...
    @overload
    def Transform(plane: Plane, rotation: Quaternion) -> Plane: ...


class Quaternion(ValueType):
    @overload
    def __init__(self, vectorPart: Vector3, scalarPart: Single): ...
    @overload
    def __init__(self, x: Single, y: Single, z: Single, w: Single): ...
    def Add(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    def Concatenate(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    def Conjugate(value: Quaternion) -> Quaternion: ...
    def CreateFromAxisAngle(axis: Vector3, angle: Single) -> Quaternion: ...
    def CreateFromRotationMatrix(matrix: Matrix4x4) -> Quaternion: ...
    def CreateFromYawPitchRoll(yaw: Single, pitch: Single, roll: Single) -> Quaternion: ...
    def Divide(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    def Dot(quaternion1: Quaternion, quaternion2: Quaternion) -> Single: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Quaternion) -> bool: ...
    @property
    def Identity() -> Quaternion: ...
    @property
    def IsIdentity(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Inverse(value: Quaternion) -> Quaternion: ...
    def Length(self) -> Single: ...
    def LengthSquared(self) -> Single: ...
    def Lerp(quaternion1: Quaternion, quaternion2: Quaternion, amount: Single) -> Quaternion: ...
    @overload
    def Multiply(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    @overload
    def Multiply(value1: Quaternion, value2: Single) -> Quaternion: ...
    def Negate(value: Quaternion) -> Quaternion: ...
    def Normalize(value: Quaternion) -> Quaternion: ...
    def op_Addition(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    def op_Division(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    def op_Equality(value1: Quaternion, value2: Quaternion) -> bool: ...
    def op_Inequality(value1: Quaternion, value2: Quaternion) -> bool: ...
    @overload
    def op_Multiply(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    @overload
    def op_Multiply(value1: Quaternion, value2: Single) -> Quaternion: ...
    def op_Subtraction(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    def op_UnaryNegation(value: Quaternion) -> Quaternion: ...
    def Slerp(quaternion1: Quaternion, quaternion2: Quaternion, amount: Single) -> Quaternion: ...
    def Subtract(value1: Quaternion, value2: Quaternion) -> Quaternion: ...
    def ToString(self) -> str: ...


class Vector2(ValueType):
    @overload
    def __init__(self, value: Single): ...
    @overload
    def __init__(self, x: Single, y: Single): ...
    def Abs(value: Vector2) -> Vector2: ...
    def Add(left: Vector2, right: Vector2) -> Vector2: ...
    def Clamp(value1: Vector2, min: Vector2, max: Vector2) -> Vector2: ...
    @overload
    def CopyTo(self, array: Set(Single)) -> None: ...
    @overload
    def CopyTo(self, array: Set(Single), index: int) -> None: ...
    def Distance(value1: Vector2, value2: Vector2) -> Single: ...
    def DistanceSquared(value1: Vector2, value2: Vector2) -> Single: ...
    @overload
    def Divide(left: Vector2, right: Vector2) -> Vector2: ...
    @overload
    def Divide(left: Vector2, divisor: Single) -> Vector2: ...
    def Dot(value1: Vector2, value2: Vector2) -> Single: ...
    @overload
    def Equals(self, other: Vector2) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def One() -> Vector2: ...
    @property
    def UnitX() -> Vector2: ...
    @property
    def UnitY() -> Vector2: ...
    @property
    def Zero() -> Vector2: ...
    def GetHashCode(self) -> int: ...
    def Length(self) -> Single: ...
    def LengthSquared(self) -> Single: ...
    def Lerp(value1: Vector2, value2: Vector2, amount: Single) -> Vector2: ...
    def Max(value1: Vector2, value2: Vector2) -> Vector2: ...
    def Min(value1: Vector2, value2: Vector2) -> Vector2: ...
    @overload
    def Multiply(left: Single, right: Vector2) -> Vector2: ...
    @overload
    def Multiply(left: Vector2, right: Single) -> Vector2: ...
    @overload
    def Multiply(left: Vector2, right: Vector2) -> Vector2: ...
    def Negate(value: Vector2) -> Vector2: ...
    def Normalize(value: Vector2) -> Vector2: ...
    def op_Addition(left: Vector2, right: Vector2) -> Vector2: ...
    @overload
    def op_Division(value1: Vector2, value2: Single) -> Vector2: ...
    @overload
    def op_Division(left: Vector2, right: Vector2) -> Vector2: ...
    def op_Equality(left: Vector2, right: Vector2) -> bool: ...
    def op_Inequality(left: Vector2, right: Vector2) -> bool: ...
    @overload
    def op_Multiply(left: Vector2, right: Single) -> Vector2: ...
    @overload
    def op_Multiply(left: Vector2, right: Vector2) -> Vector2: ...
    @overload
    def op_Multiply(left: Single, right: Vector2) -> Vector2: ...
    def op_Subtraction(left: Vector2, right: Vector2) -> Vector2: ...
    def op_UnaryNegation(value: Vector2) -> Vector2: ...
    def Reflect(vector: Vector2, normal: Vector2) -> Vector2: ...
    def SquareRoot(value: Vector2) -> Vector2: ...
    def Subtract(left: Vector2, right: Vector2) -> Vector2: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, format: str) -> str: ...
    @overload
    def ToString(self, format: str, formatProvider: IFormatProvider) -> str: ...
    @overload
    def Transform(position: Vector2, matrix: Matrix4x4) -> Vector2: ...
    @overload
    def Transform(value: Vector2, rotation: Quaternion) -> Vector2: ...
    @overload
    def Transform(position: Vector2, matrix: Matrix3x2) -> Vector2: ...
    @overload
    def TransformNormal(normal: Vector2, matrix: Matrix4x4) -> Vector2: ...
    @overload
    def TransformNormal(normal: Vector2, matrix: Matrix3x2) -> Vector2: ...


class Vector3(ValueType):
    @overload
    def __init__(self, value: Single): ...
    @overload
    def __init__(self, value: Vector2, z: Single): ...
    @overload
    def __init__(self, x: Single, y: Single, z: Single): ...
    def Abs(value: Vector3) -> Vector3: ...
    def Add(left: Vector3, right: Vector3) -> Vector3: ...
    def Clamp(value1: Vector3, min: Vector3, max: Vector3) -> Vector3: ...
    @overload
    def CopyTo(self, array: Set(Single)) -> None: ...
    @overload
    def CopyTo(self, array: Set(Single), index: int) -> None: ...
    def Cross(vector1: Vector3, vector2: Vector3) -> Vector3: ...
    def Distance(value1: Vector3, value2: Vector3) -> Single: ...
    def DistanceSquared(value1: Vector3, value2: Vector3) -> Single: ...
    @overload
    def Divide(left: Vector3, right: Vector3) -> Vector3: ...
    @overload
    def Divide(left: Vector3, divisor: Single) -> Vector3: ...
    def Dot(vector1: Vector3, vector2: Vector3) -> Single: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Vector3) -> bool: ...
    @property
    def One() -> Vector3: ...
    @property
    def UnitX() -> Vector3: ...
    @property
    def UnitY() -> Vector3: ...
    @property
    def UnitZ() -> Vector3: ...
    @property
    def Zero() -> Vector3: ...
    def GetHashCode(self) -> int: ...
    def Length(self) -> Single: ...
    def LengthSquared(self) -> Single: ...
    def Lerp(value1: Vector3, value2: Vector3, amount: Single) -> Vector3: ...
    def Max(value1: Vector3, value2: Vector3) -> Vector3: ...
    def Min(value1: Vector3, value2: Vector3) -> Vector3: ...
    @overload
    def Multiply(left: Vector3, right: Single) -> Vector3: ...
    @overload
    def Multiply(left: Vector3, right: Vector3) -> Vector3: ...
    @overload
    def Multiply(left: Single, right: Vector3) -> Vector3: ...
    def Negate(value: Vector3) -> Vector3: ...
    def Normalize(value: Vector3) -> Vector3: ...
    def op_Addition(left: Vector3, right: Vector3) -> Vector3: ...
    @overload
    def op_Division(value1: Vector3, value2: Single) -> Vector3: ...
    @overload
    def op_Division(left: Vector3, right: Vector3) -> Vector3: ...
    def op_Equality(left: Vector3, right: Vector3) -> bool: ...
    def op_Inequality(left: Vector3, right: Vector3) -> bool: ...
    @overload
    def op_Multiply(left: Single, right: Vector3) -> Vector3: ...
    @overload
    def op_Multiply(left: Vector3, right: Vector3) -> Vector3: ...
    @overload
    def op_Multiply(left: Vector3, right: Single) -> Vector3: ...
    def op_Subtraction(left: Vector3, right: Vector3) -> Vector3: ...
    def op_UnaryNegation(value: Vector3) -> Vector3: ...
    def Reflect(vector: Vector3, normal: Vector3) -> Vector3: ...
    def SquareRoot(value: Vector3) -> Vector3: ...
    def Subtract(left: Vector3, right: Vector3) -> Vector3: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, format: str) -> str: ...
    @overload
    def ToString(self, format: str, formatProvider: IFormatProvider) -> str: ...
    @overload
    def Transform(position: Vector3, matrix: Matrix4x4) -> Vector3: ...
    @overload
    def Transform(value: Vector3, rotation: Quaternion) -> Vector3: ...
    def TransformNormal(normal: Vector3, matrix: Matrix4x4) -> Vector3: ...


class Vector4(ValueType):
    @overload
    def __init__(self, value: Single): ...
    @overload
    def __init__(self, value: Vector3, w: Single): ...
    @overload
    def __init__(self, value: Vector2, z: Single, w: Single): ...
    @overload
    def __init__(self, x: Single, y: Single, z: Single, w: Single): ...
    def Abs(value: Vector4) -> Vector4: ...
    def Add(left: Vector4, right: Vector4) -> Vector4: ...
    def Clamp(value1: Vector4, min: Vector4, max: Vector4) -> Vector4: ...
    @overload
    def CopyTo(self, array: Set(Single)) -> None: ...
    @overload
    def CopyTo(self, array: Set(Single), index: int) -> None: ...
    def Distance(value1: Vector4, value2: Vector4) -> Single: ...
    def DistanceSquared(value1: Vector4, value2: Vector4) -> Single: ...
    @overload
    def Divide(left: Vector4, right: Vector4) -> Vector4: ...
    @overload
    def Divide(left: Vector4, divisor: Single) -> Vector4: ...
    def Dot(vector1: Vector4, vector2: Vector4) -> Single: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Vector4) -> bool: ...
    @property
    def One() -> Vector4: ...
    @property
    def UnitW() -> Vector4: ...
    @property
    def UnitX() -> Vector4: ...
    @property
    def UnitY() -> Vector4: ...
    @property
    def UnitZ() -> Vector4: ...
    @property
    def Zero() -> Vector4: ...
    def GetHashCode(self) -> int: ...
    def Length(self) -> Single: ...
    def LengthSquared(self) -> Single: ...
    def Lerp(value1: Vector4, value2: Vector4, amount: Single) -> Vector4: ...
    def Max(value1: Vector4, value2: Vector4) -> Vector4: ...
    def Min(value1: Vector4, value2: Vector4) -> Vector4: ...
    @overload
    def Multiply(left: Single, right: Vector4) -> Vector4: ...
    @overload
    def Multiply(left: Vector4, right: Vector4) -> Vector4: ...
    @overload
    def Multiply(left: Vector4, right: Single) -> Vector4: ...
    def Negate(value: Vector4) -> Vector4: ...
    def Normalize(vector: Vector4) -> Vector4: ...
    def op_Addition(left: Vector4, right: Vector4) -> Vector4: ...
    @overload
    def op_Division(value1: Vector4, value2: Single) -> Vector4: ...
    @overload
    def op_Division(left: Vector4, right: Vector4) -> Vector4: ...
    def op_Equality(left: Vector4, right: Vector4) -> bool: ...
    def op_Inequality(left: Vector4, right: Vector4) -> bool: ...
    @overload
    def op_Multiply(left: Vector4, right: Vector4) -> Vector4: ...
    @overload
    def op_Multiply(left: Vector4, right: Single) -> Vector4: ...
    @overload
    def op_Multiply(left: Single, right: Vector4) -> Vector4: ...
    def op_Subtraction(left: Vector4, right: Vector4) -> Vector4: ...
    def op_UnaryNegation(value: Vector4) -> Vector4: ...
    def SquareRoot(value: Vector4) -> Vector4: ...
    def Subtract(left: Vector4, right: Vector4) -> Vector4: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, format: str) -> str: ...
    @overload
    def ToString(self, format: str, formatProvider: IFormatProvider) -> str: ...
    @overload
    def Transform(position: Vector2, matrix: Matrix4x4) -> Vector4: ...
    @overload
    def Transform(position: Vector3, matrix: Matrix4x4) -> Vector4: ...
    @overload
    def Transform(value: Vector4, rotation: Quaternion) -> Vector4: ...
    @overload
    def Transform(value: Vector3, rotation: Quaternion) -> Vector4: ...
    @overload
    def Transform(vector: Vector4, matrix: Matrix4x4) -> Vector4: ...
    @overload
    def Transform(value: Vector2, rotation: Quaternion) -> Vector4: ...
