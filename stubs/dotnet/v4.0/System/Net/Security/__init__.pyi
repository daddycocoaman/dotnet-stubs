from typing import Tuple, Set, Iterable, List


class AuthenticatedStream(Stream):
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def IsEncrypted(self) -> bool: ...
    @property
    def IsMutuallyAuthenticated(self) -> bool: ...
    @property
    def IsServer(self) -> bool: ...
    @property
    def IsSigned(self) -> bool: ...
    @property
    def LeaveInnerStreamOpen(self) -> bool: ...


class AuthenticationLevel:
    #None = 0
    MutualAuthRequested = 1
    MutualAuthRequired = 2


class EncryptionPolicy:
    RequireEncryption = 0
    AllowNoEncryption = 1
    NoEncryption = 2


class LocalCertificateSelectionCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, targetHost: str, localCertificates: X509CertificateCollection, remoteCertificate: X509Certificate, acceptableIssuers: Set(str), callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> X509Certificate: ...
    def Invoke(self, sender: Object, targetHost: str, localCertificates: X509CertificateCollection, remoteCertificate: X509Certificate, acceptableIssuers: Set(str)) -> X509Certificate: ...


class NegotiateStream(AuthenticatedStream):
    @overload
    def __init__(self, innerStream: Stream): ...
    @overload
    def __init__(self, innerStream: Stream, leaveInnerStreamOpen: bool): ...
    @overload
    def AuthenticateAsClient(self) -> None: ...
    @overload
    def AuthenticateAsClient(self, credential: NetworkCredential, targetName: str) -> None: ...
    @overload
    def AuthenticateAsClient(self, credential: NetworkCredential, binding: ChannelBinding, targetName: str) -> None: ...
    @overload
    def AuthenticateAsClient(self, credential: NetworkCredential, targetName: str, requiredProtectionLevel: ProtectionLevel, allowedImpersonationLevel: TokenImpersonationLevel) -> None: ...
    @overload
    def AuthenticateAsClient(self, credential: NetworkCredential, binding: ChannelBinding, targetName: str, requiredProtectionLevel: ProtectionLevel, allowedImpersonationLevel: TokenImpersonationLevel) -> None: ...
    @overload
    def AuthenticateAsClientAsync(self) -> Task: ...
    @overload
    def AuthenticateAsClientAsync(self, credential: NetworkCredential, targetName: str) -> Task: ...
    @overload
    def AuthenticateAsClientAsync(self, credential: NetworkCredential, binding: ChannelBinding, targetName: str) -> Task: ...
    @overload
    def AuthenticateAsClientAsync(self, credential: NetworkCredential, targetName: str, requiredProtectionLevel: ProtectionLevel, allowedImpersonationLevel: TokenImpersonationLevel) -> Task: ...
    @overload
    def AuthenticateAsClientAsync(self, credential: NetworkCredential, binding: ChannelBinding, targetName: str, requiredProtectionLevel: ProtectionLevel, allowedImpersonationLevel: TokenImpersonationLevel) -> Task: ...
    @overload
    def AuthenticateAsServer(self) -> None: ...
    @overload
    def AuthenticateAsServer(self, policy: ExtendedProtectionPolicy) -> None: ...
    @overload
    def AuthenticateAsServer(self, credential: NetworkCredential, requiredProtectionLevel: ProtectionLevel, requiredImpersonationLevel: TokenImpersonationLevel) -> None: ...
    @overload
    def AuthenticateAsServer(self, credential: NetworkCredential, policy: ExtendedProtectionPolicy, requiredProtectionLevel: ProtectionLevel, requiredImpersonationLevel: TokenImpersonationLevel) -> None: ...
    @overload
    def AuthenticateAsServerAsync(self) -> Task: ...
    @overload
    def AuthenticateAsServerAsync(self, policy: ExtendedProtectionPolicy) -> Task: ...
    @overload
    def AuthenticateAsServerAsync(self, credential: NetworkCredential, requiredProtectionLevel: ProtectionLevel, requiredImpersonationLevel: TokenImpersonationLevel) -> Task: ...
    @overload
    def AuthenticateAsServerAsync(self, credential: NetworkCredential, policy: ExtendedProtectionPolicy, requiredProtectionLevel: ProtectionLevel, requiredImpersonationLevel: TokenImpersonationLevel) -> Task: ...
    @overload
    def BeginAuthenticateAsClient(self, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsClient(self, credential: NetworkCredential, targetName: str, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsClient(self, credential: NetworkCredential, binding: ChannelBinding, targetName: str, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsClient(self, credential: NetworkCredential, targetName: str, requiredProtectionLevel: ProtectionLevel, allowedImpersonationLevel: TokenImpersonationLevel, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsClient(self, credential: NetworkCredential, binding: ChannelBinding, targetName: str, requiredProtectionLevel: ProtectionLevel, allowedImpersonationLevel: TokenImpersonationLevel, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsServer(self, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsServer(self, policy: ExtendedProtectionPolicy, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsServer(self, credential: NetworkCredential, requiredProtectionLevel: ProtectionLevel, requiredImpersonationLevel: TokenImpersonationLevel, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsServer(self, credential: NetworkCredential, policy: ExtendedProtectionPolicy, requiredProtectionLevel: ProtectionLevel, requiredImpersonationLevel: TokenImpersonationLevel, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def BeginRead(self, buffer: Set(Byte), offset: int, count: int, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def BeginWrite(self, buffer: Set(Byte), offset: int, count: int, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def EndAuthenticateAsClient(self, asyncResult: IAsyncResult) -> None: ...
    def EndAuthenticateAsServer(self, asyncResult: IAsyncResult) -> None: ...
    def EndRead(self, asyncResult: IAsyncResult) -> int: ...
    def EndWrite(self, asyncResult: IAsyncResult) -> None: ...
    def Flush(self) -> None: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanTimeout(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def ImpersonationLevel(self) -> TokenImpersonationLevel: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def IsEncrypted(self) -> bool: ...
    @property
    def IsMutuallyAuthenticated(self) -> bool: ...
    @property
    def IsServer(self) -> bool: ...
    @property
    def IsSigned(self) -> bool: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Position(self) -> Int64: ...
    @property
    def ReadTimeout(self) -> int: ...
    @property
    def RemoteIdentity(self) -> IIdentity: ...
    @property
    def WriteTimeout(self) -> int: ...
    def Read(self, buffer: Set(Byte), offset: int, count: int) -> int: ...
    def Seek(self, offset: Int64, origin: SeekOrigin) -> Int64: ...
    @Position.setter
    def Position(self, value: Int64) -> None: ...
    @ReadTimeout.setter
    def ReadTimeout(self, value: int) -> None: ...
    @WriteTimeout.setter
    def WriteTimeout(self, value: int) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    def Write(self, buffer: Set(Byte), offset: int, count: int) -> None: ...


class ProtectionLevel:
    #None = 0
    Sign = 1
    EncryptAndSign = 2


class RemoteCertificateValidationCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, certificate: X509Certificate, chain: X509Chain, sslPolicyErrors: SslPolicyErrors, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    def Invoke(self, sender: Object, certificate: X509Certificate, chain: X509Chain, sslPolicyErrors: SslPolicyErrors) -> bool: ...


class SslPolicyErrors:
    #None = 0
    RemoteCertificateNotAvailable = 1
    RemoteCertificateNameMismatch = 2
    RemoteCertificateChainErrors = 4


class SslStream(AuthenticatedStream):
    @overload
    def __init__(self, innerStream: Stream): ...
    @overload
    def __init__(self, innerStream: Stream, leaveInnerStreamOpen: bool): ...
    @overload
    def __init__(self, innerStream: Stream, leaveInnerStreamOpen: bool, userCertificateValidationCallback: RemoteCertificateValidationCallback): ...
    @overload
    def __init__(self, innerStream: Stream, leaveInnerStreamOpen: bool, userCertificateValidationCallback: RemoteCertificateValidationCallback, userCertificateSelectionCallback: LocalCertificateSelectionCallback): ...
    @overload
    def __init__(self, innerStream: Stream, leaveInnerStreamOpen: bool, userCertificateValidationCallback: RemoteCertificateValidationCallback, userCertificateSelectionCallback: LocalCertificateSelectionCallback, encryptionPolicy: EncryptionPolicy): ...
    @overload
    def AuthenticateAsClient(self, targetHost: str) -> None: ...
    @overload
    def AuthenticateAsClient(self, targetHost: str, clientCertificates: X509CertificateCollection, checkCertificateRevocation: bool) -> None: ...
    @overload
    def AuthenticateAsClient(self, targetHost: str, clientCertificates: X509CertificateCollection, enabledSslProtocols: SslProtocols, checkCertificateRevocation: bool) -> None: ...
    @overload
    def AuthenticateAsClientAsync(self, targetHost: str) -> Task: ...
    @overload
    def AuthenticateAsClientAsync(self, targetHost: str, clientCertificates: X509CertificateCollection, checkCertificateRevocation: bool) -> Task: ...
    @overload
    def AuthenticateAsClientAsync(self, targetHost: str, clientCertificates: X509CertificateCollection, enabledSslProtocols: SslProtocols, checkCertificateRevocation: bool) -> Task: ...
    @overload
    def AuthenticateAsServer(self, serverCertificate: X509Certificate) -> None: ...
    @overload
    def AuthenticateAsServer(self, serverCertificate: X509Certificate, clientCertificateRequired: bool, checkCertificateRevocation: bool) -> None: ...
    @overload
    def AuthenticateAsServer(self, serverCertificate: X509Certificate, clientCertificateRequired: bool, enabledSslProtocols: SslProtocols, checkCertificateRevocation: bool) -> None: ...
    @overload
    def AuthenticateAsServerAsync(self, serverCertificate: X509Certificate) -> Task: ...
    @overload
    def AuthenticateAsServerAsync(self, serverCertificate: X509Certificate, clientCertificateRequired: bool, checkCertificateRevocation: bool) -> Task: ...
    @overload
    def AuthenticateAsServerAsync(self, serverCertificate: X509Certificate, clientCertificateRequired: bool, enabledSslProtocols: SslProtocols, checkCertificateRevocation: bool) -> Task: ...
    @overload
    def BeginAuthenticateAsClient(self, targetHost: str, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsClient(self, targetHost: str, clientCertificates: X509CertificateCollection, checkCertificateRevocation: bool, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsClient(self, targetHost: str, clientCertificates: X509CertificateCollection, enabledSslProtocols: SslProtocols, checkCertificateRevocation: bool, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsServer(self, serverCertificate: X509Certificate, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsServer(self, serverCertificate: X509Certificate, clientCertificateRequired: bool, checkCertificateRevocation: bool, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginAuthenticateAsServer(self, serverCertificate: X509Certificate, clientCertificateRequired: bool, enabledSslProtocols: SslProtocols, checkCertificateRevocation: bool, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def BeginRead(self, buffer: Set(Byte), offset: int, count: int, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def BeginWrite(self, buffer: Set(Byte), offset: int, count: int, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def EndAuthenticateAsClient(self, asyncResult: IAsyncResult) -> None: ...
    def EndAuthenticateAsServer(self, asyncResult: IAsyncResult) -> None: ...
    def EndRead(self, asyncResult: IAsyncResult) -> int: ...
    def EndWrite(self, asyncResult: IAsyncResult) -> None: ...
    def Flush(self) -> None: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanTimeout(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def CheckCertRevocationStatus(self) -> bool: ...
    @property
    def CipherAlgorithm(self) -> CipherAlgorithmType: ...
    @property
    def CipherStrength(self) -> int: ...
    @property
    def HashAlgorithm(self) -> HashAlgorithmType: ...
    @property
    def HashStrength(self) -> int: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def IsEncrypted(self) -> bool: ...
    @property
    def IsMutuallyAuthenticated(self) -> bool: ...
    @property
    def IsServer(self) -> bool: ...
    @property
    def IsSigned(self) -> bool: ...
    @property
    def KeyExchangeAlgorithm(self) -> ExchangeAlgorithmType: ...
    @property
    def KeyExchangeStrength(self) -> int: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def LocalCertificate(self) -> X509Certificate: ...
    @property
    def Position(self) -> Int64: ...
    @property
    def ReadTimeout(self) -> int: ...
    @property
    def RemoteCertificate(self) -> X509Certificate: ...
    @property
    def SslProtocol(self) -> SslProtocols: ...
    @property
    def TransportContext(self) -> TransportContext: ...
    @property
    def WriteTimeout(self) -> int: ...
    def Read(self, buffer: Set(Byte), offset: int, count: int) -> int: ...
    def Seek(self, offset: Int64, origin: SeekOrigin) -> Int64: ...
    @Position.setter
    def Position(self, value: Int64) -> None: ...
    @ReadTimeout.setter
    def ReadTimeout(self, value: int) -> None: ...
    @WriteTimeout.setter
    def WriteTimeout(self, value: int) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    def ShutdownAsync(self) -> Task: ...
    @overload
    def Write(self, buffer: Set(Byte)) -> None: ...
    @overload
    def Write(self, buffer: Set(Byte), offset: int, count: int) -> None: ...
