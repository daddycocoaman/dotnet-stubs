from typing import Tuple, Set, Iterable, List


class AlternateView(AttachmentBase):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, contentStream: Stream): ...
    @overload
    def __init__(self, fileName: str, mediaType: str): ...
    @overload
    def __init__(self, fileName: str, contentType: ContentType): ...
    @overload
    def __init__(self, contentStream: Stream, mediaType: str): ...
    @overload
    def __init__(self, contentStream: Stream, contentType: ContentType): ...
    @overload
    def CreateAlternateViewFromString(content: str) -> AlternateView: ...
    @overload
    def CreateAlternateViewFromString(content: str, contentType: ContentType) -> AlternateView: ...
    @overload
    def CreateAlternateViewFromString(content: str, contentEncoding: Encoding, mediaType: str) -> AlternateView: ...
    @property
    def BaseUri(self) -> Uri: ...
    @property
    def LinkedResources(self) -> LinkedResourceCollection: ...
    @BaseUri.setter
    def BaseUri(self, value: Uri) -> None: ...


class AlternateViewCollection:
    def Dispose(self) -> None: ...


class Attachment(AttachmentBase):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, fileName: str, mediaType: str): ...
    @overload
    def __init__(self, fileName: str, contentType: ContentType): ...
    @overload
    def __init__(self, contentStream: Stream, name: str): ...
    @overload
    def __init__(self, contentStream: Stream, contentType: ContentType): ...
    @overload
    def __init__(self, contentStream: Stream, name: str, mediaType: str): ...
    @overload
    def CreateAttachmentFromString(content: str, name: str) -> Attachment: ...
    @overload
    def CreateAttachmentFromString(content: str, contentType: ContentType) -> Attachment: ...
    @overload
    def CreateAttachmentFromString(content: str, name: str, contentEncoding: Encoding, mediaType: str) -> Attachment: ...
    @property
    def ContentDisposition(self) -> ContentDisposition: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameEncoding(self) -> Encoding: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @NameEncoding.setter
    def NameEncoding(self, value: Encoding) -> None: ...


class AttachmentBase(Object):
    def Dispose(self) -> None: ...
    @property
    def ContentId(self) -> str: ...
    @property
    def ContentStream(self) -> Stream: ...
    @property
    def ContentType(self) -> ContentType: ...
    @property
    def TransferEncoding(self) -> TransferEncoding: ...
    @ContentId.setter
    def ContentId(self, value: str) -> None: ...
    @ContentType.setter
    def ContentType(self, value: ContentType) -> None: ...
    @TransferEncoding.setter
    def TransferEncoding(self, value: TransferEncoding) -> None: ...


class AttachmentCollection:
    def Dispose(self) -> None: ...


class DeliveryNotificationOptions:
    #None = 0
    OnSuccess = 1
    OnFailure = 2
    Delay = 4
    Never = 134217728


class LinkedResource(AttachmentBase):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, contentStream: Stream): ...
    @overload
    def __init__(self, fileName: str, mediaType: str): ...
    @overload
    def __init__(self, fileName: str, contentType: ContentType): ...
    @overload
    def __init__(self, contentStream: Stream, mediaType: str): ...
    @overload
    def __init__(self, contentStream: Stream, contentType: ContentType): ...
    @overload
    def CreateLinkedResourceFromString(content: str) -> LinkedResource: ...
    @overload
    def CreateLinkedResourceFromString(content: str, contentType: ContentType) -> LinkedResource: ...
    @overload
    def CreateLinkedResourceFromString(content: str, contentEncoding: Encoding, mediaType: str) -> LinkedResource: ...
    @property
    def ContentLink(self) -> Uri: ...
    @ContentLink.setter
    def ContentLink(self, value: Uri) -> None: ...


class LinkedResourceCollection:
    def Dispose(self) -> None: ...


class MailAddress(Object):
    @overload
    def __init__(self, address: str): ...
    @overload
    def __init__(self, address: str, displayName: str): ...
    @overload
    def __init__(self, address: str, displayName: str, displayNameEncoding: Encoding): ...
    def Equals(self, value: Object) -> bool: ...
    @property
    def Address(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Host(self) -> str: ...
    @property
    def User(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class MailAddressCollection:
    def __init__(self): ...
    @overload
    def Add(self, addresses: str) -> None: ...
    def ToString(self) -> str: ...


class MailMessage(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, from_: str, to: str): ...
    @overload
    def __init__(self, from_: MailAddress, to: MailAddress): ...
    @overload
    def __init__(self, from_: str, to: str, subject: str, body: str): ...
    def Dispose(self) -> None: ...
    @property
    def AlternateViews(self) -> AlternateViewCollection: ...
    @property
    def Attachments(self) -> AttachmentCollection: ...
    @property
    def Bcc(self) -> MailAddressCollection: ...
    @property
    def Body(self) -> str: ...
    @property
    def BodyEncoding(self) -> Encoding: ...
    @property
    def BodyTransferEncoding(self) -> TransferEncoding: ...
    @property
    def CC(self) -> MailAddressCollection: ...
    @property
    def DeliveryNotificationOptions(self) -> DeliveryNotificationOptions: ...
    @property
    def From(self) -> MailAddress: ...
    @property
    def Headers(self) -> NameValueCollection: ...
    @property
    def HeadersEncoding(self) -> Encoding: ...
    @property
    def IsBodyHtml(self) -> bool: ...
    @property
    def Priority(self) -> MailPriority: ...
    @property
    def ReplyTo(self) -> MailAddress: ...
    @property
    def ReplyToList(self) -> MailAddressCollection: ...
    @property
    def Sender(self) -> MailAddress: ...
    @property
    def Subject(self) -> str: ...
    @property
    def SubjectEncoding(self) -> Encoding: ...
    @property
    def To(self) -> MailAddressCollection: ...
    @Body.setter
    def Body(self, value: str) -> None: ...
    @BodyEncoding.setter
    def BodyEncoding(self, value: Encoding) -> None: ...
    @BodyTransferEncoding.setter
    def BodyTransferEncoding(self, value: TransferEncoding) -> None: ...
    @DeliveryNotificationOptions.setter
    def DeliveryNotificationOptions(self, value: DeliveryNotificationOptions) -> None: ...
    @From.setter
    def From(self, value: MailAddress) -> None: ...
    @HeadersEncoding.setter
    def HeadersEncoding(self, value: Encoding) -> None: ...
    @IsBodyHtml.setter
    def IsBodyHtml(self, value: bool) -> None: ...
    @Priority.setter
    def Priority(self, value: MailPriority) -> None: ...
    @ReplyTo.setter
    def ReplyTo(self, value: MailAddress) -> None: ...
    @Sender.setter
    def Sender(self, value: MailAddress) -> None: ...
    @Subject.setter
    def Subject(self, value: str) -> None: ...
    @SubjectEncoding.setter
    def SubjectEncoding(self, value: Encoding) -> None: ...


class MailPriority:
    Normal = 0
    Low = 1
    High = 2


class SendCompletedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: AsyncCompletedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: AsyncCompletedEventArgs) -> None: ...


class SmtpAccess:
    #None = 0
    Connect = 1
    ConnectToUnrestrictedPort = 2


class SmtpClient(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, host: str): ...
    @overload
    def __init__(self, host: str, port: int): ...
    def add_SendCompleted(self, value: SendCompletedEventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def ClientCertificates(self) -> X509CertificateCollection: ...
    @property
    def Credentials(self) -> ICredentialsByHost: ...
    @property
    def DeliveryFormat(self) -> SmtpDeliveryFormat: ...
    @property
    def DeliveryMethod(self) -> SmtpDeliveryMethod: ...
    @property
    def EnableSsl(self) -> bool: ...
    @property
    def Host(self) -> str: ...
    @property
    def PickupDirectoryLocation(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @property
    def ServicePoint(self) -> ServicePoint: ...
    @property
    def TargetName(self) -> str: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    def remove_SendCompleted(self, value: SendCompletedEventHandler) -> None: ...
    @overload
    def Send(self, message: MailMessage) -> None: ...
    @overload
    def Send(self, from_: str, recipients: str, subject: str, body: str) -> None: ...
    @overload
    def SendAsync(self, message: MailMessage, userToken: Object) -> None: ...
    @overload
    def SendAsync(self, from_: str, recipients: str, subject: str, body: str, userToken: Object) -> None: ...
    def SendAsyncCancel(self) -> None: ...
    @overload
    def SendMailAsync(self, message: MailMessage) -> Task: ...
    @overload
    def SendMailAsync(self, from_: str, recipients: str, subject: str, body: str) -> Task: ...
    @Credentials.setter
    def Credentials(self, value: ICredentialsByHost) -> None: ...
    @DeliveryFormat.setter
    def DeliveryFormat(self, value: SmtpDeliveryFormat) -> None: ...
    @DeliveryMethod.setter
    def DeliveryMethod(self, value: SmtpDeliveryMethod) -> None: ...
    @EnableSsl.setter
    def EnableSsl(self, value: bool) -> None: ...
    @Host.setter
    def Host(self, value: str) -> None: ...
    @PickupDirectoryLocation.setter
    def PickupDirectoryLocation(self, value: str) -> None: ...
    @Port.setter
    def Port(self, value: int) -> None: ...
    @TargetName.setter
    def TargetName(self, value: str) -> None: ...
    @Timeout.setter
    def Timeout(self, value: int) -> None: ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: bool) -> None: ...


class SmtpDeliveryFormat:
    SevenBit = 0
    International = 1


class SmtpDeliveryMethod:
    Network = 0
    SpecifiedPickupDirectory = 1
    PickupDirectoryFromIis = 2


class SmtpException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, statusCode: SmtpStatusCode): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, statusCode: SmtpStatusCode, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def StatusCode(self) -> SmtpStatusCode: ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...
    @StatusCode.setter
    def StatusCode(self, value: SmtpStatusCode) -> None: ...


class SmtpFailedRecipientException(SmtpException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, statusCode: SmtpStatusCode, failedRecipient: str): ...
    @overload
    def __init__(self, statusCode: SmtpStatusCode, failedRecipient: str, serverResponse: str): ...
    @overload
    def __init__(self, message: str, failedRecipient: str, innerException: Exception): ...
    @property
    def FailedRecipient(self) -> str: ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...


class SmtpFailedRecipientsException(SmtpFailedRecipientException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerExceptions: Set(SmtpFailedRecipientException)): ...
    @property
    def InnerExceptions(self) -> Set(SmtpFailedRecipientException): ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...


class SmtpPermission(CodeAccessPermission):
    @overload
    def __init__(self, state: PermissionState): ...
    @overload
    def __init__(self, unrestricted: bool): ...
    @overload
    def __init__(self, access: SmtpAccess): ...
    def AddPermission(self, access: SmtpAccess) -> None: ...
    def Copy(self) -> IPermission: ...
    def FromXml(self, securityElement: SecurityElement) -> None: ...
    @property
    def Access(self) -> SmtpAccess: ...
    def Intersect(self, target: IPermission) -> IPermission: ...
    def IsSubsetOf(self, target: IPermission) -> bool: ...
    def IsUnrestricted(self) -> bool: ...
    def ToXml(self) -> SecurityElement: ...
    def Union(self, target: IPermission) -> IPermission: ...


class SmtpPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...
    @property
    def Access(self) -> str: ...
    @Access.setter
    def Access(self, value: str) -> None: ...


class SmtpStatusCode:
    SystemStatus = 211
    HelpMessage = 214
    ServiceReady = 220
    ServiceClosingTransmissionChannel = 221
    Ok = 250
    UserNotLocalWillForward = 251
    CannotVerifyUserWillAttemptDelivery = 252
    StartMailInput = 354
    ServiceNotAvailable = 421
    MailboxBusy = 450
    LocalErrorInProcessing = 451
    InsufficientStorage = 452
    ClientNotPermitted = 454
    CommandUnrecognized = 500
    SyntaxError = 501
    CommandNotImplemented = 502
    BadCommandSequence = 503
    CommandParameterNotImplemented = 504
    MustIssueStartTlsFirst = 530
    MailboxUnavailable = 550
    UserNotLocalTryAlternatePath = 551
    ExceededStorageAllocation = 552
    MailboxNameNotAllowed = 553
    TransactionFailed = 554
    GeneralFailure = -1
