from typing import Tuple, Set, Iterable, List


class ApplicationChangedEventArgs(EventArgs):
    @property
    def PeerApplication(self) -> PeerApplication: ...
    @property
    def PeerChangeType(self) -> PeerChangeType: ...
    @property
    def PeerContact(self) -> PeerContact: ...
    @property
    def PeerEndPoint(self) -> PeerEndPoint: ...


class ContactManager(Object):
    def add_ApplicationChanged(self, value: EventHandler) -> None: ...
    def add_CreateContactCompleted(self, value: EventHandler) -> None: ...
    def add_NameChanged(self, value: EventHandler) -> None: ...
    def add_ObjectChanged(self, value: EventHandler) -> None: ...
    def add_PresenceChanged(self, value: EventHandler) -> None: ...
    def add_SubscriptionListChanged(self, value: EventHandler) -> None: ...
    def AddContact(self, peerContact: PeerContact) -> None: ...
    def CreateContact(self, peerNearMe: PeerNearMe) -> PeerContact: ...
    def CreateContactAsync(self, peerNearMe: PeerNearMe, userToken: Object) -> None: ...
    @overload
    def DeleteContact(self, peerName: PeerName) -> None: ...
    @overload
    def DeleteContact(self, peerContact: PeerContact) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def LocalContact() -> PeerContact: ...
    @property
    def SynchronizingObject(self) -> ISynchronizeInvoke: ...
    def GetContact(self, peerName: PeerName) -> PeerContact: ...
    def GetContacts(self) -> PeerContactCollection: ...
    def remove_ApplicationChanged(self, value: EventHandler) -> None: ...
    def remove_CreateContactCompleted(self, value: EventHandler) -> None: ...
    def remove_NameChanged(self, value: EventHandler) -> None: ...
    def remove_ObjectChanged(self, value: EventHandler) -> None: ...
    def remove_PresenceChanged(self, value: EventHandler) -> None: ...
    def remove_SubscriptionListChanged(self, value: EventHandler) -> None: ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: ISynchronizeInvoke) -> None: ...
    def UpdateContact(self, peerContact: PeerContact) -> None: ...


class CreateContactCompletedEventArgs(AsyncCompletedEventArgs):
    @property
    def PeerContact(self) -> PeerContact: ...


class InviteCompletedEventArgs(AsyncCompletedEventArgs):
    @property
    def InviteResponse(self) -> PeerInvitationResponse: ...


class NameChangedEventArgs(EventArgs):
    @property
    def Name(self) -> str: ...
    @property
    def PeerContact(self) -> PeerContact: ...
    @property
    def PeerEndPoint(self) -> PeerEndPoint: ...


class ObjectChangedEventArgs(EventArgs):
    @property
    def PeerChangeType(self) -> PeerChangeType: ...
    @property
    def PeerContact(self) -> PeerContact: ...
    @property
    def PeerEndPoint(self) -> PeerEndPoint: ...
    @property
    def PeerObject(self) -> PeerObject: ...


class Peer(Object):
    def add_InviteCompleted(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, other: Peer) -> bool: ...
    @property
    def IsOnline(self) -> bool: ...
    @property
    def PeerEndPoints(self) -> PeerEndPointCollection: ...
    @property
    def SynchronizingObject(self) -> ISynchronizeInvoke: ...
    @overload
    def GetObjects(self) -> PeerObjectCollection: ...
    @overload
    def GetObjects(self, objectId: Guid) -> PeerObjectCollection: ...
    def GetPresenceInfo(self, peerEndPoint: PeerEndPoint) -> PeerPresenceInfo: ...
    @overload
    def Invite(self) -> PeerInvitationResponse: ...
    @overload
    def Invite(self, applicationToInvite: PeerApplication, message: str, invitationData: Set(Byte)) -> PeerInvitationResponse: ...
    @overload
    def InviteAsync(self, userToken: Object) -> None: ...
    @overload
    def InviteAsync(self, applicationToInvite: PeerApplication, message: str, invitationData: Set(Byte), userToken: Object) -> None: ...
    def InviteAsyncCancel(self, userToken: Object) -> None: ...
    def remove_InviteCompleted(self, value: EventHandler) -> None: ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: ISynchronizeInvoke) -> None: ...
    def ToString(self) -> str: ...


class PeerApplication(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, id: Guid, description: str, data: Set(Byte), path: str, commandLineArgs: str, peerScope: PeerScope): ...
    def add_ApplicationChanged(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: PeerApplication) -> bool: ...
    @overload
    def Equals(objA: Object, objB: Object) -> bool: ...
    @property
    def CommandLineArgs(self) -> str: ...
    @property
    def Data(self) -> Set(Byte): ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def Path(self) -> str: ...
    @property
    def PeerScope(self) -> PeerScope: ...
    @property
    def SynchronizingObject(self) -> ISynchronizeInvoke: ...
    def GetHashCode(self) -> int: ...
    def remove_ApplicationChanged(self, value: EventHandler) -> None: ...
    @CommandLineArgs.setter
    def CommandLineArgs(self, value: str) -> None: ...
    @Data.setter
    def Data(self, value: Set(Byte)) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @PeerScope.setter
    def PeerScope(self, value: PeerScope) -> None: ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: ISynchronizeInvoke) -> None: ...
    def ToString(self) -> str: ...


class PeerApplicationCollection:
    def ToString(self) -> str: ...


class PeerApplicationLaunchInfo(Object):
    @property
    def Data(self) -> Set(Byte): ...
    @property
    def Message(self) -> str: ...
    @property
    def PeerApplication(self) -> PeerApplication: ...
    @property
    def PeerContact(self) -> PeerContact: ...
    @property
    def PeerEndPoint(self) -> PeerEndPoint: ...


class PeerApplicationRegistrationType:
    CurrentUser = 0
    AllUsers = 1


class PeerChangeType:
    Added = 0
    Deleted = 1
    Updated = 2


class PeerCollaboration(Object):
    def add_LocalApplicationChanged(value: EventHandler) -> None: ...
    def add_LocalNameChanged(value: EventHandler) -> None: ...
    def add_LocalObjectChanged(value: EventHandler) -> None: ...
    def add_LocalPresenceChanged(value: EventHandler) -> None: ...
    def DeleteObject(peerObject: PeerObject) -> None: ...
    @property
    def ApplicationLaunchInfo() -> PeerApplicationLaunchInfo: ...
    @property
    def ContactManager() -> ContactManager: ...
    @property
    def LocalEndPointName() -> str: ...
    @property
    def LocalPresenceInfo() -> PeerPresenceInfo: ...
    @property
    def SignInScope() -> PeerScope: ...
    @property
    def SynchronizingObject() -> ISynchronizeInvoke: ...
    @overload
    def GetLocalRegisteredApplications() -> PeerApplicationCollection: ...
    @overload
    def GetLocalRegisteredApplications(type: PeerApplicationRegistrationType) -> PeerApplicationCollection: ...
    def GetLocalSetObjects() -> PeerObjectCollection: ...
    def GetPeersNearMe() -> PeerNearMeCollection: ...
    def RegisterApplication(application: PeerApplication, type: PeerApplicationRegistrationType) -> None: ...
    def remove_LocalApplicationChanged(value: EventHandler) -> None: ...
    def remove_LocalNameChanged(value: EventHandler) -> None: ...
    def remove_LocalObjectChanged(value: EventHandler) -> None: ...
    def remove_LocalPresenceChanged(value: EventHandler) -> None: ...
    @LocalEndPointName.setter
    def LocalEndPointName(value: str) -> None: ...
    @LocalPresenceInfo.setter
    def LocalPresenceInfo(value: PeerPresenceInfo) -> None: ...
    @SynchronizingObject.setter
    def SynchronizingObject(value: ISynchronizeInvoke) -> None: ...
    def SetObject(peerObject: PeerObject) -> None: ...
    def SignIn(peerScope: PeerScope) -> None: ...
    def SignOut(peerScope: PeerScope) -> None: ...
    def UnregisterApplication(application: PeerApplication, type: PeerApplicationRegistrationType) -> None: ...


class PeerCollaborationPermission(CodeAccessPermission):
    def __init__(self, state: PermissionState): ...
    def Copy(self) -> IPermission: ...
    def FromXml(self, e: SecurityElement) -> None: ...
    def Intersect(self, target: IPermission) -> IPermission: ...
    def IsSubsetOf(self, target: IPermission) -> bool: ...
    def IsUnrestricted(self) -> bool: ...
    def ToXml(self) -> SecurityElement: ...
    def Union(self, target: IPermission) -> IPermission: ...


class PeerCollaborationPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...


class PeerContact(Peer):
    def add_ApplicationChanged(self, value: EventHandler) -> None: ...
    def add_ObjectChanged(self, value: EventHandler) -> None: ...
    def add_PresenceChanged(self, value: EventHandler) -> None: ...
    def add_SubscribeCompleted(self, value: EventHandler) -> None: ...
    @overload
    def Equals(self, other: PeerContact) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(objA: Object, objB: Object) -> bool: ...
    def FromXml(peerContactXml: str) -> PeerContact: ...
    @property
    def Credentials(self) -> X509Certificate2: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def EmailAddress(self) -> MailAddress: ...
    @property
    def IsSubscribed(self) -> bool: ...
    @property
    def Nickname(self) -> str: ...
    @property
    def PeerEndPoints(self) -> PeerEndPointCollection: ...
    @property
    def PeerName(self) -> PeerName: ...
    @property
    def SubscribeAllowed(self) -> SubscriptionType: ...
    @overload
    def GetApplications(self) -> PeerApplicationCollection: ...
    @overload
    def GetApplications(self, applicationId: Guid) -> PeerApplicationCollection: ...
    @overload
    def GetApplications(self, peerEndPoint: PeerEndPoint) -> PeerApplicationCollection: ...
    @overload
    def GetApplications(self, peerEndPoint: PeerEndPoint, applicationId: Guid) -> PeerApplicationCollection: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjects(self, peerEndPoint: PeerEndPoint) -> PeerObjectCollection: ...
    @overload
    def GetObjects(self, peerEndPoint: PeerEndPoint, objectId: Guid) -> PeerObjectCollection: ...
    @overload
    def Invite(self) -> PeerInvitationResponse: ...
    @overload
    def Invite(self, peerEndPoint: PeerEndPoint) -> PeerInvitationResponse: ...
    @overload
    def Invite(self, applicationToInvite: PeerApplication, message: str, invitationData: Set(Byte)) -> PeerInvitationResponse: ...
    @overload
    def Invite(self, peerEndPoint: PeerEndPoint, applicationToInvite: PeerApplication, message: str, invitationData: Set(Byte)) -> PeerInvitationResponse: ...
    @overload
    def InviteAsync(self, userToken: Object) -> None: ...
    @overload
    def InviteAsync(self, peerEndPoint: PeerEndPoint, userToken: Object) -> None: ...
    @overload
    def InviteAsync(self, applicationToInvite: PeerApplication, message: str, invitationData: Set(Byte), userToken: Object) -> None: ...
    @overload
    def InviteAsync(self, peerEndPoint: PeerEndPoint, message: str, invitationData: Set(Byte), applicationToInvite: PeerApplication, userToken: Object) -> None: ...
    def remove_ApplicationChanged(self, value: EventHandler) -> None: ...
    def remove_ObjectChanged(self, value: EventHandler) -> None: ...
    def remove_PresenceChanged(self, value: EventHandler) -> None: ...
    def remove_SubscribeCompleted(self, value: EventHandler) -> None: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @EmailAddress.setter
    def EmailAddress(self, value: MailAddress) -> None: ...
    @Nickname.setter
    def Nickname(self, value: str) -> None: ...
    @SubscribeAllowed.setter
    def SubscribeAllowed(self, value: SubscriptionType) -> None: ...
    def Subscribe(self) -> None: ...
    def SubscribeAsync(self, userToken: Object) -> None: ...
    def ToString(self) -> str: ...
    def ToXml(self) -> str: ...
    def Unsubscribe(self) -> None: ...


class PeerContactCollection:
    def ToString(self) -> str: ...


class PeerEndPoint(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, endPoint: IPEndPoint): ...
    @overload
    def __init__(self, endPoint: IPEndPoint, endPointName: str): ...
    def add_NameChanged(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, other: PeerEndPoint) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(objA: Object, objB: Object) -> bool: ...
    @property
    def EndPoint(self) -> IPEndPoint: ...
    @property
    def Name(self) -> str: ...
    @property
    def SynchronizingObject(self) -> ISynchronizeInvoke: ...
    def GetHashCode(self) -> int: ...
    def remove_NameChanged(self, value: EventHandler) -> None: ...
    @EndPoint.setter
    def EndPoint(self, value: IPEndPoint) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: ISynchronizeInvoke) -> None: ...
    def ToString(self) -> str: ...


class PeerEndPointCollection:
    @overload
    def Equals(self, other: PeerEndPointCollection) -> bool: ...
    def ToString(self) -> str: ...


class PeerInvitationResponse(Object):
    @property
    def PeerInvitationResponseType(self) -> PeerInvitationResponseType: ...


class PeerInvitationResponseType:
    Declined = 0
    Accepted = 1
    Expired = 2


class PeerNearMe(Peer):
    def __init__(self): ...
    def add_PeerNearMeChanged(value: EventHandler) -> None: ...
    def add_RefreshDataCompleted(self, value: EventHandler) -> None: ...
    @overload
    def AddToContactManager(self) -> PeerContact: ...
    @overload
    def AddToContactManager(self, displayName: str, nickname: str, emailAddress: MailAddress) -> PeerContact: ...
    def CreateFromPeerEndPoint(peerEndPoint: PeerEndPoint) -> PeerNearMe: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: PeerNearMe) -> bool: ...
    @overload
    def Equals(objA: Object, objB: Object) -> bool: ...
    @property
    def Nickname(self) -> str: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Invite(self) -> PeerInvitationResponse: ...
    @overload
    def Invite(self, applicationToInvite: PeerApplication, message: str, invitationData: Set(Byte)) -> PeerInvitationResponse: ...
    @overload
    def InviteAsync(self, userToken: Object) -> None: ...
    @overload
    def InviteAsync(self, applicationToInvite: PeerApplication, message: str, invitationData: Set(Byte), userToken: Object) -> None: ...
    def RefreshData(self) -> None: ...
    def RefreshDataAsync(self, userToken: Object) -> None: ...
    def remove_PeerNearMeChanged(value: EventHandler) -> None: ...
    def remove_RefreshDataCompleted(self, value: EventHandler) -> None: ...
    def ToString(self) -> str: ...


class PeerNearMeChangedEventArgs(EventArgs):
    @property
    def PeerChangeType(self) -> PeerChangeType: ...
    @property
    def PeerNearMe(self) -> PeerNearMe: ...


class PeerNearMeCollection:
    def ToString(self) -> str: ...


class PeerObject(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, Id: Guid, data: Set(Byte), peerScope: PeerScope): ...
    def add_ObjectChanged(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: PeerObject) -> bool: ...
    @overload
    def Equals(objA: Object, objB: Object) -> bool: ...
    @property
    def Data(self) -> Set(Byte): ...
    @property
    def Id(self) -> Guid: ...
    @property
    def PeerScope(self) -> PeerScope: ...
    @property
    def SynchronizingObject(self) -> ISynchronizeInvoke: ...
    def GetHashCode(self) -> int: ...
    def remove_ObjectChanged(self, value: EventHandler) -> None: ...
    @Data.setter
    def Data(self, value: Set(Byte)) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @PeerScope.setter
    def PeerScope(self, value: PeerScope) -> None: ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: ISynchronizeInvoke) -> None: ...
    def ToString(self) -> str: ...


class PeerObjectCollection:
    def ToString(self) -> str: ...


class PeerPresenceInfo(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, presenceStatus: PeerPresenceStatus, description: str): ...
    @property
    def DescriptiveText(self) -> str: ...
    @property
    def PresenceStatus(self) -> PeerPresenceStatus: ...
    @DescriptiveText.setter
    def DescriptiveText(self, value: str) -> None: ...
    @PresenceStatus.setter
    def PresenceStatus(self, value: PeerPresenceStatus) -> None: ...


class PeerPresenceStatus:
    Offline = 0
    OutToLunch = 1
    Away = 2
    BeRightBack = 3
    Idle = 4
    Busy = 5
    OnThePhone = 6
    Online = 7


class PeerScope:
    #None = 0
    NearMe = 1
    Internet = 2
    All = 3


class PresenceChangedEventArgs(EventArgs):
    @property
    def PeerChangeType(self) -> PeerChangeType: ...
    @property
    def PeerContact(self) -> PeerContact: ...
    @property
    def PeerEndPoint(self) -> PeerEndPoint: ...
    @property
    def PeerPresenceInfo(self) -> PeerPresenceInfo: ...


class RefreshDataCompletedEventArgs(AsyncCompletedEventArgs):
    @property
    def PeerEndPoint(self) -> PeerEndPoint: ...


class SubscribeCompletedEventArgs(AsyncCompletedEventArgs):
    @property
    def PeerContact(self) -> PeerContact: ...
    @property
    def PeerNearMe(self) -> PeerNearMe: ...


class SubscriptionListChangedEventArgs(EventArgs):
    @property
    def PeerChangeType(self) -> PeerChangeType: ...
    @property
    def PeerContact(self) -> PeerContact: ...
    @property
    def PeerEndPoint(self) -> PeerEndPoint: ...


class SubscriptionType:
    Blocked = 0
    Allowed = 1
