from typing import Tuple, Set, Iterable, List


class ClientWebSocket(WebSocket):
    def __init__(self): ...
    def Abort(self) -> None: ...
    def CloseAsync(self, closeStatus: WebSocketCloseStatus, statusDescription: str, cancellationToken: CancellationToken) -> Task: ...
    def CloseOutputAsync(self, closeStatus: WebSocketCloseStatus, statusDescription: str, cancellationToken: CancellationToken) -> Task: ...
    def ConnectAsync(self, uri: Uri, cancellationToken: CancellationToken) -> Task: ...
    def Dispose(self) -> None: ...
    @property
    def CloseStatus(self) -> Nullable: ...
    @property
    def CloseStatusDescription(self) -> str: ...
    @property
    def Options(self) -> ClientWebSocketOptions: ...
    @property
    def State(self) -> WebSocketState: ...
    @property
    def SubProtocol(self) -> str: ...
    def ReceiveAsync(self, buffer: ArraySegment, cancellationToken: CancellationToken) -> Task: ...
    def SendAsync(self, buffer: ArraySegment, messageType: WebSocketMessageType, endOfMessage: bool, cancellationToken: CancellationToken) -> Task: ...


class ClientWebSocketOptions(Object):
    def AddSubProtocol(self, subProtocol: str) -> None: ...
    @property
    def ClientCertificates(self) -> X509CertificateCollection: ...
    @property
    def Cookies(self) -> CookieContainer: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def KeepAliveInterval(self) -> TimeSpan: ...
    @property
    def Proxy(self) -> IWebProxy: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @ClientCertificates.setter
    def ClientCertificates(self, value: X509CertificateCollection) -> None: ...
    @Cookies.setter
    def Cookies(self, value: CookieContainer) -> None: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...
    @KeepAliveInterval.setter
    def KeepAliveInterval(self, value: TimeSpan) -> None: ...
    @Proxy.setter
    def Proxy(self, value: IWebProxy) -> None: ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: bool) -> None: ...
    @overload
    def SetBuffer(self, receiveBufferSize: int, sendBufferSize: int) -> None: ...
    @overload
    def SetBuffer(self, receiveBufferSize: int, sendBufferSize: int, buffer: ArraySegment) -> None: ...
    def SetRequestHeader(self, headerName: str, headerValue: str) -> None: ...


class HttpListenerWebSocketContext(WebSocketContext):
    @property
    def CookieCollection(self) -> CookieCollection: ...
    @property
    def Headers(self) -> NameValueCollection: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def IsSecureConnection(self) -> bool: ...
    @property
    def Origin(self) -> str: ...
    @property
    def RequestUri(self) -> Uri: ...
    @property
    def SecWebSocketKey(self) -> str: ...
    @property
    def SecWebSocketProtocols(self) -> Iterable[str]: ...
    @property
    def SecWebSocketVersion(self) -> str: ...
    @property
    def User(self) -> IPrincipal: ...
    @property
    def WebSocket(self) -> WebSocket: ...


class WebSocket(Object):
    def Abort(self) -> None: ...
    def CloseAsync(self, closeStatus: WebSocketCloseStatus, statusDescription: str, cancellationToken: CancellationToken) -> Task: ...
    def CloseOutputAsync(self, closeStatus: WebSocketCloseStatus, statusDescription: str, cancellationToken: CancellationToken) -> Task: ...
    def CreateClientBuffer(receiveBufferSize: int, sendBufferSize: int) -> ArraySegment: ...
    def CreateClientWebSocket(innerStream: Stream, subProtocol: str, receiveBufferSize: int, sendBufferSize: int, keepAliveInterval: TimeSpan, useZeroMaskingKey: bool, internalBuffer: ArraySegment) -> WebSocket: ...
    def CreateServerBuffer(receiveBufferSize: int) -> ArraySegment: ...
    def Dispose(self) -> None: ...
    @property
    def CloseStatus(self) -> Nullable: ...
    @property
    def CloseStatusDescription(self) -> str: ...
    @property
    def DefaultKeepAliveInterval() -> TimeSpan: ...
    @property
    def State(self) -> WebSocketState: ...
    @property
    def SubProtocol(self) -> str: ...
    def ReceiveAsync(self, buffer: ArraySegment, cancellationToken: CancellationToken) -> Task: ...
    def RegisterPrefixes() -> None: ...
    def SendAsync(self, buffer: ArraySegment, messageType: WebSocketMessageType, endOfMessage: bool, cancellationToken: CancellationToken) -> Task: ...


class WebSocketCloseStatus:
    NormalClosure = 1000
    EndpointUnavailable = 1001
    ProtocolError = 1002
    InvalidMessageType = 1003
    Empty = 1005
    InvalidPayloadData = 1007
    PolicyViolation = 1008
    MessageTooBig = 1009
    MandatoryExtension = 1010
    InternalServerError = 1011


class WebSocketContext(Object):
    @property
    def CookieCollection(self) -> CookieCollection: ...
    @property
    def Headers(self) -> NameValueCollection: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def IsLocal(self) -> bool: ...
    @property
    def IsSecureConnection(self) -> bool: ...
    @property
    def Origin(self) -> str: ...
    @property
    def RequestUri(self) -> Uri: ...
    @property
    def SecWebSocketKey(self) -> str: ...
    @property
    def SecWebSocketProtocols(self) -> Iterable[str]: ...
    @property
    def SecWebSocketVersion(self) -> str: ...
    @property
    def User(self) -> IPrincipal: ...
    @property
    def WebSocket(self) -> WebSocket: ...


class WebSocketError:
    Success = 0
    InvalidMessageType = 1
    Faulted = 2
    NativeError = 3
    NotAWebSocket = 4
    UnsupportedVersion = 5
    UnsupportedProtocol = 6
    HeaderError = 7
    ConnectionClosedPrematurely = 8
    InvalidState = 9


class WebSocketException(Win32Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, error: WebSocketError): ...
    @overload
    def __init__(self, nativeError: int): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, error: WebSocketError, message: str): ...
    @overload
    def __init__(self, error: WebSocketError, innerException: Exception): ...
    @overload
    def __init__(self, nativeError: int, message: str): ...
    @overload
    def __init__(self, nativeError: int, innerException: Exception): ...
    @overload
    def __init__(self, error: WebSocketError, nativeError: int): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, error: WebSocketError, message: str, innerException: Exception): ...
    @overload
    def __init__(self, error: WebSocketError, nativeError: int, message: str): ...
    @overload
    def __init__(self, error: WebSocketError, nativeError: int, innerException: Exception): ...
    @overload
    def __init__(self, error: WebSocketError, nativeError: int, message: str, innerException: Exception): ...
    @property
    def ErrorCode(self) -> int: ...
    @property
    def WebSocketErrorCode(self) -> WebSocketError: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class WebSocketMessageType:
    Text = 0
    Binary = 1
    Close = 2


class WebSocketReceiveResult(Object):
    @overload
    def __init__(self, count: int, messageType: WebSocketMessageType, endOfMessage: bool): ...
    @overload
    def __init__(self, count: int, messageType: WebSocketMessageType, endOfMessage: bool, closeStatus: Nullable, closeStatusDescription: str): ...
    @property
    def CloseStatus(self) -> Nullable: ...
    @property
    def CloseStatusDescription(self) -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def EndOfMessage(self) -> bool: ...
    @property
    def MessageType(self) -> WebSocketMessageType: ...


class WebSocketState:
    #None = 0
    Connecting = 1
    Open = 2
    CloseSent = 3
    CloseReceived = 4
    Closed = 5
    Aborted = 6
