from typing import Tuple, Set, Iterable, List


class AuthenticationModuleElement(ConfigurationElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @property
    def Type(self) -> str: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class AuthenticationModuleElementCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: AuthenticationModuleElement) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, index: int) -> AuthenticationModuleElement: ...
    @property
    def Item(self, name: str) -> AuthenticationModuleElement: ...
    def IndexOf(self, element: AuthenticationModuleElement) -> int: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, element: AuthenticationModuleElement) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: AuthenticationModuleElement) -> None: ...
    @Item.setter
    def Item(self, name: str, value: AuthenticationModuleElement) -> None: ...


class AuthenticationModulesSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def AuthenticationModules(self) -> AuthenticationModuleElementCollection: ...


class AutoDetectValues:
    False = 0
    True = 1
    Unspecified = -1


class BypassElement(ConfigurationElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, address: str): ...
    @property
    def Address(self) -> str: ...
    @Address.setter
    def Address(self, value: str) -> None: ...


class BypassElementCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: BypassElement) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, index: int) -> BypassElement: ...
    @property
    def Item(self, name: str) -> BypassElement: ...
    def IndexOf(self, element: BypassElement) -> int: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, element: BypassElement) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: BypassElement) -> None: ...
    @Item.setter
    def Item(self, name: str, value: BypassElement) -> None: ...


class BypassOnLocalValues:
    False = 0
    True = 1
    Unspecified = -1


class ConnectionManagementElement(ConfigurationElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, address: str, maxConnection: int): ...
    @property
    def Address(self) -> str: ...
    @property
    def MaxConnection(self) -> int: ...
    @Address.setter
    def Address(self, value: str) -> None: ...
    @MaxConnection.setter
    def MaxConnection(self, value: int) -> None: ...


class ConnectionManagementElementCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: ConnectionManagementElement) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, index: int) -> ConnectionManagementElement: ...
    @property
    def Item(self, name: str) -> ConnectionManagementElement: ...
    def IndexOf(self, element: ConnectionManagementElement) -> int: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, element: ConnectionManagementElement) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ConnectionManagementElement) -> None: ...
    @Item.setter
    def Item(self, name: str, value: ConnectionManagementElement) -> None: ...


class ConnectionManagementSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def ConnectionManagement(self) -> ConnectionManagementElementCollection: ...


class DefaultProxySection(ConfigurationSection):
    def __init__(self): ...
    @property
    def BypassList(self) -> BypassElementCollection: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Module(self) -> ModuleElement: ...
    @property
    def Proxy(self) -> ProxyElement: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: bool) -> None: ...


class FtpCachePolicyElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def PolicyLevel(self) -> RequestCacheLevel: ...
    @PolicyLevel.setter
    def PolicyLevel(self, value: RequestCacheLevel) -> None: ...


class HttpCachePolicyElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def MaximumAge(self) -> TimeSpan: ...
    @property
    def MaximumStale(self) -> TimeSpan: ...
    @property
    def MinimumFresh(self) -> TimeSpan: ...
    @property
    def PolicyLevel(self) -> HttpRequestCacheLevel: ...
    @MaximumAge.setter
    def MaximumAge(self, value: TimeSpan) -> None: ...
    @MaximumStale.setter
    def MaximumStale(self, value: TimeSpan) -> None: ...
    @MinimumFresh.setter
    def MinimumFresh(self, value: TimeSpan) -> None: ...
    @PolicyLevel.setter
    def PolicyLevel(self, value: HttpRequestCacheLevel) -> None: ...


class HttpListenerElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def Timeouts(self) -> HttpListenerTimeoutsElement: ...
    @property
    def UnescapeRequestUrl(self) -> bool: ...


class HttpListenerTimeoutsElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def DrainEntityBody(self) -> TimeSpan: ...
    @property
    def EntityBody(self) -> TimeSpan: ...
    @property
    def HeaderWait(self) -> TimeSpan: ...
    @property
    def IdleConnection(self) -> TimeSpan: ...
    @property
    def MinSendBytesPerSecond(self) -> Int64: ...
    @property
    def RequestQueue(self) -> TimeSpan: ...


class HttpWebRequestElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def MaximumErrorResponseLength(self) -> int: ...
    @property
    def MaximumResponseHeadersLength(self) -> int: ...
    @property
    def MaximumUnauthorizedUploadLength(self) -> int: ...
    @property
    def UseUnsafeHeaderParsing(self) -> bool: ...
    @MaximumErrorResponseLength.setter
    def MaximumErrorResponseLength(self, value: int) -> None: ...
    @MaximumResponseHeadersLength.setter
    def MaximumResponseHeadersLength(self, value: int) -> None: ...
    @MaximumUnauthorizedUploadLength.setter
    def MaximumUnauthorizedUploadLength(self, value: int) -> None: ...
    @UseUnsafeHeaderParsing.setter
    def UseUnsafeHeaderParsing(self, value: bool) -> None: ...


class Ipv6Element(ConfigurationElement):
    def __init__(self): ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...


class MailSettingsSectionGroup(ConfigurationSectionGroup):
    def __init__(self): ...
    @property
    def Smtp(self) -> SmtpSection: ...


class ModuleElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def Type(self) -> str: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class NetSectionGroup(ConfigurationSectionGroup):
    def __init__(self): ...
    @property
    def AuthenticationModules(self) -> AuthenticationModulesSection: ...
    @property
    def ConnectionManagement(self) -> ConnectionManagementSection: ...
    @property
    def DefaultProxy(self) -> DefaultProxySection: ...
    @property
    def MailSettings(self) -> MailSettingsSectionGroup: ...
    @property
    def RequestCaching(self) -> RequestCachingSection: ...
    @property
    def Settings(self) -> SettingsSection: ...
    @property
    def WebRequestModules(self) -> WebRequestModulesSection: ...
    def GetSectionGroup(config: Configuration) -> NetSectionGroup: ...


class PerformanceCountersElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...


class ProxyElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def AutoDetect(self) -> AutoDetectValues: ...
    @property
    def BypassOnLocal(self) -> BypassOnLocalValues: ...
    @property
    def ProxyAddress(self) -> Uri: ...
    @property
    def ScriptLocation(self) -> Uri: ...
    @property
    def UseSystemDefault(self) -> UseSystemDefaultValues: ...
    @AutoDetect.setter
    def AutoDetect(self, value: AutoDetectValues) -> None: ...
    @BypassOnLocal.setter
    def BypassOnLocal(self, value: BypassOnLocalValues) -> None: ...
    @ProxyAddress.setter
    def ProxyAddress(self, value: Uri) -> None: ...
    @ScriptLocation.setter
    def ScriptLocation(self, value: Uri) -> None: ...
    @UseSystemDefault.setter
    def UseSystemDefault(self, value: UseSystemDefaultValues) -> None: ...


class RequestCachingSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def DefaultFtpCachePolicy(self) -> FtpCachePolicyElement: ...
    @property
    def DefaultHttpCachePolicy(self) -> HttpCachePolicyElement: ...
    @property
    def DefaultPolicyLevel(self) -> RequestCacheLevel: ...
    @property
    def DisableAllCaching(self) -> bool: ...
    @property
    def IsPrivateCache(self) -> bool: ...
    @property
    def UnspecifiedMaximumAge(self) -> TimeSpan: ...
    @DefaultPolicyLevel.setter
    def DefaultPolicyLevel(self, value: RequestCacheLevel) -> None: ...
    @DisableAllCaching.setter
    def DisableAllCaching(self, value: bool) -> None: ...
    @IsPrivateCache.setter
    def IsPrivateCache(self, value: bool) -> None: ...
    @UnspecifiedMaximumAge.setter
    def UnspecifiedMaximumAge(self, value: TimeSpan) -> None: ...


class ServicePointManagerElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def CheckCertificateName(self) -> bool: ...
    @property
    def CheckCertificateRevocationList(self) -> bool: ...
    @property
    def DnsRefreshTimeout(self) -> int: ...
    @property
    def EnableDnsRoundRobin(self) -> bool: ...
    @property
    def EncryptionPolicy(self) -> EncryptionPolicy: ...
    @property
    def Expect100Continue(self) -> bool: ...
    @property
    def UseNagleAlgorithm(self) -> bool: ...
    @CheckCertificateName.setter
    def CheckCertificateName(self, value: bool) -> None: ...
    @CheckCertificateRevocationList.setter
    def CheckCertificateRevocationList(self, value: bool) -> None: ...
    @DnsRefreshTimeout.setter
    def DnsRefreshTimeout(self, value: int) -> None: ...
    @EnableDnsRoundRobin.setter
    def EnableDnsRoundRobin(self, value: bool) -> None: ...
    @EncryptionPolicy.setter
    def EncryptionPolicy(self, value: EncryptionPolicy) -> None: ...
    @Expect100Continue.setter
    def Expect100Continue(self, value: bool) -> None: ...
    @UseNagleAlgorithm.setter
    def UseNagleAlgorithm(self, value: bool) -> None: ...


class SettingsSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def HttpListener(self) -> HttpListenerElement: ...
    @property
    def HttpWebRequest(self) -> HttpWebRequestElement: ...
    @property
    def Ipv6(self) -> Ipv6Element: ...
    @property
    def PerformanceCounters(self) -> PerformanceCountersElement: ...
    @property
    def ServicePointManager(self) -> ServicePointManagerElement: ...
    @property
    def Socket(self) -> SocketElement: ...
    @property
    def WebProxyScript(self) -> WebProxyScriptElement: ...
    @property
    def WebUtility(self) -> WebUtilityElement: ...
    @property
    def WindowsAuthentication(self) -> WindowsAuthenticationElement: ...


class SmtpNetworkElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def ClientDomain(self) -> str: ...
    @property
    def DefaultCredentials(self) -> bool: ...
    @property
    def EnableSsl(self) -> bool: ...
    @property
    def Host(self) -> str: ...
    @property
    def Password(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @property
    def TargetName(self) -> str: ...
    @property
    def UserName(self) -> str: ...
    @ClientDomain.setter
    def ClientDomain(self, value: str) -> None: ...
    @DefaultCredentials.setter
    def DefaultCredentials(self, value: bool) -> None: ...
    @EnableSsl.setter
    def EnableSsl(self, value: bool) -> None: ...
    @Host.setter
    def Host(self, value: str) -> None: ...
    @Password.setter
    def Password(self, value: str) -> None: ...
    @Port.setter
    def Port(self, value: int) -> None: ...
    @TargetName.setter
    def TargetName(self, value: str) -> None: ...
    @UserName.setter
    def UserName(self, value: str) -> None: ...


class SmtpSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def DeliveryFormat(self) -> SmtpDeliveryFormat: ...
    @property
    def DeliveryMethod(self) -> SmtpDeliveryMethod: ...
    @property
    def From(self) -> str: ...
    @property
    def Network(self) -> SmtpNetworkElement: ...
    @property
    def SpecifiedPickupDirectory(self) -> SmtpSpecifiedPickupDirectoryElement: ...
    @DeliveryFormat.setter
    def DeliveryFormat(self, value: SmtpDeliveryFormat) -> None: ...
    @DeliveryMethod.setter
    def DeliveryMethod(self, value: SmtpDeliveryMethod) -> None: ...
    @From.setter
    def From(self, value: str) -> None: ...


class SmtpSpecifiedPickupDirectoryElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def PickupDirectoryLocation(self) -> str: ...
    @PickupDirectoryLocation.setter
    def PickupDirectoryLocation(self, value: str) -> None: ...


class SocketElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def AlwaysUseCompletionPortsForAccept(self) -> bool: ...
    @property
    def AlwaysUseCompletionPortsForConnect(self) -> bool: ...
    @property
    def IPProtectionLevel(self) -> IPProtectionLevel: ...
    @AlwaysUseCompletionPortsForAccept.setter
    def AlwaysUseCompletionPortsForAccept(self, value: bool) -> None: ...
    @AlwaysUseCompletionPortsForConnect.setter
    def AlwaysUseCompletionPortsForConnect(self, value: bool) -> None: ...
    @IPProtectionLevel.setter
    def IPProtectionLevel(self, value: IPProtectionLevel) -> None: ...


class UnicodeDecodingConformance:
    Auto = 0
    Strict = 1
    Compat = 2
    Loose = 3


class UnicodeEncodingConformance:
    Auto = 0
    Strict = 1
    Compat = 2


class UseSystemDefaultValues:
    False = 0
    True = 1
    Unspecified = -1


class WebProxyScriptElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def AutoConfigUrlRetryInterval(self) -> int: ...
    @property
    def DownloadTimeout(self) -> TimeSpan: ...
    @AutoConfigUrlRetryInterval.setter
    def AutoConfigUrlRetryInterval(self, value: int) -> None: ...
    @DownloadTimeout.setter
    def DownloadTimeout(self, value: TimeSpan) -> None: ...


class WebRequestModuleElement(ConfigurationElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, prefix: str, type: str): ...
    @overload
    def __init__(self, prefix: str, type: Type): ...
    @property
    def Prefix(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...


class WebRequestModuleElementCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: WebRequestModuleElement) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, index: int) -> WebRequestModuleElement: ...
    @property
    def Item(self, name: str) -> WebRequestModuleElement: ...
    def IndexOf(self, element: WebRequestModuleElement) -> int: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, element: WebRequestModuleElement) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: WebRequestModuleElement) -> None: ...
    @Item.setter
    def Item(self, name: str, value: WebRequestModuleElement) -> None: ...


class WebRequestModulesSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def WebRequestModules(self) -> WebRequestModuleElementCollection: ...


class WebUtilityElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def UnicodeDecodingConformance(self) -> UnicodeDecodingConformance: ...
    @property
    def UnicodeEncodingConformance(self) -> UnicodeEncodingConformance: ...
    @UnicodeDecodingConformance.setter
    def UnicodeDecodingConformance(self, value: UnicodeDecodingConformance) -> None: ...
    @UnicodeEncodingConformance.setter
    def UnicodeEncodingConformance(self, value: UnicodeEncodingConformance) -> None: ...


class WindowsAuthenticationElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def DefaultCredentialsHandleCacheSize(self) -> int: ...
    @DefaultCredentialsHandleCacheSize.setter
    def DefaultCredentialsHandleCacheSize(self, value: int) -> None: ...
