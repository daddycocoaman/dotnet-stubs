from typing import Tuple, Set, Iterable, List


class AdditionalContext(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Iterable[ContextItem]): ...
    @property
    def Items(self) -> List[ContextItem]: ...


class BinaryExchange(Object):
    @overload
    def __init__(self, binaryData: Set(Byte), valueType: Uri): ...
    @overload
    def __init__(self, binaryData: Set(Byte), valueType: Uri, encodingType: Uri): ...
    @property
    def BinaryData(self) -> Set(Byte): ...
    @property
    def EncodingType(self) -> Uri: ...
    @property
    def ValueType(self) -> Uri: ...


class ContextItem(Object):
    @overload
    def __init__(self, name: Uri): ...
    @overload
    def __init__(self, name: Uri, value: str): ...
    @overload
    def __init__(self, name: Uri, value: str, scope: Uri): ...
    @property
    def Name(self) -> Uri: ...
    @property
    def Scope(self) -> Uri: ...
    @property
    def Value(self) -> str: ...
    @Name.setter
    def Name(self, value: Uri) -> None: ...
    @Scope.setter
    def Scope(self, value: Uri) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class EndpointReference(Object):
    def __init__(self, uri: str): ...
    @property
    def Details(self) -> Collection: ...
    @property
    def Uri(self) -> Uri: ...
    @overload
    def ReadFrom(reader: XmlReader) -> EndpointReference: ...
    @overload
    def ReadFrom(reader: XmlDictionaryReader) -> EndpointReference: ...
    def WriteTo(self, writer: XmlWriter) -> None: ...


class Entropy(ProtectedKey):
    @overload
    def __init__(self, entropySizeInBits: int): ...
    @overload
    def __init__(self, secret: Set(Byte)): ...
    @overload
    def __init__(self, protectedKey: ProtectedKey): ...
    @overload
    def __init__(self, secret: Set(Byte), wrappingCredentials: EncryptingCredentials): ...


class InvalidRequestException(RequestException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class KeyTypes(Object):
    pass


class Lifetime(Object):
    @overload
    def __init__(self, created: DateTime, expires: DateTime): ...
    @overload
    def __init__(self, created: Nullable, expires: Nullable): ...
    @property
    def Created(self) -> Nullable: ...
    @property
    def Expires(self) -> Nullable: ...
    @Created.setter
    def Created(self, value: Nullable) -> None: ...
    @Expires.setter
    def Expires(self, value: Nullable) -> None: ...


class Participants(Object):
    def __init__(self): ...
    @property
    def Participant(self) -> List: ...
    @property
    def Primary(self) -> EndpointReference: ...
    @Primary.setter
    def Primary(self, value: EndpointReference) -> None: ...


class ProtectedKey(Object):
    @overload
    def __init__(self, secret: Set(Byte)): ...
    @overload
    def __init__(self, secret: Set(Byte), wrappingCredentials: EncryptingCredentials): ...
    @property
    def WrappingCredentials(self) -> EncryptingCredentials: ...
    def GetKeyBytes(self) -> Set(Byte): ...


class Renewing(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, allowRenewal: bool, okForRenewalAfterExpiration: bool): ...
    @property
    def AllowRenewal(self) -> bool: ...
    @property
    def OkForRenewalAfterExpiration(self) -> bool: ...
    @AllowRenewal.setter
    def AllowRenewal(self, value: bool) -> None: ...
    @OkForRenewalAfterExpiration.setter
    def OkForRenewalAfterExpiration(self, value: bool) -> None: ...


class RequestClaim(Object):
    @overload
    def __init__(self, claimType: str): ...
    @overload
    def __init__(self, claimType: str, isOptional: bool): ...
    @overload
    def __init__(self, claimType: str, isOptional: bool, value: str): ...
    @property
    def ClaimType(self) -> str: ...
    @property
    def IsOptional(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    @IsOptional.setter
    def IsOptional(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class RequestClaimCollection:
    def __init__(self): ...
    @property
    def Dialect(self) -> str: ...
    @Dialect.setter
    def Dialect(self, value: str) -> None: ...


class RequestedProofToken(Object):
    @overload
    def __init__(self, computedKeyAlgorithm: str): ...
    @overload
    def __init__(self, secret: Set(Byte)): ...
    @overload
    def __init__(self, protectedKey: ProtectedKey): ...
    @overload
    def __init__(self, secret: Set(Byte), wrappingCredentials: EncryptingCredentials): ...
    @property
    def ComputedKeyAlgorithm(self) -> str: ...
    @property
    def ProtectedKey(self) -> ProtectedKey: ...


class RequestedSecurityToken(Object):
    @overload
    def __init__(self, token: SecurityToken): ...
    @overload
    def __init__(self, tokenAsXml: XmlElement): ...
    @property
    def SecurityToken(self) -> SecurityToken: ...
    @property
    def SecurityTokenXml(self) -> XmlElement: ...


class RequestSecurityToken(WSTrustMessage):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, requestType: str): ...
    @overload
    def __init__(self, requestType: str, keyType: str): ...
    @property
    def ActAs(self) -> SecurityTokenElement: ...
    @property
    def AdditionalContext(self) -> AdditionalContext: ...
    @property
    def CancelTarget(self) -> SecurityTokenElement: ...
    @property
    def Claims(self) -> RequestClaimCollection: ...
    @property
    def ComputedKeyAlgorithm(self) -> str: ...
    @property
    def Delegatable(self) -> Nullable: ...
    @property
    def DelegateTo(self) -> SecurityTokenElement: ...
    @property
    def Encryption(self) -> SecurityTokenElement: ...
    @property
    def Forwardable(self) -> Nullable: ...
    @property
    def Issuer(self) -> EndpointReference: ...
    @property
    def OnBehalfOf(self) -> SecurityTokenElement: ...
    @property
    def Participants(self) -> Participants: ...
    @property
    def ProofEncryption(self) -> SecurityTokenElement: ...
    @property
    def Renewing(self) -> Renewing: ...
    @property
    def RenewTarget(self) -> SecurityTokenElement: ...
    @property
    def SecondaryParameters(self) -> RequestSecurityToken: ...
    @property
    def ValidateTarget(self) -> SecurityTokenElement: ...
    @ActAs.setter
    def ActAs(self, value: SecurityTokenElement) -> None: ...
    @AdditionalContext.setter
    def AdditionalContext(self, value: AdditionalContext) -> None: ...
    @CancelTarget.setter
    def CancelTarget(self, value: SecurityTokenElement) -> None: ...
    @ComputedKeyAlgorithm.setter
    def ComputedKeyAlgorithm(self, value: str) -> None: ...
    @Delegatable.setter
    def Delegatable(self, value: Nullable) -> None: ...
    @DelegateTo.setter
    def DelegateTo(self, value: SecurityTokenElement) -> None: ...
    @Encryption.setter
    def Encryption(self, value: SecurityTokenElement) -> None: ...
    @Forwardable.setter
    def Forwardable(self, value: Nullable) -> None: ...
    @Issuer.setter
    def Issuer(self, value: EndpointReference) -> None: ...
    @OnBehalfOf.setter
    def OnBehalfOf(self, value: SecurityTokenElement) -> None: ...
    @Participants.setter
    def Participants(self, value: Participants) -> None: ...
    @ProofEncryption.setter
    def ProofEncryption(self, value: SecurityTokenElement) -> None: ...
    @Renewing.setter
    def Renewing(self, value: Renewing) -> None: ...
    @RenewTarget.setter
    def RenewTarget(self, value: SecurityTokenElement) -> None: ...
    @SecondaryParameters.setter
    def SecondaryParameters(self, value: RequestSecurityToken) -> None: ...
    @ValidateTarget.setter
    def ValidateTarget(self, value: SecurityTokenElement) -> None: ...


class RequestSecurityTokenResponse(WSTrustMessage):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: WSTrustMessage): ...
    @property
    def IsFinal(self) -> bool: ...
    @property
    def RequestedAttachedReference(self) -> SecurityKeyIdentifierClause: ...
    @property
    def RequestedProofToken(self) -> RequestedProofToken: ...
    @property
    def RequestedSecurityToken(self) -> RequestedSecurityToken: ...
    @property
    def RequestedTokenCancelled(self) -> bool: ...
    @property
    def RequestedUnattachedReference(self) -> SecurityKeyIdentifierClause: ...
    @property
    def Status(self) -> Status: ...
    @IsFinal.setter
    def IsFinal(self, value: bool) -> None: ...
    @RequestedAttachedReference.setter
    def RequestedAttachedReference(self, value: SecurityKeyIdentifierClause) -> None: ...
    @RequestedProofToken.setter
    def RequestedProofToken(self, value: RequestedProofToken) -> None: ...
    @RequestedSecurityToken.setter
    def RequestedSecurityToken(self, value: RequestedSecurityToken) -> None: ...
    @RequestedTokenCancelled.setter
    def RequestedTokenCancelled(self, value: bool) -> None: ...
    @RequestedUnattachedReference.setter
    def RequestedUnattachedReference(self, value: SecurityKeyIdentifierClause) -> None: ...
    @Status.setter
    def Status(self, value: Status) -> None: ...


class RequestTypes(Object):
    pass


class Status(Object):
    def __init__(self, code: str, reason: str): ...
    @property
    def Code(self) -> str: ...
    @property
    def Reason(self) -> str: ...
    @Code.setter
    def Code(self, value: str) -> None: ...
    @Reason.setter
    def Reason(self, value: str) -> None: ...


class UseKey(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, ski: SecurityKeyIdentifier): ...
    @overload
    def __init__(self, token: SecurityToken): ...
    @overload
    def __init__(self, ski: SecurityKeyIdentifier, token: SecurityToken): ...
    @property
    def SecurityKeyIdentifier(self) -> SecurityKeyIdentifier: ...
    @property
    def Token(self) -> SecurityToken: ...


class WSTrust13RequestSerializer(WSTrustRequestSerializer):
    def __init__(self): ...
    def CanRead(self, reader: XmlReader) -> bool: ...
    def ReadXml(self, reader: XmlReader, context: WSTrustSerializationContext) -> RequestSecurityToken: ...
    def ReadXmlElement(self, reader: XmlReader, rst: RequestSecurityToken, context: WSTrustSerializationContext) -> None: ...
    def WriteKnownRequestElement(self, rst: RequestSecurityToken, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXml(self, request: RequestSecurityToken, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXmlElement(self, writer: XmlWriter, elementName: str, elementValue: Object, rst: RequestSecurityToken, context: WSTrustSerializationContext) -> None: ...


class WSTrust13ResponseSerializer(WSTrustResponseSerializer):
    def __init__(self): ...
    def CanRead(self, reader: XmlReader) -> bool: ...
    def ReadXml(self, reader: XmlReader, context: WSTrustSerializationContext) -> RequestSecurityTokenResponse: ...
    def ReadXmlElement(self, reader: XmlReader, rstr: RequestSecurityTokenResponse, context: WSTrustSerializationContext) -> None: ...
    def WriteKnownResponseElement(self, rstr: RequestSecurityTokenResponse, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXml(self, response: RequestSecurityTokenResponse, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXmlElement(self, writer: XmlWriter, elementName: str, elementValue: Object, rstr: RequestSecurityTokenResponse, context: WSTrustSerializationContext) -> None: ...


class WSTrustFeb2005RequestSerializer(WSTrustRequestSerializer):
    def __init__(self): ...
    def CanRead(self, reader: XmlReader) -> bool: ...
    def ReadXml(self, reader: XmlReader, context: WSTrustSerializationContext) -> RequestSecurityToken: ...
    def ReadXmlElement(self, reader: XmlReader, rst: RequestSecurityToken, context: WSTrustSerializationContext) -> None: ...
    def WriteKnownRequestElement(self, rst: RequestSecurityToken, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXml(self, request: RequestSecurityToken, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXmlElement(self, writer: XmlWriter, elementName: str, elementValue: Object, rst: RequestSecurityToken, context: WSTrustSerializationContext) -> None: ...


class WSTrustFeb2005ResponseSerializer(WSTrustResponseSerializer):
    def __init__(self): ...
    def CanRead(self, reader: XmlReader) -> bool: ...
    def ReadXml(self, reader: XmlReader, context: WSTrustSerializationContext) -> RequestSecurityTokenResponse: ...
    def ReadXmlElement(self, reader: XmlReader, rstr: RequestSecurityTokenResponse, context: WSTrustSerializationContext) -> None: ...
    def WriteKnownResponseElement(self, rstr: RequestSecurityTokenResponse, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXml(self, response: RequestSecurityTokenResponse, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXmlElement(self, writer: XmlWriter, elementName: str, elementValue: Object, rstr: RequestSecurityTokenResponse, context: WSTrustSerializationContext) -> None: ...


class WSTrustMessage(OpenObject):
    @property
    def AllowPostdating(self) -> bool: ...
    @property
    def AppliesTo(self) -> EndpointReference: ...
    @property
    def AuthenticationType(self) -> str: ...
    @property
    def BinaryExchange(self) -> BinaryExchange: ...
    @property
    def CanonicalizationAlgorithm(self) -> str: ...
    @property
    def Context(self) -> str: ...
    @property
    def EncryptionAlgorithm(self) -> str: ...
    @property
    def EncryptWith(self) -> str: ...
    @property
    def Entropy(self) -> Entropy: ...
    @property
    def KeySizeInBits(self) -> Nullable: ...
    @property
    def KeyType(self) -> str: ...
    @property
    def KeyWrapAlgorithm(self) -> str: ...
    @property
    def Lifetime(self) -> Lifetime: ...
    @property
    def ReplyTo(self) -> str: ...
    @property
    def RequestType(self) -> str: ...
    @property
    def SignatureAlgorithm(self) -> str: ...
    @property
    def SignWith(self) -> str: ...
    @property
    def TokenType(self) -> str: ...
    @property
    def UseKey(self) -> UseKey: ...
    @AllowPostdating.setter
    def AllowPostdating(self, value: bool) -> None: ...
    @AppliesTo.setter
    def AppliesTo(self, value: EndpointReference) -> None: ...
    @AuthenticationType.setter
    def AuthenticationType(self, value: str) -> None: ...
    @BinaryExchange.setter
    def BinaryExchange(self, value: BinaryExchange) -> None: ...
    @CanonicalizationAlgorithm.setter
    def CanonicalizationAlgorithm(self, value: str) -> None: ...
    @Context.setter
    def Context(self, value: str) -> None: ...
    @EncryptionAlgorithm.setter
    def EncryptionAlgorithm(self, value: str) -> None: ...
    @EncryptWith.setter
    def EncryptWith(self, value: str) -> None: ...
    @Entropy.setter
    def Entropy(self, value: Entropy) -> None: ...
    @KeySizeInBits.setter
    def KeySizeInBits(self, value: Nullable) -> None: ...
    @KeyType.setter
    def KeyType(self, value: str) -> None: ...
    @KeyWrapAlgorithm.setter
    def KeyWrapAlgorithm(self, value: str) -> None: ...
    @Lifetime.setter
    def Lifetime(self, value: Lifetime) -> None: ...
    @ReplyTo.setter
    def ReplyTo(self, value: str) -> None: ...
    @RequestType.setter
    def RequestType(self, value: str) -> None: ...
    @SignatureAlgorithm.setter
    def SignatureAlgorithm(self, value: str) -> None: ...
    @SignWith.setter
    def SignWith(self, value: str) -> None: ...
    @TokenType.setter
    def TokenType(self, value: str) -> None: ...
    @UseKey.setter
    def UseKey(self, value: UseKey) -> None: ...


class WSTrustRequestSerializer(Object):
    def CanRead(self, reader: XmlReader) -> bool: ...
    def CreateRequestSecurityToken(self) -> RequestSecurityToken: ...
    def ReadXml(self, reader: XmlReader, context: WSTrustSerializationContext) -> RequestSecurityToken: ...
    def ReadXmlElement(self, reader: XmlReader, requestSecurityToken: RequestSecurityToken, context: WSTrustSerializationContext) -> None: ...
    def Validate(self, requestSecurityToken: RequestSecurityToken) -> None: ...
    def WriteKnownRequestElement(self, requestSecurityToken: RequestSecurityToken, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXml(self, request: RequestSecurityToken, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXmlElement(self, writer: XmlWriter, elementName: str, elementValue: Object, requestSecurityToken: RequestSecurityToken, context: WSTrustSerializationContext) -> None: ...


class WSTrustResponseSerializer(Object):
    def CanRead(self, reader: XmlReader) -> bool: ...
    def CreateInstance(self) -> RequestSecurityTokenResponse: ...
    def ReadXml(self, reader: XmlReader, context: WSTrustSerializationContext) -> RequestSecurityTokenResponse: ...
    def ReadXmlElement(self, reader: XmlReader, requestSecurityTokenResponse: RequestSecurityTokenResponse, context: WSTrustSerializationContext) -> None: ...
    def Validate(self, requestSecurityTokenResponse: RequestSecurityTokenResponse) -> None: ...
    def WriteKnownResponseElement(self, requestSecurityTokenResponse: RequestSecurityTokenResponse, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXml(self, response: RequestSecurityTokenResponse, writer: XmlWriter, context: WSTrustSerializationContext) -> None: ...
    def WriteXmlElement(self, writer: XmlWriter, elementName: str, elementValue: Object, requestSecurityTokenResponse: RequestSecurityTokenResponse, context: WSTrustSerializationContext) -> None: ...


class WSTrustSerializationContext(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, securityTokenHandlerCollectionManager: SecurityTokenHandlerCollectionManager): ...
    @overload
    def __init__(self, securityTokenHandlerCollectionManager: SecurityTokenHandlerCollectionManager, securityTokenResolver: SecurityTokenResolver, useKeyTokenResolver: SecurityTokenResolver): ...
    @property
    def SecurityTokenHandlerCollectionManager(self) -> SecurityTokenHandlerCollectionManager: ...
    @property
    def SecurityTokenHandlers(self) -> SecurityTokenHandlerCollection: ...
    @property
    def TokenResolver(self) -> SecurityTokenResolver: ...
    @property
    def UseKeyTokenResolver(self) -> SecurityTokenResolver: ...
    @SecurityTokenHandlerCollectionManager.setter
    def SecurityTokenHandlerCollectionManager(self, value: SecurityTokenHandlerCollectionManager) -> None: ...
    @TokenResolver.setter
    def TokenResolver(self, value: SecurityTokenResolver) -> None: ...
    @UseKeyTokenResolver.setter
    def UseKeyTokenResolver(self, value: SecurityTokenResolver) -> None: ...


class WSTrustSerializationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
