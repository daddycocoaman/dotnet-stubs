__all__ = ['Claims','Configuration','Metadata','Policy','Selectors','Tokens']
from typing import Tuple, Set, Iterable, List


class AsynchronousOperationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class AsyncResult(Object):
    def Dispose(self) -> None: ...
    def End(result: IAsyncResult) -> None: ...
    @property
    def AsyncState(self) -> Object: ...
    @property
    def AsyncWaitHandle(self) -> WaitHandle: ...
    @property
    def CompletedSynchronously(self) -> bool: ...
    @property
    def IsCompleted(self) -> bool: ...


class BadRequestException(RequestException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class CookieTransform(Object):
    def Decode(self, encoded: Set(Byte)) -> Set(Byte): ...
    def Encode(self, value: Set(Byte)) -> Set(Byte): ...


class DeflateCookieTransform(CookieTransform):
    def __init__(self): ...
    def Decode(self, encoded: Set(Byte)) -> Set(Byte): ...
    def Encode(self, value: Set(Byte)) -> Set(Byte): ...
    @property
    def MaxDecompressedSize(self) -> int: ...
    @MaxDecompressedSize.setter
    def MaxDecompressedSize(self, value: int) -> None: ...


class DelegatingXmlDictionaryReader(XmlDictionaryReader):
    def Close(self) -> None: ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def Depth(self) -> int: ...
    @property
    def EOF(self) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsEmptyElement(self) -> bool: ...
    @property
    def Item(self, i: int) -> str: ...
    @property
    def Item(self, name: str) -> str: ...
    @property
    def Item(self, name: str, namespaceURI: str) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def QuoteChar(self) -> Char: ...
    @property
    def ReadState(self) -> ReadState: ...
    @property
    def Value(self) -> str: ...
    @property
    def ValueType(self) -> Type: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @overload
    def GetAttribute(self, name: str) -> str: ...
    @overload
    def GetAttribute(self, i: int) -> str: ...
    @overload
    def GetAttribute(self, name: str, namespaceURI: str) -> str: ...
    def LookupNamespace(self, prefix: str) -> str: ...
    @overload
    def MoveToAttribute(self, name: str) -> bool: ...
    @overload
    def MoveToAttribute(self, i: int) -> None: ...
    @overload
    def MoveToAttribute(self, name: str, ns: str) -> bool: ...
    def MoveToElement(self) -> bool: ...
    def MoveToFirstAttribute(self) -> bool: ...
    def MoveToNextAttribute(self) -> bool: ...
    def Read(self) -> bool: ...
    def ReadAttributeValue(self) -> bool: ...
    @overload
    def ReadContentAsBase64(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    @overload
    def ReadContentAsBinHex(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadContentAsUniqueId(self) -> UniqueId: ...
    def ReadValueChunk(self, buffer: Set(Char), index: int, count: int) -> int: ...
    def ResolveEntity(self) -> None: ...


class DelegatingXmlDictionaryWriter(XmlDictionaryWriter):
    def Close(self) -> None: ...
    def EndCanonicalization(self) -> None: ...
    def Flush(self) -> None: ...
    @property
    def CanCanonicalize(self) -> bool: ...
    @property
    def WriteState(self) -> WriteState: ...
    def LookupPrefix(self, ns: str) -> str: ...
    def StartCanonicalization(self, stream: Stream, includeComments: bool, inclusivePrefixes: Set(str)) -> None: ...
    def WriteBase64(self, buffer: Set(Byte), index: int, count: int) -> None: ...
    def WriteCData(self, text: str) -> None: ...
    def WriteCharEntity(self, ch: Char) -> None: ...
    def WriteChars(self, buffer: Set(Char), index: int, count: int) -> None: ...
    def WriteComment(self, text: str) -> None: ...
    def WriteDocType(self, name: str, pubid: str, sysid: str, subset: str) -> None: ...
    def WriteEndAttribute(self) -> None: ...
    def WriteEndDocument(self) -> None: ...
    def WriteEndElement(self) -> None: ...
    def WriteEntityRef(self, name: str) -> None: ...
    def WriteFullEndElement(self) -> None: ...
    def WriteProcessingInstruction(self, name: str, text: str) -> None: ...
    @overload
    def WriteRaw(self, data: str) -> None: ...
    @overload
    def WriteRaw(self, buffer: Set(Char), index: int, count: int) -> None: ...
    @overload
    def WriteStartAttribute(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartDocument(self) -> None: ...
    @overload
    def WriteStartDocument(self, standalone: bool) -> None: ...
    @overload
    def WriteStartElement(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteString(self, text: str) -> None: ...
    def WriteSurrogateCharEntity(self, lowChar: Char, highChar: Char) -> None: ...
    def WriteWhitespace(self, ws: str) -> None: ...
    @overload
    def WriteXmlAttribute(self, localName: str, value: str) -> None: ...
    @overload
    def WriteXmlnsAttribute(self, prefix: str, namespaceUri: str) -> None: ...


class EnvelopedSignatureReader(DelegatingXmlDictionaryReader):
    @overload
    def __init__(self, reader: XmlReader, securityTokenSerializer: SecurityTokenSerializer): ...
    @overload
    def __init__(self, reader: XmlReader, securityTokenSerializer: SecurityTokenSerializer, signingTokenResolver: SecurityTokenResolver): ...
    @overload
    def __init__(self, reader: XmlReader, securityTokenSerializer: SecurityTokenSerializer, signingTokenResolver: SecurityTokenResolver, requireSignature: bool, automaticallyReadSignature: bool, resolveIntrinsicSigningKeys: bool): ...
    @property
    def SigningCredentials(self) -> SigningCredentials: ...
    def Read(self) -> bool: ...
    def TryReadSignature(self) -> bool: ...


class EnvelopedSignatureWriter(DelegatingXmlDictionaryWriter):
    def __init__(self, innerWriter: XmlWriter, signingCredentials: SigningCredentials, referenceId: str, securityTokenSerializer: SecurityTokenSerializer): ...
    def WriteEndElement(self) -> None: ...
    def WriteFullEndElement(self) -> None: ...
    def WriteSignature(self) -> None: ...
    @overload
    def WriteStartElement(self, prefix: str, localName: str, ns: str) -> None: ...


class LimitExceededException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class OpenObject(Object):
    @property
    def Properties(self) -> Dictionary: ...


class ProtectedDataCookieTransform(CookieTransform):
    def __init__(self): ...
    def Decode(self, encoded: Set(Byte)) -> Set(Byte): ...
    def Encode(self, value: Set(Byte)) -> Set(Byte): ...


class RequestException(Exception):
    pass


class RequestFailedException(RequestException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class RsaEncryptionCookieTransform(CookieTransform):
    @overload
    def __init__(self, key: RSA): ...
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    def Decode(self, encoded: Set(Byte)) -> Set(Byte): ...
    def Encode(self, value: Set(Byte)) -> Set(Byte): ...
    @property
    def EncryptionKey(self) -> RSA: ...
    @property
    def HashName(self) -> str: ...
    @EncryptionKey.setter
    def EncryptionKey(self, value: RSA) -> None: ...
    @HashName.setter
    def HashName(self, value: str) -> None: ...


class RsaSignatureCookieTransform(CookieTransform):
    @overload
    def __init__(self, key: RSA): ...
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    def Decode(self, encoded: Set(Byte)) -> Set(Byte): ...
    def Encode(self, value: Set(Byte)) -> Set(Byte): ...
    @property
    def HashName(self) -> str: ...
    @property
    def SigningKey(self) -> RSA: ...
    @HashName.setter
    def HashName(self, value: str) -> None: ...
    @SigningKey.setter
    def SigningKey(self, value: RSA) -> None: ...


class Scope(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, appliesToAddress: str): ...
    @overload
    def __init__(self, appliesToAddress: str, signingCredentials: SigningCredentials): ...
    @overload
    def __init__(self, appliesToAddress: str, encryptingCredentials: EncryptingCredentials): ...
    @overload
    def __init__(self, appliesToAddress: str, signingCredentials: SigningCredentials, encryptingCredentials: EncryptingCredentials): ...
    @property
    def AppliesToAddress(self) -> str: ...
    @property
    def EncryptingCredentials(self) -> EncryptingCredentials: ...
    @property
    def Properties(self) -> Dictionary: ...
    @property
    def ReplyToAddress(self) -> str: ...
    @property
    def SigningCredentials(self) -> SigningCredentials: ...
    @property
    def SymmetricKeyEncryptionRequired(self) -> bool: ...
    @property
    def TokenEncryptionRequired(self) -> bool: ...
    @AppliesToAddress.setter
    def AppliesToAddress(self, value: str) -> None: ...
    @EncryptingCredentials.setter
    def EncryptingCredentials(self, value: EncryptingCredentials) -> None: ...
    @ReplyToAddress.setter
    def ReplyToAddress(self, value: str) -> None: ...
    @SigningCredentials.setter
    def SigningCredentials(self, value: SigningCredentials) -> None: ...
    @SymmetricKeyEncryptionRequired.setter
    def SymmetricKeyEncryptionRequired(self, value: bool) -> None: ...
    @TokenEncryptionRequired.setter
    def TokenEncryptionRequired(self, value: bool) -> None: ...


class SecurityMessageSerializationException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class SecurityTokenService(Object):
    def BeginCancel(self, principal: ClaimsPrincipal, request: RequestSecurityToken, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginIssue(self, principal: ClaimsPrincipal, request: RequestSecurityToken, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginRenew(self, principal: ClaimsPrincipal, request: RequestSecurityToken, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginValidate(self, principal: ClaimsPrincipal, request: RequestSecurityToken, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def Cancel(self, principal: ClaimsPrincipal, request: RequestSecurityToken) -> RequestSecurityTokenResponse: ...
    def EndCancel(self, result: IAsyncResult) -> RequestSecurityTokenResponse: ...
    def EndIssue(self, result: IAsyncResult) -> RequestSecurityTokenResponse: ...
    def EndRenew(self, result: IAsyncResult) -> RequestSecurityTokenResponse: ...
    def EndValidate(self, result: IAsyncResult) -> RequestSecurityTokenResponse: ...
    @property
    def Principal(self) -> ClaimsPrincipal: ...
    @property
    def Request(self) -> RequestSecurityToken: ...
    @property
    def Scope(self) -> Scope: ...
    @property
    def SecurityTokenServiceConfiguration(self) -> SecurityTokenServiceConfiguration: ...
    def Issue(self, principal: ClaimsPrincipal, request: RequestSecurityToken) -> RequestSecurityTokenResponse: ...
    def Renew(self, principal: ClaimsPrincipal, request: RequestSecurityToken) -> RequestSecurityTokenResponse: ...
    @Principal.setter
    def Principal(self, value: ClaimsPrincipal) -> None: ...
    @Request.setter
    def Request(self, value: RequestSecurityToken) -> None: ...
    @Scope.setter
    def Scope(self, value: Scope) -> None: ...
    def Validate(self, principal: ClaimsPrincipal, request: RequestSecurityToken) -> RequestSecurityTokenResponse: ...


class SignatureVerificationFailedException(SecurityTokenException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...




class UnsupportedTokenTypeBadRequestException(BadRequestException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tokenType: str): ...
    @overload
    def __init__(self, message: str, exception: Exception): ...
    @property
    def TokenType(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @TokenType.setter
    def TokenType(self, value: str) -> None: ...
