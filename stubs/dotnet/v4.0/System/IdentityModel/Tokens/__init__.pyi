from typing import Tuple, Set, Iterable, List


class AggregateTokenResolver(SecurityTokenResolver):
    def __init__(self, tokenResolvers: Iterable[SecurityTokenResolver]): ...
    @property
    def TokenResolvers(self) -> ReadOnlyCollection: ...


class AsymmetricProofDescriptor(ProofDescriptor):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rsaAlgorithm: RSA): ...
    @overload
    def __init__(self, keyIdentifier: SecurityKeyIdentifier): ...
    def ApplyTo(self, response: RequestSecurityTokenResponse) -> None: ...
    @property
    def KeyIdentifier(self) -> SecurityKeyIdentifier: ...


class AsymmetricSecurityKey(SecurityKey):
    def GetAsymmetricAlgorithm(self, algorithm: str, privateKey: bool) -> AsymmetricAlgorithm: ...
    def GetHashAlgorithmForSignature(self, algorithm: str) -> HashAlgorithm: ...
    def GetSignatureDeformatter(self, algorithm: str) -> AsymmetricSignatureDeformatter: ...
    def GetSignatureFormatter(self, algorithm: str) -> AsymmetricSignatureFormatter: ...
    def HasPrivateKey(self) -> bool: ...


class AudienceRestriction(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, audienceMode: AudienceUriMode): ...
    @property
    def AllowedAudienceUris(self) -> Collection: ...
    @property
    def AudienceMode(self) -> AudienceUriMode: ...
    @AudienceMode.setter
    def AudienceMode(self, value: AudienceUriMode) -> None: ...


class AudienceUriValidationFailedException(SecurityTokenValidationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class AuthenticationContext(Object):
    def __init__(self): ...
    @property
    def Authorities(self) -> Collection: ...
    @property
    def ContextClass(self) -> str: ...
    @property
    def ContextDeclaration(self) -> str: ...
    @ContextClass.setter
    def ContextClass(self, value: str) -> None: ...
    @ContextDeclaration.setter
    def ContextDeclaration(self, value: str) -> None: ...


class AuthenticationMethods(Object):
    pass


class BinaryKeyIdentifierClause(SecurityKeyIdentifierClause):
    def GetBuffer(self) -> Set(Byte): ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(self, data: Set(Byte)) -> bool: ...
    @overload
    def Matches(self, data: Set(Byte), offset: int) -> bool: ...


class BootstrapContext(Object):
    @overload
    def __init__(self, token: str): ...
    @overload
    def __init__(self, token: Set(Byte)): ...
    @overload
    def __init__(self, token: SecurityToken, tokenHandler: SecurityTokenHandler): ...
    @property
    def SecurityToken(self) -> SecurityToken: ...
    @property
    def SecurityTokenHandler(self) -> SecurityTokenHandler: ...
    @property
    def Token(self) -> str: ...
    @property
    def TokenBytes(self) -> Set(Byte): ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class ComputedKeyAlgorithms(Object):
    pass


class ConfigurationBasedIssuerNameRegistry(IssuerNameRegistry):
    def __init__(self): ...
    def AddTrustedIssuer(self, certificateThumbprint: str, name: str) -> None: ...
    @property
    def ConfiguredTrustedIssuers(self) -> IDictionary: ...
    @overload
    def GetIssuerName(self, securityToken: SecurityToken) -> str: ...
    def LoadCustomConfiguration(self, customConfiguration: XmlNodeList) -> None: ...


class EmptySecurityKeyIdentifierClause(SecurityKeyIdentifierClause):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: Object): ...
    @property
    def Context(self) -> Object: ...


class EncryptedKeyEncryptingCredentials(EncryptingCredentials):
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @overload
    def __init__(self, wrappingCredentials: EncryptingCredentials, keySizeInBits: int, encryptionAlgorithm: str): ...
    @overload
    def __init__(self, certificate: X509Certificate2, keyWrappingAlgorithm: str, keySizeInBits: int, encryptionAlgorithm: str): ...
    @property
    def WrappingCredentials(self) -> EncryptingCredentials: ...


class EncryptedKeyIdentifierClause(BinaryKeyIdentifierClause):
    @overload
    def __init__(self, encryptedKey: Set(Byte), encryptionMethod: str): ...
    @overload
    def __init__(self, encryptedKey: Set(Byte), encryptionMethod: str, encryptingKeyIdentifier: SecurityKeyIdentifier): ...
    @overload
    def __init__(self, encryptedKey: Set(Byte), encryptionMethod: str, encryptingKeyIdentifier: SecurityKeyIdentifier, carriedKeyName: str): ...
    @overload
    def __init__(self, encryptedKey: Set(Byte), encryptionMethod: str, encryptingKeyIdentifier: SecurityKeyIdentifier, carriedKeyName: str, derivationNonce: Set(Byte), derivationLength: int): ...
    @property
    def CarriedKeyName(self) -> str: ...
    @property
    def EncryptingKeyIdentifier(self) -> SecurityKeyIdentifier: ...
    @property
    def EncryptionMethod(self) -> str: ...
    def GetEncryptedKey(self) -> Set(Byte): ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(self, encryptedKey: Set(Byte), encryptionMethod: str, carriedKeyName: str) -> bool: ...
    def ToString(self) -> str: ...


class EncryptedSecurityToken(SecurityToken):
    def __init__(self, token: SecurityToken, encryptingCredentials: EncryptingCredentials): ...
    def CanCreateKeyIdentifierClause(self) -> bool: ...
    def CreateKeyIdentifierClause(self) -> T: ...
    @property
    def EncryptingCredentials(self) -> EncryptingCredentials: ...
    @property
    def Id(self) -> str: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def Token(self) -> SecurityToken: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    def ResolveKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> SecurityKey: ...


class EncryptedSecurityTokenHandler(SecurityTokenHandler):
    def __init__(self): ...
    def CanReadKeyIdentifierClause(self, reader: XmlReader) -> bool: ...
    @overload
    def CanReadToken(self, reader: XmlReader) -> bool: ...
    @property
    def CanWriteToken(self) -> bool: ...
    @property
    def KeyInfoSerializer(self) -> SecurityTokenSerializer: ...
    @property
    def TokenType(self) -> Type: ...
    def GetTokenTypeIdentifiers(self) -> Set(str): ...
    def ReadKeyIdentifierClause(self, reader: XmlReader) -> SecurityKeyIdentifierClause: ...
    @overload
    def ReadToken(self, reader: XmlReader) -> SecurityToken: ...
    @KeyInfoSerializer.setter
    def KeyInfoSerializer(self, value: SecurityTokenSerializer) -> None: ...
    @overload
    def WriteToken(self, writer: XmlWriter, token: SecurityToken) -> None: ...


class EncryptedTokenDecryptionFailedException(SecurityTokenException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class EncryptingCredentials(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, key: SecurityKey, keyIdentifier: SecurityKeyIdentifier, algorithm: str): ...
    @property
    def Algorithm(self) -> str: ...
    @property
    def SecurityKey(self) -> SecurityKey: ...
    @property
    def SecurityKeyIdentifier(self) -> SecurityKeyIdentifier: ...
    @Algorithm.setter
    def Algorithm(self, value: str) -> None: ...
    @SecurityKey.setter
    def SecurityKey(self, value: SecurityKey) -> None: ...
    @SecurityKeyIdentifier.setter
    def SecurityKeyIdentifier(self, value: SecurityKeyIdentifier) -> None: ...


class GenericXmlSecurityKeyIdentifierClause(SecurityKeyIdentifierClause):
    @overload
    def __init__(self, referenceXml: XmlElement): ...
    @overload
    def __init__(self, referenceXml: XmlElement, derivationNonce: Set(Byte), derivationLength: int): ...
    @property
    def ReferenceXml(self) -> XmlElement: ...
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...


class GenericXmlSecurityToken(SecurityToken):
    def __init__(self, tokenXml: XmlElement, proofToken: SecurityToken, effectiveTime: DateTime, expirationTime: DateTime, internalTokenReference: SecurityKeyIdentifierClause, externalTokenReference: SecurityKeyIdentifierClause, authorizationPolicies: ReadOnlyCollection): ...
    def CanCreateKeyIdentifierClause(self) -> bool: ...
    def CreateKeyIdentifierClause(self) -> T: ...
    @property
    def AuthorizationPolicies(self) -> ReadOnlyCollection: ...
    @property
    def ExternalTokenReference(self) -> SecurityKeyIdentifierClause: ...
    @property
    def Id(self) -> str: ...
    @property
    def InternalTokenReference(self) -> SecurityKeyIdentifierClause: ...
    @property
    def ProofToken(self) -> SecurityToken: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def TokenXml(self) -> XmlElement: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    def ToString(self) -> str: ...


class InMemorySymmetricSecurityKey(SymmetricSecurityKey):
    @overload
    def __init__(self, symmetricKey: Set(Byte)): ...
    @overload
    def __init__(self, symmetricKey: Set(Byte), cloneBuffer: bool): ...
    def DecryptKey(self, algorithm: str, keyData: Set(Byte)) -> Set(Byte): ...
    def EncryptKey(self, algorithm: str, keyData: Set(Byte)) -> Set(Byte): ...
    def GenerateDerivedKey(self, algorithm: str, label: Set(Byte), nonce: Set(Byte), derivedKeyLength: int, offset: int) -> Set(Byte): ...
    @property
    def KeySize(self) -> int: ...
    def GetDecryptionTransform(self, algorithm: str, iv: Set(Byte)) -> ICryptoTransform: ...
    def GetEncryptionTransform(self, algorithm: str, iv: Set(Byte)) -> ICryptoTransform: ...
    def GetIVSize(self, algorithm: str) -> int: ...
    def GetKeyedHashAlgorithm(self, algorithm: str) -> KeyedHashAlgorithm: ...
    def GetSymmetricAlgorithm(self, algorithm: str) -> SymmetricAlgorithm: ...
    def GetSymmetricKey(self) -> Set(Byte): ...
    def IsAsymmetricAlgorithm(self, algorithm: str) -> bool: ...
    def IsSupportedAlgorithm(self, algorithm: str) -> bool: ...
    def IsSymmetricAlgorithm(self, algorithm: str) -> bool: ...


class IssuerNameRegistry(Object):
    @overload
    def GetIssuerName(self, securityToken: SecurityToken) -> str: ...
    @overload
    def GetIssuerName(self, securityToken: SecurityToken, requestedIssuerName: str) -> str: ...
    def GetWindowsIssuerName(self) -> str: ...
    def LoadCustomConfiguration(self, nodelist: XmlNodeList) -> None: ...


class IssuerTokenResolver(SecurityTokenResolver):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wrappedTokenResolver: SecurityTokenResolver): ...
    @property
    def WrappedTokenResolver(self) -> SecurityTokenResolver: ...


class KerberosReceiverSecurityToken(WindowsSecurityToken):
    @overload
    def __init__(self, request: Set(Byte)): ...
    @overload
    def __init__(self, request: Set(Byte), id: str): ...
    @overload
    def __init__(self, request: Set(Byte), id: str, valueTypeUri: str): ...
    def CanCreateKeyIdentifierClause(self) -> bool: ...
    def CreateKeyIdentifierClause(self) -> T: ...
    @property
    def SecurityKey(self) -> SymmetricSecurityKey: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    @property
    def ValueTypeUri(self) -> str: ...
    @property
    def WindowsIdentity(self) -> WindowsIdentity: ...
    def GetRequest(self) -> Set(Byte): ...
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...


class KerberosRequestorSecurityToken(SecurityToken):
    @overload
    def __init__(self, servicePrincipalName: str): ...
    @overload
    def __init__(self, servicePrincipalName: str, tokenImpersonationLevel: TokenImpersonationLevel, networkCredential: NetworkCredential, id: str): ...
    def CanCreateKeyIdentifierClause(self) -> bool: ...
    def CreateKeyIdentifierClause(self) -> T: ...
    @property
    def Id(self) -> str: ...
    @property
    def SecurityKey(self) -> SymmetricSecurityKey: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ServicePrincipalName(self) -> str: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    def GetRequest(self) -> Set(Byte): ...
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...


class KerberosSecurityTokenHandler(SecurityTokenHandler):
    def __init__(self): ...
    @property
    def CanValidateToken(self) -> bool: ...
    @property
    def TokenType(self) -> Type: ...
    def GetTokenTypeIdentifiers(self) -> Set(str): ...
    def ValidateToken(self, token: SecurityToken) -> ReadOnlyCollection: ...


class KerberosTicketHashKeyIdentifierClause(BinaryKeyIdentifierClause):
    @overload
    def __init__(self, ticketHash: Set(Byte)): ...
    @overload
    def __init__(self, ticketHash: Set(Byte), derivationNonce: Set(Byte), derivationLength: int): ...
    def GetKerberosTicketHash(self) -> Set(Byte): ...
    def ToString(self) -> str: ...


class LocalIdKeyIdentifierClause(SecurityKeyIdentifierClause):
    @overload
    def __init__(self, localId: str): ...
    @overload
    def __init__(self, localId: str, ownerType: Type): ...
    @overload
    def __init__(self, localId: str, derivationNonce: Set(Byte), derivationLength: int, ownerType: Type): ...
    @property
    def LocalId(self) -> str: ...
    @property
    def OwnerType(self) -> Type: ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(self, localId: str, ownerType: Type) -> bool: ...
    def ToString(self) -> str: ...


class ProofDescriptor(Object):
    def ApplyTo(self, response: RequestSecurityTokenResponse) -> None: ...
    @property
    def KeyIdentifier(self) -> SecurityKeyIdentifier: ...


class RsaKeyIdentifierClause(SecurityKeyIdentifierClause):
    def __init__(self, rsa: RSA): ...
    def CreateKey(self) -> SecurityKey: ...
    @property
    def CanCreateKey(self) -> bool: ...
    @property
    def Rsa(self) -> RSA: ...
    def GetExponent(self) -> Set(Byte): ...
    def GetModulus(self) -> Set(Byte): ...
    @overload
    def Matches(self, rsa: RSA) -> bool: ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    def ToString(self) -> str: ...
    def WriteExponentAsBase64(self, writer: XmlWriter) -> None: ...
    def WriteModulusAsBase64(self, writer: XmlWriter) -> None: ...


class RsaSecurityKey(AsymmetricSecurityKey):
    def __init__(self, rsa: RSA): ...
    def DecryptKey(self, algorithm: str, keyData: Set(Byte)) -> Set(Byte): ...
    def EncryptKey(self, algorithm: str, keyData: Set(Byte)) -> Set(Byte): ...
    @property
    def KeySize(self) -> int: ...
    def GetAsymmetricAlgorithm(self, algorithm: str, requiresPrivateKey: bool) -> AsymmetricAlgorithm: ...
    def GetHashAlgorithmForSignature(self, algorithm: str) -> HashAlgorithm: ...
    def GetSignatureDeformatter(self, algorithm: str) -> AsymmetricSignatureDeformatter: ...
    def GetSignatureFormatter(self, algorithm: str) -> AsymmetricSignatureFormatter: ...
    def HasPrivateKey(self) -> bool: ...
    def IsAsymmetricAlgorithm(self, algorithm: str) -> bool: ...
    def IsSupportedAlgorithm(self, algorithm: str) -> bool: ...
    def IsSymmetricAlgorithm(self, algorithm: str) -> bool: ...


class RsaSecurityToken(SecurityToken):
    @overload
    def __init__(self, rsa: RSA): ...
    @overload
    def __init__(self, rsa: RSA, id: str): ...
    def CanCreateKeyIdentifierClause(self) -> bool: ...
    def CreateKeyIdentifierClause(self) -> T: ...
    @property
    def Id(self) -> str: ...
    @property
    def Rsa(self) -> RSA: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...


class RsaSecurityTokenHandler(SecurityTokenHandler):
    def __init__(self): ...
    @overload
    def CanReadToken(self, reader: XmlReader) -> bool: ...
    @property
    def CanValidateToken(self) -> bool: ...
    @property
    def CanWriteToken(self) -> bool: ...
    @property
    def TokenType(self) -> Type: ...
    def GetTokenTypeIdentifiers(self) -> Set(str): ...
    @overload
    def ReadToken(self, reader: XmlReader) -> SecurityToken: ...
    def ValidateToken(self, token: SecurityToken) -> ReadOnlyCollection: ...
    @overload
    def WriteToken(self, writer: XmlWriter, token: SecurityToken) -> None: ...


class Saml2Action(Object):
    def __init__(self, value: str, actionNamespace: Uri): ...
    @property
    def Namespace(self) -> Uri: ...
    @property
    def Value(self) -> str: ...
    @Namespace.setter
    def Namespace(self, value: Uri) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class Saml2Advice(Object):
    def __init__(self): ...
    @property
    def AssertionIdReferences(self) -> Collection: ...
    @property
    def Assertions(self) -> Collection: ...
    @property
    def AssertionUriReferences(self) -> Collection: ...


class Saml2Assertion(Object):
    def __init__(self, issuer: Saml2NameIdentifier): ...
    @property
    def Advice(self) -> Saml2Advice: ...
    @property
    def CanWriteSourceData(self) -> bool: ...
    @property
    def Conditions(self) -> Saml2Conditions: ...
    @property
    def EncryptingCredentials(self) -> EncryptingCredentials: ...
    @property
    def ExternalEncryptedKeys(self) -> Collection: ...
    @property
    def Id(self) -> Saml2Id: ...
    @property
    def IssueInstant(self) -> DateTime: ...
    @property
    def Issuer(self) -> Saml2NameIdentifier: ...
    @property
    def SigningCredentials(self) -> SigningCredentials: ...
    @property
    def Statements(self) -> Collection: ...
    @property
    def Subject(self) -> Saml2Subject: ...
    @property
    def Version(self) -> str: ...
    @Advice.setter
    def Advice(self, value: Saml2Advice) -> None: ...
    @Conditions.setter
    def Conditions(self, value: Saml2Conditions) -> None: ...
    @EncryptingCredentials.setter
    def EncryptingCredentials(self, value: EncryptingCredentials) -> None: ...
    @Id.setter
    def Id(self, value: Saml2Id) -> None: ...
    @IssueInstant.setter
    def IssueInstant(self, value: DateTime) -> None: ...
    @Issuer.setter
    def Issuer(self, value: Saml2NameIdentifier) -> None: ...
    @SigningCredentials.setter
    def SigningCredentials(self, value: SigningCredentials) -> None: ...
    @Subject.setter
    def Subject(self, value: Saml2Subject) -> None: ...
    def WriteSourceData(self, writer: XmlWriter) -> None: ...


class Saml2AssertionKeyIdentifierClause(SecurityKeyIdentifierClause):
    @overload
    def __init__(self, id: str): ...
    @overload
    def __init__(self, id: str, derivationNonce: Set(Byte), derivationLength: int): ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(assertionId: str, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    def ToString(self) -> str: ...


class Saml2Attribute(Object):
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, values: Iterable[str]): ...
    @overload
    def __init__(self, name: str, value: str): ...
    @property
    def AttributeValueXsiType(self) -> str: ...
    @property
    def FriendlyName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameFormat(self) -> Uri: ...
    @property
    def OriginalIssuer(self) -> str: ...
    @property
    def Values(self) -> Collection: ...
    @AttributeValueXsiType.setter
    def AttributeValueXsiType(self, value: str) -> None: ...
    @FriendlyName.setter
    def FriendlyName(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @NameFormat.setter
    def NameFormat(self, value: Uri) -> None: ...
    @OriginalIssuer.setter
    def OriginalIssuer(self, value: str) -> None: ...


class Saml2AttributeStatement(Saml2Statement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attribute: Saml2Attribute): ...
    @overload
    def __init__(self, attributes: Iterable[Saml2Attribute]): ...
    @property
    def Attributes(self) -> Collection: ...


class Saml2AudienceRestriction(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, audience: Uri): ...
    @overload
    def __init__(self, audiences: Iterable[Uri]): ...
    @property
    def Audiences(self) -> Collection: ...


class Saml2AuthenticationContext(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, classReference: Uri): ...
    @overload
    def __init__(self, classReference: Uri, declarationReference: Uri): ...
    @property
    def AuthenticatingAuthorities(self) -> Collection: ...
    @property
    def ClassReference(self) -> Uri: ...
    @property
    def DeclarationReference(self) -> Uri: ...
    @ClassReference.setter
    def ClassReference(self, value: Uri) -> None: ...
    @DeclarationReference.setter
    def DeclarationReference(self, value: Uri) -> None: ...


class Saml2AuthenticationStatement(Saml2Statement):
    @overload
    def __init__(self, authenticationContext: Saml2AuthenticationContext): ...
    @overload
    def __init__(self, authenticationContext: Saml2AuthenticationContext, authenticationInstant: DateTime): ...
    @property
    def AuthenticationContext(self) -> Saml2AuthenticationContext: ...
    @property
    def AuthenticationInstant(self) -> DateTime: ...
    @property
    def SessionIndex(self) -> str: ...
    @property
    def SessionNotOnOrAfter(self) -> Nullable: ...
    @property
    def SubjectLocality(self) -> Saml2SubjectLocality: ...
    @AuthenticationContext.setter
    def AuthenticationContext(self, value: Saml2AuthenticationContext) -> None: ...
    @AuthenticationInstant.setter
    def AuthenticationInstant(self, value: DateTime) -> None: ...
    @SessionIndex.setter
    def SessionIndex(self, value: str) -> None: ...
    @SessionNotOnOrAfter.setter
    def SessionNotOnOrAfter(self, value: Nullable) -> None: ...
    @SubjectLocality.setter
    def SubjectLocality(self, value: Saml2SubjectLocality) -> None: ...


class Saml2AuthorizationDecisionStatement(Saml2Statement):
    @overload
    def __init__(self, resource: Uri, decision: SamlAccessDecision): ...
    @overload
    def __init__(self, resource: Uri, decision: SamlAccessDecision, actions: Iterable[Saml2Action]): ...
    @property
    def Actions(self) -> Collection: ...
    @property
    def Decision(self) -> SamlAccessDecision: ...
    @property
    def Evidence(self) -> Saml2Evidence: ...
    @property
    def Resource(self) -> Uri: ...
    @Decision.setter
    def Decision(self, value: SamlAccessDecision) -> None: ...
    @Evidence.setter
    def Evidence(self, value: Saml2Evidence) -> None: ...
    @Resource.setter
    def Resource(self, value: Uri) -> None: ...


class Saml2Conditions(Object):
    def __init__(self): ...
    @property
    def AudienceRestrictions(self) -> Collection: ...
    @property
    def NotBefore(self) -> Nullable: ...
    @property
    def NotOnOrAfter(self) -> Nullable: ...
    @property
    def OneTimeUse(self) -> bool: ...
    @property
    def ProxyRestriction(self) -> Saml2ProxyRestriction: ...
    @NotBefore.setter
    def NotBefore(self, value: Nullable) -> None: ...
    @NotOnOrAfter.setter
    def NotOnOrAfter(self, value: Nullable) -> None: ...
    @OneTimeUse.setter
    def OneTimeUse(self, value: bool) -> None: ...
    @ProxyRestriction.setter
    def ProxyRestriction(self, value: Saml2ProxyRestriction) -> None: ...


class Saml2Evidence(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assertion: Saml2Assertion): ...
    @overload
    def __init__(self, idReference: Saml2Id): ...
    @overload
    def __init__(self, uriReference: Uri): ...
    @property
    def AssertionIdReferences(self) -> Collection: ...
    @property
    def Assertions(self) -> Collection: ...
    @property
    def AssertionUriReferences(self) -> Collection: ...


class Saml2Id(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Value(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class Saml2NameIdentifier(Object):
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, format: Uri): ...
    @property
    def EncryptingCredentials(self) -> EncryptingCredentials: ...
    @property
    def ExternalEncryptedKeys(self) -> Collection: ...
    @property
    def Format(self) -> Uri: ...
    @property
    def NameQualifier(self) -> str: ...
    @property
    def SPNameQualifier(self) -> str: ...
    @property
    def SPProvidedId(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @EncryptingCredentials.setter
    def EncryptingCredentials(self, value: EncryptingCredentials) -> None: ...
    @Format.setter
    def Format(self, value: Uri) -> None: ...
    @NameQualifier.setter
    def NameQualifier(self, value: str) -> None: ...
    @SPNameQualifier.setter
    def SPNameQualifier(self, value: str) -> None: ...
    @SPProvidedId.setter
    def SPProvidedId(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class Saml2ProxyRestriction(Object):
    def __init__(self): ...
    @property
    def Audiences(self) -> Collection: ...
    @property
    def Count(self) -> Nullable: ...
    @Count.setter
    def Count(self, value: Nullable) -> None: ...


class Saml2SecurityKeyIdentifierClause(SecurityKeyIdentifierClause):
    def __init__(self, assertion: Saml2Assertion): ...
    @property
    def Assertion(self) -> Saml2Assertion: ...


class Saml2SecurityToken(SecurityToken):
    @overload
    def __init__(self, assertion: Saml2Assertion): ...
    @overload
    def __init__(self, assertion: Saml2Assertion, keys: ReadOnlyCollection, issuerToken: SecurityToken): ...
    def CanCreateKeyIdentifierClause(self) -> bool: ...
    def CreateKeyIdentifierClause(self) -> T: ...
    @property
    def Assertion(self) -> Saml2Assertion: ...
    @property
    def Id(self) -> str: ...
    @property
    def IssuerToken(self) -> SecurityToken: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...


class Saml2SecurityTokenHandler(SecurityTokenHandler):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, samlSecurityTokenRequirement: SamlSecurityTokenRequirement): ...
    def CanReadKeyIdentifierClause(self, reader: XmlReader) -> bool: ...
    @overload
    def CanReadToken(self, reader: XmlReader) -> bool: ...
    def CanWriteKeyIdentifierClause(self, securityKeyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    def CreateSecurityTokenReference(self, token: SecurityToken, attached: bool) -> SecurityKeyIdentifierClause: ...
    def CreateToken(self, tokenDescriptor: SecurityTokenDescriptor) -> SecurityToken: ...
    @property
    def CanValidateToken(self) -> bool: ...
    @property
    def CanWriteToken(self) -> bool: ...
    @property
    def CertificateValidator(self) -> X509CertificateValidator: ...
    @property
    def KeyInfoSerializer(self) -> SecurityTokenSerializer: ...
    @property
    def SamlSecurityTokenRequirement(self) -> SamlSecurityTokenRequirement: ...
    @property
    def TokenType(self) -> Type: ...
    def GetTokenTypeIdentifiers(self) -> Set(str): ...
    def LoadCustomConfiguration(self, customConfigElements: XmlNodeList) -> None: ...
    def ReadKeyIdentifierClause(self, reader: XmlReader) -> SecurityKeyIdentifierClause: ...
    @overload
    def ReadToken(self, reader: XmlReader) -> SecurityToken: ...
    @CertificateValidator.setter
    def CertificateValidator(self, value: X509CertificateValidator) -> None: ...
    @KeyInfoSerializer.setter
    def KeyInfoSerializer(self, value: SecurityTokenSerializer) -> None: ...
    @SamlSecurityTokenRequirement.setter
    def SamlSecurityTokenRequirement(self, value: SamlSecurityTokenRequirement) -> None: ...
    def ValidateToken(self, token: SecurityToken) -> ReadOnlyCollection: ...
    def WriteKeyIdentifierClause(self, writer: XmlWriter, securityKeyIdentifierClause: SecurityKeyIdentifierClause) -> None: ...
    @overload
    def WriteToken(self, writer: XmlWriter, token: SecurityToken) -> None: ...


class Saml2Statement(Object):
    pass


class Saml2Subject(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nameId: Saml2NameIdentifier): ...
    @overload
    def __init__(self, subjectConfirmation: Saml2SubjectConfirmation): ...
    @property
    def NameId(self) -> Saml2NameIdentifier: ...
    @property
    def SubjectConfirmations(self) -> Collection: ...
    @NameId.setter
    def NameId(self, value: Saml2NameIdentifier) -> None: ...


class Saml2SubjectConfirmation(Object):
    @overload
    def __init__(self, method: Uri): ...
    @overload
    def __init__(self, method: Uri, data: Saml2SubjectConfirmationData): ...
    @property
    def Method(self) -> Uri: ...
    @property
    def NameIdentifier(self) -> Saml2NameIdentifier: ...
    @property
    def SubjectConfirmationData(self) -> Saml2SubjectConfirmationData: ...
    @Method.setter
    def Method(self, value: Uri) -> None: ...
    @NameIdentifier.setter
    def NameIdentifier(self, value: Saml2NameIdentifier) -> None: ...
    @SubjectConfirmationData.setter
    def SubjectConfirmationData(self, value: Saml2SubjectConfirmationData) -> None: ...


class Saml2SubjectConfirmationData(Object):
    def __init__(self): ...
    @property
    def Address(self) -> str: ...
    @property
    def InResponseTo(self) -> Saml2Id: ...
    @property
    def KeyIdentifiers(self) -> Collection: ...
    @property
    def NotBefore(self) -> Nullable: ...
    @property
    def NotOnOrAfter(self) -> Nullable: ...
    @property
    def Recipient(self) -> Uri: ...
    @Address.setter
    def Address(self, value: str) -> None: ...
    @InResponseTo.setter
    def InResponseTo(self, value: Saml2Id) -> None: ...
    @NotBefore.setter
    def NotBefore(self, value: Nullable) -> None: ...
    @NotOnOrAfter.setter
    def NotOnOrAfter(self, value: Nullable) -> None: ...
    @Recipient.setter
    def Recipient(self, value: Uri) -> None: ...


class Saml2SubjectLocality(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, address: str, dnsName: str): ...
    @property
    def Address(self) -> str: ...
    @property
    def DnsName(self) -> str: ...
    @Address.setter
    def Address(self, value: str) -> None: ...
    @DnsName.setter
    def DnsName(self, value: str) -> None: ...


class SamlAccessDecision:
    Permit = 0
    Deny = 1
    Indeterminate = 2


class SamlAction(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, action: str): ...
    @overload
    def __init__(self, action: str, ns: str): ...
    @property
    def Action(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Namespace(self) -> str: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    @Action.setter
    def Action(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlAdvice(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, references: Iterable[str]): ...
    @overload
    def __init__(self, assertions: Iterable[SamlAssertion]): ...
    @overload
    def __init__(self, references: Iterable[str], assertions: Iterable[SamlAssertion]): ...
    @property
    def AssertionIdReferences(self) -> List[str]: ...
    @property
    def Assertions(self) -> List[SamlAssertion]: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlAssertion(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assertionId: str, issuer: str, issueInstant: DateTime, samlConditions: SamlConditions, samlAdvice: SamlAdvice, samlStatements: Iterable[SamlStatement]): ...
    @property
    def Advice(self) -> SamlAdvice: ...
    @property
    def AssertionId(self) -> str: ...
    @property
    def CanWriteSourceData(self) -> bool: ...
    @property
    def Conditions(self) -> SamlConditions: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IssueInstant(self) -> DateTime: ...
    @property
    def Issuer(self) -> str: ...
    @property
    def MajorVersion(self) -> int: ...
    @property
    def MinorVersion(self) -> int: ...
    @property
    def SigningCredentials(self) -> SigningCredentials: ...
    @property
    def SigningToken(self) -> SecurityToken: ...
    @property
    def Statements(self) -> List[SamlStatement]: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    @Advice.setter
    def Advice(self, value: SamlAdvice) -> None: ...
    @AssertionId.setter
    def AssertionId(self, value: str) -> None: ...
    @Conditions.setter
    def Conditions(self, value: SamlConditions) -> None: ...
    @IssueInstant.setter
    def IssueInstant(self, value: DateTime) -> None: ...
    @Issuer.setter
    def Issuer(self, value: str) -> None: ...
    @SigningCredentials.setter
    def SigningCredentials(self, value: SigningCredentials) -> None: ...
    @SigningToken.setter
    def SigningToken(self, value: SecurityToken) -> None: ...
    def WriteSourceData(self, writer: XmlWriter) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlAssertionKeyIdentifierClause(SecurityKeyIdentifierClause):
    @overload
    def __init__(self, assertionId: str): ...
    @overload
    def __init__(self, assertionId: str, derivationNonce: Set(Byte), derivationLength: int): ...
    @property
    def AssertionId(self) -> str: ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(self, assertionId: str) -> bool: ...
    def ToString(self) -> str: ...


class SamlAttribute(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, claim: Claim): ...
    @overload
    def __init__(self, attributeNamespace: str, attributeName: str, attributeValues: Iterable[str]): ...
    def ExtractClaims(self) -> ReadOnlyCollection: ...
    @property
    def AttributeValues(self) -> List[str]: ...
    @property
    def AttributeValueXsiType(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def OriginalIssuer(self) -> str: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    @AttributeValueXsiType.setter
    def AttributeValueXsiType(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @OriginalIssuer.setter
    def OriginalIssuer(self, value: str) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlAttributeStatement(SamlSubjectStatement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, samlSubject: SamlSubject, attributes: Iterable[SamlAttribute]): ...
    @property
    def Attributes(self) -> List[SamlAttribute]: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlAudienceRestrictionCondition(SamlCondition):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, audiences: Iterable[Uri]): ...
    @property
    def Audiences(self) -> List[Uri]: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlAuthenticationClaimResource(Object):
    @overload
    def __init__(self, authenticationInstant: DateTime, authenticationMethod: str, dnsAddress: str, ipAddress: str): ...
    @overload
    def __init__(self, authenticationInstant: DateTime, authenticationMethod: str, dnsAddress: str, ipAddress: str, authorityBindings: Iterable[SamlAuthorityBinding]): ...
    @overload
    def __init__(self, authenticationInstant: DateTime, authenticationMethod: str, dnsAddress: str, ipAddress: str, authorityBindings: ReadOnlyCollection): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AuthenticationInstant(self) -> DateTime: ...
    @property
    def AuthenticationMethod(self) -> str: ...
    @property
    def AuthorityBindings(self) -> ReadOnlyCollection: ...
    @property
    def DnsAddress(self) -> str: ...
    @property
    def IPAddress(self) -> str: ...
    def GetHashCode(self) -> int: ...


class SamlAuthenticationStatement(SamlSubjectStatement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, samlSubject: SamlSubject, authenticationMethod: str, authenticationInstant: DateTime, dnsAddress: str, ipAddress: str, authorityBindings: Iterable[SamlAuthorityBinding]): ...
    @property
    def AuthenticationInstant(self) -> DateTime: ...
    @property
    def AuthenticationMethod(self) -> str: ...
    @property
    def AuthorityBindings(self) -> List[SamlAuthorityBinding]: ...
    @property
    def ClaimType() -> str: ...
    @property
    def DnsAddress(self) -> str: ...
    @property
    def IPAddress(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    @AuthenticationInstant.setter
    def AuthenticationInstant(self, value: DateTime) -> None: ...
    @AuthenticationMethod.setter
    def AuthenticationMethod(self, value: str) -> None: ...
    @DnsAddress.setter
    def DnsAddress(self, value: str) -> None: ...
    @IPAddress.setter
    def IPAddress(self, value: str) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlAuthorityBinding(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, authorityKind: XmlQualifiedName, binding: str, location: str): ...
    @property
    def AuthorityKind(self) -> XmlQualifiedName: ...
    @property
    def Binding(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Location(self) -> str: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    @AuthorityKind.setter
    def AuthorityKind(self, value: XmlQualifiedName) -> None: ...
    @Binding.setter
    def Binding(self, value: str) -> None: ...
    @Location.setter
    def Location(self, value: str) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlAuthorizationDecisionClaimResource(Object):
    def __init__(self, resource: str, accessDecision: SamlAccessDecision, actionNamespace: str, actionName: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AccessDecision(self) -> SamlAccessDecision: ...
    @property
    def ActionName(self) -> str: ...
    @property
    def ActionNamespace(self) -> str: ...
    @property
    def Resource(self) -> str: ...
    def GetHashCode(self) -> int: ...


class SamlAuthorizationDecisionStatement(SamlSubjectStatement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, samlSubject: SamlSubject, resource: str, accessDecision: SamlAccessDecision, samlActions: Iterable[SamlAction]): ...
    @overload
    def __init__(self, samlSubject: SamlSubject, resource: str, accessDecision: SamlAccessDecision, samlActions: Iterable[SamlAction], samlEvidence: SamlEvidence): ...
    @property
    def AccessDecision(self) -> SamlAccessDecision: ...
    @property
    def ClaimType() -> str: ...
    @property
    def Evidence(self) -> SamlEvidence: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Resource(self) -> str: ...
    @property
    def SamlActions(self) -> List[SamlAction]: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    @AccessDecision.setter
    def AccessDecision(self, value: SamlAccessDecision) -> None: ...
    @Evidence.setter
    def Evidence(self, value: SamlEvidence) -> None: ...
    @Resource.setter
    def Resource(self, value: str) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlCondition(Object):
    @property
    def IsReadOnly(self) -> bool: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlConditions(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, notBefore: DateTime, notOnOrAfter: DateTime): ...
    @overload
    def __init__(self, notBefore: DateTime, notOnOrAfter: DateTime, conditions: Iterable[SamlCondition]): ...
    @property
    def Conditions(self) -> List[SamlCondition]: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def NotBefore(self) -> DateTime: ...
    @property
    def NotOnOrAfter(self) -> DateTime: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    @NotBefore.setter
    def NotBefore(self, value: DateTime) -> None: ...
    @NotOnOrAfter.setter
    def NotOnOrAfter(self, value: DateTime) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlConstants(Object):
    @property
    def EmailName() -> str: ...
    @property
    def EmailNamespace() -> str: ...
    @property
    def HolderOfKey() -> str: ...
    @property
    def MajorVersionValue() -> int: ...
    @property
    def MinorVersionValue() -> int: ...
    @property
    def Namespace() -> str: ...
    @property
    def SenderVouches() -> str: ...
    @property
    def UserName() -> str: ...
    @property
    def UserNameNamespace() -> str: ...


class SamlDoNotCacheCondition(SamlCondition):
    def __init__(self): ...
    @property
    def IsReadOnly(self) -> bool: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlEvidence(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assertionIdReferences: Iterable[str]): ...
    @overload
    def __init__(self, assertions: Iterable[SamlAssertion]): ...
    @overload
    def __init__(self, assertionIdReferences: Iterable[str], assertions: Iterable[SamlAssertion]): ...
    @property
    def AssertionIdReferences(self) -> List[str]: ...
    @property
    def Assertions(self) -> List[SamlAssertion]: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlNameIdentifierClaimResource(Object):
    def __init__(self, name: str, nameQualifier: str, format: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Format(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameQualifier(self) -> str: ...
    def GetHashCode(self) -> int: ...


class SamlSecurityKeyIdentifierClause(SecurityKeyIdentifierClause):
    def __init__(self, assertion: SamlAssertion): ...
    @property
    def Assertion(self) -> SamlAssertion: ...


class SamlSecurityToken(SecurityToken):
    def __init__(self, assertion: SamlAssertion): ...
    def CanCreateKeyIdentifierClause(self) -> bool: ...
    def CreateKeyIdentifierClause(self) -> T: ...
    @property
    def Assertion(self) -> SamlAssertion: ...
    @property
    def Id(self) -> str: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...


class SamlSecurityTokenHandler(SecurityTokenHandler):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, samlSecurityTokenRequirement: SamlSecurityTokenRequirement): ...
    @overload
    def CanReadToken(self, reader: XmlReader) -> bool: ...
    def CreateSecurityTokenReference(self, token: SecurityToken, attached: bool) -> SecurityKeyIdentifierClause: ...
    def CreateToken(self, tokenDescriptor: SecurityTokenDescriptor) -> SecurityToken: ...
    @property
    def CanValidateToken(self) -> bool: ...
    @property
    def CanWriteToken(self) -> bool: ...
    @property
    def CertificateValidator(self) -> X509CertificateValidator: ...
    @property
    def KeyInfoSerializer(self) -> SecurityTokenSerializer: ...
    @property
    def SamlSecurityTokenRequirement(self) -> SamlSecurityTokenRequirement: ...
    @property
    def TokenType(self) -> Type: ...
    def GetTokenTypeIdentifiers(self) -> Set(str): ...
    def LoadCustomConfiguration(self, customConfigElements: XmlNodeList) -> None: ...
    @overload
    def ReadToken(self, reader: XmlReader) -> SecurityToken: ...
    @CertificateValidator.setter
    def CertificateValidator(self, value: X509CertificateValidator) -> None: ...
    @KeyInfoSerializer.setter
    def KeyInfoSerializer(self, value: SecurityTokenSerializer) -> None: ...
    @SamlSecurityTokenRequirement.setter
    def SamlSecurityTokenRequirement(self, value: SamlSecurityTokenRequirement) -> None: ...
    def ValidateToken(self, token: SecurityToken) -> ReadOnlyCollection: ...
    @overload
    def WriteToken(self, writer: XmlWriter, token: SecurityToken) -> None: ...


class SamlSecurityTokenRequirement(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, element: XmlElement): ...
    @property
    def CertificateValidator(self) -> X509CertificateValidator: ...
    @property
    def MapToWindows(self) -> bool: ...
    @property
    def NameClaimType(self) -> str: ...
    @property
    def RoleClaimType(self) -> str: ...
    @CertificateValidator.setter
    def CertificateValidator(self, value: X509CertificateValidator) -> None: ...
    @MapToWindows.setter
    def MapToWindows(self, value: bool) -> None: ...
    @NameClaimType.setter
    def NameClaimType(self, value: str) -> None: ...
    @RoleClaimType.setter
    def RoleClaimType(self, value: str) -> None: ...
    def ShouldEnforceAudienceRestriction(self, audienceUriMode: AudienceUriMode, token: SecurityToken) -> bool: ...
    def ValidateAudienceRestriction(self, allowedAudienceUris: List[Uri], tokenAudiences: List[Uri]) -> None: ...


class SamlSerializer(Object):
    def __init__(self): ...
    def LoadAdvice(self, reader: XmlDictionaryReader, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> SamlAdvice: ...
    def LoadAssertion(self, reader: XmlDictionaryReader, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> SamlAssertion: ...
    def LoadAttribute(self, reader: XmlDictionaryReader, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> SamlAttribute: ...
    def LoadCondition(self, reader: XmlDictionaryReader, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> SamlCondition: ...
    def LoadConditions(self, reader: XmlDictionaryReader, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> SamlConditions: ...
    def LoadStatement(self, reader: XmlDictionaryReader, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> SamlStatement: ...
    def PopulateDictionary(self, dictionary: IXmlDictionary) -> None: ...
    def ReadToken(self, reader: XmlReader, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> SamlSecurityToken: ...
    def WriteToken(self, token: SamlSecurityToken, writer: XmlWriter, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlStatement(Object):
    def CreatePolicy(self, issuer: ClaimSet, samlAuthenticator: SamlSecurityTokenAuthenticator) -> IAuthorizationPolicy: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlSubject(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nameFormat: str, nameQualifier: str, name: str): ...
    @overload
    def __init__(self, nameFormat: str, nameQualifier: str, name: str, confirmations: Iterable[str], confirmationData: str, securityKeyIdentifier: SecurityKeyIdentifier): ...
    def ExtractClaims(self) -> ReadOnlyCollection: ...
    def ExtractSubjectKeyClaimSet(self, samlAuthenticator: SamlSecurityTokenAuthenticator) -> ClaimSet: ...
    @property
    def ConfirmationMethods(self) -> List[str]: ...
    @property
    def Crypto(self) -> SecurityKey: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def KeyIdentifier(self) -> SecurityKeyIdentifier: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameClaimType() -> str: ...
    @property
    def NameFormat(self) -> str: ...
    @property
    def NameQualifier(self) -> str: ...
    @property
    def SubjectConfirmationData(self) -> str: ...
    def MakeReadOnly(self) -> None: ...
    def ReadXml(self, reader: XmlDictionaryReader, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer, outOfBandTokenResolver: SecurityTokenResolver) -> None: ...
    @Crypto.setter
    def Crypto(self, value: SecurityKey) -> None: ...
    @KeyIdentifier.setter
    def KeyIdentifier(self, value: SecurityKeyIdentifier) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @NameFormat.setter
    def NameFormat(self, value: str) -> None: ...
    @NameQualifier.setter
    def NameQualifier(self, value: str) -> None: ...
    @SubjectConfirmationData.setter
    def SubjectConfirmationData(self, value: str) -> None: ...
    def WriteXml(self, writer: XmlDictionaryWriter, samlSerializer: SamlSerializer, keyInfoSerializer: SecurityTokenSerializer) -> None: ...


class SamlSubjectStatement(SamlStatement):
    def CreatePolicy(self, issuer: ClaimSet, samlAuthenticator: SamlSecurityTokenAuthenticator) -> IAuthorizationPolicy: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def SamlSubject(self) -> SamlSubject: ...
    def MakeReadOnly(self) -> None: ...
    @SamlSubject.setter
    def SamlSubject(self, value: SamlSubject) -> None: ...


class SecurityAlgorithms(Object):
    pass


class SecurityKey(Object):
    def DecryptKey(self, algorithm: str, keyData: Set(Byte)) -> Set(Byte): ...
    def EncryptKey(self, algorithm: str, keyData: Set(Byte)) -> Set(Byte): ...
    @property
    def KeySize(self) -> int: ...
    def IsAsymmetricAlgorithm(self, algorithm: str) -> bool: ...
    def IsSupportedAlgorithm(self, algorithm: str) -> bool: ...
    def IsSymmetricAlgorithm(self, algorithm: str) -> bool: ...


class SecurityKeyElement(SecurityKey):
    @overload
    def __init__(self, securityKeyIdentifierClause: SecurityKeyIdentifierClause, securityTokenResolver: SecurityTokenResolver): ...
    @overload
    def __init__(self, securityKeyIdentifier: SecurityKeyIdentifier, securityTokenResolver: SecurityTokenResolver): ...
    def DecryptKey(self, algorithm: str, keyData: Set(Byte)) -> Set(Byte): ...
    def EncryptKey(self, algorithm: str, keyData: Set(Byte)) -> Set(Byte): ...
    @property
    def KeySize(self) -> int: ...
    def IsAsymmetricAlgorithm(self, algorithm: str) -> bool: ...
    def IsSupportedAlgorithm(self, algorithm: str) -> bool: ...
    def IsSymmetricAlgorithm(self, algorithm: str) -> bool: ...


class SecurityKeyIdentifier(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, clauses: Set(SecurityKeyIdentifierClause)): ...
    def Add(self, clause: SecurityKeyIdentifierClause) -> None: ...
    def CreateKey(self) -> SecurityKey: ...
    def Find(self) -> TClause: ...
    @property
    def CanCreateKey(self) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> SecurityKeyIdentifierClause: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def MakeReadOnly(self) -> None: ...
    def ToString(self) -> str: ...
    def TryFind(self) -> Tuple[bool, TClause]: ...


class SecurityKeyIdentifierClause(Object):
    def CreateKey(self) -> SecurityKey: ...
    @property
    def CanCreateKey(self) -> bool: ...
    @property
    def ClauseType(self) -> str: ...
    @property
    def DerivationLength(self) -> int: ...
    @property
    def Id(self) -> str: ...
    def GetDerivationNonce(self) -> Set(Byte): ...
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @Id.setter
    def Id(self, value: str) -> None: ...


class SecurityKeyIdentifierClauseSerializer(Object):
    def CanReadKeyIdentifierClause(self, reader: XmlReader) -> bool: ...
    def CanWriteKeyIdentifierClause(self, securityKeyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    def ReadKeyIdentifierClause(self, reader: XmlReader) -> SecurityKeyIdentifierClause: ...
    def WriteKeyIdentifierClause(self, writer: XmlWriter, securityKeyIdentifierClause: SecurityKeyIdentifierClause) -> None: ...


class SecurityKeyType:
    SymmetricKey = 0
    AsymmetricKey = 1
    BearerKey = 2


class SecurityKeyUsage:
    Exchange = 0
    Signature = 1


class SecurityToken(Object):
    def CanCreateKeyIdentifierClause(self) -> bool: ...
    def CreateKeyIdentifierClause(self) -> T: ...
    @property
    def Id(self) -> str: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    def ResolveKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> SecurityKey: ...


class SecurityTokenDescriptor(Object):
    def __init__(self): ...
    @overload
    def AddAuthenticationClaims(self, authType: str) -> None: ...
    @overload
    def AddAuthenticationClaims(self, authType: str, time: DateTime) -> None: ...
    def ApplyTo(self, response: RequestSecurityTokenResponse) -> None: ...
    @property
    def AppliesToAddress(self) -> str: ...
    @property
    def AttachedReference(self) -> SecurityKeyIdentifierClause: ...
    @property
    def AuthenticationInfo(self) -> AuthenticationInformation: ...
    @property
    def EncryptingCredentials(self) -> EncryptingCredentials: ...
    @property
    def Lifetime(self) -> Lifetime: ...
    @property
    def Proof(self) -> ProofDescriptor: ...
    @property
    def Properties(self) -> Dictionary: ...
    @property
    def ReplyToAddress(self) -> str: ...
    @property
    def SigningCredentials(self) -> SigningCredentials: ...
    @property
    def Subject(self) -> ClaimsIdentity: ...
    @property
    def Token(self) -> SecurityToken: ...
    @property
    def TokenIssuerName(self) -> str: ...
    @property
    def TokenType(self) -> str: ...
    @property
    def UnattachedReference(self) -> SecurityKeyIdentifierClause: ...
    @AppliesToAddress.setter
    def AppliesToAddress(self, value: str) -> None: ...
    @AttachedReference.setter
    def AttachedReference(self, value: SecurityKeyIdentifierClause) -> None: ...
    @AuthenticationInfo.setter
    def AuthenticationInfo(self, value: AuthenticationInformation) -> None: ...
    @EncryptingCredentials.setter
    def EncryptingCredentials(self, value: EncryptingCredentials) -> None: ...
    @Lifetime.setter
    def Lifetime(self, value: Lifetime) -> None: ...
    @Proof.setter
    def Proof(self, value: ProofDescriptor) -> None: ...
    @ReplyToAddress.setter
    def ReplyToAddress(self, value: str) -> None: ...
    @SigningCredentials.setter
    def SigningCredentials(self, value: SigningCredentials) -> None: ...
    @Subject.setter
    def Subject(self, value: ClaimsIdentity) -> None: ...
    @Token.setter
    def Token(self, value: SecurityToken) -> None: ...
    @TokenIssuerName.setter
    def TokenIssuerName(self, value: str) -> None: ...
    @TokenType.setter
    def TokenType(self, value: str) -> None: ...
    @UnattachedReference.setter
    def UnattachedReference(self, value: SecurityKeyIdentifierClause) -> None: ...


class SecurityTokenElement(Object):
    @overload
    def __init__(self, securityToken: SecurityToken): ...
    @overload
    def __init__(self, securityTokenXml: XmlElement, securityTokenHandlers: SecurityTokenHandlerCollection): ...
    @property
    def SecurityTokenXml(self) -> XmlElement: ...
    def GetIdentities(self) -> ReadOnlyCollection: ...
    def GetSecurityToken(self) -> SecurityToken: ...


class SecurityTokenException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class SecurityTokenExpiredException(SecurityTokenValidationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class SecurityTokenHandler(Object):
    def CanReadKeyIdentifierClause(self, reader: XmlReader) -> bool: ...
    @overload
    def CanReadToken(self, reader: XmlReader) -> bool: ...
    @overload
    def CanReadToken(self, tokenString: str) -> bool: ...
    def CanWriteKeyIdentifierClause(self, securityKeyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    def CreateSecurityTokenReference(self, token: SecurityToken, attached: bool) -> SecurityKeyIdentifierClause: ...
    def CreateToken(self, tokenDescriptor: SecurityTokenDescriptor) -> SecurityToken: ...
    @property
    def CanValidateToken(self) -> bool: ...
    @property
    def CanWriteToken(self) -> bool: ...
    @property
    def Configuration(self) -> SecurityTokenHandlerConfiguration: ...
    @property
    def ContainingCollection(self) -> SecurityTokenHandlerCollection: ...
    @property
    def TokenType(self) -> Type: ...
    def GetTokenTypeIdentifiers(self) -> Set(str): ...
    def LoadCustomConfiguration(self, nodelist: XmlNodeList) -> None: ...
    def ReadKeyIdentifierClause(self, reader: XmlReader) -> SecurityKeyIdentifierClause: ...
    @overload
    def ReadToken(self, reader: XmlReader) -> SecurityToken: ...
    @overload
    def ReadToken(self, tokenString: str) -> SecurityToken: ...
    @overload
    def ReadToken(self, reader: XmlReader, tokenResolver: SecurityTokenResolver) -> SecurityToken: ...
    @Configuration.setter
    def Configuration(self, value: SecurityTokenHandlerConfiguration) -> None: ...
    def ValidateToken(self, token: SecurityToken) -> ReadOnlyCollection: ...
    def WriteKeyIdentifierClause(self, writer: XmlWriter, securityKeyIdentifierClause: SecurityKeyIdentifierClause) -> None: ...
    @overload
    def WriteToken(self, token: SecurityToken) -> str: ...
    @overload
    def WriteToken(self, writer: XmlWriter, token: SecurityToken) -> None: ...


class SecurityTokenHandlerCollection:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, configuration: SecurityTokenHandlerConfiguration): ...
    @overload
    def __init__(self, handlers: Iterable[SecurityTokenHandler]): ...
    @overload
    def __init__(self, handlers: Iterable[SecurityTokenHandler], configuration: SecurityTokenHandlerConfiguration): ...
    def AddOrReplace(self, handler: SecurityTokenHandler) -> None: ...
    def CanReadKeyIdentifierClause(self, reader: XmlReader) -> bool: ...
    @overload
    def CanReadToken(self, reader: XmlReader) -> bool: ...
    @overload
    def CanReadToken(self, tokenString: str) -> bool: ...
    def CanWriteToken(self, token: SecurityToken) -> bool: ...
    @overload
    def CreateDefaultSecurityTokenHandlerCollection() -> SecurityTokenHandlerCollection: ...
    @overload
    def CreateDefaultSecurityTokenHandlerCollection(configuration: SecurityTokenHandlerConfiguration) -> SecurityTokenHandlerCollection: ...
    def CreateToken(self, tokenDescriptor: SecurityTokenDescriptor) -> SecurityToken: ...
    @property
    def Configuration(self) -> SecurityTokenHandlerConfiguration: ...
    @property
    def Item(self, token: SecurityToken) -> SecurityTokenHandler: ...
    @property
    def Item(self, tokenType: Type) -> SecurityTokenHandler: ...
    @property
    def Item(self, tokenTypeIdentifier: str) -> SecurityTokenHandler: ...
    @property
    def TokenTypeIdentifiers(self) -> Iterable[str]: ...
    @property
    def TokenTypes(self) -> Iterable[Type]: ...
    def ReadKeyIdentifierClause(self, reader: XmlReader) -> SecurityKeyIdentifierClause: ...
    @overload
    def ReadToken(self, reader: XmlReader) -> SecurityToken: ...
    @overload
    def ReadToken(self, tokenString: str) -> SecurityToken: ...
    def ValidateToken(self, token: SecurityToken) -> ReadOnlyCollection: ...
    def WriteKeyIdentifierClause(self, writer: XmlWriter, keyIdentifierClause: SecurityKeyIdentifierClause) -> None: ...
    @overload
    def WriteToken(self, token: SecurityToken) -> str: ...
    @overload
    def WriteToken(self, writer: XmlWriter, token: SecurityToken) -> None: ...


class SecurityTokenHandlerCollectionManager(Object):
    def __init__(self, serviceName: str): ...
    def ContainsKey(self, usage: str) -> bool: ...
    def CreateDefaultSecurityTokenHandlerCollectionManager() -> SecurityTokenHandlerCollectionManager: ...
    def CreateEmptySecurityTokenHandlerCollectionManager() -> SecurityTokenHandlerCollectionManager: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, usage: str) -> SecurityTokenHandlerCollection: ...
    @property
    def SecurityTokenHandlerCollections(self) -> Iterable[SecurityTokenHandlerCollection]: ...
    @property
    def ServiceName(self) -> str: ...
    @Item.setter
    def Item(self, usage: str, value: SecurityTokenHandlerCollection) -> None: ...


class SecurityTokenHandlerConfiguration(Object):
    def __init__(self): ...
    @property
    def AudienceRestriction(self) -> AudienceRestriction: ...
    @property
    def Caches(self) -> IdentityModelCaches: ...
    @property
    def CertificateValidationMode(self) -> X509CertificateValidationMode: ...
    @property
    def CertificateValidator(self) -> X509CertificateValidator: ...
    @property
    def DetectReplayedTokens(self) -> bool: ...
    @property
    def IssuerNameRegistry(self) -> IssuerNameRegistry: ...
    @property
    def IssuerTokenResolver(self) -> SecurityTokenResolver: ...
    @property
    def MaxClockSkew(self) -> TimeSpan: ...
    @property
    def RevocationMode(self) -> X509RevocationMode: ...
    @property
    def SaveBootstrapContext(self) -> bool: ...
    @property
    def ServiceTokenResolver(self) -> SecurityTokenResolver: ...
    @property
    def TokenReplayCacheExpirationPeriod(self) -> TimeSpan: ...
    @property
    def TrustedStoreLocation(self) -> StoreLocation: ...
    @AudienceRestriction.setter
    def AudienceRestriction(self, value: AudienceRestriction) -> None: ...
    @Caches.setter
    def Caches(self, value: IdentityModelCaches) -> None: ...
    @CertificateValidationMode.setter
    def CertificateValidationMode(self, value: X509CertificateValidationMode) -> None: ...
    @CertificateValidator.setter
    def CertificateValidator(self, value: X509CertificateValidator) -> None: ...
    @DetectReplayedTokens.setter
    def DetectReplayedTokens(self, value: bool) -> None: ...
    @IssuerNameRegistry.setter
    def IssuerNameRegistry(self, value: IssuerNameRegistry) -> None: ...
    @IssuerTokenResolver.setter
    def IssuerTokenResolver(self, value: SecurityTokenResolver) -> None: ...
    @MaxClockSkew.setter
    def MaxClockSkew(self, value: TimeSpan) -> None: ...
    @RevocationMode.setter
    def RevocationMode(self, value: X509RevocationMode) -> None: ...
    @SaveBootstrapContext.setter
    def SaveBootstrapContext(self, value: bool) -> None: ...
    @ServiceTokenResolver.setter
    def ServiceTokenResolver(self, value: SecurityTokenResolver) -> None: ...
    @TokenReplayCacheExpirationPeriod.setter
    def TokenReplayCacheExpirationPeriod(self, value: TimeSpan) -> None: ...
    @TrustedStoreLocation.setter
    def TrustedStoreLocation(self, value: StoreLocation) -> None: ...


class SecurityTokenNotYetValidException(SecurityTokenValidationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class SecurityTokenReplayDetectedException(SecurityTokenValidationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class SecurityTokenTypes(Object):
    @property
    def Kerberos() -> str: ...
    @property
    def Rsa() -> str: ...
    @property
    def Saml() -> str: ...
    @property
    def UserName() -> str: ...
    @property
    def X509Certificate() -> str: ...


class SecurityTokenValidationException(SecurityTokenException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class SessionSecurityToken(SecurityToken):
    @overload
    def __init__(self, claimsPrincipal: ClaimsPrincipal): ...
    @overload
    def __init__(self, claimsPrincipal: ClaimsPrincipal, lifetime: TimeSpan): ...
    @overload
    def __init__(self, claimsPrincipal: ClaimsPrincipal, context: str): ...
    @overload
    def __init__(self, claimsPrincipal: ClaimsPrincipal, context: str, validFrom: Nullable, validTo: Nullable): ...
    @overload
    def __init__(self, claimsPrincipal: ClaimsPrincipal, context: str, endpointId: str, validFrom: Nullable, validTo: Nullable): ...
    @overload
    def __init__(self, claimsPrincipal: ClaimsPrincipal, contextId: UniqueId, context: str, endpointId: str, lifetime: TimeSpan, key: SymmetricSecurityKey): ...
    @overload
    def __init__(self, claimsPrincipal: ClaimsPrincipal, contextId: UniqueId, context: str, endpointId: str, validFrom: DateTime, lifetime: TimeSpan, key: SymmetricSecurityKey): ...
    @overload
    def __init__(self, claimsPrincipal: ClaimsPrincipal, contextId: UniqueId, context: str, endpointId: str, validFrom: Nullable, validTo: Nullable, key: SymmetricSecurityKey): ...
    @property
    def ClaimsPrincipal(self) -> ClaimsPrincipal: ...
    @property
    def Context(self) -> str: ...
    @property
    def ContextId(self) -> UniqueId: ...
    @property
    def EndpointId(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def IsPersistent(self) -> bool: ...
    @property
    def IsReferenceMode(self) -> bool: ...
    @property
    def KeyEffectiveTime(self) -> DateTime: ...
    @property
    def KeyExpirationTime(self) -> DateTime: ...
    @property
    def KeyGeneration(self) -> UniqueId: ...
    @property
    def SecureConversationVersion(self) -> Uri: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @IsPersistent.setter
    def IsPersistent(self, value: bool) -> None: ...
    @IsReferenceMode.setter
    def IsReferenceMode(self, value: bool) -> None: ...


class SessionSecurityTokenCache(Object):
    def AddOrUpdate(self, key: SessionSecurityTokenCacheKey, value: SessionSecurityToken, expiryTime: DateTime) -> None: ...
    def Get(self, key: SessionSecurityTokenCacheKey) -> SessionSecurityToken: ...
    def GetAll(self, endpointId: str, contextId: UniqueId) -> Iterable[SessionSecurityToken]: ...
    def LoadCustomConfiguration(self, nodelist: XmlNodeList) -> None: ...
    def Remove(self, key: SessionSecurityTokenCacheKey) -> None: ...
    @overload
    def RemoveAll(self, endpointId: str) -> None: ...
    @overload
    def RemoveAll(self, endpointId: str, contextId: UniqueId) -> None: ...


class SessionSecurityTokenCacheKey(Object):
    def __init__(self, endpointId: str, contextId: UniqueId, keyGeneration: UniqueId): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ContextId(self) -> UniqueId: ...
    @property
    def EndpointId(self) -> str: ...
    @property
    def IgnoreKeyGeneration(self) -> bool: ...
    @property
    def KeyGeneration(self) -> UniqueId: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(first: SessionSecurityTokenCacheKey, second: SessionSecurityTokenCacheKey) -> bool: ...
    def op_Inequality(first: SessionSecurityTokenCacheKey, second: SessionSecurityTokenCacheKey) -> bool: ...
    @IgnoreKeyGeneration.setter
    def IgnoreKeyGeneration(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class SessionSecurityTokenHandler(SecurityTokenHandler):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, transforms: ReadOnlyCollection): ...
    @overload
    def __init__(self, transforms: ReadOnlyCollection, tokenLifetime: TimeSpan): ...
    @overload
    def CanReadToken(self, reader: XmlReader) -> bool: ...
    def CreateSessionSecurityToken(self, principal: ClaimsPrincipal, context: str, endpointId: str, validFrom: DateTime, validTo: DateTime) -> SessionSecurityToken: ...
    def CreateToken(self, tokenDescriptor: SecurityTokenDescriptor) -> SecurityToken: ...
    @property
    def CanValidateToken(self) -> bool: ...
    @property
    def CanWriteToken(self) -> bool: ...
    @property
    def CookieElementName(self) -> str: ...
    @property
    def CookieNamespace(self) -> str: ...
    @property
    def DefaultTokenLifetime() -> TimeSpan: ...
    @property
    def TokenLifetime(self) -> TimeSpan: ...
    @property
    def TokenType(self) -> Type: ...
    @property
    def Transforms(self) -> ReadOnlyCollection: ...
    def GetTokenTypeIdentifiers(self) -> Set(str): ...
    def LoadCustomConfiguration(self, customConfigElements: XmlNodeList) -> None: ...
    @overload
    def ReadToken(self, reader: XmlReader) -> SecurityToken: ...
    @overload
    def ReadToken(self, reader: XmlReader, tokenResolver: SecurityTokenResolver) -> SecurityToken: ...
    @overload
    def ReadToken(self, token: Set(Byte), tokenResolver: SecurityTokenResolver) -> SecurityToken: ...
    @TokenLifetime.setter
    def TokenLifetime(self, value: TimeSpan) -> None: ...
    @overload
    def ValidateToken(self, token: SecurityToken) -> ReadOnlyCollection: ...
    @overload
    def ValidateToken(self, token: SessionSecurityToken, endpointId: str) -> ReadOnlyCollection: ...
    @overload
    def WriteToken(self, sessionToken: SessionSecurityToken) -> Set(Byte): ...
    @overload
    def WriteToken(self, writer: XmlWriter, token: SecurityToken) -> None: ...


class SigningCredentials(Object):
    @overload
    def __init__(self, signingKey: SecurityKey, signatureAlgorithm: str, digestAlgorithm: str): ...
    @overload
    def __init__(self, signingKey: SecurityKey, signatureAlgorithm: str, digestAlgorithm: str, signingKeyIdentifier: SecurityKeyIdentifier): ...
    @property
    def DigestAlgorithm(self) -> str: ...
    @property
    def SignatureAlgorithm(self) -> str: ...
    @property
    def SigningKey(self) -> SecurityKey: ...
    @property
    def SigningKeyIdentifier(self) -> SecurityKeyIdentifier: ...


class SymmetricProofDescriptor(ProofDescriptor):
    @overload
    def __init__(self, targetWrappingCredentials: EncryptingCredentials): ...
    @overload
    def __init__(self, key: Set(Byte), targetWrappingCredentials: EncryptingCredentials): ...
    @overload
    def __init__(self, keySizeInBits: int, targetWrappingCredentials: EncryptingCredentials): ...
    @overload
    def __init__(self, keySizeInBits: int, targetWrappingCredentials: EncryptingCredentials, requestorWrappingCredentials: EncryptingCredentials): ...
    @overload
    def __init__(self, keySizeInBits: int, targetWrappingCredentials: EncryptingCredentials, requestorWrappingCredentials: EncryptingCredentials, encryptWith: str): ...
    @overload
    def __init__(self, keySizeInBits: int, targetWrappingCredentials: EncryptingCredentials, requestorWrappingCredentials: EncryptingCredentials, sourceEntropy: Set(Byte)): ...
    @overload
    def __init__(self, keySizeInBits: int, targetWrappingCredentials: EncryptingCredentials, requestorWrappingCredentials: EncryptingCredentials, sourceEntropy: Set(Byte), encryptWith: str): ...
    def ApplyTo(self, response: RequestSecurityTokenResponse) -> None: ...
    @property
    def KeyIdentifier(self) -> SecurityKeyIdentifier: ...
    def GetKeyBytes(self) -> Set(Byte): ...


class SymmetricSecurityKey(SecurityKey):
    def GenerateDerivedKey(self, algorithm: str, label: Set(Byte), nonce: Set(Byte), derivedKeyLength: int, offset: int) -> Set(Byte): ...
    def GetDecryptionTransform(self, algorithm: str, iv: Set(Byte)) -> ICryptoTransform: ...
    def GetEncryptionTransform(self, algorithm: str, iv: Set(Byte)) -> ICryptoTransform: ...
    def GetIVSize(self, algorithm: str) -> int: ...
    def GetKeyedHashAlgorithm(self, algorithm: str) -> KeyedHashAlgorithm: ...
    def GetSymmetricAlgorithm(self, algorithm: str) -> SymmetricAlgorithm: ...
    def GetSymmetricKey(self) -> Set(Byte): ...


class TokenReplayCache(Object):
    def AddOrUpdate(self, key: str, securityToken: SecurityToken, expirationTime: DateTime) -> None: ...
    def Contains(self, key: str) -> bool: ...
    def Get(self, key: str) -> SecurityToken: ...
    def LoadCustomConfiguration(self, nodelist: XmlNodeList) -> None: ...
    def Remove(self, key: str) -> None: ...


class Usage(Object):
    pass


class UserNameSecurityToken(SecurityToken):
    @overload
    def __init__(self, userName: str, password: str): ...
    @overload
    def __init__(self, userName: str, password: str, id: str): ...
    @property
    def Id(self) -> str: ...
    @property
    def Password(self) -> str: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def UserName(self) -> str: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...


class UserNameSecurityTokenHandler(SecurityTokenHandler):
    @overload
    def CanReadToken(self, reader: XmlReader) -> bool: ...
    @property
    def CanWriteToken(self) -> bool: ...
    @property
    def RetainPassword(self) -> bool: ...
    @property
    def TokenType(self) -> Type: ...
    def GetTokenTypeIdentifiers(self) -> Set(str): ...
    @overload
    def ReadToken(self, reader: XmlReader) -> SecurityToken: ...
    @RetainPassword.setter
    def RetainPassword(self, value: bool) -> None: ...
    @overload
    def WriteToken(self, writer: XmlWriter, token: SecurityToken) -> None: ...


class WindowsSecurityToken(SecurityToken):
    @overload
    def __init__(self, windowsIdentity: WindowsIdentity): ...
    @overload
    def __init__(self, windowsIdentity: WindowsIdentity, id: str): ...
    @overload
    def __init__(self, windowsIdentity: WindowsIdentity, id: str, authenticationType: str): ...
    def Dispose(self) -> None: ...
    @property
    def AuthenticationType(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    @property
    def WindowsIdentity(self) -> WindowsIdentity: ...


class WindowsUserNameSecurityTokenHandler(UserNameSecurityTokenHandler):
    def __init__(self): ...
    @property
    def CanValidateToken(self) -> bool: ...
    def ValidateToken(self, token: SecurityToken) -> ReadOnlyCollection: ...


class X509AsymmetricSecurityKey(AsymmetricSecurityKey):
    def __init__(self, certificate: X509Certificate2): ...
    def DecryptKey(self, algorithm: str, keyData: Set(Byte)) -> Set(Byte): ...
    def EncryptKey(self, algorithm: str, keyData: Set(Byte)) -> Set(Byte): ...
    @property
    def KeySize(self) -> int: ...
    def GetAsymmetricAlgorithm(self, algorithm: str, privateKey: bool) -> AsymmetricAlgorithm: ...
    def GetHashAlgorithmForSignature(self, algorithm: str) -> HashAlgorithm: ...
    def GetSignatureDeformatter(self, algorithm: str) -> AsymmetricSignatureDeformatter: ...
    def GetSignatureFormatter(self, algorithm: str) -> AsymmetricSignatureFormatter: ...
    def HasPrivateKey(self) -> bool: ...
    def IsAsymmetricAlgorithm(self, algorithm: str) -> bool: ...
    def IsSupportedAlgorithm(self, algorithm: str) -> bool: ...
    def IsSymmetricAlgorithm(self, algorithm: str) -> bool: ...


class X509CertificateStoreTokenResolver(SecurityTokenResolver):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, storeName: StoreName, storeLocation: StoreLocation): ...
    @overload
    def __init__(self, storeName: str, storeLocation: StoreLocation): ...
    @property
    def StoreLocation(self) -> StoreLocation: ...
    @property
    def StoreName(self) -> str: ...


class X509DataSecurityKeyIdentifierClauseSerializer(SecurityKeyIdentifierClauseSerializer):
    def __init__(self): ...
    def CanReadKeyIdentifierClause(self, reader: XmlReader) -> bool: ...
    def CanWriteKeyIdentifierClause(self, securityKeyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    def ReadKeyIdentifierClause(self, reader: XmlReader) -> SecurityKeyIdentifierClause: ...
    def WriteKeyIdentifierClause(self, writer: XmlWriter, securityKeyIdentifierClause: SecurityKeyIdentifierClause) -> None: ...


class X509EncryptingCredentials(EncryptingCredentials):
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @overload
    def __init__(self, certificate: X509Certificate2, keyWrappingAlgorithm: str): ...
    @overload
    def __init__(self, certificate: X509Certificate2, ski: SecurityKeyIdentifier): ...
    @overload
    def __init__(self, certificate: X509Certificate2, ski: SecurityKeyIdentifier, keyWrappingAlgorithm: str): ...
    @property
    def Certificate(self) -> X509Certificate2: ...


class X509IssuerSerialKeyIdentifierClause(SecurityKeyIdentifierClause):
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @overload
    def __init__(self, issuerName: str, issuerSerialNumber: str): ...
    @property
    def IssuerName(self) -> str: ...
    @property
    def IssuerSerialNumber(self) -> str: ...
    @overload
    def Matches(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @overload
    def Matches(self, certificate: X509Certificate2) -> bool: ...
    @overload
    def Matches(self, issuerName: str, issuerSerialNumber: str) -> bool: ...
    def ToString(self) -> str: ...


class X509NTAuthChainTrustValidator(X509CertificateValidator):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, useMachineContext: bool, chainPolicy: X509ChainPolicy): ...
    def Validate(self, certificate: X509Certificate2) -> None: ...


class X509RawDataKeyIdentifierClause(BinaryKeyIdentifierClause):
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @overload
    def __init__(self, certificateRawData: Set(Byte)): ...
    def CreateKey(self) -> SecurityKey: ...
    @property
    def CanCreateKey(self) -> bool: ...
    def GetX509RawData(self) -> Set(Byte): ...
    @overload
    def Matches(self, certificate: X509Certificate2) -> bool: ...
    def ToString(self) -> str: ...


class X509SecurityToken(SecurityToken):
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @overload
    def __init__(self, certificate: X509Certificate2, id: str): ...
    def CanCreateKeyIdentifierClause(self) -> bool: ...
    def CreateKeyIdentifierClause(self) -> T: ...
    def Dispose(self) -> None: ...
    @property
    def Certificate(self) -> X509Certificate2: ...
    @property
    def Id(self) -> str: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...


class X509SecurityTokenHandler(SecurityTokenHandler):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, certificateValidator: X509CertificateValidator): ...
    @overload
    def __init__(self, mapToWindows: bool): ...
    @overload
    def __init__(self, mapToWindows: bool, certificateValidator: X509CertificateValidator): ...
    def CanReadKeyIdentifierClause(self, reader: XmlReader) -> bool: ...
    @overload
    def CanReadToken(self, reader: XmlReader) -> bool: ...
    def CanWriteKeyIdentifierClause(self, securityKeyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @property
    def CanValidateToken(self) -> bool: ...
    @property
    def CanWriteToken(self) -> bool: ...
    @property
    def CertificateValidator(self) -> X509CertificateValidator: ...
    @property
    def MapToWindows(self) -> bool: ...
    @property
    def TokenType(self) -> Type: ...
    @property
    def WriteXmlDSigDefinedClauseTypes(self) -> bool: ...
    @property
    def X509NTAuthChainTrustValidator(self) -> X509NTAuthChainTrustValidator: ...
    def GetTokenTypeIdentifiers(self) -> Set(str): ...
    def LoadCustomConfiguration(self, customConfigElements: XmlNodeList) -> None: ...
    def ReadKeyIdentifierClause(self, reader: XmlReader) -> SecurityKeyIdentifierClause: ...
    @overload
    def ReadToken(self, reader: XmlReader) -> SecurityToken: ...
    @CertificateValidator.setter
    def CertificateValidator(self, value: X509CertificateValidator) -> None: ...
    @MapToWindows.setter
    def MapToWindows(self, value: bool) -> None: ...
    @WriteXmlDSigDefinedClauseTypes.setter
    def WriteXmlDSigDefinedClauseTypes(self, value: bool) -> None: ...
    @X509NTAuthChainTrustValidator.setter
    def X509NTAuthChainTrustValidator(self, value: X509NTAuthChainTrustValidator) -> None: ...
    def ValidateToken(self, token: SecurityToken) -> ReadOnlyCollection: ...
    def WriteKeyIdentifierClause(self, writer: XmlWriter, securityKeyIdentifierClause: SecurityKeyIdentifierClause) -> None: ...
    @overload
    def WriteToken(self, writer: XmlWriter, token: SecurityToken) -> None: ...


class X509SigningCredentials(SigningCredentials):
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @overload
    def __init__(self, certificate: X509Certificate2, ski: SecurityKeyIdentifier): ...
    @overload
    def __init__(self, certificate: X509Certificate2, signatureAlgorithm: str, digestAlgorithm: str): ...
    @overload
    def __init__(self, certificate: X509Certificate2, ski: SecurityKeyIdentifier, signatureAlgorithm: str, digestAlgorithm: str): ...
    @property
    def Certificate(self) -> X509Certificate2: ...


class X509SubjectKeyIdentifierClause(BinaryKeyIdentifierClause):
    def __init__(self, ski: Set(Byte)): ...
    def CanCreateFrom(certificate: X509Certificate2) -> bool: ...
    def GetX509SubjectKeyIdentifier(self) -> Set(Byte): ...
    @overload
    def Matches(self, certificate: X509Certificate2) -> bool: ...
    def ToString(self) -> str: ...
    def TryCreateFrom(certificate: X509Certificate2) -> Tuple[bool, X509SubjectKeyIdentifierClause]: ...


class X509ThumbprintKeyIdentifierClause(BinaryKeyIdentifierClause):
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @overload
    def __init__(self, thumbprint: Set(Byte)): ...
    def GetX509Thumbprint(self) -> Set(Byte): ...
    @overload
    def Matches(self, certificate: X509Certificate2) -> bool: ...
    def ToString(self) -> str: ...


class X509WindowsSecurityToken(X509SecurityToken):
    @overload
    def __init__(self, certificate: X509Certificate2, windowsIdentity: WindowsIdentity): ...
    @overload
    def __init__(self, certificate: X509Certificate2, windowsIdentity: WindowsIdentity, id: str): ...
    @overload
    def __init__(self, certificate: X509Certificate2, windowsIdentity: WindowsIdentity, authenticationType: str, id: str): ...
    def Dispose(self) -> None: ...
    @property
    def AuthenticationType(self) -> str: ...
    @property
    def WindowsIdentity(self) -> WindowsIdentity: ...
