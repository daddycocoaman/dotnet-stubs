from typing import Tuple, Set, Iterable, List


class ApplicationServiceDescriptor(WebServiceDescriptor):
    def __init__(self): ...
    @property
    def Endpoints(self) -> ICollection: ...
    @property
    def PassiveRequestorEndpoints(self) -> ICollection: ...


class ContactPerson(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contactType: ContactType): ...
    @property
    def Company(self) -> str: ...
    @property
    def EmailAddresses(self) -> ICollection: ...
    @property
    def GivenName(self) -> str: ...
    @property
    def Surname(self) -> str: ...
    @property
    def TelephoneNumbers(self) -> ICollection: ...
    @property
    def Type(self) -> ContactType: ...
    @Company.setter
    def Company(self, value: str) -> None: ...
    @GivenName.setter
    def GivenName(self, value: str) -> None: ...
    @Surname.setter
    def Surname(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: ContactType) -> None: ...


class ContactType:
    Unspecified = 0
    Technical = 1
    Support = 2
    Administrative = 3
    Billing = 4
    Other = 5


class DisplayClaim(Object):
    @overload
    def __init__(self, claimType: str): ...
    @overload
    def __init__(self, claimType: str, displayTag: str, description: str): ...
    @overload
    def __init__(self, claimType: str, displayTag: str, description: str, displayValue: str): ...
    @overload
    def __init__(self, claimType: str, displayTag: str, description: str, displayValue: str, optional: bool): ...
    def CreateDisplayClaimFromClaimType(claimType: str) -> DisplayClaim: ...
    @property
    def ClaimType(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def DisplayTag(self) -> str: ...
    @property
    def DisplayValue(self) -> str: ...
    @property
    def Optional(self) -> bool: ...
    @property
    def WriteOptionalAttribute(self) -> bool: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @DisplayTag.setter
    def DisplayTag(self, value: str) -> None: ...
    @DisplayValue.setter
    def DisplayValue(self, value: str) -> None: ...
    @Optional.setter
    def Optional(self, value: bool) -> None: ...
    @WriteOptionalAttribute.setter
    def WriteOptionalAttribute(self, value: bool) -> None: ...


class EncryptionMethod(Object):
    def __init__(self, algorithm: Uri): ...
    @property
    def Algorithm(self) -> Uri: ...
    @Algorithm.setter
    def Algorithm(self, value: Uri) -> None: ...


class EntitiesDescriptor(MetadataBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, entityGroupList: Collection): ...
    @overload
    def __init__(self, entityList: Collection): ...
    @overload
    def __init__(self, entityList: Collection, entityGroupList: Collection): ...
    @property
    def ChildEntities(self) -> ICollection: ...
    @property
    def ChildEntityGroups(self) -> ICollection: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class EntityDescriptor(MetadataBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, entityId: EntityId): ...
    @property
    def Contacts(self) -> ICollection: ...
    @property
    def EntityId(self) -> EntityId: ...
    @property
    def FederationId(self) -> str: ...
    @property
    def Organization(self) -> Organization: ...
    @property
    def RoleDescriptors(self) -> ICollection: ...
    @EntityId.setter
    def EntityId(self, value: EntityId) -> None: ...
    @FederationId.setter
    def FederationId(self, value: str) -> None: ...
    @Organization.setter
    def Organization(self, value: Organization) -> None: ...


class EntityId(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, id: str): ...
    @property
    def Id(self) -> str: ...
    @Id.setter
    def Id(self, value: str) -> None: ...


class IdentityProviderSingleSignOnDescriptor(SingleSignOnDescriptor):
    def __init__(self): ...
    @property
    def SingleSignOnServices(self) -> ICollection: ...
    @property
    def SupportedAttributes(self) -> ICollection: ...
    @property
    def WantAuthenticationRequestsSigned(self) -> bool: ...
    @WantAuthenticationRequestsSigned.setter
    def WantAuthenticationRequestsSigned(self, value: bool) -> None: ...


class IndexedProtocolEndpoint(ProtocolEndpoint):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, index: int, binding: Uri, location: Uri): ...
    @property
    def Index(self) -> int: ...
    @property
    def IsDefault(self) -> Nullable: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @IsDefault.setter
    def IsDefault(self, value: Nullable) -> None: ...


class IndexedProtocolEndpointDictionary:
    def __init__(self): ...
    @property
    def Default(self) -> IndexedProtocolEndpoint: ...


class KeyDescriptor(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, ski: SecurityKeyIdentifier): ...
    @property
    def EncryptionMethods(self) -> ICollection: ...
    @property
    def KeyInfo(self) -> SecurityKeyIdentifier: ...
    @property
    def Use(self) -> KeyType: ...
    @KeyInfo.setter
    def KeyInfo(self, value: SecurityKeyIdentifier) -> None: ...
    @Use.setter
    def Use(self, value: KeyType) -> None: ...


class KeyType:
    Unspecified = 0
    Signing = 1
    Encryption = 2


class LocalizedEntry(Object):
    @property
    def Language(self) -> CultureInfo: ...
    @Language.setter
    def Language(self, value: CultureInfo) -> None: ...




class LocalizedName(LocalizedEntry):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, language: CultureInfo): ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class LocalizedUri(LocalizedEntry):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, uri: Uri, language: CultureInfo): ...
    @property
    def Uri(self) -> Uri: ...
    @Uri.setter
    def Uri(self, value: Uri) -> None: ...


class MetadataBase(Object):
    @property
    def SigningCredentials(self) -> SigningCredentials: ...
    @SigningCredentials.setter
    def SigningCredentials(self, value: SigningCredentials) -> None: ...


class MetadataSerializationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class MetadataSerializer(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tokenSerializer: SecurityTokenSerializer): ...
    @property
    def CertificateValidationMode(self) -> X509CertificateValidationMode: ...
    @property
    def CertificateValidator(self) -> X509CertificateValidator: ...
    @property
    def RevocationMode(self) -> X509RevocationMode: ...
    @property
    def SecurityTokenSerializer(self) -> SecurityTokenSerializer: ...
    @property
    def TrustedIssuers(self) -> List: ...
    @property
    def TrustedStoreLocation(self) -> StoreLocation: ...
    @overload
    def ReadMetadata(self, reader: XmlReader) -> MetadataBase: ...
    @overload
    def ReadMetadata(self, stream: Stream) -> MetadataBase: ...
    @overload
    def ReadMetadata(self, reader: XmlReader, tokenResolver: SecurityTokenResolver) -> MetadataBase: ...
    def ReadWebServiceDescriptorElement(self, reader: XmlReader, roleDescriptor: WebServiceDescriptor) -> bool: ...
    @CertificateValidationMode.setter
    def CertificateValidationMode(self, value: X509CertificateValidationMode) -> None: ...
    @CertificateValidator.setter
    def CertificateValidator(self, value: X509CertificateValidator) -> None: ...
    @RevocationMode.setter
    def RevocationMode(self, value: X509RevocationMode) -> None: ...
    @TrustedStoreLocation.setter
    def TrustedStoreLocation(self, value: StoreLocation) -> None: ...
    @overload
    def WriteMetadata(self, stream: Stream, metadata: MetadataBase) -> None: ...
    @overload
    def WriteMetadata(self, writer: XmlWriter, metadata: MetadataBase) -> None: ...


class Organization(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, names: LocalizedEntryCollection, displayNames: LocalizedEntryCollection, urls: LocalizedEntryCollection): ...
    @property
    def DisplayNames(self) -> LocalizedEntryCollection: ...
    @property
    def Names(self) -> LocalizedEntryCollection: ...
    @property
    def Urls(self) -> LocalizedEntryCollection: ...


class ProtocolEndpoint(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, binding: Uri, location: Uri): ...
    @property
    def Binding(self) -> Uri: ...
    @property
    def Location(self) -> Uri: ...
    @property
    def ResponseLocation(self) -> Uri: ...
    @Binding.setter
    def Binding(self, value: Uri) -> None: ...
    @Location.setter
    def Location(self, value: Uri) -> None: ...
    @ResponseLocation.setter
    def ResponseLocation(self, value: Uri) -> None: ...


class RoleDescriptor(Object):
    @property
    def Contacts(self) -> ICollection: ...
    @property
    def ErrorUrl(self) -> Uri: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Organization(self) -> Organization: ...
    @property
    def ProtocolsSupported(self) -> ICollection: ...
    @property
    def ValidUntil(self) -> DateTime: ...
    @ErrorUrl.setter
    def ErrorUrl(self, value: Uri) -> None: ...
    @Organization.setter
    def Organization(self, value: Organization) -> None: ...
    @ValidUntil.setter
    def ValidUntil(self, value: DateTime) -> None: ...


class SecurityTokenServiceDescriptor(WebServiceDescriptor):
    def __init__(self): ...
    @property
    def PassiveRequestorEndpoints(self) -> Collection: ...
    @property
    def SecurityTokenServiceEndpoints(self) -> Collection: ...


class ServiceProviderSingleSignOnDescriptor(SingleSignOnDescriptor):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, collection: IndexedProtocolEndpointDictionary): ...
    @property
    def AssertionConsumerServices(self) -> IndexedProtocolEndpointDictionary: ...
    @property
    def AuthenticationRequestsSigned(self) -> bool: ...
    @property
    def WantAssertionsSigned(self) -> bool: ...
    @AuthenticationRequestsSigned.setter
    def AuthenticationRequestsSigned(self, value: bool) -> None: ...
    @WantAssertionsSigned.setter
    def WantAssertionsSigned(self, value: bool) -> None: ...


class SingleSignOnDescriptor(RoleDescriptor):
    def __init__(self): ...
    @property
    def ArtifactResolutionServices(self) -> IndexedProtocolEndpointDictionary: ...
    @property
    def NameIdentifierFormats(self) -> ICollection: ...
    @property
    def SingleLogoutServices(self) -> Collection: ...


class WebServiceDescriptor(RoleDescriptor):
    @property
    def ClaimTypesOffered(self) -> ICollection: ...
    @property
    def ClaimTypesRequested(self) -> ICollection: ...
    @property
    def ServiceDescription(self) -> str: ...
    @property
    def ServiceDisplayName(self) -> str: ...
    @property
    def TargetScopes(self) -> ICollection: ...
    @property
    def TokenTypesOffered(self) -> ICollection: ...
    @ServiceDescription.setter
    def ServiceDescription(self, value: str) -> None: ...
    @ServiceDisplayName.setter
    def ServiceDisplayName(self, value: str) -> None: ...
