from typing import Tuple, Set, Iterable, List


class Claim(Object):
    def __init__(self, claimType: str, resource: Object, right: str): ...
    def CreateDenyOnlyWindowsSidClaim(sid: SecurityIdentifier) -> Claim: ...
    def CreateDnsClaim(dns: str) -> Claim: ...
    def CreateHashClaim(hash: Set(Byte)) -> Claim: ...
    def CreateMailAddressClaim(mailAddress: MailAddress) -> Claim: ...
    def CreateNameClaim(name: str) -> Claim: ...
    def CreateRsaClaim(rsa: RSA) -> Claim: ...
    def CreateSpnClaim(spn: str) -> Claim: ...
    def CreateThumbprintClaim(thumbprint: Set(Byte)) -> Claim: ...
    def CreateUpnClaim(upn: str) -> Claim: ...
    def CreateUriClaim(uri: Uri) -> Claim: ...
    def CreateWindowsSidClaim(sid: SecurityIdentifier) -> Claim: ...
    def CreateX500DistinguishedNameClaim(x500DistinguishedName: X500DistinguishedName) -> Claim: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ClaimType(self) -> str: ...
    @property
    def DefaultComparer() -> IEqualityComparer: ...
    @property
    def Resource(self) -> Object: ...
    @property
    def Right(self) -> str: ...
    @property
    def System() -> Claim: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class ClaimSet(Object):
    @overload
    def ContainsClaim(self, claim: Claim) -> bool: ...
    @overload
    def ContainsClaim(self, claim: Claim, comparer: IEqualityComparer) -> bool: ...
    def FindClaims(self, claimType: str, right: str) -> Iterable[Claim]: ...
    @property
    def Count(self) -> int: ...
    @property
    def Issuer(self) -> ClaimSet: ...
    @property
    def Item(self, index: int) -> Claim: ...
    @property
    def System() -> ClaimSet: ...
    @property
    def Windows() -> ClaimSet: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ClaimTypes(Object):
    @property
    def Anonymous() -> str: ...
    @property
    def Authentication() -> str: ...
    @property
    def AuthorizationDecision() -> str: ...
    @property
    def Country() -> str: ...
    @property
    def DateOfBirth() -> str: ...
    @property
    def DenyOnlySid() -> str: ...
    @property
    def Dns() -> str: ...
    @property
    def Email() -> str: ...
    @property
    def Gender() -> str: ...
    @property
    def GivenName() -> str: ...
    @property
    def Hash() -> str: ...
    @property
    def HomePhone() -> str: ...
    @property
    def Locality() -> str: ...
    @property
    def MobilePhone() -> str: ...
    @property
    def Name() -> str: ...
    @property
    def NameIdentifier() -> str: ...
    @property
    def OtherPhone() -> str: ...
    @property
    def PostalCode() -> str: ...
    @property
    def PPID() -> str: ...
    @property
    def Rsa() -> str: ...
    @property
    def Sid() -> str: ...
    @property
    def Spn() -> str: ...
    @property
    def StateOrProvince() -> str: ...
    @property
    def StreetAddress() -> str: ...
    @property
    def Surname() -> str: ...
    @property
    def System() -> str: ...
    @property
    def Thumbprint() -> str: ...
    @property
    def Upn() -> str: ...
    @property
    def Uri() -> str: ...
    @property
    def Webpage() -> str: ...
    @property
    def X500DistinguishedName() -> str: ...


class DefaultClaimSet(ClaimSet):
    @overload
    def __init__(self, claims: Set(Claim)): ...
    @overload
    def __init__(self, claims: List[Claim]): ...
    @overload
    def __init__(self, issuer: ClaimSet, claims: Set(Claim)): ...
    @overload
    def __init__(self, issuer: ClaimSet, claims: List[Claim]): ...
    @overload
    def ContainsClaim(self, claim: Claim) -> bool: ...
    def FindClaims(self, claimType: str, right: str) -> Iterable[Claim]: ...
    @property
    def Count(self) -> int: ...
    @property
    def Issuer(self) -> ClaimSet: ...
    @property
    def Item(self, index: int) -> Claim: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def ToString(self) -> str: ...


class Rights(Object):
    @property
    def Identity() -> str: ...
    @property
    def PossessProperty() -> str: ...


class WindowsClaimSet(ClaimSet):
    @overload
    def __init__(self, windowsIdentity: WindowsIdentity): ...
    @overload
    def __init__(self, windowsIdentity: WindowsIdentity, includeWindowsGroups: bool): ...
    @overload
    def __init__(self, windowsIdentity: WindowsIdentity, expirationTime: DateTime): ...
    @overload
    def __init__(self, windowsIdentity: WindowsIdentity, includeWindowsGroups: bool, expirationTime: DateTime): ...
    @overload
    def __init__(self, windowsIdentity: WindowsIdentity, authenticationType: str, includeWindowsGroups: bool, expirationTime: DateTime): ...
    def Dispose(self) -> None: ...
    def FindClaims(self, claimType: str, right: str) -> Iterable[Claim]: ...
    @property
    def Count(self) -> int: ...
    @property
    def ExpirationTime(self) -> DateTime: ...
    @property
    def Issuer(self) -> ClaimSet: ...
    @property
    def Item(self, index: int) -> Claim: ...
    @property
    def WindowsIdentity(self) -> WindowsIdentity: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def ToString(self) -> str: ...


class X509CertificateClaimSet(ClaimSet):
    def __init__(self, certificate: X509Certificate2): ...
    def Dispose(self) -> None: ...
    def FindClaims(self, claimType: str, right: str) -> Iterable[Claim]: ...
    @property
    def Count(self) -> int: ...
    @property
    def ExpirationTime(self) -> DateTime: ...
    @property
    def Issuer(self) -> ClaimSet: ...
    @property
    def Item(self, index: int) -> Claim: ...
    @property
    def X509Certificate(self) -> X509Certificate2: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def ToString(self) -> str: ...
