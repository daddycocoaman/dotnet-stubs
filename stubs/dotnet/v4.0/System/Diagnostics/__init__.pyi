__all__ = ['Eventing','PerformanceData']
from typing import Tuple, Set, Iterable, List


class EventSchemaTraceListener(TextWriterTraceListener):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, fileName: str, name: str): ...
    @overload
    def __init__(self, fileName: str, name: str, bufferSize: int): ...
    @overload
    def __init__(self, fileName: str, name: str, bufferSize: int, logRetentionOption: TraceLogRetentionOption): ...
    @overload
    def __init__(self, fileName: str, name: str, bufferSize: int, logRetentionOption: TraceLogRetentionOption, maximumFileSize: Int64): ...
    @overload
    def __init__(self, fileName: str, name: str, bufferSize: int, logRetentionOption: TraceLogRetentionOption, maximumFileSize: Int64, maximumNumberOfFiles: int): ...
    def Close(self) -> None: ...
    @overload
    def Fail(self, message: str, detailMessage: str) -> None: ...
    def Flush(self) -> None: ...
    @property
    def BufferSize(self) -> int: ...
    @property
    def IsThreadSafe(self) -> bool: ...
    @property
    def MaximumFileSize(self) -> Int64: ...
    @property
    def MaximumNumberOfFiles(self) -> int: ...
    @property
    def TraceLogRetentionOption(self) -> TraceLogRetentionOption: ...
    @property
    def Writer(self) -> TextWriter: ...
    @Writer.setter
    def Writer(self, value: TextWriter) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, data: Set(Object)) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, data: Object) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, format: str, args: Set(Object)) -> None: ...
    def TraceTransfer(self, eventCache: TraceEventCache, source: str, id: int, message: str, relatedActivityId: Guid) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...


class TraceLogRetentionOption:
    UnlimitedSequentialFiles = 0
    LimitedCircularFiles = 1
    SingleFileUnboundedSize = 2
    LimitedSequentialFiles = 3
    SingleFileBoundedSize = 4


class UnescapedXmlDiagnosticData(Object):
    def __init__(self, xmlPayload: str): ...
    @property
    def UnescapedXml(self) -> str: ...
    @UnescapedXml.setter
    def UnescapedXml(self, value: str) -> None: ...
    def ToString(self) -> str: ...
