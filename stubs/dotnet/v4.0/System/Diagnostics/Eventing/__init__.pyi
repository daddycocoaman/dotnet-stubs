__all__ = ['Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader','Reader']
from typing import Tuple, Set, Iterable, List


class EventProviderTraceListener(TraceListener):
    @overload
    def __init__(self, providerId: str): ...
    @overload
    def __init__(self, providerId: str, name: str): ...
    @overload
    def __init__(self, providerId: str, name: str, delimiter: str): ...
    def Close(self) -> None: ...
    @overload
    def Fail(self, message: str, detailMessage: str) -> None: ...
    def Flush(self) -> None: ...
    @property
    def Delimiter(self) -> str: ...
    @property
    def IsThreadSafe(self) -> bool: ...
    @Delimiter.setter
    def Delimiter(self, value: str) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, data: Set(Object)) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, data: Object) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, format: str, args: Set(Object)) -> None: ...
    def TraceTransfer(self, eventCache: TraceEventCache, source: str, id: int, message: str, relatedActivityId: Guid) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...
