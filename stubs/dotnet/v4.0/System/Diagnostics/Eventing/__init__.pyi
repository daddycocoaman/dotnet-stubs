__all__ = ['Reader']
from typing import Tuple, Set, Iterable, List


class EventDescriptor(ValueType):
    def __init__(self, id: int, version: Byte, channel: Byte, level: Byte, opcode: Byte, task: int, keywords: Int64): ...
    @property
    def Channel(self) -> Byte: ...
    @property
    def EventId(self) -> int: ...
    @property
    def Keywords(self) -> Int64: ...
    @property
    def Level(self) -> Byte: ...
    @property
    def Opcode(self) -> Byte: ...
    @property
    def Task(self) -> int: ...
    @property
    def Version(self) -> Byte: ...


class EventProvider(Object):
    def __init__(self, providerGuid: Guid): ...
    def Close(self) -> None: ...
    def CreateActivityId() -> Guid: ...
    def Dispose(self) -> None: ...
    def GetLastWriteEventError() -> WriteEventErrorCode: ...
    @overload
    def IsEnabled(self) -> bool: ...
    @overload
    def IsEnabled(self, level: Byte, keywords: Int64) -> bool: ...
    def SetActivityId(id: Guid) -> Tuple[Guid]: ...
    @overload
    def WriteEvent(self, eventDescriptor: EventDescriptor, eventPayload: Set(Object)) -> Tuple[bool, EventDescriptor]: ...
    @overload
    def WriteEvent(self, eventDescriptor: EventDescriptor, data: str) -> Tuple[bool, EventDescriptor]: ...
    @overload
    def WriteMessageEvent(self, eventMessage: str) -> bool: ...
    @overload
    def WriteMessageEvent(self, eventMessage: str, eventLevel: Byte, eventKeywords: Int64) -> bool: ...
    def WriteTransferEvent(self, eventDescriptor: EventDescriptor, relatedActivityId: Guid, eventPayload: Set(Object)) -> Tuple[bool, EventDescriptor]: ...


class EventProviderTraceListener(TraceListener):
    @overload
    def __init__(self, providerId: str): ...
    @overload
    def __init__(self, providerId: str, name: str): ...
    @overload
    def __init__(self, providerId: str, name: str, delimiter: str): ...
    def Close(self) -> None: ...
    @overload
    def Fail(self, message: str, detailMessage: str) -> None: ...
    def Flush(self) -> None: ...
    @property
    def Delimiter(self) -> str: ...
    @property
    def IsThreadSafe(self) -> bool: ...
    @Delimiter.setter
    def Delimiter(self, value: str) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, data: Set(Object)) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, data: Object) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, format: str, args: Set(Object)) -> None: ...
    def TraceTransfer(self, eventCache: TraceEventCache, source: str, id: int, message: str, relatedActivityId: Guid) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...


class WriteEventErrorCode:
    NoError = 0
    NoFreeBuffers = 1
    EventTooBig = 2
