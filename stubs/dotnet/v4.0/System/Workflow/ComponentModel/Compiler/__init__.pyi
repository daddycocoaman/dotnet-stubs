from typing import Tuple, Set, Iterable, List


class ValidationError(Object):
    @overload
    def __init__(self, errorText: str, errorNumber: int): ...
    @overload
    def __init__(self, errorText: str, errorNumber: int, isWarning: bool): ...
    @overload
    def __init__(self, errorText: str, errorNumber: int, isWarning: bool, propertyName: str): ...
    @property
    def ErrorNumber(self) -> int: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def IsWarning(self) -> bool: ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def UserData(self) -> IDictionary: ...
    def GetNotSetValidationError(propertyName: str) -> ValidationError: ...
    @PropertyName.setter
    def PropertyName(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ValidationErrorCollection:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: ValidationErrorCollection): ...
    @overload
    def __init__(self, value: Iterable[ValidationError]): ...
    def AddRange(self, value: Iterable[ValidationError]) -> None: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def HasWarnings(self) -> bool: ...
    def ToArray(self) -> Set(ValidationError): ...
