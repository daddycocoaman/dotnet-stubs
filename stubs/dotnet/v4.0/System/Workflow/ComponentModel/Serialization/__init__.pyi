from typing import Tuple, Set, Iterable, List


class ConstructorArgumentAttribute(Attribute):
    def __init__(self, argumentName: str): ...
    @property
    def ArgumentName(self) -> str: ...


class ContentPropertyAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...


class MarkupExtension(Object):
    def ProvideValue(self, provider: IServiceProvider) -> Object: ...


class RuntimeNamePropertyAttribute(Attribute):
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...


class WorkflowMarkupSerializationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, lineNumber: int, columnNumber: int): ...
    @overload
    def __init__(self, message: str, innerException: Exception, lineNumber: int, columnNumber: int): ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class WorkflowMarkupSerializationManager(Object):
    def __init__(self, manager: IDesignerSerializationManager): ...
    def AddSerializationProvider(self, provider: IDesignerSerializationProvider) -> None: ...
    @property
    def Context(self) -> ContextStack: ...
    @property
    def LocalAssembly(self) -> Assembly: ...
    def GetSerializer(self, objectType: Type, serializerType: Type) -> Object: ...
    def GetService(self, serviceType: Type) -> Object: ...
    @overload
    def GetType(self, xmlQualifiedName: XmlQualifiedName) -> Type: ...
    @overload
    def GetType(self, typeName: str) -> Type: ...
    def GetXmlQualifiedName(self, type: Type) -> Tuple[XmlQualifiedName, str]: ...
    def RemoveSerializationProvider(self, provider: IDesignerSerializationProvider) -> None: ...
    def ReportError(self, errorInformation: Object) -> None: ...
    @LocalAssembly.setter
    def LocalAssembly(self, value: Assembly) -> None: ...


class WorkflowMarkupSerializer(Object):
    def __init__(self): ...
    @overload
    def Deserialize(self, reader: XmlReader) -> Object: ...
    @overload
    def Deserialize(self, serializationManager: IDesignerSerializationManager, reader: XmlReader) -> Object: ...
    @overload
    def Serialize(self, writer: XmlWriter, obj: Object) -> None: ...
    @overload
    def Serialize(self, serializationManager: IDesignerSerializationManager, writer: XmlWriter, obj: Object) -> None: ...


class XmlnsDefinitionAttribute(Attribute):
    def __init__(self, xmlNamespace: str, clrNamespace: str): ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def ClrNamespace(self) -> str: ...
    @property
    def XmlNamespace(self) -> str: ...
    @AssemblyName.setter
    def AssemblyName(self, value: str) -> None: ...


class XmlnsPrefixAttribute(Attribute):
    def __init__(self, xmlNamespace: str, prefix: str): ...
    @property
    def Prefix(self) -> str: ...
    @property
    def XmlNamespace(self) -> str: ...
