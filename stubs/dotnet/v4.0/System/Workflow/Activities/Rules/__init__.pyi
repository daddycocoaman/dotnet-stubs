__all__ = ['Design']
from typing import Tuple, Set, Iterable, List


class AddedConditionAction(RuleConditionChangeAction):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, addedConditionDefinition: RuleCondition): ...
    @property
    def ConditionDefinition(self) -> RuleCondition: ...
    @property
    def ConditionName(self) -> str: ...
    @ConditionDefinition.setter
    def ConditionDefinition(self, value: RuleCondition) -> None: ...


class AddedRuleSetAction(RuleSetChangeAction):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, addedRuleSetDefinition: RuleSet): ...
    @property
    def RuleSetDefinition(self) -> RuleSet: ...
    @property
    def RuleSetName(self) -> str: ...
    @RuleSetDefinition.setter
    def RuleSetDefinition(self, value: RuleSet) -> None: ...


class IRuleExpression:
    def AnalyzeUsage(self, analysis: RuleAnalysis, isRead: bool, isWritten: bool, qualifier: RulePathQualifier) -> None: ...
    def Clone(self) -> CodeExpression: ...
    def Decompile(self, stringBuilder: StringBuilder, parentExpression: CodeExpression) -> None: ...
    def Evaluate(self, execution: RuleExecution) -> RuleExpressionResult: ...
    def Match(self, expression: CodeExpression) -> bool: ...
    def Validate(self, validation: RuleValidation, isWritten: bool) -> RuleExpressionInfo: ...


class RemovedConditionAction(RuleConditionChangeAction):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, removedConditionDefinition: RuleCondition): ...
    @property
    def ConditionDefinition(self) -> RuleCondition: ...
    @property
    def ConditionName(self) -> str: ...
    @ConditionDefinition.setter
    def ConditionDefinition(self, value: RuleCondition) -> None: ...


class RemovedRuleSetAction(RuleSetChangeAction):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, removedRuleSetDefinition: RuleSet): ...
    @property
    def RuleSetDefinition(self) -> RuleSet: ...
    @property
    def RuleSetName(self) -> str: ...
    @RuleSetDefinition.setter
    def RuleSetDefinition(self, value: RuleSet) -> None: ...


class Rule(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, condition: RuleCondition, thenActions: List[RuleAction]): ...
    @overload
    def __init__(self, name: str, condition: RuleCondition, thenActions: List[RuleAction], elseActions: List[RuleAction]): ...
    def Clone(self) -> Rule: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Active(self) -> bool: ...
    @property
    def Condition(self) -> RuleCondition: ...
    @property
    def Description(self) -> str: ...
    @property
    def ElseActions(self) -> List[RuleAction]: ...
    @property
    def Name(self) -> str: ...
    @property
    def Priority(self) -> int: ...
    @property
    def ReevaluationBehavior(self) -> RuleReevaluationBehavior: ...
    @property
    def ThenActions(self) -> List[RuleAction]: ...
    def GetHashCode(self) -> int: ...
    @Active.setter
    def Active(self, value: bool) -> None: ...
    @Condition.setter
    def Condition(self, value: RuleCondition) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Priority.setter
    def Priority(self, value: int) -> None: ...
    @ReevaluationBehavior.setter
    def ReevaluationBehavior(self, value: RuleReevaluationBehavior) -> None: ...


class RuleAction(Object):
    def Clone(self) -> RuleAction: ...
    def Execute(self, context: RuleExecution) -> None: ...
    def GetSideEffects(self, validation: RuleValidation) -> ICollection: ...
    def Validate(self, validator: RuleValidation) -> bool: ...


class RuleAnalysis(Object):
    def __init__(self, validation: RuleValidation, forWrites: bool): ...
    def AddSymbol(self, symbol: str) -> None: ...
    @property
    def ForWrites(self) -> bool: ...
    def GetSymbols(self) -> ICollection: ...


class RuleAttribute(Attribute):
    pass


class RuleAttributeTarget:
    Parameter = 0
    This = 1


class RuleChainingBehavior:
    #None = 0
    UpdateOnly = 1
    Full = 2


class RuleCondition(Object):
    def Clone(self) -> RuleCondition: ...
    def Evaluate(self, execution: RuleExecution) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetDependencies(self, validation: RuleValidation) -> ICollection: ...
    def OnRuntimeInitialized(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def Validate(self, validation: RuleValidation) -> bool: ...


class RuleConditionChangeAction(WorkflowChangeAction):
    @property
    def ConditionName(self) -> str: ...


class RuleConditionCollection:
    def __init__(self): ...
    @overload
    def Add(self, item: RuleCondition) -> None: ...
    def Diff(self, originalDefinition: Object, changedDefinition: Object) -> List[WorkflowChangeAction]: ...


class RuleDefinitions(Object):
    def __init__(self): ...
    def Diff(self, originalDefinition: Object, changedDefinition: Object) -> List[WorkflowChangeAction]: ...
    @property
    def Conditions(self) -> RuleConditionCollection: ...
    @property
    def RuleSets(self) -> RuleSetCollection: ...


class RuleEngine(Object):
    @overload
    def __init__(self, ruleSet: RuleSet, validation: RuleValidation): ...
    @overload
    def __init__(self, ruleSet: RuleSet, objectType: Type): ...
    @overload
    def Execute(self, thisObject: Object) -> None: ...
    @overload
    def Execute(self, thisObject: Object, executionContext: ActivityExecutionContext) -> None: ...


class RuleEvaluationException(RuleException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, ex: Exception): ...


class RuleEvaluationIncompatibleTypesException(RuleException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, ex: Exception): ...
    @overload
    def __init__(self, message: str, left: Type, op: CodeBinaryOperatorType, right: Type): ...
    @overload
    def __init__(self, message: str, left: Type, op: CodeBinaryOperatorType, right: Type, ex: Exception): ...
    @property
    def Left(self) -> Type: ...
    @property
    def Operator(self) -> CodeBinaryOperatorType: ...
    @property
    def Right(self) -> Type: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @Left.setter
    def Left(self, value: Type) -> None: ...
    @Operator.setter
    def Operator(self, value: CodeBinaryOperatorType) -> None: ...
    @Right.setter
    def Right(self, value: Type) -> None: ...


class RuleException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, ex: Exception): ...


class RuleExecution(Object):
    @overload
    def __init__(self, validation: RuleValidation, thisObject: Object): ...
    @overload
    def __init__(self, validation: RuleValidation, thisObject: Object, activityExecutionContext: ActivityExecutionContext): ...
    @property
    def Activity(self) -> Activity: ...
    @property
    def ActivityExecutionContext(self) -> ActivityExecutionContext: ...
    @property
    def Halted(self) -> bool: ...
    @property
    def ThisObject(self) -> Object: ...
    @property
    def Validation(self) -> RuleValidation: ...
    @Halted.setter
    def Halted(self, value: bool) -> None: ...
    @Validation.setter
    def Validation(self, value: RuleValidation) -> None: ...


class RuleExpressionCondition(RuleCondition):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, conditionName: str): ...
    @overload
    def __init__(self, expression: CodeExpression): ...
    @overload
    def __init__(self, conditionName: str, expression: CodeExpression): ...
    def Clone(self) -> RuleCondition: ...
    def Equals(self, obj: Object) -> bool: ...
    def Evaluate(self, execution: RuleExecution) -> bool: ...
    @property
    def Expression(self) -> CodeExpression: ...
    @property
    def Name(self) -> str: ...
    def GetDependencies(self, validation: RuleValidation) -> ICollection: ...
    def GetHashCode(self) -> int: ...
    def OnRuntimeInitialized(self) -> None: ...
    @Expression.setter
    def Expression(self, value: CodeExpression) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def ToString(self) -> str: ...
    def Validate(self, validation: RuleValidation) -> bool: ...


class RuleExpressionInfo(Object):
    def __init__(self, expressionType: Type): ...
    @property
    def ExpressionType(self) -> Type: ...


class RuleExpressionResult(Object):
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class RuleExpressionWalker(Object):
    def AnalyzeUsage(analysis: RuleAnalysis, expression: CodeExpression, isRead: bool, isWritten: bool, qualifier: RulePathQualifier) -> None: ...
    def Clone(originalExpression: CodeExpression) -> CodeExpression: ...
    def Decompile(stringBuilder: StringBuilder, expression: CodeExpression, parentExpression: CodeExpression) -> None: ...
    def Evaluate(execution: RuleExecution, expression: CodeExpression) -> RuleExpressionResult: ...
    def Match(firstExpression: CodeExpression, secondExpression: CodeExpression) -> bool: ...
    def Validate(validation: RuleValidation, expression: CodeExpression, isWritten: bool) -> RuleExpressionInfo: ...


class RuleHaltAction(RuleAction):
    def __init__(self): ...
    def Clone(self) -> RuleAction: ...
    def Equals(self, obj: Object) -> bool: ...
    def Execute(self, context: RuleExecution) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetSideEffects(self, validation: RuleValidation) -> ICollection: ...
    def ToString(self) -> str: ...
    def Validate(self, validator: RuleValidation) -> bool: ...


class RuleInvokeAttribute(RuleAttribute):
    def __init__(self, methodInvoked: str): ...
    @property
    def MethodInvoked(self) -> str: ...


class RuleLiteralResult(RuleExpressionResult):
    def __init__(self, literal: Object): ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class RulePathQualifier(Object):
    def __init__(self, name: str, next: RulePathQualifier): ...
    @property
    def Name(self) -> str: ...
    @property
    def Next(self) -> RulePathQualifier: ...


class RuleReadAttribute(RuleReadWriteAttribute):
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: str, target: RuleAttributeTarget): ...


class RuleReadWriteAttribute(RuleAttribute):
    @property
    def Path(self) -> str: ...
    @property
    def Target(self) -> RuleAttributeTarget: ...


class RuleReevaluationBehavior:
    Never = 0
    Always = 1


class RuleSet(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, description: str): ...
    def Clone(self) -> RuleSet: ...
    def Equals(self, obj: Object) -> bool: ...
    def Execute(self, ruleExecution: RuleExecution) -> None: ...
    @property
    def ChainingBehavior(self) -> RuleChainingBehavior: ...
    @property
    def Description(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Rules(self) -> ICollection: ...
    def GetHashCode(self) -> int: ...
    @ChainingBehavior.setter
    def ChainingBehavior(self, value: RuleChainingBehavior) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def Validate(self, validation: RuleValidation) -> bool: ...


class RuleSetChangeAction(WorkflowChangeAction):
    @property
    def RuleSetName(self) -> str: ...


class RuleSetCollection:
    def __init__(self): ...
    @overload
    def Add(self, item: RuleSet) -> None: ...
    def Diff(self, originalDefinition: Object, changedDefinition: Object) -> List[WorkflowChangeAction]: ...


class RuleSetValidationException(RuleException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, ex: Exception): ...
    @overload
    def __init__(self, message: str, errors: ValidationErrorCollection): ...
    @property
    def Errors(self) -> ValidationErrorCollection: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class RuleStatementAction(RuleAction):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, codeDomExpression: CodeExpression): ...
    @overload
    def __init__(self, codeDomStatement: CodeStatement): ...
    def Clone(self) -> RuleAction: ...
    def Equals(self, obj: Object) -> bool: ...
    def Execute(self, context: RuleExecution) -> None: ...
    @property
    def CodeDomStatement(self) -> CodeStatement: ...
    def GetHashCode(self) -> int: ...
    def GetSideEffects(self, validation: RuleValidation) -> ICollection: ...
    @CodeDomStatement.setter
    def CodeDomStatement(self, value: CodeStatement) -> None: ...
    def ToString(self) -> str: ...
    def Validate(self, validator: RuleValidation) -> bool: ...


class RuleUpdateAction(RuleAction):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    def Clone(self) -> RuleAction: ...
    def Equals(self, obj: Object) -> bool: ...
    def Execute(self, context: RuleExecution) -> None: ...
    @property
    def Path(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetSideEffects(self, validation: RuleValidation) -> ICollection: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    def ToString(self) -> str: ...
    def Validate(self, validator: RuleValidation) -> bool: ...


class RuleValidation(Object):
    @overload
    def __init__(self, thisType: Type, typeProvider: ITypeProvider): ...
    @overload
    def __init__(self, activity: Activity, typeProvider: ITypeProvider, checkStaticType: bool): ...
    def ExpressionInfo(self, expression: CodeExpression) -> RuleExpressionInfo: ...
    @property
    def Errors(self) -> ValidationErrorCollection: ...
    @property
    def ThisType(self) -> Type: ...
    def PopParentExpression(self) -> None: ...
    def PushParentExpression(self, newParent: CodeExpression) -> bool: ...


class RuleWriteAttribute(RuleReadWriteAttribute):
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: str, target: RuleAttributeTarget): ...


class UpdatedConditionAction(RuleConditionChangeAction):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, conditionDefinition: RuleCondition, newConditionDefinition: RuleCondition): ...
    @property
    def ConditionDefinition(self) -> RuleCondition: ...
    @property
    def ConditionName(self) -> str: ...
    @property
    def NewConditionDefinition(self) -> RuleCondition: ...
    @ConditionDefinition.setter
    def ConditionDefinition(self, value: RuleCondition) -> None: ...
    @NewConditionDefinition.setter
    def NewConditionDefinition(self, value: RuleCondition) -> None: ...


class UpdatedRuleSetAction(RuleSetChangeAction):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, originalRuleSetDefinition: RuleSet, updatedRuleSetDefinition: RuleSet): ...
    @property
    def OriginalRuleSetDefinition(self) -> RuleSet: ...
    @property
    def RuleSetName(self) -> str: ...
    @property
    def UpdatedRuleSetDefinition(self) -> RuleSet: ...
    @OriginalRuleSetDefinition.setter
    def OriginalRuleSetDefinition(self, value: RuleSet) -> None: ...
    @UpdatedRuleSetDefinition.setter
    def UpdatedRuleSetDefinition(self, value: RuleSet) -> None: ...
