from typing import Tuple, Set, Iterable, List


class CivicAddress(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, addressLine1: str, addressLine2: str, building: str, city: str, countryRegion: str, floorLevel: str, postalCode: str, stateProvince: str): ...
    @property
    def AddressLine1(self) -> str: ...
    @property
    def AddressLine2(self) -> str: ...
    @property
    def Building(self) -> str: ...
    @property
    def City(self) -> str: ...
    @property
    def CountryRegion(self) -> str: ...
    @property
    def FloorLevel(self) -> str: ...
    @property
    def IsUnknown(self) -> bool: ...
    @property
    def PostalCode(self) -> str: ...
    @property
    def StateProvince(self) -> str: ...
    @AddressLine1.setter
    def AddressLine1(self, value: str) -> None: ...
    @AddressLine2.setter
    def AddressLine2(self, value: str) -> None: ...
    @Building.setter
    def Building(self, value: str) -> None: ...
    @City.setter
    def City(self, value: str) -> None: ...
    @CountryRegion.setter
    def CountryRegion(self, value: str) -> None: ...
    @FloorLevel.setter
    def FloorLevel(self, value: str) -> None: ...
    @PostalCode.setter
    def PostalCode(self, value: str) -> None: ...
    @StateProvince.setter
    def StateProvince(self, value: str) -> None: ...


class CivicAddressResolver(Object):
    def __init__(self): ...
    def add_ResolveAddressCompleted(self, value: EventHandler) -> None: ...
    def remove_ResolveAddressCompleted(self, value: EventHandler) -> None: ...
    def ResolveAddress(self, coordinate: GeoCoordinate) -> CivicAddress: ...
    def ResolveAddressAsync(self, coordinate: GeoCoordinate) -> None: ...


class GeoCoordinate(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, latitude: float, longitude: float): ...
    @overload
    def __init__(self, latitude: float, longitude: float, altitude: float): ...
    @overload
    def __init__(self, latitude: float, longitude: float, altitude: float, horizontalAccuracy: float, verticalAccuracy: float, speed: float, course: float): ...
    @overload
    def Equals(self, other: GeoCoordinate) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Altitude(self) -> float: ...
    @property
    def Course(self) -> float: ...
    @property
    def HorizontalAccuracy(self) -> float: ...
    @property
    def IsUnknown(self) -> bool: ...
    @property
    def Latitude(self) -> float: ...
    @property
    def Longitude(self) -> float: ...
    @property
    def Speed(self) -> float: ...
    @property
    def VerticalAccuracy(self) -> float: ...
    def GetDistanceTo(self, other: GeoCoordinate) -> float: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: GeoCoordinate, right: GeoCoordinate) -> bool: ...
    def op_Inequality(left: GeoCoordinate, right: GeoCoordinate) -> bool: ...
    @Altitude.setter
    def Altitude(self, value: float) -> None: ...
    @Course.setter
    def Course(self, value: float) -> None: ...
    @HorizontalAccuracy.setter
    def HorizontalAccuracy(self, value: float) -> None: ...
    @Latitude.setter
    def Latitude(self, value: float) -> None: ...
    @Longitude.setter
    def Longitude(self, value: float) -> None: ...
    @Speed.setter
    def Speed(self, value: float) -> None: ...
    @VerticalAccuracy.setter
    def VerticalAccuracy(self, value: float) -> None: ...
    def ToString(self) -> str: ...


class GeoCoordinateWatcher(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, desiredAccuracy: GeoPositionAccuracy): ...
    def add_PositionChanged(self, value: EventHandler) -> None: ...
    def add_StatusChanged(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def DesiredAccuracy(self) -> GeoPositionAccuracy: ...
    @property
    def MovementThreshold(self) -> float: ...
    @property
    def Permission(self) -> GeoPositionPermission: ...
    @property
    def Position(self) -> GeoPosition: ...
    @property
    def Status(self) -> GeoPositionStatus: ...
    def remove_PositionChanged(self, value: EventHandler) -> None: ...
    def remove_StatusChanged(self, value: EventHandler) -> None: ...
    @MovementThreshold.setter
    def MovementThreshold(self, value: float) -> None: ...
    @overload
    def Start(self) -> None: ...
    @overload
    def Start(self, suppressPermissionPrompt: bool) -> None: ...
    def Stop(self) -> None: ...
    def TryStart(self, suppressPermissionPrompt: bool, timeout: TimeSpan) -> bool: ...




class GeoPositionAccuracy:
    Default = 0
    High = 1




class GeoPositionPermission:
    Unknown = 0
    Granted = 1
    Denied = 2


class GeoPositionStatus:
    Ready = 0
    Initializing = 1
    NoData = 2
    Disabled = 3


class GeoPositionStatusChangedEventArgs(EventArgs):
    def __init__(self, status: GeoPositionStatus): ...
    @property
    def Status(self) -> GeoPositionStatus: ...


class ICivicAddressResolver:
    def add_ResolveAddressCompleted(self, value: EventHandler) -> None: ...
    def remove_ResolveAddressCompleted(self, value: EventHandler) -> None: ...
    def ResolveAddress(self, coordinate: GeoCoordinate) -> CivicAddress: ...
    def ResolveAddressAsync(self, coordinate: GeoCoordinate) -> None: ...




class ResolveAddressCompletedEventArgs(AsyncCompletedEventArgs):
    def __init__(self, address: CivicAddress, error: Exception, cancelled: bool, userState: Object): ...
    @property
    def Address(self) -> CivicAddress: ...
