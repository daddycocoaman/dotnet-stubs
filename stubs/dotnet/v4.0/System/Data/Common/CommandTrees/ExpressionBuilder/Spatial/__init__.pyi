from typing import Tuple, Set, Iterable, List


class SpatialEdmFunctions(Object):
    def Area(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def AsBinary(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def AsGml(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def AsText(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def Centroid(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def CoordinateSystemId(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def Distance(spatialValue1: DbExpression, spatialValue2: DbExpression) -> DbFunctionExpression: ...
    def Elevation(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def EndPoint(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def ExteriorRing(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def GeographyCollectionFromBinary(geographyCollectionWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyCollectionFromText(geographyCollectionWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeographyFromBinary(wellKnownBinaryValue: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeographyFromBinary(wellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeographyFromGml(geographyMarkup: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeographyFromGml(geographyMarkup: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeographyFromText(wellKnownText: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeographyFromText(wellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyLineFromBinary(lineWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyLineFromText(lineWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyMultiLineFromBinary(multiLineWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyMultiLineFromText(multiLineWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyMultiPointFromBinary(multiPointWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyMultiPointFromText(multiPointWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyMultiPolygonFromBinary(multiPolygonWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyMultiPolygonFromText(multiPolygonWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyPointFromBinary(pointWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyPointFromText(pointWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyPolygonFromBinary(polygonWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeographyPolygonFromText(polygonWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryCollectionFromBinary(geometryCollectionWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryCollectionFromText(geometryCollectionWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeometryFromBinary(wellKnownBinaryValue: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeometryFromBinary(wellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeometryFromGml(geometryMarkup: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeometryFromGml(geometryMarkup: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeometryFromText(wellKnownText: DbExpression) -> DbFunctionExpression: ...
    @overload
    def GeometryFromText(wellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryLineFromBinary(lineWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryLineFromText(lineWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryMultiLineFromBinary(multiLineWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryMultiLineFromText(multiLineWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryMultiPointFromBinary(multiPointWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryMultiPointFromText(multiPointWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryMultiPolygonFromBinary(multiPolygonWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryMultiPolygonFromText(multiPolygonWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryPointFromBinary(pointWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryPointFromText(pointWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryPolygonFromBinary(polygonWellKnownBinaryValue: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def GeometryPolygonFromText(polygonWellKnownText: DbExpression, coordinateSystemId: DbExpression) -> DbFunctionExpression: ...
    def InteriorRingAt(geometryValue: DbExpression, indexValue: DbExpression) -> DbFunctionExpression: ...
    def InteriorRingCount(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def IsClosedSpatial(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def IsEmptySpatial(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def IsRing(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def IsSimpleGeometry(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def IsValidGeometry(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def Latitude(geographyValue: DbExpression) -> DbFunctionExpression: ...
    def Longitude(geographyValue: DbExpression) -> DbFunctionExpression: ...
    def Measure(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def PointAt(spatialValue: DbExpression, indexValue: DbExpression) -> DbFunctionExpression: ...
    def PointCount(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def PointOnSurface(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def SpatialBoundary(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def SpatialBuffer(spatialValue: DbExpression, distance: DbExpression) -> DbFunctionExpression: ...
    def SpatialContains(geometryValue1: DbExpression, geometryValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialConvexHull(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def SpatialCrosses(geometryValue1: DbExpression, geometryValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialDifference(spatialValue1: DbExpression, spatialValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialDimension(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def SpatialDisjoint(spatialValue1: DbExpression, spatialValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialElementAt(spatialValue: DbExpression, indexValue: DbExpression) -> DbFunctionExpression: ...
    def SpatialElementCount(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def SpatialEnvelope(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def SpatialEquals(spatialValue1: DbExpression, spatialValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialIntersection(spatialValue1: DbExpression, spatialValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialIntersects(spatialValue1: DbExpression, spatialValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialLength(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def SpatialOverlaps(geometryValue1: DbExpression, geometryValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialRelate(geometryValue1: DbExpression, geometryValue2: DbExpression, intersectionPatternMatrix: DbExpression) -> DbFunctionExpression: ...
    def SpatialSymmetricDifference(spatialValue1: DbExpression, spatialValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialTouches(geometryValue1: DbExpression, geometryValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialTypeName(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def SpatialUnion(spatialValue1: DbExpression, spatialValue2: DbExpression) -> DbFunctionExpression: ...
    def SpatialWithin(geometryValue1: DbExpression, geometryValue2: DbExpression) -> DbFunctionExpression: ...
    def StartPoint(spatialValue: DbExpression) -> DbFunctionExpression: ...
    def XCoordinate(geometryValue: DbExpression) -> DbFunctionExpression: ...
    def YCoordinate(geometryValue: DbExpression) -> DbFunctionExpression: ...
