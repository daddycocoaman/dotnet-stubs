__all__ = ['Spatial']
from typing import Tuple, Set, Iterable, List


class DbExpressionBuilder(Object):
    def Aggregate(function: EdmFunction, argument: DbExpression) -> DbFunctionAggregate: ...
    def AggregateDistinct(function: EdmFunction, argument: DbExpression) -> DbFunctionAggregate: ...
    @overload
    def All(input: DbExpressionBinding, predicate: DbExpression) -> DbQuantifierExpression: ...
    @overload
    def All(source: DbExpression, predicate: Func) -> DbQuantifierExpression: ...
    def And(left: DbExpression, right: DbExpression) -> DbAndExpression: ...
    @overload
    def Any(source: DbExpression) -> DbExpression: ...
    @overload
    def Any(source: DbExpression, predicate: Func) -> DbQuantifierExpression: ...
    @overload
    def Any(input: DbExpressionBinding, predicate: DbExpression) -> DbQuantifierExpression: ...
    @overload
    def As(value: DbExpression, alias: str) -> KeyValuePair: ...
    @overload
    def As(value: DbAggregate, alias: str) -> KeyValuePair: ...
    def Bind(input: DbExpression) -> DbExpressionBinding: ...
    def BindAs(input: DbExpression, varName: str) -> DbExpressionBinding: ...
    def Case(whenExpressions: Iterable[DbExpression], thenExpressions: Iterable[DbExpression], elseExpression: DbExpression) -> DbCaseExpression: ...
    def CastTo(argument: DbExpression, toType: TypeUsage) -> DbCastExpression: ...
    @overload
    def Constant(value: Object) -> DbConstantExpression: ...
    @overload
    def Constant(constantType: TypeUsage, value: Object) -> DbConstantExpression: ...
    @overload
    def CreateRef(entitySet: EntitySet, keyValues: Set(DbExpression)) -> DbRefExpression: ...
    @overload
    def CreateRef(entitySet: EntitySet, keyValues: Iterable[DbExpression]) -> DbRefExpression: ...
    @overload
    def CreateRef(entitySet: EntitySet, entityType: EntityType, keyValues: Iterable[DbExpression]) -> DbRefExpression: ...
    @overload
    def CreateRef(entitySet: EntitySet, entityType: EntityType, keyValues: Set(DbExpression)) -> DbRefExpression: ...
    @overload
    def CrossApply(source: DbExpression, apply: Func) -> DbApplyExpression: ...
    @overload
    def CrossApply(input: DbExpressionBinding, apply: DbExpressionBinding) -> DbApplyExpression: ...
    def CrossJoin(inputs: Iterable[DbExpressionBinding]) -> DbCrossJoinExpression: ...
    def Deref(argument: DbExpression) -> DbDerefExpression: ...
    def Distinct(argument: DbExpression) -> DbDistinctExpression: ...
    def Divide(left: DbExpression, right: DbExpression) -> DbArithmeticExpression: ...
    def Element(argument: DbExpression) -> DbElementExpression: ...
    def Equal(left: DbExpression, right: DbExpression) -> DbComparisonExpression: ...
    def Except(left: DbExpression, right: DbExpression) -> DbExceptExpression: ...
    def Exists(argument: DbExpression) -> DbExpression: ...
    def Filter(input: DbExpressionBinding, predicate: DbExpression) -> DbFilterExpression: ...
    @overload
    def FullOuterJoin(left: DbExpression, right: DbExpression, joinCondition: Func`3) -> DbJoinExpression: ...
    @overload
    def FullOuterJoin(left: DbExpressionBinding, right: DbExpressionBinding, joinCondition: DbExpression) -> DbJoinExpression: ...
    @property
    def False() -> DbConstantExpression: ...
    @property
    def True() -> DbConstantExpression: ...
    def GetEntityRef(argument: DbExpression) -> DbEntityRefExpression: ...
    def GetRefKey(argument: DbExpression) -> DbRefKeyExpression: ...
    def GreaterThan(left: DbExpression, right: DbExpression) -> DbComparisonExpression: ...
    def GreaterThanOrEqual(left: DbExpression, right: DbExpression) -> DbComparisonExpression: ...
    def GroupBind(input: DbExpression) -> DbGroupExpressionBinding: ...
    def GroupBindAs(input: DbExpression, varName: str, groupVarName: str) -> DbGroupExpressionBinding: ...
    def GroupBy(input: DbGroupExpressionBinding, keys: Iterable[KeyValuePair], aggregates: Iterable[KeyValuePair]) -> DbGroupByExpression: ...
    @overload
    def InnerJoin(left: DbExpressionBinding, right: DbExpressionBinding, joinCondition: DbExpression) -> DbJoinExpression: ...
    @overload
    def InnerJoin(left: DbExpression, right: DbExpression, joinCondition: Func`3) -> DbJoinExpression: ...
    def Intersect(left: DbExpression, right: DbExpression) -> DbIntersectExpression: ...
    @overload
    def Invoke(lambda: DbLambda, arguments: Set(DbExpression)) -> DbLambdaExpression: ...
    @overload
    def Invoke(lambda: DbLambda, arguments: Iterable[DbExpression]) -> DbLambdaExpression: ...
    @overload
    def Invoke(function: EdmFunction, arguments: Set(DbExpression)) -> DbFunctionExpression: ...
    @overload
    def Invoke(function: EdmFunction, arguments: Iterable[DbExpression]) -> DbFunctionExpression: ...
    def IsEmpty(argument: DbExpression) -> DbIsEmptyExpression: ...
    def IsNull(argument: DbExpression) -> DbIsNullExpression: ...
    def IsOf(argument: DbExpression, type: TypeUsage) -> DbIsOfExpression: ...
    def IsOfOnly(argument: DbExpression, type: TypeUsage) -> DbIsOfExpression: ...
    @overload
    def Join(outer: DbExpression, inner: DbExpression, outerKey: Func, innerKey: Func) -> DbJoinExpression: ...
    @overload
    def Join(outer: DbExpression, inner: DbExpression, outerKey: Func, innerKey: Func, selector: Func`3) -> DbProjectExpression: ...
    @overload
    def Lambda(body: DbExpression, variables: Set(DbVariableReferenceExpression)) -> DbLambda: ...
    @overload
    def Lambda(body: DbExpression, variables: Iterable[DbVariableReferenceExpression]) -> DbLambda: ...
    @overload
    def LeftOuterJoin(left: DbExpression, right: DbExpression, joinCondition: Func`3) -> DbJoinExpression: ...
    @overload
    def LeftOuterJoin(left: DbExpressionBinding, right: DbExpressionBinding, joinCondition: DbExpression) -> DbJoinExpression: ...
    def LessThan(left: DbExpression, right: DbExpression) -> DbComparisonExpression: ...
    def LessThanOrEqual(left: DbExpression, right: DbExpression) -> DbComparisonExpression: ...
    @overload
    def Like(argument: DbExpression, pattern: DbExpression) -> DbLikeExpression: ...
    @overload
    def Like(argument: DbExpression, pattern: DbExpression, escape: DbExpression) -> DbLikeExpression: ...
    def Limit(argument: DbExpression, count: DbExpression) -> DbLimitExpression: ...
    def Minus(left: DbExpression, right: DbExpression) -> DbArithmeticExpression: ...
    def Modulo(left: DbExpression, right: DbExpression) -> DbArithmeticExpression: ...
    def Multiply(left: DbExpression, right: DbExpression) -> DbArithmeticExpression: ...
    @overload
    def Navigate(navigateFrom: DbExpression, fromEnd: RelationshipEndMember, toEnd: RelationshipEndMember) -> DbRelationshipNavigationExpression: ...
    @overload
    def Navigate(type: RelationshipType, fromEndName: str, toEndName: str, navigateFrom: DbExpression) -> DbRelationshipNavigationExpression: ...
    def Negate(argument: DbExpression) -> DbArithmeticExpression: ...
    @overload
    def New(instanceType: TypeUsage, arguments: Set(DbExpression)) -> DbNewInstanceExpression: ...
    @overload
    def New(instanceType: TypeUsage, arguments: Iterable[DbExpression]) -> DbNewInstanceExpression: ...
    @overload
    def NewCollection(elements: Set(DbExpression)) -> DbNewInstanceExpression: ...
    @overload
    def NewCollection(elements: Iterable[DbExpression]) -> DbNewInstanceExpression: ...
    def NewEmptyCollection(collectionType: TypeUsage) -> DbNewInstanceExpression: ...
    def NewRow(columnValues: Iterable[KeyValuePair]) -> DbNewInstanceExpression: ...
    def Not(argument: DbExpression) -> DbNotExpression: ...
    def NotEqual(left: DbExpression, right: DbExpression) -> DbComparisonExpression: ...
    def Null(nullType: TypeUsage) -> DbNullExpression: ...
    def OfType(argument: DbExpression, type: TypeUsage) -> DbOfTypeExpression: ...
    def OfTypeOnly(argument: DbExpression, type: TypeUsage) -> DbOfTypeExpression: ...
    def Or(left: DbExpression, right: DbExpression) -> DbOrExpression: ...
    @overload
    def OrderBy(source: DbExpression, sortKey: Func) -> DbSortExpression: ...
    @overload
    def OrderBy(source: DbExpression, sortKey: Func, collation: str) -> DbSortExpression: ...
    @overload
    def OrderByDescending(source: DbExpression, sortKey: Func) -> DbSortExpression: ...
    @overload
    def OrderByDescending(source: DbExpression, sortKey: Func, collation: str) -> DbSortExpression: ...
    @overload
    def OuterApply(input: DbExpressionBinding, apply: DbExpressionBinding) -> DbApplyExpression: ...
    @overload
    def OuterApply(source: DbExpression, apply: Func) -> DbApplyExpression: ...
    def Parameter(type: TypeUsage, name: str) -> DbParameterReferenceExpression: ...
    def Plus(left: DbExpression, right: DbExpression) -> DbArithmeticExpression: ...
    def Project(input: DbExpressionBinding, projection: DbExpression) -> DbProjectExpression: ...
    @overload
    def Property(instance: DbExpression, propertyMetadata: EdmProperty) -> DbPropertyExpression: ...
    @overload
    def Property(instance: DbExpression, relationshipEnd: RelationshipEndMember) -> DbPropertyExpression: ...
    @overload
    def Property(instance: DbExpression, propertyName: str) -> DbPropertyExpression: ...
    @overload
    def Property(instance: DbExpression, navigationProperty: NavigationProperty) -> DbPropertyExpression: ...
    @overload
    def RefFromKey(entitySet: EntitySet, keyRow: DbExpression) -> DbRefExpression: ...
    @overload
    def RefFromKey(entitySet: EntitySet, keyRow: DbExpression, entityType: EntityType) -> DbRefExpression: ...
    def Scan(targetSet: EntitySetBase) -> DbScanExpression: ...
    def Select(source: DbExpression, projection: Func) -> DbProjectExpression: ...
    @overload
    def SelectMany(source: DbExpression, apply: Func) -> DbProjectExpression: ...
    @overload
    def SelectMany(source: DbExpression, apply: Func, selector: Func`3) -> DbProjectExpression: ...
    @overload
    def Skip(argument: DbSortExpression, count: DbExpression) -> DbSkipExpression: ...
    @overload
    def Skip(input: DbExpressionBinding, sortOrder: Iterable[DbSortClause], count: DbExpression) -> DbSkipExpression: ...
    def Sort(input: DbExpressionBinding, sortOrder: Iterable[DbSortClause]) -> DbSortExpression: ...
    def Take(argument: DbExpression, count: DbExpression) -> DbLimitExpression: ...
    @overload
    def ThenBy(source: DbSortExpression, sortKey: Func) -> DbSortExpression: ...
    @overload
    def ThenBy(source: DbSortExpression, sortKey: Func, collation: str) -> DbSortExpression: ...
    @overload
    def ThenByDescending(source: DbSortExpression, sortKey: Func) -> DbSortExpression: ...
    @overload
    def ThenByDescending(source: DbSortExpression, sortKey: Func, collation: str) -> DbSortExpression: ...
    @overload
    def ToSortClause(key: DbExpression) -> DbSortClause: ...
    @overload
    def ToSortClause(key: DbExpression, collation: str) -> DbSortClause: ...
    @overload
    def ToSortClauseDescending(key: DbExpression) -> DbSortClause: ...
    @overload
    def ToSortClauseDescending(key: DbExpression, collation: str) -> DbSortClause: ...
    def TreatAs(argument: DbExpression, treatType: TypeUsage) -> DbTreatExpression: ...
    def UnaryMinus(argument: DbExpression) -> DbArithmeticExpression: ...
    def Union(left: DbExpression, right: DbExpression) -> DbExpression: ...
    def UnionAll(left: DbExpression, right: DbExpression) -> DbUnionAllExpression: ...
    def Variable(type: TypeUsage, name: str) -> DbVariableReferenceExpression: ...
    def Where(source: DbExpression, predicate: Func) -> DbFilterExpression: ...


class EdmFunctions(Object):
    def Abs(value: DbExpression) -> DbFunctionExpression: ...
    def AddDays(dateValue: DbExpression, addValue: DbExpression) -> DbFunctionExpression: ...
    def AddHours(timeValue: DbExpression, addValue: DbExpression) -> DbFunctionExpression: ...
    def AddMicroseconds(timeValue: DbExpression, addValue: DbExpression) -> DbFunctionExpression: ...
    def AddMilliseconds(timeValue: DbExpression, addValue: DbExpression) -> DbFunctionExpression: ...
    def AddMinutes(timeValue: DbExpression, addValue: DbExpression) -> DbFunctionExpression: ...
    def AddMonths(dateValue: DbExpression, addValue: DbExpression) -> DbFunctionExpression: ...
    def AddNanoseconds(timeValue: DbExpression, addValue: DbExpression) -> DbFunctionExpression: ...
    def AddSeconds(timeValue: DbExpression, addValue: DbExpression) -> DbFunctionExpression: ...
    def AddYears(dateValue: DbExpression, addValue: DbExpression) -> DbFunctionExpression: ...
    def Average(collection: DbExpression) -> DbFunctionExpression: ...
    def BitwiseAnd(value1: DbExpression, value2: DbExpression) -> DbFunctionExpression: ...
    def BitwiseNot(value: DbExpression) -> DbFunctionExpression: ...
    def BitwiseOr(value1: DbExpression, value2: DbExpression) -> DbFunctionExpression: ...
    def BitwiseXor(value1: DbExpression, value2: DbExpression) -> DbFunctionExpression: ...
    def Ceiling(value: DbExpression) -> DbFunctionExpression: ...
    def Concat(string1: DbExpression, string2: DbExpression) -> DbFunctionExpression: ...
    def Contains(searchedString: DbExpression, searchedForString: DbExpression) -> DbExpression: ...
    def Count(collection: DbExpression) -> DbFunctionExpression: ...
    def CreateDateTime(year: DbExpression, month: DbExpression, day: DbExpression, hour: DbExpression, minute: DbExpression, second: DbExpression) -> DbFunctionExpression: ...
    def CreateDateTimeOffset(year: DbExpression, month: DbExpression, day: DbExpression, hour: DbExpression, minute: DbExpression, second: DbExpression, timeZoneOffset: DbExpression) -> DbFunctionExpression: ...
    def CreateTime(hour: DbExpression, minute: DbExpression, second: DbExpression) -> DbFunctionExpression: ...
    def CurrentDateTime() -> DbFunctionExpression: ...
    def CurrentDateTimeOffset() -> DbFunctionExpression: ...
    def CurrentUtcDateTime() -> DbFunctionExpression: ...
    def Day(dateValue: DbExpression) -> DbFunctionExpression: ...
    def DayOfYear(dateValue: DbExpression) -> DbFunctionExpression: ...
    def DiffDays(dateValue1: DbExpression, dateValue2: DbExpression) -> DbFunctionExpression: ...
    def DiffHours(timeValue1: DbExpression, timeValue2: DbExpression) -> DbFunctionExpression: ...
    def DiffMicroseconds(timeValue1: DbExpression, timeValue2: DbExpression) -> DbFunctionExpression: ...
    def DiffMilliseconds(timeValue1: DbExpression, timeValue2: DbExpression) -> DbFunctionExpression: ...
    def DiffMinutes(timeValue1: DbExpression, timeValue2: DbExpression) -> DbFunctionExpression: ...
    def DiffMonths(dateValue1: DbExpression, dateValue2: DbExpression) -> DbFunctionExpression: ...
    def DiffNanoseconds(timeValue1: DbExpression, timeValue2: DbExpression) -> DbFunctionExpression: ...
    def DiffSeconds(timeValue1: DbExpression, timeValue2: DbExpression) -> DbFunctionExpression: ...
    def DiffYears(dateValue1: DbExpression, dateValue2: DbExpression) -> DbFunctionExpression: ...
    def EndsWith(stringArgument: DbExpression, suffix: DbExpression) -> DbFunctionExpression: ...
    def Floor(value: DbExpression) -> DbFunctionExpression: ...
    def GetTotalOffsetMinutes(dateTimeOffsetArgument: DbExpression) -> DbFunctionExpression: ...
    def Hour(timeValue: DbExpression) -> DbFunctionExpression: ...
    def IndexOf(searchString: DbExpression, stringToFind: DbExpression) -> DbFunctionExpression: ...
    def Left(stringArgument: DbExpression, length: DbExpression) -> DbFunctionExpression: ...
    def Length(stringArgument: DbExpression) -> DbFunctionExpression: ...
    def LongCount(collection: DbExpression) -> DbFunctionExpression: ...
    def Max(collection: DbExpression) -> DbFunctionExpression: ...
    def Millisecond(timeValue: DbExpression) -> DbFunctionExpression: ...
    def Min(collection: DbExpression) -> DbFunctionExpression: ...
    def Minute(timeValue: DbExpression) -> DbFunctionExpression: ...
    def Month(dateValue: DbExpression) -> DbFunctionExpression: ...
    def NewGuid() -> DbFunctionExpression: ...
    def Power(baseArgument: DbExpression, exponent: DbExpression) -> DbFunctionExpression: ...
    def Replace(stringArgument: DbExpression, toReplace: DbExpression, replacement: DbExpression) -> DbFunctionExpression: ...
    def Reverse(stringArgument: DbExpression) -> DbFunctionExpression: ...
    def Right(stringArgument: DbExpression, length: DbExpression) -> DbFunctionExpression: ...
    @overload
    def Round(value: DbExpression) -> DbFunctionExpression: ...
    @overload
    def Round(value: DbExpression, digits: DbExpression) -> DbFunctionExpression: ...
    def Second(timeValue: DbExpression) -> DbFunctionExpression: ...
    def StartsWith(stringArgument: DbExpression, prefix: DbExpression) -> DbFunctionExpression: ...
    def StDev(collection: DbExpression) -> DbFunctionExpression: ...
    def StDevP(collection: DbExpression) -> DbFunctionExpression: ...
    def Substring(stringArgument: DbExpression, start: DbExpression, length: DbExpression) -> DbFunctionExpression: ...
    def Sum(collection: DbExpression) -> DbFunctionExpression: ...
    def ToLower(stringArgument: DbExpression) -> DbFunctionExpression: ...
    def ToUpper(stringArgument: DbExpression) -> DbFunctionExpression: ...
    def Trim(stringArgument: DbExpression) -> DbFunctionExpression: ...
    def TrimEnd(stringArgument: DbExpression) -> DbFunctionExpression: ...
    def TrimStart(stringArgument: DbExpression) -> DbFunctionExpression: ...
    def Truncate(value: DbExpression, digits: DbExpression) -> DbFunctionExpression: ...
    def TruncateTime(dateValue: DbExpression) -> DbFunctionExpression: ...
    def Var(collection: DbExpression) -> DbFunctionExpression: ...
    def VarP(collection: DbExpression) -> DbFunctionExpression: ...
    def Year(dateValue: DbExpression) -> DbFunctionExpression: ...


class Row(Object):
    def __init__(self, columnValue: KeyValuePair, columnValues: Set(KeyValuePair)): ...
    def op_Implicit(row: Row) -> DbExpression: ...
    def ToExpression(self) -> DbNewInstanceExpression: ...
