__all__ = ['ExpressionBuilder']
from typing import Tuple, Set, Iterable, List


class DbAggregate(Object):
    @property
    def Arguments(self) -> List[DbExpression]: ...
    @property
    def ResultType(self) -> TypeUsage: ...


class DbAndExpression(DbBinaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbApplyExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Apply(self) -> DbExpressionBinding: ...
    @property
    def Input(self) -> DbExpressionBinding: ...


class DbArithmeticExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Arguments(self) -> List[DbExpression]: ...


class DbBinaryExpression(DbExpression):
    @property
    def Left(self) -> DbExpression: ...
    @property
    def Right(self) -> DbExpression: ...


class DbCaseExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Else(self) -> DbExpression: ...
    @property
    def Then(self) -> List[DbExpression]: ...
    @property
    def When(self) -> List[DbExpression]: ...


class DbCastExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbCommandTree(Object):
    @property
    def Parameters(self) -> Iterable[KeyValuePair]: ...


class DbComparisonExpression(DbBinaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbConstantExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Value(self) -> Object: ...


class DbCrossJoinExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Inputs(self) -> List[DbExpressionBinding]: ...


class DbDeleteCommandTree(DbModificationCommandTree):
    @property
    def Predicate(self) -> DbExpression: ...


class DbDerefExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbDistinctExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbElementExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbEntityRefExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbExceptExpression(DbBinaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbExpression(Object):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    def Equals(self, obj: Object) -> bool: ...
    def FromBinary(value: Set(Byte)) -> DbExpression: ...
    def FromBoolean(value: Nullable) -> DbExpression: ...
    def FromByte(value: Nullable) -> DbExpression: ...
    def FromDateTime(value: Nullable) -> DbExpression: ...
    def FromDateTimeOffset(value: Nullable) -> DbExpression: ...
    def FromDecimal(value: Nullable) -> DbExpression: ...
    def FromDouble(value: Nullable) -> DbExpression: ...
    def FromGeography(value: DbGeography) -> DbExpression: ...
    def FromGeometry(value: DbGeometry) -> DbExpression: ...
    def FromGuid(value: Nullable) -> DbExpression: ...
    def FromInt16(value: Nullable) -> DbExpression: ...
    def FromInt32(value: Nullable) -> DbExpression: ...
    def FromInt64(value: Nullable) -> DbExpression: ...
    def FromSingle(value: Nullable) -> DbExpression: ...
    def FromString(value: str) -> DbExpression: ...
    @property
    def ExpressionKind(self) -> DbExpressionKind: ...
    @property
    def ResultType(self) -> TypeUsage: ...
    def GetHashCode(self) -> int: ...
    @overload
    def op_Implicit(value: str) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...
    @overload
    def op_Implicit(value: Set(Byte)) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...
    @overload
    def op_Implicit(value: DbGeometry) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...
    @overload
    def op_Implicit(value: DbGeography) -> DbExpression: ...
    @overload
    def op_Implicit(value: Nullable) -> DbExpression: ...


class DbExpressionBinding(Object):
    @property
    def Expression(self) -> DbExpression: ...
    @property
    def Variable(self) -> DbVariableReferenceExpression: ...
    @property
    def VariableName(self) -> str: ...
    @property
    def VariableType(self) -> TypeUsage: ...


class DbExpressionKind:
    All = 0
    And = 1
    Any = 2
    Case = 3
    Cast = 4
    Constant = 5
    CrossApply = 6
    CrossJoin = 7
    Deref = 8
    Distinct = 9
    Divide = 10
    Element = 11
    EntityRef = 12
    Equals = 13
    Except = 14
    Filter = 15
    FullOuterJoin = 16
    Function = 17
    GreaterThan = 18
    GreaterThanOrEquals = 19
    GroupBy = 20
    InnerJoin = 21
    Intersect = 22
    IsEmpty = 23
    IsNull = 24
    IsOf = 25
    IsOfOnly = 26
    LeftOuterJoin = 27
    LessThan = 28
    LessThanOrEquals = 29
    Like = 30
    Limit = 31
    Minus = 32
    Modulo = 33
    Multiply = 34
    NewInstance = 35
    Not = 36
    NotEquals = 37
    Null = 38
    OfType = 39
    OfTypeOnly = 40
    Or = 41
    OuterApply = 42
    ParameterReference = 43
    Plus = 44
    Project = 45
    Property = 46
    Ref = 47
    RefKey = 48
    RelationshipNavigation = 49
    Scan = 50
    Skip = 51
    Sort = 52
    Treat = 53
    UnaryMinus = 54
    UnionAll = 55
    VariableReference = 56
    Lambda = 57


class DbExpressionVisitor(Object):
    @overload
    def Visit(self, expression: DbUnionAllExpression) -> None: ...
    @overload
    def Visit(self, expression: DbLimitExpression) -> None: ...
    @overload
    def Visit(self, expression: DbNewInstanceExpression) -> None: ...
    @overload
    def Visit(self, expression: DbNotExpression) -> None: ...
    @overload
    def Visit(self, expression: DbNullExpression) -> None: ...
    @overload
    def Visit(self, expression: DbOfTypeExpression) -> None: ...
    @overload
    def Visit(self, expression: DbOrExpression) -> None: ...
    @overload
    def Visit(self, expression: DbParameterReferenceExpression) -> None: ...
    @overload
    def Visit(self, expression: DbVariableReferenceExpression) -> None: ...
    @overload
    def Visit(self, expression: DbProjectExpression) -> None: ...
    @overload
    def Visit(self, expression: DbLikeExpression) -> None: ...
    @overload
    def Visit(self, expression: DbRefExpression) -> None: ...
    @overload
    def Visit(self, expression: DbRelationshipNavigationExpression) -> None: ...
    @overload
    def Visit(self, expression: DbScanExpression) -> None: ...
    @overload
    def Visit(self, expression: DbSkipExpression) -> None: ...
    @overload
    def Visit(self, expression: DbSortExpression) -> None: ...
    @overload
    def Visit(self, expression: DbTreatExpression) -> None: ...
    @overload
    def Visit(self, expression: DbPropertyExpression) -> None: ...
    @overload
    def Visit(self, expression: DbQuantifierExpression) -> None: ...
    @overload
    def Visit(self, expression: DbLambdaExpression) -> None: ...
    @overload
    def Visit(self, expression: DbIsOfExpression) -> None: ...
    @overload
    def Visit(self, expression: DbAndExpression) -> None: ...
    @overload
    def Visit(self, expression: DbApplyExpression) -> None: ...
    @overload
    def Visit(self, expression: DbArithmeticExpression) -> None: ...
    @overload
    def Visit(self, expression: DbCaseExpression) -> None: ...
    @overload
    def Visit(self, expression: DbCastExpression) -> None: ...
    @overload
    def Visit(self, expression: DbComparisonExpression) -> None: ...
    @overload
    def Visit(self, expression: DbConstantExpression) -> None: ...
    @overload
    def Visit(self, expression: DbCrossJoinExpression) -> None: ...
    @overload
    def Visit(self, expression: DbDerefExpression) -> None: ...
    @overload
    def Visit(self, expression: DbJoinExpression) -> None: ...
    @overload
    def Visit(self, expression: DbDistinctExpression) -> None: ...
    @overload
    def Visit(self, expression: DbExceptExpression) -> None: ...
    @overload
    def Visit(self, expression: DbFilterExpression) -> None: ...
    @overload
    def Visit(self, expression: DbFunctionExpression) -> None: ...
    @overload
    def Visit(self, expression: DbEntityRefExpression) -> None: ...
    @overload
    def Visit(self, expression: DbRefKeyExpression) -> None: ...
    @overload
    def Visit(self, expression: DbGroupByExpression) -> None: ...
    @overload
    def Visit(self, expression: DbIntersectExpression) -> None: ...
    @overload
    def Visit(self, expression: DbIsEmptyExpression) -> None: ...
    @overload
    def Visit(self, expression: DbIsNullExpression) -> None: ...
    @overload
    def Visit(self, expression: DbElementExpression) -> None: ...
    @overload
    def Visit(self, expression: DbExpression) -> None: ...




class DbFilterExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Input(self) -> DbExpressionBinding: ...
    @property
    def Predicate(self) -> DbExpression: ...


class DbFunctionAggregate(DbAggregate):
    @property
    def Distinct(self) -> bool: ...
    @property
    def Function(self) -> EdmFunction: ...


class DbFunctionCommandTree(DbCommandTree):
    @property
    def EdmFunction(self) -> EdmFunction: ...
    @property
    def ResultType(self) -> TypeUsage: ...


class DbFunctionExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Arguments(self) -> List[DbExpression]: ...
    @property
    def Function(self) -> EdmFunction: ...


class DbGroupAggregate(DbAggregate):
    pass


class DbGroupByExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Aggregates(self) -> List[DbAggregate]: ...
    @property
    def Input(self) -> DbGroupExpressionBinding: ...
    @property
    def Keys(self) -> List[DbExpression]: ...


class DbGroupExpressionBinding(Object):
    @property
    def Expression(self) -> DbExpression: ...
    @property
    def GroupAggregate(self) -> DbGroupAggregate: ...
    @property
    def GroupVariable(self) -> DbVariableReferenceExpression: ...
    @property
    def GroupVariableName(self) -> str: ...
    @property
    def GroupVariableType(self) -> TypeUsage: ...
    @property
    def Variable(self) -> DbVariableReferenceExpression: ...
    @property
    def VariableName(self) -> str: ...
    @property
    def VariableType(self) -> TypeUsage: ...


class DbInsertCommandTree(DbModificationCommandTree):
    @property
    def Returning(self) -> DbExpression: ...
    @property
    def SetClauses(self) -> List[DbModificationClause]: ...


class DbIntersectExpression(DbBinaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbIsEmptyExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbIsNullExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbIsOfExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def OfType(self) -> TypeUsage: ...


class DbJoinExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def JoinCondition(self) -> DbExpression: ...
    @property
    def Left(self) -> DbExpressionBinding: ...
    @property
    def Right(self) -> DbExpressionBinding: ...


class DbLambda(Object):
    @overload
    def Create(body: DbExpression, variables: Iterable[DbVariableReferenceExpression]) -> DbLambda: ...
    @overload
    def Create(body: DbExpression, variables: Set(DbVariableReferenceExpression)) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, lambdaFunction: Func) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, lambdaFunction: Func`3) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, lambdaFunction: Func`4) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, lambdaFunction: Func`5) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, lambdaFunction: Func`6) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, lambdaFunction: Func`7) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, argument7Type: TypeUsage, lambdaFunction: Func`8) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, argument7Type: TypeUsage, argument8Type: TypeUsage, lambdaFunction: Func`9) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, argument7Type: TypeUsage, argument8Type: TypeUsage, argument9Type: TypeUsage, lambdaFunction: Func`10) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, argument7Type: TypeUsage, argument8Type: TypeUsage, argument9Type: TypeUsage, argument10Type: TypeUsage, lambdaFunction: Func`11) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, argument7Type: TypeUsage, argument8Type: TypeUsage, argument9Type: TypeUsage, argument10Type: TypeUsage, argument11Type: TypeUsage, lambdaFunction: Func`12) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, argument7Type: TypeUsage, argument8Type: TypeUsage, argument9Type: TypeUsage, argument10Type: TypeUsage, argument11Type: TypeUsage, argument12Type: TypeUsage, lambdaFunction: Func`13) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, argument7Type: TypeUsage, argument8Type: TypeUsage, argument9Type: TypeUsage, argument10Type: TypeUsage, argument11Type: TypeUsage, argument12Type: TypeUsage, argument13Type: TypeUsage, lambdaFunction: Func`14) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, argument7Type: TypeUsage, argument8Type: TypeUsage, argument9Type: TypeUsage, argument10Type: TypeUsage, argument11Type: TypeUsage, argument12Type: TypeUsage, argument13Type: TypeUsage, argument14Type: TypeUsage, lambdaFunction: Func`15) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, argument7Type: TypeUsage, argument8Type: TypeUsage, argument9Type: TypeUsage, argument10Type: TypeUsage, argument11Type: TypeUsage, argument12Type: TypeUsage, argument13Type: TypeUsage, argument14Type: TypeUsage, argument15Type: TypeUsage, lambdaFunction: Func`16) -> DbLambda: ...
    @overload
    def Create(argument1Type: TypeUsage, argument2Type: TypeUsage, argument3Type: TypeUsage, argument4Type: TypeUsage, argument5Type: TypeUsage, argument6Type: TypeUsage, argument7Type: TypeUsage, argument8Type: TypeUsage, argument9Type: TypeUsage, argument10Type: TypeUsage, argument11Type: TypeUsage, argument12Type: TypeUsage, argument13Type: TypeUsage, argument14Type: TypeUsage, argument15Type: TypeUsage, argument16Type: TypeUsage, lambdaFunction: Func`17) -> DbLambda: ...
    @property
    def Body(self) -> DbExpression: ...
    @property
    def Variables(self) -> List[DbVariableReferenceExpression]: ...


class DbLambdaExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Arguments(self) -> List[DbExpression]: ...
    @property
    def Lambda(self) -> DbLambda: ...


class DbLikeExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Argument(self) -> DbExpression: ...
    @property
    def Escape(self) -> DbExpression: ...
    @property
    def Pattern(self) -> DbExpression: ...


class DbLimitExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Argument(self) -> DbExpression: ...
    @property
    def Limit(self) -> DbExpression: ...
    @property
    def WithTies(self) -> bool: ...


class DbModificationClause(Object):
    pass


class DbModificationCommandTree(DbCommandTree):
    @property
    def Target(self) -> DbExpressionBinding: ...


class DbNewInstanceExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Arguments(self) -> List[DbExpression]: ...


class DbNotExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbNullExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbOfTypeExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def OfType(self) -> TypeUsage: ...


class DbOrExpression(DbBinaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbParameterReferenceExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def ParameterName(self) -> str: ...


class DbProjectExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Input(self) -> DbExpressionBinding: ...
    @property
    def Projection(self) -> DbExpression: ...


class DbPropertyExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Instance(self) -> DbExpression: ...
    @property
    def Property(self) -> EdmMember: ...
    def op_Implicit(value: DbPropertyExpression) -> KeyValuePair: ...
    def ToKeyValuePair(self) -> KeyValuePair: ...


class DbQuantifierExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Input(self) -> DbExpressionBinding: ...
    @property
    def Predicate(self) -> DbExpression: ...


class DbQueryCommandTree(DbCommandTree):
    @property
    def Query(self) -> DbExpression: ...


class DbRefExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def EntitySet(self) -> EntitySet: ...


class DbRefKeyExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbRelationshipNavigationExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def NavigateFrom(self) -> RelationshipEndMember: ...
    @property
    def NavigateTo(self) -> RelationshipEndMember: ...
    @property
    def NavigationSource(self) -> DbExpression: ...
    @property
    def Relationship(self) -> RelationshipType: ...


class DbScanExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Target(self) -> EntitySetBase: ...


class DbSetClause(DbModificationClause):
    @property
    def Property(self) -> DbExpression: ...
    @property
    def Value(self) -> DbExpression: ...


class DbSkipExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Count(self) -> DbExpression: ...
    @property
    def Input(self) -> DbExpressionBinding: ...
    @property
    def SortOrder(self) -> List[DbSortClause]: ...


class DbSortClause(Object):
    @property
    def Ascending(self) -> bool: ...
    @property
    def Collation(self) -> str: ...
    @property
    def Expression(self) -> DbExpression: ...


class DbSortExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def Input(self) -> DbExpressionBinding: ...
    @property
    def SortOrder(self) -> List[DbSortClause]: ...


class DbTreatExpression(DbUnaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbUnaryExpression(DbExpression):
    @property
    def Argument(self) -> DbExpression: ...


class DbUnionAllExpression(DbBinaryExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...


class DbUpdateCommandTree(DbModificationCommandTree):
    @property
    def Predicate(self) -> DbExpression: ...
    @property
    def Returning(self) -> DbExpression: ...
    @property
    def SetClauses(self) -> List[DbModificationClause]: ...


class DbVariableReferenceExpression(DbExpression):
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> None: ...
    @overload
    def Accept(self, visitor: DbExpressionVisitor) -> TResultType: ...
    @property
    def VariableName(self) -> str: ...


class DefaultExpressionVisitor:
    @overload
    def Visit(self, expression: DbSortExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbCaseExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbOfTypeExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbNewInstanceExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbRefExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbRelationshipNavigationExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbDerefExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbRefKeyExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbQuantifierExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbEntityRefExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbCastExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbProjectExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbCrossJoinExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbJoinExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbApplyExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbGroupByExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbSkipExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbScanExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbFilterExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbIsOfExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbExceptExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbConstantExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbNullExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbVariableReferenceExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbParameterReferenceExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbFunctionExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbLambdaExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbPropertyExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbComparisonExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbLikeExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbTreatExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbLimitExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbArithmeticExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbAndExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbOrExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbNotExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbDistinctExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbElementExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbIsEmptyExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbUnionAllExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbIntersectExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbIsNullExpression) -> DbExpression: ...
    @overload
    def Visit(self, expression: DbExpression) -> DbExpression: ...
