__all__ = ['CommandTrees','EntitySql']
from typing import Tuple, Set, Iterable, List


class DataRecordInfo(Object):
    def __init__(self, metadata: TypeUsage, memberInfo: Iterable[EdmMember]): ...
    @property
    def FieldMetadata(self) -> ReadOnlyCollection: ...
    @property
    def RecordType(self) -> TypeUsage: ...


class DbCommandDefinition(Object):
    def CreateCommand(self) -> DbCommand: ...


class DbProviderManifest(Object):
    def EscapeLikeArgument(self, argument: str) -> str: ...
    @property
    def NamespaceName(self) -> str: ...
    def GetEdmType(self, storeType: TypeUsage) -> TypeUsage: ...
    def GetFacetDescriptions(self, edmType: EdmType) -> ReadOnlyCollection: ...
    def GetInformation(self, informationType: str) -> XmlReader: ...
    def GetStoreFunctions(self) -> ReadOnlyCollection: ...
    def GetStoreType(self, edmType: TypeUsage) -> TypeUsage: ...
    def GetStoreTypes(self) -> ReadOnlyCollection: ...
    def SupportsEscapingLikeArgument(self) -> Tuple[bool, Char]: ...


class DbProviderServices(Object):
    @overload
    def CreateCommandDefinition(self, commandTree: DbCommandTree) -> DbCommandDefinition: ...
    @overload
    def CreateCommandDefinition(self, prototype: DbCommand) -> DbCommandDefinition: ...
    @overload
    def CreateCommandDefinition(self, providerManifest: DbProviderManifest, commandTree: DbCommandTree) -> DbCommandDefinition: ...
    def CreateDatabase(self, connection: DbConnection, commandTimeout: Nullable, storeItemCollection: StoreItemCollection) -> None: ...
    def CreateDatabaseScript(self, providerManifestToken: str, storeItemCollection: StoreItemCollection) -> str: ...
    def DatabaseExists(self, connection: DbConnection, commandTimeout: Nullable, storeItemCollection: StoreItemCollection) -> bool: ...
    def DeleteDatabase(self, connection: DbConnection, commandTimeout: Nullable, storeItemCollection: StoreItemCollection) -> None: ...
    def GetProviderFactory(connection: DbConnection) -> DbProviderFactory: ...
    def GetProviderManifest(self, manifestToken: str) -> DbProviderManifest: ...
    def GetProviderManifestToken(self, connection: DbConnection) -> str: ...
    def GetProviderServices(connection: DbConnection) -> DbProviderServices: ...
    def GetSpatialDataReader(self, fromReader: DbDataReader, manifestToken: str) -> DbSpatialDataReader: ...
    def GetSpatialServices(self, manifestToken: str) -> DbSpatialServices: ...


class DbXmlEnabledProviderManifest(DbProviderManifest):
    @property
    def NamespaceName(self) -> str: ...
    def GetFacetDescriptions(self, type: EdmType) -> ReadOnlyCollection: ...
    def GetStoreFunctions(self) -> ReadOnlyCollection: ...
    def GetStoreTypes(self) -> ReadOnlyCollection: ...


class EntityRecordInfo(DataRecordInfo):
    def __init__(self, metadata: EntityType, memberInfo: Iterable[EdmMember], entityKey: EntityKey, entitySet: EntitySet): ...
    @property
    def EntityKey(self) -> EntityKey: ...


class FieldMetadata(ValueType):
    def __init__(self, ordinal: int, fieldType: EdmMember): ...
    @property
    def FieldType(self) -> EdmMember: ...
    @property
    def Ordinal(self) -> int: ...
