from typing import Tuple, Set, Iterable, List


class AssociationEndMember(RelationshipEndMember):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...


class AssociationSet(RelationshipSet):
    @property
    def AssociationSetEnds(self) -> ReadOnlyMetadataCollection: ...
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def ElementType(self) -> AssociationType: ...


class AssociationSetEnd(MetadataItem):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def CorrespondingAssociationEndMember(self) -> AssociationEndMember: ...
    @property
    def EntitySet(self) -> EntitySet: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParentAssociationSet(self) -> AssociationSet: ...
    @property
    def Role(self) -> str: ...
    def ToString(self) -> str: ...


class AssociationType(RelationshipType):
    @property
    def AssociationEndMembers(self) -> ReadOnlyMetadataCollection: ...
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def IsForeignKey(self) -> bool: ...
    @property
    def ReferentialConstraints(self) -> ReadOnlyMetadataCollection: ...


class BuiltInTypeKind:
    AssociationEndMember = 0
    AssociationSetEnd = 1
    AssociationSet = 2
    AssociationType = 3
    EntitySetBase = 4
    EntityTypeBase = 5
    CollectionType = 6
    CollectionKind = 7
    ComplexType = 8
    Documentation = 9
    OperationAction = 10
    EdmType = 11
    EntityContainer = 12
    EntitySet = 13
    EntityType = 14
    EnumType = 15
    EnumMember = 16
    Facet = 17
    EdmFunction = 18
    FunctionParameter = 19
    GlobalItem = 20
    MetadataProperty = 21
    NavigationProperty = 22
    MetadataItem = 23
    EdmMember = 24
    ParameterMode = 25
    PrimitiveType = 26
    PrimitiveTypeKind = 27
    EdmProperty = 28
    ProviderManifest = 29
    ReferentialConstraint = 30
    RefType = 31
    RelationshipEndMember = 32
    RelationshipMultiplicity = 33
    RelationshipSet = 34
    RelationshipType = 35
    RowType = 36
    SimpleType = 37
    StructuralType = 38
    TypeUsage = 39


class CollectionKind:
    #None = 0
    Bag = 1
    List = 2


class CollectionType(EdmType):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def TypeUsage(self) -> TypeUsage: ...


class ComplexType(StructuralType):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def Properties(self) -> ReadOnlyMetadataCollection: ...


class ConcurrencyMode:
    #None = 0
    Fixed = 1


class DataSpace:
    OSpace = 0
    CSpace = 1
    SSpace = 2
    OCSpace = 3
    CSSpace = 4


class Documentation(MetadataItem):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def LongDescription(self) -> str: ...
    @property
    def Summary(self) -> str: ...
    def ToString(self) -> str: ...


class EdmError(Object):
    @property
    def Message(self) -> str: ...


class EdmFunction(EdmType):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def CommandTextAttribute(self) -> str: ...
    @property
    def FullName(self) -> str: ...
    @property
    def IsComposableAttribute(self) -> bool: ...
    @property
    def Parameters(self) -> ReadOnlyMetadataCollection: ...
    @property
    def ReturnParameter(self) -> FunctionParameter: ...
    @property
    def ReturnParameters(self) -> ReadOnlyMetadataCollection: ...


class EdmItemCollection(ItemCollection):
    @overload
    def __init__(self, xmlReaders: Iterable[XmlReader]): ...
    @overload
    def __init__(self, filePaths: Set(str)): ...
    @property
    def EdmVersion(self) -> float: ...
    @overload
    def GetPrimitiveTypes(self) -> ReadOnlyCollection: ...
    @overload
    def GetPrimitiveTypes(self, edmVersion: float) -> ReadOnlyCollection: ...


class EdmMember(MetadataItem):
    @property
    def DeclaringType(self) -> StructuralType: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeUsage(self) -> TypeUsage: ...
    def ToString(self) -> str: ...


class EdmProperty(EdmMember):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def DefaultValue(self) -> Object: ...
    @property
    def Nullable(self) -> bool: ...


class EdmSchemaError(EdmError):
    @property
    def Column(self) -> int: ...
    @property
    def ErrorCode(self) -> int: ...
    @property
    def Line(self) -> int: ...
    @property
    def SchemaLocation(self) -> str: ...
    @property
    def SchemaName(self) -> str: ...
    @property
    def Severity(self) -> EdmSchemaErrorSeverity: ...
    @property
    def StackTrace(self) -> str: ...
    @Severity.setter
    def Severity(self, value: EdmSchemaErrorSeverity) -> None: ...
    def ToString(self) -> str: ...


class EdmSchemaErrorSeverity:
    Warning = 0
    Error = 1


class EdmType(GlobalItem):
    @property
    def Abstract(self) -> bool: ...
    @property
    def BaseType(self) -> EdmType: ...
    @property
    def FullName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceName(self) -> str: ...
    def GetCollectionType(self) -> CollectionType: ...
    def ToString(self) -> str: ...


class EntityContainer(GlobalItem):
    @property
    def BaseEntitySets(self) -> ReadOnlyMetadataCollection: ...
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def FunctionImports(self) -> ReadOnlyMetadataCollection: ...
    @property
    def Name(self) -> str: ...
    def GetEntitySetByName(self, name: str, ignoreCase: bool) -> EntitySet: ...
    def GetRelationshipSetByName(self, name: str, ignoreCase: bool) -> RelationshipSet: ...
    def ToString(self) -> str: ...
    def TryGetEntitySetByName(self, name: str, ignoreCase: bool) -> Tuple[bool, EntitySet]: ...
    def TryGetRelationshipSetByName(self, name: str, ignoreCase: bool) -> Tuple[bool, RelationshipSet]: ...


class EntitySet(EntitySetBase):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def ElementType(self) -> EntityType: ...


class EntitySetBase(MetadataItem):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def ElementType(self) -> EntityTypeBase: ...
    @property
    def EntityContainer(self) -> EntityContainer: ...
    @property
    def Name(self) -> str: ...
    def ToString(self) -> str: ...


class EntityType(EntityTypeBase):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def NavigationProperties(self) -> ReadOnlyMetadataCollection: ...
    @property
    def Properties(self) -> ReadOnlyMetadataCollection: ...
    def GetReferenceType(self) -> RefType: ...


class EntityTypeBase(StructuralType):
    @property
    def KeyMembers(self) -> ReadOnlyMetadataCollection: ...




class EnumMember(MetadataItem):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    def ToString(self) -> str: ...


class EnumType(SimpleType):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def IsFlags(self) -> bool: ...
    @property
    def Members(self) -> ReadOnlyMetadataCollection: ...
    @property
    def UnderlyingType(self) -> PrimitiveType: ...


class Facet(MetadataItem):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def Description(self) -> FacetDescription: ...
    @property
    def FacetType(self) -> EdmType: ...
    @property
    def IsUnbounded(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    def ToString(self) -> str: ...


class FacetDescription(Object):
    @property
    def DefaultValue(self) -> Object: ...
    @property
    def FacetName(self) -> str: ...
    @property
    def FacetType(self) -> EdmType: ...
    @property
    def IsConstant(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def MaxValue(self) -> Nullable: ...
    @property
    def MinValue(self) -> Nullable: ...
    def ToString(self) -> str: ...


class FunctionParameter(MetadataItem):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def DeclaringFunction(self) -> EdmFunction: ...
    @property
    def Mode(self) -> ParameterMode: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeUsage(self) -> TypeUsage: ...
    def ToString(self) -> str: ...


class GlobalItem(MetadataItem):
    pass


class ItemCollection:
    @property
    def DataSpace(self) -> DataSpace: ...
    @overload
    def GetEntityContainer(self, name: str) -> EntityContainer: ...
    @overload
    def GetEntityContainer(self, name: str, ignoreCase: bool) -> EntityContainer: ...
    @overload
    def GetFunctions(self, functionName: str) -> ReadOnlyCollection: ...
    @overload
    def GetFunctions(self, functionName: str, ignoreCase: bool) -> ReadOnlyCollection: ...
    @overload
    def GetItem(self, identity: str) -> T: ...
    @overload
    def GetItem(self, identity: str, ignoreCase: bool) -> T: ...
    def GetItems(self) -> ReadOnlyCollection: ...
    @overload
    def GetType(self, name: str, namespaceName: str) -> EdmType: ...
    @overload
    def GetType(self, name: str, namespaceName: str, ignoreCase: bool) -> EdmType: ...
    @overload
    def TryGetEntityContainer(self, name: str) -> Tuple[bool, EntityContainer]: ...
    @overload
    def TryGetEntityContainer(self, name: str, ignoreCase: bool) -> Tuple[bool, EntityContainer]: ...
    @overload
    def TryGetItem(self, identity: str) -> Tuple[bool, T]: ...
    @overload
    def TryGetItem(self, identity: str, ignoreCase: bool) -> Tuple[bool, T]: ...
    @overload
    def TryGetType(self, name: str, namespaceName: str) -> Tuple[bool, EdmType]: ...
    @overload
    def TryGetType(self, name: str, namespaceName: str, ignoreCase: bool) -> Tuple[bool, EdmType]: ...


class MetadataItem(Object):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def Documentation(self) -> Documentation: ...
    @property
    def MetadataProperties(self) -> ReadOnlyMetadataCollection: ...
    def GetBuiltInType(builtInTypeKind: BuiltInTypeKind) -> EdmType: ...
    def GetGeneralFacetDescriptions() -> ReadOnlyCollection: ...
    @Documentation.setter
    def Documentation(self, value: Documentation) -> None: ...


class MetadataProperty(MetadataItem):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def Name(self) -> str: ...
    @property
    def PropertyKind(self) -> PropertyKind: ...
    @property
    def TypeUsage(self) -> TypeUsage: ...
    @property
    def Value(self) -> Object: ...


class MetadataWorkspace(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, paths: Iterable[str], assembliesToConsider: Iterable[Assembly]): ...
    def ClearCache() -> None: ...
    def CreateEntitySqlParser(self) -> EntitySqlParser: ...
    def CreateQueryCommandTree(self, query: DbExpression) -> DbQueryCommandTree: ...
    @overload
    def GetEdmSpaceType(self, objectSpaceType: EnumType) -> EnumType: ...
    @overload
    def GetEdmSpaceType(self, objectSpaceType: StructuralType) -> StructuralType: ...
    @overload
    def GetEntityContainer(self, name: str, dataSpace: DataSpace) -> EntityContainer: ...
    @overload
    def GetEntityContainer(self, name: str, ignoreCase: bool, dataSpace: DataSpace) -> EntityContainer: ...
    @overload
    def GetFunctions(self, name: str, namespaceName: str, dataSpace: DataSpace) -> ReadOnlyCollection: ...
    @overload
    def GetFunctions(self, name: str, namespaceName: str, dataSpace: DataSpace, ignoreCase: bool) -> ReadOnlyCollection: ...
    @overload
    def GetItem(self, identity: str, dataSpace: DataSpace) -> T: ...
    @overload
    def GetItem(self, identity: str, ignoreCase: bool, dataSpace: DataSpace) -> T: ...
    def GetItemCollection(self, dataSpace: DataSpace) -> ItemCollection: ...
    @overload
    def GetItems(self, dataSpace: DataSpace) -> ReadOnlyCollection: ...
    @overload
    def GetItems(self, dataSpace: DataSpace) -> ReadOnlyCollection: ...
    @overload
    def GetObjectSpaceType(self, edmSpaceType: StructuralType) -> StructuralType: ...
    @overload
    def GetObjectSpaceType(self, edmSpaceType: EnumType) -> EnumType: ...
    def GetPrimitiveTypes(self, dataSpace: DataSpace) -> ReadOnlyCollection: ...
    def GetRelevantMembersForUpdate(self, entitySet: EntitySetBase, entityType: EntityTypeBase, partialUpdateSupported: bool) -> ReadOnlyCollection: ...
    @overload
    def GetType(self, name: str, namespaceName: str, dataSpace: DataSpace) -> EdmType: ...
    @overload
    def GetType(self, name: str, namespaceName: str, ignoreCase: bool, dataSpace: DataSpace) -> EdmType: ...
    @overload
    def LoadFromAssembly(self, assembly: Assembly) -> None: ...
    @overload
    def LoadFromAssembly(self, assembly: Assembly, logLoadMessage: Action) -> None: ...
    def RegisterItemCollection(self, collection: ItemCollection) -> None: ...
    @overload
    def TryGetEdmSpaceType(self, objectSpaceType: StructuralType) -> Tuple[bool, StructuralType]: ...
    @overload
    def TryGetEdmSpaceType(self, objectSpaceType: EnumType) -> Tuple[bool, EnumType]: ...
    @overload
    def TryGetEntityContainer(self, name: str, dataSpace: DataSpace) -> Tuple[bool, EntityContainer]: ...
    @overload
    def TryGetEntityContainer(self, name: str, ignoreCase: bool, dataSpace: DataSpace) -> Tuple[bool, EntityContainer]: ...
    @overload
    def TryGetItem(self, identity: str, space: DataSpace) -> Tuple[bool, T]: ...
    @overload
    def TryGetItem(self, identity: str, ignoreCase: bool, dataSpace: DataSpace) -> Tuple[bool, T]: ...
    def TryGetItemCollection(self, dataSpace: DataSpace) -> Tuple[bool, ItemCollection]: ...
    @overload
    def TryGetObjectSpaceType(self, edmSpaceType: StructuralType) -> Tuple[bool, StructuralType]: ...
    @overload
    def TryGetObjectSpaceType(self, edmSpaceType: EnumType) -> Tuple[bool, EnumType]: ...
    @overload
    def TryGetType(self, name: str, namespaceName: str, dataSpace: DataSpace) -> Tuple[bool, EdmType]: ...
    @overload
    def TryGetType(self, name: str, namespaceName: str, ignoreCase: bool, dataSpace: DataSpace) -> Tuple[bool, EdmType]: ...


class NavigationProperty(EdmMember):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def FromEndMember(self) -> RelationshipEndMember: ...
    @property
    def RelationshipType(self) -> RelationshipType: ...
    @property
    def ToEndMember(self) -> RelationshipEndMember: ...
    def GetDependentProperties(self) -> Iterable[EdmProperty]: ...


class ObjectItemCollection(ItemCollection):
    def __init__(self): ...
    @overload
    def GetClrType(self, objectSpaceType: StructuralType) -> Type: ...
    @overload
    def GetClrType(self, objectSpaceType: EnumType) -> Type: ...
    def GetItems(self) -> ReadOnlyCollection: ...
    def GetPrimitiveTypes(self) -> Iterable[PrimitiveType]: ...
    @overload
    def LoadFromAssembly(self, assembly: Assembly) -> None: ...
    @overload
    def LoadFromAssembly(self, assembly: Assembly, edmItemCollection: EdmItemCollection) -> None: ...
    @overload
    def LoadFromAssembly(self, assembly: Assembly, edmItemCollection: EdmItemCollection, logLoadMessage: Action) -> None: ...
    @overload
    def TryGetClrType(self, objectSpaceType: EnumType) -> Tuple[bool, Type]: ...
    @overload
    def TryGetClrType(self, objectSpaceType: StructuralType) -> Tuple[bool, Type]: ...


class OperationAction:
    #None = 0
    Cascade = 1
    Restrict = 2


class ParameterMode:
    In = 0
    Out = 1
    InOut = 2
    ReturnValue = 3


class ParameterTypeSemantics:
    AllowImplicitConversion = 0
    AllowImplicitPromotion = 1
    ExactMatchOnly = 2


class PrimitiveType(SimpleType):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def ClrEquivalentType(self) -> Type: ...
    @property
    def FacetDescriptions(self) -> ReadOnlyCollection: ...
    @property
    def PrimitiveTypeKind(self) -> PrimitiveTypeKind: ...
    @overload
    def GetEdmPrimitiveType(self) -> EdmType: ...
    @overload
    def GetEdmPrimitiveType(primitiveTypeKind: PrimitiveTypeKind) -> PrimitiveType: ...
    def GetEdmPrimitiveTypes() -> ReadOnlyCollection: ...


class PrimitiveTypeKind:
    Binary = 0
    Boolean = 1
    Byte = 2
    DateTime = 3
    Decimal = 4
    Double = 5
    Guid = 6
    Single = 7
    SByte = 8
    Int16 = 9
    Int32 = 10
    Int64 = 11
    String = 12
    Time = 13
    DateTimeOffset = 14
    Geometry = 15
    Geography = 16
    GeometryPoint = 17
    GeometryLineString = 18
    GeometryPolygon = 19
    GeometryMultiPoint = 20
    GeometryMultiLineString = 21
    GeometryMultiPolygon = 22
    GeometryCollection = 23
    GeographyPoint = 24
    GeographyLineString = 25
    GeographyPolygon = 26
    GeographyMultiPoint = 27
    GeographyMultiLineString = 28
    GeographyMultiPolygon = 29
    GeographyCollection = 30


class PropertyKind:
    System = 0
    Extended = 1




class ReferentialConstraint(MetadataItem):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def FromProperties(self) -> ReadOnlyMetadataCollection: ...
    @property
    def FromRole(self) -> RelationshipEndMember: ...
    @property
    def ToProperties(self) -> ReadOnlyMetadataCollection: ...
    @property
    def ToRole(self) -> RelationshipEndMember: ...
    def ToString(self) -> str: ...


class RefType(EdmType):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def ElementType(self) -> EntityTypeBase: ...


class RelationshipEndMember(EdmMember):
    @property
    def DeleteBehavior(self) -> OperationAction: ...
    @property
    def RelationshipMultiplicity(self) -> RelationshipMultiplicity: ...
    def GetEntityType(self) -> EntityType: ...


class RelationshipMultiplicity:
    ZeroOrOne = 0
    One = 1
    Many = 2


class RelationshipSet(EntitySetBase):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def ElementType(self) -> RelationshipType: ...


class RelationshipType(EntityTypeBase):
    @property
    def RelationshipEndMembers(self) -> ReadOnlyMetadataCollection: ...


class RowType(StructuralType):
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def Properties(self) -> ReadOnlyMetadataCollection: ...


class SimpleType(EdmType):
    pass


class StoreGeneratedPattern:
    #None = 0
    Identity = 1
    Computed = 2


class StoreItemCollection(ItemCollection):
    @overload
    def __init__(self, xmlReaders: Iterable[XmlReader]): ...
    @overload
    def __init__(self, filePaths: Set(str)): ...
    @property
    def StoreSchemaVersion(self) -> float: ...
    def GetPrimitiveTypes(self) -> ReadOnlyCollection: ...


class StructuralType(EdmType):
    @property
    def Members(self) -> ReadOnlyMetadataCollection: ...


class TypeUsage(MetadataItem):
    @overload
    def CreateBinaryTypeUsage(primitiveType: PrimitiveType, isFixedLength: bool) -> TypeUsage: ...
    @overload
    def CreateBinaryTypeUsage(primitiveType: PrimitiveType, isFixedLength: bool, maxLength: int) -> TypeUsage: ...
    def CreateDateTimeOffsetTypeUsage(primitiveType: PrimitiveType, precision: Nullable) -> TypeUsage: ...
    def CreateDateTimeTypeUsage(primitiveType: PrimitiveType, precision: Nullable) -> TypeUsage: ...
    @overload
    def CreateDecimalTypeUsage(primitiveType: PrimitiveType) -> TypeUsage: ...
    @overload
    def CreateDecimalTypeUsage(primitiveType: PrimitiveType, precision: Byte, scale: Byte) -> TypeUsage: ...
    def CreateDefaultTypeUsage(edmType: EdmType) -> TypeUsage: ...
    @overload
    def CreateStringTypeUsage(primitiveType: PrimitiveType, isUnicode: bool, isFixedLength: bool) -> TypeUsage: ...
    @overload
    def CreateStringTypeUsage(primitiveType: PrimitiveType, isUnicode: bool, isFixedLength: bool, maxLength: int) -> TypeUsage: ...
    def CreateTimeTypeUsage(primitiveType: PrimitiveType, precision: Nullable) -> TypeUsage: ...
    @property
    def BuiltInTypeKind(self) -> BuiltInTypeKind: ...
    @property
    def EdmType(self) -> EdmType: ...
    @property
    def Facets(self) -> ReadOnlyMetadataCollection: ...
    def IsSubtypeOf(self, typeUsage: TypeUsage) -> bool: ...
    def ToString(self) -> str: ...
