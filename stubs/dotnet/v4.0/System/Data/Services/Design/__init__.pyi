from typing import Tuple, Set, Iterable, List


class DataServiceCodeVersion:
    V1 = 0
    V2 = 1


class EdmToObjectNamespaceMap(Object):
    def Add(self, edmNamespace: str, objectNamespace: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, edmNamespace: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def EdmNamespaces(self) -> ICollection: ...
    @property
    def Item(self, edmNamespace: str) -> str: ...
    def Remove(self, edmNamespace: str) -> bool: ...
    @Item.setter
    def Item(self, edmNamespace: str, value: str) -> None: ...
    def TryGetObjectNamespace(self, edmNamespace: str) -> Tuple[bool, str]: ...


class EntityClassGenerator(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, languageOption: LanguageOption): ...
    def add_OnPropertyGenerated(self, value: EventHandler) -> None: ...
    def add_OnTypeGenerated(self, value: EventHandler) -> None: ...
    @overload
    def GenerateCode(self, sourceReader: XmlReader, targetFilePath: str) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceReader: XmlReader, targetWriter: TextWriter, namespacePrefix: str) -> List[EdmSchemaError]: ...
    @property
    def EdmToObjectNamespaceMap(self) -> EdmToObjectNamespaceMap: ...
    @property
    def LanguageOption(self) -> LanguageOption: ...
    @property
    def UseDataServiceCollection(self) -> bool: ...
    @property
    def Version(self) -> DataServiceCodeVersion: ...
    def remove_OnPropertyGenerated(self, value: EventHandler) -> None: ...
    def remove_OnTypeGenerated(self, value: EventHandler) -> None: ...
    @LanguageOption.setter
    def LanguageOption(self, value: LanguageOption) -> None: ...
    @UseDataServiceCollection.setter
    def UseDataServiceCollection(self, value: bool) -> None: ...
    @Version.setter
    def Version(self, value: DataServiceCodeVersion) -> None: ...


class LanguageOption:
    GenerateCSharpCode = 0
    GenerateVBCode = 1


class PropertyGeneratedEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, propertySource: MetadataItem, backingFieldName: str, returnType: CodeTypeReference): ...
    @property
    def AdditionalAttributes(self) -> List: ...
    @property
    def AdditionalGetStatements(self) -> List: ...
    @property
    def AdditionalSetStatements(self) -> List: ...
    @property
    def BackingFieldName(self) -> str: ...
    @property
    def PropertySource(self) -> MetadataItem: ...
    @property
    def ReturnType(self) -> CodeTypeReference: ...
    @ReturnType.setter
    def ReturnType(self, value: CodeTypeReference) -> None: ...


class TypeGeneratedEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeSource: GlobalItem, baseType: CodeTypeReference): ...
    @property
    def AdditionalAttributes(self) -> List: ...
    @property
    def AdditionalInterfaces(self) -> List: ...
    @property
    def AdditionalMembers(self) -> List: ...
    @property
    def BaseType(self) -> CodeTypeReference: ...
    @property
    def TypeSource(self) -> GlobalItem: ...
    @BaseType.setter
    def BaseType(self, value: CodeTypeReference) -> None: ...
