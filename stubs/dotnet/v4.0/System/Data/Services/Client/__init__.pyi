from typing import Tuple, Set, Iterable, List


class ChangeOperationResponse(OperationResponse):
    @property
    def Descriptor(self) -> Descriptor: ...


class DataServiceClientException(InvalidOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, statusCode: int): ...
    @overload
    def __init__(self, message: str, innerException: Exception, statusCode: int): ...
    @property
    def StatusCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...




class DataServiceContext(Object):
    def __init__(self, serviceRoot: Uri): ...
    def add_ReadingEntity(self, value: EventHandler) -> None: ...
    def add_SendingRequest(self, value: EventHandler) -> None: ...
    def add_WritingEntity(self, value: EventHandler) -> None: ...
    def AddLink(self, source: Object, sourceProperty: str, target: Object) -> None: ...
    def AddObject(self, entitySetName: str, entity: Object) -> None: ...
    def AddRelatedObject(self, source: Object, sourceProperty: str, target: Object) -> None: ...
    def AttachLink(self, source: Object, sourceProperty: str, target: Object) -> None: ...
    @overload
    def AttachTo(self, entitySetName: str, entity: Object) -> None: ...
    @overload
    def AttachTo(self, entitySetName: str, entity: Object, etag: str) -> None: ...
    @overload
    def BeginExecute(self, continuation: DataServiceQueryContinuation, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginExecute(self, requestUri: Uri, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginExecuteBatch(self, callback: AsyncCallback, state: Object, queries: Set(DataServiceRequest)) -> IAsyncResult: ...
    def BeginGetReadStream(self, entity: Object, args: DataServiceRequestArgs, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoadProperty(self, entity: Object, propertyName: str, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoadProperty(self, entity: Object, propertyName: str, continuation: DataServiceQueryContinuation, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoadProperty(self, entity: Object, propertyName: str, nextLinkUri: Uri, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginSaveChanges(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginSaveChanges(self, options: SaveChangesOptions, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def CancelRequest(self, asyncResult: IAsyncResult) -> None: ...
    def CreateQuery(self, entitySetName: str) -> DataServiceQuery: ...
    def DeleteLink(self, source: Object, sourceProperty: str, target: Object) -> None: ...
    def DeleteObject(self, entity: Object) -> None: ...
    def Detach(self, entity: Object) -> bool: ...
    def DetachLink(self, source: Object, sourceProperty: str, target: Object) -> bool: ...
    def EndExecute(self, asyncResult: IAsyncResult) -> Iterable[TElement]: ...
    def EndExecuteBatch(self, asyncResult: IAsyncResult) -> DataServiceResponse: ...
    def EndGetReadStream(self, asyncResult: IAsyncResult) -> DataServiceStreamResponse: ...
    def EndLoadProperty(self, asyncResult: IAsyncResult) -> QueryOperationResponse: ...
    def EndSaveChanges(self, asyncResult: IAsyncResult) -> DataServiceResponse: ...
    @overload
    def Execute(self, requestUri: Uri) -> Iterable[TElement]: ...
    @overload
    def Execute(self, continuation: DataServiceQueryContinuation) -> QueryOperationResponse: ...
    def ExecuteBatch(self, queries: Set(DataServiceRequest)) -> DataServiceResponse: ...
    @property
    def ApplyingChanges(self) -> bool: ...
    @property
    def BaseUri(self) -> Uri: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def DataNamespace(self) -> str: ...
    @property
    def Entities(self) -> ReadOnlyCollection: ...
    @property
    def IgnoreMissingProperties(self) -> bool: ...
    @property
    def IgnoreResourceNotFoundException(self) -> bool: ...
    @property
    def Links(self) -> ReadOnlyCollection: ...
    @property
    def MergeOption(self) -> MergeOption: ...
    @property
    def ResolveName(self) -> Func: ...
    @property
    def ResolveType(self) -> Func: ...
    @property
    def SaveChangesDefaultOptions(self) -> SaveChangesOptions: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def TypeScheme(self) -> Uri: ...
    @property
    def UsePostTunneling(self) -> bool: ...
    def GetEntityDescriptor(self, entity: Object) -> EntityDescriptor: ...
    def GetLinkDescriptor(self, source: Object, sourceProperty: str, target: Object) -> LinkDescriptor: ...
    def GetMetadataUri(self) -> Uri: ...
    @overload
    def GetReadStream(self, entity: Object) -> DataServiceStreamResponse: ...
    @overload
    def GetReadStream(self, entity: Object, acceptContentType: str) -> DataServiceStreamResponse: ...
    @overload
    def GetReadStream(self, entity: Object, args: DataServiceRequestArgs) -> DataServiceStreamResponse: ...
    def GetReadStreamUri(self, entity: Object) -> Uri: ...
    @overload
    def LoadProperty(self, entity: Object, propertyName: str) -> QueryOperationResponse: ...
    @overload
    def LoadProperty(self, entity: Object, propertyName: str, continuation: DataServiceQueryContinuation) -> QueryOperationResponse: ...
    @overload
    def LoadProperty(self, entity: Object, propertyName: str, continuation: DataServiceQueryContinuation) -> QueryOperationResponse: ...
    @overload
    def LoadProperty(self, entity: Object, propertyName: str, nextLinkUri: Uri) -> QueryOperationResponse: ...
    def remove_ReadingEntity(self, value: EventHandler) -> None: ...
    def remove_SendingRequest(self, value: EventHandler) -> None: ...
    def remove_WritingEntity(self, value: EventHandler) -> None: ...
    @overload
    def SaveChanges(self) -> DataServiceResponse: ...
    @overload
    def SaveChanges(self, options: SaveChangesOptions) -> DataServiceResponse: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...
    @DataNamespace.setter
    def DataNamespace(self, value: str) -> None: ...
    @IgnoreMissingProperties.setter
    def IgnoreMissingProperties(self, value: bool) -> None: ...
    @IgnoreResourceNotFoundException.setter
    def IgnoreResourceNotFoundException(self, value: bool) -> None: ...
    @MergeOption.setter
    def MergeOption(self, value: MergeOption) -> None: ...
    @ResolveName.setter
    def ResolveName(self, value: Func) -> None: ...
    @ResolveType.setter
    def ResolveType(self, value: Func) -> None: ...
    @SaveChangesDefaultOptions.setter
    def SaveChangesDefaultOptions(self, value: SaveChangesOptions) -> None: ...
    @Timeout.setter
    def Timeout(self, value: int) -> None: ...
    @TypeScheme.setter
    def TypeScheme(self, value: Uri) -> None: ...
    @UsePostTunneling.setter
    def UsePostTunneling(self, value: bool) -> None: ...
    def SetLink(self, source: Object, sourceProperty: str, target: Object) -> None: ...
    @overload
    def SetSaveStream(self, entity: Object, stream: Stream, closeStream: bool, args: DataServiceRequestArgs) -> None: ...
    @overload
    def SetSaveStream(self, entity: Object, stream: Stream, closeStream: bool, contentType: str, slug: str) -> None: ...
    def TryGetEntity(self, identity: Uri) -> Tuple[bool, TEntity]: ...
    def TryGetUri(self, entity: Object) -> Tuple[bool, Uri]: ...
    def UpdateObject(self, entity: Object) -> None: ...


class DataServiceQuery(DataServiceRequest):
    def BeginExecute(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def EndExecute(self, asyncResult: IAsyncResult) -> IEnumerable: ...
    def Execute(self) -> IEnumerable: ...
    @property
    def Expression(self) -> Expression: ...
    @property
    def Provider(self) -> IQueryProvider: ...




class DataServiceQueryContinuation(Object):
    @property
    def NextLinkUri(self) -> Uri: ...
    def ToString(self) -> str: ...




class DataServiceQueryException(InvalidOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception, response: QueryOperationResponse): ...
    @property
    def Response(self) -> QueryOperationResponse: ...


class DataServiceRequest(Object):
    @property
    def ElementType(self) -> Type: ...
    @property
    def RequestUri(self) -> Uri: ...
    def ToString(self) -> str: ...




class DataServiceRequestArgs(Object):
    def __init__(self): ...
    @property
    def AcceptContentType(self) -> str: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Headers(self) -> Dictionary: ...
    @property
    def Slug(self) -> str: ...
    @AcceptContentType.setter
    def AcceptContentType(self, value: str) -> None: ...
    @ContentType.setter
    def ContentType(self, value: str) -> None: ...
    @Slug.setter
    def Slug(self, value: str) -> None: ...


class DataServiceRequestException(InvalidOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception, response: DataServiceResponse): ...
    @property
    def Response(self) -> DataServiceResponse: ...


class DataServiceResponse(Object):
    @property
    def BatchHeaders(self) -> IDictionary: ...
    @property
    def BatchStatusCode(self) -> int: ...
    @property
    def IsBatchResponse(self) -> bool: ...
    def GetEnumerator(self) -> IEnumerator: ...


class DataServiceStreamResponse(Object):
    def Dispose(self) -> None: ...
    @property
    def ContentDisposition(self) -> str: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Headers(self) -> Dictionary: ...
    @property
    def Stream(self) -> Stream: ...


class Descriptor(Object):
    @property
    def State(self) -> EntityStates: ...


class EntityChangedParams(Object):
    @property
    def Context(self) -> DataServiceContext: ...
    @property
    def Entity(self) -> Object: ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def PropertyValue(self) -> Object: ...
    @property
    def SourceEntitySet(self) -> str: ...
    @property
    def TargetEntitySet(self) -> str: ...


class EntityCollectionChangedParams(Object):
    @property
    def Action(self) -> NotifyCollectionChangedAction: ...
    @property
    def Collection(self) -> ICollection: ...
    @property
    def Context(self) -> DataServiceContext: ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def SourceEntity(self) -> Object: ...
    @property
    def SourceEntitySet(self) -> str: ...
    @property
    def TargetEntity(self) -> Object: ...
    @property
    def TargetEntitySet(self) -> str: ...


class EntityDescriptor(Descriptor):
    @property
    def EditLink(self) -> Uri: ...
    @property
    def EditStreamUri(self) -> Uri: ...
    @property
    def Entity(self) -> Object: ...
    @property
    def ETag(self) -> str: ...
    @property
    def Identity(self) -> str: ...
    @property
    def ParentForInsert(self) -> EntityDescriptor: ...
    @property
    def ParentPropertyForInsert(self) -> str: ...
    @property
    def ReadStreamUri(self) -> Uri: ...
    @property
    def SelfLink(self) -> Uri: ...
    @property
    def ServerTypeName(self) -> str: ...
    @property
    def StreamETag(self) -> str: ...


class EntityStates:
    Detached = 1
    Unchanged = 2
    Added = 4
    Deleted = 8
    Modified = 16


class LinkDescriptor(Descriptor):
    @property
    def Source(self) -> Object: ...
    @property
    def SourceProperty(self) -> str: ...
    @property
    def Target(self) -> Object: ...


class MediaEntryAttribute(Attribute):
    def __init__(self, mediaMemberName: str): ...
    @property
    def MediaMemberName(self) -> str: ...


class MergeOption:
    AppendOnly = 0
    OverwriteChanges = 1
    PreserveChanges = 2
    NoTracking = 3


class MimeTypePropertyAttribute(Attribute):
    def __init__(self, dataPropertyName: str, mimeTypePropertyName: str): ...
    @property
    def DataPropertyName(self) -> str: ...
    @property
    def MimeTypePropertyName(self) -> str: ...


class OperationResponse(Object):
    @property
    def Error(self) -> Exception: ...
    @property
    def Headers(self) -> IDictionary: ...
    @property
    def StatusCode(self) -> int: ...
    @Error.setter
    def Error(self, value: Exception) -> None: ...


class QueryOperationResponse(OperationResponse):
    @property
    def Query(self) -> DataServiceRequest: ...
    @property
    def TotalCount(self) -> Int64: ...
    @overload
    def GetContinuation(self) -> DataServiceQueryContinuation: ...
    @overload
    def GetContinuation(self, collection: IEnumerable) -> DataServiceQueryContinuation: ...
    @overload
    def GetContinuation(self, collection: Iterable[T]) -> DataServiceQueryContinuation: ...
    def GetEnumerator(self) -> IEnumerator: ...




class ReadingWritingEntityEventArgs(EventArgs):
    @property
    def Data(self) -> XElement: ...
    @property
    def Entity(self) -> Object: ...


class SaveChangesOptions:
    #None = 0
    Batch = 1
    ContinueOnError = 2
    ReplaceOnUpdate = 4


class SendingRequestEventArgs(EventArgs):
    @property
    def Request(self) -> WebRequest: ...
    @property
    def RequestHeaders(self) -> WebHeaderCollection: ...
    @Request.setter
    def Request(self, value: WebRequest) -> None: ...


class TrackingMode:
    #None = 0
    AutoChangeTracking = 1
