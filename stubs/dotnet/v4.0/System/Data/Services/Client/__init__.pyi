from typing import Tuple, Set, Iterable, List


class DataServiceContext(Object):
    def __init__(self, serviceRoot: Uri): ...
    def add_ReadingEntity(self, value: EventHandler) -> None: ...
    def add_SendingRequest(self, value: EventHandler) -> None: ...
    def add_WritingEntity(self, value: EventHandler) -> None: ...
    def AddLink(self, source: Object, sourceProperty: str, target: Object) -> None: ...
    def AddObject(self, entitySetName: str, entity: Object) -> None: ...
    def AddRelatedObject(self, source: Object, sourceProperty: str, target: Object) -> None: ...
    def AttachLink(self, source: Object, sourceProperty: str, target: Object) -> None: ...
    @overload
    def AttachTo(self, entitySetName: str, entity: Object) -> None: ...
    @overload
    def AttachTo(self, entitySetName: str, entity: Object, etag: str) -> None: ...
    @overload
    def BeginExecute(self, continuation: DataServiceQueryContinuation, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginExecute(self, requestUri: Uri, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginExecuteBatch(self, callback: AsyncCallback, state: Object, queries: Set(DataServiceRequest)) -> IAsyncResult: ...
    def BeginGetReadStream(self, entity: Object, args: DataServiceRequestArgs, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoadProperty(self, entity: Object, propertyName: str, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoadProperty(self, entity: Object, propertyName: str, continuation: DataServiceQueryContinuation, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginLoadProperty(self, entity: Object, propertyName: str, nextLinkUri: Uri, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginSaveChanges(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginSaveChanges(self, options: SaveChangesOptions, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def CancelRequest(self, asyncResult: IAsyncResult) -> None: ...
    def CreateQuery(self, entitySetName: str) -> DataServiceQuery: ...
    def DeleteLink(self, source: Object, sourceProperty: str, target: Object) -> None: ...
    def DeleteObject(self, entity: Object) -> None: ...
    def Detach(self, entity: Object) -> bool: ...
    def DetachLink(self, source: Object, sourceProperty: str, target: Object) -> bool: ...
    def EndExecute(self, asyncResult: IAsyncResult) -> Iterable[TElement]: ...
    def EndExecuteBatch(self, asyncResult: IAsyncResult) -> DataServiceResponse: ...
    def EndGetReadStream(self, asyncResult: IAsyncResult) -> DataServiceStreamResponse: ...
    def EndLoadProperty(self, asyncResult: IAsyncResult) -> QueryOperationResponse: ...
    def EndSaveChanges(self, asyncResult: IAsyncResult) -> DataServiceResponse: ...
    @overload
    def Execute(self, requestUri: Uri) -> Iterable[TElement]: ...
    @overload
    def Execute(self, continuation: DataServiceQueryContinuation) -> QueryOperationResponse: ...
    def ExecuteBatch(self, queries: Set(DataServiceRequest)) -> DataServiceResponse: ...
    @property
    def ApplyingChanges(self) -> bool: ...
    @property
    def BaseUri(self) -> Uri: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def DataNamespace(self) -> str: ...
    @property
    def Entities(self) -> ReadOnlyCollection: ...
    @property
    def IgnoreMissingProperties(self) -> bool: ...
    @property
    def IgnoreResourceNotFoundException(self) -> bool: ...
    @property
    def Links(self) -> ReadOnlyCollection: ...
    @property
    def MergeOption(self) -> MergeOption: ...
    @property
    def ResolveName(self) -> Func: ...
    @property
    def ResolveType(self) -> Func: ...
    @property
    def SaveChangesDefaultOptions(self) -> SaveChangesOptions: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def TypeScheme(self) -> Uri: ...
    @property
    def UsePostTunneling(self) -> bool: ...
    def GetEntityDescriptor(self, entity: Object) -> EntityDescriptor: ...
    def GetLinkDescriptor(self, source: Object, sourceProperty: str, target: Object) -> LinkDescriptor: ...
    def GetMetadataUri(self) -> Uri: ...
    @overload
    def GetReadStream(self, entity: Object) -> DataServiceStreamResponse: ...
    @overload
    def GetReadStream(self, entity: Object, acceptContentType: str) -> DataServiceStreamResponse: ...
    @overload
    def GetReadStream(self, entity: Object, args: DataServiceRequestArgs) -> DataServiceStreamResponse: ...
    def GetReadStreamUri(self, entity: Object) -> Uri: ...
    @overload
    def LoadProperty(self, entity: Object, propertyName: str) -> QueryOperationResponse: ...
    @overload
    def LoadProperty(self, entity: Object, propertyName: str, continuation: DataServiceQueryContinuation) -> QueryOperationResponse: ...
    @overload
    def LoadProperty(self, entity: Object, propertyName: str, continuation: DataServiceQueryContinuation) -> QueryOperationResponse: ...
    @overload
    def LoadProperty(self, entity: Object, propertyName: str, nextLinkUri: Uri) -> QueryOperationResponse: ...
    def remove_ReadingEntity(self, value: EventHandler) -> None: ...
    def remove_SendingRequest(self, value: EventHandler) -> None: ...
    def remove_WritingEntity(self, value: EventHandler) -> None: ...
    @overload
    def SaveChanges(self) -> DataServiceResponse: ...
    @overload
    def SaveChanges(self, options: SaveChangesOptions) -> DataServiceResponse: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...
    @DataNamespace.setter
    def DataNamespace(self, value: str) -> None: ...
    @IgnoreMissingProperties.setter
    def IgnoreMissingProperties(self, value: bool) -> None: ...
    @IgnoreResourceNotFoundException.setter
    def IgnoreResourceNotFoundException(self, value: bool) -> None: ...
    @MergeOption.setter
    def MergeOption(self, value: MergeOption) -> None: ...
    @ResolveName.setter
    def ResolveName(self, value: Func) -> None: ...
    @ResolveType.setter
    def ResolveType(self, value: Func) -> None: ...
    @SaveChangesDefaultOptions.setter
    def SaveChangesDefaultOptions(self, value: SaveChangesOptions) -> None: ...
    @Timeout.setter
    def Timeout(self, value: int) -> None: ...
    @TypeScheme.setter
    def TypeScheme(self, value: Uri) -> None: ...
    @UsePostTunneling.setter
    def UsePostTunneling(self, value: bool) -> None: ...
    def SetLink(self, source: Object, sourceProperty: str, target: Object) -> None: ...
    @overload
    def SetSaveStream(self, entity: Object, stream: Stream, closeStream: bool, args: DataServiceRequestArgs) -> None: ...
    @overload
    def SetSaveStream(self, entity: Object, stream: Stream, closeStream: bool, contentType: str, slug: str) -> None: ...
    def TryGetEntity(self, identity: Uri) -> Tuple[bool, TEntity]: ...
    def TryGetUri(self, entity: Object) -> Tuple[bool, Uri]: ...
    def UpdateObject(self, entity: Object) -> None: ...
