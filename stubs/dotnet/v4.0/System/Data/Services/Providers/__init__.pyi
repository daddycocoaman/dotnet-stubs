from typing import Tuple, Set, Iterable, List


class DataServiceProviderMethods(Object):
    @overload
    def Compare(left: str, right: str) -> int: ...
    @overload
    def Compare(left: bool, right: bool) -> int: ...
    @overload
    def Compare(left: Nullable, right: Nullable) -> int: ...
    @overload
    def Compare(left: Guid, right: Guid) -> int: ...
    @overload
    def Compare(left: Nullable, right: Nullable) -> int: ...
    def Convert(value: Object, type: ResourceType) -> Object: ...
    def GetSequenceValue(value: Object, property: ResourceProperty) -> Iterable[T]: ...
    def GetValue(value: Object, property: ResourceProperty) -> Object: ...
    def TypeIs(value: Object, type: ResourceType) -> bool: ...


class IDataServiceMetadataProvider:
    @property
    def ContainerName(self) -> str: ...
    @property
    def ContainerNamespace(self) -> str: ...
    @property
    def ResourceSets(self) -> Iterable[ResourceSet]: ...
    @property
    def ServiceOperations(self) -> Iterable[ServiceOperation]: ...
    @property
    def Types(self) -> Iterable[ResourceType]: ...
    def GetDerivedTypes(self, resourceType: ResourceType) -> Iterable[ResourceType]: ...
    def GetResourceAssociationSet(self, resourceSet: ResourceSet, resourceType: ResourceType, resourceProperty: ResourceProperty) -> ResourceAssociationSet: ...
    def HasDerivedTypes(self, resourceType: ResourceType) -> bool: ...
    def TryResolveResourceSet(self, name: str) -> Tuple[bool, ResourceSet]: ...
    def TryResolveResourceType(self, name: str) -> Tuple[bool, ResourceType]: ...
    def TryResolveServiceOperation(self, name: str) -> Tuple[bool, ServiceOperation]: ...


class IDataServicePagingProvider:
    def GetContinuationToken(self, enumerator: IEnumerator) -> Set(Object): ...
    def SetContinuationToken(self, query: IQueryable, resourceType: ResourceType, continuationToken: Set(Object)) -> None: ...


class IDataServiceQueryProvider:
    @property
    def CurrentDataSource(self) -> Object: ...
    @property
    def IsNullPropagationRequired(self) -> bool: ...
    def GetOpenPropertyValue(self, target: Object, propertyName: str) -> Object: ...
    def GetOpenPropertyValues(self, target: Object) -> Iterable[KeyValuePair]: ...
    def GetPropertyValue(self, target: Object, resourceProperty: ResourceProperty) -> Object: ...
    def GetQueryRootForResourceSet(self, resourceSet: ResourceSet) -> IQueryable: ...
    def GetResourceType(self, target: Object) -> ResourceType: ...
    def InvokeServiceOperation(self, serviceOperation: ServiceOperation, parameters: Set(Object)) -> Object: ...
    @CurrentDataSource.setter
    def CurrentDataSource(self, value: Object) -> None: ...


class IDataServiceStreamProvider:
    def DeleteStream(self, entity: Object, operationContext: DataServiceOperationContext) -> None: ...
    @property
    def StreamBufferSize(self) -> int: ...
    def GetReadStream(self, entity: Object, etag: str, checkETagForEquality: Nullable, operationContext: DataServiceOperationContext) -> Stream: ...
    def GetReadStreamUri(self, entity: Object, operationContext: DataServiceOperationContext) -> Uri: ...
    def GetStreamContentType(self, entity: Object, operationContext: DataServiceOperationContext) -> str: ...
    def GetStreamETag(self, entity: Object, operationContext: DataServiceOperationContext) -> str: ...
    def GetWriteStream(self, entity: Object, etag: str, checkETagForEquality: Nullable, operationContext: DataServiceOperationContext) -> Stream: ...
    def ResolveType(self, entitySetName: str, operationContext: DataServiceOperationContext) -> str: ...


class IDataServiceUpdateProvider:
    def SetConcurrencyValues(self, resourceCookie: Object, checkForEquality: Nullable, concurrencyValues: Iterable[KeyValuePair]) -> None: ...


class OpenTypeMethods(Object):
    def Add(left: Object, right: Object) -> Object: ...
    def AndAlso(left: Object, right: Object) -> Object: ...
    def Ceiling(value: Object) -> Object: ...
    def Concat(first: Object, second: Object) -> Object: ...
    def Convert(value: Object, type: ResourceType) -> Object: ...
    def Day(dateTime: Object) -> Object: ...
    def Divide(left: Object, right: Object) -> Object: ...
    def EndsWith(targetString: Object, substring: Object) -> Object: ...
    def Equal(left: Object, right: Object) -> Object: ...
    def Floor(value: Object) -> Object: ...
    def GetValue(value: Object, propertyName: str) -> Object: ...
    def GreaterThan(left: Object, right: Object) -> Object: ...
    def GreaterThanOrEqual(left: Object, right: Object) -> Object: ...
    def Hour(dateTime: Object) -> Object: ...
    def IndexOf(targetString: Object, substring: Object) -> Object: ...
    def Length(value: Object) -> Object: ...
    def LessThan(left: Object, right: Object) -> Object: ...
    def LessThanOrEqual(left: Object, right: Object) -> Object: ...
    def Minute(dateTime: Object) -> Object: ...
    def Modulo(left: Object, right: Object) -> Object: ...
    def Month(dateTime: Object) -> Object: ...
    def Multiply(left: Object, right: Object) -> Object: ...
    def Negate(value: Object) -> Object: ...
    def Not(value: Object) -> Object: ...
    def NotEqual(left: Object, right: Object) -> Object: ...
    def OrElse(left: Object, right: Object) -> Object: ...
    def Replace(targetString: Object, substring: Object, newString: Object) -> Object: ...
    def Round(value: Object) -> Object: ...
    def Second(dateTime: Object) -> Object: ...
    def StartsWith(targetString: Object, substring: Object) -> Object: ...
    @overload
    def Substring(targetString: Object, startIndex: Object) -> Object: ...
    @overload
    def Substring(targetString: Object, startIndex: Object, length: Object) -> Object: ...
    def SubstringOf(substring: Object, targetString: Object) -> Object: ...
    def Subtract(left: Object, right: Object) -> Object: ...
    def ToLower(targetString: Object) -> Object: ...
    def ToUpper(targetString: Object) -> Object: ...
    def Trim(targetString: Object) -> Object: ...
    def TypeIs(value: Object, type: ResourceType) -> Object: ...
    def Year(dateTime: Object) -> Object: ...


class ResourceAssociationSet(Object):
    def __init__(self, name: str, end1: ResourceAssociationSetEnd, end2: ResourceAssociationSetEnd): ...
    @property
    def End1(self) -> ResourceAssociationSetEnd: ...
    @property
    def End2(self) -> ResourceAssociationSetEnd: ...
    @property
    def Name(self) -> str: ...


class ResourceAssociationSetEnd(Object):
    def __init__(self, resourceSet: ResourceSet, resourceType: ResourceType, resourceProperty: ResourceProperty): ...
    @property
    def ResourceProperty(self) -> ResourceProperty: ...
    @property
    def ResourceSet(self) -> ResourceSet: ...
    @property
    def ResourceType(self) -> ResourceType: ...


class ResourceProperty(Object):
    def __init__(self, name: str, kind: ResourcePropertyKind, propertyResourceType: ResourceType): ...
    @property
    def CanReflectOnInstanceTypeProperty(self) -> bool: ...
    @property
    def CustomState(self) -> Object: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Kind(self) -> ResourcePropertyKind: ...
    @property
    def MimeType(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def ResourceType(self) -> ResourceType: ...
    @CanReflectOnInstanceTypeProperty.setter
    def CanReflectOnInstanceTypeProperty(self, value: bool) -> None: ...
    @CustomState.setter
    def CustomState(self, value: Object) -> None: ...
    @MimeType.setter
    def MimeType(self, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...


class ResourcePropertyKind:
    Primitive = 1
    Key = 2
    ComplexType = 4
    ResourceReference = 8
    ResourceSetReference = 16
    ETag = 32


class ResourceSet(Object):
    def __init__(self, name: str, elementType: ResourceType): ...
    @property
    def CustomState(self) -> Object: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ResourceType(self) -> ResourceType: ...
    @CustomState.setter
    def CustomState(self, value: Object) -> None: ...
    def SetReadOnly(self) -> None: ...


class ResourceType(Object):
    def __init__(self, instanceType: Type, resourceTypeKind: ResourceTypeKind, baseType: ResourceType, namespaceName: str, name: str, isAbstract: bool): ...
    def AddEntityPropertyMappingAttribute(self, attribute: EntityPropertyMappingAttribute) -> None: ...
    def AddProperty(self, property: ResourceProperty) -> None: ...
    @property
    def BaseType(self) -> ResourceType: ...
    @property
    def CanReflectOnInstanceType(self) -> bool: ...
    @property
    def CustomState(self) -> Object: ...
    @property
    def ETagProperties(self) -> ReadOnlyCollection: ...
    @property
    def FullName(self) -> str: ...
    @property
    def InstanceType(self) -> Type: ...
    @property
    def IsAbstract(self) -> bool: ...
    @property
    def IsMediaLinkEntry(self) -> bool: ...
    @property
    def IsOpenType(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def KeyProperties(self) -> ReadOnlyCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Properties(self) -> ReadOnlyCollection: ...
    @property
    def PropertiesDeclaredOnThisType(self) -> ReadOnlyCollection: ...
    @property
    def ResourceTypeKind(self) -> ResourceTypeKind: ...
    def GetPrimitiveResourceType(type: Type) -> ResourceType: ...
    @CanReflectOnInstanceType.setter
    def CanReflectOnInstanceType(self, value: bool) -> None: ...
    @CustomState.setter
    def CustomState(self, value: Object) -> None: ...
    @IsMediaLinkEntry.setter
    def IsMediaLinkEntry(self, value: bool) -> None: ...
    @IsOpenType.setter
    def IsOpenType(self, value: bool) -> None: ...
    def SetReadOnly(self) -> None: ...


class ResourceTypeKind:
    EntityType = 0
    ComplexType = 1
    Primitive = 2


class ServiceOperation(Object):
    def __init__(self, name: str, resultKind: ServiceOperationResultKind, resultType: ResourceType, resultSet: ResourceSet, method: str, parameters: Iterable[ServiceOperationParameter]): ...
    @property
    def CustomState(self) -> Object: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Method(self) -> str: ...
    @property
    def MimeType(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> ReadOnlyCollection: ...
    @property
    def ResourceSet(self) -> ResourceSet: ...
    @property
    def ResultKind(self) -> ServiceOperationResultKind: ...
    @property
    def ResultType(self) -> ResourceType: ...
    @CustomState.setter
    def CustomState(self, value: Object) -> None: ...
    @MimeType.setter
    def MimeType(self, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...


class ServiceOperationParameter(Object):
    def __init__(self, name: str, parameterType: ResourceType): ...
    @property
    def CustomState(self) -> Object: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParameterType(self) -> ResourceType: ...
    @CustomState.setter
    def CustomState(self, value: Object) -> None: ...
    def SetReadOnly(self) -> None: ...


class ServiceOperationResultKind:
    DirectValue = 0
    Enumeration = 1
    QueryWithMultipleResults = 2
    QueryWithSingleResult = 3
    Void = 4
