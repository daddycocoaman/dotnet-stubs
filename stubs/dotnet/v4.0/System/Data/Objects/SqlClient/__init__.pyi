from typing import Tuple, Set, Iterable, List


class SqlSpatialFunctions(Object):
    @overload
    def AsTextZM(geographyValue: DbGeography) -> str: ...
    @overload
    def AsTextZM(geometryValue: DbGeometry) -> str: ...
    @overload
    def BufferWithTolerance(geographyValue: DbGeography, distance: Nullable, tolerance: Nullable, relative: Nullable) -> DbGeography: ...
    @overload
    def BufferWithTolerance(geometryValue: DbGeometry, distance: Nullable, tolerance: Nullable, relative: Nullable) -> DbGeometry: ...
    def EnvelopeAngle(geographyValue: DbGeography) -> Nullable: ...
    def EnvelopeCenter(geographyValue: DbGeography) -> DbGeography: ...
    @overload
    def Filter(geographyValue: DbGeography, geographyOther: DbGeography) -> Nullable: ...
    @overload
    def Filter(geometryValue: DbGeometry, geometryOther: DbGeometry) -> Nullable: ...
    @overload
    def InstanceOf(geographyValue: DbGeography, geometryTypeName: str) -> Nullable: ...
    @overload
    def InstanceOf(geometryValue: DbGeometry, geometryTypeName: str) -> Nullable: ...
    def MakeValid(geometryValue: DbGeometry) -> DbGeometry: ...
    def NumRings(geographyValue: DbGeography) -> Nullable: ...
    def PointGeography(latitude: Nullable, longitude: Nullable, spatialReferenceId: Nullable) -> DbGeography: ...
    def PointGeometry(xCoordinate: Nullable, yCoordinate: Nullable, spatialReferenceId: Nullable) -> DbGeometry: ...
    @overload
    def Reduce(geographyValue: DbGeography, tolerance: Nullable) -> DbGeography: ...
    @overload
    def Reduce(geometryValue: DbGeometry, tolerance: Nullable) -> DbGeometry: ...
    def RingN(geographyValue: DbGeography, index: Nullable) -> DbGeography: ...
