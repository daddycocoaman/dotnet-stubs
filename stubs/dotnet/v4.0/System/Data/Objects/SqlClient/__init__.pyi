from typing import Tuple, Set, Iterable, List


class SqlFunctions(Object):
    @overload
    def Acos(arg1: Nullable) -> Nullable: ...
    @overload
    def Acos(arg1: Nullable) -> Nullable: ...
    def Ascii(arg: str) -> Nullable: ...
    @overload
    def Asin(arg: Nullable) -> Nullable: ...
    @overload
    def Asin(arg: Nullable) -> Nullable: ...
    @overload
    def Atan(arg: Nullable) -> Nullable: ...
    @overload
    def Atan(arg: Nullable) -> Nullable: ...
    @overload
    def Atan2(arg1: Nullable, arg2: Nullable) -> Nullable: ...
    @overload
    def Atan2(arg1: Nullable, arg2: Nullable) -> Nullable: ...
    def Char(arg: Nullable) -> str: ...
    @overload
    def CharIndex(toSearch: str, target: str) -> Nullable: ...
    @overload
    def CharIndex(toSearch: Set(Byte), target: Set(Byte)) -> Nullable: ...
    @overload
    def CharIndex(toSearch: Set(Byte), target: Set(Byte), startLocation: Nullable) -> Nullable: ...
    @overload
    def CharIndex(toSearch: str, target: str, startLocation: Nullable) -> Nullable: ...
    @overload
    def CharIndex(toSearch: Set(Byte), target: Set(Byte), startLocation: Nullable) -> Nullable: ...
    @overload
    def CharIndex(toSearch: str, target: str, startLocation: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: str) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Set(Byte)) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: str, arg2: str) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Set(Byte), arg2: Set(Byte)) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable, arg3: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable, arg3: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable, arg3: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable, arg3: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Set(Byte), arg2: Set(Byte), arg3: Set(Byte)) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable, arg3: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable, arg3: Nullable) -> Nullable: ...
    @overload
    def Checksum(arg1: str, arg2: str, arg3: str) -> Nullable: ...
    @overload
    def Checksum(arg1: Nullable, arg2: Nullable, arg3: Nullable) -> Nullable: ...
    @overload
    def ChecksumAggregate(arg: Iterable[Nullable]) -> Nullable: ...
    @overload
    def ChecksumAggregate(arg: Iterable[int]) -> Nullable: ...
    @overload
    def Cos(arg: Nullable) -> Nullable: ...
    @overload
    def Cos(arg: Nullable) -> Nullable: ...
    @overload
    def Cot(arg: Nullable) -> Nullable: ...
    @overload
    def Cot(arg: Nullable) -> Nullable: ...
    def CurrentTimestamp() -> Nullable: ...
    def CurrentUser() -> str: ...
    @overload
    def DataLength(arg: Set(Byte)) -> Nullable: ...
    @overload
    def DataLength(arg: str) -> Nullable: ...
    @overload
    def DataLength(arg: Nullable) -> Nullable: ...
    @overload
    def DataLength(arg: Nullable) -> Nullable: ...
    @overload
    def DataLength(arg: Nullable) -> Nullable: ...
    @overload
    def DataLength(arg: Nullable) -> Nullable: ...
    @overload
    def DataLength(arg: Nullable) -> Nullable: ...
    @overload
    def DataLength(arg: Nullable) -> Nullable: ...
    @overload
    def DataLength(arg: Nullable) -> Nullable: ...
    @overload
    def DateAdd(datePartArg: str, number: Nullable, date: Nullable) -> Nullable: ...
    @overload
    def DateAdd(datePartArg: str, number: Nullable, time: Nullable) -> Nullable: ...
    @overload
    def DateAdd(datePartArg: str, number: Nullable, date: str) -> Nullable: ...
    @overload
    def DateAdd(datePartArg: str, number: Nullable, dateTimeOffsetArg: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: str, endDate: str) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: str) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: str) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: str) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: str, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: str, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: str, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: Nullable) -> Nullable: ...
    @overload
    def DateDiff(datePartArg: str, startDate: Nullable, endDate: Nullable) -> Nullable: ...
    @overload
    def DateName(datePartArg: str, date: Nullable) -> str: ...
    @overload
    def DateName(datePartArg: str, date: str) -> str: ...
    @overload
    def DateName(datePartArg: str, date: Nullable) -> str: ...
    @overload
    def DateName(datePartArg: str, date: Nullable) -> str: ...
    @overload
    def DatePart(datePartArg: str, date: str) -> Nullable: ...
    @overload
    def DatePart(datePartArg: str, date: Nullable) -> Nullable: ...
    @overload
    def DatePart(datePartArg: str, date: Nullable) -> Nullable: ...
    @overload
    def DatePart(datePartArg: str, date: Nullable) -> Nullable: ...
    @overload
    def Degrees(arg1: Nullable) -> Nullable: ...
    @overload
    def Degrees(arg1: Nullable) -> Nullable: ...
    @overload
    def Degrees(arg1: Nullable) -> Nullable: ...
    @overload
    def Degrees(arg1: Nullable) -> Nullable: ...
    def Difference(string1: str, string2: str) -> Nullable: ...
    @overload
    def Exp(arg: Nullable) -> Nullable: ...
    @overload
    def Exp(arg: Nullable) -> Nullable: ...
    def GetDate() -> Nullable: ...
    def GetUtcDate() -> Nullable: ...
    def HostName() -> str: ...
    def IsDate(arg: str) -> Nullable: ...
    def IsNumeric(arg: str) -> Nullable: ...
    @overload
    def Log(arg: Nullable) -> Nullable: ...
    @overload
    def Log(arg: Nullable) -> Nullable: ...
    @overload
    def Log10(arg: Nullable) -> Nullable: ...
    @overload
    def Log10(arg: Nullable) -> Nullable: ...
    def NChar(arg: Nullable) -> str: ...
    def PatIndex(stringPattern: str, target: str) -> Nullable: ...
    def Pi() -> Nullable: ...
    @overload
    def QuoteName(stringArg: str) -> str: ...
    @overload
    def QuoteName(stringArg: str, quoteCharacter: str) -> str: ...
    @overload
    def Radians(arg: Nullable) -> Nullable: ...
    @overload
    def Radians(arg: Nullable) -> Nullable: ...
    @overload
    def Radians(arg: Nullable) -> Nullable: ...
    @overload
    def Radians(arg: Nullable) -> Nullable: ...
    @overload
    def Rand() -> Nullable: ...
    @overload
    def Rand(seed: Nullable) -> Nullable: ...
    def Replicate(target: str, count: Nullable) -> str: ...
    @overload
    def Sign(arg: Nullable) -> Nullable: ...
    @overload
    def Sign(arg: Nullable) -> Nullable: ...
    @overload
    def Sign(arg: Nullable) -> Nullable: ...
    @overload
    def Sign(arg: Nullable) -> Nullable: ...
    @overload
    def Sin(arg: Nullable) -> Nullable: ...
    @overload
    def Sin(arg: Nullable) -> Nullable: ...
    def SoundCode(arg: str) -> str: ...
    def Space(arg1: Nullable) -> str: ...
    @overload
    def Square(arg1: Nullable) -> Nullable: ...
    @overload
    def Square(arg1: Nullable) -> Nullable: ...
    @overload
    def SquareRoot(arg: Nullable) -> Nullable: ...
    @overload
    def SquareRoot(arg: Nullable) -> Nullable: ...
    @overload
    def StringConvert(number: Nullable) -> str: ...
    @overload
    def StringConvert(number: Nullable) -> str: ...
    @overload
    def StringConvert(number: Nullable, length: Nullable) -> str: ...
    @overload
    def StringConvert(number: Nullable, length: Nullable) -> str: ...
    @overload
    def StringConvert(number: Nullable, length: Nullable, decimalArg: Nullable) -> str: ...
    @overload
    def StringConvert(number: Nullable, length: Nullable, decimalArg: Nullable) -> str: ...
    def Stuff(stringInput: str, start: Nullable, length: Nullable, stringReplacement: str) -> str: ...
    @overload
    def Tan(arg: Nullable) -> Nullable: ...
    @overload
    def Tan(arg: Nullable) -> Nullable: ...
    def Unicode(arg: str) -> Nullable: ...
    @overload
    def UserName() -> str: ...
    @overload
    def UserName(arg: Nullable) -> str: ...


class SqlSpatialFunctions(Object):
    @overload
    def AsTextZM(geographyValue: DbGeography) -> str: ...
    @overload
    def AsTextZM(geometryValue: DbGeometry) -> str: ...
    @overload
    def BufferWithTolerance(geographyValue: DbGeography, distance: Nullable, tolerance: Nullable, relative: Nullable) -> DbGeography: ...
    @overload
    def BufferWithTolerance(geometryValue: DbGeometry, distance: Nullable, tolerance: Nullable, relative: Nullable) -> DbGeometry: ...
    def EnvelopeAngle(geographyValue: DbGeography) -> Nullable: ...
    def EnvelopeCenter(geographyValue: DbGeography) -> DbGeography: ...
    @overload
    def Filter(geographyValue: DbGeography, geographyOther: DbGeography) -> Nullable: ...
    @overload
    def Filter(geometryValue: DbGeometry, geometryOther: DbGeometry) -> Nullable: ...
    @overload
    def InstanceOf(geographyValue: DbGeography, geometryTypeName: str) -> Nullable: ...
    @overload
    def InstanceOf(geometryValue: DbGeometry, geometryTypeName: str) -> Nullable: ...
    def MakeValid(geometryValue: DbGeometry) -> DbGeometry: ...
    def NumRings(geographyValue: DbGeography) -> Nullable: ...
    def PointGeography(latitude: Nullable, longitude: Nullable, spatialReferenceId: Nullable) -> DbGeography: ...
    def PointGeometry(xCoordinate: Nullable, yCoordinate: Nullable, spatialReferenceId: Nullable) -> DbGeometry: ...
    @overload
    def Reduce(geographyValue: DbGeography, tolerance: Nullable) -> DbGeography: ...
    @overload
    def Reduce(geometryValue: DbGeometry, tolerance: Nullable) -> DbGeometry: ...
    def RingN(geographyValue: DbGeography, index: Nullable) -> DbGeography: ...
