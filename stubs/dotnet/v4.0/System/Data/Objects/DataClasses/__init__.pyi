from typing import Tuple, Set, Iterable, List


class ComplexObject(StructuralObject):
    pass


class EdmComplexPropertyAttribute(EdmPropertyAttribute):
    def __init__(self): ...


class EdmComplexTypeAttribute(EdmTypeAttribute):
    def __init__(self): ...


class EdmEntityTypeAttribute(EdmTypeAttribute):
    def __init__(self): ...


class EdmEnumTypeAttribute(EdmTypeAttribute):
    def __init__(self): ...


class EdmFunctionAttribute(Attribute):
    def __init__(self, namespaceName: str, functionName: str): ...
    @property
    def FunctionName(self) -> str: ...
    @property
    def NamespaceName(self) -> str: ...


class EdmPropertyAttribute(Attribute):
    pass


class EdmRelationshipAttribute(Attribute):
    @overload
    def __init__(self, relationshipNamespaceName: str, relationshipName: str, role1Name: str, role1Multiplicity: RelationshipMultiplicity, role1Type: Type, role2Name: str, role2Multiplicity: RelationshipMultiplicity, role2Type: Type): ...
    @overload
    def __init__(self, relationshipNamespaceName: str, relationshipName: str, role1Name: str, role1Multiplicity: RelationshipMultiplicity, role1Type: Type, role2Name: str, role2Multiplicity: RelationshipMultiplicity, role2Type: Type, isForeignKey: bool): ...
    @property
    def IsForeignKey(self) -> bool: ...
    @property
    def RelationshipName(self) -> str: ...
    @property
    def RelationshipNamespaceName(self) -> str: ...
    @property
    def Role1Multiplicity(self) -> RelationshipMultiplicity: ...
    @property
    def Role1Name(self) -> str: ...
    @property
    def Role1Type(self) -> Type: ...
    @property
    def Role2Multiplicity(self) -> RelationshipMultiplicity: ...
    @property
    def Role2Name(self) -> str: ...
    @property
    def Role2Type(self) -> Type: ...


class EdmRelationshipNavigationPropertyAttribute(EdmPropertyAttribute):
    def __init__(self, relationshipNamespaceName: str, relationshipName: str, targetRoleName: str): ...
    @property
    def RelationshipName(self) -> str: ...
    @property
    def RelationshipNamespaceName(self) -> str: ...
    @property
    def TargetRoleName(self) -> str: ...


class EdmScalarPropertyAttribute(EdmPropertyAttribute):
    def __init__(self): ...
    @property
    def EntityKeyProperty(self) -> bool: ...
    @property
    def IsNullable(self) -> bool: ...
    @EntityKeyProperty.setter
    def EntityKeyProperty(self, value: bool) -> None: ...
    @IsNullable.setter
    def IsNullable(self, value: bool) -> None: ...


class EdmSchemaAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assemblyGuid: str): ...


class EdmTypeAttribute(Attribute):
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceName(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @NamespaceName.setter
    def NamespaceName(self, value: str) -> None: ...




class EntityObject(StructuralObject):
    @property
    def EntityKey(self) -> EntityKey: ...
    @property
    def EntityState(self) -> EntityState: ...
    @EntityKey.setter
    def EntityKey(self, value: EntityKey) -> None: ...


class EntityReference(RelatedEnd):
    @property
    def EntityKey(self) -> EntityKey: ...
    @EntityKey.setter
    def EntityKey(self, value: EntityKey) -> None: ...




class IEntityChangeTracker:
    def EntityComplexMemberChanged(self, entityMemberName: str, complexObject: Object, complexObjectMemberName: str) -> None: ...
    def EntityComplexMemberChanging(self, entityMemberName: str, complexObject: Object, complexObjectMemberName: str) -> None: ...
    def EntityMemberChanged(self, entityMemberName: str) -> None: ...
    def EntityMemberChanging(self, entityMemberName: str) -> None: ...
    @property
    def EntityState(self) -> EntityState: ...


class IEntityWithChangeTracker:
    def SetChangeTracker(self, changeTracker: IEntityChangeTracker) -> None: ...


class IEntityWithKey:
    @property
    def EntityKey(self) -> EntityKey: ...
    @EntityKey.setter
    def EntityKey(self, value: EntityKey) -> None: ...


class IEntityWithRelationships:
    @property
    def RelationshipManager(self) -> RelationshipManager: ...


class IRelatedEnd:
    @overload
    def Add(self, entity: IEntityWithRelationships) -> None: ...
    @overload
    def Add(self, entity: Object) -> None: ...
    @overload
    def Attach(self, entity: IEntityWithRelationships) -> None: ...
    @overload
    def Attach(self, entity: Object) -> None: ...
    def CreateSourceQuery(self) -> IEnumerable: ...
    @property
    def IsLoaded(self) -> bool: ...
    @property
    def RelationshipName(self) -> str: ...
    @property
    def RelationshipSet(self) -> RelationshipSet: ...
    @property
    def SourceRoleName(self) -> str: ...
    @property
    def TargetRoleName(self) -> str: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def Load(self) -> None: ...
    @overload
    def Load(self, mergeOption: MergeOption) -> None: ...
    @overload
    def Remove(self, entity: IEntityWithRelationships) -> bool: ...
    @overload
    def Remove(self, entity: Object) -> bool: ...


class RelatedEnd(Object):
    def add_AssociationChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @property
    def IsLoaded(self) -> bool: ...
    @property
    def RelationshipName(self) -> str: ...
    @property
    def RelationshipSet(self) -> RelationshipSet: ...
    @property
    def SourceRoleName(self) -> str: ...
    @property
    def TargetRoleName(self) -> str: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def Load(self) -> None: ...
    @overload
    def Load(self, mergeOption: MergeOption) -> None: ...
    def OnDeserialized(self, context: StreamingContext) -> None: ...
    def remove_AssociationChanged(self, value: CollectionChangeEventHandler) -> None: ...


class RelationshipKind:
    Association = 0


class RelationshipManager(Object):
    def Create(owner: IEntityWithRelationships) -> RelationshipManager: ...
    def GetAllRelatedEnds(self) -> Iterable[IRelatedEnd]: ...
    def GetRelatedCollection(self, relationshipName: str, targetRoleName: str) -> EntityCollection: ...
    def GetRelatedEnd(self, relationshipName: str, targetRoleName: str) -> IRelatedEnd: ...
    def GetRelatedReference(self, relationshipName: str, targetRoleName: str) -> EntityReference: ...
    def InitializeRelatedCollection(self, relationshipName: str, targetRoleName: str, entityCollection: EntityCollection) -> None: ...
    def InitializeRelatedReference(self, relationshipName: str, targetRoleName: str, entityReference: EntityReference) -> None: ...
    def OnDeserialized(self, context: StreamingContext) -> None: ...
    def OnSerializing(self, context: StreamingContext) -> None: ...


class StructuralObject(Object):
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def add_PropertyChanging(self, value: PropertyChangingEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanging(self, value: PropertyChangingEventHandler) -> None: ...
