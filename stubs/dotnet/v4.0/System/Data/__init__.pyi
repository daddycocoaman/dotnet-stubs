__all__ = ['Common','EntityClient','Mapping','Objects','Spatial','SqlClient']
from typing import Tuple, Set, Iterable, List


class EntityCommandCompilationException(EntityException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class EntityCommandExecutionException(EntityException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class EntityException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class EntityKey(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, qualifiedEntitySetName: str, entityKeyValues: Iterable[KeyValuePair]): ...
    @overload
    def __init__(self, qualifiedEntitySetName: str, entityKeyValues: Iterable[EntityKeyMember]): ...
    @overload
    def __init__(self, qualifiedEntitySetName: str, keyName: str, keyValue: Object): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: EntityKey) -> bool: ...
    @property
    def EntityContainerName(self) -> str: ...
    @property
    def EntityKeyValues(self) -> Set(EntityKeyMember): ...
    @property
    def EntitySetName(self) -> str: ...
    @property
    def IsTemporary(self) -> bool: ...
    def GetEntitySet(self, metadataWorkspace: MetadataWorkspace) -> EntitySet: ...
    def GetHashCode(self) -> int: ...
    def OnDeserialized(self, context: StreamingContext) -> None: ...
    def OnDeserializing(self, context: StreamingContext) -> None: ...
    def op_Equality(key1: EntityKey, key2: EntityKey) -> bool: ...
    def op_Inequality(key1: EntityKey, key2: EntityKey) -> bool: ...
    @EntityContainerName.setter
    def EntityContainerName(self, value: str) -> None: ...
    @EntityKeyValues.setter
    def EntityKeyValues(self, value: Set(EntityKeyMember)) -> None: ...
    @EntitySetName.setter
    def EntitySetName(self, value: str) -> None: ...


class EntityKeyMember(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keyName: str, keyValue: Object): ...
    @property
    def Key(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Key.setter
    def Key(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class EntitySqlException(EntityException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def Column(self) -> int: ...
    @property
    def ErrorContext(self) -> str: ...
    @property
    def ErrorDescription(self) -> str: ...
    @property
    def Line(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class EntityState:
    Detached = 1
    Unchanged = 2
    Added = 4
    Deleted = 8
    Modified = 16


class IExtendedDataRecord:
    @property
    def DataRecordInfo(self) -> DataRecordInfo: ...
    def GetDataReader(self, i: int) -> DbDataReader: ...
    def GetDataRecord(self, i: int) -> DbDataRecord: ...


class InvalidCommandTreeException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class MappingException(EntityException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class MetadataException(EntityException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ObjectNotFoundException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class OptimisticConcurrencyException(UpdateException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception, stateEntries: Iterable[ObjectStateEntry]): ...


class PropertyConstraintException(ConstraintException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, propertyName: str): ...
    @overload
    def __init__(self, message: str, propertyName: str, innerException: Exception): ...
    @property
    def PropertyName(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class ProviderIncompatibleException(EntityException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class UpdateException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception, stateEntries: Iterable[ObjectStateEntry]): ...
    @property
    def StateEntries(self) -> ReadOnlyCollection: ...
