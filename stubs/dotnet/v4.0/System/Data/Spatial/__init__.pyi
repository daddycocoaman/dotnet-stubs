from typing import Tuple, Set, Iterable, List


class DbGeography(Object):
    def AsBinary(self) -> Set(Byte): ...
    def AsGml(self) -> str: ...
    def AsText(self) -> str: ...
    def Buffer(self, distance: Nullable) -> DbGeography: ...
    def Difference(self, other: DbGeography) -> DbGeography: ...
    def Disjoint(self, other: DbGeography) -> bool: ...
    def Distance(self, other: DbGeography) -> Nullable: ...
    def ElementAt(self, index: int) -> DbGeography: ...
    @overload
    def FromBinary(wellKnownBinary: Set(Byte)) -> DbGeography: ...
    @overload
    def FromBinary(wellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    @overload
    def FromGml(geographyMarkup: str) -> DbGeography: ...
    @overload
    def FromGml(geographyMarkup: str, coordinateSystemId: int) -> DbGeography: ...
    @overload
    def FromText(wellKnownText: str) -> DbGeography: ...
    @overload
    def FromText(wellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def GeographyCollectionFromBinary(geographyCollectionWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def GeographyCollectionFromText(geographyCollectionWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    @property
    def Area(self) -> Nullable: ...
    @property
    def CoordinateSystemId(self) -> int: ...
    @property
    def DefaultCoordinateSystemId() -> int: ...
    @property
    def Dimension(self) -> int: ...
    @property
    def ElementCount(self) -> Nullable: ...
    @property
    def Elevation(self) -> Nullable: ...
    @property
    def EndPoint(self) -> DbGeography: ...
    @property
    def IsClosed(self) -> Nullable: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Latitude(self) -> Nullable: ...
    @property
    def Length(self) -> Nullable: ...
    @property
    def Longitude(self) -> Nullable: ...
    @property
    def Measure(self) -> Nullable: ...
    @property
    def PointCount(self) -> Nullable: ...
    @property
    def ProviderValue(self) -> Object: ...
    @property
    def SpatialTypeName(self) -> str: ...
    @property
    def StartPoint(self) -> DbGeography: ...
    @property
    def WellKnownValue(self) -> DbGeographyWellKnownValue: ...
    def Intersection(self, other: DbGeography) -> DbGeography: ...
    def Intersects(self, other: DbGeography) -> bool: ...
    def LineFromBinary(lineWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def LineFromText(lineWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def MultiLineFromBinary(multiLineWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def MultiLineFromText(multiLineWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def MultiPointFromBinary(multiPointWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def MultiPointFromText(multiPointWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def MultiPolygonFromBinary(multiPolygonWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def MultiPolygonFromText(multiPolygonWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def PointAt(self, index: int) -> DbGeography: ...
    def PointFromBinary(pointWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def PointFromText(pointWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def PolygonFromBinary(polygonWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def PolygonFromText(polygonWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    @WellKnownValue.setter
    def WellKnownValue(self, value: DbGeographyWellKnownValue) -> None: ...
    def SpatialEquals(self, other: DbGeography) -> bool: ...
    def SymmetricDifference(self, other: DbGeography) -> DbGeography: ...
    def ToString(self) -> str: ...
    def Union(self, other: DbGeography) -> DbGeography: ...


class DbGeographyWellKnownValue(Object):
    def __init__(self): ...
    @property
    def CoordinateSystemId(self) -> int: ...
    @property
    def WellKnownBinary(self) -> Set(Byte): ...
    @property
    def WellKnownText(self) -> str: ...
    @CoordinateSystemId.setter
    def CoordinateSystemId(self, value: int) -> None: ...
    @WellKnownBinary.setter
    def WellKnownBinary(self, value: Set(Byte)) -> None: ...
    @WellKnownText.setter
    def WellKnownText(self, value: str) -> None: ...


class DbGeometry(Object):
    def AsBinary(self) -> Set(Byte): ...
    def AsGml(self) -> str: ...
    def AsText(self) -> str: ...
    def Buffer(self, distance: Nullable) -> DbGeometry: ...
    def Contains(self, other: DbGeometry) -> bool: ...
    def Crosses(self, other: DbGeometry) -> bool: ...
    def Difference(self, other: DbGeometry) -> DbGeometry: ...
    def Disjoint(self, other: DbGeometry) -> bool: ...
    def Distance(self, other: DbGeometry) -> Nullable: ...
    def ElementAt(self, index: int) -> DbGeometry: ...
    @overload
    def FromBinary(wellKnownBinary: Set(Byte)) -> DbGeometry: ...
    @overload
    def FromBinary(wellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    @overload
    def FromGml(geometryMarkup: str) -> DbGeometry: ...
    @overload
    def FromGml(geometryMarkup: str, coordinateSystemId: int) -> DbGeometry: ...
    @overload
    def FromText(wellKnownText: str) -> DbGeometry: ...
    @overload
    def FromText(wellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def GeometryCollectionFromBinary(geometryCollectionWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def GeometryCollectionFromText(geometryCollectionWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    @property
    def Area(self) -> Nullable: ...
    @property
    def Boundary(self) -> DbGeometry: ...
    @property
    def Centroid(self) -> DbGeometry: ...
    @property
    def ConvexHull(self) -> DbGeometry: ...
    @property
    def CoordinateSystemId(self) -> int: ...
    @property
    def DefaultCoordinateSystemId() -> int: ...
    @property
    def Dimension(self) -> int: ...
    @property
    def ElementCount(self) -> Nullable: ...
    @property
    def Elevation(self) -> Nullable: ...
    @property
    def EndPoint(self) -> DbGeometry: ...
    @property
    def Envelope(self) -> DbGeometry: ...
    @property
    def ExteriorRing(self) -> DbGeometry: ...
    @property
    def InteriorRingCount(self) -> Nullable: ...
    @property
    def IsClosed(self) -> Nullable: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsRing(self) -> Nullable: ...
    @property
    def IsSimple(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Length(self) -> Nullable: ...
    @property
    def Measure(self) -> Nullable: ...
    @property
    def PointCount(self) -> Nullable: ...
    @property
    def PointOnSurface(self) -> DbGeometry: ...
    @property
    def ProviderValue(self) -> Object: ...
    @property
    def SpatialTypeName(self) -> str: ...
    @property
    def StartPoint(self) -> DbGeometry: ...
    @property
    def WellKnownValue(self) -> DbGeometryWellKnownValue: ...
    @property
    def XCoordinate(self) -> Nullable: ...
    @property
    def YCoordinate(self) -> Nullable: ...
    def InteriorRingAt(self, index: int) -> DbGeometry: ...
    def Intersection(self, other: DbGeometry) -> DbGeometry: ...
    def Intersects(self, other: DbGeometry) -> bool: ...
    def LineFromBinary(lineWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def LineFromText(lineWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def MultiLineFromBinary(multiLineWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def MultiLineFromText(multiLineWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def MultiPointFromBinary(multiPointWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def MultiPointFromText(multiPointWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def MultiPolygonFromBinary(multiPolygonWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def MultiPolygonFromText(multiPolygonWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def Overlaps(self, other: DbGeometry) -> bool: ...
    def PointAt(self, index: int) -> DbGeometry: ...
    def PointFromBinary(pointWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def PointFromText(pointWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def PolygonFromBinary(polygonWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def PolygonFromText(polygonWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def Relate(self, other: DbGeometry, matrix: str) -> bool: ...
    @WellKnownValue.setter
    def WellKnownValue(self, value: DbGeometryWellKnownValue) -> None: ...
    def SpatialEquals(self, other: DbGeometry) -> bool: ...
    def SymmetricDifference(self, other: DbGeometry) -> DbGeometry: ...
    def ToString(self) -> str: ...
    def Touches(self, other: DbGeometry) -> bool: ...
    def Union(self, other: DbGeometry) -> DbGeometry: ...
    def Within(self, other: DbGeometry) -> bool: ...


class DbGeometryWellKnownValue(Object):
    def __init__(self): ...
    @property
    def CoordinateSystemId(self) -> int: ...
    @property
    def WellKnownBinary(self) -> Set(Byte): ...
    @property
    def WellKnownText(self) -> str: ...
    @CoordinateSystemId.setter
    def CoordinateSystemId(self, value: int) -> None: ...
    @WellKnownBinary.setter
    def WellKnownBinary(self, value: Set(Byte)) -> None: ...
    @WellKnownText.setter
    def WellKnownText(self, value: str) -> None: ...


class DbSpatialDataReader(Object):
    def GetGeography(self, ordinal: int) -> DbGeography: ...
    def GetGeometry(self, ordinal: int) -> DbGeometry: ...


class DbSpatialServices(Object):
    @overload
    def AsBinary(self, geometryValue: DbGeometry) -> Set(Byte): ...
    @overload
    def AsBinary(self, geographyValue: DbGeography) -> Set(Byte): ...
    @overload
    def AsGml(self, geometryValue: DbGeometry) -> str: ...
    @overload
    def AsGml(self, geographyValue: DbGeography) -> str: ...
    @overload
    def AsText(self, geometryValue: DbGeometry) -> str: ...
    @overload
    def AsText(self, geographyValue: DbGeography) -> str: ...
    @overload
    def AsTextIncludingElevationAndMeasure(self, geographyValue: DbGeography) -> str: ...
    @overload
    def AsTextIncludingElevationAndMeasure(self, geometryValue: DbGeometry) -> str: ...
    @overload
    def Buffer(self, geographyValue: DbGeography, distance: float) -> DbGeography: ...
    @overload
    def Buffer(self, geometryValue: DbGeometry, distance: float) -> DbGeometry: ...
    def Contains(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> bool: ...
    @overload
    def CreateProviderValue(self, wellKnownValue: DbGeometryWellKnownValue) -> Object: ...
    @overload
    def CreateProviderValue(self, wellKnownValue: DbGeographyWellKnownValue) -> Object: ...
    @overload
    def CreateWellKnownValue(self, geometryValue: DbGeometry) -> DbGeometryWellKnownValue: ...
    @overload
    def CreateWellKnownValue(self, geographyValue: DbGeography) -> DbGeographyWellKnownValue: ...
    def Crosses(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> bool: ...
    @overload
    def Difference(self, geographyValue: DbGeography, otherGeography: DbGeography) -> DbGeography: ...
    @overload
    def Difference(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> DbGeometry: ...
    @overload
    def Disjoint(self, geographyValue: DbGeography, otherGeography: DbGeography) -> bool: ...
    @overload
    def Disjoint(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> bool: ...
    @overload
    def Distance(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> float: ...
    @overload
    def Distance(self, geographyValue: DbGeography, otherGeography: DbGeography) -> float: ...
    @overload
    def ElementAt(self, geometryValue: DbGeometry, index: int) -> DbGeometry: ...
    @overload
    def ElementAt(self, geographyValue: DbGeography, index: int) -> DbGeography: ...
    def GeographyCollectionFromBinary(self, geographyCollectionWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def GeographyCollectionFromText(self, geographyCollectionWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    @overload
    def GeographyFromBinary(self, wellKnownBinary: Set(Byte)) -> DbGeography: ...
    @overload
    def GeographyFromBinary(self, wellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    @overload
    def GeographyFromGml(self, geographyMarkup: str) -> DbGeography: ...
    @overload
    def GeographyFromGml(self, geographyMarkup: str, coordinateSystemId: int) -> DbGeography: ...
    def GeographyFromProviderValue(self, providerValue: Object) -> DbGeography: ...
    @overload
    def GeographyFromText(self, wellKnownText: str) -> DbGeography: ...
    @overload
    def GeographyFromText(self, wellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def GeographyLineFromBinary(self, lineWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def GeographyLineFromText(self, lineWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def GeographyMultiLineFromBinary(self, multiLineWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def GeographyMultiLineFromText(self, multiLineWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def GeographyMultiPointFromBinary(self, multiPointWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def GeographyMultiPointFromText(self, multiPointWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def GeographyMultiPolygonFromBinary(self, multiPolygonWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def GeographyMultiPolygonFromText(self, multiPolygonWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def GeographyPointFromBinary(self, pointWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def GeographyPointFromText(self, pointWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def GeographyPolygonFromBinary(self, polygonWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeography: ...
    def GeographyPolygonFromText(self, polygonWellKnownText: str, coordinateSystemId: int) -> DbGeography: ...
    def GeometryCollectionFromBinary(self, geometryCollectionWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def GeometryCollectionFromText(self, geometryCollectionWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    @overload
    def GeometryFromBinary(self, wellKnownBinary: Set(Byte)) -> DbGeometry: ...
    @overload
    def GeometryFromBinary(self, wellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    @overload
    def GeometryFromGml(self, geometryMarkup: str) -> DbGeometry: ...
    @overload
    def GeometryFromGml(self, geometryMarkup: str, coordinateSystemId: int) -> DbGeometry: ...
    def GeometryFromProviderValue(self, providerValue: Object) -> DbGeometry: ...
    @overload
    def GeometryFromText(self, wellKnownText: str) -> DbGeometry: ...
    @overload
    def GeometryFromText(self, wellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def GeometryLineFromBinary(self, lineWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def GeometryLineFromText(self, lineWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def GeometryMultiLineFromBinary(self, multiLineWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def GeometryMultiLineFromText(self, multiLineWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def GeometryMultiPointFromBinary(self, multiPointWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def GeometryMultiPointFromText(self, multiPointWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def GeometryMultiPolygonFromBinary(self, multiPolygonWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def GeometryMultiPolygonFromText(self, multiPolygonKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def GeometryPointFromBinary(self, pointWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def GeometryPointFromText(self, pointWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    def GeometryPolygonFromBinary(self, polygonWellKnownBinary: Set(Byte), coordinateSystemId: int) -> DbGeometry: ...
    def GeometryPolygonFromText(self, polygonWellKnownText: str, coordinateSystemId: int) -> DbGeometry: ...
    @property
    def Default() -> DbSpatialServices: ...
    @overload
    def GetArea(self, geographyValue: DbGeography) -> Nullable: ...
    @overload
    def GetArea(self, geometryValue: DbGeometry) -> Nullable: ...
    def GetBoundary(self, geometryValue: DbGeometry) -> DbGeometry: ...
    def GetCentroid(self, geometryValue: DbGeometry) -> DbGeometry: ...
    def GetConvexHull(self, geometryValue: DbGeometry) -> DbGeometry: ...
    @overload
    def GetCoordinateSystemId(self, geographyValue: DbGeography) -> int: ...
    @overload
    def GetCoordinateSystemId(self, geometryValue: DbGeometry) -> int: ...
    @overload
    def GetDimension(self, geographyValue: DbGeography) -> int: ...
    @overload
    def GetDimension(self, geometryValue: DbGeometry) -> int: ...
    @overload
    def GetElementCount(self, geographyValue: DbGeography) -> Nullable: ...
    @overload
    def GetElementCount(self, geometryValue: DbGeometry) -> Nullable: ...
    @overload
    def GetElevation(self, geometryValue: DbGeometry) -> Nullable: ...
    @overload
    def GetElevation(self, geographyValue: DbGeography) -> Nullable: ...
    @overload
    def GetEndPoint(self, geographyValue: DbGeography) -> DbGeography: ...
    @overload
    def GetEndPoint(self, geometryValue: DbGeometry) -> DbGeometry: ...
    def GetEnvelope(self, geometryValue: DbGeometry) -> DbGeometry: ...
    def GetExteriorRing(self, geometryValue: DbGeometry) -> DbGeometry: ...
    def GetInteriorRingCount(self, geometryValue: DbGeometry) -> Nullable: ...
    @overload
    def GetIsClosed(self, geometryValue: DbGeometry) -> Nullable: ...
    @overload
    def GetIsClosed(self, geographyValue: DbGeography) -> Nullable: ...
    @overload
    def GetIsEmpty(self, geometryValue: DbGeometry) -> bool: ...
    @overload
    def GetIsEmpty(self, geographyValue: DbGeography) -> bool: ...
    def GetIsRing(self, geometryValue: DbGeometry) -> Nullable: ...
    def GetIsSimple(self, geometryValue: DbGeometry) -> bool: ...
    def GetIsValid(self, geometryValue: DbGeometry) -> bool: ...
    def GetLatitude(self, geographyValue: DbGeography) -> Nullable: ...
    @overload
    def GetLength(self, geometryValue: DbGeometry) -> Nullable: ...
    @overload
    def GetLength(self, geographyValue: DbGeography) -> Nullable: ...
    def GetLongitude(self, geographyValue: DbGeography) -> Nullable: ...
    @overload
    def GetMeasure(self, geometryValue: DbGeometry) -> Nullable: ...
    @overload
    def GetMeasure(self, geographyValue: DbGeography) -> Nullable: ...
    @overload
    def GetPointCount(self, geometryValue: DbGeometry) -> Nullable: ...
    @overload
    def GetPointCount(self, geographyValue: DbGeography) -> Nullable: ...
    def GetPointOnSurface(self, geometryValue: DbGeometry) -> DbGeometry: ...
    @overload
    def GetSpatialTypeName(self, geometryValue: DbGeometry) -> str: ...
    @overload
    def GetSpatialTypeName(self, geographyValue: DbGeography) -> str: ...
    @overload
    def GetStartPoint(self, geometryValue: DbGeometry) -> DbGeometry: ...
    @overload
    def GetStartPoint(self, geographyValue: DbGeography) -> DbGeography: ...
    def GetXCoordinate(self, geometryValue: DbGeometry) -> Nullable: ...
    def GetYCoordinate(self, geometryValue: DbGeometry) -> Nullable: ...
    def InteriorRingAt(self, geometryValue: DbGeometry, index: int) -> DbGeometry: ...
    @overload
    def Intersection(self, geographyValue: DbGeography, otherGeography: DbGeography) -> DbGeography: ...
    @overload
    def Intersection(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> DbGeometry: ...
    @overload
    def Intersects(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> bool: ...
    @overload
    def Intersects(self, geographyValue: DbGeography, otherGeography: DbGeography) -> bool: ...
    def Overlaps(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> bool: ...
    @overload
    def PointAt(self, geographyValue: DbGeography, index: int) -> DbGeography: ...
    @overload
    def PointAt(self, geometryValue: DbGeometry, index: int) -> DbGeometry: ...
    def Relate(self, geometryValue: DbGeometry, otherGeometry: DbGeometry, matrix: str) -> bool: ...
    @overload
    def SpatialEquals(self, geographyValue: DbGeography, otherGeography: DbGeography) -> bool: ...
    @overload
    def SpatialEquals(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> bool: ...
    @overload
    def SymmetricDifference(self, geographyValue: DbGeography, otherGeography: DbGeography) -> DbGeography: ...
    @overload
    def SymmetricDifference(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> DbGeometry: ...
    def Touches(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> bool: ...
    @overload
    def Union(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> DbGeometry: ...
    @overload
    def Union(self, geographyValue: DbGeography, otherGeography: DbGeography) -> DbGeography: ...
    def Within(self, geometryValue: DbGeometry, otherGeometry: DbGeometry) -> bool: ...
