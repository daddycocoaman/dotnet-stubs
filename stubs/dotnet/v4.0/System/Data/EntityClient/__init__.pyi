from typing import Tuple, Set, Iterable, List


class EntityCommand(DbCommand):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, statement: str): ...
    @overload
    def __init__(self, statement: str, connection: EntityConnection): ...
    @overload
    def __init__(self, statement: str, connection: EntityConnection, transaction: EntityTransaction): ...
    def Cancel(self) -> None: ...
    @overload
    def CreateParameter(self) -> EntityParameter: ...
    def ExecuteNonQuery(self) -> int: ...
    @overload
    def ExecuteReader(self) -> EntityDataReader: ...
    @overload
    def ExecuteReader(self, behavior: CommandBehavior) -> EntityDataReader: ...
    def ExecuteScalar(self) -> Object: ...
    @property
    def CommandText(self) -> str: ...
    @property
    def CommandTimeout(self) -> int: ...
    @property
    def CommandTree(self) -> DbCommandTree: ...
    @property
    def CommandType(self) -> CommandType: ...
    @property
    def Connection(self) -> EntityConnection: ...
    @property
    def DesignTimeVisible(self) -> bool: ...
    @property
    def EnablePlanCaching(self) -> bool: ...
    @property
    def Parameters(self) -> EntityParameterCollection: ...
    @property
    def Transaction(self) -> EntityTransaction: ...
    @property
    def UpdatedRowSource(self) -> UpdateRowSource: ...
    def Prepare(self) -> None: ...
    @CommandText.setter
    def CommandText(self, value: str) -> None: ...
    @CommandTimeout.setter
    def CommandTimeout(self, value: int) -> None: ...
    @CommandTree.setter
    def CommandTree(self, value: DbCommandTree) -> None: ...
    @CommandType.setter
    def CommandType(self, value: CommandType) -> None: ...
    @Connection.setter
    def Connection(self, value: EntityConnection) -> None: ...
    @DesignTimeVisible.setter
    def DesignTimeVisible(self, value: bool) -> None: ...
    @EnablePlanCaching.setter
    def EnablePlanCaching(self, value: bool) -> None: ...
    @Transaction.setter
    def Transaction(self, value: EntityTransaction) -> None: ...
    @UpdatedRowSource.setter
    def UpdatedRowSource(self, value: UpdateRowSource) -> None: ...
    def ToTraceString(self) -> str: ...


class EntityConnection(DbConnection):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, connectionString: str): ...
    @overload
    def __init__(self, workspace: MetadataWorkspace, connection: DbConnection): ...
    @overload
    def BeginTransaction(self) -> EntityTransaction: ...
    @overload
    def BeginTransaction(self, isolationLevel: IsolationLevel) -> EntityTransaction: ...
    def ChangeDatabase(self, databaseName: str) -> None: ...
    def Close(self) -> None: ...
    @overload
    def CreateCommand(self) -> EntityCommand: ...
    def EnlistTransaction(self, transaction: Transaction) -> None: ...
    @property
    def ConnectionString(self) -> str: ...
    @property
    def ConnectionTimeout(self) -> int: ...
    @property
    def Database(self) -> str: ...
    @property
    def DataSource(self) -> str: ...
    @property
    def ServerVersion(self) -> str: ...
    @property
    def State(self) -> ConnectionState: ...
    @property
    def StoreConnection(self) -> DbConnection: ...
    def GetMetadataWorkspace(self) -> MetadataWorkspace: ...
    def Open(self) -> None: ...
    @ConnectionString.setter
    def ConnectionString(self, value: str) -> None: ...


class EntityConnectionStringBuilder(DbConnectionStringBuilder):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, connectionString: str): ...
    def Clear(self) -> None: ...
    def ContainsKey(self, keyword: str) -> bool: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def Item(self, keyword: str) -> Object: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Metadata(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Provider(self) -> str: ...
    @property
    def ProviderConnectionString(self) -> str: ...
    def Remove(self, keyword: str) -> bool: ...
    @Item.setter
    def Item(self, keyword: str, value: Object) -> None: ...
    @Metadata.setter
    def Metadata(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Provider.setter
    def Provider(self, value: str) -> None: ...
    @ProviderConnectionString.setter
    def ProviderConnectionString(self, value: str) -> None: ...
    def TryGetValue(self, keyword: str) -> Tuple[bool, Object]: ...


class EntityDataReader(DbDataReader):
    def Close(self) -> None: ...
    @property
    def DataRecordInfo(self) -> DataRecordInfo: ...
    @property
    def Depth(self) -> int: ...
    @property
    def FieldCount(self) -> int: ...
    @property
    def HasRows(self) -> bool: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def Item(self, ordinal: int) -> Object: ...
    @property
    def Item(self, name: str) -> Object: ...
    @property
    def RecordsAffected(self) -> int: ...
    @property
    def VisibleFieldCount(self) -> int: ...
    def GetBoolean(self, ordinal: int) -> bool: ...
    def GetByte(self, ordinal: int) -> Byte: ...
    def GetBytes(self, ordinal: int, dataOffset: Int64, buffer: Set(Byte), bufferOffset: int, length: int) -> Int64: ...
    def GetChar(self, ordinal: int) -> Char: ...
    def GetChars(self, ordinal: int, dataOffset: Int64, buffer: Set(Char), bufferOffset: int, length: int) -> Int64: ...
    def GetDataReader(self, i: int) -> DbDataReader: ...
    def GetDataRecord(self, i: int) -> DbDataRecord: ...
    def GetDataTypeName(self, ordinal: int) -> str: ...
    def GetDateTime(self, ordinal: int) -> DateTime: ...
    def GetDecimal(self, ordinal: int) -> Decimal: ...
    def GetDouble(self, ordinal: int) -> float: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetFieldType(self, ordinal: int) -> Type: ...
    def GetFloat(self, ordinal: int) -> Single: ...
    def GetGuid(self, ordinal: int) -> Guid: ...
    def GetInt16(self, ordinal: int) -> Int16: ...
    def GetInt32(self, ordinal: int) -> int: ...
    def GetInt64(self, ordinal: int) -> Int64: ...
    def GetName(self, ordinal: int) -> str: ...
    def GetOrdinal(self, name: str) -> int: ...
    def GetProviderSpecificFieldType(self, ordinal: int) -> Type: ...
    def GetProviderSpecificValue(self, ordinal: int) -> Object: ...
    def GetProviderSpecificValues(self, values: Set(Object)) -> int: ...
    def GetSchemaTable(self) -> DataTable: ...
    def GetString(self, ordinal: int) -> str: ...
    def GetValue(self, ordinal: int) -> Object: ...
    def GetValues(self, values: Set(Object)) -> int: ...
    def IsDBNull(self, ordinal: int) -> bool: ...
    def NextResult(self) -> bool: ...
    def Read(self) -> bool: ...


class EntityParameter(DbParameter):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parameterName: str, dbType: DbType): ...
    @overload
    def __init__(self, parameterName: str, dbType: DbType, size: int): ...
    @overload
    def __init__(self, parameterName: str, dbType: DbType, size: int, sourceColumn: str): ...
    @overload
    def __init__(self, parameterName: str, dbType: DbType, size: int, direction: ParameterDirection, isNullable: bool, precision: Byte, scale: Byte, sourceColumn: str, sourceVersion: DataRowVersion, value: Object): ...
    @property
    def DbType(self) -> DbType: ...
    @property
    def Direction(self) -> ParameterDirection: ...
    @property
    def EdmType(self) -> EdmType: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def ParameterName(self) -> str: ...
    @property
    def Precision(self) -> Byte: ...
    @property
    def Scale(self) -> Byte: ...
    @property
    def Size(self) -> int: ...
    @property
    def SourceColumn(self) -> str: ...
    @property
    def SourceColumnNullMapping(self) -> bool: ...
    @property
    def SourceVersion(self) -> DataRowVersion: ...
    @property
    def Value(self) -> Object: ...
    def ResetDbType(self) -> None: ...
    @DbType.setter
    def DbType(self, value: DbType) -> None: ...
    @Direction.setter
    def Direction(self, value: ParameterDirection) -> None: ...
    @EdmType.setter
    def EdmType(self, value: EdmType) -> None: ...
    @IsNullable.setter
    def IsNullable(self, value: bool) -> None: ...
    @ParameterName.setter
    def ParameterName(self, value: str) -> None: ...
    @Precision.setter
    def Precision(self, value: Byte) -> None: ...
    @Scale.setter
    def Scale(self, value: Byte) -> None: ...
    @Size.setter
    def Size(self, value: int) -> None: ...
    @SourceColumn.setter
    def SourceColumn(self, value: str) -> None: ...
    @SourceColumnNullMapping.setter
    def SourceColumnNullMapping(self, value: bool) -> None: ...
    @SourceVersion.setter
    def SourceVersion(self, value: DataRowVersion) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class EntityParameterCollection(DbParameterCollection):
    @overload
    def Add(self, value: EntityParameter) -> EntityParameter: ...
    @overload
    def Add(self, value: Object) -> int: ...
    @overload
    def Add(self, parameterName: str, dbType: DbType) -> EntityParameter: ...
    @overload
    def Add(self, parameterName: str, dbType: DbType, size: int) -> EntityParameter: ...
    @overload
    def AddRange(self, values: Set(EntityParameter)) -> None: ...
    @overload
    def AddRange(self, values: Array) -> None: ...
    def AddWithValue(self, parameterName: str, value: Object) -> EntityParameter: ...
    def Clear(self) -> None: ...
    @overload
    def Contains(self, parameterName: str) -> bool: ...
    @overload
    def Contains(self, value: Object) -> bool: ...
    @overload
    def CopyTo(self, array: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: Set(EntityParameter), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, index: int) -> EntityParameter: ...
    @property
    def Item(self, parameterName: str) -> EntityParameter: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def IndexOf(self, value: EntityParameter) -> int: ...
    @overload
    def IndexOf(self, value: Object) -> int: ...
    @overload
    def IndexOf(self, parameterName: str) -> int: ...
    @overload
    def Insert(self, index: int, value: EntityParameter) -> None: ...
    @overload
    def Insert(self, index: int, value: Object) -> None: ...
    @overload
    def Remove(self, value: EntityParameter) -> None: ...
    @overload
    def Remove(self, value: Object) -> None: ...
    @overload
    def RemoveAt(self, parameterName: str) -> None: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, parameterName: str, value: EntityParameter) -> None: ...
    @Item.setter
    def Item(self, index: int, value: EntityParameter) -> None: ...


class EntityProviderFactory(DbProviderFactory):
    def CreateCommand(self) -> DbCommand: ...
    def CreateCommandBuilder(self) -> DbCommandBuilder: ...
    def CreateConnection(self) -> DbConnection: ...
    def CreateConnectionStringBuilder(self) -> DbConnectionStringBuilder: ...
    def CreateDataAdapter(self) -> DbDataAdapter: ...
    def CreateParameter(self) -> DbParameter: ...
    def CreatePermission(self, state: PermissionState) -> CodeAccessPermission: ...


class EntityTransaction(DbTransaction):
    def Commit(self) -> None: ...
    @property
    def Connection(self) -> EntityConnection: ...
    @property
    def IsolationLevel(self) -> IsolationLevel: ...
    def Rollback(self) -> None: ...
