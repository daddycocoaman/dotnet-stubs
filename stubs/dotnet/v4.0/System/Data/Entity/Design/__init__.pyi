__all__ = ['AspNet','PluralizationServices']
from typing import Tuple, Set, Iterable, List


class EdmToObjectNamespaceMap(Object):
    def Add(self, edmNamespace: str, objectNamespace: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, edmNamespace: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def EdmNamespaces(self) -> ICollection: ...
    @property
    def Item(self, edmNamespace: str) -> str: ...
    def Remove(self, edmNamespace: str) -> bool: ...
    @Item.setter
    def Item(self, edmNamespace: str, value: str) -> None: ...
    def TryGetObjectNamespace(self, edmNamespace: str) -> Tuple[bool, str]: ...


class EntityClassGenerator(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, languageOption: LanguageOption): ...
    def add_OnPropertyGenerated(self, value: PropertyGeneratedEventHandler) -> None: ...
    def add_OnTypeGenerated(self, value: TypeGeneratedEventHandler) -> None: ...
    @overload
    def GenerateCode(self, sourceEdmSchema: XmlReader, target: TextWriter) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceEdmSchemaFilePath: str, targetFilePath: str) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceEdmSchema: XmlReader, target: TextWriter, additionalEdmSchemas: Iterable[XmlReader]) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceEdmSchemaFilePath: str, targetPath: str, additionalEdmSchemaFilePaths: Iterable[str]) -> List[EdmSchemaError]: ...
    @property
    def EdmToObjectNamespaceMap(self) -> EdmToObjectNamespaceMap: ...
    @property
    def LanguageOption(self) -> LanguageOption: ...
    def remove_OnPropertyGenerated(self, value: PropertyGeneratedEventHandler) -> None: ...
    def remove_OnTypeGenerated(self, value: TypeGeneratedEventHandler) -> None: ...
    @LanguageOption.setter
    def LanguageOption(self, value: LanguageOption) -> None: ...


class EntityCodeGenerator(Object):
    def __init__(self, languageOption: LanguageOption): ...
    @overload
    def GenerateCode(self, sourceEdmSchemaFilePath: str, targetPath: str) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceEdmSchema: XmlReader, target: TextWriter) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceEdmSchemaFilePath: str, targetPath: str, additionalEdmSchemaFilePaths: Iterable[str]) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceEdmSchemaFilePath: str, targetPath: str, targetEntityFrameworkVersion: Version) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceEdmSchema: XmlReader, target: TextWriter, targetEntityFrameworkVersion: Version) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceEdmSchema: XmlReader, target: TextWriter, additionalEdmSchemas: Iterable[XmlReader]) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceEdmSchemaFilePath: str, targetPath: str, additionalEdmSchemaFilePaths: Iterable[str], targetEntityFrameworkVersion: Version) -> List[EdmSchemaError]: ...
    @overload
    def GenerateCode(self, sourceEdmSchema: XmlReader, target: TextWriter, additionalEdmSchemas: Iterable[XmlReader], targetEntityFrameworkVersion: Version) -> List[EdmSchemaError]: ...
    @property
    def EdmToObjectNamespaceMap(self) -> EdmToObjectNamespaceMap: ...
    @property
    def LanguageOption(self) -> LanguageOption: ...
    @LanguageOption.setter
    def LanguageOption(self, value: LanguageOption) -> None: ...


class EntityFrameworkVersions(Object):
    def GetSchemaXsd(entityFrameworkVersion: Version, dataSpace: DataSpace) -> Stream: ...


class EntityModelSchemaGenerator(Object):
    @overload
    def __init__(self, storeEntityContainer: EntityContainer): ...
    @overload
    def __init__(self, storeEntityContainer: EntityContainer, namespaceName: str, modelEntityContainerName: str): ...
    @overload
    def __init__(self, storeItemCollection: StoreItemCollection, namespaceName: str, modelEntityContainerName: str): ...
    @overload
    def GenerateMetadata(self) -> List[EdmSchemaError]: ...
    @overload
    def GenerateMetadata(self, targetEntityFrameworkVersion: Version) -> List[EdmSchemaError]: ...
    @property
    def EdmItemCollection(self) -> EdmItemCollection: ...
    @property
    def EntityContainer(self) -> EntityContainer: ...
    @property
    def GenerateForeignKeyProperties(self) -> bool: ...
    @property
    def PluralizationService(self) -> PluralizationService: ...
    @GenerateForeignKeyProperties.setter
    def GenerateForeignKeyProperties(self, value: bool) -> None: ...
    @PluralizationService.setter
    def PluralizationService(self, value: PluralizationService) -> None: ...
    @overload
    def WriteModelSchema(self, outputFileName: str) -> None: ...
    @overload
    def WriteModelSchema(self, writer: XmlWriter) -> None: ...
    @overload
    def WriteStorageMapping(self, outputFileName: str) -> None: ...
    @overload
    def WriteStorageMapping(self, writer: XmlWriter) -> None: ...


class EntityStoreSchemaFilterEffect:
    Allow = 0
    Exclude = 1


class EntityStoreSchemaFilterEntry(Object):
    @overload
    def __init__(self, catalog: str, schema: str, name: str): ...
    @overload
    def __init__(self, catalog: str, schema: str, name: str, types: EntityStoreSchemaFilterObjectTypes, effect: EntityStoreSchemaFilterEffect): ...
    @property
    def Catalog(self) -> str: ...
    @property
    def Effect(self) -> EntityStoreSchemaFilterEffect: ...
    @property
    def Name(self) -> str: ...
    @property
    def Schema(self) -> str: ...
    @property
    def Types(self) -> EntityStoreSchemaFilterObjectTypes: ...


class EntityStoreSchemaFilterObjectTypes:
    #None = 0
    Table = 1
    View = 2
    Function = 4
    All = 7


class EntityStoreSchemaGenerator(Object):
    def __init__(self, providerInvariantName: str, connectionString: str, namespaceName: str): ...
    @overload
    def CreateStoreSchemaConnection(providerInvariantName: str, connectionString: str) -> EntityConnection: ...
    @overload
    def CreateStoreSchemaConnection(providerInvariantName: str, connectionString: str, targetEntityFrameworkVersion: Version) -> EntityConnection: ...
    @overload
    def GenerateStoreMetadata(self) -> List[EdmSchemaError]: ...
    @overload
    def GenerateStoreMetadata(self, filters: Iterable[EntityStoreSchemaFilterEntry]) -> List[EdmSchemaError]: ...
    @overload
    def GenerateStoreMetadata(self, filters: Iterable[EntityStoreSchemaFilterEntry], targetEntityFrameworkVersion: Version) -> List[EdmSchemaError]: ...
    @property
    def EntityContainer(self) -> EntityContainer: ...
    @property
    def GenerateForeignKeyProperties(self) -> bool: ...
    @property
    def StoreItemCollection(self) -> StoreItemCollection: ...
    @GenerateForeignKeyProperties.setter
    def GenerateForeignKeyProperties(self, value: bool) -> None: ...
    @overload
    def WriteStoreSchema(self, outputFileName: str) -> None: ...
    @overload
    def WriteStoreSchema(self, writer: XmlWriter) -> None: ...


class EntityViewGenerator(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, languageOption: LanguageOption): ...
    @overload
    def GenerateViews(self, mappingCollection: StorageMappingItemCollection, outputPath: str) -> List[EdmSchemaError]: ...
    @overload
    def GenerateViews(self, mappingCollection: StorageMappingItemCollection, outputWriter: TextWriter) -> List[EdmSchemaError]: ...
    @overload
    def GenerateViews(self, mappingCollection: StorageMappingItemCollection, outputWriter: TextWriter, targetEntityFrameworkVersion: Version) -> List[EdmSchemaError]: ...
    @property
    def LanguageOption(self) -> LanguageOption: ...
    @LanguageOption.setter
    def LanguageOption(self, value: LanguageOption) -> None: ...
    @overload
    def Validate(mappingCollection: StorageMappingItemCollection) -> List[EdmSchemaError]: ...
    @overload
    def Validate(mappingCollection: StorageMappingItemCollection, targetEntityFrameworkVersion: Version) -> List[EdmSchemaError]: ...


class LanguageOption:
    GenerateCSharpCode = 0
    GenerateVBCode = 1


class MetadataExtensionMethods(Object):
    def GetPrimitiveTypes(itemCollection: EdmItemCollection, edmVersion: Version) -> ReadOnlyCollection: ...


class MetadataItemCollectionFactory(Object):
    @overload
    def CreateEdmItemCollection(readers: Iterable[XmlReader]) -> Tuple[EdmItemCollection, List[EdmSchemaError]]: ...
    @overload
    def CreateEdmItemCollection(readers: Iterable[XmlReader], targetEntityFrameworkVersion: Version) -> Tuple[EdmItemCollection, List[EdmSchemaError]]: ...
    @overload
    def CreateStorageMappingItemCollection(edmCollection: EdmItemCollection, storeCollection: StoreItemCollection, readers: Iterable[XmlReader]) -> Tuple[StorageMappingItemCollection, List[EdmSchemaError]]: ...
    @overload
    def CreateStorageMappingItemCollection(edmCollection: EdmItemCollection, storeCollection: StoreItemCollection, readers: Iterable[XmlReader], targetEntityFrameworkVersion: Version) -> Tuple[StorageMappingItemCollection, List[EdmSchemaError]]: ...
    @overload
    def CreateStoreItemCollection(readers: Iterable[XmlReader]) -> Tuple[StoreItemCollection, List[EdmSchemaError]]: ...
    @overload
    def CreateStoreItemCollection(readers: Iterable[XmlReader], targetEntityFrameworkVersion: Version) -> Tuple[StoreItemCollection, List[EdmSchemaError]]: ...


class PropertyGeneratedEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, propertySource: MetadataItem, backingFieldName: str, returnType: CodeTypeReference): ...
    @property
    def AdditionalAttributes(self) -> List: ...
    @property
    def AdditionalGetStatements(self) -> List: ...
    @property
    def AdditionalSetStatements(self) -> List: ...
    @property
    def BackingFieldName(self) -> str: ...
    @property
    def PropertySource(self) -> MetadataItem: ...
    @property
    def ReturnType(self) -> CodeTypeReference: ...
    @ReturnType.setter
    def ReturnType(self, value: CodeTypeReference) -> None: ...


class PropertyGeneratedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PropertyGeneratedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PropertyGeneratedEventArgs) -> None: ...


class TypeGeneratedEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeSource: GlobalItem, baseType: CodeTypeReference): ...
    @property
    def AdditionalAttributes(self) -> List: ...
    @property
    def AdditionalInterfaces(self) -> List: ...
    @property
    def AdditionalMembers(self) -> List: ...
    @property
    def BaseType(self) -> CodeTypeReference: ...
    @property
    def TypeSource(self) -> GlobalItem: ...
    @BaseType.setter
    def BaseType(self, value: CodeTypeReference) -> None: ...


class TypeGeneratedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TypeGeneratedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TypeGeneratedEventArgs) -> None: ...
