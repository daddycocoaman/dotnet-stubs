from typing import Tuple, Set, Iterable, List


class EndpointIdentityConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class ServiceXNameTypeConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class SpnEndpointIdentityExtension(MarkupExtension):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, identity: SpnEndpointIdentity): ...
    @property
    def SpnName(self) -> str: ...
    def ProvideValue(self, serviceProvider: IServiceProvider) -> Object: ...
    @SpnName.setter
    def SpnName(self, value: str) -> None: ...


class UpnEndpointIdentityExtension(MarkupExtension):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, identity: UpnEndpointIdentity): ...
    @property
    def UpnName(self) -> str: ...
    def ProvideValue(self, serviceProvider: IServiceProvider) -> Object: ...
    @UpnName.setter
    def UpnName(self, value: str) -> None: ...
