from typing import Tuple, Set, Iterable, List


class ClaimTypeRequirement(Object):
    @overload
    def __init__(self, claimType: str): ...
    @overload
    def __init__(self, claimType: str, isOptional: bool): ...
    @property
    def ClaimType(self) -> str: ...
    @property
    def IsOptional(self) -> bool: ...


class IIssuanceSecurityTokenAuthenticator:
    @property
    def IssuedSecurityTokenHandler(self) -> IssuedSecurityTokenHandler: ...
    @property
    def RenewedSecurityTokenHandler(self) -> RenewedSecurityTokenHandler: ...
    @IssuedSecurityTokenHandler.setter
    def IssuedSecurityTokenHandler(self, value: IssuedSecurityTokenHandler) -> None: ...
    @RenewedSecurityTokenHandler.setter
    def RenewedSecurityTokenHandler(self, value: RenewedSecurityTokenHandler) -> None: ...


class ILogonTokenCacheManager:
    def FlushLogonTokenCache(self) -> None: ...
    def RemoveCachedLogonToken(self, username: str) -> bool: ...


class InitiatorServiceModelSecurityTokenRequirement(ServiceModelSecurityTokenRequirement):
    def __init__(self): ...
    @property
    def TargetAddress(self) -> EndpointAddress: ...
    @property
    def Via(self) -> Uri: ...
    @TargetAddress.setter
    def TargetAddress(self, value: EndpointAddress) -> None: ...
    @Via.setter
    def Via(self, value: Uri) -> None: ...
    def ToString(self) -> str: ...


class ISecurityContextSecurityTokenCache:
    def AddContext(self, token: SecurityContextSecurityToken) -> None: ...
    def ClearContexts(self) -> None: ...
    def GetAllContexts(self, contextId: UniqueId) -> Collection: ...
    def GetContext(self, contextId: UniqueId, generation: UniqueId) -> SecurityContextSecurityToken: ...
    def RemoveAllContexts(self, contextId: UniqueId) -> None: ...
    def RemoveContext(self, contextId: UniqueId, generation: UniqueId) -> None: ...
    def TryAddContext(self, token: SecurityContextSecurityToken) -> bool: ...
    def UpdateContextCachingTime(self, context: SecurityContextSecurityToken, expirationTime: DateTime) -> None: ...


class IssuedSecurityTokenHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, issuedToken: SecurityToken, tokenRequestor: EndpointAddress, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, issuedToken: SecurityToken, tokenRequestor: EndpointAddress) -> None: ...


class IssuedSecurityTokenParameters(SecurityTokenParameters):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tokenType: str): ...
    @overload
    def __init__(self, tokenType: str, issuerAddress: EndpointAddress): ...
    @overload
    def __init__(self, tokenType: str, issuerAddress: EndpointAddress, issuerBinding: Binding): ...
    def CreateRequestParameters(self, messageSecurityVersion: MessageSecurityVersion, securityTokenSerializer: SecurityTokenSerializer) -> Collection: ...
    @property
    def AdditionalRequestParameters(self) -> Collection: ...
    @property
    def ClaimTypeRequirements(self) -> Collection: ...
    @property
    def DefaultMessageSecurityVersion(self) -> MessageSecurityVersion: ...
    @property
    def IssuerAddress(self) -> EndpointAddress: ...
    @property
    def IssuerBinding(self) -> Binding: ...
    @property
    def IssuerMetadataAddress(self) -> EndpointAddress: ...
    @property
    def KeySize(self) -> int: ...
    @property
    def KeyType(self) -> SecurityKeyType: ...
    @property
    def TokenType(self) -> str: ...
    @property
    def UseStrTransform(self) -> bool: ...
    @DefaultMessageSecurityVersion.setter
    def DefaultMessageSecurityVersion(self, value: MessageSecurityVersion) -> None: ...
    @IssuerAddress.setter
    def IssuerAddress(self, value: EndpointAddress) -> None: ...
    @IssuerBinding.setter
    def IssuerBinding(self, value: Binding) -> None: ...
    @IssuerMetadataAddress.setter
    def IssuerMetadataAddress(self, value: EndpointAddress) -> None: ...
    @KeySize.setter
    def KeySize(self, value: int) -> None: ...
    @KeyType.setter
    def KeyType(self, value: SecurityKeyType) -> None: ...
    @TokenType.setter
    def TokenType(self, value: str) -> None: ...
    @UseStrTransform.setter
    def UseStrTransform(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class IssuedSecurityTokenProvider(SecurityTokenProvider):
    def __init__(self): ...
    def Abort(self) -> None: ...
    def add_Closed(self, value: EventHandler) -> None: ...
    def add_Closing(self, value: EventHandler) -> None: ...
    def add_Faulted(self, value: EventHandler) -> None: ...
    def add_Opened(self, value: EventHandler) -> None: ...
    def add_Opening(self, value: EventHandler) -> None: ...
    @overload
    def BeginClose(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginClose(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginOpen(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginOpen(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Close(self, timeout: TimeSpan) -> None: ...
    def Dispose(self) -> None: ...
    def EndClose(self, result: IAsyncResult) -> None: ...
    def EndOpen(self, result: IAsyncResult) -> None: ...
    @property
    def CacheIssuedTokens(self) -> bool: ...
    @property
    def DefaultCloseTimeout(self) -> TimeSpan: ...
    @property
    def DefaultOpenTimeout(self) -> TimeSpan: ...
    @property
    def IdentityVerifier(self) -> IdentityVerifier: ...
    @property
    def IssuedTokenRenewalThresholdPercentage(self) -> int: ...
    @property
    def IssuerAddress(self) -> EndpointAddress: ...
    @property
    def IssuerBinding(self) -> Binding: ...
    @property
    def IssuerChannelBehaviors(self) -> KeyedByTypeCollection: ...
    @property
    def KeyEntropyMode(self) -> SecurityKeyEntropyMode: ...
    @property
    def MaxIssuedTokenCachingTime(self) -> TimeSpan: ...
    @property
    def MessageSecurityVersion(self) -> MessageSecurityVersion: ...
    @property
    def SecurityAlgorithmSuite(self) -> SecurityAlgorithmSuite: ...
    @property
    def SecurityTokenSerializer(self) -> SecurityTokenSerializer: ...
    @property
    def State(self) -> CommunicationState: ...
    @property
    def SupportsTokenCancellation(self) -> bool: ...
    @property
    def TargetAddress(self) -> EndpointAddress: ...
    @property
    def TokenRequestParameters(self) -> Collection: ...
    @overload
    def Open(self) -> None: ...
    @overload
    def Open(self, timeout: TimeSpan) -> None: ...
    def remove_Closed(self, value: EventHandler) -> None: ...
    def remove_Closing(self, value: EventHandler) -> None: ...
    def remove_Faulted(self, value: EventHandler) -> None: ...
    def remove_Opened(self, value: EventHandler) -> None: ...
    def remove_Opening(self, value: EventHandler) -> None: ...
    @CacheIssuedTokens.setter
    def CacheIssuedTokens(self, value: bool) -> None: ...
    @IdentityVerifier.setter
    def IdentityVerifier(self, value: IdentityVerifier) -> None: ...
    @IssuedTokenRenewalThresholdPercentage.setter
    def IssuedTokenRenewalThresholdPercentage(self, value: int) -> None: ...
    @IssuerAddress.setter
    def IssuerAddress(self, value: EndpointAddress) -> None: ...
    @IssuerBinding.setter
    def IssuerBinding(self, value: Binding) -> None: ...
    @KeyEntropyMode.setter
    def KeyEntropyMode(self, value: SecurityKeyEntropyMode) -> None: ...
    @MaxIssuedTokenCachingTime.setter
    def MaxIssuedTokenCachingTime(self, value: TimeSpan) -> None: ...
    @MessageSecurityVersion.setter
    def MessageSecurityVersion(self, value: MessageSecurityVersion) -> None: ...
    @SecurityAlgorithmSuite.setter
    def SecurityAlgorithmSuite(self, value: SecurityAlgorithmSuite) -> None: ...
    @SecurityTokenSerializer.setter
    def SecurityTokenSerializer(self, value: SecurityTokenSerializer) -> None: ...
    @TargetAddress.setter
    def TargetAddress(self, value: EndpointAddress) -> None: ...


class KerberosSecurityTokenParameters(SecurityTokenParameters):
    def __init__(self): ...


class RecipientServiceModelSecurityTokenRequirement(ServiceModelSecurityTokenRequirement):
    def __init__(self): ...
    @property
    def AuditLogLocation(self) -> AuditLogLocation: ...
    @property
    def ListenUri(self) -> Uri: ...
    @property
    def MessageAuthenticationAuditLevel(self) -> AuditLevel: ...
    @property
    def SuppressAuditFailure(self) -> bool: ...
    @AuditLogLocation.setter
    def AuditLogLocation(self, value: AuditLogLocation) -> None: ...
    @ListenUri.setter
    def ListenUri(self, value: Uri) -> None: ...
    @MessageAuthenticationAuditLevel.setter
    def MessageAuthenticationAuditLevel(self, value: AuditLevel) -> None: ...
    @SuppressAuditFailure.setter
    def SuppressAuditFailure(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class RenewedSecurityTokenHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, newSecurityToken: SecurityToken, oldSecurityToken: SecurityToken, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, newSecurityToken: SecurityToken, oldSecurityToken: SecurityToken) -> None: ...


class RsaSecurityTokenParameters(SecurityTokenParameters):
    def __init__(self): ...


class SecureConversationSecurityTokenParameters(SecurityTokenParameters):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, bootstrapSecurityBindingElement: SecurityBindingElement): ...
    @overload
    def __init__(self, bootstrapSecurityBindingElement: SecurityBindingElement, requireCancellation: bool): ...
    @overload
    def __init__(self, bootstrapSecurityBindingElement: SecurityBindingElement, requireCancellation: bool, canRenewSession: bool): ...
    @overload
    def __init__(self, bootstrapSecurityBindingElement: SecurityBindingElement, requireCancellation: bool, bootstrapProtectionRequirements: ChannelProtectionRequirements): ...
    @overload
    def __init__(self, bootstrapSecurityBindingElement: SecurityBindingElement, requireCancellation: bool, canRenewSession: bool, bootstrapProtectionRequirements: ChannelProtectionRequirements): ...
    @property
    def BootstrapProtectionRequirements(self) -> ChannelProtectionRequirements: ...
    @property
    def BootstrapSecurityBindingElement(self) -> SecurityBindingElement: ...
    @property
    def CanRenewSession(self) -> bool: ...
    @property
    def RequireCancellation(self) -> bool: ...
    @BootstrapSecurityBindingElement.setter
    def BootstrapSecurityBindingElement(self, value: SecurityBindingElement) -> None: ...
    @CanRenewSession.setter
    def CanRenewSession(self, value: bool) -> None: ...
    @RequireCancellation.setter
    def RequireCancellation(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class SecurityContextSecurityToken(SecurityToken):
    @overload
    def __init__(self, contextId: UniqueId, key: Set(Byte), validFrom: DateTime, validTo: DateTime): ...
    @overload
    def __init__(self, contextId: UniqueId, id: str, key: Set(Byte), validFrom: DateTime, validTo: DateTime): ...
    @overload
    def __init__(self, contextId: UniqueId, id: str, key: Set(Byte), validFrom: DateTime, validTo: DateTime, authorizationPolicies: ReadOnlyCollection): ...
    @overload
    def __init__(self, contextId: UniqueId, id: str, key: Set(Byte), validFrom: DateTime, validTo: DateTime, keyGeneration: UniqueId, keyEffectiveTime: DateTime, keyExpirationTime: DateTime, authorizationPolicies: ReadOnlyCollection): ...
    def CanCreateKeyIdentifierClause(self) -> bool: ...
    @overload
    def CreateCookieSecurityContextToken(contextId: UniqueId, id: str, key: Set(Byte), validFrom: DateTime, validTo: DateTime, authorizationPolicies: ReadOnlyCollection, securityStateEncoder: SecurityStateEncoder) -> SecurityContextSecurityToken: ...
    @overload
    def CreateCookieSecurityContextToken(contextId: UniqueId, id: str, key: Set(Byte), validFrom: DateTime, validTo: DateTime, keyGeneration: UniqueId, keyEffectiveTime: DateTime, keyExpirationTime: DateTime, authorizationPolicies: ReadOnlyCollection, securityStateEncoder: SecurityStateEncoder) -> SecurityContextSecurityToken: ...
    def CreateKeyIdentifierClause(self) -> T: ...
    def Dispose(self) -> None: ...
    @property
    def AuthorizationPolicies(self) -> ReadOnlyCollection: ...
    @property
    def BootstrapMessageProperty(self) -> SecurityMessageProperty: ...
    @property
    def ContextId(self) -> UniqueId: ...
    @property
    def Id(self) -> str: ...
    @property
    def IsCookieMode(self) -> bool: ...
    @property
    def KeyEffectiveTime(self) -> DateTime: ...
    @property
    def KeyExpirationTime(self) -> DateTime: ...
    @property
    def KeyGeneration(self) -> UniqueId: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...
    def MatchesKeyIdentifierClause(self, keyIdentifierClause: SecurityKeyIdentifierClause) -> bool: ...
    @BootstrapMessageProperty.setter
    def BootstrapMessageProperty(self, value: SecurityMessageProperty) -> None: ...
    def ToString(self) -> str: ...


class SecurityContextSecurityTokenAuthenticator(SecurityTokenAuthenticator):
    def __init__(self): ...


class SecurityContextSecurityTokenResolver(SecurityTokenResolver):
    @overload
    def __init__(self, securityContextCacheCapacity: int, removeOldestTokensOnCacheFull: bool): ...
    @overload
    def __init__(self, securityContextCacheCapacity: int, removeOldestTokensOnCacheFull: bool, clockSkew: TimeSpan): ...
    def AddContext(self, token: SecurityContextSecurityToken) -> None: ...
    def ClearContexts(self) -> None: ...
    @property
    def ClockSkew(self) -> TimeSpan: ...
    @property
    def RemoveOldestTokensOnCacheFull(self) -> bool: ...
    @property
    def SecurityContextTokenCacheCapacity(self) -> int: ...
    def GetAllContexts(self, contextId: UniqueId) -> Collection: ...
    def GetContext(self, contextId: UniqueId, generation: UniqueId) -> SecurityContextSecurityToken: ...
    def RemoveAllContexts(self, contextId: UniqueId) -> None: ...
    def RemoveContext(self, contextId: UniqueId, generation: UniqueId) -> None: ...
    def TryAddContext(self, token: SecurityContextSecurityToken) -> bool: ...
    def UpdateContextCachingTime(self, context: SecurityContextSecurityToken, expirationTime: DateTime) -> None: ...


class SecurityTokenInclusionMode:
    AlwaysToRecipient = 0
    Never = 1
    Once = 2
    AlwaysToInitiator = 3


class SecurityTokenParameters(Object):
    def Clone(self) -> SecurityTokenParameters: ...
    @property
    def InclusionMode(self) -> SecurityTokenInclusionMode: ...
    @property
    def ReferenceStyle(self) -> SecurityTokenReferenceStyle: ...
    @property
    def RequireDerivedKeys(self) -> bool: ...
    @InclusionMode.setter
    def InclusionMode(self, value: SecurityTokenInclusionMode) -> None: ...
    @ReferenceStyle.setter
    def ReferenceStyle(self, value: SecurityTokenReferenceStyle) -> None: ...
    @RequireDerivedKeys.setter
    def RequireDerivedKeys(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class SecurityTokenReferenceStyle:
    Internal = 0
    External = 1


class ServiceModelSecurityTokenRequirement(SecurityTokenRequirement):
    @property
    def AuditLogLocationProperty() -> str: ...
    @property
    def ChannelParametersCollectionProperty() -> str: ...
    @property
    def DuplexClientLocalAddressProperty() -> str: ...
    @property
    def EndpointFilterTableProperty() -> str: ...
    @property
    def ExtendedProtectionPolicy() -> str: ...
    @property
    def HttpAuthenticationSchemeProperty() -> str: ...
    @property
    def IsInitiator(self) -> bool: ...
    @property
    def IsInitiatorProperty() -> str: ...
    @property
    def IsOutOfBandTokenProperty() -> str: ...
    @property
    def IssuedSecurityTokenParametersProperty() -> str: ...
    @property
    def IssuerAddress(self) -> EndpointAddress: ...
    @property
    def IssuerAddressProperty() -> str: ...
    @property
    def IssuerBinding(self) -> Binding: ...
    @property
    def IssuerBindingContextProperty() -> str: ...
    @property
    def IssuerBindingProperty() -> str: ...
    @property
    def ListenUriProperty() -> str: ...
    @property
    def MessageAuthenticationAuditLevelProperty() -> str: ...
    @property
    def MessageDirectionProperty() -> str: ...
    @property
    def MessageSecurityVersion(self) -> SecurityTokenVersion: ...
    @property
    def MessageSecurityVersionProperty() -> str: ...
    @property
    def PreferSslCertificateAuthenticatorProperty() -> str: ...
    @property
    def PrivacyNoticeUriProperty() -> str: ...
    @property
    def PrivacyNoticeVersionProperty() -> str: ...
    @property
    def SecureConversationSecurityBindingElement(self) -> SecurityBindingElement: ...
    @property
    def SecureConversationSecurityBindingElementProperty() -> str: ...
    @property
    def SecurityAlgorithmSuite(self) -> SecurityAlgorithmSuite: ...
    @property
    def SecurityAlgorithmSuiteProperty() -> str: ...
    @property
    def SecurityBindingElement(self) -> SecurityBindingElement: ...
    @property
    def SecurityBindingElementProperty() -> str: ...
    @property
    def SupportingTokenAttachmentModeProperty() -> str: ...
    @property
    def SupportSecurityContextCancellationProperty() -> str: ...
    @property
    def SuppressAuditFailureProperty() -> str: ...
    @property
    def TargetAddressProperty() -> str: ...
    @property
    def TransportScheme(self) -> str: ...
    @property
    def TransportSchemeProperty() -> str: ...
    @property
    def ViaProperty() -> str: ...
    @IssuerAddress.setter
    def IssuerAddress(self, value: EndpointAddress) -> None: ...
    @IssuerBinding.setter
    def IssuerBinding(self, value: Binding) -> None: ...
    @MessageSecurityVersion.setter
    def MessageSecurityVersion(self, value: SecurityTokenVersion) -> None: ...
    @SecureConversationSecurityBindingElement.setter
    def SecureConversationSecurityBindingElement(self, value: SecurityBindingElement) -> None: ...
    @SecurityAlgorithmSuite.setter
    def SecurityAlgorithmSuite(self, value: SecurityAlgorithmSuite) -> None: ...
    @SecurityBindingElement.setter
    def SecurityBindingElement(self, value: SecurityBindingElement) -> None: ...
    @TransportScheme.setter
    def TransportScheme(self, value: str) -> None: ...


class ServiceModelSecurityTokenTypes(Object):
    @property
    def AnonymousSslnego() -> str: ...
    @property
    def MutualSslnego() -> str: ...
    @property
    def SecureConversation() -> str: ...
    @property
    def SecurityContext() -> str: ...
    @property
    def Spnego() -> str: ...
    @property
    def SspiCredential() -> str: ...


class SslSecurityTokenParameters(SecurityTokenParameters):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, requireClientCertificate: bool): ...
    @overload
    def __init__(self, requireClientCertificate: bool, requireCancellation: bool): ...
    @property
    def RequireCancellation(self) -> bool: ...
    @property
    def RequireClientCertificate(self) -> bool: ...
    @RequireCancellation.setter
    def RequireCancellation(self, value: bool) -> None: ...
    @RequireClientCertificate.setter
    def RequireClientCertificate(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class SspiSecurityToken(SecurityToken):
    @overload
    def __init__(self, impersonationLevel: TokenImpersonationLevel, allowNtlm: bool, networkCredential: NetworkCredential): ...
    @overload
    def __init__(self, networkCredential: NetworkCredential, extractGroupsForWindowsAccounts: bool, allowUnauthenticatedCallers: bool): ...
    @property
    def AllowNtlm(self) -> bool: ...
    @property
    def AllowUnauthenticatedCallers(self) -> bool: ...
    @property
    def ExtractGroupsForWindowsAccounts(self) -> bool: ...
    @property
    def Id(self) -> str: ...
    @property
    def ImpersonationLevel(self) -> TokenImpersonationLevel: ...
    @property
    def NetworkCredential(self) -> NetworkCredential: ...
    @property
    def SecurityKeys(self) -> ReadOnlyCollection: ...
    @property
    def ValidFrom(self) -> DateTime: ...
    @property
    def ValidTo(self) -> DateTime: ...


class SspiSecurityTokenParameters(SecurityTokenParameters):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, requireCancellation: bool): ...
    @property
    def RequireCancellation(self) -> bool: ...
    @RequireCancellation.setter
    def RequireCancellation(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class SupportingTokenParameters(Object):
    def __init__(self): ...
    def Clone(self) -> SupportingTokenParameters: ...
    @property
    def Endorsing(self) -> Collection: ...
    @property
    def Signed(self) -> Collection: ...
    @property
    def SignedEncrypted(self) -> Collection: ...
    @property
    def SignedEndorsing(self) -> Collection: ...
    def SetKeyDerivation(self, requireDerivedKeys: bool) -> None: ...
    def ToString(self) -> str: ...


class UserNameSecurityTokenParameters(SecurityTokenParameters):
    def __init__(self): ...


class X509KeyIdentifierClauseType:
    Any = 0
    Thumbprint = 1
    IssuerSerial = 2
    SubjectKeyIdentifier = 3
    RawDataKeyIdentifier = 4


class X509SecurityTokenParameters(SecurityTokenParameters):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, x509ReferenceStyle: X509KeyIdentifierClauseType): ...
    @overload
    def __init__(self, x509ReferenceStyle: X509KeyIdentifierClauseType, inclusionMode: SecurityTokenInclusionMode): ...
    @property
    def X509ReferenceStyle(self) -> X509KeyIdentifierClauseType: ...
    @X509ReferenceStyle.setter
    def X509ReferenceStyle(self, value: X509KeyIdentifierClauseType) -> None: ...
    def ToString(self) -> str: ...
