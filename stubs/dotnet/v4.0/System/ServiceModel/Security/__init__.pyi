__all__ = ['Tokens']
from typing import Tuple, Set, Iterable, List


class Basic128SecurityAlgorithmSuite(SecurityAlgorithmSuite):
    def __init__(self): ...
    @property
    def DefaultAsymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultAsymmetricSignatureAlgorithm(self) -> str: ...
    @property
    def DefaultCanonicalizationAlgorithm(self) -> str: ...
    @property
    def DefaultDigestAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSignatureKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultSymmetricSignatureAlgorithm(self) -> str: ...
    def IsAsymmetricKeyLengthSupported(self, length: int) -> bool: ...
    def IsSymmetricKeyLengthSupported(self, length: int) -> bool: ...
    def ToString(self) -> str: ...


class Basic192SecurityAlgorithmSuite(SecurityAlgorithmSuite):
    def __init__(self): ...
    @property
    def DefaultAsymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultAsymmetricSignatureAlgorithm(self) -> str: ...
    @property
    def DefaultCanonicalizationAlgorithm(self) -> str: ...
    @property
    def DefaultDigestAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSignatureKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultSymmetricSignatureAlgorithm(self) -> str: ...
    def IsAsymmetricKeyLengthSupported(self, length: int) -> bool: ...
    def IsSymmetricKeyLengthSupported(self, length: int) -> bool: ...
    def ToString(self) -> str: ...


class Basic256SecurityAlgorithmSuite(SecurityAlgorithmSuite):
    def __init__(self): ...
    @property
    def DefaultAsymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultAsymmetricSignatureAlgorithm(self) -> str: ...
    @property
    def DefaultCanonicalizationAlgorithm(self) -> str: ...
    @property
    def DefaultDigestAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSignatureKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultSymmetricSignatureAlgorithm(self) -> str: ...
    def IsAsymmetricKeyLengthSupported(self, length: int) -> bool: ...
    def IsSymmetricKeyLengthSupported(self, length: int) -> bool: ...
    def ToString(self) -> str: ...


class BasicSecurityProfileVersion(Object):
    @property
    def BasicSecurityProfile10() -> BasicSecurityProfileVersion: ...


class ChannelProtectionRequirements(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: ChannelProtectionRequirements): ...
    @overload
    def Add(self, protectionRequirements: ChannelProtectionRequirements) -> None: ...
    @overload
    def Add(self, protectionRequirements: ChannelProtectionRequirements, channelScopeOnly: bool) -> None: ...
    def CreateInverse(self) -> ChannelProtectionRequirements: ...
    @property
    def IncomingEncryptionParts(self) -> ScopedMessagePartSpecification: ...
    @property
    def IncomingSignatureParts(self) -> ScopedMessagePartSpecification: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def OutgoingEncryptionParts(self) -> ScopedMessagePartSpecification: ...
    @property
    def OutgoingSignatureParts(self) -> ScopedMessagePartSpecification: ...
    def MakeReadOnly(self) -> None: ...


class DataProtectionSecurityStateEncoder(SecurityStateEncoder):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, useCurrentUserProtectionScope: bool): ...
    @overload
    def __init__(self, useCurrentUserProtectionScope: bool, entropy: Set(Byte)): ...
    @property
    def UseCurrentUserProtectionScope(self) -> bool: ...
    def GetEntropy(self) -> Set(Byte): ...
    def ToString(self) -> str: ...


class DispatchContext(Object):
    def __init__(self): ...
    @property
    def Principal(self) -> ClaimsPrincipal: ...
    @property
    def RequestAction(self) -> str: ...
    @property
    def RequestMessage(self) -> WSTrustMessage: ...
    @property
    def ResponseAction(self) -> str: ...
    @property
    def ResponseMessage(self) -> RequestSecurityTokenResponse: ...
    @property
    def SecurityTokenService(self) -> SecurityTokenService: ...
    @property
    def TrustNamespace(self) -> str: ...
    @Principal.setter
    def Principal(self, value: ClaimsPrincipal) -> None: ...
    @RequestAction.setter
    def RequestAction(self, value: str) -> None: ...
    @RequestMessage.setter
    def RequestMessage(self, value: WSTrustMessage) -> None: ...
    @ResponseAction.setter
    def ResponseAction(self, value: str) -> None: ...
    @ResponseMessage.setter
    def ResponseMessage(self, value: RequestSecurityTokenResponse) -> None: ...
    @SecurityTokenService.setter
    def SecurityTokenService(self, value: SecurityTokenService) -> None: ...
    @TrustNamespace.setter
    def TrustNamespace(self, value: str) -> None: ...


class ExpiredSecurityTokenException(MessageSecurityException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class HttpDigestClientCredential(Object):
    @property
    def AllowedImpersonationLevel(self) -> TokenImpersonationLevel: ...
    @property
    def ClientCredential(self) -> NetworkCredential: ...
    @AllowedImpersonationLevel.setter
    def AllowedImpersonationLevel(self, value: TokenImpersonationLevel) -> None: ...
    @ClientCredential.setter
    def ClientCredential(self, value: NetworkCredential) -> None: ...


class IdentityVerifier(Object):
    def CheckAccess(self, identity: EndpointIdentity, authContext: AuthorizationContext) -> bool: ...
    def CreateDefault() -> IdentityVerifier: ...
    def TryGetIdentity(self, reference: EndpointAddress) -> Tuple[bool, EndpointIdentity]: ...


class IEndpointIdentityProvider:
    def GetIdentityOfSelf(self, tokenRequirement: SecurityTokenRequirement) -> EndpointIdentity: ...


class ImpersonateOnSerializingReplyMessageProperty(Object):
    def CreateCopy(self) -> IMessageProperty: ...
    @property
    def Name() -> str: ...
    def StartImpersonation(self) -> Tuple[IDisposable, IPrincipal, bool]: ...
    def StopImpersonation(self, impersonationContext: IDisposable, originalPrincipal: IPrincipal, isThreadPrincipalSet: bool) -> None: ...
    @overload
    def TryGet(message: Message) -> Tuple[bool, ImpersonateOnSerializingReplyMessageProperty]: ...
    @overload
    def TryGet(properties: MessageProperties) -> Tuple[bool, ImpersonateOnSerializingReplyMessageProperty]: ...


class InfocardInteractiveChannelInitializer(Object):
    def __init__(self, credentials: ClientCredentials, binding: Binding): ...
    def BeginDisplayInitializationUI(self, channel: IClientChannel, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def EndDisplayInitializationUI(self, result: IAsyncResult) -> None: ...
    @property
    def Binding(self) -> Binding: ...


class ISecureConversationSession:
    def TryReadSessionTokenIdentifier(self, reader: XmlReader) -> bool: ...
    def WriteSessionTokenIdentifier(self, writer: XmlDictionaryWriter) -> None: ...


class ISecuritySession:
    @property
    def RemoteIdentity(self) -> EndpointIdentity: ...


class IssuedTokenClientCredential(Object):
    @property
    def CacheIssuedTokens(self) -> bool: ...
    @property
    def DefaultKeyEntropyMode(self) -> SecurityKeyEntropyMode: ...
    @property
    def IssuedTokenRenewalThresholdPercentage(self) -> int: ...
    @property
    def IssuerChannelBehaviors(self) -> Dictionary: ...
    @property
    def LocalIssuerAddress(self) -> EndpointAddress: ...
    @property
    def LocalIssuerBinding(self) -> Binding: ...
    @property
    def LocalIssuerChannelBehaviors(self) -> KeyedByTypeCollection: ...
    @property
    def MaxIssuedTokenCachingTime(self) -> TimeSpan: ...
    @CacheIssuedTokens.setter
    def CacheIssuedTokens(self, value: bool) -> None: ...
    @DefaultKeyEntropyMode.setter
    def DefaultKeyEntropyMode(self, value: SecurityKeyEntropyMode) -> None: ...
    @IssuedTokenRenewalThresholdPercentage.setter
    def IssuedTokenRenewalThresholdPercentage(self, value: int) -> None: ...
    @LocalIssuerAddress.setter
    def LocalIssuerAddress(self, value: EndpointAddress) -> None: ...
    @LocalIssuerBinding.setter
    def LocalIssuerBinding(self, value: Binding) -> None: ...
    @MaxIssuedTokenCachingTime.setter
    def MaxIssuedTokenCachingTime(self, value: TimeSpan) -> None: ...


class IssuedTokenServiceCredential(Object):
    @property
    def AllowedAudienceUris(self) -> List[str]: ...
    @property
    def AllowUntrustedRsaIssuers(self) -> bool: ...
    @property
    def AudienceUriMode(self) -> AudienceUriMode: ...
    @property
    def CertificateValidationMode(self) -> X509CertificateValidationMode: ...
    @property
    def CustomCertificateValidator(self) -> X509CertificateValidator: ...
    @property
    def KnownCertificates(self) -> List[X509Certificate2]: ...
    @property
    def RevocationMode(self) -> X509RevocationMode: ...
    @property
    def SamlSerializer(self) -> SamlSerializer: ...
    @property
    def TrustedStoreLocation(self) -> StoreLocation: ...
    @AllowUntrustedRsaIssuers.setter
    def AllowUntrustedRsaIssuers(self, value: bool) -> None: ...
    @AudienceUriMode.setter
    def AudienceUriMode(self, value: AudienceUriMode) -> None: ...
    @CertificateValidationMode.setter
    def CertificateValidationMode(self, value: X509CertificateValidationMode) -> None: ...
    @CustomCertificateValidator.setter
    def CustomCertificateValidator(self, value: X509CertificateValidator) -> None: ...
    @RevocationMode.setter
    def RevocationMode(self, value: X509RevocationMode) -> None: ...
    @SamlSerializer.setter
    def SamlSerializer(self, value: SamlSerializer) -> None: ...
    @TrustedStoreLocation.setter
    def TrustedStoreLocation(self, value: StoreLocation) -> None: ...


class IWSTrust13AsyncContract:
    def BeginTrust13Cancel(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13CancelResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13Issue(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13IssueResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13Renew(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13RenewResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13Validate(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13ValidateResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def EndTrust13Cancel(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13CancelResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13Issue(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13IssueResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13Renew(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13RenewResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13Validate(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13ValidateResponse(self, ar: IAsyncResult) -> Message: ...


class IWSTrust13SyncContract:
    def ProcessTrust13Cancel(self, message: Message) -> Message: ...
    def ProcessTrust13CancelResponse(self, message: Message) -> Message: ...
    def ProcessTrust13Issue(self, message: Message) -> Message: ...
    def ProcessTrust13IssueResponse(self, message: Message) -> Message: ...
    def ProcessTrust13Renew(self, message: Message) -> Message: ...
    def ProcessTrust13RenewResponse(self, message: Message) -> Message: ...
    def ProcessTrust13Validate(self, message: Message) -> Message: ...
    def ProcessTrust13ValidateResponse(self, message: Message) -> Message: ...


class IWSTrustChannelContract:
    def BeginCancel(self, request: RequestSecurityToken, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginIssue(self, request: RequestSecurityToken, callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def BeginRenew(self, request: RequestSecurityToken, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginValidate(self, request: RequestSecurityToken, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def Cancel(self, request: RequestSecurityToken) -> RequestSecurityTokenResponse: ...
    def EndCancel(self, result: IAsyncResult) -> Tuple[RequestSecurityTokenResponse]: ...
    def EndIssue(self, result: IAsyncResult) -> Tuple[SecurityToken, RequestSecurityTokenResponse]: ...
    def EndRenew(self, result: IAsyncResult) -> Tuple[RequestSecurityTokenResponse]: ...
    def EndValidate(self, result: IAsyncResult) -> Tuple[RequestSecurityTokenResponse]: ...
    @overload
    def Issue(self, request: RequestSecurityToken) -> SecurityToken: ...
    @overload
    def Issue(self, request: RequestSecurityToken) -> Tuple[SecurityToken, RequestSecurityTokenResponse]: ...
    def Renew(self, request: RequestSecurityToken) -> RequestSecurityTokenResponse: ...
    def Validate(self, request: RequestSecurityToken) -> RequestSecurityTokenResponse: ...


class IWSTrustContract:
    def BeginCancel(self, message: Message, callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def BeginIssue(self, message: Message, callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def BeginRenew(self, message: Message, callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def BeginValidate(self, message: Message, callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def Cancel(self, message: Message) -> Message: ...
    def EndCancel(self, asyncResult: IAsyncResult) -> Message: ...
    def EndIssue(self, asyncResult: IAsyncResult) -> Message: ...
    def EndRenew(self, asyncResult: IAsyncResult) -> Message: ...
    def EndValidate(self, asyncResult: IAsyncResult) -> Message: ...
    def Issue(self, message: Message) -> Message: ...
    def Renew(self, message: Message) -> Message: ...
    def Validate(self, message: Message) -> Message: ...


class IWSTrustFeb2005AsyncContract:
    def BeginTrustFeb2005Cancel(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005CancelResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005Issue(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005IssueResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005Renew(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005RenewResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005Validate(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005ValidateResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def EndTrustFeb2005Cancel(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005CancelResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005Issue(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005IssueResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005Renew(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005RenewResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005Validate(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005ValidateResponse(self, ar: IAsyncResult) -> Message: ...


class IWSTrustFeb2005SyncContract:
    def ProcessTrustFeb2005Cancel(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005CancelResponse(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005Issue(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005IssueResponse(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005Renew(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005RenewResponse(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005Validate(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005ValidateResponse(self, message: Message) -> Message: ...


class MessagePartSpecification(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, isBodyIncluded: bool): ...
    @overload
    def __init__(self, headerTypes: Set(XmlQualifiedName)): ...
    @overload
    def __init__(self, isBodyIncluded: bool, headerTypes: Set(XmlQualifiedName)): ...
    def Clear(self) -> None: ...
    @property
    def HeaderTypes(self) -> ICollection: ...
    @property
    def IsBodyIncluded(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def NoParts() -> MessagePartSpecification: ...
    def MakeReadOnly(self) -> None: ...
    @IsBodyIncluded.setter
    def IsBodyIncluded(self, value: bool) -> None: ...
    def Union(self, specification: MessagePartSpecification) -> None: ...


class MessageProtectionOrder:
    SignBeforeEncrypt = 0
    SignBeforeEncryptAndEncryptSignature = 1
    EncryptBeforeSign = 2


class MessageSecurityException(CommunicationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class NonceCache(Object):
    def CheckNonce(self, nonce: Set(Byte)) -> bool: ...
    @property
    def CacheSize(self) -> int: ...
    @property
    def CachingTimeSpan(self) -> TimeSpan: ...
    @CacheSize.setter
    def CacheSize(self, value: int) -> None: ...
    @CachingTimeSpan.setter
    def CachingTimeSpan(self, value: TimeSpan) -> None: ...
    def TryAddNonce(self, nonce: Set(Byte)) -> bool: ...


class PeerCredential(Object):
    @property
    def Certificate(self) -> X509Certificate2: ...
    @property
    def MeshPassword(self) -> str: ...
    @property
    def MessageSenderAuthentication(self) -> X509PeerCertificateAuthentication: ...
    @property
    def PeerAuthentication(self) -> X509PeerCertificateAuthentication: ...
    @Certificate.setter
    def Certificate(self, value: X509Certificate2) -> None: ...
    @MeshPassword.setter
    def MeshPassword(self, value: str) -> None: ...
    @MessageSenderAuthentication.setter
    def MessageSenderAuthentication(self, value: X509PeerCertificateAuthentication) -> None: ...
    @PeerAuthentication.setter
    def PeerAuthentication(self, value: X509PeerCertificateAuthentication) -> None: ...
    @overload
    def SetCertificate(self, subjectName: str, storeLocation: StoreLocation, storeName: StoreName) -> None: ...
    @overload
    def SetCertificate(self, storeLocation: StoreLocation, storeName: StoreName, findType: X509FindType, findValue: Object) -> None: ...


class ScopedMessagePartSpecification(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: ScopedMessagePartSpecification): ...
    @overload
    def AddParts(self, parts: MessagePartSpecification) -> None: ...
    @overload
    def AddParts(self, parts: MessagePartSpecification, action: str) -> None: ...
    @property
    def Actions(self) -> ICollection: ...
    @property
    def ChannelParts(self) -> MessagePartSpecification: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def MakeReadOnly(self) -> None: ...
    @overload
    def TryGetParts(self, action: str) -> Tuple[bool, MessagePartSpecification]: ...
    @overload
    def TryGetParts(self, action: str, excludeChannelScope: bool) -> Tuple[bool, MessagePartSpecification]: ...


class SecureConversationServiceCredential(Object):
    @property
    def SecurityContextClaimTypes(self) -> Collection: ...
    @property
    def SecurityStateEncoder(self) -> SecurityStateEncoder: ...
    @SecurityStateEncoder.setter
    def SecurityStateEncoder(self, value: SecurityStateEncoder) -> None: ...


class SecureConversationVersion(Object):
    @property
    def Default() -> SecureConversationVersion: ...
    @property
    def Namespace(self) -> XmlDictionaryString: ...
    @property
    def Prefix(self) -> XmlDictionaryString: ...
    @property
    def WSSecureConversation13() -> SecureConversationVersion: ...
    @property
    def WSSecureConversationFeb2005() -> SecureConversationVersion: ...


class SecurityAccessDeniedException(CommunicationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class SecurityAlgorithmSuite(Object):
    @property
    def Basic128() -> SecurityAlgorithmSuite: ...
    @property
    def Basic128Rsa15() -> SecurityAlgorithmSuite: ...
    @property
    def Basic128Sha256() -> SecurityAlgorithmSuite: ...
    @property
    def Basic128Sha256Rsa15() -> SecurityAlgorithmSuite: ...
    @property
    def Basic192() -> SecurityAlgorithmSuite: ...
    @property
    def Basic192Rsa15() -> SecurityAlgorithmSuite: ...
    @property
    def Basic192Sha256() -> SecurityAlgorithmSuite: ...
    @property
    def Basic192Sha256Rsa15() -> SecurityAlgorithmSuite: ...
    @property
    def Basic256() -> SecurityAlgorithmSuite: ...
    @property
    def Basic256Rsa15() -> SecurityAlgorithmSuite: ...
    @property
    def Basic256Sha256() -> SecurityAlgorithmSuite: ...
    @property
    def Basic256Sha256Rsa15() -> SecurityAlgorithmSuite: ...
    @property
    def Default() -> SecurityAlgorithmSuite: ...
    @property
    def DefaultAsymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultAsymmetricSignatureAlgorithm(self) -> str: ...
    @property
    def DefaultCanonicalizationAlgorithm(self) -> str: ...
    @property
    def DefaultDigestAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSignatureKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultSymmetricSignatureAlgorithm(self) -> str: ...
    @property
    def TripleDes() -> SecurityAlgorithmSuite: ...
    @property
    def TripleDesRsa15() -> SecurityAlgorithmSuite: ...
    @property
    def TripleDesSha256() -> SecurityAlgorithmSuite: ...
    @property
    def TripleDesSha256Rsa15() -> SecurityAlgorithmSuite: ...
    def IsAsymmetricKeyLengthSupported(self, length: int) -> bool: ...
    def IsAsymmetricKeyWrapAlgorithmSupported(self, algorithm: str) -> bool: ...
    def IsAsymmetricSignatureAlgorithmSupported(self, algorithm: str) -> bool: ...
    def IsCanonicalizationAlgorithmSupported(self, algorithm: str) -> bool: ...
    def IsDigestAlgorithmSupported(self, algorithm: str) -> bool: ...
    def IsEncryptionAlgorithmSupported(self, algorithm: str) -> bool: ...
    def IsEncryptionKeyDerivationAlgorithmSupported(self, algorithm: str) -> bool: ...
    def IsSignatureKeyDerivationAlgorithmSupported(self, algorithm: str) -> bool: ...
    def IsSymmetricKeyLengthSupported(self, length: int) -> bool: ...
    def IsSymmetricKeyWrapAlgorithmSupported(self, algorithm: str) -> bool: ...
    def IsSymmetricSignatureAlgorithmSupported(self, algorithm: str) -> bool: ...


class SecurityCredentialsManager(Object):
    def CreateSecurityTokenManager(self) -> SecurityTokenManager: ...


class SecurityKeyEntropyMode:
    ClientEntropy = 0
    ServerEntropy = 1
    CombinedEntropy = 2


class SecurityMessageProperty(Object):
    def __init__(self): ...
    def CreateCopy(self) -> IMessageProperty: ...
    def Dispose(self) -> None: ...
    @property
    def ExternalAuthorizationPolicies(self) -> ReadOnlyCollection: ...
    @property
    def HasIncomingSupportingTokens(self) -> bool: ...
    @property
    def IncomingSupportingTokens(self) -> Collection: ...
    @property
    def InitiatorToken(self) -> SecurityTokenSpecification: ...
    @property
    def OutgoingSupportingTokens(self) -> Collection: ...
    @property
    def ProtectionToken(self) -> SecurityTokenSpecification: ...
    @property
    def RecipientToken(self) -> SecurityTokenSpecification: ...
    @property
    def SenderIdPrefix(self) -> str: ...
    @property
    def ServiceSecurityContext(self) -> ServiceSecurityContext: ...
    @property
    def TransportToken(self) -> SecurityTokenSpecification: ...
    def GetOrCreate(message: Message) -> SecurityMessageProperty: ...
    @ExternalAuthorizationPolicies.setter
    def ExternalAuthorizationPolicies(self, value: ReadOnlyCollection) -> None: ...
    @InitiatorToken.setter
    def InitiatorToken(self, value: SecurityTokenSpecification) -> None: ...
    @ProtectionToken.setter
    def ProtectionToken(self, value: SecurityTokenSpecification) -> None: ...
    @RecipientToken.setter
    def RecipientToken(self, value: SecurityTokenSpecification) -> None: ...
    @SenderIdPrefix.setter
    def SenderIdPrefix(self, value: str) -> None: ...
    @ServiceSecurityContext.setter
    def ServiceSecurityContext(self, value: ServiceSecurityContext) -> None: ...
    @TransportToken.setter
    def TransportToken(self, value: SecurityTokenSpecification) -> None: ...


class SecurityNegotiationException(CommunicationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class SecurityPolicyVersion(Object):
    @property
    def Namespace(self) -> str: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def WSSecurityPolicy11() -> SecurityPolicyVersion: ...
    @property
    def WSSecurityPolicy12() -> SecurityPolicyVersion: ...


class SecurityStateEncoder(Object):
    pass


class SecurityTokenAttachmentMode:
    Signed = 0
    Endorsing = 1
    SignedEndorsing = 2
    SignedEncrypted = 3


class SecurityTokenSpecification(Object):
    def __init__(self, token: SecurityToken, tokenPolicies: ReadOnlyCollection): ...
    @property
    def SecurityToken(self) -> SecurityToken: ...
    @property
    def SecurityTokenPolicies(self) -> ReadOnlyCollection: ...


class SecurityVersion(Object):
    @property
    def WSSecurity10() -> SecurityVersion: ...
    @property
    def WSSecurity11() -> SecurityVersion: ...


class ServiceCredentialsSecurityTokenManager(SecurityTokenManager):
    def __init__(self, parent: ServiceCredentials): ...
    def CreateSecurityTokenAuthenticator(self, tokenRequirement: SecurityTokenRequirement) -> Tuple[SecurityTokenAuthenticator, SecurityTokenResolver]: ...
    def CreateSecurityTokenProvider(self, requirement: SecurityTokenRequirement) -> SecurityTokenProvider: ...
    def CreateSecurityTokenSerializer(self, version: SecurityTokenVersion) -> SecurityTokenSerializer: ...
    @property
    def ServiceCredentials(self) -> ServiceCredentials: ...
    def GetIdentityOfSelf(self, tokenRequirement: SecurityTokenRequirement) -> EndpointIdentity: ...


class SimpleSecurityTokenProvider(SecurityTokenProvider):
    def __init__(self, token: SecurityToken, tokenRequirement: SecurityTokenRequirement): ...


class SspiSecurityTokenProvider(SecurityTokenProvider):
    @overload
    def __init__(self, credential: NetworkCredential, allowNtlm: bool, impersonationLevel: TokenImpersonationLevel): ...
    @overload
    def __init__(self, credential: NetworkCredential, extractGroupsForWindowsAccounts: bool, allowUnauthenticatedCallers: bool): ...


class SupportingTokenSpecification(SecurityTokenSpecification):
    @overload
    def __init__(self, token: SecurityToken, tokenPolicies: ReadOnlyCollection, attachmentMode: SecurityTokenAttachmentMode): ...
    @overload
    def __init__(self, token: SecurityToken, tokenPolicies: ReadOnlyCollection, attachmentMode: SecurityTokenAttachmentMode, tokenParameters: SecurityTokenParameters): ...
    @property
    def SecurityTokenAttachmentMode(self) -> SecurityTokenAttachmentMode: ...


class TripleDesSecurityAlgorithmSuite(SecurityAlgorithmSuite):
    def __init__(self): ...
    @property
    def DefaultAsymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultAsymmetricSignatureAlgorithm(self) -> str: ...
    @property
    def DefaultCanonicalizationAlgorithm(self) -> str: ...
    @property
    def DefaultDigestAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionAlgorithm(self) -> str: ...
    @property
    def DefaultEncryptionKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSignatureKeyDerivationLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyLength(self) -> int: ...
    @property
    def DefaultSymmetricKeyWrapAlgorithm(self) -> str: ...
    @property
    def DefaultSymmetricSignatureAlgorithm(self) -> str: ...
    def IsAsymmetricKeyLengthSupported(self, length: int) -> bool: ...
    def IsSymmetricKeyLengthSupported(self, length: int) -> bool: ...
    def ToString(self) -> str: ...


class TrustVersion(Object):
    @property
    def Default() -> TrustVersion: ...
    @property
    def Namespace(self) -> XmlDictionaryString: ...
    @property
    def Prefix(self) -> XmlDictionaryString: ...
    @property
    def WSTrust13() -> TrustVersion: ...
    @property
    def WSTrustFeb2005() -> TrustVersion: ...


class UserNamePasswordClientCredential(Object):
    @property
    def Password(self) -> str: ...
    @property
    def UserName(self) -> str: ...
    @Password.setter
    def Password(self, value: str) -> None: ...
    @UserName.setter
    def UserName(self, value: str) -> None: ...


class UserNamePasswordServiceCredential(Object):
    @property
    def CachedLogonTokenLifetime(self) -> TimeSpan: ...
    @property
    def CacheLogonTokens(self) -> bool: ...
    @property
    def CustomUserNamePasswordValidator(self) -> UserNamePasswordValidator: ...
    @property
    def IncludeWindowsGroups(self) -> bool: ...
    @property
    def MaxCachedLogonTokens(self) -> int: ...
    @property
    def MembershipProvider(self) -> MembershipProvider: ...
    @property
    def UserNamePasswordValidationMode(self) -> UserNamePasswordValidationMode: ...
    @CachedLogonTokenLifetime.setter
    def CachedLogonTokenLifetime(self, value: TimeSpan) -> None: ...
    @CacheLogonTokens.setter
    def CacheLogonTokens(self, value: bool) -> None: ...
    @CustomUserNamePasswordValidator.setter
    def CustomUserNamePasswordValidator(self, value: UserNamePasswordValidator) -> None: ...
    @IncludeWindowsGroups.setter
    def IncludeWindowsGroups(self, value: bool) -> None: ...
    @MaxCachedLogonTokens.setter
    def MaxCachedLogonTokens(self, value: int) -> None: ...
    @MembershipProvider.setter
    def MembershipProvider(self, value: MembershipProvider) -> None: ...
    @UserNamePasswordValidationMode.setter
    def UserNamePasswordValidationMode(self, value: UserNamePasswordValidationMode) -> None: ...


class UserNamePasswordValidationMode:
    Windows = 0
    MembershipProvider = 1
    Custom = 2


class WindowsClientCredential(Object):
    @property
    def AllowedImpersonationLevel(self) -> TokenImpersonationLevel: ...
    @property
    def AllowNtlm(self) -> bool: ...
    @property
    def ClientCredential(self) -> NetworkCredential: ...
    @AllowedImpersonationLevel.setter
    def AllowedImpersonationLevel(self, value: TokenImpersonationLevel) -> None: ...
    @AllowNtlm.setter
    def AllowNtlm(self, value: bool) -> None: ...
    @ClientCredential.setter
    def ClientCredential(self, value: NetworkCredential) -> None: ...


class WindowsServiceCredential(Object):
    @property
    def AllowAnonymousLogons(self) -> bool: ...
    @property
    def IncludeWindowsGroups(self) -> bool: ...
    @AllowAnonymousLogons.setter
    def AllowAnonymousLogons(self, value: bool) -> None: ...
    @IncludeWindowsGroups.setter
    def IncludeWindowsGroups(self, value: bool) -> None: ...


class WSSecurityTokenSerializer(SecurityTokenSerializer):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, emitBspRequiredAttributes: bool): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, emitBspRequiredAttributes: bool): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, emitBspRequiredAttributes: bool, samlSerializer: SamlSerializer): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, emitBspRequiredAttributes: bool, samlSerializer: SamlSerializer, securityStateEncoder: SecurityStateEncoder, knownTypes: Iterable[Type]): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, trustVersion: TrustVersion, secureConversationVersion: SecureConversationVersion, emitBspRequiredAttributes: bool, samlSerializer: SamlSerializer, securityStateEncoder: SecurityStateEncoder, knownTypes: Iterable[Type]): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, emitBspRequiredAttributes: bool, samlSerializer: SamlSerializer, securityStateEncoder: SecurityStateEncoder, knownTypes: Iterable[Type], maximumKeyDerivationOffset: int, maximumKeyDerivationLabelLength: int, maximumKeyDerivationNonceLength: int): ...
    @overload
    def __init__(self, securityVersion: SecurityVersion, trustVersion: TrustVersion, secureConversationVersion: SecureConversationVersion, emitBspRequiredAttributes: bool, samlSerializer: SamlSerializer, securityStateEncoder: SecurityStateEncoder, knownTypes: Iterable[Type], maximumKeyDerivationOffset: int, maximumKeyDerivationLabelLength: int, maximumKeyDerivationNonceLength: int): ...
    def CreateKeyIdentifierClauseFromTokenXml(self, element: XmlElement, tokenReferenceStyle: SecurityTokenReferenceStyle) -> SecurityKeyIdentifierClause: ...
    @property
    def DefaultInstance() -> WSSecurityTokenSerializer: ...
    @property
    def EmitBspRequiredAttributes(self) -> bool: ...
    @property
    def MaximumKeyDerivationLabelLength(self) -> int: ...
    @property
    def MaximumKeyDerivationNonceLength(self) -> int: ...
    @property
    def MaximumKeyDerivationOffset(self) -> int: ...
    @property
    def SecurityVersion(self) -> SecurityVersion: ...
    def TryCreateKeyIdentifierClauseFromTokenXml(self, element: XmlElement, tokenReferenceStyle: SecurityTokenReferenceStyle) -> Tuple[bool, SecurityKeyIdentifierClause]: ...


class WSTrustChannel(Object):
    def __init__(self, factory: WSTrustChannelFactory, inner: IWSTrustChannelContract, trustVersion: TrustVersion, context: WSTrustSerializationContext, requestSerializer: WSTrustRequestSerializer, responseSerializer: WSTrustResponseSerializer): ...
    def Abort(self) -> None: ...
    def add_Closed(self, value: EventHandler) -> None: ...
    def add_Closing(self, value: EventHandler) -> None: ...
    def add_Faulted(self, value: EventHandler) -> None: ...
    def add_Opened(self, value: EventHandler) -> None: ...
    def add_Opening(self, value: EventHandler) -> None: ...
    @overload
    def BeginCancel(self, rst: RequestSecurityToken, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginCancel(self, message: Message, callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginClose(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginClose(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginIssue(self, rst: RequestSecurityToken, callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginIssue(self, message: Message, callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginOpen(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginOpen(self, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginRenew(self, rst: RequestSecurityToken, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginRenew(self, message: Message, callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def BeginValidate(self, rst: RequestSecurityToken, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginValidate(self, message: Message, callback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    @overload
    def Cancel(self, message: Message) -> Message: ...
    @overload
    def Cancel(self, rst: RequestSecurityToken) -> RequestSecurityTokenResponse: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Close(self, timeout: TimeSpan) -> None: ...
    @overload
    def EndCancel(self, asyncResult: IAsyncResult) -> Message: ...
    @overload
    def EndCancel(self, result: IAsyncResult) -> Tuple[RequestSecurityTokenResponse]: ...
    def EndClose(self, result: IAsyncResult) -> None: ...
    @overload
    def EndIssue(self, asyncResult: IAsyncResult) -> Message: ...
    @overload
    def EndIssue(self, result: IAsyncResult) -> Tuple[SecurityToken, RequestSecurityTokenResponse]: ...
    def EndOpen(self, result: IAsyncResult) -> None: ...
    @overload
    def EndRenew(self, asyncResult: IAsyncResult) -> Message: ...
    @overload
    def EndRenew(self, result: IAsyncResult) -> Tuple[RequestSecurityTokenResponse]: ...
    @overload
    def EndValidate(self, asyncResult: IAsyncResult) -> Message: ...
    @overload
    def EndValidate(self, result: IAsyncResult) -> Tuple[RequestSecurityTokenResponse]: ...
    @property
    def Channel(self) -> IChannel: ...
    @property
    def ChannelFactory(self) -> WSTrustChannelFactory: ...
    @property
    def Contract(self) -> IWSTrustChannelContract: ...
    @property
    def State(self) -> CommunicationState: ...
    @property
    def TrustVersion(self) -> TrustVersion: ...
    @property
    def WSTrustRequestSerializer(self) -> WSTrustRequestSerializer: ...
    @property
    def WSTrustResponseSerializer(self) -> WSTrustResponseSerializer: ...
    @property
    def WSTrustSerializationContext(self) -> WSTrustSerializationContext: ...
    def GetProperty(self) -> T: ...
    def GetTokenFromResponse(self, request: RequestSecurityToken, response: RequestSecurityTokenResponse) -> SecurityToken: ...
    @overload
    def Issue(self, rst: RequestSecurityToken) -> SecurityToken: ...
    @overload
    def Issue(self, message: Message) -> Message: ...
    @overload
    def Issue(self, rst: RequestSecurityToken) -> Tuple[SecurityToken, RequestSecurityTokenResponse]: ...
    @overload
    def Open(self) -> None: ...
    @overload
    def Open(self, timeout: TimeSpan) -> None: ...
    def remove_Closed(self, value: EventHandler) -> None: ...
    def remove_Closing(self, value: EventHandler) -> None: ...
    def remove_Faulted(self, value: EventHandler) -> None: ...
    def remove_Opened(self, value: EventHandler) -> None: ...
    def remove_Opening(self, value: EventHandler) -> None: ...
    @overload
    def Renew(self, message: Message) -> Message: ...
    @overload
    def Renew(self, rst: RequestSecurityToken) -> RequestSecurityTokenResponse: ...
    @overload
    def Validate(self, rst: RequestSecurityToken) -> RequestSecurityTokenResponse: ...
    @overload
    def Validate(self, message: Message) -> Message: ...


class WSTrustChannelFactory:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, endpointConfigurationName: str): ...
    @overload
    def __init__(self, binding: Binding): ...
    @overload
    def __init__(self, endpoint: ServiceEndpoint): ...
    @overload
    def __init__(self, endpointConfigurationName: str, remoteAddress: EndpointAddress): ...
    @overload
    def __init__(self, binding: Binding, remoteAddress: EndpointAddress): ...
    @overload
    def __init__(self, binding: Binding, remoteAddress: str): ...
    @overload
    def CreateChannel(self, address: EndpointAddress, via: Uri) -> IWSTrustChannelContract: ...
    @property
    def SecurityTokenHandlerCollectionManager(self) -> SecurityTokenHandlerCollectionManager: ...
    @property
    def SecurityTokenResolver(self) -> SecurityTokenResolver: ...
    @property
    def TrustVersion(self) -> TrustVersion: ...
    @property
    def UseKeyTokenResolver(self) -> SecurityTokenResolver: ...
    @property
    def WSTrustRequestSerializer(self) -> WSTrustRequestSerializer: ...
    @property
    def WSTrustResponseSerializer(self) -> WSTrustResponseSerializer: ...
    @SecurityTokenHandlerCollectionManager.setter
    def SecurityTokenHandlerCollectionManager(self, value: SecurityTokenHandlerCollectionManager) -> None: ...
    @SecurityTokenResolver.setter
    def SecurityTokenResolver(self, value: SecurityTokenResolver) -> None: ...
    @TrustVersion.setter
    def TrustVersion(self, value: TrustVersion) -> None: ...
    @UseKeyTokenResolver.setter
    def UseKeyTokenResolver(self, value: SecurityTokenResolver) -> None: ...
    @WSTrustRequestSerializer.setter
    def WSTrustRequestSerializer(self, value: WSTrustRequestSerializer) -> None: ...
    @WSTrustResponseSerializer.setter
    def WSTrustResponseSerializer(self, value: WSTrustResponseSerializer) -> None: ...


class WSTrustRequestBodyWriter(BodyWriter):
    def __init__(self, requestSecurityToken: RequestSecurityToken, serializer: WSTrustRequestSerializer, serializationContext: WSTrustSerializationContext): ...


class WSTrustRequestProcessingErrorEventArgs(EventArgs):
    def __init__(self, requestType: str, exception: Exception): ...
    @property
    def Exception(self) -> Exception: ...
    @property
    def RequestType(self) -> str: ...


class WSTrustResponseBodyWriter(BodyWriter):
    def __init__(self, requestSecurityTokenResponse: RequestSecurityTokenResponse, serializer: WSTrustResponseSerializer, context: WSTrustSerializationContext): ...


class WSTrustServiceContract(Object):
    def __init__(self, securityTokenServiceConfiguration: SecurityTokenServiceConfiguration): ...
    def add_RequestFailed(self, value: EventHandler) -> None: ...
    def AddBindingParameters(self, contractDescription: ContractDescription, endpoint: ServiceEndpoint, bindingParameters: BindingParameterCollection) -> None: ...
    def ApplyClientBehavior(self, contractDescription: ContractDescription, endpoint: ServiceEndpoint, clientRuntime: ClientRuntime) -> None: ...
    def ApplyDispatchBehavior(self, contractDescription: ContractDescription, endpoint: ServiceEndpoint, dispatchRuntime: DispatchRuntime) -> None: ...
    def BeginTrust13Cancel(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13CancelResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13Issue(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13IssueResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13Renew(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13RenewResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13Validate(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrust13ValidateResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005Cancel(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005CancelResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005Issue(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005IssueResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005Renew(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005RenewResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005Validate(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginTrustFeb2005ValidateResponse(self, request: Message, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def EndTrust13Cancel(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13CancelResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13Issue(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13IssueResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13Renew(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13RenewResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13Validate(self, ar: IAsyncResult) -> Message: ...
    def EndTrust13ValidateResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005Cancel(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005CancelResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005Issue(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005IssueResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005Renew(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005RenewResponse(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005Validate(self, ar: IAsyncResult) -> Message: ...
    def EndTrustFeb2005ValidateResponse(self, ar: IAsyncResult) -> Message: ...
    def ExportContract(self, exporter: WsdlExporter, context: WsdlContractConversionContext) -> None: ...
    def ExportEndpoint(self, exporter: WsdlExporter, context: WsdlEndpointConversionContext) -> None: ...
    @property
    def SecurityTokenServiceConfiguration(self) -> SecurityTokenServiceConfiguration: ...
    def ProcessTrust13Cancel(self, message: Message) -> Message: ...
    def ProcessTrust13CancelResponse(self, message: Message) -> Message: ...
    def ProcessTrust13Issue(self, message: Message) -> Message: ...
    def ProcessTrust13IssueResponse(self, message: Message) -> Message: ...
    def ProcessTrust13Renew(self, message: Message) -> Message: ...
    def ProcessTrust13RenewResponse(self, message: Message) -> Message: ...
    def ProcessTrust13Validate(self, message: Message) -> Message: ...
    def ProcessTrust13ValidateResponse(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005Cancel(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005CancelResponse(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005Issue(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005IssueResponse(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005Renew(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005RenewResponse(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005Validate(self, message: Message) -> Message: ...
    def ProcessTrustFeb2005ValidateResponse(self, message: Message) -> Message: ...
    def remove_RequestFailed(self, value: EventHandler) -> None: ...
    def Validate(self, contractDescription: ContractDescription, endpoint: ServiceEndpoint) -> None: ...


class WSTrustServiceHost(ServiceHost):
    @overload
    def __init__(self, securityTokenServiceConfiguration: SecurityTokenServiceConfiguration, baseAddresses: Set(Uri)): ...
    @overload
    def __init__(self, serviceContract: WSTrustServiceContract, baseAddresses: Set(Uri)): ...
    @property
    def SecurityTokenServiceConfiguration(self) -> SecurityTokenServiceConfiguration: ...
    @property
    def ServiceContract(self) -> WSTrustServiceContract: ...


class X509CertificateInitiatorClientCredential(Object):
    @property
    def Certificate(self) -> X509Certificate2: ...
    @Certificate.setter
    def Certificate(self, value: X509Certificate2) -> None: ...
    @overload
    def SetCertificate(self, subjectName: str, storeLocation: StoreLocation, storeName: StoreName) -> None: ...
    @overload
    def SetCertificate(self, storeLocation: StoreLocation, storeName: StoreName, findType: X509FindType, findValue: Object) -> None: ...


class X509CertificateInitiatorServiceCredential(Object):
    @property
    def Authentication(self) -> X509ClientCertificateAuthentication: ...
    @property
    def Certificate(self) -> X509Certificate2: ...
    @Certificate.setter
    def Certificate(self, value: X509Certificate2) -> None: ...
    @overload
    def SetCertificate(self, subjectName: str, storeLocation: StoreLocation, storeName: StoreName) -> None: ...
    @overload
    def SetCertificate(self, storeLocation: StoreLocation, storeName: StoreName, findType: X509FindType, findValue: Object) -> None: ...


class X509CertificateRecipientClientCredential(Object):
    @property
    def Authentication(self) -> X509ServiceCertificateAuthentication: ...
    @property
    def DefaultCertificate(self) -> X509Certificate2: ...
    @property
    def ScopedCertificates(self) -> Dictionary: ...
    @property
    def SslCertificateAuthentication(self) -> X509ServiceCertificateAuthentication: ...
    @DefaultCertificate.setter
    def DefaultCertificate(self, value: X509Certificate2) -> None: ...
    @SslCertificateAuthentication.setter
    def SslCertificateAuthentication(self, value: X509ServiceCertificateAuthentication) -> None: ...
    @overload
    def SetDefaultCertificate(self, subjectName: str, storeLocation: StoreLocation, storeName: StoreName) -> None: ...
    @overload
    def SetDefaultCertificate(self, storeLocation: StoreLocation, storeName: StoreName, findType: X509FindType, findValue: Object) -> None: ...
    @overload
    def SetScopedCertificate(self, subjectName: str, storeLocation: StoreLocation, storeName: StoreName, targetService: Uri) -> None: ...
    @overload
    def SetScopedCertificate(self, storeLocation: StoreLocation, storeName: StoreName, findType: X509FindType, findValue: Object, targetService: Uri) -> None: ...


class X509CertificateRecipientServiceCredential(Object):
    @property
    def Certificate(self) -> X509Certificate2: ...
    @Certificate.setter
    def Certificate(self, value: X509Certificate2) -> None: ...
    @overload
    def SetCertificate(self, subjectName: str) -> None: ...
    @overload
    def SetCertificate(self, subjectName: str, storeLocation: StoreLocation, storeName: StoreName) -> None: ...
    @overload
    def SetCertificate(self, storeLocation: StoreLocation, storeName: StoreName, findType: X509FindType, findValue: Object) -> None: ...


class X509ClientCertificateAuthentication(Object):
    @property
    def CertificateValidationMode(self) -> X509CertificateValidationMode: ...
    @property
    def CustomCertificateValidator(self) -> X509CertificateValidator: ...
    @property
    def IncludeWindowsGroups(self) -> bool: ...
    @property
    def MapClientCertificateToWindowsAccount(self) -> bool: ...
    @property
    def RevocationMode(self) -> X509RevocationMode: ...
    @property
    def TrustedStoreLocation(self) -> StoreLocation: ...
    @CertificateValidationMode.setter
    def CertificateValidationMode(self, value: X509CertificateValidationMode) -> None: ...
    @CustomCertificateValidator.setter
    def CustomCertificateValidator(self, value: X509CertificateValidator) -> None: ...
    @IncludeWindowsGroups.setter
    def IncludeWindowsGroups(self, value: bool) -> None: ...
    @MapClientCertificateToWindowsAccount.setter
    def MapClientCertificateToWindowsAccount(self, value: bool) -> None: ...
    @RevocationMode.setter
    def RevocationMode(self, value: X509RevocationMode) -> None: ...
    @TrustedStoreLocation.setter
    def TrustedStoreLocation(self, value: StoreLocation) -> None: ...


class X509PeerCertificateAuthentication(Object):
    @property
    def CertificateValidationMode(self) -> X509CertificateValidationMode: ...
    @property
    def CustomCertificateValidator(self) -> X509CertificateValidator: ...
    @property
    def RevocationMode(self) -> X509RevocationMode: ...
    @property
    def TrustedStoreLocation(self) -> StoreLocation: ...
    @CertificateValidationMode.setter
    def CertificateValidationMode(self, value: X509CertificateValidationMode) -> None: ...
    @CustomCertificateValidator.setter
    def CustomCertificateValidator(self, value: X509CertificateValidator) -> None: ...
    @RevocationMode.setter
    def RevocationMode(self, value: X509RevocationMode) -> None: ...
    @TrustedStoreLocation.setter
    def TrustedStoreLocation(self, value: StoreLocation) -> None: ...


class X509ServiceCertificateAuthentication(Object):
    def __init__(self): ...
    @property
    def CertificateValidationMode(self) -> X509CertificateValidationMode: ...
    @property
    def CustomCertificateValidator(self) -> X509CertificateValidator: ...
    @property
    def RevocationMode(self) -> X509RevocationMode: ...
    @property
    def TrustedStoreLocation(self) -> StoreLocation: ...
    @CertificateValidationMode.setter
    def CertificateValidationMode(self, value: X509CertificateValidationMode) -> None: ...
    @CustomCertificateValidator.setter
    def CustomCertificateValidator(self, value: X509CertificateValidator) -> None: ...
    @RevocationMode.setter
    def RevocationMode(self, value: X509RevocationMode) -> None: ...
    @TrustedStoreLocation.setter
    def TrustedStoreLocation(self, value: StoreLocation) -> None: ...
