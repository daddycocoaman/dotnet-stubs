from typing import Tuple, Set, Iterable, List


class BackupEndpointCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: BackupEndpointElement) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Name(self) -> str: ...
    def Remove(self, element: BackupEndpointElement) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class BackupEndpointElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def EndpointName(self) -> str: ...
    @EndpointName.setter
    def EndpointName(self, value: str) -> None: ...


class BackupListCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: BackupEndpointCollection) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, name: str) -> BackupEndpointCollection: ...
    def Remove(self, element: BackupEndpointCollection) -> None: ...


class FilterElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def CustomType(self) -> str: ...
    @property
    def Filter1(self) -> str: ...
    @property
    def Filter2(self) -> str: ...
    @property
    def FilterData(self) -> str: ...
    @property
    def FilterType(self) -> FilterType: ...
    @property
    def Name(self) -> str: ...
    @CustomType.setter
    def CustomType(self, value: str) -> None: ...
    @Filter1.setter
    def Filter1(self, value: str) -> None: ...
    @Filter2.setter
    def Filter2(self, value: str) -> None: ...
    @FilterData.setter
    def FilterData(self, value: str) -> None: ...
    @FilterType.setter
    def FilterType(self, value: FilterType) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class FilterElementCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: FilterElement) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, index: int) -> FilterElement: ...
    @property
    def Item(self, name: str) -> FilterElement: ...
    def IsReadOnly(self) -> bool: ...
    def Remove(self, element: FilterElement) -> None: ...
    @Item.setter
    def Item(self, index: int, value: FilterElement) -> None: ...


class FilterTableCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: FilterTableEntryCollection) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, name: str) -> FilterTableEntryCollection: ...
    def Remove(self, element: FilterTableEntryCollection) -> None: ...


class FilterTableEntryCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: FilterTableEntryElement) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Name(self) -> str: ...
    def Remove(self, element: FilterTableEntryElement) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class FilterTableEntryElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def BackupList(self) -> str: ...
    @property
    def EndpointName(self) -> str: ...
    @property
    def FilterName(self) -> str: ...
    @property
    def Priority(self) -> int: ...
    @BackupList.setter
    def BackupList(self, value: str) -> None: ...
    @EndpointName.setter
    def EndpointName(self, value: str) -> None: ...
    @FilterName.setter
    def FilterName(self, value: str) -> None: ...
    @Priority.setter
    def Priority(self, value: int) -> None: ...


class FilterType:
    Action = 0
    EndpointAddress = 1
    PrefixEndpointAddress = 2
    And = 3
    Custom = 4
    EndpointName = 5
    MatchAll = 6
    XPath = 7


class NamespaceElement(ConfigurationElement):
    def __init__(self): ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Prefix(self) -> str: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...


class NamespaceElementCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: NamespaceElement) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, name: str) -> NamespaceElement: ...
    @property
    def Item(self, index: int) -> NamespaceElement: ...
    def Remove(self, element: NamespaceElement) -> None: ...
    @Item.setter
    def Item(self, index: int, value: NamespaceElement) -> None: ...


class RoutingExtensionElement(BehaviorExtensionElement):
    def __init__(self): ...
    @property
    def BehaviorType(self) -> Type: ...
    @property
    def EnsureOrderedDispatch(self) -> bool: ...
    @property
    def FilterTableName(self) -> str: ...
    @property
    def RouteOnHeadersOnly(self) -> bool: ...
    @property
    def SoapProcessingEnabled(self) -> bool: ...
    @EnsureOrderedDispatch.setter
    def EnsureOrderedDispatch(self, value: bool) -> None: ...
    @FilterTableName.setter
    def FilterTableName(self, value: str) -> None: ...
    @RouteOnHeadersOnly.setter
    def RouteOnHeadersOnly(self, value: bool) -> None: ...
    @SoapProcessingEnabled.setter
    def SoapProcessingEnabled(self, value: bool) -> None: ...


class RoutingSection(ConfigurationSection):
    def __init__(self): ...
    def CreateFilterTable(name: str) -> MessageFilterTable: ...
    @property
    def BackupLists(self) -> BackupListCollection: ...
    @property
    def Filters(self) -> FilterElementCollection: ...
    @property
    def FilterTables(self) -> FilterTableCollection: ...
    @property
    def NamespaceTable(self) -> NamespaceElementCollection: ...


class SoapProcessingExtensionElement(BehaviorExtensionElement):
    def __init__(self): ...
    @property
    def BehaviorType(self) -> Type: ...
    @property
    def ProcessMessages(self) -> bool: ...
    @ProcessMessages.setter
    def ProcessMessages(self, value: bool) -> None: ...
