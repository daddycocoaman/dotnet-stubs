from typing import Tuple, Set, Iterable, List


class DllHostInitializer(Object):
    def __init__(self): ...
    def Shutdown(self) -> None: ...
    def Startup(self, punkProcessControl: Object) -> None: ...


class IChannelCredentials:
    def SetClientCertificateFromFile(self, fileName: str, password: str, keyStorageFlags: str) -> None: ...
    def SetClientCertificateFromStore(self, storeLocation: str, storeName: str, findType: str, findValue: Object) -> None: ...
    def SetClientCertificateFromStoreByName(self, subjectName: str, storeLocation: str, storeName: str) -> None: ...
    def SetDefaultServiceCertificateFromFile(self, fileName: str, password: str, keyStorageFlags: str) -> None: ...
    def SetDefaultServiceCertificateFromStore(self, storeLocation: str, storeName: str, findType: str, findValue: Object) -> None: ...
    def SetDefaultServiceCertificateFromStoreByName(self, subjectName: str, storeLocation: str, storeName: str) -> None: ...
    def SetIssuedToken(self, localIssuerAddres: str, localIssuerBindingType: str, localIssuerBinding: str) -> None: ...
    def SetServiceCertificateAuthentication(self, storeLocation: str, revocationMode: str, certificationValidationMode: str) -> None: ...
    def SetUserNameCredential(self, userName: str, password: str) -> None: ...
    def SetWindowsCredential(self, domain: str, userName: str, password: str, impersonationLevel: int, allowNtlm: bool) -> None: ...


class PersistStreamTypeWrapper(Object):
    def __init__(self): ...
    @property
    def ExtensionData(self) -> ExtensionDataObject: ...
    def GetObject(self, obj: T) -> Tuple[T]: ...
    @ExtensionData.setter
    def ExtensionData(self, value: ExtensionDataObject) -> None: ...
    def SetObject(self, obj: T) -> None: ...


class ServiceMoniker(ContextBoundObject):
    def __init__(self): ...


class WasHostedComPlusFactory(ServiceHostFactoryBase):
    def __init__(self): ...
    def CreateServiceHost(self, constructorString: str, baseAddresses: Set(Uri)) -> ServiceHostBase: ...
