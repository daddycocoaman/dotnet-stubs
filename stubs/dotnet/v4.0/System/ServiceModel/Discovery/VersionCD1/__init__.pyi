from typing import Tuple, Set, Iterable, List


class DiscoveryMessageSequenceCD1(Object):
    def FromDiscoveryMessageSequence(discoveryMessageSequence: DiscoveryMessageSequence) -> DiscoveryMessageSequenceCD1: ...
    @overload
    def GetSchema(self) -> XmlSchema: ...
    @overload
    def GetSchema(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def ReadXml(self, reader: XmlReader) -> None: ...
    def ToDiscoveryMessageSequence(self) -> DiscoveryMessageSequence: ...
    def WriteXml(self, writer: XmlWriter) -> None: ...


class EndpointDiscoveryMetadataCD1(Object):
    def FromEndpointDiscoveryMetadata(endpointDiscoveryMetadata: EndpointDiscoveryMetadata) -> EndpointDiscoveryMetadataCD1: ...
    @overload
    def GetSchema(self) -> XmlSchema: ...
    @overload
    def GetSchema(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def ReadXml(self, reader: XmlReader) -> None: ...
    def ToEndpointDiscoveryMetadata(self) -> EndpointDiscoveryMetadata: ...
    def WriteXml(self, writer: XmlWriter) -> None: ...


class FindCriteriaCD1(Object):
    def FromFindCriteria(findCriteria: FindCriteria) -> FindCriteriaCD1: ...
    @overload
    def GetSchema(self) -> XmlSchema: ...
    @overload
    def GetSchema(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def ReadXml(self, reader: XmlReader) -> None: ...
    def ToFindCriteria(self) -> FindCriteria: ...
    def WriteXml(self, writer: XmlWriter) -> None: ...


class ResolveCriteriaCD1(Object):
    def FromResolveCriteria(resolveCriteria: ResolveCriteria) -> ResolveCriteriaCD1: ...
    @overload
    def GetSchema(self) -> XmlSchema: ...
    @overload
    def GetSchema(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def ReadXml(self, reader: XmlReader) -> None: ...
    def ToResolveCriteria(self) -> ResolveCriteria: ...
    def WriteXml(self, writer: XmlWriter) -> None: ...
