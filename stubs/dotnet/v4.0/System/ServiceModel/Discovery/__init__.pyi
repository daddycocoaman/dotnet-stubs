__all__ = ['Configuration','Version11','VersionApril2005','VersionCD1']
from typing import Tuple, Set, Iterable, List


class AnnouncementClient(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, endpointConfigurationName: str): ...
    @overload
    def __init__(self, announcementEndpoint: AnnouncementEndpoint): ...
    def add_AnnounceOfflineCompleted(self, value: EventHandler) -> None: ...
    def add_AnnounceOnlineCompleted(self, value: EventHandler) -> None: ...
    def AnnounceOffline(self, discoveryMetadata: EndpointDiscoveryMetadata) -> None: ...
    @overload
    def AnnounceOfflineAsync(self, discoveryMetadata: EndpointDiscoveryMetadata) -> None: ...
    @overload
    def AnnounceOfflineAsync(self, discoveryMetadata: EndpointDiscoveryMetadata, userState: Object) -> None: ...
    def AnnounceOfflineTaskAsync(self, discoveryMetadata: EndpointDiscoveryMetadata) -> Task: ...
    def AnnounceOnline(self, discoveryMetadata: EndpointDiscoveryMetadata) -> None: ...
    @overload
    def AnnounceOnlineAsync(self, discoveryMetadata: EndpointDiscoveryMetadata) -> None: ...
    @overload
    def AnnounceOnlineAsync(self, discoveryMetadata: EndpointDiscoveryMetadata, userState: Object) -> None: ...
    def AnnounceOnlineTaskAsync(self, discoveryMetadata: EndpointDiscoveryMetadata) -> Task: ...
    def BeginAnnounceOffline(self, discoveryMetadata: EndpointDiscoveryMetadata, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginAnnounceOnline(self, discoveryMetadata: EndpointDiscoveryMetadata, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def Close(self) -> None: ...
    def EndAnnounceOffline(self, result: IAsyncResult) -> None: ...
    def EndAnnounceOnline(self, result: IAsyncResult) -> None: ...
    @property
    def ChannelFactory(self) -> ChannelFactory: ...
    @property
    def ClientCredentials(self) -> ClientCredentials: ...
    @property
    def Endpoint(self) -> ServiceEndpoint: ...
    @property
    def InnerChannel(self) -> IClientChannel: ...
    @property
    def MessageSequenceGenerator(self) -> DiscoveryMessageSequenceGenerator: ...
    def Open(self) -> None: ...
    def remove_AnnounceOfflineCompleted(self, value: EventHandler) -> None: ...
    def remove_AnnounceOnlineCompleted(self, value: EventHandler) -> None: ...
    @MessageSequenceGenerator.setter
    def MessageSequenceGenerator(self, value: DiscoveryMessageSequenceGenerator) -> None: ...


class AnnouncementEndpoint(ServiceEndpoint):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, discoveryVersion: DiscoveryVersion): ...
    @overload
    def __init__(self, binding: Binding, address: EndpointAddress): ...
    @overload
    def __init__(self, discoveryVersion: DiscoveryVersion, binding: Binding, address: EndpointAddress): ...
    @property
    def DiscoveryVersion(self) -> DiscoveryVersion: ...
    @property
    def MaxAnnouncementDelay(self) -> TimeSpan: ...
    @MaxAnnouncementDelay.setter
    def MaxAnnouncementDelay(self, value: TimeSpan) -> None: ...


class AnnouncementEventArgs(EventArgs):
    @property
    def EndpointDiscoveryMetadata(self) -> EndpointDiscoveryMetadata: ...
    @property
    def MessageSequence(self) -> DiscoveryMessageSequence: ...


class AnnouncementService(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, duplicateMessageHistoryLength: int): ...
    def add_OfflineAnnouncementReceived(self, value: EventHandler) -> None: ...
    def add_OnlineAnnouncementReceived(self, value: EventHandler) -> None: ...
    def remove_OfflineAnnouncementReceived(self, value: EventHandler) -> None: ...
    def remove_OnlineAnnouncementReceived(self, value: EventHandler) -> None: ...


class DiscoveryClient(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, endpointConfigurationName: str): ...
    @overload
    def __init__(self, discoveryEndpoint: DiscoveryEndpoint): ...
    def add_FindCompleted(self, value: EventHandler) -> None: ...
    def add_FindProgressChanged(self, value: EventHandler) -> None: ...
    def add_ProxyAvailable(self, value: EventHandler) -> None: ...
    def add_ResolveCompleted(self, value: EventHandler) -> None: ...
    def CancelAsync(self, userState: Object) -> None: ...
    def Close(self) -> None: ...
    def Find(self, criteria: FindCriteria) -> FindResponse: ...
    @overload
    def FindAsync(self, criteria: FindCriteria) -> None: ...
    @overload
    def FindAsync(self, criteria: FindCriteria, userState: Object) -> None: ...
    @overload
    def FindTaskAsync(self, criteria: FindCriteria) -> Task: ...
    @overload
    def FindTaskAsync(self, criteria: FindCriteria, cancellationToken: CancellationToken) -> Task: ...
    @property
    def ChannelFactory(self) -> ChannelFactory: ...
    @property
    def ClientCredentials(self) -> ClientCredentials: ...
    @property
    def Endpoint(self) -> ServiceEndpoint: ...
    @property
    def InnerChannel(self) -> IClientChannel: ...
    def Open(self) -> None: ...
    def remove_FindCompleted(self, value: EventHandler) -> None: ...
    def remove_FindProgressChanged(self, value: EventHandler) -> None: ...
    def remove_ProxyAvailable(self, value: EventHandler) -> None: ...
    def remove_ResolveCompleted(self, value: EventHandler) -> None: ...
    def Resolve(self, criteria: ResolveCriteria) -> ResolveResponse: ...
    @overload
    def ResolveAsync(self, criteria: ResolveCriteria) -> None: ...
    @overload
    def ResolveAsync(self, criteria: ResolveCriteria, userState: Object) -> None: ...
    @overload
    def ResolveTaskAsync(self, criteria: ResolveCriteria) -> Task: ...
    @overload
    def ResolveTaskAsync(self, criteria: ResolveCriteria, cancellationToken: CancellationToken) -> Task: ...


class DiscoveryClientBindingElement(BindingElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, discoveryEndpointProvider: DiscoveryEndpointProvider, findCriteria: FindCriteria): ...
    def BuildChannelFactory(self, context: BindingContext) -> IChannelFactory: ...
    def BuildChannelListener(self, context: BindingContext) -> IChannelListener: ...
    def CanBuildChannelFactory(self, context: BindingContext) -> bool: ...
    def CanBuildChannelListener(self, context: BindingContext) -> bool: ...
    def Clone(self) -> BindingElement: ...
    @property
    def DiscoveryEndpointProvider(self) -> DiscoveryEndpointProvider: ...
    @property
    def FindCriteria(self) -> FindCriteria: ...
    def GetProperty(self, context: BindingContext) -> T: ...
    @DiscoveryEndpointProvider.setter
    def DiscoveryEndpointProvider(self, value: DiscoveryEndpointProvider) -> None: ...
    @FindCriteria.setter
    def FindCriteria(self, value: FindCriteria) -> None: ...


class DiscoveryEndpoint(ServiceEndpoint):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, binding: Binding, endpointAddress: EndpointAddress): ...
    @overload
    def __init__(self, discoveryVersion: DiscoveryVersion, discoveryMode: ServiceDiscoveryMode): ...
    @overload
    def __init__(self, discoveryVersion: DiscoveryVersion, discoveryMode: ServiceDiscoveryMode, binding: Binding, endpointAddress: EndpointAddress): ...
    @property
    def DiscoveryMode(self) -> ServiceDiscoveryMode: ...
    @property
    def DiscoveryVersion(self) -> DiscoveryVersion: ...
    @property
    def MaxResponseDelay(self) -> TimeSpan: ...
    @MaxResponseDelay.setter
    def MaxResponseDelay(self, value: TimeSpan) -> None: ...


class DiscoveryEndpointProvider(Object):
    def GetDiscoveryEndpoint(self) -> DiscoveryEndpoint: ...


class DiscoveryMessageSequence(Object):
    def CanCompareTo(self, other: DiscoveryMessageSequence) -> bool: ...
    def CompareTo(self, other: DiscoveryMessageSequence) -> int: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: DiscoveryMessageSequence) -> bool: ...
    @property
    def InstanceId(self) -> Int64: ...
    @property
    def MessageNumber(self) -> Int64: ...
    @property
    def SequenceId(self) -> Uri: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(messageSequence1: DiscoveryMessageSequence, messageSequence2: DiscoveryMessageSequence) -> bool: ...
    def op_Inequality(messageSequence1: DiscoveryMessageSequence, messageSequence2: DiscoveryMessageSequence) -> bool: ...
    def ToString(self) -> str: ...


class DiscoveryMessageSequenceGenerator(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, instanceId: Int64, sequenceId: Uri): ...
    def Next(self) -> DiscoveryMessageSequence: ...


class DiscoveryOperationContextExtension(Object):
    @property
    def DiscoveryMode(self) -> ServiceDiscoveryMode: ...
    @property
    def DiscoveryVersion(self) -> DiscoveryVersion: ...
    @property
    def MaxResponseDelay(self) -> TimeSpan: ...


class DiscoveryProxy(Object):
    pass


class DiscoveryService(Object):
    pass


class DiscoveryServiceExtension(Object):
    @property
    def PublishedEndpoints(self) -> ReadOnlyCollection: ...


class DiscoveryVersion(Object):
    def FromName(name: str) -> DiscoveryVersion: ...
    @property
    def AdhocAddress(self) -> Uri: ...
    @property
    def MessageVersion(self) -> MessageVersion: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def WSDiscovery11() -> DiscoveryVersion: ...
    @property
    def WSDiscoveryApril2005() -> DiscoveryVersion: ...
    @property
    def WSDiscoveryCD1() -> DiscoveryVersion: ...
    def ToString(self) -> str: ...


class DynamicEndpoint(ServiceEndpoint):
    def __init__(self, contract: ContractDescription, binding: Binding): ...
    @property
    def DiscoveryEndpointProvider(self) -> DiscoveryEndpointProvider: ...
    @property
    def FindCriteria(self) -> FindCriteria: ...
    @DiscoveryEndpointProvider.setter
    def DiscoveryEndpointProvider(self, value: DiscoveryEndpointProvider) -> None: ...
    @FindCriteria.setter
    def FindCriteria(self, value: FindCriteria) -> None: ...


class EndpointDiscoveryBehavior(Object):
    def __init__(self): ...
    @property
    def ContractTypeNames(self) -> Collection: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Extensions(self) -> Collection: ...
    @property
    def Scopes(self) -> Collection: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...


class EndpointDiscoveryMetadata(Object):
    def __init__(self): ...
    @overload
    def FromServiceEndpoint(endpoint: ServiceEndpoint) -> EndpointDiscoveryMetadata: ...
    @overload
    def FromServiceEndpoint(endpoint: ServiceEndpoint, endpointDispatcher: EndpointDispatcher) -> EndpointDiscoveryMetadata: ...
    @property
    def Address(self) -> EndpointAddress: ...
    @property
    def ContractTypeNames(self) -> Collection: ...
    @property
    def Extensions(self) -> Collection: ...
    @property
    def ListenUris(self) -> Collection: ...
    @property
    def Scopes(self) -> Collection: ...
    @property
    def Version(self) -> int: ...
    @Address.setter
    def Address(self, value: EndpointAddress) -> None: ...
    @Version.setter
    def Version(self, value: int) -> None: ...


class FindCompletedEventArgs(AsyncCompletedEventArgs):
    @property
    def Result(self) -> FindResponse: ...


class FindCriteria(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contractType: Type): ...
    @overload
    def CreateMetadataExchangeEndpointCriteria() -> FindCriteria: ...
    @overload
    def CreateMetadataExchangeEndpointCriteria(contractType: Type) -> FindCriteria: ...
    @overload
    def CreateMetadataExchangeEndpointCriteria(contractTypeNames: Iterable[XmlQualifiedName]) -> FindCriteria: ...
    @property
    def ContractTypeNames(self) -> Collection: ...
    @property
    def Duration(self) -> TimeSpan: ...
    @property
    def Extensions(self) -> Collection: ...
    @property
    def MaxResults(self) -> int: ...
    @property
    def ScopeMatchBy(self) -> Uri: ...
    @property
    def Scopes(self) -> Collection: ...
    def IsMatch(self, endpointDiscoveryMetadata: EndpointDiscoveryMetadata) -> bool: ...
    @Duration.setter
    def Duration(self, value: TimeSpan) -> None: ...
    @MaxResults.setter
    def MaxResults(self, value: int) -> None: ...
    @ScopeMatchBy.setter
    def ScopeMatchBy(self, value: Uri) -> None: ...


class FindProgressChangedEventArgs(ProgressChangedEventArgs):
    @property
    def EndpointDiscoveryMetadata(self) -> EndpointDiscoveryMetadata: ...
    @property
    def MessageSequence(self) -> DiscoveryMessageSequence: ...


class FindRequestContext(Object):
    def AddMatchingEndpoint(self, matchingEndpoint: EndpointDiscoveryMetadata) -> None: ...
    @property
    def Criteria(self) -> FindCriteria: ...


class FindResponse(Object):
    @property
    def Endpoints(self) -> Collection: ...
    def GetMessageSequence(self, endpointDiscoveryMetadata: EndpointDiscoveryMetadata) -> DiscoveryMessageSequence: ...


class ResolveCompletedEventArgs(AsyncCompletedEventArgs):
    @property
    def Result(self) -> ResolveResponse: ...


class ResolveCriteria(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, address: EndpointAddress): ...
    @property
    def Address(self) -> EndpointAddress: ...
    @property
    def Duration(self) -> TimeSpan: ...
    @property
    def Extensions(self) -> Collection: ...
    @Address.setter
    def Address(self, value: EndpointAddress) -> None: ...
    @Duration.setter
    def Duration(self, value: TimeSpan) -> None: ...


class ResolveResponse(Object):
    @property
    def EndpointDiscoveryMetadata(self) -> EndpointDiscoveryMetadata: ...
    @property
    def MessageSequence(self) -> DiscoveryMessageSequence: ...


class ServiceDiscoveryBehavior(Object):
    def __init__(self): ...
    @property
    def AnnouncementEndpoints(self) -> Collection: ...


class ServiceDiscoveryMode:
    Adhoc = 0
    Managed = 1


class UdpAnnouncementEndpoint(AnnouncementEndpoint):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, multicastAddress: str): ...
    @overload
    def __init__(self, multicastAddress: Uri): ...
    @overload
    def __init__(self, discoveryVersion: DiscoveryVersion): ...
    @overload
    def __init__(self, discoveryVersion: DiscoveryVersion, multicastAddress: str): ...
    @overload
    def __init__(self, discoveryVersion: DiscoveryVersion, multicastAddress: Uri): ...
    @property
    def MulticastAddress(self) -> Uri: ...
    @property
    def TransportSettings(self) -> UdpTransportSettings: ...
    @MulticastAddress.setter
    def MulticastAddress(self, value: Uri) -> None: ...


class UdpDiscoveryEndpoint(DiscoveryEndpoint):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, multicastAddress: str): ...
    @overload
    def __init__(self, multicastAddress: Uri): ...
    @overload
    def __init__(self, discoveryVersion: DiscoveryVersion): ...
    @overload
    def __init__(self, discoveryVersion: DiscoveryVersion, multicastAddress: str): ...
    @overload
    def __init__(self, discoveryVersion: DiscoveryVersion, multicastAddress: Uri): ...
    @property
    def MulticastAddress(self) -> Uri: ...
    @property
    def TransportSettings(self) -> UdpTransportSettings: ...
    @MulticastAddress.setter
    def MulticastAddress(self, value: Uri) -> None: ...


class UdpTransportSettings(Object):
    @property
    def DuplicateMessageHistoryLength(self) -> int: ...
    @property
    def MaxBufferPoolSize(self) -> Int64: ...
    @property
    def MaxMulticastRetransmitCount(self) -> int: ...
    @property
    def MaxPendingMessageCount(self) -> int: ...
    @property
    def MaxReceivedMessageSize(self) -> Int64: ...
    @property
    def MaxUnicastRetransmitCount(self) -> int: ...
    @property
    def MulticastInterfaceId(self) -> str: ...
    @property
    def SocketReceiveBufferSize(self) -> int: ...
    @property
    def TimeToLive(self) -> int: ...
    @DuplicateMessageHistoryLength.setter
    def DuplicateMessageHistoryLength(self, value: int) -> None: ...
    @MaxBufferPoolSize.setter
    def MaxBufferPoolSize(self, value: Int64) -> None: ...
    @MaxMulticastRetransmitCount.setter
    def MaxMulticastRetransmitCount(self, value: int) -> None: ...
    @MaxPendingMessageCount.setter
    def MaxPendingMessageCount(self, value: int) -> None: ...
    @MaxReceivedMessageSize.setter
    def MaxReceivedMessageSize(self, value: Int64) -> None: ...
    @MaxUnicastRetransmitCount.setter
    def MaxUnicastRetransmitCount(self, value: int) -> None: ...
    @MulticastInterfaceId.setter
    def MulticastInterfaceId(self, value: str) -> None: ...
    @SocketReceiveBufferSize.setter
    def SocketReceiveBufferSize(self, value: int) -> None: ...
    @TimeToLive.setter
    def TimeToLive(self, value: int) -> None: ...
