from typing import Tuple, Set, Iterable, List


class InstanceCollisionException(InstancePersistenceCommandException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, message: str, innerException: Exception): ...


class InstanceCompleteException(InstancePersistenceCommandException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, message: str, innerException: Exception): ...


class InstanceHandle(Object):
    def Free(self) -> None: ...
    @property
    def IsValid(self) -> bool: ...


class InstanceHandleConflictException(InstancePersistenceCommandException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, message: str, innerException: Exception): ...


class InstanceKey(Object):
    @overload
    def __init__(self, value: Guid): ...
    @overload
    def __init__(self, value: Guid, metadata: IDictionary): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def InvalidKey() -> InstanceKey: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Metadata(self) -> IDictionary: ...
    @property
    def Value(self) -> Guid: ...
    def GetHashCode(self) -> int: ...


class InstanceKeyCollisionException(InstancePersistenceCommandException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, instanceKey: InstanceKey, conflictingInstanceId: Guid): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, instanceKey: InstanceKey, conflictingInstanceId: Guid, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, instanceKey: InstanceKey, conflictingInstanceId: Guid, message: str, innerException: Exception): ...
    @property
    def ConflictingInstanceId(self) -> Guid: ...
    @property
    def InstanceKey(self) -> InstanceKey: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class InstanceKeyCompleteException(InstancePersistenceCommandException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceKey: InstanceKey): ...
    @overload
    def __init__(self, commandName: XName, instanceKey: InstanceKey, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, instanceKey: InstanceKey, message: str, innerException: Exception): ...
    @property
    def InstanceKey(self) -> InstanceKey: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class InstanceKeyNotReadyException(InstancePersistenceCommandException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceKey: InstanceKey): ...
    @overload
    def __init__(self, commandName: XName, instanceKey: InstanceKey, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, instanceKey: InstanceKey, message: str, innerException: Exception): ...
    @property
    def InstanceKey(self) -> InstanceKey: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class InstanceKeyState:
    Unknown = 0
    Associated = 1
    Completed = 2


class InstanceKeyView(Object):
    @property
    def InstanceKey(self) -> Guid: ...
    @property
    def InstanceKeyMetadata(self) -> IDictionary: ...
    @property
    def InstanceKeyMetadataConsistency(self) -> InstanceValueConsistency: ...
    @property
    def InstanceKeyState(self) -> InstanceKeyState: ...


class InstanceLockedException(InstancePersistenceCommandException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, instanceOwnerId: Guid, serializableInstanceOwnerMetadata: IDictionary): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, instanceOwnerId: Guid, serializableInstanceOwnerMetadata: IDictionary, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, instanceOwnerId: Guid, serializableInstanceOwnerMetadata: IDictionary, message: str, innerException: Exception): ...
    @property
    def InstanceOwnerId(self) -> Guid: ...
    @property
    def SerializableInstanceOwnerMetadata(self) -> IDictionary: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class InstanceLockLostException(InstancePersistenceCommandException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, message: str, innerException: Exception): ...


class InstanceLockQueryResult(InstanceStoreQueryResult):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, instanceOwnerIds: IDictionary): ...
    @overload
    def __init__(self, instanceId: Guid, instanceOwnerId: Guid): ...
    @property
    def InstanceOwnerIds(self) -> IDictionary: ...


class InstanceNotReadyException(InstancePersistenceCommandException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, message: str, innerException: Exception): ...


class InstanceOwner(Object):
    @property
    def InstanceOwnerId(self) -> Guid: ...


class InstanceOwnerException(InstancePersistenceException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceOwnerId: Guid): ...
    @overload
    def __init__(self, commandName: XName, instanceOwnerId: Guid, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceOwnerId: Guid, message: str, innerException: Exception): ...
    @property
    def InstanceOwnerId(self) -> Guid: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class InstanceOwnerQueryResult(InstanceStoreQueryResult):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, instanceOwners: IDictionary): ...
    @overload
    def __init__(self, instanceOwnerId: Guid, metadata: IDictionary): ...
    @property
    def InstanceOwners(self) -> IDictionary: ...


class InstancePersistenceCommand(Object):
    @property
    def Name(self) -> XName: ...


class InstancePersistenceCommandException(InstancePersistenceException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, commandName: XName): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid): ...
    @overload
    def __init__(self, commandName: XName, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, instanceId: Guid, message: str, innerException: Exception): ...
    @property
    def InstanceId(self) -> Guid: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class InstancePersistenceContext(Object):
    def AssociatedInstanceKey(self, key: Guid) -> None: ...
    def BeginBindReclaimedLock(self, instanceVersion: Int64, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginExecute(self, command: InstancePersistenceCommand, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BindAcquiredLock(self, instanceVersion: Int64) -> None: ...
    def BindEvent(self, persistenceEvent: InstancePersistenceEvent) -> None: ...
    def BindInstance(self, instanceId: Guid) -> None: ...
    def BindInstanceOwner(self, instanceOwnerId: Guid, lockToken: Guid) -> None: ...
    def BindReclaimedLock(self, instanceVersion: Int64, timeout: TimeSpan) -> None: ...
    def CompletedInstance(self) -> None: ...
    def CompletedInstanceKey(self, key: Guid) -> None: ...
    def CreateBindReclaimedLockException(self, instanceVersion: Int64) -> Exception: ...
    def EndBindReclaimedLock(self, result: IAsyncResult) -> None: ...
    def EndExecute(self, result: IAsyncResult) -> None: ...
    def Execute(self, command: InstancePersistenceCommand, timeout: TimeSpan) -> None: ...
    @property
    def InstanceHandle(self) -> InstanceHandle: ...
    @property
    def InstanceVersion(self) -> Int64: ...
    @property
    def InstanceView(self) -> InstanceView: ...
    @property
    def LockToken(self) -> Guid: ...
    @property
    def UserContext(self) -> Object: ...
    def LoadedInstance(self, state: InstanceState, instanceData: IDictionary, instanceMetadata: IDictionary, associatedInstanceKeyMetadata: IDictionary, completedInstanceKeyMetadata: IDictionary) -> None: ...
    def PersistedInstance(self, data: IDictionary) -> None: ...
    def QueriedInstanceStore(self, queryResult: InstanceStoreQueryResult) -> None: ...
    def ReadInstanceKeyMetadata(self, key: Guid, metadata: IDictionary, complete: bool) -> None: ...
    def ReadInstanceMetadata(self, metadata: IDictionary, complete: bool) -> None: ...
    def ReadInstanceOwnerMetadata(self, metadata: IDictionary, complete: bool) -> None: ...
    def SetCancellationHandler(self, cancellationHandler: Action) -> None: ...
    def UnassociatedInstanceKey(self, key: Guid) -> None: ...
    def WroteInstanceKeyMetadataValue(self, key: Guid, name: XName, value: InstanceValue) -> None: ...
    def WroteInstanceMetadataValue(self, name: XName, value: InstanceValue) -> None: ...
    def WroteInstanceOwnerMetadataValue(self, name: XName, value: InstanceValue) -> None: ...


class InstancePersistenceEvent(Object):
    @overload
    def Equals(self, persistenceEvent: InstancePersistenceEvent) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> XName: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: InstancePersistenceEvent, right: InstancePersistenceEvent) -> bool: ...
    def op_Inequality(left: InstancePersistenceEvent, right: InstancePersistenceEvent) -> bool: ...




class InstancePersistenceException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, commandName: XName): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, innerException: Exception): ...
    @overload
    def __init__(self, commandName: XName, message: str): ...
    @overload
    def __init__(self, commandName: XName, message: str, innerException: Exception): ...
    @property
    def CommandName(self) -> XName: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class InstanceState:
    Unknown = 0
    Uninitialized = 1
    Initialized = 2
    Completed = 3


class InstanceStore(Object):
    def BeginExecute(self, handle: InstanceHandle, command: InstancePersistenceCommand, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginWaitForEvents(self, handle: InstanceHandle, timeout: TimeSpan, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def CreateInstanceHandle(self) -> InstanceHandle: ...
    @overload
    def CreateInstanceHandle(self, owner: InstanceOwner) -> InstanceHandle: ...
    @overload
    def CreateInstanceHandle(self, instanceId: Guid) -> InstanceHandle: ...
    @overload
    def CreateInstanceHandle(self, owner: InstanceOwner, instanceId: Guid) -> InstanceHandle: ...
    def EndExecute(self, result: IAsyncResult) -> InstanceView: ...
    def EndWaitForEvents(self, result: IAsyncResult) -> List: ...
    def Execute(self, handle: InstanceHandle, command: InstancePersistenceCommand, timeout: TimeSpan) -> InstanceView: ...
    @property
    def DefaultInstanceOwner(self) -> InstanceOwner: ...
    @DefaultInstanceOwner.setter
    def DefaultInstanceOwner(self, value: InstanceOwner) -> None: ...
    def WaitForEvents(self, handle: InstanceHandle, timeout: TimeSpan) -> List: ...


class InstanceStoreQueryResult(Object):
    pass


class InstanceValue(Object):
    @overload
    def __init__(self, value: Object): ...
    @overload
    def __init__(self, value: Object, options: InstanceValueOptions): ...
    @property
    def DeletedValue() -> InstanceValue: ...
    @property
    def IsDeletedValue(self) -> bool: ...
    @property
    def Options(self) -> InstanceValueOptions: ...
    @property
    def Value(self) -> Object: ...


class InstanceValueConsistency:
    #None = 0
    InDoubt = 1
    Partial = 2


class InstanceValueOptions:
    #None = 0
    Optional = 1
    WriteOnly = 2


class InstanceView(Object):
    @property
    def InstanceData(self) -> IDictionary: ...
    @property
    def InstanceDataConsistency(self) -> InstanceValueConsistency: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def InstanceKeys(self) -> IDictionary: ...
    @property
    def InstanceKeysConsistency(self) -> InstanceValueConsistency: ...
    @property
    def InstanceMetadata(self) -> IDictionary: ...
    @property
    def InstanceMetadataConsistency(self) -> InstanceValueConsistency: ...
    @property
    def InstanceOwner(self) -> InstanceOwner: ...
    @property
    def InstanceOwnerMetadata(self) -> IDictionary: ...
    @property
    def InstanceOwnerMetadataConsistency(self) -> InstanceValueConsistency: ...
    @property
    def InstanceState(self) -> InstanceState: ...
    @property
    def InstanceStoreQueryResults(self) -> ReadOnlyCollection: ...
    @property
    def IsBoundToInstance(self) -> bool: ...
    @property
    def IsBoundToInstanceOwner(self) -> bool: ...
    @property
    def IsBoundToLock(self) -> bool: ...
