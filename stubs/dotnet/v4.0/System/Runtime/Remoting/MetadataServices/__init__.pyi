from typing import Tuple, Set, Iterable, List


class MetaData(Object):
    def __init__(self): ...
    def ConvertCodeSourceFileToAssemblyFile(codePath: str, assemblyPath: str, strongNameFilename: str) -> None: ...
    def ConvertCodeSourceStreamToAssemblyFile(outCodeStreamList: ArrayList, assemblyPath: str, strongNameFilename: str) -> None: ...
    @overload
    def ConvertSchemaStreamToCodeSourceStream(clientProxy: bool, outputDirectory: str, inputStream: Stream, outCodeStreamList: ArrayList) -> None: ...
    @overload
    def ConvertSchemaStreamToCodeSourceStream(clientProxy: bool, outputDirectory: str, inputStream: Stream, outCodeStreamList: ArrayList, proxyUrl: str) -> None: ...
    @overload
    def ConvertSchemaStreamToCodeSourceStream(clientProxy: bool, outputDirectory: str, inputStream: Stream, outCodeStreamList: ArrayList, proxyUrl: str, proxyNamespace: str) -> None: ...
    @overload
    def ConvertTypesToSchemaToFile(types: Set(Type), sdlType: SdlType, path: str) -> None: ...
    @overload
    def ConvertTypesToSchemaToFile(types: Set(ServiceType), sdlType: SdlType, path: str) -> None: ...
    @overload
    def ConvertTypesToSchemaToStream(types: Set(Type), sdlType: SdlType, outputStream: Stream) -> None: ...
    @overload
    def ConvertTypesToSchemaToStream(serviceTypes: Set(ServiceType), sdlType: SdlType, outputStream: Stream) -> None: ...
    def RetrieveSchemaFromUrlToFile(url: str, path: str) -> None: ...
    def RetrieveSchemaFromUrlToStream(url: str, outputStream: Stream) -> None: ...
    def SaveStreamToFile(inputStream: Stream, path: str) -> None: ...


class SdlChannelSink(Object):
    def __init__(self, receiver: IChannelReceiver, nextSink: IServerChannelSink): ...
    def AsyncProcessResponse(self, sinkStack: IServerResponseChannelSinkStack, state: Object, msg: IMessage, headers: ITransportHeaders, stream: Stream) -> None: ...
    @property
    def NextChannelSink(self) -> IServerChannelSink: ...
    @property
    def Properties(self) -> IDictionary: ...
    def GetResponseStream(self, sinkStack: IServerResponseChannelSinkStack, state: Object, msg: IMessage, headers: ITransportHeaders) -> Stream: ...
    def ProcessMessage(self, sinkStack: IServerChannelSinkStack, requestMsg: IMessage, requestHeaders: ITransportHeaders, requestStream: Stream) -> Tuple[ServerProcessing, IMessage, ITransportHeaders, Stream]: ...


class SdlChannelSinkProvider(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, properties: IDictionary, providerData: ICollection): ...
    def CreateSink(self, channel: IChannelReceiver) -> IServerChannelSink: ...
    @property
    def Next(self) -> IServerChannelSinkProvider: ...
    def GetChannelData(self, localChannelData: IChannelDataStore) -> None: ...
    @Next.setter
    def Next(self, value: IServerChannelSinkProvider) -> None: ...


class SdlType:
    Sdl = 0
    Wsdl = 1


class ServiceType(Object):
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, type: Type, url: str): ...
    @property
    def ObjectType(self) -> Type: ...
    @property
    def Url(self) -> str: ...


class SUDSGeneratorException(Exception):
    pass


class SUDSParserException(Exception):
    pass
