__all__ = ['Http','Ipc','Tcp']
from typing import Tuple, Set, Iterable, List


class BinaryClientFormatterSink(Object):
    def __init__(self, nextSink: IClientChannelSink): ...
    def AsyncProcessMessage(self, msg: IMessage, replySink: IMessageSink) -> IMessageCtrl: ...
    def AsyncProcessRequest(self, sinkStack: IClientChannelSinkStack, msg: IMessage, headers: ITransportHeaders, stream: Stream) -> None: ...
    def AsyncProcessResponse(self, sinkStack: IClientResponseChannelSinkStack, state: Object, headers: ITransportHeaders, stream: Stream) -> None: ...
    @property
    def NextChannelSink(self) -> IClientChannelSink: ...
    @property
    def NextSink(self) -> IMessageSink: ...
    @property
    def Properties(self) -> IDictionary: ...
    def GetRequestStream(self, msg: IMessage, headers: ITransportHeaders) -> Stream: ...
    def ProcessMessage(self, msg: IMessage, requestHeaders: ITransportHeaders, requestStream: Stream) -> Tuple[ITransportHeaders, Stream]: ...
    def SyncProcessMessage(self, msg: IMessage) -> IMessage: ...


class BinaryClientFormatterSinkProvider(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, properties: IDictionary, providerData: ICollection): ...
    def CreateSink(self, channel: IChannelSender, url: str, remoteChannelData: Object) -> IClientChannelSink: ...
    @property
    def Next(self) -> IClientChannelSinkProvider: ...
    @Next.setter
    def Next(self, value: IClientChannelSinkProvider) -> None: ...


class BinaryServerFormatterSink(Object):
    def __init__(self, protocol: Protocol, nextSink: IServerChannelSink, receiver: IChannelReceiver): ...
    def AsyncProcessResponse(self, sinkStack: IServerResponseChannelSinkStack, state: Object, msg: IMessage, headers: ITransportHeaders, stream: Stream) -> None: ...
    @property
    def NextChannelSink(self) -> IServerChannelSink: ...
    @property
    def Properties(self) -> IDictionary: ...
    @property
    def TypeFilterLevel(self) -> TypeFilterLevel: ...
    def GetResponseStream(self, sinkStack: IServerResponseChannelSinkStack, state: Object, msg: IMessage, headers: ITransportHeaders) -> Stream: ...
    def ProcessMessage(self, sinkStack: IServerChannelSinkStack, requestMsg: IMessage, requestHeaders: ITransportHeaders, requestStream: Stream) -> Tuple[ServerProcessing, IMessage, ITransportHeaders, Stream]: ...
    @TypeFilterLevel.setter
    def TypeFilterLevel(self, value: TypeFilterLevel) -> None: ...


class BinaryServerFormatterSinkProvider(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, properties: IDictionary, providerData: ICollection): ...
    def CreateSink(self, channel: IChannelReceiver) -> IServerChannelSink: ...
    @property
    def Next(self) -> IServerChannelSinkProvider: ...
    @property
    def TypeFilterLevel(self) -> TypeFilterLevel: ...
    def GetChannelData(self, channelData: IChannelDataStore) -> None: ...
    @Next.setter
    def Next(self, value: IServerChannelSinkProvider) -> None: ...
    @TypeFilterLevel.setter
    def TypeFilterLevel(self, value: TypeFilterLevel) -> None: ...


class CommonTransportKeys(Object):
    def __init__(self): ...


class IAuthorizeRemotingConnection:
    def IsConnectingEndPointAuthorized(self, endPoint: EndPoint) -> bool: ...
    def IsConnectingIdentityAuthorized(self, identity: IIdentity) -> bool: ...


class Protocol:
    Http = 0
    Other = 1


class Protocol:
    Http = 0
    Other = 1


class SoapClientFormatterSink(Object):
    def __init__(self, nextSink: IClientChannelSink): ...
    def AsyncProcessMessage(self, msg: IMessage, replySink: IMessageSink) -> IMessageCtrl: ...
    def AsyncProcessRequest(self, sinkStack: IClientChannelSinkStack, msg: IMessage, headers: ITransportHeaders, stream: Stream) -> None: ...
    def AsyncProcessResponse(self, sinkStack: IClientResponseChannelSinkStack, state: Object, headers: ITransportHeaders, stream: Stream) -> None: ...
    @property
    def NextChannelSink(self) -> IClientChannelSink: ...
    @property
    def NextSink(self) -> IMessageSink: ...
    @property
    def Properties(self) -> IDictionary: ...
    def GetRequestStream(self, msg: IMessage, headers: ITransportHeaders) -> Stream: ...
    def ProcessMessage(self, msg: IMessage, requestHeaders: ITransportHeaders, requestStream: Stream) -> Tuple[ITransportHeaders, Stream]: ...
    def SyncProcessMessage(self, msg: IMessage) -> IMessage: ...


class SoapClientFormatterSinkProvider(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, properties: IDictionary, providerData: ICollection): ...
    def CreateSink(self, channel: IChannelSender, url: str, remoteChannelData: Object) -> IClientChannelSink: ...
    @property
    def Next(self) -> IClientChannelSinkProvider: ...
    @Next.setter
    def Next(self, value: IClientChannelSinkProvider) -> None: ...


class SoapServerFormatterSink(Object):
    def __init__(self, protocol: Protocol, nextSink: IServerChannelSink, receiver: IChannelReceiver): ...
    def AsyncProcessResponse(self, sinkStack: IServerResponseChannelSinkStack, state: Object, msg: IMessage, headers: ITransportHeaders, stream: Stream) -> None: ...
    @property
    def NextChannelSink(self) -> IServerChannelSink: ...
    @property
    def Properties(self) -> IDictionary: ...
    @property
    def TypeFilterLevel(self) -> TypeFilterLevel: ...
    def GetResponseStream(self, sinkStack: IServerResponseChannelSinkStack, state: Object, msg: IMessage, headers: ITransportHeaders) -> Stream: ...
    def ProcessMessage(self, sinkStack: IServerChannelSinkStack, requestMsg: IMessage, requestHeaders: ITransportHeaders, requestStream: Stream) -> Tuple[ServerProcessing, IMessage, ITransportHeaders, Stream]: ...
    @TypeFilterLevel.setter
    def TypeFilterLevel(self, value: TypeFilterLevel) -> None: ...


class SoapServerFormatterSinkProvider(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, properties: IDictionary, providerData: ICollection): ...
    def CreateSink(self, channel: IChannelReceiver) -> IServerChannelSink: ...
    @property
    def Next(self) -> IServerChannelSinkProvider: ...
    @property
    def TypeFilterLevel(self) -> TypeFilterLevel: ...
    def GetChannelData(self, channelData: IChannelDataStore) -> None: ...
    @Next.setter
    def Next(self, value: IServerChannelSinkProvider) -> None: ...
    @TypeFilterLevel.setter
    def TypeFilterLevel(self, value: TypeFilterLevel) -> None: ...


class SocketCachePolicy:
    Default = 0
    AbsoluteTimeout = 1
