from typing import Tuple, Set, Iterable, List


class DataContractJsonSerializer(XmlObjectSerializer):
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, type: Type, rootName: str): ...
    @overload
    def __init__(self, type: Type, rootName: XmlDictionaryString): ...
    @overload
    def __init__(self, type: Type, knownTypes: Iterable[Type]): ...
    @overload
    def __init__(self, type: Type, settings: DataContractJsonSerializerSettings): ...
    @overload
    def __init__(self, type: Type, rootName: str, knownTypes: Iterable[Type]): ...
    @overload
    def __init__(self, type: Type, rootName: XmlDictionaryString, knownTypes: Iterable[Type]): ...
    @overload
    def __init__(self, type: Type, knownTypes: Iterable[Type], maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, dataContractSurrogate: IDataContractSurrogate, alwaysEmitTypeInformation: bool): ...
    @overload
    def __init__(self, type: Type, rootName: str, knownTypes: Iterable[Type], maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, dataContractSurrogate: IDataContractSurrogate, alwaysEmitTypeInformation: bool): ...
    @overload
    def __init__(self, type: Type, rootName: XmlDictionaryString, knownTypes: Iterable[Type], maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, dataContractSurrogate: IDataContractSurrogate, alwaysEmitTypeInformation: bool): ...
    @property
    def DataContractSurrogate(self) -> IDataContractSurrogate: ...
    @property
    def DateTimeFormat(self) -> DateTimeFormat: ...
    @property
    def EmitTypeInformation(self) -> EmitTypeInformation: ...
    @property
    def IgnoreExtensionDataObject(self) -> bool: ...
    @property
    def KnownTypes(self) -> ReadOnlyCollection: ...
    @property
    def MaxItemsInObjectGraph(self) -> int: ...
    @property
    def SerializeReadOnlyTypes(self) -> bool: ...
    @property
    def UseSimpleDictionaryFormat(self) -> bool: ...
    @overload
    def IsStartObject(self, reader: XmlReader) -> bool: ...
    @overload
    def IsStartObject(self, reader: XmlDictionaryReader) -> bool: ...
    @overload
    def ReadObject(self, stream: Stream) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlReader) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlDictionaryReader) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlDictionaryReader, verifyObjectName: bool) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlReader, verifyObjectName: bool) -> Object: ...
    @overload
    def WriteEndObject(self, writer: XmlDictionaryWriter) -> None: ...
    @overload
    def WriteEndObject(self, writer: XmlWriter) -> None: ...
    @overload
    def WriteObject(self, writer: XmlDictionaryWriter, graph: Object) -> None: ...
    @overload
    def WriteObject(self, stream: Stream, graph: Object) -> None: ...
    @overload
    def WriteObject(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: XmlDictionaryWriter, graph: Object) -> None: ...
    @overload
    def WriteStartObject(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteStartObject(self, writer: XmlDictionaryWriter, graph: Object) -> None: ...


class DataContractJsonSerializerSettings(Object):
    def __init__(self): ...
    @property
    def DataContractSurrogate(self) -> IDataContractSurrogate: ...
    @property
    def DateTimeFormat(self) -> DateTimeFormat: ...
    @property
    def EmitTypeInformation(self) -> EmitTypeInformation: ...
    @property
    def IgnoreExtensionDataObject(self) -> bool: ...
    @property
    def KnownTypes(self) -> Iterable[Type]: ...
    @property
    def MaxItemsInObjectGraph(self) -> int: ...
    @property
    def RootName(self) -> str: ...
    @property
    def SerializeReadOnlyTypes(self) -> bool: ...
    @property
    def UseSimpleDictionaryFormat(self) -> bool: ...
    @DataContractSurrogate.setter
    def DataContractSurrogate(self, value: IDataContractSurrogate) -> None: ...
    @DateTimeFormat.setter
    def DateTimeFormat(self, value: DateTimeFormat) -> None: ...
    @EmitTypeInformation.setter
    def EmitTypeInformation(self, value: EmitTypeInformation) -> None: ...
    @IgnoreExtensionDataObject.setter
    def IgnoreExtensionDataObject(self, value: bool) -> None: ...
    @KnownTypes.setter
    def KnownTypes(self, value: Iterable[Type]) -> None: ...
    @MaxItemsInObjectGraph.setter
    def MaxItemsInObjectGraph(self, value: int) -> None: ...
    @RootName.setter
    def RootName(self, value: str) -> None: ...
    @SerializeReadOnlyTypes.setter
    def SerializeReadOnlyTypes(self, value: bool) -> None: ...
    @UseSimpleDictionaryFormat.setter
    def UseSimpleDictionaryFormat(self, value: bool) -> None: ...


class IXmlJsonReaderInitializer:
    @overload
    def SetInput(self, stream: Stream, encoding: Encoding, quotas: XmlDictionaryReaderQuotas, onClose: OnXmlDictionaryReaderClose) -> None: ...
    @overload
    def SetInput(self, buffer: Set(Byte), offset: int, count: int, encoding: Encoding, quotas: XmlDictionaryReaderQuotas, onClose: OnXmlDictionaryReaderClose) -> None: ...


class IXmlJsonWriterInitializer:
    def SetOutput(self, stream: Stream, encoding: Encoding, ownsStream: bool) -> None: ...


class JsonReaderWriterFactory(Object):
    @overload
    def CreateJsonReader(stream: Stream, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    def CreateJsonReader(buffer: Set(Byte), quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    def CreateJsonReader(stream: Stream, encoding: Encoding, quotas: XmlDictionaryReaderQuotas, onClose: OnXmlDictionaryReaderClose) -> XmlDictionaryReader: ...
    @overload
    def CreateJsonReader(buffer: Set(Byte), offset: int, count: int, quotas: XmlDictionaryReaderQuotas) -> XmlDictionaryReader: ...
    @overload
    def CreateJsonReader(buffer: Set(Byte), offset: int, count: int, encoding: Encoding, quotas: XmlDictionaryReaderQuotas, onClose: OnXmlDictionaryReaderClose) -> XmlDictionaryReader: ...
    @overload
    def CreateJsonWriter(stream: Stream) -> XmlDictionaryWriter: ...
    @overload
    def CreateJsonWriter(stream: Stream, encoding: Encoding) -> XmlDictionaryWriter: ...
    @overload
    def CreateJsonWriter(stream: Stream, encoding: Encoding, ownsStream: bool) -> XmlDictionaryWriter: ...
    @overload
    def CreateJsonWriter(stream: Stream, encoding: Encoding, ownsStream: bool, indent: bool) -> XmlDictionaryWriter: ...
    @overload
    def CreateJsonWriter(stream: Stream, encoding: Encoding, ownsStream: bool, indent: bool, indentChars: str) -> XmlDictionaryWriter: ...
