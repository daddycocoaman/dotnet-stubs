__all__ = ['Configuration','Json']
from typing import Tuple, Set, Iterable, List


class CollectionDataContractAttribute(Attribute):
    def __init__(self): ...
    @property
    def IsItemNameSetExplicitly(self) -> bool: ...
    @property
    def IsKeyNameSetExplicitly(self) -> bool: ...
    @property
    def IsNameSetExplicitly(self) -> bool: ...
    @property
    def IsNamespaceSetExplicitly(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsReferenceSetExplicitly(self) -> bool: ...
    @property
    def IsValueNameSetExplicitly(self) -> bool: ...
    @property
    def ItemName(self) -> str: ...
    @property
    def KeyName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ValueName(self) -> str: ...
    @IsReference.setter
    def IsReference(self, value: bool) -> None: ...
    @ItemName.setter
    def ItemName(self, value: str) -> None: ...
    @KeyName.setter
    def KeyName(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @ValueName.setter
    def ValueName(self, value: str) -> None: ...


class ContractNamespaceAttribute(Attribute):
    def __init__(self, contractNamespace: str): ...
    @property
    def ClrNamespace(self) -> str: ...
    @property
    def ContractNamespace(self) -> str: ...
    @ClrNamespace.setter
    def ClrNamespace(self, value: str) -> None: ...


class DataContractAttribute(Attribute):
    def __init__(self): ...
    @property
    def IsNameSetExplicitly(self) -> bool: ...
    @property
    def IsNamespaceSetExplicitly(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsReferenceSetExplicitly(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @IsReference.setter
    def IsReference(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...


class DataContractResolver(Object):
    def ResolveName(self, typeName: str, typeNamespace: str, declaredType: Type, knownTypeResolver: DataContractResolver) -> Type: ...
    def TryResolveType(self, type: Type, declaredType: Type, knownTypeResolver: DataContractResolver) -> Tuple[bool, XmlDictionaryString, XmlDictionaryString]: ...


class DataContractSerializer(XmlObjectSerializer):
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, type: Type, knownTypes: Iterable[Type]): ...
    @overload
    def __init__(self, type: Type, settings: DataContractSerializerSettings): ...
    @overload
    def __init__(self, type: Type, rootName: str, rootNamespace: str): ...
    @overload
    def __init__(self, type: Type, rootName: XmlDictionaryString, rootNamespace: XmlDictionaryString): ...
    @overload
    def __init__(self, type: Type, rootName: str, rootNamespace: str, knownTypes: Iterable[Type]): ...
    @overload
    def __init__(self, type: Type, rootName: XmlDictionaryString, rootNamespace: XmlDictionaryString, knownTypes: Iterable[Type]): ...
    @overload
    def __init__(self, type: Type, knownTypes: Iterable[Type], maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, preserveObjectReferences: bool, dataContractSurrogate: IDataContractSurrogate): ...
    @overload
    def __init__(self, type: Type, knownTypes: Iterable[Type], maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, preserveObjectReferences: bool, dataContractSurrogate: IDataContractSurrogate, dataContractResolver: DataContractResolver): ...
    @overload
    def __init__(self, type: Type, rootName: str, rootNamespace: str, knownTypes: Iterable[Type], maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, preserveObjectReferences: bool, dataContractSurrogate: IDataContractSurrogate): ...
    @overload
    def __init__(self, type: Type, rootName: XmlDictionaryString, rootNamespace: XmlDictionaryString, knownTypes: Iterable[Type], maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, preserveObjectReferences: bool, dataContractSurrogate: IDataContractSurrogate): ...
    @overload
    def __init__(self, type: Type, rootName: str, rootNamespace: str, knownTypes: Iterable[Type], maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, preserveObjectReferences: bool, dataContractSurrogate: IDataContractSurrogate, dataContractResolver: DataContractResolver): ...
    @overload
    def __init__(self, type: Type, rootName: XmlDictionaryString, rootNamespace: XmlDictionaryString, knownTypes: Iterable[Type], maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, preserveObjectReferences: bool, dataContractSurrogate: IDataContractSurrogate, dataContractResolver: DataContractResolver): ...
    @property
    def DataContractResolver(self) -> DataContractResolver: ...
    @property
    def DataContractSurrogate(self) -> IDataContractSurrogate: ...
    @property
    def IgnoreExtensionDataObject(self) -> bool: ...
    @property
    def KnownTypes(self) -> ReadOnlyCollection: ...
    @property
    def MaxItemsInObjectGraph(self) -> int: ...
    @property
    def PreserveObjectReferences(self) -> bool: ...
    @property
    def SerializeReadOnlyTypes(self) -> bool: ...
    @overload
    def IsStartObject(self, reader: XmlDictionaryReader) -> bool: ...
    @overload
    def IsStartObject(self, reader: XmlReader) -> bool: ...
    @overload
    def ReadObject(self, reader: XmlReader) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlReader, verifyObjectName: bool) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlDictionaryReader, verifyObjectName: bool) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlDictionaryReader, verifyObjectName: bool, dataContractResolver: DataContractResolver) -> Object: ...
    @overload
    def WriteEndObject(self, writer: XmlDictionaryWriter) -> None: ...
    @overload
    def WriteEndObject(self, writer: XmlWriter) -> None: ...
    @overload
    def WriteObject(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteObject(self, writer: XmlDictionaryWriter, graph: Object, dataContractResolver: DataContractResolver) -> None: ...
    @overload
    def WriteObjectContent(self, writer: XmlDictionaryWriter, graph: Object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteStartObject(self, writer: XmlDictionaryWriter, graph: Object) -> None: ...
    @overload
    def WriteStartObject(self, writer: XmlWriter, graph: Object) -> None: ...


class DataContractSerializerExtensions(Object):
    def GetSerializationSurrogateProvider(serializer: DataContractSerializer) -> ISerializationSurrogateProvider: ...
    def SetSerializationSurrogateProvider(serializer: DataContractSerializer, provider: ISerializationSurrogateProvider) -> None: ...


class DataContractSerializerSettings(Object):
    def __init__(self): ...
    @property
    def DataContractResolver(self) -> DataContractResolver: ...
    @property
    def DataContractSurrogate(self) -> IDataContractSurrogate: ...
    @property
    def IgnoreExtensionDataObject(self) -> bool: ...
    @property
    def KnownTypes(self) -> Iterable[Type]: ...
    @property
    def MaxItemsInObjectGraph(self) -> int: ...
    @property
    def PreserveObjectReferences(self) -> bool: ...
    @property
    def RootName(self) -> XmlDictionaryString: ...
    @property
    def RootNamespace(self) -> XmlDictionaryString: ...
    @property
    def SerializeReadOnlyTypes(self) -> bool: ...
    @DataContractResolver.setter
    def DataContractResolver(self, value: DataContractResolver) -> None: ...
    @DataContractSurrogate.setter
    def DataContractSurrogate(self, value: IDataContractSurrogate) -> None: ...
    @IgnoreExtensionDataObject.setter
    def IgnoreExtensionDataObject(self, value: bool) -> None: ...
    @KnownTypes.setter
    def KnownTypes(self, value: Iterable[Type]) -> None: ...
    @MaxItemsInObjectGraph.setter
    def MaxItemsInObjectGraph(self, value: int) -> None: ...
    @PreserveObjectReferences.setter
    def PreserveObjectReferences(self, value: bool) -> None: ...
    @RootName.setter
    def RootName(self, value: XmlDictionaryString) -> None: ...
    @RootNamespace.setter
    def RootNamespace(self, value: XmlDictionaryString) -> None: ...
    @SerializeReadOnlyTypes.setter
    def SerializeReadOnlyTypes(self, value: bool) -> None: ...


class DataMemberAttribute(Attribute):
    def __init__(self): ...
    @property
    def EmitDefaultValue(self) -> bool: ...
    @property
    def IsNameSetExplicitly(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @EmitDefaultValue.setter
    def EmitDefaultValue(self, value: bool) -> None: ...
    @IsRequired.setter
    def IsRequired(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Order.setter
    def Order(self, value: int) -> None: ...


class DateTimeFormat(Object):
    @overload
    def __init__(self, formatString: str): ...
    @overload
    def __init__(self, formatString: str, formatProvider: IFormatProvider): ...
    @property
    def DateTimeStyles(self) -> DateTimeStyles: ...
    @property
    def FormatProvider(self) -> IFormatProvider: ...
    @property
    def FormatString(self) -> str: ...
    @DateTimeStyles.setter
    def DateTimeStyles(self, value: DateTimeStyles) -> None: ...


class EmitTypeInformation:
    AsNeeded = 0
    Always = 1
    Never = 2


class EnumMemberAttribute(Attribute):
    def __init__(self): ...
    @property
    def IsValueSetExplicitly(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class ExportOptions(Object):
    def __init__(self): ...
    @property
    def DataContractSurrogate(self) -> IDataContractSurrogate: ...
    @property
    def KnownTypes(self) -> Collection: ...
    @DataContractSurrogate.setter
    def DataContractSurrogate(self, value: IDataContractSurrogate) -> None: ...


class ExtensionDataObject(Object):
    pass


class IDataContractSurrogate:
    @overload
    def GetCustomDataToExport(self, memberInfo: MemberInfo, dataContractType: Type) -> Object: ...
    @overload
    def GetCustomDataToExport(self, clrType: Type, dataContractType: Type) -> Object: ...
    def GetDataContractType(self, type: Type) -> Type: ...
    def GetDeserializedObject(self, obj: Object, targetType: Type) -> Object: ...
    def GetKnownCustomDataTypes(self, customDataTypes: Collection) -> None: ...
    def GetObjectToSerialize(self, obj: Object, targetType: Type) -> Object: ...
    def GetReferencedTypeOnImport(self, typeName: str, typeNamespace: str, customData: Object) -> Type: ...
    def ProcessImportedType(self, typeDeclaration: CodeTypeDeclaration, compileUnit: CodeCompileUnit) -> CodeTypeDeclaration: ...


class IExtensibleDataObject:
    @property
    def ExtensionData(self) -> ExtensionDataObject: ...
    @ExtensionData.setter
    def ExtensionData(self, value: ExtensionDataObject) -> None: ...


class IgnoreDataMemberAttribute(Attribute):
    def __init__(self): ...


class ImportOptions(Object):
    def __init__(self): ...
    @property
    def CodeProvider(self) -> CodeDomProvider: ...
    @property
    def DataContractSurrogate(self) -> IDataContractSurrogate: ...
    @property
    def EnableDataBinding(self) -> bool: ...
    @property
    def GenerateInternal(self) -> bool: ...
    @property
    def GenerateSerializable(self) -> bool: ...
    @property
    def ImportXmlType(self) -> bool: ...
    @property
    def Namespaces(self) -> IDictionary: ...
    @property
    def ReferencedCollectionTypes(self) -> ICollection: ...
    @property
    def ReferencedTypes(self) -> ICollection: ...
    @CodeProvider.setter
    def CodeProvider(self, value: CodeDomProvider) -> None: ...
    @DataContractSurrogate.setter
    def DataContractSurrogate(self, value: IDataContractSurrogate) -> None: ...
    @EnableDataBinding.setter
    def EnableDataBinding(self, value: bool) -> None: ...
    @GenerateInternal.setter
    def GenerateInternal(self, value: bool) -> None: ...
    @GenerateSerializable.setter
    def GenerateSerializable(self, value: bool) -> None: ...
    @ImportXmlType.setter
    def ImportXmlType(self, value: bool) -> None: ...


class InvalidDataContractException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ISerializationSurrogateProvider:
    def GetDeserializedObject(self, obj: Object, targetType: Type) -> Object: ...
    def GetObjectToSerialize(self, obj: Object, targetType: Type) -> Object: ...
    def GetSurrogateType(self, type: Type) -> Type: ...


class KnownTypeAttribute(Attribute):
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, methodName: str): ...
    @property
    def MethodName(self) -> str: ...
    @property
    def Type(self) -> Type: ...


class NetDataContractSerializer(XmlObjectSerializer):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: StreamingContext): ...
    @overload
    def __init__(self, rootName: str, rootNamespace: str): ...
    @overload
    def __init__(self, rootName: XmlDictionaryString, rootNamespace: XmlDictionaryString): ...
    @overload
    def __init__(self, context: StreamingContext, maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, assemblyFormat: FormatterAssemblyStyle, surrogateSelector: ISurrogateSelector): ...
    @overload
    def __init__(self, rootName: str, rootNamespace: str, context: StreamingContext, maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, assemblyFormat: FormatterAssemblyStyle, surrogateSelector: ISurrogateSelector): ...
    @overload
    def __init__(self, rootName: XmlDictionaryString, rootNamespace: XmlDictionaryString, context: StreamingContext, maxItemsInObjectGraph: int, ignoreExtensionDataObject: bool, assemblyFormat: FormatterAssemblyStyle, surrogateSelector: ISurrogateSelector): ...
    def Deserialize(self, stream: Stream) -> Object: ...
    @property
    def AssemblyFormat(self) -> FormatterAssemblyStyle: ...
    @property
    def Binder(self) -> SerializationBinder: ...
    @property
    def Context(self) -> StreamingContext: ...
    @property
    def IgnoreExtensionDataObject(self) -> bool: ...
    @property
    def MaxItemsInObjectGraph(self) -> int: ...
    @property
    def SurrogateSelector(self) -> ISurrogateSelector: ...
    @overload
    def IsStartObject(self, reader: XmlReader) -> bool: ...
    @overload
    def IsStartObject(self, reader: XmlDictionaryReader) -> bool: ...
    @overload
    def ReadObject(self, reader: XmlReader) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlReader, verifyObjectName: bool) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlDictionaryReader, verifyObjectName: bool) -> Object: ...
    def Serialize(self, stream: Stream, graph: Object) -> None: ...
    @AssemblyFormat.setter
    def AssemblyFormat(self, value: FormatterAssemblyStyle) -> None: ...
    @Binder.setter
    def Binder(self, value: SerializationBinder) -> None: ...
    @Context.setter
    def Context(self, value: StreamingContext) -> None: ...
    @SurrogateSelector.setter
    def SurrogateSelector(self, value: ISurrogateSelector) -> None: ...
    @overload
    def WriteEndObject(self, writer: XmlWriter) -> None: ...
    @overload
    def WriteEndObject(self, writer: XmlDictionaryWriter) -> None: ...
    @overload
    def WriteObject(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: XmlDictionaryWriter, graph: Object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteStartObject(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteStartObject(self, writer: XmlDictionaryWriter, graph: Object) -> None: ...


class XmlObjectSerializer(Object):
    @overload
    def IsStartObject(self, reader: XmlDictionaryReader) -> bool: ...
    @overload
    def IsStartObject(self, reader: XmlReader) -> bool: ...
    @overload
    def ReadObject(self, reader: XmlDictionaryReader) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlReader) -> Object: ...
    @overload
    def ReadObject(self, stream: Stream) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlDictionaryReader, verifyObjectName: bool) -> Object: ...
    @overload
    def ReadObject(self, reader: XmlReader, verifyObjectName: bool) -> Object: ...
    @overload
    def WriteEndObject(self, writer: XmlWriter) -> None: ...
    @overload
    def WriteEndObject(self, writer: XmlDictionaryWriter) -> None: ...
    @overload
    def WriteObject(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteObject(self, stream: Stream, graph: Object) -> None: ...
    @overload
    def WriteObject(self, writer: XmlDictionaryWriter, graph: Object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: XmlDictionaryWriter, graph: Object) -> None: ...
    @overload
    def WriteObjectContent(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteStartObject(self, writer: XmlWriter, graph: Object) -> None: ...
    @overload
    def WriteStartObject(self, writer: XmlDictionaryWriter, graph: Object) -> None: ...


class XmlSerializableServices(Object):
    def AddDefaultSchema(schemas: XmlSchemaSet, typeQName: XmlQualifiedName) -> None: ...
    def ReadNodes(xmlReader: XmlReader) -> Set(XmlNode): ...
    def WriteNodes(xmlWriter: XmlWriter, nodes: Set(XmlNode)) -> None: ...


class XPathQueryGenerator(Object):
    @overload
    def CreateFromDataContractSerializer(type: Type, pathToMember: Set(MemberInfo)) -> Tuple[str, XmlNamespaceManager]: ...
    @overload
    def CreateFromDataContractSerializer(type: Type, pathToMember: Set(MemberInfo), rootElementXpath: StringBuilder) -> Tuple[str, XmlNamespaceManager]: ...


class XsdDataContractExporter(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, schemas: XmlSchemaSet): ...
    @overload
    def CanExport(self, assemblies: ICollection) -> bool: ...
    @overload
    def CanExport(self, types: ICollection) -> bool: ...
    @overload
    def CanExport(self, type: Type) -> bool: ...
    @overload
    def Export(self, assemblies: ICollection) -> None: ...
    @overload
    def Export(self, types: ICollection) -> None: ...
    @overload
    def Export(self, type: Type) -> None: ...
    @property
    def Options(self) -> ExportOptions: ...
    @property
    def Schemas(self) -> XmlSchemaSet: ...
    def GetRootElementName(self, type: Type) -> XmlQualifiedName: ...
    def GetSchemaType(self, type: Type) -> XmlSchemaType: ...
    def GetSchemaTypeName(self, type: Type) -> XmlQualifiedName: ...
    @Options.setter
    def Options(self, value: ExportOptions) -> None: ...


class XsdDataContractImporter(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, codeCompileUnit: CodeCompileUnit): ...
    @overload
    def CanImport(self, schemas: XmlSchemaSet) -> bool: ...
    @overload
    def CanImport(self, schemas: XmlSchemaSet, element: XmlSchemaElement) -> bool: ...
    @overload
    def CanImport(self, schemas: XmlSchemaSet, typeName: XmlQualifiedName) -> bool: ...
    @overload
    def CanImport(self, schemas: XmlSchemaSet, typeNames: ICollection) -> bool: ...
    @property
    def CodeCompileUnit(self) -> CodeCompileUnit: ...
    @property
    def Options(self) -> ImportOptions: ...
    @overload
    def GetCodeTypeReference(self, typeName: XmlQualifiedName) -> CodeTypeReference: ...
    @overload
    def GetCodeTypeReference(self, typeName: XmlQualifiedName, element: XmlSchemaElement) -> CodeTypeReference: ...
    def GetKnownTypeReferences(self, typeName: XmlQualifiedName) -> ICollection: ...
    @overload
    def Import(self, schemas: XmlSchemaSet) -> None: ...
    @overload
    def Import(self, schemas: XmlSchemaSet, element: XmlSchemaElement) -> XmlQualifiedName: ...
    @overload
    def Import(self, schemas: XmlSchemaSet, typeNames: ICollection) -> None: ...
    @overload
    def Import(self, schemas: XmlSchemaSet, typeName: XmlQualifiedName) -> None: ...
    @Options.setter
    def Options(self, value: ImportOptions) -> None: ...
