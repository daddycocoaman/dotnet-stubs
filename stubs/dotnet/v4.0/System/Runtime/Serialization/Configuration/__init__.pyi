from typing import Tuple, Set, Iterable, List


class DataContractSerializerSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def DeclaredTypes(self) -> DeclaredTypeElementCollection: ...


class DeclaredTypeElement(ConfigurationElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @property
    def KnownTypes(self) -> TypeElementCollection: ...
    @property
    def Type(self) -> str: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class DeclaredTypeElementCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: DeclaredTypeElement) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, typeName: str) -> bool: ...
    @property
    def Item(self, typeName: str) -> DeclaredTypeElement: ...
    @property
    def Item(self, index: int) -> DeclaredTypeElement: ...
    def IndexOf(self, element: DeclaredTypeElement) -> int: ...
    @overload
    def Remove(self, typeName: str) -> None: ...
    @overload
    def Remove(self, element: DeclaredTypeElement) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, typeName: str, value: DeclaredTypeElement) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DeclaredTypeElement) -> None: ...


class NetDataContractSerializerSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def EnableUnsafeTypeForwarding(self) -> bool: ...


class ParameterElement(ConfigurationElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, index: int): ...
    @property
    def Index(self) -> int: ...
    @property
    def Parameters(self) -> ParameterElementCollection: ...
    @property
    def Type(self) -> str: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class ParameterElementCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: ParameterElement) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, typeName: str) -> bool: ...
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType: ...
    @property
    def Item(self, index: int) -> ParameterElement: ...
    def IndexOf(self, element: ParameterElement) -> int: ...
    def Remove(self, element: ParameterElement) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ParameterElement) -> None: ...


class SerializationSectionGroup(ConfigurationSectionGroup):
    def __init__(self): ...
    @property
    def DataContractSerializer(self) -> DataContractSerializerSection: ...
    @property
    def NetDataContractSerializer(self) -> NetDataContractSerializerSection: ...
    def GetSectionGroup(config: Configuration) -> SerializationSectionGroup: ...


class TypeElement(ConfigurationElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @property
    def Index(self) -> int: ...
    @property
    def Parameters(self) -> ParameterElementCollection: ...
    @property
    def Type(self) -> str: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class TypeElementCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, element: TypeElement) -> None: ...
    def Clear(self) -> None: ...
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType: ...
    @property
    def Item(self, index: int) -> TypeElement: ...
    def IndexOf(self, element: TypeElement) -> int: ...
    def Remove(self, element: TypeElement) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: TypeElement) -> None: ...
