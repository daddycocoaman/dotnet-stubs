from typing import Tuple, Set, Iterable, List


class SoapFormatter(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, selector: ISurrogateSelector, context: StreamingContext): ...
    @overload
    def Deserialize(self, serializationStream: Stream) -> Object: ...
    @overload
    def Deserialize(self, serializationStream: Stream, handler: HeaderHandler) -> Object: ...
    @property
    def AssemblyFormat(self) -> FormatterAssemblyStyle: ...
    @property
    def Binder(self) -> SerializationBinder: ...
    @property
    def Context(self) -> StreamingContext: ...
    @property
    def FilterLevel(self) -> TypeFilterLevel: ...
    @property
    def SurrogateSelector(self) -> ISurrogateSelector: ...
    @property
    def TopObject(self) -> ISoapMessage: ...
    @property
    def TypeFormat(self) -> FormatterTypeStyle: ...
    @overload
    def Serialize(self, serializationStream: Stream, graph: Object) -> None: ...
    @overload
    def Serialize(self, serializationStream: Stream, graph: Object, headers: Set(Header)) -> None: ...
    @AssemblyFormat.setter
    def AssemblyFormat(self, value: FormatterAssemblyStyle) -> None: ...
    @Binder.setter
    def Binder(self, value: SerializationBinder) -> None: ...
    @Context.setter
    def Context(self, value: StreamingContext) -> None: ...
    @FilterLevel.setter
    def FilterLevel(self, value: TypeFilterLevel) -> None: ...
    @SurrogateSelector.setter
    def SurrogateSelector(self, value: ISurrogateSelector) -> None: ...
    @TopObject.setter
    def TopObject(self, value: ISoapMessage) -> None: ...
    @TypeFormat.setter
    def TypeFormat(self, value: FormatterTypeStyle) -> None: ...
