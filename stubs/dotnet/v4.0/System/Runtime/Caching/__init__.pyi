__all__ = ['Configuration','Hosting']
from typing import Tuple, Set, Iterable, List


class CacheEntryChangeMonitor(ChangeMonitor):
    @property
    def CacheKeys(self) -> ReadOnlyCollection: ...
    @property
    def LastModified(self) -> DateTimeOffset: ...
    @property
    def RegionName(self) -> str: ...


class CacheEntryRemovedArguments(Object):
    def __init__(self, source: ObjectCache, reason: CacheEntryRemovedReason, cacheItem: CacheItem): ...
    @property
    def CacheItem(self) -> CacheItem: ...
    @property
    def RemovedReason(self) -> CacheEntryRemovedReason: ...
    @property
    def Source(self) -> ObjectCache: ...


class CacheEntryRemovedCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, arguments: CacheEntryRemovedArguments, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, arguments: CacheEntryRemovedArguments) -> None: ...


class CacheEntryRemovedReason:
    Removed = 0
    Expired = 1
    Evicted = 2
    ChangeMonitorChanged = 3
    CacheSpecificEviction = 4


class CacheEntryUpdateArguments(Object):
    def __init__(self, source: ObjectCache, reason: CacheEntryRemovedReason, key: str, regionName: str): ...
    @property
    def Key(self) -> str: ...
    @property
    def RegionName(self) -> str: ...
    @property
    def RemovedReason(self) -> CacheEntryRemovedReason: ...
    @property
    def Source(self) -> ObjectCache: ...
    @property
    def UpdatedCacheItem(self) -> CacheItem: ...
    @property
    def UpdatedCacheItemPolicy(self) -> CacheItemPolicy: ...
    @UpdatedCacheItem.setter
    def UpdatedCacheItem(self, value: CacheItem) -> None: ...
    @UpdatedCacheItemPolicy.setter
    def UpdatedCacheItemPolicy(self, value: CacheItemPolicy) -> None: ...


class CacheEntryUpdateCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, arguments: CacheEntryUpdateArguments, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, arguments: CacheEntryUpdateArguments) -> None: ...


class CacheItem(Object):
    @overload
    def __init__(self, key: str): ...
    @overload
    def __init__(self, key: str, value: Object): ...
    @overload
    def __init__(self, key: str, value: Object, regionName: str): ...
    @property
    def Key(self) -> str: ...
    @property
    def RegionName(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Key.setter
    def Key(self, value: str) -> None: ...
    @RegionName.setter
    def RegionName(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class CacheItemPolicy(Object):
    def __init__(self): ...
    @property
    def AbsoluteExpiration(self) -> DateTimeOffset: ...
    @property
    def ChangeMonitors(self) -> Collection: ...
    @property
    def Priority(self) -> CacheItemPriority: ...
    @property
    def RemovedCallback(self) -> CacheEntryRemovedCallback: ...
    @property
    def SlidingExpiration(self) -> TimeSpan: ...
    @property
    def UpdateCallback(self) -> CacheEntryUpdateCallback: ...
    @AbsoluteExpiration.setter
    def AbsoluteExpiration(self, value: DateTimeOffset) -> None: ...
    @Priority.setter
    def Priority(self, value: CacheItemPriority) -> None: ...
    @RemovedCallback.setter
    def RemovedCallback(self, value: CacheEntryRemovedCallback) -> None: ...
    @SlidingExpiration.setter
    def SlidingExpiration(self, value: TimeSpan) -> None: ...
    @UpdateCallback.setter
    def UpdateCallback(self, value: CacheEntryUpdateCallback) -> None: ...


class CacheItemPriority:
    Default = 0
    NotRemovable = 1


class ChangeMonitor(Object):
    def Dispose(self) -> None: ...
    @property
    def HasChanged(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    def NotifyOnChanged(self, onChangedCallback: OnChangedCallback) -> None: ...


class DefaultCacheCapabilities:
    #None = 0
    InMemoryProvider = 1
    OutOfProcessProvider = 2
    CacheEntryChangeMonitors = 4
    AbsoluteExpirations = 8
    SlidingExpirations = 16
    CacheEntryUpdateCallback = 32
    CacheEntryRemovedCallback = 64
    CacheRegions = 128


class FileChangeMonitor(ChangeMonitor):
    @property
    def FilePaths(self) -> ReadOnlyCollection: ...
    @property
    def LastModified(self) -> DateTimeOffset: ...


class HostFileChangeMonitor(FileChangeMonitor):
    def __init__(self, filePaths: List[str]): ...
    @property
    def FilePaths(self) -> ReadOnlyCollection: ...
    @property
    def LastModified(self) -> DateTimeOffset: ...
    @property
    def UniqueId(self) -> str: ...


class MemoryCache(ObjectCache):
    @overload
    def __init__(self, name: str, config: NameValueCollection): ...
    @overload
    def __init__(self, name: str, config: NameValueCollection, ignoreConfigSection: bool): ...
    @overload
    def Add(self, item: CacheItem, policy: CacheItemPolicy) -> bool: ...
    @overload
    def AddOrGetExisting(self, item: CacheItem, policy: CacheItemPolicy) -> CacheItem: ...
    @overload
    def AddOrGetExisting(self, key: str, value: Object, absoluteExpiration: DateTimeOffset, regionName: str) -> Object: ...
    @overload
    def AddOrGetExisting(self, key: str, value: Object, policy: CacheItemPolicy, regionName: str) -> Object: ...
    def Contains(self, key: str, regionName: str) -> bool: ...
    def CreateCacheEntryChangeMonitor(self, keys: Iterable[str], regionName: str) -> CacheEntryChangeMonitor: ...
    def Dispose(self) -> None: ...
    @property
    def CacheMemoryLimit(self) -> Int64: ...
    @property
    def Default() -> MemoryCache: ...
    @property
    def DefaultCacheCapabilities(self) -> DefaultCacheCapabilities: ...
    @property
    def Item(self, key: str) -> Object: ...
    @property
    def Name(self) -> str: ...
    @property
    def PhysicalMemoryLimit(self) -> Int64: ...
    @property
    def PollingInterval(self) -> TimeSpan: ...
    def Get(self, key: str, regionName: str) -> Object: ...
    def GetCacheItem(self, key: str, regionName: str) -> CacheItem: ...
    def GetCount(self, regionName: str) -> Int64: ...
    def GetLastSize(self, regionName: str) -> Int64: ...
    @overload
    def GetValues(self, keys: Iterable[str], regionName: str) -> IDictionary: ...
    @overload
    def Remove(self, key: str, regionName: str) -> Object: ...
    @overload
    def Remove(self, key: str, reason: CacheEntryRemovedReason, regionName: str) -> Object: ...
    @Item.setter
    def Item(self, key: str, value: Object) -> None: ...
    @overload
    def Set(self, item: CacheItem, policy: CacheItemPolicy) -> None: ...
    @overload
    def Set(self, key: str, value: Object, absoluteExpiration: DateTimeOffset, regionName: str) -> None: ...
    @overload
    def Set(self, key: str, value: Object, policy: CacheItemPolicy, regionName: str) -> None: ...
    def Trim(self, percent: int) -> Int64: ...


class ObjectCache(Object):
    @overload
    def Add(self, item: CacheItem, policy: CacheItemPolicy) -> bool: ...
    @overload
    def Add(self, key: str, value: Object, policy: CacheItemPolicy, regionName: str) -> bool: ...
    @overload
    def Add(self, key: str, value: Object, absoluteExpiration: DateTimeOffset, regionName: str) -> bool: ...
    @overload
    def AddOrGetExisting(self, value: CacheItem, policy: CacheItemPolicy) -> CacheItem: ...
    @overload
    def AddOrGetExisting(self, key: str, value: Object, policy: CacheItemPolicy, regionName: str) -> Object: ...
    @overload
    def AddOrGetExisting(self, key: str, value: Object, absoluteExpiration: DateTimeOffset, regionName: str) -> Object: ...
    def Contains(self, key: str, regionName: str) -> bool: ...
    def CreateCacheEntryChangeMonitor(self, keys: Iterable[str], regionName: str) -> CacheEntryChangeMonitor: ...
    @property
    def DefaultCacheCapabilities(self) -> DefaultCacheCapabilities: ...
    @property
    def Host() -> IServiceProvider: ...
    @property
    def Item(self, key: str) -> Object: ...
    @property
    def Name(self) -> str: ...
    def Get(self, key: str, regionName: str) -> Object: ...
    def GetCacheItem(self, key: str, regionName: str) -> CacheItem: ...
    def GetCount(self, regionName: str) -> Int64: ...
    @overload
    def GetValues(self, keys: Iterable[str], regionName: str) -> IDictionary: ...
    @overload
    def GetValues(self, regionName: str, keys: Set(str)) -> IDictionary: ...
    def Remove(self, key: str, regionName: str) -> Object: ...
    @Host.setter
    def Host(value: IServiceProvider) -> None: ...
    @Item.setter
    def Item(self, key: str, value: Object) -> None: ...
    @overload
    def Set(self, item: CacheItem, policy: CacheItemPolicy) -> None: ...
    @overload
    def Set(self, key: str, value: Object, absoluteExpiration: DateTimeOffset, regionName: str) -> None: ...
    @overload
    def Set(self, key: str, value: Object, policy: CacheItemPolicy, regionName: str) -> None: ...


class OnChangedCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, state: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, state: Object) -> None: ...


class SqlChangeMonitor(ChangeMonitor):
    def __init__(self, dependency: SqlDependency): ...
    @property
    def UniqueId(self) -> str: ...
