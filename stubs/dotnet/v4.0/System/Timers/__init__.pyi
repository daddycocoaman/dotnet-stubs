from typing import Tuple, Set, Iterable, List


class ElapsedEventArgs(EventArgs):
    @property
    def SignalTime(self) -> DateTime: ...


class ElapsedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ElapsedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ElapsedEventArgs) -> None: ...


class Timer(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, interval: float): ...
    def add_Elapsed(self, value: ElapsedEventHandler) -> None: ...
    def BeginInit(self) -> None: ...
    def Close(self) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def AutoReset(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Interval(self) -> float: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def SynchronizingObject(self) -> ISynchronizeInvoke: ...
    def remove_Elapsed(self, value: ElapsedEventHandler) -> None: ...
    @AutoReset.setter
    def AutoReset(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Interval.setter
    def Interval(self, value: float) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: ISynchronizeInvoke) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...


class TimersDescriptionAttribute(DescriptionAttribute):
    def __init__(self, description: str): ...
    @property
    def Description(self) -> str: ...
