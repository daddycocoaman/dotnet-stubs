from typing import Tuple, Set, Iterable, List












class IRemoteArgumentArrayContract:
    def GetItem(self, index: int) -> RemoteArgument: ...
    def SetItem(self, index: int, value: RemoteArgument) -> None: ...


class IRemoteArgumentArrayListContract:
    def Add(self, newItem: RemoteArgument) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, item: RemoteArgument) -> bool: ...
    def IndexOf(self, item: RemoteArgument) -> int: ...
    def Insert(self, index: int, item: RemoteArgument) -> None: ...
    def Remove(self, item: RemoteArgument) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class IRemoteArgumentCollectionContract:
    def GetCount(self) -> int: ...


class IRemoteArgumentDictionaryContract:
    def Add(self, key: RemoteArgument, value: RemoteArgument) -> None: ...
    def Clear(self) -> None: ...
    def ContainsKey(self, key: RemoteArgument) -> bool: ...
    def GetEnumeratorContract(self) -> IRemoteArgumentDictionaryEnumeratorContract: ...
    def GetItem(self, key: RemoteArgument) -> RemoteArgument: ...
    def GetKeys(self) -> IRemoteArgumentCollectionContract: ...
    def GetValues(self) -> IRemoteArgumentCollectionContract: ...
    def Remove(self, key: RemoteArgument) -> bool: ...
    def SetItem(self, key: RemoteArgument, value: RemoteArgument) -> None: ...


class IRemoteArgumentDictionaryEnumeratorContract:
    def GetEntry(self) -> RemoteArgumentDictionaryEntry: ...
    def GetKey(self) -> RemoteArgument: ...
    def GetValue(self) -> RemoteArgument: ...


class IRemoteArgumentEnumerableContract:
    def GetEnumeratorContract(self) -> IRemoteArgumentEnumeratorContract: ...


class IRemoteArgumentEnumeratorContract:
    def GetCurrent(self) -> RemoteArgument: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class RemoteArgumentDictionaryEntry(ValueType):
    def __init__(self, key: RemoteArgument, value: RemoteArgument): ...
