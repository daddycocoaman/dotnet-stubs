from typing import Tuple, Set, Iterable, List


class AdvancedFilters(Object):
    def AccountExpirationDate(self, expirationTime: DateTime, match: MatchType) -> None: ...
    def AccountLockoutTime(self, lockoutTime: DateTime, match: MatchType) -> None: ...
    def BadLogonCount(self, badLogonCount: int, match: MatchType) -> None: ...
    def LastBadPasswordAttempt(self, lastAttempt: DateTime, match: MatchType) -> None: ...
    def LastLogonTime(self, logonTime: DateTime, match: MatchType) -> None: ...
    def LastPasswordSetTime(self, passwordSetTime: DateTime, match: MatchType) -> None: ...


class AuthenticablePrincipal(Principal):
    def ChangePassword(self, oldPassword: str, newPassword: str) -> None: ...
    def ExpirePasswordNow(self) -> None: ...
    def FindByBadPasswordAttempt(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    def FindByExpirationTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    def FindByLockoutTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    def FindByLogonTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    def FindByPasswordSetTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    @property
    def AccountExpirationDate(self) -> Nullable: ...
    @property
    def AccountLockoutTime(self) -> Nullable: ...
    @property
    def AdvancedSearchFilter(self) -> AdvancedFilters: ...
    @property
    def AllowReversiblePasswordEncryption(self) -> bool: ...
    @property
    def BadLogonCount(self) -> int: ...
    @property
    def Certificates(self) -> X509Certificate2Collection: ...
    @property
    def DelegationPermitted(self) -> bool: ...
    @property
    def Enabled(self) -> Nullable: ...
    @property
    def HomeDirectory(self) -> str: ...
    @property
    def HomeDrive(self) -> str: ...
    @property
    def LastBadPasswordAttempt(self) -> Nullable: ...
    @property
    def LastLogon(self) -> Nullable: ...
    @property
    def LastPasswordSet(self) -> Nullable: ...
    @property
    def PasswordNeverExpires(self) -> bool: ...
    @property
    def PasswordNotRequired(self) -> bool: ...
    @property
    def PermittedLogonTimes(self) -> Set(Byte): ...
    @property
    def PermittedWorkstations(self) -> PrincipalValueCollection: ...
    @property
    def ScriptPath(self) -> str: ...
    @property
    def SmartcardLogonRequired(self) -> bool: ...
    @property
    def UserCannotChangePassword(self) -> bool: ...
    def IsAccountLockedOut(self) -> bool: ...
    def RefreshExpiredPassword(self) -> None: ...
    @AccountExpirationDate.setter
    def AccountExpirationDate(self, value: Nullable) -> None: ...
    @AllowReversiblePasswordEncryption.setter
    def AllowReversiblePasswordEncryption(self, value: bool) -> None: ...
    @DelegationPermitted.setter
    def DelegationPermitted(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: Nullable) -> None: ...
    @HomeDirectory.setter
    def HomeDirectory(self, value: str) -> None: ...
    @HomeDrive.setter
    def HomeDrive(self, value: str) -> None: ...
    @PasswordNeverExpires.setter
    def PasswordNeverExpires(self, value: bool) -> None: ...
    @PasswordNotRequired.setter
    def PasswordNotRequired(self, value: bool) -> None: ...
    @PermittedLogonTimes.setter
    def PermittedLogonTimes(self, value: Set(Byte)) -> None: ...
    @ScriptPath.setter
    def ScriptPath(self, value: str) -> None: ...
    @SmartcardLogonRequired.setter
    def SmartcardLogonRequired(self, value: bool) -> None: ...
    @UserCannotChangePassword.setter
    def UserCannotChangePassword(self, value: bool) -> None: ...
    def SetPassword(self, newPassword: str) -> None: ...
    def UnlockAccount(self) -> None: ...


class ComputerPrincipal(AuthenticablePrincipal):
    @overload
    def __init__(self, context: PrincipalContext): ...
    @overload
    def __init__(self, context: PrincipalContext, samAccountName: str, password: str, enabled: bool): ...
    def FindByBadPasswordAttempt(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    def FindByExpirationTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    @overload
    def FindByIdentity(context: PrincipalContext, identityValue: str) -> ComputerPrincipal: ...
    @overload
    def FindByIdentity(context: PrincipalContext, identityType: IdentityType, identityValue: str) -> ComputerPrincipal: ...
    def FindByLockoutTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    def FindByLogonTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    def FindByPasswordSetTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    @property
    def ServicePrincipalNames(self) -> PrincipalValueCollection: ...


class ContextOptions:
    Negotiate = 1
    SimpleBind = 2
    SecureSocketLayer = 4
    Signing = 8
    Sealing = 16
    ServerBind = 32


class ContextType:
    Machine = 0
    Domain = 1
    ApplicationDirectory = 2


class DirectoryObjectClassAttribute(Attribute):
    def __init__(self, objectClass: str): ...
    @property
    def Context(self) -> Nullable: ...
    @property
    def ObjectClass(self) -> str: ...


class DirectoryPropertyAttribute(Attribute):
    def __init__(self, schemaAttributeName: str): ...
    @property
    def Context(self) -> Nullable: ...
    @property
    def SchemaAttributeName(self) -> str: ...
    @Context.setter
    def Context(self, value: Nullable) -> None: ...


class DirectoryRdnPrefixAttribute(Attribute):
    def __init__(self, rdnPrefix: str): ...
    @property
    def Context(self) -> Nullable: ...
    @property
    def RdnPrefix(self) -> str: ...


class GroupPrincipal(Principal):
    @overload
    def __init__(self, context: PrincipalContext): ...
    @overload
    def __init__(self, context: PrincipalContext, samAccountName: str): ...
    def Dispose(self) -> None: ...
    @overload
    def FindByIdentity(context: PrincipalContext, identityValue: str) -> GroupPrincipal: ...
    @overload
    def FindByIdentity(context: PrincipalContext, identityType: IdentityType, identityValue: str) -> GroupPrincipal: ...
    @property
    def GroupScope(self) -> Nullable: ...
    @property
    def IsSecurityGroup(self) -> Nullable: ...
    @property
    def Members(self) -> PrincipalCollection: ...
    @overload
    def GetMembers(self) -> PrincipalSearchResult: ...
    @overload
    def GetMembers(self, recursive: bool) -> PrincipalSearchResult: ...
    @GroupScope.setter
    def GroupScope(self, value: Nullable) -> None: ...
    @IsSecurityGroup.setter
    def IsSecurityGroup(self, value: Nullable) -> None: ...


class GroupScope:
    Local = 0
    Global = 1
    Universal = 2


class IdentityType:
    SamAccountName = 0
    Name = 1
    UserPrincipalName = 2
    DistinguishedName = 3
    Sid = 4
    Guid = 5


class MatchType:
    Equals = 0
    NotEquals = 1
    GreaterThan = 2
    GreaterThanOrEquals = 3
    LessThan = 4
    LessThanOrEquals = 5


class MultipleMatchesException(PrincipalException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class NoMatchingPrincipalException(PrincipalException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class PasswordException(PrincipalException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class Principal(Object):
    def Delete(self) -> None: ...
    def Dispose(self) -> None: ...
    def Equals(self, o: Object) -> bool: ...
    @overload
    def FindByIdentity(context: PrincipalContext, identityValue: str) -> Principal: ...
    @overload
    def FindByIdentity(context: PrincipalContext, identityType: IdentityType, identityValue: str) -> Principal: ...
    @property
    def Context(self) -> PrincipalContext: ...
    @property
    def ContextType(self) -> ContextType: ...
    @property
    def Description(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def DistinguishedName(self) -> str: ...
    @property
    def Guid(self) -> Nullable: ...
    @property
    def Name(self) -> str: ...
    @property
    def SamAccountName(self) -> str: ...
    @property
    def Sid(self) -> SecurityIdentifier: ...
    @property
    def StructuralObjectClass(self) -> str: ...
    @property
    def UserPrincipalName(self) -> str: ...
    @overload
    def GetGroups(self) -> PrincipalSearchResult: ...
    @overload
    def GetGroups(self, contextToQuery: PrincipalContext) -> PrincipalSearchResult: ...
    def GetHashCode(self) -> int: ...
    def GetUnderlyingObject(self) -> Object: ...
    def GetUnderlyingObjectType(self) -> Type: ...
    @overload
    def IsMemberOf(self, group: GroupPrincipal) -> bool: ...
    @overload
    def IsMemberOf(self, context: PrincipalContext, identityType: IdentityType, identityValue: str) -> bool: ...
    @overload
    def Save(self) -> None: ...
    @overload
    def Save(self, context: PrincipalContext) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SamAccountName.setter
    def SamAccountName(self, value: str) -> None: ...
    @UserPrincipalName.setter
    def UserPrincipalName(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class PrincipalCollection(Object):
    @overload
    def Add(self, principal: Principal) -> None: ...
    @overload
    def Add(self, user: UserPrincipal) -> None: ...
    @overload
    def Add(self, group: GroupPrincipal) -> None: ...
    @overload
    def Add(self, computer: ComputerPrincipal) -> None: ...
    @overload
    def Add(self, context: PrincipalContext, identityType: IdentityType, identityValue: str) -> None: ...
    def Clear(self) -> None: ...
    @overload
    def Contains(self, user: UserPrincipal) -> bool: ...
    @overload
    def Contains(self, principal: Principal) -> bool: ...
    @overload
    def Contains(self, group: GroupPrincipal) -> bool: ...
    @overload
    def Contains(self, computer: ComputerPrincipal) -> bool: ...
    @overload
    def Contains(self, context: PrincipalContext, identityType: IdentityType, identityValue: str) -> bool: ...
    def CopyTo(self, array: Set(Principal), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def Remove(self, user: UserPrincipal) -> bool: ...
    @overload
    def Remove(self, principal: Principal) -> bool: ...
    @overload
    def Remove(self, computer: ComputerPrincipal) -> bool: ...
    @overload
    def Remove(self, group: GroupPrincipal) -> bool: ...
    @overload
    def Remove(self, context: PrincipalContext, identityType: IdentityType, identityValue: str) -> bool: ...


class PrincipalContext(Object):
    @overload
    def __init__(self, contextType: ContextType): ...
    @overload
    def __init__(self, contextType: ContextType, name: str): ...
    @overload
    def __init__(self, contextType: ContextType, name: str, container: str): ...
    @overload
    def __init__(self, contextType: ContextType, name: str, container: str, options: ContextOptions): ...
    @overload
    def __init__(self, contextType: ContextType, name: str, userName: str, password: str): ...
    @overload
    def __init__(self, contextType: ContextType, name: str, container: str, userName: str, password: str): ...
    @overload
    def __init__(self, contextType: ContextType, name: str, container: str, options: ContextOptions, userName: str, password: str): ...
    def Dispose(self) -> None: ...
    @property
    def ConnectedServer(self) -> str: ...
    @property
    def Container(self) -> str: ...
    @property
    def ContextType(self) -> ContextType: ...
    @property
    def Name(self) -> str: ...
    @property
    def Options(self) -> ContextOptions: ...
    @property
    def UserName(self) -> str: ...
    @overload
    def ValidateCredentials(self, userName: str, password: str) -> bool: ...
    @overload
    def ValidateCredentials(self, userName: str, password: str, options: ContextOptions) -> bool: ...


class PrincipalException(SystemException):
    pass


class PrincipalExistsException(PrincipalException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class PrincipalOperationException(PrincipalException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, errorCode: int): ...
    @overload
    def __init__(self, message: str, innerException: Exception, errorCode: int): ...
    @property
    def ErrorCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PrincipalSearcher(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, queryFilter: Principal): ...
    def Dispose(self) -> None: ...
    def FindAll(self) -> PrincipalSearchResult: ...
    def FindOne(self) -> Principal: ...
    @property
    def Context(self) -> PrincipalContext: ...
    @property
    def QueryFilter(self) -> Principal: ...
    def GetUnderlyingSearcher(self) -> Object: ...
    def GetUnderlyingSearcherType(self) -> Type: ...
    @QueryFilter.setter
    def QueryFilter(self, value: Principal) -> None: ...




class PrincipalServerDownException(PrincipalException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, errorCode: int): ...
    @overload
    def __init__(self, message: str, innerException: Exception, errorCode: int): ...
    @overload
    def __init__(self, message: str, innerException: Exception, errorCode: int, serverName: str): ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...




class UserPrincipal(AuthenticablePrincipal):
    @overload
    def __init__(self, context: PrincipalContext): ...
    @overload
    def __init__(self, context: PrincipalContext, samAccountName: str, password: str, enabled: bool): ...
    def FindByBadPasswordAttempt(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    def FindByExpirationTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    @overload
    def FindByIdentity(context: PrincipalContext, identityValue: str) -> UserPrincipal: ...
    @overload
    def FindByIdentity(context: PrincipalContext, identityType: IdentityType, identityValue: str) -> UserPrincipal: ...
    def FindByLockoutTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    def FindByLogonTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    def FindByPasswordSetTime(context: PrincipalContext, time: DateTime, type: MatchType) -> PrincipalSearchResult: ...
    @property
    def AdvancedSearchFilter(self) -> AdvancedFilters: ...
    @property
    def Current() -> UserPrincipal: ...
    @property
    def EmailAddress(self) -> str: ...
    @property
    def EmployeeId(self) -> str: ...
    @property
    def GivenName(self) -> str: ...
    @property
    def MiddleName(self) -> str: ...
    @property
    def Surname(self) -> str: ...
    @property
    def VoiceTelephoneNumber(self) -> str: ...
    def GetAuthorizationGroups(self) -> PrincipalSearchResult: ...
    @EmailAddress.setter
    def EmailAddress(self, value: str) -> None: ...
    @EmployeeId.setter
    def EmployeeId(self, value: str) -> None: ...
    @GivenName.setter
    def GivenName(self, value: str) -> None: ...
    @MiddleName.setter
    def MiddleName(self, value: str) -> None: ...
    @Surname.setter
    def Surname(self, value: str) -> None: ...
    @VoiceTelephoneNumber.setter
    def VoiceTelephoneNumber(self, value: str) -> None: ...
