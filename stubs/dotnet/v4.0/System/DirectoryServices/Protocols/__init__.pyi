from typing import Tuple, Set, Iterable, List


class AddRequest(DirectoryRequest):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, distinguishedName: str, attributes: Set(DirectoryAttribute)): ...
    @overload
    def __init__(self, distinguishedName: str, objectClass: str): ...
    @property
    def Attributes(self) -> DirectoryAttributeCollection: ...
    @property
    def DistinguishedName(self) -> str: ...
    @DistinguishedName.setter
    def DistinguishedName(self, value: str) -> None: ...


class AddResponse(DirectoryResponse):
    pass


class AsqRequestControl(DirectoryControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributeName: str): ...
    @property
    def AttributeName(self) -> str: ...
    def GetValue(self) -> Set(Byte): ...
    @AttributeName.setter
    def AttributeName(self, value: str) -> None: ...


class AsqResponseControl(DirectoryControl):
    @property
    def Result(self) -> ResultCode: ...


class AuthType:
    Anonymous = 0
    Basic = 1
    Negotiate = 2
    Ntlm = 3
    Digest = 4
    Sicily = 5
    Dpa = 6
    Msn = 7
    External = 8
    Kerberos = 9


class BerConversionException(DirectoryException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class BerConverter(Object):
    def Decode(format: str, value: Set(Byte)) -> Set(Object): ...
    def Encode(format: str, value: Set(Object)) -> Set(Byte): ...


class CompareRequest(DirectoryRequest):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, distinguishedName: str, assertion: DirectoryAttribute): ...
    @overload
    def __init__(self, distinguishedName: str, attributeName: str, value: str): ...
    @overload
    def __init__(self, distinguishedName: str, attributeName: str, value: Set(Byte)): ...
    @overload
    def __init__(self, distinguishedName: str, attributeName: str, value: Uri): ...
    @property
    def Assertion(self) -> DirectoryAttribute: ...
    @property
    def DistinguishedName(self) -> str: ...
    @DistinguishedName.setter
    def DistinguishedName(self, value: str) -> None: ...


class CompareResponse(DirectoryResponse):
    pass


class CrossDomainMoveControl(DirectoryControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, targetDomainController: str): ...
    @property
    def TargetDomainController(self) -> str: ...
    def GetValue(self) -> Set(Byte): ...
    @TargetDomainController.setter
    def TargetDomainController(self, value: str) -> None: ...


class DeleteRequest(DirectoryRequest):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, distinguishedName: str): ...
    @property
    def DistinguishedName(self) -> str: ...
    @DistinguishedName.setter
    def DistinguishedName(self, value: str) -> None: ...


class DeleteResponse(DirectoryResponse):
    pass


class DereferenceAlias:
    Never = 0
    InSearching = 1
    FindingBaseObject = 2
    Always = 3


class DereferenceConnectionCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, primaryConnection: LdapConnection, connectionToDereference: LdapConnection, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, primaryConnection: LdapConnection, connectionToDereference: LdapConnection) -> None: ...


class DirectoryAttribute(CollectionBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, value: str): ...
    @overload
    def __init__(self, name: str, value: Set(Byte)): ...
    @overload
    def __init__(self, name: str, value: Uri): ...
    @overload
    def __init__(self, name: str, values: Set(Object)): ...
    @overload
    def Add(self, value: Set(Byte)) -> int: ...
    @overload
    def Add(self, value: str) -> int: ...
    @overload
    def Add(self, value: Uri) -> int: ...
    def AddRange(self, values: Set(Object)) -> None: ...
    def Contains(self, value: Object) -> bool: ...
    def CopyTo(self, array: Set(Object), index: int) -> None: ...
    @property
    def Item(self, index: int) -> Object: ...
    @property
    def Name(self) -> str: ...
    def GetValues(self, valuesType: Type) -> Set(Object): ...
    def IndexOf(self, value: Object) -> int: ...
    @overload
    def Insert(self, index: int, value: Uri) -> None: ...
    @overload
    def Insert(self, index: int, value: str) -> None: ...
    @overload
    def Insert(self, index: int, value: Set(Byte)) -> None: ...
    def Remove(self, value: Object) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class DirectoryAttributeCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, attribute: DirectoryAttribute) -> int: ...
    @overload
    def AddRange(self, attributes: Set(DirectoryAttribute)) -> None: ...
    @overload
    def AddRange(self, attributeCollection: DirectoryAttributeCollection) -> None: ...
    def Contains(self, value: DirectoryAttribute) -> bool: ...
    def CopyTo(self, array: Set(DirectoryAttribute), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DirectoryAttribute: ...
    def IndexOf(self, value: DirectoryAttribute) -> int: ...
    def Insert(self, index: int, value: DirectoryAttribute) -> None: ...
    def Remove(self, value: DirectoryAttribute) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DirectoryAttribute) -> None: ...


class DirectoryAttributeModification(DirectoryAttribute):
    def __init__(self): ...
    @property
    def Operation(self) -> DirectoryAttributeOperation: ...
    @Operation.setter
    def Operation(self, value: DirectoryAttributeOperation) -> None: ...


class DirectoryAttributeModificationCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, attribute: DirectoryAttributeModification) -> int: ...
    @overload
    def AddRange(self, attributes: Set(DirectoryAttributeModification)) -> None: ...
    @overload
    def AddRange(self, attributeCollection: DirectoryAttributeModificationCollection) -> None: ...
    def Contains(self, value: DirectoryAttributeModification) -> bool: ...
    def CopyTo(self, array: Set(DirectoryAttributeModification), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DirectoryAttributeModification: ...
    def IndexOf(self, value: DirectoryAttributeModification) -> int: ...
    def Insert(self, index: int, value: DirectoryAttributeModification) -> None: ...
    def Remove(self, value: DirectoryAttributeModification) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DirectoryAttributeModification) -> None: ...


class DirectoryAttributeOperation:
    Add = 0
    Delete = 1
    Replace = 2


class DirectoryConnection(Object):
    @property
    def ClientCertificates(self) -> X509CertificateCollection: ...
    @property
    def Directory(self) -> DirectoryIdentifier: ...
    @property
    def Timeout(self) -> TimeSpan: ...
    def SendRequest(self, request: DirectoryRequest) -> DirectoryResponse: ...
    @Credential.setter
    def Credential(self, value: NetworkCredential) -> None: ...
    @Timeout.setter
    def Timeout(self, value: TimeSpan) -> None: ...


class DirectoryControl(Object):
    def __init__(self, type: str, value: Set(Byte), isCritical: bool, serverSide: bool): ...
    @property
    def IsCritical(self) -> bool: ...
    @property
    def ServerSide(self) -> bool: ...
    @property
    def Type(self) -> str: ...
    def GetValue(self) -> Set(Byte): ...
    @IsCritical.setter
    def IsCritical(self, value: bool) -> None: ...
    @ServerSide.setter
    def ServerSide(self, value: bool) -> None: ...


class DirectoryControlCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, control: DirectoryControl) -> int: ...
    @overload
    def AddRange(self, controls: Set(DirectoryControl)) -> None: ...
    @overload
    def AddRange(self, controlCollection: DirectoryControlCollection) -> None: ...
    def Contains(self, value: DirectoryControl) -> bool: ...
    def CopyTo(self, array: Set(DirectoryControl), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DirectoryControl: ...
    def IndexOf(self, value: DirectoryControl) -> int: ...
    def Insert(self, index: int, value: DirectoryControl) -> None: ...
    def Remove(self, value: DirectoryControl) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DirectoryControl) -> None: ...


class DirectoryException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class DirectoryIdentifier(Object):
    pass


class DirectoryNotificationControl(DirectoryControl):
    def __init__(self): ...


class DirectoryOperation(Object):
    pass


class DirectoryOperationException(DirectoryException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, response: DirectoryResponse): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, response: DirectoryResponse, message: str): ...
    @overload
    def __init__(self, response: DirectoryResponse, message: str, inner: Exception): ...
    @property
    def Response(self) -> DirectoryResponse: ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...


class DirectoryRequest(DirectoryOperation):
    @property
    def Controls(self) -> DirectoryControlCollection: ...
    @property
    def RequestId(self) -> str: ...
    @RequestId.setter
    def RequestId(self, value: str) -> None: ...


class DirectoryResponse(DirectoryOperation):
    @property
    def Controls(self) -> Set(DirectoryControl): ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def MatchedDN(self) -> str: ...
    @property
    def Referral(self) -> Set(Uri): ...
    @property
    def RequestId(self) -> str: ...
    @property
    def ResultCode(self) -> ResultCode: ...


class DirectorySynchronizationOptions:
    #None = 0
    ObjectSecurity = 1
    ParentsFirst = 2048
    PublicDataOnly = 8192
    IncrementalValues = 2147483648


class DirSyncRequestControl(DirectoryControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cookie: Set(Byte)): ...
    @overload
    def __init__(self, cookie: Set(Byte), option: DirectorySynchronizationOptions): ...
    @overload
    def __init__(self, cookie: Set(Byte), option: DirectorySynchronizationOptions, attributeCount: int): ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def Cookie(self) -> Set(Byte): ...
    @property
    def Option(self) -> DirectorySynchronizationOptions: ...
    def GetValue(self) -> Set(Byte): ...
    @AttributeCount.setter
    def AttributeCount(self, value: int) -> None: ...
    @Cookie.setter
    def Cookie(self, value: Set(Byte)) -> None: ...
    @Option.setter
    def Option(self, value: DirectorySynchronizationOptions) -> None: ...


class DirSyncResponseControl(DirectoryControl):
    @property
    def Cookie(self) -> Set(Byte): ...
    @property
    def MoreData(self) -> bool: ...
    @property
    def ResultSize(self) -> int: ...


class DomainScopeControl(DirectoryControl):
    def __init__(self): ...


class DsmlAuthRequest(DirectoryRequest):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, principal: str): ...
    @property
    def Principal(self) -> str: ...
    @Principal.setter
    def Principal(self, value: str) -> None: ...


class DsmlAuthResponse(DirectoryResponse):
    pass


class DsmlDirectoryIdentifier(DirectoryIdentifier):
    def __init__(self, serverUri: Uri): ...
    @property
    def ServerUri(self) -> Uri: ...


class DsmlDocument(Object):
    def ToXml(self) -> XmlDocument: ...


class DsmlDocumentProcessing:
    Sequential = 0
    Parallel = 1


class DsmlErrorProcessing:
    Resume = 0
    Exit = 1


class DsmlErrorResponse(DirectoryResponse):
    @property
    def Controls(self) -> Set(DirectoryControl): ...
    @property
    def Detail(self) -> str: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def MatchedDN(self) -> str: ...
    @property
    def Message(self) -> str: ...
    @property
    def Referral(self) -> Set(Uri): ...
    @property
    def ResultCode(self) -> ResultCode: ...
    @property
    def Type(self) -> ErrorResponseCategory: ...


class DsmlInvalidDocumentException(DirectoryException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class DsmlRequestDocument(DsmlDocument):
    def __init__(self): ...
    def Add(self, request: DirectoryRequest) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, value: DirectoryRequest) -> bool: ...
    def CopyTo(self, value: Set(DirectoryRequest), i: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def DocumentProcessing(self) -> DsmlDocumentProcessing: ...
    @property
    def ErrorProcessing(self) -> DsmlErrorProcessing: ...
    @property
    def Item(self, index: int) -> DirectoryRequest: ...
    @property
    def RequestId(self) -> str: ...
    @property
    def ResponseOrder(self) -> DsmlResponseOrder: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: DirectoryRequest) -> int: ...
    def Insert(self, index: int, value: DirectoryRequest) -> None: ...
    def Remove(self, value: DirectoryRequest) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @DocumentProcessing.setter
    def DocumentProcessing(self, value: DsmlDocumentProcessing) -> None: ...
    @ErrorProcessing.setter
    def ErrorProcessing(self, value: DsmlErrorProcessing) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DirectoryRequest) -> None: ...
    @RequestId.setter
    def RequestId(self, value: str) -> None: ...
    @ResponseOrder.setter
    def ResponseOrder(self, value: DsmlResponseOrder) -> None: ...
    def ToXml(self) -> XmlDocument: ...


class DsmlResponseDocument(DsmlDocument):
    def CopyTo(self, value: Set(DirectoryResponse), i: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsErrorResponse(self) -> bool: ...
    @property
    def IsOperationError(self) -> bool: ...
    @property
    def Item(self, index: int) -> DirectoryResponse: ...
    @property
    def RequestId(self) -> str: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def ToXml(self) -> XmlDocument: ...


class DsmlResponseOrder:
    Sequential = 0
    Unordered = 1


class DsmlSoapConnection(DirectoryConnection):
    def BeginSession(self) -> None: ...
    def EndSession(self) -> None: ...
    @property
    def SessionId(self) -> str: ...
    @property
    def SoapRequestHeader(self) -> XmlNode: ...
    @SoapRequestHeader.setter
    def SoapRequestHeader(self, value: XmlNode) -> None: ...


class DsmlSoapHttpConnection(DsmlSoapConnection):
    @overload
    def __init__(self, uri: Uri): ...
    @overload
    def __init__(self, identifier: DsmlDirectoryIdentifier): ...
    @overload
    def __init__(self, identifier: DsmlDirectoryIdentifier, credential: NetworkCredential): ...
    @overload
    def __init__(self, identifier: DsmlDirectoryIdentifier, credential: NetworkCredential, authType: AuthType): ...
    def Abort(self, asyncResult: IAsyncResult) -> None: ...
    def BeginSendRequest(self, request: DsmlRequestDocument, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginSession(self) -> None: ...
    def EndSendRequest(self, asyncResult: IAsyncResult) -> DsmlResponseDocument: ...
    def EndSession(self) -> None: ...
    @property
    def AuthType(self) -> AuthType: ...
    @property
    def SessionId(self) -> str: ...
    @property
    def SoapActionHeader(self) -> str: ...
    @property
    def Timeout(self) -> TimeSpan: ...
    @overload
    def SendRequest(self, request: DsmlRequestDocument) -> DsmlResponseDocument: ...
    @overload
    def SendRequest(self, request: DirectoryRequest) -> DirectoryResponse: ...
    @AuthType.setter
    def AuthType(self, value: AuthType) -> None: ...
    @SoapActionHeader.setter
    def SoapActionHeader(self, value: str) -> None: ...
    @Timeout.setter
    def Timeout(self, value: TimeSpan) -> None: ...


class ErrorResponseCategory:
    NotAttempted = 0
    CouldNotConnect = 1
    ConnectionClosed = 2
    MalformedRequest = 3
    GatewayInternalError = 4
    AuthenticationFailed = 5
    UnresolvableUri = 6
    Other = 7


class ErrorResponseException(DirectoryException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, response: DsmlErrorResponse): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, response: DsmlErrorResponse, message: str): ...
    @overload
    def __init__(self, response: DsmlErrorResponse, message: str, inner: Exception): ...
    @property
    def Response(self) -> DsmlErrorResponse: ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...


class ExtendedDNControl(DirectoryControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, flag: ExtendedDNFlag): ...
    @property
    def Flag(self) -> ExtendedDNFlag: ...
    def GetValue(self) -> Set(Byte): ...
    @Flag.setter
    def Flag(self, value: ExtendedDNFlag) -> None: ...


class ExtendedDNFlag:
    HexString = 0
    StandardString = 1


class ExtendedRequest(DirectoryRequest):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, requestName: str): ...
    @overload
    def __init__(self, requestName: str, requestValue: Set(Byte)): ...
    @property
    def RequestName(self) -> str: ...
    @property
    def RequestValue(self) -> Set(Byte): ...
    @RequestName.setter
    def RequestName(self, value: str) -> None: ...
    @RequestValue.setter
    def RequestValue(self, value: Set(Byte)) -> None: ...


class ExtendedResponse(DirectoryResponse):
    @property
    def ResponseName(self) -> str: ...
    @property
    def ResponseValue(self) -> Set(Byte): ...


class LazyCommitControl(DirectoryControl):
    def __init__(self): ...


class LdapConnection(DirectoryConnection):
    @overload
    def __init__(self, server: str): ...
    @overload
    def __init__(self, identifier: LdapDirectoryIdentifier): ...
    @overload
    def __init__(self, identifier: LdapDirectoryIdentifier, credential: NetworkCredential): ...
    @overload
    def __init__(self, identifier: LdapDirectoryIdentifier, credential: NetworkCredential, authType: AuthType): ...
    def Abort(self, asyncResult: IAsyncResult) -> None: ...
    @overload
    def BeginSendRequest(self, request: DirectoryRequest, partialMode: PartialResultProcessing, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def BeginSendRequest(self, request: DirectoryRequest, requestTimeout: TimeSpan, partialMode: PartialResultProcessing, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    @overload
    def Bind(self) -> None: ...
    @overload
    def Bind(self, newCredential: NetworkCredential) -> None: ...
    def Dispose(self) -> None: ...
    def EndSendRequest(self, asyncResult: IAsyncResult) -> DirectoryResponse: ...
    @property
    def AuthType(self) -> AuthType: ...
    @property
    def AutoBind(self) -> bool: ...
    @property
    def SessionOptions(self) -> LdapSessionOptions: ...
    @property
    def Timeout(self) -> TimeSpan: ...
    def GetPartialResults(self, asyncResult: IAsyncResult) -> PartialResultsCollection: ...
    @overload
    def SendRequest(self, request: DirectoryRequest) -> DirectoryResponse: ...
    @overload
    def SendRequest(self, request: DirectoryRequest, requestTimeout: TimeSpan) -> DirectoryResponse: ...
    @AuthType.setter
    def AuthType(self, value: AuthType) -> None: ...
    @AutoBind.setter
    def AutoBind(self, value: bool) -> None: ...
    @Credential.setter
    def Credential(self, value: NetworkCredential) -> None: ...
    @Timeout.setter
    def Timeout(self, value: TimeSpan) -> None: ...


class LdapDirectoryIdentifier(DirectoryIdentifier):
    @overload
    def __init__(self, server: str): ...
    @overload
    def __init__(self, server: str, portNumber: int): ...
    @overload
    def __init__(self, server: str, fullyQualifiedDnsHostName: bool, connectionless: bool): ...
    @overload
    def __init__(self, servers: Set(str), fullyQualifiedDnsHostName: bool, connectionless: bool): ...
    @overload
    def __init__(self, server: str, portNumber: int, fullyQualifiedDnsHostName: bool, connectionless: bool): ...
    @overload
    def __init__(self, servers: Set(str), portNumber: int, fullyQualifiedDnsHostName: bool, connectionless: bool): ...
    @property
    def Connectionless(self) -> bool: ...
    @property
    def FullyQualifiedDnsHostName(self) -> bool: ...
    @property
    def PortNumber(self) -> int: ...
    @property
    def Servers(self) -> Set(str): ...


class LdapException(DirectoryException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, errorCode: int): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, errorCode: int, message: str): ...
    @overload
    def __init__(self, errorCode: int, message: str, serverErrorMessage: str): ...
    @overload
    def __init__(self, errorCode: int, message: str, inner: Exception): ...
    @property
    def ErrorCode(self) -> int: ...
    @property
    def PartialResults(self) -> PartialResultsCollection: ...
    @property
    def ServerErrorMessage(self) -> str: ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...


class LdapSessionOptions(Object):
    def FastConcurrentBind(self) -> None: ...
    @property
    def AutoReconnect(self) -> bool: ...
    @property
    def DomainName(self) -> str: ...
    @property
    def HostName(self) -> str: ...
    @property
    def HostReachable(self) -> bool: ...
    @property
    def LocatorFlag(self) -> LocatorFlags: ...
    @property
    def PingKeepAliveTimeout(self) -> TimeSpan: ...
    @property
    def PingLimit(self) -> int: ...
    @property
    def PingWaitTimeout(self) -> TimeSpan: ...
    @property
    def ProtocolVersion(self) -> int: ...
    @property
    def QueryClientCertificate(self) -> QueryClientCertificateCallback: ...
    @property
    def ReferralCallback(self) -> ReferralCallback: ...
    @property
    def ReferralChasing(self) -> ReferralChasingOptions: ...
    @property
    def ReferralHopLimit(self) -> int: ...
    @property
    def RootDseCache(self) -> bool: ...
    @property
    def SaslMethod(self) -> str: ...
    @property
    def Sealing(self) -> bool: ...
    @property
    def SecureSocketLayer(self) -> bool: ...
    @property
    def SecurityContext(self) -> Object: ...
    @property
    def SendTimeout(self) -> TimeSpan: ...
    @property
    def Signing(self) -> bool: ...
    @property
    def SslInformation(self) -> SecurityPackageContextConnectionInformation: ...
    @property
    def SspiFlag(self) -> int: ...
    @property
    def TcpKeepAlive(self) -> bool: ...
    @property
    def VerifyServerCertificate(self) -> VerifyServerCertificateCallback: ...
    @AutoReconnect.setter
    def AutoReconnect(self, value: bool) -> None: ...
    @DomainName.setter
    def DomainName(self, value: str) -> None: ...
    @HostName.setter
    def HostName(self, value: str) -> None: ...
    @LocatorFlag.setter
    def LocatorFlag(self, value: LocatorFlags) -> None: ...
    @PingKeepAliveTimeout.setter
    def PingKeepAliveTimeout(self, value: TimeSpan) -> None: ...
    @PingLimit.setter
    def PingLimit(self, value: int) -> None: ...
    @PingWaitTimeout.setter
    def PingWaitTimeout(self, value: TimeSpan) -> None: ...
    @ProtocolVersion.setter
    def ProtocolVersion(self, value: int) -> None: ...
    @QueryClientCertificate.setter
    def QueryClientCertificate(self, value: QueryClientCertificateCallback) -> None: ...
    @ReferralCallback.setter
    def ReferralCallback(self, value: ReferralCallback) -> None: ...
    @ReferralChasing.setter
    def ReferralChasing(self, value: ReferralChasingOptions) -> None: ...
    @ReferralHopLimit.setter
    def ReferralHopLimit(self, value: int) -> None: ...
    @RootDseCache.setter
    def RootDseCache(self, value: bool) -> None: ...
    @SaslMethod.setter
    def SaslMethod(self, value: str) -> None: ...
    @Sealing.setter
    def Sealing(self, value: bool) -> None: ...
    @SecureSocketLayer.setter
    def SecureSocketLayer(self, value: bool) -> None: ...
    @SendTimeout.setter
    def SendTimeout(self, value: TimeSpan) -> None: ...
    @Signing.setter
    def Signing(self, value: bool) -> None: ...
    @SspiFlag.setter
    def SspiFlag(self, value: int) -> None: ...
    @TcpKeepAlive.setter
    def TcpKeepAlive(self, value: bool) -> None: ...
    @VerifyServerCertificate.setter
    def VerifyServerCertificate(self, value: VerifyServerCertificateCallback) -> None: ...
    def StartTransportLayerSecurity(self, controls: DirectoryControlCollection) -> None: ...
    def StopTransportLayerSecurity(self) -> None: ...


class LocatorFlags:
    #None = 0
    ForceRediscovery = 1
    DirectoryServicesRequired = 16
    DirectoryServicesPreferred = 32
    GCRequired = 64
    PdcRequired = 128
    IPRequired = 512
    KdcRequired = 1024
    TimeServerRequired = 2048
    WriteableRequired = 4096
    GoodTimeServerPreferred = 8192
    AvoidSelf = 16384
    OnlyLdapNeeded = 32768
    IsFlatName = 65536
    IsDnsName = 131072
    ReturnDnsName = 1073741824
    ReturnFlatName = 2147483648


class ModifyDNRequest(DirectoryRequest):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, distinguishedName: str, newParentDistinguishedName: str, newName: str): ...
    @property
    def DeleteOldRdn(self) -> bool: ...
    @property
    def DistinguishedName(self) -> str: ...
    @property
    def NewName(self) -> str: ...
    @property
    def NewParentDistinguishedName(self) -> str: ...
    @DeleteOldRdn.setter
    def DeleteOldRdn(self, value: bool) -> None: ...
    @DistinguishedName.setter
    def DistinguishedName(self, value: str) -> None: ...
    @NewName.setter
    def NewName(self, value: str) -> None: ...
    @NewParentDistinguishedName.setter
    def NewParentDistinguishedName(self, value: str) -> None: ...


class ModifyDNResponse(DirectoryResponse):
    pass


class ModifyRequest(DirectoryRequest):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, distinguishedName: str, modifications: Set(DirectoryAttributeModification)): ...
    @overload
    def __init__(self, distinguishedName: str, operation: DirectoryAttributeOperation, attributeName: str, values: Set(Object)): ...
    @property
    def DistinguishedName(self) -> str: ...
    @property
    def Modifications(self) -> DirectoryAttributeModificationCollection: ...
    @DistinguishedName.setter
    def DistinguishedName(self, value: str) -> None: ...


class ModifyResponse(DirectoryResponse):
    pass


class NotifyOfNewConnectionCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, primaryConnection: LdapConnection, referralFromConnection: LdapConnection, newDistinguishedName: str, identifier: LdapDirectoryIdentifier, newConnection: LdapConnection, credential: NetworkCredential, currentUserToken: Int64, errorCodeFromBind: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    def Invoke(self, primaryConnection: LdapConnection, referralFromConnection: LdapConnection, newDistinguishedName: str, identifier: LdapDirectoryIdentifier, newConnection: LdapConnection, credential: NetworkCredential, currentUserToken: Int64, errorCodeFromBind: int) -> bool: ...


class PageResultRequestControl(DirectoryControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pageSize: int): ...
    @overload
    def __init__(self, cookie: Set(Byte)): ...
    @property
    def Cookie(self) -> Set(Byte): ...
    @property
    def PageSize(self) -> int: ...
    def GetValue(self) -> Set(Byte): ...
    @Cookie.setter
    def Cookie(self, value: Set(Byte)) -> None: ...
    @PageSize.setter
    def PageSize(self, value: int) -> None: ...


class PageResultResponseControl(DirectoryControl):
    @property
    def Cookie(self) -> Set(Byte): ...
    @property
    def TotalCount(self) -> int: ...


class PartialResultProcessing:
    NoPartialResultSupport = 0
    ReturnPartialResults = 1
    ReturnPartialResultsAndNotifyCallback = 2


class PartialResultsCollection(ReadOnlyCollectionBase):
    def Contains(self, value: Object) -> bool: ...
    def CopyTo(self, values: Set(Object), index: int) -> None: ...
    @property
    def Item(self, index: int) -> Object: ...
    def IndexOf(self, value: Object) -> int: ...


class PermissiveModifyControl(DirectoryControl):
    def __init__(self): ...


class QueryClientCertificateCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, connection: LdapConnection, trustedCAs: Set(Set(Byte)), callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> X509Certificate: ...
    def Invoke(self, connection: LdapConnection, trustedCAs: Set(Set(Byte))) -> X509Certificate: ...


class QueryForConnectionCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, primaryConnection: LdapConnection, referralFromConnection: LdapConnection, newDistinguishedName: str, identifier: LdapDirectoryIdentifier, credential: NetworkCredential, currentUserToken: Int64, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> LdapConnection: ...
    def Invoke(self, primaryConnection: LdapConnection, referralFromConnection: LdapConnection, newDistinguishedName: str, identifier: LdapDirectoryIdentifier, credential: NetworkCredential, currentUserToken: Int64) -> LdapConnection: ...


class QuotaControl(DirectoryControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, querySid: SecurityIdentifier): ...
    @property
    def QuerySid(self) -> SecurityIdentifier: ...
    def GetValue(self) -> Set(Byte): ...
    @QuerySid.setter
    def QuerySid(self, value: SecurityIdentifier) -> None: ...


class ReferralCallback(Object):
    def __init__(self): ...
    @property
    def DereferenceConnection(self) -> DereferenceConnectionCallback: ...
    @property
    def NotifyNewConnection(self) -> NotifyOfNewConnectionCallback: ...
    @property
    def QueryForConnection(self) -> QueryForConnectionCallback: ...
    @DereferenceConnection.setter
    def DereferenceConnection(self, value: DereferenceConnectionCallback) -> None: ...
    @NotifyNewConnection.setter
    def NotifyNewConnection(self, value: NotifyOfNewConnectionCallback) -> None: ...
    @QueryForConnection.setter
    def QueryForConnection(self, value: QueryForConnectionCallback) -> None: ...


class ReferralChasingOptions:
    #None = 0
    Subordinate = 32
    External = 64
    All = 96


class ResultCode:
    Success = 0
    OperationsError = 1
    ProtocolError = 2
    TimeLimitExceeded = 3
    SizeLimitExceeded = 4
    CompareFalse = 5
    CompareTrue = 6
    AuthMethodNotSupported = 7
    StrongAuthRequired = 8
    ReferralV2 = 9
    Referral = 10
    AdminLimitExceeded = 11
    UnavailableCriticalExtension = 12
    ConfidentialityRequired = 13
    SaslBindInProgress = 14
    NoSuchAttribute = 16
    UndefinedAttributeType = 17
    InappropriateMatching = 18
    ConstraintViolation = 19
    AttributeOrValueExists = 20
    InvalidAttributeSyntax = 21
    NoSuchObject = 32
    AliasProblem = 33
    InvalidDNSyntax = 34
    AliasDereferencingProblem = 36
    InappropriateAuthentication = 48
    InsufficientAccessRights = 50
    Busy = 51
    Unavailable = 52
    UnwillingToPerform = 53
    LoopDetect = 54
    SortControlMissing = 60
    OffsetRangeError = 61
    NamingViolation = 64
    ObjectClassViolation = 65
    NotAllowedOnNonLeaf = 66
    NotAllowedOnRdn = 67
    EntryAlreadyExists = 68
    ObjectClassModificationsProhibited = 69
    ResultsTooLarge = 70
    AffectsMultipleDsas = 71
    VirtualListViewError = 76
    Other = 80


class SearchOption:
    DomainScope = 1
    PhantomRoot = 2


class SearchOptionsControl(DirectoryControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, flags: SearchOption): ...
    @property
    def SearchOption(self) -> SearchOption: ...
    def GetValue(self) -> Set(Byte): ...
    @SearchOption.setter
    def SearchOption(self, value: SearchOption) -> None: ...


class SearchRequest(DirectoryRequest):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, distinguishedName: str, filter: XmlDocument, searchScope: SearchScope, attributeList: Set(str)): ...
    @overload
    def __init__(self, distinguishedName: str, ldapFilter: str, searchScope: SearchScope, attributeList: Set(str)): ...
    @property
    def Aliases(self) -> DereferenceAlias: ...
    @property
    def Attributes(self) -> StringCollection: ...
    @property
    def DistinguishedName(self) -> str: ...
    @property
    def Filter(self) -> Object: ...
    @property
    def Scope(self) -> SearchScope: ...
    @property
    def SizeLimit(self) -> int: ...
    @property
    def TimeLimit(self) -> TimeSpan: ...
    @property
    def TypesOnly(self) -> bool: ...
    @Aliases.setter
    def Aliases(self, value: DereferenceAlias) -> None: ...
    @DistinguishedName.setter
    def DistinguishedName(self, value: str) -> None: ...
    @Filter.setter
    def Filter(self, value: Object) -> None: ...
    @Scope.setter
    def Scope(self, value: SearchScope) -> None: ...
    @SizeLimit.setter
    def SizeLimit(self, value: int) -> None: ...
    @TimeLimit.setter
    def TimeLimit(self, value: TimeSpan) -> None: ...
    @TypesOnly.setter
    def TypesOnly(self, value: bool) -> None: ...


class SearchResponse(DirectoryResponse):
    @property
    def Controls(self) -> Set(DirectoryControl): ...
    @property
    def Entries(self) -> SearchResultEntryCollection: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def MatchedDN(self) -> str: ...
    @property
    def References(self) -> SearchResultReferenceCollection: ...
    @property
    def Referral(self) -> Set(Uri): ...
    @property
    def ResultCode(self) -> ResultCode: ...


class SearchResultAttributeCollection(DictionaryBase):
    def Contains(self, attributeName: str) -> bool: ...
    @overload
    def CopyTo(self, array: Set(DirectoryAttribute), index: int) -> None: ...
    @property
    def AttributeNames(self) -> ICollection: ...
    @property
    def Item(self, attributeName: str) -> DirectoryAttribute: ...
    @property
    def Values(self) -> ICollection: ...


class SearchResultEntry(Object):
    @property
    def Attributes(self) -> SearchResultAttributeCollection: ...
    @property
    def Controls(self) -> Set(DirectoryControl): ...
    @property
    def DistinguishedName(self) -> str: ...


class SearchResultEntryCollection(ReadOnlyCollectionBase):
    def Contains(self, value: SearchResultEntry) -> bool: ...
    def CopyTo(self, values: Set(SearchResultEntry), index: int) -> None: ...
    @property
    def Item(self, index: int) -> SearchResultEntry: ...
    def IndexOf(self, value: SearchResultEntry) -> int: ...


class SearchResultReference(Object):
    @property
    def Controls(self) -> Set(DirectoryControl): ...
    @property
    def Reference(self) -> Set(Uri): ...


class SearchResultReferenceCollection(ReadOnlyCollectionBase):
    def Contains(self, value: SearchResultReference) -> bool: ...
    def CopyTo(self, values: Set(SearchResultReference), index: int) -> None: ...
    @property
    def Item(self, index: int) -> SearchResultReference: ...
    def IndexOf(self, value: SearchResultReference) -> int: ...


class SearchScope:
    Base = 0
    OneLevel = 1
    Subtree = 2


class SecurityDescriptorFlagControl(DirectoryControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, masks: SecurityMasks): ...
    @property
    def SecurityMasks(self) -> SecurityMasks: ...
    def GetValue(self) -> Set(Byte): ...
    @SecurityMasks.setter
    def SecurityMasks(self, value: SecurityMasks) -> None: ...


class SecurityMasks:
    #None = 0
    Owner = 1
    Group = 2
    Dacl = 4
    Sacl = 8


class SecurityPackageContextConnectionInformation(Object):
    @property
    def AlgorithmIdentifier(self) -> CipherAlgorithmType: ...
    @property
    def CipherStrength(self) -> int: ...
    @property
    def ExchangeStrength(self) -> int: ...
    @property
    def Hash(self) -> HashAlgorithmType: ...
    @property
    def HashStrength(self) -> int: ...
    @property
    def KeyExchangeAlgorithm(self) -> int: ...
    @property
    def Protocol(self) -> SecurityProtocol: ...


class SecurityProtocol:
    Pct1Server = 1
    Pct1Client = 2
    Ssl2Server = 4
    Ssl2Client = 8
    Ssl3Server = 16
    Ssl3Client = 32
    Tls1Server = 64
    Tls1Client = 128


class ShowDeletedControl(DirectoryControl):
    def __init__(self): ...


class SortKey(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributeName: str, matchingRule: str, reverseOrder: bool): ...
    @property
    def AttributeName(self) -> str: ...
    @property
    def MatchingRule(self) -> str: ...
    @property
    def ReverseOrder(self) -> bool: ...
    @AttributeName.setter
    def AttributeName(self, value: str) -> None: ...
    @MatchingRule.setter
    def MatchingRule(self, value: str) -> None: ...
    @ReverseOrder.setter
    def ReverseOrder(self, value: bool) -> None: ...


class SortRequestControl(DirectoryControl):
    @overload
    def __init__(self, sortKeys: Set(SortKey)): ...
    @overload
    def __init__(self, attributeName: str, reverseOrder: bool): ...
    @overload
    def __init__(self, attributeName: str, matchingRule: str, reverseOrder: bool): ...
    @property
    def SortKeys(self) -> Set(SortKey): ...
    def GetValue(self) -> Set(Byte): ...
    @SortKeys.setter
    def SortKeys(self, value: Set(SortKey)) -> None: ...


class SortResponseControl(DirectoryControl):
    @property
    def AttributeName(self) -> str: ...
    @property
    def Result(self) -> ResultCode: ...


class TlsOperationException(DirectoryOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, response: DirectoryResponse): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, response: DirectoryResponse, message: str): ...
    @overload
    def __init__(self, response: DirectoryResponse, message: str, inner: Exception): ...


class TreeDeleteControl(DirectoryControl):
    def __init__(self): ...


class VerifyNameControl(DirectoryControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, serverName: str): ...
    @overload
    def __init__(self, serverName: str, flag: int): ...
    @property
    def Flag(self) -> int: ...
    @property
    def ServerName(self) -> str: ...
    def GetValue(self) -> Set(Byte): ...
    @Flag.setter
    def Flag(self, value: int) -> None: ...
    @ServerName.setter
    def ServerName(self, value: str) -> None: ...


class VerifyServerCertificateCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, connection: LdapConnection, certificate: X509Certificate, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    def Invoke(self, connection: LdapConnection, certificate: X509Certificate) -> bool: ...


class VlvRequestControl(DirectoryControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, beforeCount: int, afterCount: int, offset: int): ...
    @overload
    def __init__(self, beforeCount: int, afterCount: int, target: str): ...
    @overload
    def __init__(self, beforeCount: int, afterCount: int, target: Set(Byte)): ...
    @property
    def AfterCount(self) -> int: ...
    @property
    def BeforeCount(self) -> int: ...
    @property
    def ContextId(self) -> Set(Byte): ...
    @property
    def EstimateCount(self) -> int: ...
    @property
    def Offset(self) -> int: ...
    @property
    def Target(self) -> Set(Byte): ...
    def GetValue(self) -> Set(Byte): ...
    @AfterCount.setter
    def AfterCount(self, value: int) -> None: ...
    @BeforeCount.setter
    def BeforeCount(self, value: int) -> None: ...
    @ContextId.setter
    def ContextId(self, value: Set(Byte)) -> None: ...
    @EstimateCount.setter
    def EstimateCount(self, value: int) -> None: ...
    @Offset.setter
    def Offset(self, value: int) -> None: ...
    @Target.setter
    def Target(self, value: Set(Byte)) -> None: ...


class VlvResponseControl(DirectoryControl):
    @property
    def ContentCount(self) -> int: ...
    @property
    def ContextId(self) -> Set(Byte): ...
    @property
    def Result(self) -> ResultCode: ...
    @property
    def TargetPosition(self) -> int: ...
