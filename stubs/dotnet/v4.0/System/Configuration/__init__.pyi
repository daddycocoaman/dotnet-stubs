__all__ = ['Internal','Provider']
from typing import Tuple, Set, Iterable, List


class AppSettingsSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def File(self) -> str: ...
    @property
    def Settings(self) -> KeyValueConfigurationCollection: ...
    @File.setter
    def File(self, value: str) -> None: ...


class CallbackValidator(ConfigurationValidatorBase):
    def __init__(self, type: Type, callback: ValidatorCallback): ...
    def CanValidate(self, type: Type) -> bool: ...
    def Validate(self, value: Object) -> None: ...


class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self): ...
    @property
    def CallbackMethodName(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @CallbackMethodName.setter
    def CallbackMethodName(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...


class CommaDelimitedStringCollection(StringCollection):
    def __init__(self): ...
    @overload
    def Add(self, value: str) -> None: ...
    @overload
    def AddRange(self, range: Set(str)) -> None: ...
    @overload
    def Clear(self) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...
    @property
    def IsModified(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> str: ...
    @overload
    def Insert(self, index: int, value: str) -> None: ...
    @overload
    def Remove(self, value: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def ToString(self) -> str: ...


class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...
    @overload
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...


class Configuration(Object):
    @property
    def AppSettings(self) -> AppSettingsSection: ...
    @property
    def AssemblyStringTransformer(self) -> Func: ...
    @property
    def ConnectionStrings(self) -> ConnectionStringsSection: ...
    @property
    def EvaluationContext(self) -> ContextInformation: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def HasFile(self) -> bool: ...
    @property
    def Locations(self) -> ConfigurationLocationCollection: ...
    @property
    def NamespaceDeclared(self) -> bool: ...
    @property
    def RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    @property
    def SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @property
    def Sections(self) -> ConfigurationSectionCollection: ...
    @property
    def TargetFramework(self) -> FrameworkName: ...
    @property
    def TypeStringTransformer(self) -> Func: ...
    def GetSection(self, sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> ConfigurationSectionGroup: ...
    @overload
    def Save(self) -> None: ...
    @overload
    def Save(self, saveMode: ConfigurationSaveMode) -> None: ...
    @overload
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @overload
    def SaveAs(self, filename: str) -> None: ...
    @overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    @overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @AssemblyStringTransformer.setter
    def AssemblyStringTransformer(self, value: Func) -> None: ...
    @NamespaceDeclared.setter
    def NamespaceDeclared(self, value: bool) -> None: ...
    @TargetFramework.setter
    def TargetFramework(self, value: FrameworkName) -> None: ...
    @TypeStringTransformer.setter
    def TypeStringTransformer(self, value: Func) -> None: ...


class ConfigurationAllowDefinition:
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300


class ConfigurationAllowExeDefinition:
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300


class ConfigurationBuilder(ProviderBase):
    def ProcessConfigurationSection(self, configSection: ConfigurationSection) -> ConfigurationSection: ...
    def ProcessRawXml(self, rawXml: XmlNode) -> XmlNode: ...


class ConfigurationBuilderCollection(ProviderCollection):
    def __init__(self): ...
    def Add(self, builder: ProviderBase) -> None: ...
    @property
    def Item(self, name: str) -> ConfigurationBuilder: ...


class ConfigurationBuilderSettings(ConfigurationElement):
    def __init__(self): ...
    @property
    def Builders(self) -> ProviderSettingsCollection: ...


class ConfigurationBuildersSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def Builders(self) -> ProviderSettingsCollection: ...
    def GetBuilderFromName(self, builderName: str) -> ConfigurationBuilder: ...


class ConfigurationCollectionAttribute(Attribute):
    def __init__(self, itemType: Type): ...
    @property
    def AddItemName(self) -> str: ...
    @property
    def ClearItemsName(self) -> str: ...
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType: ...
    @property
    def ItemType(self) -> Type: ...
    @property
    def RemoveItemName(self) -> str: ...
    @AddItemName.setter
    def AddItemName(self, value: str) -> None: ...
    @ClearItemsName.setter
    def ClearItemsName(self, value: str) -> None: ...
    @CollectionType.setter
    def CollectionType(self, value: ConfigurationElementCollectionType) -> None: ...
    @RemoveItemName.setter
    def RemoveItemName(self, value: str) -> None: ...


class ConfigurationConverterBase(TypeConverter):
    @overload
    def CanConvertFrom(self, ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    @overload
    def CanConvertTo(self, ctx: ITypeDescriptorContext, type: Type) -> bool: ...


class ConfigurationElement(Object):
    def Equals(self, compareTo: Object) -> bool: ...
    @property
    def CurrentConfiguration(self) -> Configuration: ...
    @property
    def ElementInformation(self) -> ElementInformation: ...
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    @property
    def LockAttributes(self) -> ConfigurationLockCollection: ...
    @property
    def LockElements(self) -> ConfigurationLockCollection: ...
    @property
    def LockItem(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsReadOnly(self) -> bool: ...
    @LockItem.setter
    def LockItem(self, value: bool) -> None: ...


class ConfigurationElementCollection(ConfigurationElement):
    def CopyTo(self, array: Set(ConfigurationElement), index: int) -> None: ...
    def Equals(self, compareTo: Object) -> bool: ...
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType: ...
    @property
    def Count(self) -> int: ...
    @property
    def EmitClear(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetHashCode(self) -> int: ...
    def IsReadOnly(self) -> bool: ...
    @EmitClear.setter
    def EmitClear(self, value: bool) -> None: ...


class ConfigurationElementCollectionType:
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3


class ConfigurationElementProperty(Object):
    def __init__(self, validator: ConfigurationValidatorBase): ...
    @property
    def Validator(self) -> ConfigurationValidatorBase: ...


class ConfigurationErrorsException(ConfigurationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, message: str, node: XmlNode): ...
    @overload
    def __init__(self, message: str, reader: XmlReader): ...
    @overload
    def __init__(self, message: str, filename: str, line: int): ...
    @overload
    def __init__(self, message: str, inner: Exception, node: XmlNode): ...
    @overload
    def __init__(self, message: str, inner: Exception, reader: XmlReader): ...
    @overload
    def __init__(self, message: str, inner: Exception, filename: str, line: int): ...
    @property
    def BareMessage(self) -> str: ...
    @property
    def Errors(self) -> ICollection: ...
    @property
    def Filename(self) -> str: ...
    @property
    def Line(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @overload
    def GetFilename(reader: XmlReader) -> str: ...
    @overload
    def GetFilename(node: XmlNode) -> str: ...
    @overload
    def GetLineNumber(reader: XmlReader) -> int: ...
    @overload
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class ConfigurationFileMap(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, machineConfigFilename: str): ...
    def Clone(self) -> Object: ...
    @property
    def MachineConfigFilename(self) -> str: ...
    @MachineConfigFilename.setter
    def MachineConfigFilename(self, value: str) -> None: ...


class ConfigurationLocation(Object):
    @property
    def Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...


class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    @property
    def Item(self, index: int) -> ConfigurationLocation: ...


class ConfigurationLockCollection(Object):
    def Add(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: Set(str), index: int) -> None: ...
    @property
    def AttributeList(self) -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def HasParentElements(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def Remove(self, name: str) -> None: ...
    def SetFromList(self, attributeList: str) -> None: ...


class ConfigurationManager(Object):
    @property
    def AppSettings() -> NameValueCollection: ...
    @property
    def ConnectionStrings() -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Object: ...
    @overload
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    @overload
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMachineConfiguration() -> Configuration: ...
    @overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    @overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def RefreshSection(sectionName: str) -> None: ...


class ConfigurationPermission(CodeAccessPermission):
    def __init__(self, state: PermissionState): ...
    def Copy(self) -> IPermission: ...
    def FromXml(self, securityElement: SecurityElement) -> None: ...
    def Intersect(self, target: IPermission) -> IPermission: ...
    def IsSubsetOf(self, target: IPermission) -> bool: ...
    def IsUnrestricted(self) -> bool: ...
    def ToXml(self) -> SecurityElement: ...
    def Union(self, target: IPermission) -> IPermission: ...


class ConfigurationPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...


class ConfigurationProperty(Object):
    @overload
    def __init__(self, name: str, type: Type): ...
    @overload
    def __init__(self, name: str, type: Type, defaultValue: Object): ...
    @overload
    def __init__(self, name: str, type: Type, defaultValue: Object, options: ConfigurationPropertyOptions): ...
    @overload
    def __init__(self, name: str, type: Type, defaultValue: Object, typeConverter: TypeConverter, validator: ConfigurationValidatorBase, options: ConfigurationPropertyOptions): ...
    @overload
    def __init__(self, name: str, type: Type, defaultValue: Object, typeConverter: TypeConverter, validator: ConfigurationValidatorBase, options: ConfigurationPropertyOptions, description: str): ...
    @property
    def Converter(self) -> TypeConverter: ...
    @property
    def DefaultValue(self) -> Object: ...
    @property
    def Description(self) -> str: ...
    @property
    def IsAssemblyStringTransformationRequired(self) -> bool: ...
    @property
    def IsDefaultCollection(self) -> bool: ...
    @property
    def IsKey(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def IsTypeStringTransformationRequired(self) -> bool: ...
    @property
    def IsVersionCheckRequired(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @property
    def Validator(self) -> ConfigurationValidatorBase: ...


class ConfigurationPropertyAttribute(Attribute):
    def __init__(self, name: str): ...
    @property
    def DefaultValue(self) -> Object: ...
    @property
    def IsDefaultCollection(self) -> bool: ...
    @property
    def IsKey(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Options(self) -> ConfigurationPropertyOptions: ...
    @DefaultValue.setter
    def DefaultValue(self, value: Object) -> None: ...
    @IsDefaultCollection.setter
    def IsDefaultCollection(self, value: bool) -> None: ...
    @IsKey.setter
    def IsKey(self, value: bool) -> None: ...
    @IsRequired.setter
    def IsRequired(self, value: bool) -> None: ...
    @Options.setter
    def Options(self, value: ConfigurationPropertyOptions) -> None: ...


class ConfigurationPropertyCollection(Object):
    def __init__(self): ...
    def Add(self, property: ConfigurationProperty) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: Set(ConfigurationProperty), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, name: str) -> ConfigurationProperty: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, name: str) -> bool: ...


class ConfigurationPropertyOptions:
    #None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32


class ConfigurationSaveMode:
    Modified = 0
    Minimal = 1
    Full = 2


class ConfigurationSection(ConfigurationElement):
    @property
    def SectionInformation(self) -> SectionInformation: ...


class ConfigurationSectionCollection(NameObjectCollectionBase):
    def Add(self, name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: Set(ConfigurationSection), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, name: str) -> ConfigurationSection: ...
    @property
    def Item(self, index: int) -> ConfigurationSection: ...
    @property
    def Keys(self) -> KeysCollection: ...
    @overload
    def Get(self, index: int) -> ConfigurationSection: ...
    @overload
    def Get(self, name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class ConfigurationSectionGroup(Object):
    def __init__(self): ...
    @overload
    def ForceDeclaration(self) -> None: ...
    @overload
    def ForceDeclaration(self, force: bool) -> None: ...
    @property
    def IsDeclarationRequired(self) -> bool: ...
    @property
    def IsDeclared(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def SectionGroupName(self) -> str: ...
    @property
    def SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @property
    def Sections(self) -> ConfigurationSectionCollection: ...
    @property
    def Type(self) -> str: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    def Add(self, name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: Set(ConfigurationSectionGroup), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, name: str) -> ConfigurationSectionGroup: ...
    @property
    def Item(self, index: int) -> ConfigurationSectionGroup: ...
    @property
    def Keys(self) -> KeysCollection: ...
    @overload
    def Get(self, index: int) -> ConfigurationSectionGroup: ...
    @overload
    def Get(self, name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class ConfigurationUserLevel:
    #None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20


class ConfigurationValidatorAttribute(Attribute):
    def __init__(self, validator: Type): ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @property
    def ValidatorType(self) -> Type: ...


class ConfigurationValidatorBase(Object):
    def CanValidate(self, type: Type) -> bool: ...
    def Validate(self, value: Object) -> None: ...


class ConnectionStringSettings(ConfigurationElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, connectionString: str): ...
    @overload
    def __init__(self, name: str, connectionString: str, providerName: str): ...
    @property
    def ConnectionString(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def ProviderName(self) -> str: ...
    @ConnectionString.setter
    def ConnectionString(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ProviderName.setter
    def ProviderName(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, settings: ConnectionStringSettings) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, index: int) -> ConnectionStringSettings: ...
    @property
    def Item(self, name: str) -> ConnectionStringSettings: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> int: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ConnectionStringSettings) -> None: ...


class ConnectionStringsSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...


class ContextInformation(Object):
    @property
    def HostingContext(self) -> Object: ...
    @property
    def IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> Object: ...


class DefaultSection(ConfigurationSection):
    def __init__(self): ...


class DefaultValidator(ConfigurationValidatorBase):
    def __init__(self): ...
    def CanValidate(self, type: Type) -> bool: ...
    def Validate(self, value: Object) -> None: ...


class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    def __init__(self): ...
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    @property
    def UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: NameValueCollection) -> None: ...


class ElementInformation(Object):
    @property
    def Errors(self) -> ICollection: ...
    @property
    def IsCollection(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsPresent(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def Properties(self) -> PropertyInformationCollection: ...
    @property
    def Source(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @property
    def Validator(self) -> ConfigurationValidatorBase: ...


class ExeConfigurationFileMap(ConfigurationFileMap):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, machineConfigFileName: str): ...
    def Clone(self) -> Object: ...
    @property
    def ExeConfigFilename(self) -> str: ...
    @property
    def LocalUserConfigFilename(self) -> str: ...
    @property
    def RoamingUserConfigFilename(self) -> str: ...
    @ExeConfigFilename.setter
    def ExeConfigFilename(self, value: str) -> None: ...
    @LocalUserConfigFilename.setter
    def LocalUserConfigFilename(self, value: str) -> None: ...
    @RoamingUserConfigFilename.setter
    def RoamingUserConfigFilename(self, value: str) -> None: ...


class ExeContext(Object):
    @property
    def ExePath(self) -> str: ...
    @property
    def UserLevel(self) -> ConfigurationUserLevel: ...


class GenericEnumConverter(ConfigurationConverterBase):
    def __init__(self, typeEnum: Type): ...
    @overload
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...
    @overload
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...


class IgnoreSection(ConfigurationSection):
    def __init__(self): ...


class InfiniteIntConverter(ConfigurationConverterBase):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...
    @overload
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...


class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...
    @overload
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...


class IntegerValidator(ConfigurationValidatorBase):
    @overload
    def __init__(self, minValue: int, maxValue: int): ...
    @overload
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool): ...
    @overload
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool, resolution: int): ...
    def CanValidate(self, type: Type) -> bool: ...
    def Validate(self, value: Object) -> None: ...


class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self): ...
    @property
    def ExcludeRange(self) -> bool: ...
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @ExcludeRange.setter
    def ExcludeRange(self, value: bool) -> None: ...
    @MaxValue.setter
    def MaxValue(self, value: int) -> None: ...
    @MinValue.setter
    def MinValue(self, value: int) -> None: ...


class KeyValueConfigurationCollection(ConfigurationElementCollection):
    def __init__(self): ...
    @overload
    def Add(self, keyValue: KeyValueConfigurationElement) -> None: ...
    @overload
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    @property
    def AllKeys(self) -> Set(str): ...
    @property
    def Item(self, key: str) -> KeyValueConfigurationElement: ...
    def Remove(self, key: str) -> None: ...


class KeyValueConfigurationElement(ConfigurationElement):
    def __init__(self, key: str, value: str): ...
    @property
    def Key(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class LongValidator(ConfigurationValidatorBase):
    @overload
    def __init__(self, minValue: Int64, maxValue: Int64): ...
    @overload
    def __init__(self, minValue: Int64, maxValue: Int64, rangeIsExclusive: bool): ...
    @overload
    def __init__(self, minValue: Int64, maxValue: Int64, rangeIsExclusive: bool, resolution: Int64): ...
    def CanValidate(self, type: Type) -> bool: ...
    def Validate(self, value: Object) -> None: ...


class LongValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self): ...
    @property
    def ExcludeRange(self) -> bool: ...
    @property
    def MaxValue(self) -> Int64: ...
    @property
    def MinValue(self) -> Int64: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @ExcludeRange.setter
    def ExcludeRange(self, value: bool) -> None: ...
    @MaxValue.setter
    def MaxValue(self, value: Int64) -> None: ...
    @MinValue.setter
    def MinValue(self, value: Int64) -> None: ...


class NameValueConfigurationCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, nameValue: NameValueConfigurationElement) -> None: ...
    def Clear(self) -> None: ...
    @property
    def AllKeys(self) -> Set(str): ...
    @property
    def Item(self, name: str) -> NameValueConfigurationElement: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, nameValue: NameValueConfigurationElement) -> None: ...
    @Item.setter
    def Item(self, name: str, value: NameValueConfigurationElement) -> None: ...


class NameValueConfigurationElement(ConfigurationElement):
    def __init__(self, name: str, value: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class OverrideMode:
    Inherit = 0
    Allow = 1
    Deny = 2


class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def __init__(self): ...
    def CanValidate(self, type: Type) -> bool: ...
    def Validate(self, value: Object) -> None: ...


class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self): ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...


class PropertyInformation(Object):
    @property
    def Converter(self) -> TypeConverter: ...
    @property
    def DefaultValue(self) -> Object: ...
    @property
    def Description(self) -> str: ...
    @property
    def IsKey(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @property
    def Validator(self) -> ConfigurationValidatorBase: ...
    @property
    def Value(self) -> Object: ...
    @property
    def ValueOrigin(self) -> PropertyValueOrigin: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class PropertyInformationCollection(NameObjectCollectionBase):
    def CopyTo(self, array: Set(PropertyInformation), index: int) -> None: ...
    @property
    def Item(self, propertyName: str) -> PropertyInformation: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PropertyValueOrigin:
    Default = 0
    Inherited = 1
    SetHere = 2


class ProtectedConfiguration(Object):
    @property
    def DefaultProvider() -> str: ...
    @property
    def Providers() -> ProtectedConfigurationProviderCollection: ...


class ProtectedConfigurationProvider(ProviderBase):
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...


class ProtectedConfigurationProviderCollection(ProviderCollection):
    def __init__(self): ...
    def Add(self, provider: ProviderBase) -> None: ...
    @property
    def Item(self, name: str) -> ProtectedConfigurationProvider: ...


class ProtectedConfigurationSection(ConfigurationSection):
    def __init__(self): ...
    @property
    def DefaultProvider(self) -> str: ...
    @property
    def Providers(self) -> ProviderSettingsCollection: ...
    @DefaultProvider.setter
    def DefaultProvider(self, value: str) -> None: ...


class ProtectedProviderSettings(ConfigurationElement):
    def __init__(self): ...
    @property
    def Providers(self) -> ProviderSettingsCollection: ...


class ProviderSettings(ConfigurationElement):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, type: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> NameValueCollection: ...
    @property
    def Type(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class ProviderSettingsCollection(ConfigurationElementCollection):
    def __init__(self): ...
    def Add(self, provider: ProviderSettings) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, key: str) -> ProviderSettings: ...
    @property
    def Item(self, index: int) -> ProviderSettings: ...
    def Remove(self, name: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ProviderSettings) -> None: ...


class RegexStringValidator(ConfigurationValidatorBase):
    def __init__(self, regex: str): ...
    def CanValidate(self, type: Type) -> bool: ...
    def Validate(self, value: Object) -> None: ...


class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self, regex: str): ...
    @property
    def Regex(self) -> str: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...


class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    def __init__(self): ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def DeleteKey(self) -> None: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    @property
    def CspProviderName(self) -> str: ...
    @property
    def KeyContainerName(self) -> str: ...
    @property
    def RsaPublicKey(self) -> RSAParameters: ...
    @property
    def UseFIPS(self) -> bool: ...
    @property
    def UseMachineContainer(self) -> bool: ...
    @property
    def UseOAEP(self) -> bool: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def Initialize(self, name: str, configurationValues: NameValueCollection) -> None: ...


class SectionInformation(Object):
    @overload
    def ForceDeclaration(self) -> None: ...
    @overload
    def ForceDeclaration(self, force: bool) -> None: ...
    @property
    def AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    @property
    def AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    @property
    def AllowLocation(self) -> bool: ...
    @property
    def AllowOverride(self) -> bool: ...
    @property
    def ConfigSource(self) -> str: ...
    @property
    def ConfigurationBuilder(self) -> ConfigurationBuilder: ...
    @property
    def ForceSave(self) -> bool: ...
    @property
    def InheritInChildApplications(self) -> bool: ...
    @property
    def IsDeclarationRequired(self) -> bool: ...
    @property
    def IsDeclared(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsProtected(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def OverrideMode(self) -> OverrideMode: ...
    @property
    def OverrideModeDefault(self) -> OverrideMode: ...
    @property
    def OverrideModeEffective(self) -> OverrideMode: ...
    @property
    def ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    @property
    def RequirePermission(self) -> bool: ...
    @property
    def RestartOnExternalChanges(self) -> bool: ...
    @property
    def SectionName(self) -> str: ...
    @property
    def Type(self) -> str: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def RevertToParent(self) -> None: ...
    @AllowDefinition.setter
    def AllowDefinition(self, value: ConfigurationAllowDefinition) -> None: ...
    @AllowExeDefinition.setter
    def AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> None: ...
    @AllowLocation.setter
    def AllowLocation(self, value: bool) -> None: ...
    @AllowOverride.setter
    def AllowOverride(self, value: bool) -> None: ...
    @ConfigSource.setter
    def ConfigSource(self, value: str) -> None: ...
    @ForceSave.setter
    def ForceSave(self, value: bool) -> None: ...
    @InheritInChildApplications.setter
    def InheritInChildApplications(self, value: bool) -> None: ...
    @OverrideMode.setter
    def OverrideMode(self, value: OverrideMode) -> None: ...
    @OverrideModeDefault.setter
    def OverrideModeDefault(self, value: OverrideMode) -> None: ...
    @RequirePermission.setter
    def RequirePermission(self, value: bool) -> None: ...
    @RestartOnExternalChanges.setter
    def RestartOnExternalChanges(self, value: bool) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def UnprotectSection(self) -> None: ...


class StringValidator(ConfigurationValidatorBase):
    @overload
    def __init__(self, minLength: int): ...
    @overload
    def __init__(self, minLength: int, maxLength: int): ...
    @overload
    def __init__(self, minLength: int, maxLength: int, invalidCharacters: str): ...
    def CanValidate(self, type: Type) -> bool: ...
    def Validate(self, value: Object) -> None: ...


class StringValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self): ...
    @property
    def InvalidCharacters(self) -> str: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def MinLength(self) -> int: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @InvalidCharacters.setter
    def InvalidCharacters(self, value: str) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @MinLength.setter
    def MinLength(self, value: int) -> None: ...


class SubclassTypeValidator(ConfigurationValidatorBase):
    def __init__(self, baseClass: Type): ...
    def CanValidate(self, type: Type) -> bool: ...
    def Validate(self, value: Object) -> None: ...


class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self, baseClass: Type): ...
    @property
    def BaseClass(self) -> Type: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...


class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...
    @overload
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...


class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...
    @overload
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...


class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...
    @overload
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...


class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...
    @overload
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...


class TimeSpanValidator(ConfigurationValidatorBase):
    @overload
    def __init__(self, minValue: TimeSpan, maxValue: TimeSpan): ...
    @overload
    def __init__(self, minValue: TimeSpan, maxValue: TimeSpan, rangeIsExclusive: bool): ...
    @overload
    def __init__(self, minValue: TimeSpan, maxValue: TimeSpan, rangeIsExclusive: bool, resolutionInSeconds: Int64): ...
    def CanValidate(self, type: Type) -> bool: ...
    def Validate(self, value: Object) -> None: ...


class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self): ...
    @property
    def ExcludeRange(self) -> bool: ...
    @property
    def MaxValue(self) -> TimeSpan: ...
    @property
    def MaxValueString(self) -> str: ...
    @property
    def MinValue(self) -> TimeSpan: ...
    @property
    def MinValueString(self) -> str: ...
    @property
    def ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    @ExcludeRange.setter
    def ExcludeRange(self, value: bool) -> None: ...
    @MaxValueString.setter
    def MaxValueString(self, value: str) -> None: ...
    @MinValueString.setter
    def MinValueString(self, value: str) -> None: ...


class TypeNameConverter(ConfigurationConverterBase):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...
    @overload
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...


class ValidatorCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, value: Object) -> None: ...


class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...
    @overload
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
