from typing import Tuple, Set, Iterable, List


class DelegatingConfigHost(Object):
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Object: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Object: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    @property
    def IsRemote(self) -> bool: ...
    @property
    def SupportsChangeNotifications(self) -> bool: ...
    @property
    def SupportsLocation(self) -> bool: ...
    @property
    def SupportsPath(self) -> bool: ...
    @property
    def SupportsRefresh(self) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> str: ...
    def GetRestrictedPermissions(self, configRecord: IInternalConfigRecord) -> Tuple[PermissionSet, bool]: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Object: ...
    def Impersonate(self) -> IDisposable: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Set(Object)) -> None: ...
    def InitForConfiguration(self, locationSubPath: str, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Set(Object)) -> Tuple[str, str, str]: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def IsFile(self, streamName: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    @overload
    def OpenStreamForRead(self, streamName: str) -> Stream: ...
    @overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> Stream: ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: Object) -> Tuple[Stream, Object]: ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: Object, assertPermissions: bool) -> Tuple[Stream, Object]: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def ProcessConfigurationSection(self, configSection: ConfigurationSection, builder: ConfigurationBuilder) -> ConfigurationSection: ...
    def ProcessRawXml(self, rawXml: XmlNode, builder: ConfigurationBuilder) -> XmlNode: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Object) -> None: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Object, assertPermissions: bool) -> None: ...


class IConfigErrorInfo:
    @property
    def Filename(self) -> str: ...
    @property
    def LineNumber(self) -> int: ...


class IConfigSystem:
    @property
    def Host(self) -> IInternalConfigHost: ...
    @property
    def Root(self) -> IInternalConfigRoot: ...
    def Init(self, typeConfigHost: Type, hostInitParams: Set(Object)) -> None: ...


class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...


class IConfigurationManagerInternal:
    @property
    def ApplicationConfigUri(self) -> str: ...
    @property
    def ExeLocalConfigDirectory(self) -> str: ...
    @property
    def ExeLocalConfigPath(self) -> str: ...
    @property
    def ExeProductName(self) -> str: ...
    @property
    def ExeProductVersion(self) -> str: ...
    @property
    def ExeRoamingConfigDirectory(self) -> str: ...
    @property
    def ExeRoamingConfigPath(self) -> str: ...
    @property
    def MachineConfigPath(self) -> str: ...
    @property
    def SetConfigurationSystemInProgress(self) -> bool: ...
    @property
    def SupportsUserConfig(self) -> bool: ...
    @property
    def UserConfigFilename(self) -> str: ...


class IInternalConfigClientHost:
    def GetExeConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...


class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: Type, hostInitConfigurationParams: Set(Object)) -> Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: IConfigErrorInfo) -> str: ...


class IInternalConfigHost:
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Object: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Object: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    @property
    def IsRemote(self) -> bool: ...
    @property
    def SupportsChangeNotifications(self) -> bool: ...
    @property
    def SupportsLocation(self) -> bool: ...
    @property
    def SupportsPath(self) -> bool: ...
    @property
    def SupportsRefresh(self) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> str: ...
    def GetRestrictedPermissions(self, configRecord: IInternalConfigRecord) -> Tuple[PermissionSet, bool]: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Object: ...
    def Impersonate(self) -> IDisposable: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Set(Object)) -> None: ...
    def InitForConfiguration(self, locationSubPath: str, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Set(Object)) -> Tuple[str, str, str]: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def IsFile(self, streamName: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    @overload
    def OpenStreamForRead(self, streamName: str) -> Stream: ...
    @overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> Stream: ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: Object) -> Tuple[Stream, Object]: ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: Object, assertPermissions: bool) -> Tuple[Stream, Object]: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Object) -> None: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Object, assertPermissions: bool) -> None: ...


class IInternalConfigRecord:
    @property
    def ConfigPath(self) -> str: ...
    @property
    def HasInitErrors(self) -> bool: ...
    @property
    def StreamName(self) -> str: ...
    def GetLkgSection(self, configKey: str) -> Object: ...
    def GetSection(self, configKey: str) -> Object: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...
    def ThrowIfInitErrors(self) -> None: ...


class IInternalConfigRoot:
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    @property
    def IsDesignTime(self) -> bool: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetSection(self, section: str, configPath: str) -> Object: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def Init(self, host: IInternalConfigHost, isDesignTime: bool) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def RemoveConfig(self, configPath: str) -> None: ...


class IInternalConfigSettingsFactory:
    def CompleteInit(self) -> None: ...
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: bool) -> None: ...


class IInternalConfigSystem:
    @property
    def SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> Object: ...
    def RefreshConfig(self, sectionName: str) -> None: ...


class IInternalConfigurationBuilderHost:
    def ProcessConfigurationSection(self, configSection: ConfigurationSection, builder: ConfigurationBuilder) -> ConfigurationSection: ...
    def ProcessRawXml(self, rawXml: XmlNode, builder: ConfigurationBuilder) -> XmlNode: ...


class InternalConfigEventArgs(EventArgs):
    def __init__(self, configPath: str): ...
    @property
    def ConfigPath(self) -> str: ...
    @ConfigPath.setter
    def ConfigPath(self, value: str) -> None: ...


class InternalConfigEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: InternalConfigEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: InternalConfigEventArgs) -> None: ...


class StreamChangeCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, streamName: str, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, streamName: str) -> None: ...
