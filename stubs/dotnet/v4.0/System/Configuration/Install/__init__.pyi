from typing import Tuple, Set, Iterable, List


class AssemblyInstaller(Installer):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, fileName: str, commandLine: Set(str)): ...
    @overload
    def __init__(self, assembly: Assembly, commandLine: Set(str)): ...
    def CheckIfInstallable(assemblyName: str) -> None: ...
    def Commit(self, savedState: IDictionary) -> None: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def CommandLine(self) -> Set(str): ...
    @property
    def HelpText(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def UseNewContext(self) -> bool: ...
    def Install(self, savedState: IDictionary) -> None: ...
    def Rollback(self, savedState: IDictionary) -> None: ...
    @Assembly.setter
    def Assembly(self, value: Assembly) -> None: ...
    @CommandLine.setter
    def CommandLine(self, value: Set(str)) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @UseNewContext.setter
    def UseNewContext(self, value: bool) -> None: ...
    def Uninstall(self, savedState: IDictionary) -> None: ...


class ComponentInstaller(Installer):
    def CopyFromComponent(self, component: IComponent) -> None: ...
    def IsEquivalentInstaller(self, otherInstaller: ComponentInstaller) -> bool: ...


class IManagedInstaller:
    def ManagedInstall(self, commandLine: str, hInstall: int) -> int: ...


class InstallContext(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, logFilePath: str, commandLine: Set(str)): ...
    @property
    def Parameters(self) -> StringDictionary: ...
    def IsParameterTrue(self, paramName: str) -> bool: ...
    def LogMessage(self, message: str) -> None: ...


class Installer(Component):
    def __init__(self): ...
    def add_AfterInstall(self, value: InstallEventHandler) -> None: ...
    def add_AfterRollback(self, value: InstallEventHandler) -> None: ...
    def add_AfterUninstall(self, value: InstallEventHandler) -> None: ...
    def add_BeforeInstall(self, value: InstallEventHandler) -> None: ...
    def add_BeforeRollback(self, value: InstallEventHandler) -> None: ...
    def add_BeforeUninstall(self, value: InstallEventHandler) -> None: ...
    def add_Committed(self, value: InstallEventHandler) -> None: ...
    def add_Committing(self, value: InstallEventHandler) -> None: ...
    def Commit(self, savedState: IDictionary) -> None: ...
    @property
    def Context(self) -> InstallContext: ...
    @property
    def HelpText(self) -> str: ...
    @property
    def Installers(self) -> InstallerCollection: ...
    @property
    def Parent(self) -> Installer: ...
    def Install(self, stateSaver: IDictionary) -> None: ...
    def remove_AfterInstall(self, value: InstallEventHandler) -> None: ...
    def remove_AfterRollback(self, value: InstallEventHandler) -> None: ...
    def remove_AfterUninstall(self, value: InstallEventHandler) -> None: ...
    def remove_BeforeInstall(self, value: InstallEventHandler) -> None: ...
    def remove_BeforeRollback(self, value: InstallEventHandler) -> None: ...
    def remove_BeforeUninstall(self, value: InstallEventHandler) -> None: ...
    def remove_Committed(self, value: InstallEventHandler) -> None: ...
    def remove_Committing(self, value: InstallEventHandler) -> None: ...
    def Rollback(self, savedState: IDictionary) -> None: ...
    @Context.setter
    def Context(self, value: InstallContext) -> None: ...
    @Parent.setter
    def Parent(self, value: Installer) -> None: ...
    def Uninstall(self, savedState: IDictionary) -> None: ...


class InstallerCollection(CollectionBase):
    def Add(self, value: Installer) -> int: ...
    @overload
    def AddRange(self, value: InstallerCollection) -> None: ...
    @overload
    def AddRange(self, value: Set(Installer)) -> None: ...
    def Contains(self, value: Installer) -> bool: ...
    def CopyTo(self, array: Set(Installer), index: int) -> None: ...
    @property
    def Item(self, index: int) -> Installer: ...
    def IndexOf(self, value: Installer) -> int: ...
    def Insert(self, index: int, value: Installer) -> None: ...
    def Remove(self, value: Installer) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Installer) -> None: ...


class InstallEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, savedState: IDictionary): ...
    @property
    def SavedState(self) -> IDictionary: ...


class InstallEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: InstallEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: InstallEventArgs) -> None: ...


class InstallException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ManagedInstallerClass(Object):
    def __init__(self): ...
    def InstallHelper(args: Set(str)) -> None: ...


class TransactedInstaller(Installer):
    def __init__(self): ...
    def Install(self, savedState: IDictionary) -> None: ...
    def Uninstall(self, savedState: IDictionary) -> None: ...


class UninstallAction:
    Remove = 0
    NoAction = 1
