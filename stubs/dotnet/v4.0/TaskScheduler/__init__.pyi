from typing import Tuple, Set, Iterable, List


class _TASK_ACTION_TYPE:
    TASK_ACTION_EXEC = 0
    TASK_ACTION_COM_HANDLER = 5
    TASK_ACTION_SEND_EMAIL = 6
    TASK_ACTION_SHOW_MESSAGE = 7


class _TASK_INSTANCES_POLICY:
    TASK_INSTANCES_PARALLEL = 0
    TASK_INSTANCES_QUEUE = 1
    TASK_INSTANCES_IGNORE_NEW = 2
    TASK_INSTANCES_STOP_EXISTING = 3


class _TASK_LOGON_TYPE:
    TASK_LOGON_NONE = 0
    TASK_LOGON_PASSWORD = 1
    TASK_LOGON_S4U = 2
    TASK_LOGON_INTERACTIVE_TOKEN = 3
    TASK_LOGON_GROUP = 4
    TASK_LOGON_SERVICE_ACCOUNT = 5
    TASK_LOGON_INTERACTIVE_TOKEN_OR_PASSWORD = 6


class _TASK_RUNLEVEL:
    TASK_RUNLEVEL_LUA = 0
    TASK_RUNLEVEL_HIGHEST = 1


class _TASK_TRIGGER_TYPE2:
    TASK_TRIGGER_EVENT = 0
    TASK_TRIGGER_TIME = 1
    TASK_TRIGGER_DAILY = 2
    TASK_TRIGGER_WEEKLY = 3
    TASK_TRIGGER_MONTHLY = 4
    TASK_TRIGGER_MONTHLYDOW = 5
    TASK_TRIGGER_IDLE = 6
    TASK_TRIGGER_REGISTRATION = 7
    TASK_TRIGGER_BOOT = 8
    TASK_TRIGGER_LOGON = 9
    TASK_TRIGGER_SESSION_STATE_CHANGE = 11
    TASK_TRIGGER_CUSTOM_TRIGGER_01 = 12


class IAction:
    pass


class IActionCollection:
    def Clear(self) -> None: ...
    def Create(self, Type: _TASK_ACTION_TYPE) -> IAction: ...


class IBootTrigger:
    @property
    def Delay(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Id(self) -> str: ...
    @Delay.setter
    def Delay(self, pDelay: str) -> None: ...
    @Enabled.setter
    def Enabled(self, pEnabled: bool) -> None: ...
    @Id.setter
    def Id(self, pId: str) -> None: ...


class IDailyTrigger:
    @property
    def DaysInterval(self) -> Int16: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Id(self) -> str: ...
    @property
    def RandomDelay(self) -> str: ...
    @property
    def StartBoundary(self) -> str: ...
    @DaysInterval.setter
    def DaysInterval(self, pDays: Int16) -> None: ...
    @Enabled.setter
    def Enabled(self, pEnabled: bool) -> None: ...
    @Id.setter
    def Id(self, pId: str) -> None: ...
    @RandomDelay.setter
    def RandomDelay(self, pRandomDelay: str) -> None: ...
    @StartBoundary.setter
    def StartBoundary(self, pStart: str) -> None: ...


class IExecAction:
    @property
    def Arguments(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @Arguments.setter
    def Arguments(self, pArgument: str) -> None: ...
    @Id.setter
    def Id(self, pId: str) -> None: ...
    @Path.setter
    def Path(self, pPath: str) -> None: ...


class IIdleSettings:
    @property
    def IdleDuration(self) -> str: ...
    @property
    def RestartOnIdle(self) -> bool: ...
    @property
    def StopOnIdleEnd(self) -> bool: ...
    @property
    def WaitTimeout(self) -> str: ...
    @IdleDuration.setter
    def IdleDuration(self, pDelay: str) -> None: ...
    @RestartOnIdle.setter
    def RestartOnIdle(self, pRestart: bool) -> None: ...
    @StopOnIdleEnd.setter
    def StopOnIdleEnd(self, pStop: bool) -> None: ...
    @WaitTimeout.setter
    def WaitTimeout(self, pTimeout: str) -> None: ...


class ILogonTrigger:
    @property
    def Delay(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Id(self) -> str: ...
    @property
    def UserId(self) -> str: ...
    @Delay.setter
    def Delay(self, pDelay: str) -> None: ...
    @Enabled.setter
    def Enabled(self, pEnabled: bool) -> None: ...
    @Id.setter
    def Id(self, pId: str) -> None: ...
    @UserId.setter
    def UserId(self, pUser: str) -> None: ...


class IPrincipal:
    @property
    def RunLevel(self) -> _TASK_RUNLEVEL: ...
    @RunLevel.setter
    def RunLevel(self, pRunLevel: _TASK_RUNLEVEL) -> None: ...


class IRegisteredTask:
    @property
    def Definition(self) -> ITaskDefinition: ...
    @property
    def Path(self) -> str: ...
    def GetInstances(self, flags: int) -> IRunningTaskCollection: ...
    def Run(self, params: Object) -> IRunningTask: ...
    def Stop(self, flags: int) -> None: ...


class IRepetitionPattern:
    @property
    def Duration(self) -> str: ...
    @property
    def Interval(self) -> str: ...
    @property
    def StopAtDurationEnd(self) -> bool: ...
    @Duration.setter
    def Duration(self, pDuration: str) -> None: ...
    @Interval.setter
    def Interval(self, pInterval: str) -> None: ...
    @StopAtDurationEnd.setter
    def StopAtDurationEnd(self, pStop: bool) -> None: ...


class IRunningTask:
    @property
    def InstanceGuid(self) -> str: ...


class IRunningTaskCollection:
    @property
    def Count(self) -> int: ...


class ITaskDefinition:
    @property
    def Actions(self) -> IActionCollection: ...
    @property
    def Principal(self) -> IPrincipal: ...
    @property
    def Settings(self) -> ITaskSettings: ...
    @property
    def Triggers(self) -> ITriggerCollection: ...
    @Actions.setter
    def Actions(self, ppActions: IActionCollection) -> None: ...
    @Principal.setter
    def Principal(self, ppPrincipal: IPrincipal) -> None: ...
    @Settings.setter
    def Settings(self, ppSettings: ITaskSettings) -> None: ...
    @Triggers.setter
    def Triggers(self, ppTriggers: ITriggerCollection) -> None: ...


class ITaskFolder:
    def CreateFolder(self, subFolderName: str, sddl: Object) -> ITaskFolder: ...
    def DeleteTask(self, Name: str, flags: int) -> None: ...
    @property
    def Path(self) -> str: ...
    def GetTask(self, Path: str) -> IRegisteredTask: ...
    def RegisterTaskDefinition(self, Path: str, pDefinition: ITaskDefinition, flags: int, UserId: Object, password: Object, LogonType: _TASK_LOGON_TYPE, sddl: Object) -> IRegisteredTask: ...


class ITaskService:
    def Connect(self, serverName: Object, user: Object, domain: Object, password: Object) -> None: ...
    @property
    def TargetServer(self) -> str: ...
    def GetFolder(self, Path: str) -> ITaskFolder: ...
    def NewTask(self, flags: UInt32) -> ITaskDefinition: ...


class ITaskSettings:
    @property
    def AllowDemandStart(self) -> bool: ...
    @property
    def DisallowStartIfOnBatteries(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def IdleSettings(self) -> IIdleSettings: ...
    @property
    def MultipleInstances(self) -> _TASK_INSTANCES_POLICY: ...
    @property
    def RunOnlyIfIdle(self) -> bool: ...
    @property
    def RunOnlyIfNetworkAvailable(self) -> bool: ...
    @property
    def StopIfGoingOnBatteries(self) -> bool: ...
    @property
    def WakeToRun(self) -> bool: ...
    @AllowDemandStart.setter
    def AllowDemandStart(self, pAllowDemandStart: bool) -> None: ...
    @DisallowStartIfOnBatteries.setter
    def DisallowStartIfOnBatteries(self, pDisallowStart: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, pEnabled: bool) -> None: ...
    @Hidden.setter
    def Hidden(self, pHidden: bool) -> None: ...
    @IdleSettings.setter
    def IdleSettings(self, ppIdleSettings: IIdleSettings) -> None: ...
    @MultipleInstances.setter
    def MultipleInstances(self, pPolicy: _TASK_INSTANCES_POLICY) -> None: ...
    @RunOnlyIfIdle.setter
    def RunOnlyIfIdle(self, pRunOnlyIfIdle: bool) -> None: ...
    @RunOnlyIfNetworkAvailable.setter
    def RunOnlyIfNetworkAvailable(self, pRunOnlyIfNetworkAvailable: bool) -> None: ...
    @StopIfGoingOnBatteries.setter
    def StopIfGoingOnBatteries(self, pStopIfOnBatteries: bool) -> None: ...
    @WakeToRun.setter
    def WakeToRun(self, pWake: bool) -> None: ...


class ITimeTrigger:
    @property
    def Enabled(self) -> bool: ...
    @property
    def Id(self) -> str: ...
    @property
    def RandomDelay(self) -> str: ...
    @property
    def Repetition(self) -> IRepetitionPattern: ...
    @property
    def StartBoundary(self) -> str: ...
    @Enabled.setter
    def Enabled(self, pEnabled: bool) -> None: ...
    @Id.setter
    def Id(self, pId: str) -> None: ...
    @RandomDelay.setter
    def RandomDelay(self, pRandomDelay: str) -> None: ...
    @Repetition.setter
    def Repetition(self, ppRepeat: IRepetitionPattern) -> None: ...
    @StartBoundary.setter
    def StartBoundary(self, pStart: str) -> None: ...


class ITrigger:
    @property
    def Enabled(self) -> bool: ...
    @property
    def Id(self) -> str: ...
    @property
    def StartBoundary(self) -> str: ...
    @Enabled.setter
    def Enabled(self, pEnabled: bool) -> None: ...
    @Id.setter
    def Id(self, pId: str) -> None: ...
    @StartBoundary.setter
    def StartBoundary(self, pStart: str) -> None: ...


class ITriggerCollection:
    def Clear(self) -> None: ...
    def Create(self, Type: _TASK_TRIGGER_TYPE2) -> ITrigger: ...
    def GetEnumerator(self) -> IEnumerator: ...


class IWeeklyTrigger:
    @property
    def DaysOfWeek(self) -> Int16: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Id(self) -> str: ...
    @property
    def RandomDelay(self) -> str: ...
    @property
    def StartBoundary(self) -> str: ...
    @property
    def WeeksInterval(self) -> Int16: ...
    @DaysOfWeek.setter
    def DaysOfWeek(self, pDays: Int16) -> None: ...
    @Enabled.setter
    def Enabled(self, pEnabled: bool) -> None: ...
    @Id.setter
    def Id(self, pId: str) -> None: ...
    @RandomDelay.setter
    def RandomDelay(self, pRandomDelay: str) -> None: ...
    @StartBoundary.setter
    def StartBoundary(self, pStart: str) -> None: ...
    @WeeksInterval.setter
    def WeeksInterval(self, pWeeks: Int16) -> None: ...


class TaskScheduler:
    pass
