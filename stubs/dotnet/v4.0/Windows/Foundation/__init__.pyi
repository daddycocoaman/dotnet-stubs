from typing import Tuple, Set, Iterable, List


class Point:
    def __init__(self, x: float, y: float): ...
    @overload
    def Equals(self, o: Object) -> bool: ...
    @overload
    def Equals(self, value: Point) -> bool: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(point1: Point, point2: Point) -> bool: ...
    def op_Inequality(point1: Point, point2: Point) -> bool: ...
    @X.setter
    def X(self, value: float) -> None: ...
    @Y.setter
    def Y(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...


class Rect:
    @overload
    def __init__(self, point1: Point, point2: Point): ...
    @overload
    def __init__(self, location: Point, size: Size): ...
    @overload
    def __init__(self, x: float, y: float, width: float, height: float): ...
    def Contains(self, point: Point) -> bool: ...
    @overload
    def Equals(self, o: Object) -> bool: ...
    @overload
    def Equals(self, value: Rect) -> bool: ...
    @property
    def Bottom(self) -> float: ...
    @property
    def Empty() -> Rect: ...
    @property
    def Height(self) -> float: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Left(self) -> float: ...
    @property
    def Right(self) -> float: ...
    @property
    def Top(self) -> float: ...
    @property
    def Width(self) -> float: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def Intersect(self, rect: Rect) -> None: ...
    def op_Equality(rect1: Rect, rect2: Rect) -> bool: ...
    def op_Inequality(rect1: Rect, rect2: Rect) -> bool: ...
    @Height.setter
    def Height(self, value: float) -> None: ...
    @Width.setter
    def Width(self, value: float) -> None: ...
    @X.setter
    def X(self, value: float) -> None: ...
    @Y.setter
    def Y(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def Union(self, rect: Rect) -> None: ...
    @overload
    def Union(self, point: Point) -> None: ...


class Size:
    def __init__(self, width: float, height: float): ...
    @overload
    def Equals(self, o: Object) -> bool: ...
    @overload
    def Equals(self, value: Size) -> bool: ...
    @property
    def Empty() -> Size: ...
    @property
    def Height(self) -> float: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Width(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(size1: Size, size2: Size) -> bool: ...
    def op_Inequality(size1: Size, size2: Size) -> bool: ...
    @Height.setter
    def Height(self, value: float) -> None: ...
    @Width.setter
    def Width(self, value: float) -> None: ...
    def ToString(self) -> str: ...
