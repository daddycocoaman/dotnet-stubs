from typing import Tuple, Set, Iterable, List


class ComIServiceProvider:
    def QueryService(self, guidService: Guid, riid: Guid) -> Tuple[Guid, Guid, Object]: ...


class GetWindowsSearchSettingCommand:
    def __init__(self): ...


class ISettingsManager:
    def AddSettingChanged(self, handler: Object, token: Object) -> Tuple[int, Object, Object]: ...
    def DeleteSearchHistory(self) -> int: ...
    def GetICP(self, title: str) -> Tuple[int, str]: ...
    def GetImpressum(self, title: str, link: str) -> Tuple[int, str, str]: ...
    def GetLocationAwarenessSetting(self, locationAwareness: bool, settingsEnforcementLevel: int) -> Tuple[int, bool, int]: ...
    def GetPreferDomain(self, preferDomain: str) -> Tuple[int, str]: ...
    def GetSafeSearchSetting(self, safeSearchLevel: int, settingsEnforcementLevel: int) -> Tuple[int, int, int]: ...
    def GetSearchOnMeteredConnectionEvenWhenRoamingSetting(self, useSearchOnMeteredConnectionEvenWhenRoaming: bool, settingsEnforcementLevel: int) -> Tuple[int, bool, int]: ...
    def GetSearchOnMeteredConnectionSetting(self, useSearchOnMeteredConnection: bool, settingsEnforcementLevel: int) -> Tuple[int, bool, int]: ...
    def GetSearchPrivacySetting(self, sharePrivacyLevel: int, settingsEnforcementLevel: int) -> Tuple[int, int, int]: ...
    def GetShareSearchHistorySetting(self, shareSearchHistory: bool, settingsEnforcementLevel: int) -> Tuple[int, bool, int]: ...
    def GetTermsOfUse(self, link: str) -> Tuple[int, str]: ...
    def GetUseConnectedSearchSetting(self, useConnectedSearch: bool, settingsEnforcementLevel: int) -> Tuple[int, bool, int]: ...
    def ProcessPreferDomainHeader(self, preferDomainHeader: str) -> int: ...
    def RemoveSettingChanged(self, token: Object) -> int: ...
    def ResetDomain(self) -> int: ...
    def SetLocationAwarenessSetting(self, locationAwareness: bool) -> int: ...
    def SetSafeSearchSetting(self, safeSearchLevel: int) -> int: ...
    def SetSearchOnMeteredConnectionEvenWhenRoamingSetting(self, searchOnMeteredConnectionEvenWhenRoaming: bool) -> int: ...
    def SetSearchOnMeteredConnectionSetting(self, searchOnMeteredConnection: bool) -> int: ...
    def SetSearchPrivacySetting(self, searchPrivacyLevel: int) -> int: ...
    def SetShareSearchHistorySetting(self, shareSearchHistory: bool) -> int: ...
    def SetUseConnectedSearchSetting(self, useConnectedSearch: bool) -> int: ...
    def ShouldBlockWeb(self, shouldBlockWeb: bool) -> Tuple[int, bool]: ...
    def WebBlockedByPolicy(self, webBlockedByPolicy: bool) -> Tuple[int, bool]: ...


class NativeMethods:
    def __init__(self): ...


class PrintSetting:
    def __init__(self, setting: str, value: str): ...
    @property
    def Setting(self) -> str: ...
    @property
    def Value(self) -> str: ...


class Resources:
    def EnsureSettingsManagerInitialized() -> int: ...


class SETTINGS_ENFORCEMENT_LEVEL:
    ENFORCEMENT_DEFAULT = 0
    ENFORCEMENT_USER = 1
    ENFORCEMENT_LOCATION_LEGACY_GROUPPOLICY = 2
    ENFORCEMENT_LOCATION_CLASSIC_CONTROL_PANEL = 3
    ENFORCEMENT_LOCATION_MOSET = 4
    ENFORCEMENT_GROUPPOLICY = 5
    ENFORCEMENT_FAMILYSAFETY = 6


class SetWindowsSearchSettingCommand:
    def __init__(self): ...
    @property
    def EnableMeteredWebResultsSetting(self) -> bool: ...
    @property
    def EnableWebResultsSetting(self) -> bool: ...
    @property
    def SafeSearchSetting(self) -> str: ...
    @property
    def SearchExperienceSetting(self) -> str: ...
    @EnableMeteredWebResultsSetting.setter
    def EnableMeteredWebResultsSetting(self, value: bool) -> None: ...
    @EnableWebResultsSetting.setter
    def EnableWebResultsSetting(self, value: bool) -> None: ...
    @SafeSearchSetting.setter
    def SafeSearchSetting(self, value: str) -> None: ...
    @SearchExperienceSetting.setter
    def SearchExperienceSetting(self, value: str) -> None: ...


class WindowsSafeSearchSettingEnum:
    Strict = 1
    Moderate = 2
    Off = 3


class WindowsSearchPrivacyLevelEnum:
    All = 1
    AllButLocation = 2
    #None = 3
