from typing import Tuple, Set, Iterable, List


class AuthenticodeTrustedPublishers(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, issuedTo: str): ...
    @property
    def IssuedTo(self) -> str: ...
    @IssuedTo.setter
    def IssuedTo(self, value: str) -> None: ...


class BitmapPathsSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, ieakObject: ManagementObject): ...
    @property
    def LargeAnimatedBitmapPath(self) -> str: ...
    @property
    def LargeLogoBitmapPath(self) -> str: ...
    @property
    def SmallAnimatedBitmapPath(self) -> str: ...
    @property
    def SmallLogoBitmapPath(self) -> str: ...
    def Initialize(self, largeLogoBitmapPath: str, smallLogoBitmapPath: str, largeAnimatedBitmapPath: str, smallAnimatedBitmapPath: str) -> None: ...
    @LargeAnimatedBitmapPath.setter
    def LargeAnimatedBitmapPath(self, value: str) -> None: ...
    @LargeLogoBitmapPath.setter
    def LargeLogoBitmapPath(self, value: str) -> None: ...
    @SmallAnimatedBitmapPath.setter
    def SmallAnimatedBitmapPath(self, value: str) -> None: ...
    @SmallLogoBitmapPath.setter
    def SmallLogoBitmapPath(self, value: str) -> None: ...


class BooleanSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: bool): ...
    @overload
    def __init__(self, value: bool, ieakObject: ManagementObject): ...
    @property
    def Value(self) -> bool: ...
    @Value.setter
    def Value(self, value: bool) -> None: ...


class BrowserAutoConfigSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, urlSection: IniSection): ...
    @overload
    def __init__(self, browserAutoConfigObjects: ArrayList, ieakPolicyObjects: ArrayList): ...
    def ContainSettings(self) -> bool: ...
    @property
    def ConfigTime(self) -> UInt32: ...
    @property
    def ConfigTimeSpecified(self) -> bool: ...
    @property
    def ConfigURL(self) -> str: ...
    @property
    def ProxyURL(self) -> str: ...
    @ConfigTime.setter
    def ConfigTime(self, value: UInt32) -> None: ...
    @ConfigTimeSpecified.setter
    def ConfigTimeSpecified(self, value: bool) -> None: ...
    @ConfigURL.setter
    def ConfigURL(self, value: str) -> None: ...
    @ProxyURL.setter
    def ProxyURL(self, value: str) -> None: ...


class BrowserTitleSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, browserText: str): ...
    @overload
    def __init__(self, browserText: str, ieakObject: ManagementObject): ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class ConnectionSettings(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, connectionSection: IniSection): ...
    @overload
    def __init__(self, connectionObjects: ArrayList, ieakPolicyObjects: ArrayList): ...
    def ContainSettings(self) -> bool: ...
    @property
    def ConnectionNames(self) -> ArrayList: ...
    @property
    def DefaultConnectionName(self) -> str: ...
    @property
    def DeleteExistingConnectionSettings(self) -> bool: ...
    @property
    def DeleteExistingConnectionSettingsSpecified(self) -> bool: ...
    @property
    def DialupState(self) -> DialupType: ...
    @ConnectionNames.setter
    def ConnectionNames(self, value: ArrayList) -> None: ...
    @DefaultConnectionName.setter
    def DefaultConnectionName(self, value: str) -> None: ...
    @DeleteExistingConnectionSettings.setter
    def DeleteExistingConnectionSettings(self, value: bool) -> None: ...
    @DeleteExistingConnectionSettingsSpecified.setter
    def DeleteExistingConnectionSettingsSpecified(self, value: bool) -> None: ...
    @DialupState.setter
    def DialupState(self, value: DialupType) -> None: ...


class CookieAction:
    Accept = 0
    Block = 1
    Prompt = 2


class CustomZoneSetting:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, settingID: UInt32, settingValue: UInt32): ...
    @property
    def Name(self) -> CustomZoneSettingNames: ...
    @property
    def Value(self) -> CustomZoneSettingValues: ...
    def IsRecognizedSetting(settingID: UInt32) -> bool: ...
    @Name.setter
    def Name(self, value: CustomZoneSettingNames) -> None: ...
    @Value.setter
    def Value(self, value: CustomZoneSettingValues) -> None: ...


class CustomZoneSettingNames:
    #None = 0
    DownloadSignedActiveXControl = 4097
    DownloadUnsignedActiveXControl = 4100
    RunActiveXControlAndPlugins = 4608
    ScriptUnsafeActiveXControl = 4609
    ActiveScripting = 5120
    ScriptJavaApplets = 5122
    ScriptSafeActiveXControl = 5125
    AccessDataAcrossDomains = 5126
    AllowPasteViaScript = 5127
    SubmitNonencryptedFormData = 5633
    FontDownload = 5636
    UserDataPersistence = 5638
    NavigateSubFramesAcrossDomains = 5639
    AllowMetaRefresh = 5640
    DisplayMixedContent = 5641
    InstallDesktopItems = 6144
    DragAndDropFiles = 6146
    FileDownload = 6147
    LaunchAppsAndFilesInIframe = 6148
    LaunchAppsAndUnsafeFiles = 6150
    UserAuthentication = 6656
    OnlyPromptIfMultipleCertsExist = 6660
    JavaPermissions = 7168
    SoftwareChannelPermissions = 7685
    RunSignedComponents = 8193
    RunUnsignedComponents = 8196


class CustomZoneSettingValues:
    Disable = 0
    Enable = 1
    Prompt = 2
    Approve = 3
    Custom = 4
    DisableJava = 5
    HighSafety = 6
    LowSafety = 7
    MediumSafety = 8
    AnonymousLogon = 9
    AutomaticLogonInIntranetOnly = 10
    AutomaticLogonWithUserNameAndPassword = 11
    PromptForUserNameAndPassword = 12


class DialupType:
    NeverDial = 0
    DialWhenNoConnection = 1
    AlwaysDial = 2


class EscState:
    On = 0
    Off = 1


class IEAKRsopPrecedenceComparer:
    def __init__(self): ...


class IEAKRsopReader:
    def __init__(self, rsopReader: RsopReader): ...
    def GetClassObject(self, associatorClassName: str, rsopPrecedence: UInt32) -> ManagementObject: ...
    @overload
    def GetClassObjectsList(self, associatorClassName: str) -> ArrayList: ...
    @overload
    def GetClassObjectsList(self, associatorClassName: str, rsopPrecedence: UInt32) -> ArrayList: ...
    def GetIEAKPolicyObjects(self) -> ArrayList: ...
    def IsClassDefined(self, className: str) -> bool: ...


class InternetExplorerSettings(GPOExtension):
    def __init__(self): ...
    @property
    def AuthenticodeTrustedPublishers(self) -> ArrayList: ...
    @property
    def AutoDetectConfigSettings(self) -> BooleanSetting: ...
    @property
    def AutomaticConfiguration(self) -> BrowserAutoConfigSetting: ...
    @property
    def BitmapPaths(self) -> BitmapPathsSetting: ...
    @property
    def BrowserTitle(self) -> BrowserTitleSetting: ...
    @property
    def DefinesConnectionSettings(self) -> BooleanSetting: ...
    @property
    def DefinesEscOffSettings(self) -> BooleanSetting: ...
    @property
    def DefinesEscOnSettings(self) -> BooleanSetting: ...
    @property
    def DeleteAdminFavoritesOnly(self) -> BooleanSetting: ...
    @property
    def DeleteChannels(self) -> BooleanSetting: ...
    @property
    def DeleteExistingToolbarButtons(self) -> BooleanSetting: ...
    @property
    def DeleteFavorites(self) -> BooleanSetting: ...
    @property
    def EscOffAllowCookiesFromSites(self) -> ArrayList: ...
    @property
    def EscOffBlockCookiesFromSites(self) -> ArrayList: ...
    @property
    def EscOffLocalSites(self) -> ArrayList: ...
    @property
    def EscOffRestrictedSites(self) -> ArrayList: ...
    @property
    def EscOffSecurityZoneAndPrivacy(self) -> SecurityZoneAndPrivacySettings: ...
    @property
    def EscOffTrustedSites(self) -> ArrayList: ...
    @property
    def EscOnAllowCookiesFromSites(self) -> ArrayList: ...
    @property
    def EscOnBlockCookiesFromSites(self) -> ArrayList: ...
    @property
    def EscOnLocalSites(self) -> ArrayList: ...
    @property
    def EscOnRestrictedSites(self) -> ArrayList: ...
    @property
    def EscOnSecurityZoneAndPrivacy(self) -> SecurityZoneAndPrivacySettings: ...
    @property
    def EscOnTrustedSites(self) -> ArrayList: ...
    @property
    def FavoriteURL(self) -> Set(URLSetting): ...
    @property
    def HomePage(self) -> StringSetting: ...
    @property
    def ImportAuthenticodeSecurity(self) -> BooleanSetting: ...
    @property
    def ImportedContentRatings(self) -> BooleanSetting: ...
    @property
    def LinkURL(self) -> Set(URLSetting): ...
    @property
    def OnlineSupportPage(self) -> StringSetting: ...
    @property
    def PlaceFavoritesAtTop(self) -> BooleanSetting: ...
    @property
    def PreferenceMode(self) -> bool: ...
    @property
    def Programs(self) -> ProgramSettings: ...
    @property
    def ProxySettings(self) -> ProxySettings: ...
    @property
    def SearchBar(self) -> StringSetting: ...
    @property
    def SecurityAndPrivacyIndeterminate(self) -> bool: ...
    @property
    def SecurityAndPrivacyIndeterminateSpecified(self) -> bool: ...
    @property
    def ToolbarBackgroundBitmap(self) -> StringSetting: ...
    @property
    def ToolbarButtons(self) -> Set(ToolbarButtonSetting): ...
    @property
    def TrustedPublisherLockdown(self) -> BooleanSetting: ...
    @property
    def UserAgent(self) -> StringSetting: ...
    def Initialize(self, context: ReportingContext) -> None: ...
    @AuthenticodeTrustedPublishers.setter
    def AuthenticodeTrustedPublishers(self, value: ArrayList) -> None: ...
    @AutoDetectConfigSettings.setter
    def AutoDetectConfigSettings(self, value: BooleanSetting) -> None: ...
    @AutomaticConfiguration.setter
    def AutomaticConfiguration(self, value: BrowserAutoConfigSetting) -> None: ...
    @BitmapPaths.setter
    def BitmapPaths(self, value: BitmapPathsSetting) -> None: ...
    @BrowserTitle.setter
    def BrowserTitle(self, value: BrowserTitleSetting) -> None: ...
    @DefinesConnectionSettings.setter
    def DefinesConnectionSettings(self, value: BooleanSetting) -> None: ...
    @DefinesEscOffSettings.setter
    def DefinesEscOffSettings(self, value: BooleanSetting) -> None: ...
    @DefinesEscOnSettings.setter
    def DefinesEscOnSettings(self, value: BooleanSetting) -> None: ...
    @DeleteAdminFavoritesOnly.setter
    def DeleteAdminFavoritesOnly(self, value: BooleanSetting) -> None: ...
    @DeleteChannels.setter
    def DeleteChannels(self, value: BooleanSetting) -> None: ...
    @DeleteExistingToolbarButtons.setter
    def DeleteExistingToolbarButtons(self, value: BooleanSetting) -> None: ...
    @DeleteFavorites.setter
    def DeleteFavorites(self, value: BooleanSetting) -> None: ...
    @EscOffAllowCookiesFromSites.setter
    def EscOffAllowCookiesFromSites(self, value: ArrayList) -> None: ...
    @EscOffBlockCookiesFromSites.setter
    def EscOffBlockCookiesFromSites(self, value: ArrayList) -> None: ...
    @EscOffLocalSites.setter
    def EscOffLocalSites(self, value: ArrayList) -> None: ...
    @EscOffRestrictedSites.setter
    def EscOffRestrictedSites(self, value: ArrayList) -> None: ...
    @EscOffSecurityZoneAndPrivacy.setter
    def EscOffSecurityZoneAndPrivacy(self, value: SecurityZoneAndPrivacySettings) -> None: ...
    @EscOffTrustedSites.setter
    def EscOffTrustedSites(self, value: ArrayList) -> None: ...
    @EscOnAllowCookiesFromSites.setter
    def EscOnAllowCookiesFromSites(self, value: ArrayList) -> None: ...
    @EscOnBlockCookiesFromSites.setter
    def EscOnBlockCookiesFromSites(self, value: ArrayList) -> None: ...
    @EscOnLocalSites.setter
    def EscOnLocalSites(self, value: ArrayList) -> None: ...
    @EscOnRestrictedSites.setter
    def EscOnRestrictedSites(self, value: ArrayList) -> None: ...
    @EscOnSecurityZoneAndPrivacy.setter
    def EscOnSecurityZoneAndPrivacy(self, value: SecurityZoneAndPrivacySettings) -> None: ...
    @EscOnTrustedSites.setter
    def EscOnTrustedSites(self, value: ArrayList) -> None: ...
    @FavoriteURL.setter
    def FavoriteURL(self, value: Set(URLSetting)) -> None: ...
    @HomePage.setter
    def HomePage(self, value: StringSetting) -> None: ...
    @ImportAuthenticodeSecurity.setter
    def ImportAuthenticodeSecurity(self, value: BooleanSetting) -> None: ...
    @ImportedContentRatings.setter
    def ImportedContentRatings(self, value: BooleanSetting) -> None: ...
    @LinkURL.setter
    def LinkURL(self, value: Set(URLSetting)) -> None: ...
    @OnlineSupportPage.setter
    def OnlineSupportPage(self, value: StringSetting) -> None: ...
    @PlaceFavoritesAtTop.setter
    def PlaceFavoritesAtTop(self, value: BooleanSetting) -> None: ...
    @PreferenceMode.setter
    def PreferenceMode(self, value: bool) -> None: ...
    @Programs.setter
    def Programs(self, value: ProgramSettings) -> None: ...
    @ProxySettings.setter
    def ProxySettings(self, value: ProxySettings) -> None: ...
    @SearchBar.setter
    def SearchBar(self, value: StringSetting) -> None: ...
    @SecurityAndPrivacyIndeterminate.setter
    def SecurityAndPrivacyIndeterminate(self, value: bool) -> None: ...
    @SecurityAndPrivacyIndeterminateSpecified.setter
    def SecurityAndPrivacyIndeterminateSpecified(self, value: bool) -> None: ...
    @ToolbarBackgroundBitmap.setter
    def ToolbarBackgroundBitmap(self, value: StringSetting) -> None: ...
    @ToolbarButtons.setter
    def ToolbarButtons(self, value: Set(ToolbarButtonSetting)) -> None: ...
    @TrustedPublisherLockdown.setter
    def TrustedPublisherLockdown(self, value: BooleanSetting) -> None: ...
    @UserAgent.setter
    def UserAgent(self, value: StringSetting) -> None: ...


class LocalZoneSites:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, flags: UInt32): ...
    @overload
    def __init__(self, intranet: bool, bypassProxy: bool, uncPath: bool): ...
    @property
    def ByPassProxy(self) -> bool: ...
    @property
    def Intranet(self) -> bool: ...
    @property
    def UNCPath(self) -> bool: ...
    @ByPassProxy.setter
    def ByPassProxy(self, value: bool) -> None: ...
    @Intranet.setter
    def Intranet(self, value: bool) -> None: ...
    @UNCPath.setter
    def UNCPath(self, value: bool) -> None: ...


class PrivacyLevel:
    BlockAllCookies = 0
    High = 1
    MediumHigh = 2
    Medium = 3
    Low = 4
    AcceptAllCookies = 5
    Custom = 100
    Advanced = 101


class PrivacySettings:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, privacySettingObject: ManagementObject): ...
    @overload
    def __init__(self, infParser: SecurityInfParser): ...
    @property
    def AllowSessionCookies(self) -> bool: ...
    @property
    def AllowSessionCookiesSpecified(self) -> bool: ...
    @property
    def FirstPartyCookies(self) -> CookieAction: ...
    @property
    def FirstPartyCookiesSpecified(self) -> bool: ...
    @property
    def PrivacyLevel(self) -> PrivacyLevel: ...
    @property
    def ThirdPartyCookies(self) -> CookieAction: ...
    @property
    def ThirdPartyCookiesSpecified(self) -> bool: ...
    def IsPrivacyDefined(infParser: SecurityInfParser) -> bool: ...
    @AllowSessionCookies.setter
    def AllowSessionCookies(self, value: bool) -> None: ...
    @AllowSessionCookiesSpecified.setter
    def AllowSessionCookiesSpecified(self, value: bool) -> None: ...
    @FirstPartyCookies.setter
    def FirstPartyCookies(self, value: CookieAction) -> None: ...
    @FirstPartyCookiesSpecified.setter
    def FirstPartyCookiesSpecified(self, value: bool) -> None: ...
    @PrivacyLevel.setter
    def PrivacyLevel(self, value: PrivacyLevel) -> None: ...
    @ThirdPartyCookies.setter
    def ThirdPartyCookies(self, value: CookieAction) -> None: ...
    @ThirdPartyCookiesSpecified.setter
    def ThirdPartyCookiesSpecified(self, value: bool) -> None: ...


class ProgramSettings(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: GPOContext): ...
    @overload
    def __init__(self, ieakRootObject: ManagementObject, ieakProgramsObject: ManagementObject): ...
    @property
    def Calendar(self) -> str: ...
    @property
    def ContactList(self) -> str: ...
    @property
    def Email(self) -> str: ...
    @property
    def HtmlEditor(self) -> str: ...
    @property
    def IEDefaultCheck(self) -> bool: ...
    @property
    def InternetCall(self) -> str: ...
    @property
    def Newsgroups(self) -> str: ...
    @Calendar.setter
    def Calendar(self, value: str) -> None: ...
    @ContactList.setter
    def ContactList(self, value: str) -> None: ...
    @Email.setter
    def Email(self, value: str) -> None: ...
    @HtmlEditor.setter
    def HtmlEditor(self, value: str) -> None: ...
    @IEDefaultCheck.setter
    def IEDefaultCheck(self, value: bool) -> None: ...
    @InternetCall.setter
    def InternetCall(self, value: str) -> None: ...
    @Newsgroups.setter
    def Newsgroups(self, value: str) -> None: ...


class ProxyAddress:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: str): ...
    @property
    def Address(self) -> str: ...
    @property
    def Port(self) -> UInt32: ...
    @property
    def PortSpecified(self) -> bool: ...
    @Address.setter
    def Address(self, value: str) -> None: ...
    @Port.setter
    def Port(self, value: UInt32) -> None: ...
    @PortSpecified.setter
    def PortSpecified(self, value: bool) -> None: ...


class ProxySettings(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, proxySection: IniSection): ...
    @overload
    def __init__(self, proxyObjects: ArrayList, ieakPolicyObjects: ArrayList): ...
    def ContainSettings(self) -> bool: ...
    @property
    def FTP(self) -> ProxyAddress: ...
    @property
    def Gopher(self) -> ProxyAddress: ...
    @property
    def HTTP(self) -> ProxyAddress: ...
    @property
    def NoProxyIntranet(self) -> bool: ...
    @property
    def ProxyAddressException(self) -> Set(str): ...
    @property
    def Secure(self) -> ProxyAddress: ...
    @property
    def Socks(self) -> ProxyAddress: ...
    @property
    def UseSameProxy(self) -> bool: ...
    @FTP.setter
    def FTP(self, value: ProxyAddress) -> None: ...
    @Gopher.setter
    def Gopher(self, value: ProxyAddress) -> None: ...
    @HTTP.setter
    def HTTP(self, value: ProxyAddress) -> None: ...
    @NoProxyIntranet.setter
    def NoProxyIntranet(self, value: bool) -> None: ...
    @ProxyAddressException.setter
    def ProxyAddressException(self, value: Set(str)) -> None: ...
    @Secure.setter
    def Secure(self, value: ProxyAddress) -> None: ...
    @Socks.setter
    def Socks(self, value: ProxyAddress) -> None: ...
    @UseSameProxy.setter
    def UseSameProxy(self, value: bool) -> None: ...


class SecurityInfParser:
    def __init__(self, regDataSection: IniSection): ...
    def GetImmediateSubkeys(self, rootKey: str) -> IEnumerable: ...
    def GetKeyLeafComponent(key: str) -> str: ...
    def GetValue(self, key: str, name: str) -> SecurityValue: ...
    def GetValues(self, key: str) -> IEnumerable: ...


class SecurityLevel:
    Custom = 0
    Low = 65536
    MediumLow = 66816
    Medium = 69632
    MediumHigh = 70912
    High = 73728


class SecurityValue:
    @overload
    def __init__(self, key: str, name: str, data: str): ...
    @overload
    def __init__(self, key: str, name: str, data: UInt32): ...
    @overload
    def __init__(self, key: str, name: str, data: Set(Byte)): ...
    def AssertType(self, type: Type) -> None: ...
    @property
    def Data(self) -> Object: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    def GetUInt(self) -> SecurityValue: ...


class SecurityZoneAndPrivacySettings(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, infParser: SecurityInfParser): ...
    @property
    def LocalZoneSettings(self) -> LocalZoneSites: ...
    @property
    def Privacy(self) -> PrivacySettings: ...
    @property
    def ZoneSettings(self) -> ArrayList: ...
    @LocalZoneSettings.setter
    def LocalZoneSettings(self, value: LocalZoneSites) -> None: ...
    @Privacy.setter
    def Privacy(self, value: PrivacySettings) -> None: ...
    @ZoneSettings.setter
    def ZoneSettings(self, value: ArrayList) -> None: ...


class SecurityZoneSettings:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, securityZoneObject: ManagementObject): ...
    @overload
    def __init__(self, name: Zone, infParser: SecurityInfParser): ...
    @property
    def CustomSetting(self) -> ArrayList: ...
    @property
    def Name(self) -> Zone: ...
    @property
    def RequireVerification(self) -> bool: ...
    @property
    def SecurityLevel(self) -> SecurityLevel: ...
    @CustomSetting.setter
    def CustomSetting(self, value: ArrayList) -> None: ...
    @Name.setter
    def Name(self, value: Zone) -> None: ...
    @RequireVerification.setter
    def RequireVerification(self, value: bool) -> None: ...
    @SecurityLevel.setter
    def SecurityLevel(self, value: SecurityLevel) -> None: ...


class StringSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, value: str, ieakObject: ManagementObject): ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class ToolbarButtonSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, toolbarsSection: IniSection, index: int): ...
    @overload
    def __init__(self, toolbarButtonObject: ManagementObject, ieakObject: ManagementObject): ...
    @property
    def ActionPath(self) -> str: ...
    @property
    def Caption(self) -> str: ...
    @property
    def ColorIconPath(self) -> str: ...
    @property
    def GrayscaleIconPath(self) -> str: ...
    @property
    def ShowOnToolbar(self) -> bool: ...
    @ActionPath.setter
    def ActionPath(self, value: str) -> None: ...
    @Caption.setter
    def Caption(self, value: str) -> None: ...
    @ColorIconPath.setter
    def ColorIconPath(self, value: str) -> None: ...
    @GrayscaleIconPath.setter
    def GrayscaleIconPath(self, value: str) -> None: ...
    @ShowOnToolbar.setter
    def ShowOnToolbar(self, value: bool) -> None: ...


class URLSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, ieakObject: ManagementObject): ...
    @property
    def Folder(self) -> str: ...
    @property
    def Icon(self) -> str: ...
    @property
    def MakeAvailableOffline(self) -> bool: ...
    @property
    def MakeAvailableOfflineSpecified(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Order(self) -> UInt32: ...
    @property
    def Url(self) -> str: ...
    def Initialize(self, name: str, url: str, icon: str, order: UInt32, folder: str, makeAvailableOffline: bool, makeAvailableOfflineSpecified: bool) -> None: ...
    @Folder.setter
    def Folder(self, value: str) -> None: ...
    @Icon.setter
    def Icon(self, value: str) -> None: ...
    @MakeAvailableOffline.setter
    def MakeAvailableOffline(self, value: bool) -> None: ...
    @MakeAvailableOfflineSpecified.setter
    def MakeAvailableOfflineSpecified(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Order.setter
    def Order(self, value: UInt32) -> None: ...
    @Url.setter
    def Url(self, value: str) -> None: ...


class Zone:
    LocalComputer = 0
    LocalIntranet = 1
    TrustedSites = 2
    Internet = 3
    RestrictedSites = 4
