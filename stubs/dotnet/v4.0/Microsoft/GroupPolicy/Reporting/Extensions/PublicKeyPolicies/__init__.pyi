from typing import Tuple, Set, Iterable, List


class AutoEnrollmentSettings(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, policyValue: UInt32, percent: RegUInt32Setting, storeNames: str): ...
    @property
    def EnrollCertificatesAutomatically(self) -> bool: ...
    @property
    def ExpiryNotification(self) -> bool: ...
    @property
    def NotifyPercent(self) -> RegUInt32Setting: ...
    @property
    def NotifyStoreNames(self) -> str: ...
    @property
    def Options(self) -> AutoEnrollOptions: ...
    @EnrollCertificatesAutomatically.setter
    def EnrollCertificatesAutomatically(self, value: bool) -> None: ...
    @ExpiryNotification.setter
    def ExpiryNotification(self, value: bool) -> None: ...
    @NotifyPercent.setter
    def NotifyPercent(self, value: RegUInt32Setting) -> None: ...
    @NotifyStoreNames.setter
    def NotifyStoreNames(self, value: str) -> None: ...
    @Options.setter
    def Options(self, value: AutoEnrollOptions) -> None: ...


class AutoEnrollOptions:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policyValue: UInt32): ...
    @property
    def RenewUpdateRevoke(self) -> bool: ...
    @property
    def UpdateTemplates(self) -> bool: ...
    @RenewUpdateRevoke.setter
    def RenewUpdateRevoke(self, value: bool) -> None: ...
    @UpdateTemplates.setter
    def UpdateTemplates(self, value: bool) -> None: ...


class AutomaticCertificate(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, certBlob: Set(Byte)): ...
    @property
    def CertificatePurpose(self) -> Set(str): ...
    @property
    def CertificateType(self) -> str: ...
    @property
    def Data(self) -> Set(Byte): ...
    @CertificatePurpose.setter
    def CertificatePurpose(self, value: Set(str)) -> None: ...
    @CertificateType.setter
    def CertificateType(self, value: str) -> None: ...
    @Data.setter
    def Data(self, value: Set(Byte)) -> None: ...


class CertificateSettingsNetworkRetrieval(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, AllowUserCertRetrieval: UInt32, URLRetrievalTime: RegUInt32Setting, pathValidationRetrievalTime: RegUInt32Setting, downloadTime: RegUInt32Setting): ...
    @property
    def AllowUserCertRetrieval(self) -> bool: ...
    @property
    def CrossCertDownloadTime(self) -> RegUInt32Setting: ...
    @property
    def DefaultPathValidationRetrievalTime(self) -> RegUInt32Setting: ...
    @property
    def DefaultURLRetrievalTime(self) -> RegUInt32Setting: ...
    @AllowUserCertRetrieval.setter
    def AllowUserCertRetrieval(self, value: bool) -> None: ...
    @CrossCertDownloadTime.setter
    def CrossCertDownloadTime(self, value: RegUInt32Setting) -> None: ...
    @DefaultPathValidationRetrievalTime.setter
    def DefaultPathValidationRetrievalTime(self, value: RegUInt32Setting) -> None: ...
    @DefaultURLRetrievalTime.setter
    def DefaultURLRetrievalTime(self, value: RegUInt32Setting) -> None: ...


class CertificateSettingsRevocation(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, policyValue: UInt32, validityExtension: RegUInt32Setting): ...
    @property
    def AllowLongerResponseLifetime(self) -> bool: ...
    @property
    def PreferCRLsOverOCSP(self) -> bool: ...
    @property
    def ValidityPeriodExtension(self) -> RegUInt32Setting: ...
    @AllowLongerResponseLifetime.setter
    def AllowLongerResponseLifetime(self, value: bool) -> None: ...
    @PreferCRLsOverOCSP.setter
    def PreferCRLsOverOCSP(self, value: bool) -> None: ...
    @ValidityPeriodExtension.setter
    def ValidityPeriodExtension(self, value: RegUInt32Setting) -> None: ...


class CertificateSettingsStores(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, peerCertUsages: Set(str), policyValue: RegUInt32Setting): ...
    @property
    def PeerUsages(self) -> Set(str): ...
    @property
    def PolicyValue(self) -> RegUInt32Setting: ...
    @PeerUsages.setter
    def PeerUsages(self, value: Set(str)) -> None: ...
    @PolicyValue.setter
    def PolicyValue(self, value: RegUInt32Setting) -> None: ...


class CertificateSettingsTrustedPublishers(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, policyValue: UInt32): ...
    @property
    def TrustedPublishersManager(self) -> UInt32: ...
    @property
    def VerifyCertHasValidTimestamp(self) -> bool: ...
    @property
    def VerifyCertNotRevoked(self) -> bool: ...
    @TrustedPublishersManager.setter
    def TrustedPublishersManager(self, value: UInt32) -> None: ...
    @VerifyCertHasValidTimestamp.setter
    def VerifyCertHasValidTimestamp(self, value: bool) -> None: ...
    @VerifyCertNotRevoked.setter
    def VerifyCertNotRevoked(self, value: bool) -> None: ...


class CertificateTrustList(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, certBlob: Set(Byte)): ...
    @property
    def CertificatePurpose(self) -> Set(str): ...
    @property
    def Data(self) -> Set(Byte): ...
    @property
    def EffectiveDate(self) -> DateTime: ...
    @property
    def IssuedBy(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @CertificatePurpose.setter
    def CertificatePurpose(self, value: Set(str)) -> None: ...
    @Data.setter
    def Data(self, value: Set(Byte)) -> None: ...
    @EffectiveDate.setter
    def EffectiveDate(self, value: DateTime) -> None: ...
    @IssuedBy.setter
    def IssuedBy(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class EFSRecoveryAgent(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, certBlob: Set(Byte)): ...
    @property
    def CertificateName(self) -> str: ...
    @property
    def CertificatePurpose(self) -> Set(str): ...
    @property
    def Data(self) -> Set(Byte): ...
    @property
    def ExpirationDate(self) -> DateTime: ...
    @property
    def IssuedBy(self) -> str: ...
    @property
    def IssuedTo(self) -> str: ...
    @CertificateName.setter
    def CertificateName(self, value: str) -> None: ...
    @CertificatePurpose.setter
    def CertificatePurpose(self, value: Set(str)) -> None: ...
    @Data.setter
    def Data(self, value: Set(Byte)) -> None: ...
    @ExpirationDate.setter
    def ExpirationDate(self, value: DateTime) -> None: ...
    @IssuedBy.setter
    def IssuedBy(self, value: str) -> None: ...
    @IssuedTo.setter
    def IssuedTo(self, value: str) -> None: ...


class EFSSettings(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, policyAllowEFS: UInt32, policyOptions: UInt32, policyCacheTimeout: UInt32, policyKeyLen: UInt32, policyTemplateName: str): ...
    @property
    def AllowEFS(self) -> UInt32: ...
    @property
    def CacheTimeout(self) -> UInt32: ...
    @property
    def KeyLen(self) -> UInt32: ...
    @property
    def Options(self) -> UInt32: ...
    @property
    def TemplateName(self) -> str: ...
    @AllowEFS.setter
    def AllowEFS(self, value: UInt32) -> None: ...
    @CacheTimeout.setter
    def CacheTimeout(self, value: UInt32) -> None: ...
    @KeyLen.setter
    def KeyLen(self, value: UInt32) -> None: ...
    @Options.setter
    def Options(self, value: UInt32) -> None: ...
    @TemplateName.setter
    def TemplateName(self, value: str) -> None: ...


class KeyRoamingSettings(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: RegistrySetting, maxTombstoneDays: RegUInt32Setting, maxNumTokens: RegUInt32Setting, maxTokenSize: RegUInt32Setting): ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def MaxNumTokens(self) -> RegUInt32Setting: ...
    @property
    def MaxTokenSize(self) -> RegUInt32Setting: ...
    @property
    def MaxTombstoneDays(self) -> RegUInt32Setting: ...
    @property
    def RoamCredManTokens(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @MaxNumTokens.setter
    def MaxNumTokens(self, value: RegUInt32Setting) -> None: ...
    @MaxTokenSize.setter
    def MaxTokenSize(self, value: RegUInt32Setting) -> None: ...
    @MaxTombstoneDays.setter
    def MaxTombstoneDays(self, value: RegUInt32Setting) -> None: ...
    @RoamCredManTokens.setter
    def RoamCredManTokens(self, value: bool) -> None: ...


class PublicKeySettings(GPOExtension):
    def __init__(self): ...
    @property
    def AutoEnrollmentSettings(self) -> AutoEnrollmentSettings: ...
    @property
    def AutomaticCertificate(self) -> ArrayList: ...
    @property
    def CertificateTrustList(self) -> ArrayList: ...
    @property
    def certSettingsNetworkRetrieval(self) -> CertificateSettingsNetworkRetrieval: ...
    @property
    def certSettingsRevocation(self) -> CertificateSettingsRevocation: ...
    @property
    def certSettingsStores(self) -> CertificateSettingsStores: ...
    @property
    def certSettingsTrustedPublishers(self) -> CertificateSettingsTrustedPublishers: ...
    @property
    def EFSRecoveryAgent(self) -> ArrayList: ...
    @property
    def EFSSettings(self) -> EFSSettings: ...
    @property
    def IntermediateCACertificate(self) -> ArrayList: ...
    @property
    def KeyRoamingSettings(self) -> KeyRoamingSettings: ...
    @property
    def RootCertificate(self) -> ArrayList: ...
    @property
    def RootCertificateSettings(self) -> RootCertificateSettings: ...
    @property
    def TrustedPeopleCertificate(self) -> ArrayList: ...
    @property
    def TrustedPublishersCertificate(self) -> ArrayList: ...
    @property
    def UntrustedCertificate(self) -> ArrayList: ...
    def Initialize(self, context: ReportingContext) -> None: ...
    @AutoEnrollmentSettings.setter
    def AutoEnrollmentSettings(self, value: AutoEnrollmentSettings) -> None: ...
    @AutomaticCertificate.setter
    def AutomaticCertificate(self, value: ArrayList) -> None: ...
    @CertificateTrustList.setter
    def CertificateTrustList(self, value: ArrayList) -> None: ...
    @certSettingsNetworkRetrieval.setter
    def certSettingsNetworkRetrieval(self, value: CertificateSettingsNetworkRetrieval) -> None: ...
    @certSettingsRevocation.setter
    def certSettingsRevocation(self, value: CertificateSettingsRevocation) -> None: ...
    @certSettingsStores.setter
    def certSettingsStores(self, value: CertificateSettingsStores) -> None: ...
    @certSettingsTrustedPublishers.setter
    def certSettingsTrustedPublishers(self, value: CertificateSettingsTrustedPublishers) -> None: ...
    @EFSRecoveryAgent.setter
    def EFSRecoveryAgent(self, value: ArrayList) -> None: ...
    @EFSSettings.setter
    def EFSSettings(self, value: EFSSettings) -> None: ...
    @IntermediateCACertificate.setter
    def IntermediateCACertificate(self, value: ArrayList) -> None: ...
    @KeyRoamingSettings.setter
    def KeyRoamingSettings(self, value: KeyRoamingSettings) -> None: ...
    @RootCertificate.setter
    def RootCertificate(self, value: ArrayList) -> None: ...
    @RootCertificateSettings.setter
    def RootCertificateSettings(self, value: RootCertificateSettings) -> None: ...
    @TrustedPeopleCertificate.setter
    def TrustedPeopleCertificate(self, value: ArrayList) -> None: ...
    @TrustedPublishersCertificate.setter
    def TrustedPublishersCertificate(self, value: ArrayList) -> None: ...
    @UntrustedCertificate.setter
    def UntrustedCertificate(self, value: ArrayList) -> None: ...


class RegUInt32Setting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: RegistrySetting, defaultValue: UInt32): ...
    @property
    def Present(self) -> bool: ...
    @property
    def Value(self) -> UInt32: ...
    @Present.setter
    def Present(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: UInt32) -> None: ...


class RootCertificate(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, certBlob: Set(Byte)): ...
    @property
    def CertificatePurpose(self) -> Set(str): ...
    @property
    def Data(self) -> Set(Byte): ...
    @property
    def ExpirationDate(self) -> DateTime: ...
    @property
    def IssuedBy(self) -> str: ...
    @property
    def IssuedTo(self) -> str: ...
    @CertificatePurpose.setter
    def CertificatePurpose(self, value: Set(str)) -> None: ...
    @Data.setter
    def Data(self, value: Set(Byte)) -> None: ...
    @ExpirationDate.setter
    def ExpirationDate(self, value: DateTime) -> None: ...
    @IssuedBy.setter
    def IssuedBy(self, value: str) -> None: ...
    @IssuedTo.setter
    def IssuedTo(self, value: str) -> None: ...


class RootCertificateSettings(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, policyValue: UInt32): ...
    @property
    def AllowNewCAs(self) -> bool: ...
    @property
    def RequireUPNNamingConstraints(self) -> bool: ...
    @property
    def TrustThirdPartyCAs(self) -> bool: ...
    @AllowNewCAs.setter
    def AllowNewCAs(self, value: bool) -> None: ...
    @RequireUPNNamingConstraints.setter
    def RequireUPNNamingConstraints(self, value: bool) -> None: ...
    @TrustThirdPartyCAs.setter
    def TrustThirdPartyCAs(self, value: bool) -> None: ...


class SystemCertificate(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, policySetting: PolicySetting, certBlob: Set(Byte)): ...
    @property
    def CertificatePurpose(self) -> Set(str): ...
    @property
    def Data(self) -> Set(Byte): ...
    @property
    def ExpirationDate(self) -> DateTime: ...
    @property
    def IssuedBy(self) -> str: ...
    @property
    def IssuedTo(self) -> str: ...
    @CertificatePurpose.setter
    def CertificatePurpose(self, value: Set(str)) -> None: ...
    @Data.setter
    def Data(self, value: Set(Byte)) -> None: ...
    @ExpirationDate.setter
    def ExpirationDate(self, value: DateTime) -> None: ...
    @IssuedBy.setter
    def IssuedBy(self, value: str) -> None: ...
    @IssuedTo.setter
    def IssuedTo(self, value: str) -> None: ...
