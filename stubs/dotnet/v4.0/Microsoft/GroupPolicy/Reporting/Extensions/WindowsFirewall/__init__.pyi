from typing import Tuple, Set, Iterable, List


class AHHashAlgorithm:
    MD5 = 0
    SHA1 = 1
    SHA256 = 2
    AESGMAC128 = 3
    AESGMAC192 = 4
    AESGMAC256 = 5
    Unknown = 6


class BooleanSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: PolicySetting, value: bool): ...
    @property
    def Value(self) -> bool: ...
    @Value.setter
    def Value(self, value: bool) -> None: ...


class ConnectionSecurityAuthenticationSet(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: PolicySetting): ...
    @property
    def AuthenticationSuites(self) -> Collection: ...
    @property
    def Description(self) -> str: ...
    @property
    def EmbedCtxt(self) -> str: ...
    @property
    def GUID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @AuthenticationSuites.setter
    def AuthenticationSuites(self, value: Collection) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @EmbedCtxt.setter
    def EmbedCtxt(self, value: str) -> None: ...
    @GUID.setter
    def GUID(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...


class ConnectionSecurityAuthenticationSuite:
    def __init__(self): ...
    @property
    def CAName(self) -> str: ...
    @property
    def CertAccountMapping(self) -> bool: ...
    @property
    def CertAccountMappingSpecified(self) -> bool: ...
    @property
    def ExcludeCAName(self) -> bool: ...
    @property
    def ExcludeCANameSpecified(self) -> bool: ...
    @property
    def HealthCert(self) -> bool: ...
    @property
    def HealthCertSpecified(self) -> bool: ...
    @property
    def Method(self) -> ConnectionSecurityAuthenticationSuiteMethod: ...
    @property
    def SHKey(self) -> str: ...
    @property
    def SkipVersion(self) -> str: ...
    @CAName.setter
    def CAName(self, value: str) -> None: ...
    @CertAccountMapping.setter
    def CertAccountMapping(self, value: bool) -> None: ...
    @CertAccountMappingSpecified.setter
    def CertAccountMappingSpecified(self, value: bool) -> None: ...
    @ExcludeCAName.setter
    def ExcludeCAName(self, value: bool) -> None: ...
    @ExcludeCANameSpecified.setter
    def ExcludeCANameSpecified(self, value: bool) -> None: ...
    @HealthCert.setter
    def HealthCert(self, value: bool) -> None: ...
    @HealthCertSpecified.setter
    def HealthCertSpecified(self, value: bool) -> None: ...
    @Method.setter
    def Method(self, value: ConnectionSecurityAuthenticationSuiteMethod) -> None: ...
    @SHKey.setter
    def SHKey(self, value: str) -> None: ...
    @SkipVersion.setter
    def SkipVersion(self, value: str) -> None: ...


class ConnectionSecurityAuthenticationSuiteMethod:
    Anonymous = 0
    MachineKerb = 1
    MachineCert = 2
    MachineSHKey = 3
    MachineNTLM = 4
    UserCert = 5
    UserKerb = 6
    UserNTLM = 7
    Unknown = 8


class ConnectionSecurityPhase1CryptographicSet(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: PolicySetting): ...
    @property
    def Description(self) -> str: ...
    @property
    def DoNotSkipDH(self) -> bool: ...
    @property
    def DoNotSkipDHSpecified(self) -> bool: ...
    @property
    def EmbedCtxt(self) -> str: ...
    @property
    def GUID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Phase1CryptoSuites(self) -> Collection: ...
    @property
    def TimeoutMinutes(self) -> str: ...
    @property
    def TimeoutSessions(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @DoNotSkipDH.setter
    def DoNotSkipDH(self, value: bool) -> None: ...
    @DoNotSkipDHSpecified.setter
    def DoNotSkipDHSpecified(self, value: bool) -> None: ...
    @EmbedCtxt.setter
    def EmbedCtxt(self, value: str) -> None: ...
    @GUID.setter
    def GUID(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Phase1CryptoSuites.setter
    def Phase1CryptoSuites(self, value: Collection) -> None: ...
    @TimeoutMinutes.setter
    def TimeoutMinutes(self, value: str) -> None: ...
    @TimeoutSessions.setter
    def TimeoutSessions(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...


class ConnectionSecurityPhase1CryptographicSuite:
    def __init__(self): ...
    @property
    def Encryption(self) -> EncryptionAlgorithm: ...
    @property
    def Hash(self) -> HashAlgorithm: ...
    @property
    def KeyExchange(self) -> KeyExchangeAlgorithm: ...
    @property
    def SkipVersion(self) -> str: ...
    @Encryption.setter
    def Encryption(self, value: EncryptionAlgorithm) -> None: ...
    @Hash.setter
    def Hash(self, value: HashAlgorithm) -> None: ...
    @KeyExchange.setter
    def KeyExchange(self, value: KeyExchangeAlgorithm) -> None: ...
    @SkipVersion.setter
    def SkipVersion(self, value: str) -> None: ...


class ConnectionSecurityPhase2CryptographicSet(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: PolicySetting): ...
    @property
    def Description(self) -> str: ...
    @property
    def EmbedCtxt(self) -> str: ...
    @property
    def GUID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def PFS(self) -> PerfectForwardSecrecy: ...
    @property
    def PFSSpecified(self) -> bool: ...
    @property
    def Phase2CryptoSuites(self) -> Collection: ...
    @property
    def Version(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @EmbedCtxt.setter
    def EmbedCtxt(self, value: str) -> None: ...
    @GUID.setter
    def GUID(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @PFS.setter
    def PFS(self, value: PerfectForwardSecrecy) -> None: ...
    @PFSSpecified.setter
    def PFSSpecified(self, value: bool) -> None: ...
    @Phase2CryptoSuites.setter
    def Phase2CryptoSuites(self, value: Collection) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...


class ConnectionSecurityPhase2CryptographicSuite:
    def __init__(self): ...
    @property
    def AHHash(self) -> AHHashAlgorithm: ...
    @property
    def Encryption(self) -> EncryptionAlgorithm: ...
    @property
    def ESPHash(self) -> ESPHashAlgorithm: ...
    @property
    def Protocol(self) -> Protocol: ...
    @property
    def SkipVersion(self) -> str: ...
    @property
    def TimeoutKBytes(self) -> str: ...
    @property
    def TimeoutMinutes(self) -> str: ...
    @AHHash.setter
    def AHHash(self, value: AHHashAlgorithm) -> None: ...
    @Encryption.setter
    def Encryption(self, value: EncryptionAlgorithm) -> None: ...
    @ESPHash.setter
    def ESPHash(self, value: ESPHashAlgorithm) -> None: ...
    @Protocol.setter
    def Protocol(self, value: Protocol) -> None: ...
    @SkipVersion.setter
    def SkipVersion(self, value: str) -> None: ...
    @TimeoutKBytes.setter
    def TimeoutKBytes(self, value: str) -> None: ...
    @TimeoutMinutes.setter
    def TimeoutMinutes(self, value: str) -> None: ...


class ConnectionSecurityRule(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: PolicySetting): ...
    @property
    def Action(self) -> ConnectionSecurityRuleAction: ...
    @property
    def Active(self) -> bool: ...
    @property
    def ActiveSpecified(self) -> bool: ...
    @property
    def Auth1Set(self) -> str: ...
    @property
    def Auth2Set(self) -> str: ...
    @property
    def Crypto2Set(self) -> str: ...
    @property
    def Desc(self) -> str: ...
    @property
    def EmbedCtxt(self) -> str: ...
    @property
    def EP1_4(self) -> Collection: ...
    @property
    def EP1_6(self) -> Collection: ...
    @property
    def EP1Port(self) -> Collection: ...
    @property
    def EP2_4(self) -> Collection: ...
    @property
    def EP2_6(self) -> Collection: ...
    @property
    def EP2Port(self) -> Collection: ...
    @property
    def IF(self) -> Collection: ...
    @property
    def IFType(self) -> Collection: ...
    @property
    def LTunnel4(self) -> str: ...
    @property
    def LTunnel6(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Platform(self) -> Collection: ...
    @property
    def Profile(self) -> Collection: ...
    @property
    def Protocol(self) -> str: ...
    @property
    def RTunnel4(self) -> str: ...
    @property
    def RTunnel6(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Action.setter
    def Action(self, value: ConnectionSecurityRuleAction) -> None: ...
    @Active.setter
    def Active(self, value: bool) -> None: ...
    @ActiveSpecified.setter
    def ActiveSpecified(self, value: bool) -> None: ...
    @Auth1Set.setter
    def Auth1Set(self, value: str) -> None: ...
    @Auth2Set.setter
    def Auth2Set(self, value: str) -> None: ...
    @Crypto2Set.setter
    def Crypto2Set(self, value: str) -> None: ...
    @Desc.setter
    def Desc(self, value: str) -> None: ...
    @EmbedCtxt.setter
    def EmbedCtxt(self, value: str) -> None: ...
    @EP1_4.setter
    def EP1_4(self, value: Collection) -> None: ...
    @EP1_6.setter
    def EP1_6(self, value: Collection) -> None: ...
    @EP1Port.setter
    def EP1Port(self, value: Collection) -> None: ...
    @EP2_4.setter
    def EP2_4(self, value: Collection) -> None: ...
    @EP2_6.setter
    def EP2_6(self, value: Collection) -> None: ...
    @EP2Port.setter
    def EP2Port(self, value: Collection) -> None: ...
    @IF.setter
    def IF(self, value: Collection) -> None: ...
    @IFType.setter
    def IFType(self, value: Collection) -> None: ...
    @LTunnel4.setter
    def LTunnel4(self, value: str) -> None: ...
    @LTunnel6.setter
    def LTunnel6(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Platform.setter
    def Platform(self, value: Collection) -> None: ...
    @Profile.setter
    def Profile(self, value: Collection) -> None: ...
    @Protocol.setter
    def Protocol(self, value: str) -> None: ...
    @RTunnel4.setter
    def RTunnel4(self, value: str) -> None: ...
    @RTunnel6.setter
    def RTunnel6(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...


class ConnectionSecurityRuleAction:
    SecureServer = 0
    Boundary = 1
    Secure = 2
    DoNotSecure = 3
    Unknown = 4


class EncryptionAlgorithm:
    DES = 0
    Item3DES = 1
    AES128 = 2
    AES192 = 3
    AES256 = 4
    AESGCM128 = 5
    AESGCM192 = 6
    AESGCM256 = 7
    Unknown = 8


class ESPHashAlgorithm:
    MD5 = 0
    SHA1 = 1
    SHA256 = 2
    AESGMAC128 = 3
    AESGMAC192 = 4
    AESGMAC256 = 5
    AESGCM128 = 6
    AESGCM192 = 7
    AESGCM256 = 8
    Unknown = 9


class FirewallEnum:
    def Parse(enumType: Type, enumText: str) -> Object: ...
    @overload
    def ToString(enumType: Type, enumValue: Object) -> str: ...


class FirewallProfile:
    Public = 0
    Private = 1
    Domain = 2
    Unknown = 3


class FirewallRule(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: PolicySetting): ...
    @property
    def Action(self) -> FirewallRuleAction: ...
    @property
    def Active(self) -> bool: ...
    @property
    def ActiveSpecified(self) -> bool: ...
    @property
    def App(self) -> str: ...
    @property
    def Desc(self) -> str: ...
    @property
    def Dir(self) -> TrafficDirection: ...
    @property
    def Edge(self) -> bool: ...
    @property
    def EdgeSpecified(self) -> bool: ...
    @property
    def EmbedCtxt(self) -> str: ...
    @property
    def ICMP4(self) -> Collection: ...
    @property
    def ICMP6(self) -> Collection: ...
    @property
    def IF(self) -> Collection: ...
    @property
    def IFType(self) -> Collection: ...
    @property
    def LA4(self) -> Collection: ...
    @property
    def LA6(self) -> Collection: ...
    @property
    def LPort(self) -> Collection: ...
    @property
    def LSM(self) -> bool: ...
    @property
    def LSMSpecified(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Platform(self) -> Collection: ...
    @property
    def Profile(self) -> Collection: ...
    @property
    def Protocol(self) -> str: ...
    @property
    def RA4(self) -> Collection: ...
    @property
    def RA6(self) -> Collection: ...
    @property
    def RMAuth(self) -> str: ...
    @property
    def RPort(self) -> Collection: ...
    @property
    def RUAuth(self) -> str: ...
    @property
    def Security(self) -> SecurityLevel: ...
    @property
    def SecuritySpecified(self) -> bool: ...
    @property
    def Svc(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Action.setter
    def Action(self, value: FirewallRuleAction) -> None: ...
    @Active.setter
    def Active(self, value: bool) -> None: ...
    @ActiveSpecified.setter
    def ActiveSpecified(self, value: bool) -> None: ...
    @App.setter
    def App(self, value: str) -> None: ...
    @Desc.setter
    def Desc(self, value: str) -> None: ...
    @Dir.setter
    def Dir(self, value: TrafficDirection) -> None: ...
    @Edge.setter
    def Edge(self, value: bool) -> None: ...
    @EdgeSpecified.setter
    def EdgeSpecified(self, value: bool) -> None: ...
    @EmbedCtxt.setter
    def EmbedCtxt(self, value: str) -> None: ...
    @ICMP4.setter
    def ICMP4(self, value: Collection) -> None: ...
    @ICMP6.setter
    def ICMP6(self, value: Collection) -> None: ...
    @IF.setter
    def IF(self, value: Collection) -> None: ...
    @IFType.setter
    def IFType(self, value: Collection) -> None: ...
    @LA4.setter
    def LA4(self, value: Collection) -> None: ...
    @LA6.setter
    def LA6(self, value: Collection) -> None: ...
    @LPort.setter
    def LPort(self, value: Collection) -> None: ...
    @LSM.setter
    def LSM(self, value: bool) -> None: ...
    @LSMSpecified.setter
    def LSMSpecified(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Platform.setter
    def Platform(self, value: Collection) -> None: ...
    @Profile.setter
    def Profile(self, value: Collection) -> None: ...
    @Protocol.setter
    def Protocol(self, value: str) -> None: ...
    @RA4.setter
    def RA4(self, value: Collection) -> None: ...
    @RA6.setter
    def RA6(self, value: Collection) -> None: ...
    @RMAuth.setter
    def RMAuth(self, value: str) -> None: ...
    @RPort.setter
    def RPort(self, value: Collection) -> None: ...
    @RUAuth.setter
    def RUAuth(self, value: str) -> None: ...
    @Security.setter
    def Security(self, value: SecurityLevel) -> None: ...
    @SecuritySpecified.setter
    def SecuritySpecified(self, value: bool) -> None: ...
    @Svc.setter
    def Svc(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...


class FirewallRuleAction:
    Allow = 0
    Block = 1
    ByPass = 2
    Unknown = 3


class GlobalSettings:
    def __init__(self): ...
    @property
    def DisableStatefulFTP(self) -> BooleanSetting: ...
    @property
    def DisableStatefulPPTP(self) -> BooleanSetting: ...
    @property
    def IPSecExempt(self) -> UnsignedIntSetting: ...
    @property
    def IPSecThroughNAT(self) -> UnsignedIntSetting: ...
    @property
    def PolicyVersion(self) -> UnsignedIntSetting: ...
    @property
    def PresharedKeyEncoding(self) -> UnsignedIntSetting: ...
    @property
    def SAIdlTime(self) -> UnsignedIntSetting: ...
    @property
    def StrongCRLCheck(self) -> UnsignedIntSetting: ...
    @DisableStatefulFTP.setter
    def DisableStatefulFTP(self, value: BooleanSetting) -> None: ...
    @DisableStatefulPPTP.setter
    def DisableStatefulPPTP(self, value: BooleanSetting) -> None: ...
    @IPSecExempt.setter
    def IPSecExempt(self, value: UnsignedIntSetting) -> None: ...
    @IPSecThroughNAT.setter
    def IPSecThroughNAT(self, value: UnsignedIntSetting) -> None: ...
    @PolicyVersion.setter
    def PolicyVersion(self, value: UnsignedIntSetting) -> None: ...
    @PresharedKeyEncoding.setter
    def PresharedKeyEncoding(self, value: UnsignedIntSetting) -> None: ...
    @SAIdlTime.setter
    def SAIdlTime(self, value: UnsignedIntSetting) -> None: ...
    @StrongCRLCheck.setter
    def StrongCRLCheck(self, value: UnsignedIntSetting) -> None: ...


class HashAlgorithm:
    MD5 = 0
    SHA1 = 1
    Unknown = 2


class InterfaceType:
    Wireless = 0
    RemoteAccess = 1
    LAN = 2
    Unknown = 3


class KeyExchangeAlgorithm:
    DH1 = 0
    DH2 = 1
    ECDH256 = 2
    ECDH384 = 3
    DH2048 = 4
    SHA256 = 5
    SHA384 = 6
    Unknown = 7


class PerfectForwardSecrecy:
    Disable = 0
    EnabledDHFromPhase1 = 1
    ReKeyDH1 = 2
    ReKeyDH2 = 3
    ReKeyDH2048 = 4
    ReKeyECDH256 = 5
    ReKeyECDH384 = 6
    Unknown = 7


class PerProfileSettings:
    def __init__(self): ...
    @property
    def AllowLocalIPsecPolicyMerge(self) -> BooleanSetting: ...
    @property
    def AllowLocalPolicyMerge(self) -> BooleanSetting: ...
    @property
    def DefaultInboundAction(self) -> BooleanSetting: ...
    @property
    def DefaultOutboundAction(self) -> BooleanSetting: ...
    @property
    def DisabledInterfaces(self) -> StringSetting: ...
    @property
    def DisableNotifications(self) -> BooleanSetting: ...
    @property
    def DisableStealthMode(self) -> BooleanSetting: ...
    @property
    def DisableUnicastResponsesToMulticastBroadcast(self) -> BooleanSetting: ...
    @property
    def DoNotAllowExceptions(self) -> BooleanSetting: ...
    @property
    def EnableFirewall(self) -> BooleanSetting: ...
    @property
    def LogDroppedPackets(self) -> BooleanSetting: ...
    @property
    def LogFilePath(self) -> StringSetting: ...
    @property
    def LogFileSize(self) -> UnsignedIntSetting: ...
    @property
    def LogIgnoredRules(self) -> BooleanSetting: ...
    @property
    def LogSuccessfulConnections(self) -> BooleanSetting: ...
    @AllowLocalIPsecPolicyMerge.setter
    def AllowLocalIPsecPolicyMerge(self, value: BooleanSetting) -> None: ...
    @AllowLocalPolicyMerge.setter
    def AllowLocalPolicyMerge(self, value: BooleanSetting) -> None: ...
    @DefaultInboundAction.setter
    def DefaultInboundAction(self, value: BooleanSetting) -> None: ...
    @DefaultOutboundAction.setter
    def DefaultOutboundAction(self, value: BooleanSetting) -> None: ...
    @DisabledInterfaces.setter
    def DisabledInterfaces(self, value: StringSetting) -> None: ...
    @DisableNotifications.setter
    def DisableNotifications(self, value: BooleanSetting) -> None: ...
    @DisableStealthMode.setter
    def DisableStealthMode(self, value: BooleanSetting) -> None: ...
    @DisableUnicastResponsesToMulticastBroadcast.setter
    def DisableUnicastResponsesToMulticastBroadcast(self, value: BooleanSetting) -> None: ...
    @DoNotAllowExceptions.setter
    def DoNotAllowExceptions(self, value: BooleanSetting) -> None: ...
    @EnableFirewall.setter
    def EnableFirewall(self, value: BooleanSetting) -> None: ...
    @LogDroppedPackets.setter
    def LogDroppedPackets(self, value: BooleanSetting) -> None: ...
    @LogFilePath.setter
    def LogFilePath(self, value: StringSetting) -> None: ...
    @LogFileSize.setter
    def LogFileSize(self, value: UnsignedIntSetting) -> None: ...
    @LogIgnoredRules.setter
    def LogIgnoredRules(self, value: BooleanSetting) -> None: ...
    @LogSuccessfulConnections.setter
    def LogSuccessfulConnections(self, value: BooleanSetting) -> None: ...


class Protocol:
    AH = 0
    ESP = 1
    AHESP = 2
    Unknown = 3


class SecurityLevel:
    Authenticate = 0
    AuthenticateEncrypt = 1
    Unknown = 2


class StringSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: PolicySetting, value: str): ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class TrafficDirection:
    In = 0
    Out = 1
    Unknown = 2


class UnsignedIntSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: PolicySetting, value: UInt32): ...
    @property
    def Value(self) -> UInt32: ...
    @Value.setter
    def Value(self, value: UInt32) -> None: ...


class WindowsFirewallSetting(PolicySetting):
    def __init__(self): ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> None: ...


class WindowsFirewallSettings(GPOExtension):
    def __init__(self): ...
    @property
    def ConnectionSecurityRules(self) -> Collection: ...
    @property
    def DefaultPhase1AuthenticationSet(self) -> ConnectionSecurityAuthenticationSet: ...
    @property
    def DefaultPhase1CryptoSet(self) -> ConnectionSecurityPhase1CryptographicSet: ...
    @property
    def DefaultPhase2AuthenticationSet(self) -> ConnectionSecurityAuthenticationSet: ...
    @property
    def DefaultPhase2CryptoSet(self) -> ConnectionSecurityPhase2CryptographicSet: ...
    @property
    def DomainProfile(self) -> PerProfileSettings: ...
    @property
    def GlobalSettings(self) -> GlobalSettings: ...
    @property
    def InboundFirewallRules(self) -> Collection: ...
    @property
    def OutboundFirewallRules(self) -> Collection: ...
    @property
    def Phase1AuthenticationSets(self) -> Collection: ...
    @property
    def Phase2AuthenticationSets(self) -> Collection: ...
    @property
    def Phase2CryptoSets(self) -> Collection: ...
    @property
    def PrivateProfile(self) -> PerProfileSettings: ...
    @property
    def PublicProfile(self) -> PerProfileSettings: ...
    @overload
    def Initialize(self, context: ReportingContext) -> None: ...
    @overload
    def Initialize(self, regFirewallSettings: ArrayList, context: ReportingContext) -> None: ...
    @ConnectionSecurityRules.setter
    def ConnectionSecurityRules(self, value: Collection) -> None: ...
    @DefaultPhase1AuthenticationSet.setter
    def DefaultPhase1AuthenticationSet(self, value: ConnectionSecurityAuthenticationSet) -> None: ...
    @DefaultPhase1CryptoSet.setter
    def DefaultPhase1CryptoSet(self, value: ConnectionSecurityPhase1CryptographicSet) -> None: ...
    @DefaultPhase2AuthenticationSet.setter
    def DefaultPhase2AuthenticationSet(self, value: ConnectionSecurityAuthenticationSet) -> None: ...
    @DefaultPhase2CryptoSet.setter
    def DefaultPhase2CryptoSet(self, value: ConnectionSecurityPhase2CryptographicSet) -> None: ...
    @DomainProfile.setter
    def DomainProfile(self, value: PerProfileSettings) -> None: ...
    @GlobalSettings.setter
    def GlobalSettings(self, value: GlobalSettings) -> None: ...
    @InboundFirewallRules.setter
    def InboundFirewallRules(self, value: Collection) -> None: ...
    @OutboundFirewallRules.setter
    def OutboundFirewallRules(self, value: Collection) -> None: ...
    @Phase1AuthenticationSets.setter
    def Phase1AuthenticationSets(self, value: Collection) -> None: ...
    @Phase2AuthenticationSets.setter
    def Phase2AuthenticationSets(self, value: Collection) -> None: ...
    @Phase2CryptoSets.setter
    def Phase2CryptoSets(self, value: Collection) -> None: ...
    @PrivateProfile.setter
    def PrivateProfile(self, value: PerProfileSettings) -> None: ...
    @PublicProfile.setter
    def PublicProfile(self, value: PerProfileSettings) -> None: ...
