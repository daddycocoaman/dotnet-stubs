from typing import Tuple, Set, Iterable, List


class NrptGlobalSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: PolicySetting): ...
    @property
    def Fallback(self) -> Nullable: ...
    @property
    def Nla(self) -> Nullable: ...
    @property
    def Query(self) -> Nullable: ...
    @Fallback.setter
    def Fallback(self, value: Nullable) -> None: ...
    @Nla.setter
    def Nla(self, value: Nullable) -> None: ...
    @Query.setter
    def Query(self, value: Nullable) -> None: ...


class NrptRuleSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, regSetting: PolicySetting): ...
    @property
    def Ca(self) -> str: ...
    @property
    def Config(self) -> Nullable: ...
    @property
    def DirectDnsServers(self) -> str: ...
    @property
    def DirectEncryption(self) -> Nullable: ...
    @property
    def DirectIpsec(self) -> Nullable: ...
    @property
    def DirectProxyName(self) -> str: ...
    @property
    def DirectProxyType(self) -> Nullable: ...
    @property
    def DnsDnssec(self) -> Nullable: ...
    @property
    def DnsEncryption(self) -> Nullable: ...
    @property
    def DnsIpsec(self) -> Nullable: ...
    @property
    def Encoding(self) -> Nullable: ...
    @property
    def GenericDnsServers(self) -> str: ...
    @property
    def Name(self) -> Set(str): ...
    @property
    def Version(self) -> Nullable: ...
    @Ca.setter
    def Ca(self, value: str) -> None: ...
    @Config.setter
    def Config(self, value: Nullable) -> None: ...
    @DirectDnsServers.setter
    def DirectDnsServers(self, value: str) -> None: ...
    @DirectEncryption.setter
    def DirectEncryption(self, value: Nullable) -> None: ...
    @DirectIpsec.setter
    def DirectIpsec(self, value: Nullable) -> None: ...
    @DirectProxyName.setter
    def DirectProxyName(self, value: str) -> None: ...
    @DirectProxyType.setter
    def DirectProxyType(self, value: Nullable) -> None: ...
    @DnsDnssec.setter
    def DnsDnssec(self, value: Nullable) -> None: ...
    @DnsEncryption.setter
    def DnsEncryption(self, value: Nullable) -> None: ...
    @DnsIpsec.setter
    def DnsIpsec(self, value: Nullable) -> None: ...
    @Encoding.setter
    def Encoding(self, value: Nullable) -> None: ...
    @GenericDnsServers.setter
    def GenericDnsServers(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: Set(str)) -> None: ...
    @Version.setter
    def Version(self, value: Nullable) -> None: ...


class NrptSettings(GPOExtension):
    def __init__(self): ...
    @property
    def Global(self) -> NrptGlobalSetting: ...
    @property
    def Rules(self) -> ArrayList: ...
    @overload
    def Initialize(self, context: ReportingContext) -> None: ...
    @overload
    def Initialize(self, regNrptSettings: ArrayList, context: ReportingContext) -> None: ...
    def IsSetGlobal(self) -> bool: ...
    def IsSetRules(self) -> bool: ...
    @Global.setter
    def Global(self, value: NrptGlobalSetting) -> None: ...
    @Rules.setter
    def Rules(self, value: ArrayList) -> None: ...
