from typing import Tuple, Set, Iterable, List


class AppliedResult:
    def __init__(self): ...
    @property
    def ApplyCause(self) -> ApplyCauseValue: ...
    @property
    def Eligibility(self) -> EligibilityValue: ...
    @property
    def LanguageMatch(self) -> LanguageMatch: ...
    @property
    def OnDemandEntity(self) -> OnDemandEntity: ...
    @ApplyCause.setter
    def ApplyCause(self, value: ApplyCauseValue) -> None: ...
    @Eligibility.setter
    def Eligibility(self, value: EligibilityValue) -> None: ...
    @LanguageMatch.setter
    def LanguageMatch(self, value: LanguageMatch) -> None: ...
    @OnDemandEntity.setter
    def OnDemandEntity(self, value: OnDemandEntity) -> None: ...


class ApplyCauseValue:
    none = 0
    assigned = 1
    ARPinstall = 2
    profile = 3
    fileextension = 4
    clsid = 5
    upgrade = 6
    progid = 7
    redeploy = 8


class ARPResult:
    def __init__(self): ...


class DeploymentTypeValue:
    #None = 0
    Assign = 1
    Publish = 2
    Install = 3


class EligibilityValue:
    #None = 0
    assigned = 1
    profile = 2
    upgrades = 3
    conditional = 4


class InstallationUILevel:
    #None = 0
    Basic = 1
    Maximum = 2


class ItemChoiceType:
    OnDemandClsid = 0
    OnDemandFileext = 1
    OnDemandProgid = 2


class LanguageMatch:
    NoLanguage = 0
    system = 1
    english = 2
    ignore = 3
    neutral = 4
    none = 5


class LossOfScopeAction:
    #None = 0
    Uninstall = 1
    Unmanage = 2


class MsiPackage(PackageBase):
    def __init__(self): ...
    @property
    def DeploymentCount(self) -> UInt32: ...
    @property
    def DeploymentType(self) -> DeploymentTypeValue: ...
    @property
    def InstallationUILevel(self) -> InstallationUILevel: ...
    @property
    def IsUpgradedBy(self) -> MsiPackagesUpgradedBy: ...
    @property
    def LossOfScopeAction(self) -> LossOfScopeAction: ...
    @property
    def ProductId(self) -> str: ...
    @property
    def ScriptPath(self) -> str: ...
    @property
    def Transforms(self) -> Set(str): ...
    @property
    def UninstallUnmanaged(self) -> bool: ...
    @property
    def Upgrades(self) -> MsiPackageUpgrades: ...
    @DeploymentCount.setter
    def DeploymentCount(self, value: UInt32) -> None: ...
    @DeploymentType.setter
    def DeploymentType(self, value: DeploymentTypeValue) -> None: ...
    @InstallationUILevel.setter
    def InstallationUILevel(self, value: InstallationUILevel) -> None: ...
    @IsUpgradedBy.setter
    def IsUpgradedBy(self, value: MsiPackagesUpgradedBy) -> None: ...
    @LossOfScopeAction.setter
    def LossOfScopeAction(self, value: LossOfScopeAction) -> None: ...
    @ProductId.setter
    def ProductId(self, value: str) -> None: ...
    @ScriptPath.setter
    def ScriptPath(self, value: str) -> None: ...
    @Transforms.setter
    def Transforms(self, value: Set(str)) -> None: ...
    @UninstallUnmanaged.setter
    def UninstallUnmanaged(self, value: bool) -> None: ...
    @Upgrades.setter
    def Upgrades(self, value: MsiPackageUpgrades) -> None: ...


class MsiPackagesUpgradedBy:
    def __init__(self): ...
    @property
    def Packages(self) -> ArrayList: ...
    @Packages.setter
    def Packages(self, value: ArrayList) -> None: ...


class MsiPackageUpgrades:
    def __init__(self): ...
    @property
    def Mandatory(self) -> bool: ...
    @property
    def Packages(self) -> ArrayList: ...
    @Mandatory.setter
    def Mandatory(self, value: bool) -> None: ...
    @Packages.setter
    def Packages(self, value: ArrayList) -> None: ...


class OnDemandEntity:
    def __init__(self): ...
    def ContainSettings(self) -> bool: ...
    @property
    def Item(self) -> str: ...
    @property
    def ItemElementName(self) -> ItemChoiceType: ...
    @Item.setter
    def Item(self, value: str) -> None: ...
    @ItemElementName.setter
    def ItemElementName(self, value: ItemChoiceType) -> None: ...


class PackageBase(PolicySetting):
    @property
    def Allowx86Onia64(self) -> bool: ...
    @property
    def Architecture(self) -> UInt16: ...
    @property
    def AutoInstall(self) -> bool: ...
    @property
    def Categories(self) -> Set(str): ...
    @property
    def DisplayInARP(self) -> bool: ...
    @property
    def Identifier(self) -> str: ...
    @property
    def IgnoreLanguage(self) -> bool: ...
    @property
    def IncludeCOM(self) -> bool: ...
    @property
    def LanguageId(self) -> UInt16: ...
    @property
    def MajorVersion(self) -> UInt32: ...
    @property
    def MinorVersion(self) -> UInt32: ...
    @property
    def Name(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def RSoP(self) -> Object: ...
    @property
    def SecurityDescriptor(self) -> SecurityDescriptor: ...
    @property
    def SupportURL(self) -> str: ...
    @Allowx86Onia64.setter
    def Allowx86Onia64(self, value: bool) -> None: ...
    @Architecture.setter
    def Architecture(self, value: UInt16) -> None: ...
    @AutoInstall.setter
    def AutoInstall(self, value: bool) -> None: ...
    @Categories.setter
    def Categories(self, value: Set(str)) -> None: ...
    @DisplayInARP.setter
    def DisplayInARP(self, value: bool) -> None: ...
    @Identifier.setter
    def Identifier(self, value: str) -> None: ...
    @IgnoreLanguage.setter
    def IgnoreLanguage(self, value: bool) -> None: ...
    @IncludeCOM.setter
    def IncludeCOM(self, value: bool) -> None: ...
    @LanguageId.setter
    def LanguageId(self, value: UInt16) -> None: ...
    @MajorVersion.setter
    def MajorVersion(self, value: UInt32) -> None: ...
    @MinorVersion.setter
    def MinorVersion(self, value: UInt32) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @RSoP.setter
    def RSoP(self, value: Object) -> None: ...
    @SecurityDescriptor.setter
    def SecurityDescriptor(self, value: SecurityDescriptor) -> None: ...
    @SupportURL.setter
    def SupportURL(self, value: str) -> None: ...


class PackageInfo:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, identifier: str): ...
    @overload
    def __init__(self, gpoIdentifier: GPOIdentifier, gpoName: str, name: str, identifier: str): ...
    @property
    def GPOIdentifier(self) -> GPOIdentifier: ...
    @property
    def GPOName(self) -> str: ...
    @property
    def Identifier(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @GPOIdentifier.setter
    def GPOIdentifier(self, value: GPOIdentifier) -> None: ...
    @GPOName.setter
    def GPOName(self, value: str) -> None: ...
    @Identifier.setter
    def Identifier(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class RemovalCause:
    none = 0
    upgraded = 2
    administrative = 3
    user = 4
    scope = 5
    transform_conflict = 6
    product_conflict = 7
    profile = 8


class RemovalTypeValue:
    none = 0
    upgraded = 2
    uninstalled = 3
    unmanaged = 4


class RemovedResult:
    def __init__(self): ...
    @property
    def RemovalCause(self) -> RemovalCause: ...
    @property
    def RemovalType(self) -> RemovalTypeValue: ...
    @property
    def RemovingApplication(self) -> str: ...
    @RemovalCause.setter
    def RemovalCause(self, value: RemovalCause) -> None: ...
    @RemovalType.setter
    def RemovalType(self, value: RemovalTypeValue) -> None: ...
    @RemovingApplication.setter
    def RemovingApplication(self, value: str) -> None: ...


class SICategories:
    pass


class SIRsopReader:
    pass


class SITypes:
    pass


class SoftwareInstallationSettings(GPOExtension):
    def __init__(self): ...
    @property
    def Items(self) -> Set(PackageBase): ...
    def Initialize(self, context: ReportingContext) -> None: ...
    @Items.setter
    def Items(self, value: Set(PackageBase)) -> None: ...


class ZapPackage(PackageBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, appmgmtObject: ManagementObject, server: str): ...
    @overload
    def __init__(self, dsPackage: DirectoryEntry, server: str): ...
