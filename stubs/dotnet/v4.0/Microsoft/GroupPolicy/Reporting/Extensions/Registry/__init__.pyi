from typing import Tuple, Set, Iterable, List


class ActionList:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, admClass: PolicyClass, registryKey: str): ...
    @property
    def ActionItem(self) -> ArrayList: ...
    @ActionItem.setter
    def ActionItem(self, value: ArrayList) -> None: ...


class AdditionalPolicyElement(PolicySetting):
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def ListBox(self) -> PartListBox: ...
    @property
    def Name(self) -> str: ...
    @property
    def State(self) -> PolicyState: ...
    @Category.setter
    def Category(self, value: str) -> None: ...
    @ListBox.setter
    def ListBox(self, value: PartListBox) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @State.setter
    def State(self, value: PolicyState) -> None: ...


class AdmNamedElement:
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def UpdateNames(self, strSection: StringSection, strParentName: str) -> None: ...


class AdmSettings:
    def __init__(self): ...
    @property
    def AdditionalPolicyElementValues(self) -> ArrayList: ...
    @property
    def PolicyValues(self) -> ArrayList: ...
    @AdditionalPolicyElementValues.setter
    def AdditionalPolicyElementValues(self, value: ArrayList) -> None: ...
    @PolicyValues.setter
    def PolicyValues(self, value: ArrayList) -> None: ...


class AdmToken:
    def __init__(self, strTokenValue: str, tokenType: AdmTokenType): ...


class AdmTokenizer:
    def Dispose(self) -> None: ...


class AdmTokenType:
    KYWD_ID_POUNDIF = 0
    KYWD_ID_POUNDENDIF = 1
    KYWD_ID_KEYNAME = 2
    KYWD_ID_VALUENAME = 3
    KYWD_ID_CATEGORY = 4
    KYWD_ID_POLICY = 5
    KYWD_ID_PART = 6
    KYWD_ID_CHECKBOX = 7
    KYWD_IDEXT = 8
    KYWD_ID_EDITTEXT = 9
    KYWD_ID_NUMERIC = 10
    KYWD_ID_DEFCHECKED = 11
    KYWD_ID_MAXLENGTH = 12
    KYWD_ID_MIN = 13
    KYWD_ID_MAX = 14
    KYWD_ID_SPIN = 15
    KYWD_ID_REQUIRED = 16
    KYWD_ID_OEMCONVERT = 17
    KYWD_ID_CLASS = 18
    KYWD_ID_USER = 19
    KYWD_ID_MACHINE = 20
    KYWD_IDXTCONVERT = 21
    KYWD_ID_VALUE = 22
    KYWD_ID_VALUEON = 23
    KYWD_ID_VALUEOFF = 24
    KYWD_ID_ACTIONLIST = 25
    KYWD_ID_ACTIONLISTON = 26
    KYWD_ID_ACTIONLISTOFF = 27
    KYWD_ID_DELETE = 28
    KYWD_ID_COMBOBOX = 29
    KYWD_ID_SUGGESTIONS = 30
    KYWD_ID_DROPDOWNLIST = 31
    KYWD_ID_NAME = 32
    KYWD_ID_ITEMLIST = 33
    KYWD_ID_DEFAULT = 34
    KYWD_ID_SOFT = 35
    KYWD_ID_LISTBOX = 36
    KYWD_ID_VALUEPREFIX = 37
    KYWD_ID_ADDITIVE = 38
    KYWD_ID_EXPLICITVALUE = 39
    KYWD_ID_VERSION = 40
    KYWD_ID_GT = 41
    KYWD_ID_GTE = 42
    KYWD_ID_LT = 43
    KYWD_ID_LTE = 44
    KYWD_ID_EQ = 45
    KYWD_ID_NE = 46
    KYWD_ID_END = 47
    KYWD_ID_NOSORT = 48
    KYWD_ID_EXPANDABLETEXT = 49
    KYWD_ID_HELP = 50
    KYWD_ID_CLIENTEXT = 51
    KYWD_ID_SUPPORTED = 52
    KYWD_ID_EXPLAIN = 53
    KYWD_ID_STRINGSECTION = 54
    ID_STRING = 55
    ID_STRINGTABLEENTRY = 56


class CommentStore:
    @overload
    def __init__(self, context: GPOContext, reportLanguage: str): ...
    @overload
    def __init__(self, CmtxFilePath: str, reportLanguage: str): ...
    def GetComment(self, policyNamespace: str, policyName: str) -> str: ...
    def Reload(self) -> None: ...


class IAdmNamedElement:
    def UpdateNames(self, strSection: StringSection, strParentName: str) -> None: ...


class IConfigurablePolicyElement:
    def ClearStoredState(self) -> None: ...
    def DecrementOnOffValues(self, bEnabled: bool) -> None: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objChildElement: Object, bEnabled: bool) -> PolicyElement: ...


class Item(AdmNamedElement):
    def __init__(self): ...
    def ClearStoredState(self) -> None: ...
    def DecrementOnOffValues(self, bEnabled: bool) -> None: ...
    def GetValues(self) -> Tuple[RegistrySetting, ArrayList]: ...
    def IsDefault(self) -> bool: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objItem: Object, bEnabled: bool) -> PolicyElement: ...


class ItemList:
    def __init__(self): ...
    @property
    def Item(self) -> ArrayList: ...
    @Item.setter
    def Item(self, value: ArrayList) -> None: ...


class ListBoxElement:
    def __init__(self): ...
    @property
    def Data(self) -> str: ...
    @property
    def Item(self) -> str: ...
    @Data.setter
    def Data(self, value: str) -> None: ...
    @Item.setter
    def Item(self, value: str) -> None: ...


class ListBoxValues:
    def __init__(self): ...
    @property
    def Elements(self) -> ArrayList: ...
    @Elements.setter
    def Elements(self, value: ArrayList) -> None: ...


class PartCheckBox(PolicyData):
    def ClearStoredState(self) -> None: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objItem: Object, bEnabled: bool) -> PolicyElement: ...


class PartComboBox(PolicyData):
    def __init__(self): ...
    def ClearStoredState(self) -> None: ...
    @property
    def Value(self) -> str: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objItem: Object, bEnabled: bool) -> PolicyElement: ...


class PartDropDownList(PolicyData):
    def __init__(self): ...
    def ClearStoredState(self) -> None: ...
    @property
    def Value(self) -> Item: ...
    def IsNoSort(self) -> bool: ...
    def IsRequired(self) -> bool: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @Value.setter
    def Value(self, value: Item) -> None: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objItem: Object, bEnabled: bool) -> PolicyElement: ...


class PartEditText(PolicyData):
    def __init__(self): ...
    def ClearStoredState(self) -> None: ...
    @property
    def Value(self) -> str: ...
    def IsExpandableText(self) -> bool: ...
    def IsRequired(self) -> bool: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objChild: Object, bEnabled: bool) -> PolicyElement: ...


class PartListBox(PolicyData):
    def __init__(self): ...
    def ClearStoredState(self) -> None: ...
    @property
    def Additive(self) -> bool: ...
    @property
    def ExplicitValue(self) -> bool: ...
    @property
    def Value(self) -> ListBoxValues: ...
    @property
    def ValuePrefix(self) -> str: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @Additive.setter
    def Additive(self, value: bool) -> None: ...
    @ExplicitValue.setter
    def ExplicitValue(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: ListBoxValues) -> None: ...
    @ValuePrefix.setter
    def ValuePrefix(self, value: str) -> None: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objChild: Object, bEnabled: bool) -> PolicyElement: ...


class PartLongNumeric(PolicyData):
    def __init__(self): ...
    def ClearStoredState(self) -> None: ...
    @property
    def Value(self) -> UInt32: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @Value.setter
    def Value(self, value: UInt32) -> None: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objChild: Object, bEnabled: bool) -> PolicyElement: ...


class PartMultiText(PolicyData):
    def __init__(self): ...
    def ClearStoredState(self) -> None: ...
    @property
    def Value(self) -> Set(str): ...
    def IsRequired(self) -> bool: ...
    def IsShowAsDialog(self) -> bool: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @Value.setter
    def Value(self, value: Set(str)) -> None: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objChild: Object, bEnabled: bool) -> PolicyElement: ...


class PartNumeric(PolicyData):
    def __init__(self): ...
    def ClearStoredState(self) -> None: ...
    @property
    def Value(self) -> UInt32: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @Value.setter
    def Value(self, value: UInt32) -> None: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objChild: Object, bEnabled: bool) -> PolicyElement: ...


class PartText(AdmNamedElement):
    def __init__(self): ...


class PolicyCategory(AdmNamedElement):
    def __init__(self): ...


class PolicyClass(AdmNamedElement):
    def __init__(self): ...
    def GetTokenizer(self) -> AdmTokenizer: ...


class PolicyData(AdmNamedElement):
    def ClearStoredState(self) -> None: ...
    def DecrementOnOffValues(self, bEnabled: bool) -> None: ...
    @property
    def State(self) -> PolicyState: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @State.setter
    def State(self, value: PolicyState) -> None: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objChildElement: Object, bEnabled: bool) -> PolicyElement: ...


class PolicyElement(PolicySetting):
    def __init__(self): ...
    def AdditionalPolicyElements(self) -> ArrayList: ...
    def ClearStoredState(self) -> None: ...
    def DecrementOnOffValues(self, bEnabled: bool) -> None: ...
    @property
    def Category(self) -> str: ...
    @property
    def Comment(self) -> str: ...
    @property
    def Explain(self) -> str: ...
    @property
    def Items(self) -> ArrayList: ...
    @property
    def Name(self) -> str: ...
    @property
    def State(self) -> PolicyState: ...
    @property
    def Supported(self) -> str: ...
    def GetNamespace(self) -> str: ...
    def GetPolicyName(self) -> str: ...
    def NewConfiguredPolicyElement(self) -> Object: ...
    @Category.setter
    def Category(self, value: str) -> None: ...
    @Comment.setter
    def Comment(self, value: str) -> None: ...
    @Explain.setter
    def Explain(self, value: str) -> None: ...
    @Items.setter
    def Items(self, value: ArrayList) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @State.setter
    def State(self, value: PolicyState) -> None: ...
    @Supported.setter
    def Supported(self, value: str) -> None: ...
    def UpdateNames(self, strSection: StringSection, strParentName: str) -> None: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, bEnabled: bool) -> PolicyElement: ...
    @overload
    def UpdateState(self, regSetting: RegistrySetting, objPart: Object, bEnabled: bool) -> PolicyElement: ...


class PolicyState:
    Enabled = 0
    Disabled = 1
    NotConfigured = 2


class PolicyTree:
    def __init__(self): ...
    @property
    def Machine(self) -> PolicyClass: ...
    @property
    def User(self) -> PolicyClass: ...
    def MatchAdmComments(self, comments: CommentStore, scope: GPOScope) -> AdmSettings: ...
    def MatchAdmSettings(self, regSettings: RegistryValues, scope: GPOScope) -> AdmSettings: ...
    @Machine.setter
    def Machine(self, value: PolicyClass) -> None: ...
    @User.setter
    def User(self, value: PolicyClass) -> None: ...


class RegistryConstants:
    pass


class RegistryEntryMapElementValue:
    def __init__(self): ...
    @property
    def ConfigElement(self) -> IConfigurablePolicyElement: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Self(self) -> bool: ...
    @ConfigElement.setter
    def ConfigElement(self, value: IConfigurablePolicyElement) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Self.setter
    def Self(self, value: bool) -> None: ...


class RegistrySetting(PolicySetting):
    def __init__(self): ...
    def Equals(self, objValue: Object) -> bool: ...
    @property
    def AdmSetting(self) -> bool: ...
    @property
    def Item(self) -> Object: ...
    @property
    def KeyPath(self) -> str: ...
    def GetHashCode(self) -> int: ...
    @AdmSetting.setter
    def AdmSetting(self, value: bool) -> None: ...
    @Item.setter
    def Item(self, value: Object) -> None: ...
    @KeyPath.setter
    def KeyPath(self, value: str) -> None: ...


class RegistrySettings(GPOExtension):
    def __init__(self): ...
    @property
    def AdditionalPolicyElementList(self) -> ArrayList: ...
    @property
    def Blocked(self) -> bool: ...
    @property
    def PolicyList(self) -> ArrayList: ...
    @property
    def RegistrySettingList(self) -> ArrayList: ...
    def GetRegistryValue(self) -> ArrayList: ...
    def Initialize(self, context: ReportingContext) -> None: ...
    def InitializedPolicyDefinitions(self) -> bool: ...
    @AdditionalPolicyElementList.setter
    def AdditionalPolicyElementList(self, value: ArrayList) -> None: ...
    @Blocked.setter
    def Blocked(self, value: bool) -> None: ...
    @PolicyList.setter
    def PolicyList(self, value: ArrayList) -> None: ...
    @RegistrySettingList.setter
    def RegistrySettingList(self, value: ArrayList) -> None: ...
    def UsedCentralStore(self) -> bool: ...


class RegistryValue:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, valueName: str, itemValue: UInt32): ...
    @overload
    def __init__(self, valueName: str, itemValue: UInt64): ...
    @overload
    def __init__(self, valueName: str, itemValue: str): ...
    @overload
    def __init__(self, valueName: str, regType: int, objValue: Object): ...
    def Equals(self, objValue: Object) -> bool: ...
    @property
    def Item(self) -> Object: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> RegType: ...
    def GetByteValue(self) -> Set(Byte): ...
    def GetHashCode(self) -> int: ...
    def GetLongNumber(self) -> UInt64: ...
    def GetNumber(self) -> UInt32: ...
    def GetQWord(self) -> Int64: ...
    def GetString(self) -> str: ...
    def GetStringArray(self) -> Set(str): ...
    def GetStrings(self) -> Set(str): ...
    @Item.setter
    def Item(self, value: Object) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: RegType) -> None: ...


class RegistryValues:
    def __init__(self): ...
    @property
    def Value(self) -> ArrayList: ...
    def GetValue(self) -> ArrayList: ...
    def GetValueCopy(self) -> ArrayList: ...
    def IsEmpty(self) -> bool: ...
    def Remove(self, regSetting: RegistrySetting) -> None: ...
    @Value.setter
    def Value(self, value: ArrayList) -> None: ...


class RegType:
    #None = 0
    String = 1
    ExpString = 2
    Number = 4
    MultiString = 7
    LongNumber = 11
    Unknown = 37


class RegUtility:
    pass


class ReportingAdmException(ReportingDataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, exception: ReportingDataException): ...
    @overload
    def __init__(self, msgId: str): ...
    @overload
    def __init__(self, msgId: str, exception: Exception): ...
    @overload
    def __init__(self, msgId: str, source: str, details: str, innerException: Exception): ...


class ReportingAdmxException(ReportingDataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, exception: ReportingDataException): ...
    @overload
    def __init__(self, msgId: str): ...
    @overload
    def __init__(self, errors: ArrayList): ...
    @overload
    def __init__(self, msgId: str, exception: Exception): ...
    @overload
    def __init__(self, msgId: str, source: str, details: str, innerException: Exception): ...
    @property
    def ParseErrors(self) -> ArrayList: ...


class StringSection:
    pass


class UnknownType:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, iType: UInt64, iData: Set(Byte)): ...
    def Equals(self, objValue: Object) -> bool: ...
    @property
    def Data(self) -> Set(Byte): ...
    @property
    def Type(self) -> UInt64: ...
    def GetHashCode(self) -> int: ...
    @Data.setter
    def Data(self, value: Set(Byte)) -> None: ...
    @Type.setter
    def Type(self, value: UInt64) -> None: ...
