from typing import Tuple, Set, Iterable, List


class networkItemType:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def NetworkName(self) -> str: ...
    @property
    def NetworkType(self) -> networkTypeType: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @NetworkName.setter
    def NetworkName(self, value: str) -> None: ...
    @NetworkType.setter
    def NetworkType(self, value: networkTypeType) -> None: ...


class networkTypeType:
    IBSS = 0
    ESS = 1


class OneX:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def AuthMode(self) -> OneXAuthMode: ...
    @property
    def AuthModeSpecified(self) -> bool: ...
    @property
    def AuthPeriod(self) -> str: ...
    @property
    def CacheUserData(self) -> bool: ...
    @property
    def CacheUserDataSpecified(self) -> bool: ...
    @property
    def EapConfig(self) -> OneXEapConfig: ...
    @property
    def HeldPeriod(self) -> str: ...
    @property
    def MaxAuthFailures(self) -> str: ...
    @property
    def MaxStart(self) -> str: ...
    @property
    def SingleSignOn(self) -> OneXSSO: ...
    @property
    def StartPeriod(self) -> str: ...
    @property
    def SupplicantMode(self) -> OneXSupplicantMode: ...
    @property
    def SupplicantModeSpecified(self) -> bool: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @AuthMode.setter
    def AuthMode(self, value: OneXAuthMode) -> None: ...
    @AuthModeSpecified.setter
    def AuthModeSpecified(self, value: bool) -> None: ...
    @AuthPeriod.setter
    def AuthPeriod(self, value: str) -> None: ...
    @CacheUserData.setter
    def CacheUserData(self, value: bool) -> None: ...
    @CacheUserDataSpecified.setter
    def CacheUserDataSpecified(self, value: bool) -> None: ...
    @EapConfig.setter
    def EapConfig(self, value: OneXEapConfig) -> None: ...
    @HeldPeriod.setter
    def HeldPeriod(self, value: str) -> None: ...
    @MaxAuthFailures.setter
    def MaxAuthFailures(self, value: str) -> None: ...
    @MaxStart.setter
    def MaxStart(self, value: str) -> None: ...
    @SingleSignOn.setter
    def SingleSignOn(self, value: OneXSSO) -> None: ...
    @StartPeriod.setter
    def StartPeriod(self, value: str) -> None: ...
    @SupplicantMode.setter
    def SupplicantMode(self, value: OneXSupplicantMode) -> None: ...
    @SupplicantModeSpecified.setter
    def SupplicantModeSpecified(self, value: bool) -> None: ...


class OneXAuthMode:
    machineOrUser = 0
    machine = 1
    user = 2
    guest = 3


class OneXEapConfig:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...


class OneXSSO:
    def __init__(self): ...
    @property
    def AllowAdditionalDialogs(self) -> bool: ...
    @property
    def AllowAdditionalDialogsSpecified(self) -> bool: ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def MaxDelay(self) -> str: ...
    @property
    def MaxDelaySpecified(self) -> bool: ...
    @property
    def MaxDelayWithAdditionalDialogs(self) -> str: ...
    @property
    def MaxDelayWithAdditionalDialogsSpecified(self) -> bool: ...
    @property
    def SsoType(self) -> SingleSignOnType: ...
    @property
    def UserBasedVirtualLan(self) -> bool: ...
    @property
    def UserBasedVirtualLanSpecified(self) -> bool: ...
    @AllowAdditionalDialogs.setter
    def AllowAdditionalDialogs(self, value: bool) -> None: ...
    @AllowAdditionalDialogsSpecified.setter
    def AllowAdditionalDialogsSpecified(self, value: bool) -> None: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @MaxDelay.setter
    def MaxDelay(self, value: str) -> None: ...
    @MaxDelaySpecified.setter
    def MaxDelaySpecified(self, value: bool) -> None: ...
    @MaxDelayWithAdditionalDialogs.setter
    def MaxDelayWithAdditionalDialogs(self, value: str) -> None: ...
    @MaxDelayWithAdditionalDialogsSpecified.setter
    def MaxDelayWithAdditionalDialogsSpecified(self, value: bool) -> None: ...
    @SsoType.setter
    def SsoType(self, value: SingleSignOnType) -> None: ...
    @UserBasedVirtualLan.setter
    def UserBasedVirtualLan(self, value: bool) -> None: ...
    @UserBasedVirtualLanSpecified.setter
    def UserBasedVirtualLanSpecified(self, value: bool) -> None: ...


class OneXSupplicantMode:
    inhibitTransmission = 0
    includeLearning = 1
    compliant = 2


class SingleSignOnType:
    preLogon = 0
    postLogon = 1


class StoreInterface:
    def GetPolicyXmlFromAD(policyName: str, policyDSPath: str, policyType: L2GPPolicyType) -> XmlDocument: ...
    def GetPolicyXmlFromWmi(policyId: str, wmiNamespace: str, policyType: L2GPPolicyType) -> XmlDocument: ...


class WLanPolicy:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def Description(self) -> str: ...
    @property
    def GlobalFlags(self) -> WLanPolicyGlobalFlags: ...
    @property
    def Name(self) -> str: ...
    @property
    def NetworkFilter(self) -> WLanPolicyNetworkFilter: ...
    @property
    def PolicyType(self) -> WLanPolicyType: ...
    @property
    def ProfileList(self) -> WLanPolicyProfileList: ...
    @property
    def Profiles(self) -> Set(WLanProfile): ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @GlobalFlags.setter
    def GlobalFlags(self, value: WLanPolicyGlobalFlags) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @NetworkFilter.setter
    def NetworkFilter(self, value: WLanPolicyNetworkFilter) -> None: ...
    @PolicyType.setter
    def PolicyType(self, value: WLanPolicyType) -> None: ...
    @ProfileList.setter
    def ProfileList(self, value: WLanPolicyProfileList) -> None: ...
    @Profiles.setter
    def Profiles(self, value: Set(WLanProfile)) -> None: ...


class WLanPolicyGlobalFlags:
    def __init__(self): ...
    @property
    def AllowEveryoneToCreateAllUserProfiles(self) -> bool: ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def BlockPeriod(self) -> str: ...
    @property
    def EnableAutoConfig(self) -> bool: ...
    @property
    def EnableExplicitCreds(self) -> bool: ...
    @property
    def EnableSoftAP(self) -> bool: ...
    @property
    def OnlyUseGPProfilesForAllowedNetworks(self) -> bool: ...
    @property
    def OnlyUseGPProfilesForAllowedNetworksSpecified(self) -> bool: ...
    @property
    def ShowDeniedNetwork(self) -> bool: ...
    @AllowEveryoneToCreateAllUserProfiles.setter
    def AllowEveryoneToCreateAllUserProfiles(self, value: bool) -> None: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @BlockPeriod.setter
    def BlockPeriod(self, value: str) -> None: ...
    @EnableAutoConfig.setter
    def EnableAutoConfig(self, value: bool) -> None: ...
    @EnableExplicitCreds.setter
    def EnableExplicitCreds(self, value: bool) -> None: ...
    @EnableSoftAP.setter
    def EnableSoftAP(self, value: bool) -> None: ...
    @OnlyUseGPProfilesForAllowedNetworks.setter
    def OnlyUseGPProfilesForAllowedNetworks(self, value: bool) -> None: ...
    @OnlyUseGPProfilesForAllowedNetworksSpecified.setter
    def OnlyUseGPProfilesForAllowedNetworksSpecified(self, value: bool) -> None: ...
    @ShowDeniedNetwork.setter
    def ShowDeniedNetwork(self, value: bool) -> None: ...


class WLanPolicyNetworkFilter:
    def __init__(self): ...
    @property
    def AllowList(self) -> WLanPolicyNetworkFilterAllowList: ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def BlockList(self) -> WLanPolicyNetworkFilterBlockList: ...
    @property
    def DenyAllESS(self) -> bool: ...
    @property
    def DenyAllESSSpecified(self) -> bool: ...
    @property
    def DenyAllIBSS(self) -> bool: ...
    @property
    def DenyAllIBSSSpecified(self) -> bool: ...
    @AllowList.setter
    def AllowList(self, value: WLanPolicyNetworkFilterAllowList) -> None: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @BlockList.setter
    def BlockList(self, value: WLanPolicyNetworkFilterBlockList) -> None: ...
    @DenyAllESS.setter
    def DenyAllESS(self, value: bool) -> None: ...
    @DenyAllESSSpecified.setter
    def DenyAllESSSpecified(self, value: bool) -> None: ...
    @DenyAllIBSS.setter
    def DenyAllIBSS(self, value: bool) -> None: ...
    @DenyAllIBSSSpecified.setter
    def DenyAllIBSSSpecified(self, value: bool) -> None: ...


class WLanPolicyNetworkFilterAllowList:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def Network(self) -> Set(networkItemType): ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @Network.setter
    def Network(self, value: Set(networkItemType)) -> None: ...


class WLanPolicyNetworkFilterBlockList:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def Network(self) -> Set(networkItemType): ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @Network.setter
    def Network(self, value: Set(networkItemType)) -> None: ...


class WLanPolicyProfileList:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...


class WLanPolicyType:
    Vista = 0
    XP = 1


class WLanProfile:
    def __init__(self): ...
    @property
    def AdHocType(self) -> WLanProfileAdhocType: ...
    @property
    def AdHocTypeSpecified(self) -> bool: ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def AutoSwitch(self) -> bool: ...
    @property
    def AutoSwitchSpecified(self) -> bool: ...
    @property
    def ConnectionMode(self) -> WLanProfileConnectionMode: ...
    @property
    def ConnectionModeSpecified(self) -> bool: ...
    @property
    def ConnectionType(self) -> WLanProfileConnectionType: ...
    @property
    def Ihv(self) -> WLanProfileIhv: ...
    @property
    def Msm(self) -> WLanProfileMsm: ...
    @property
    def Name(self) -> str: ...
    @property
    def SsidConfig(self) -> Set(WLanProfileSsidConfig): ...
    @AdHocType.setter
    def AdHocType(self, value: WLanProfileAdhocType) -> None: ...
    @AdHocTypeSpecified.setter
    def AdHocTypeSpecified(self, value: bool) -> None: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @AutoSwitch.setter
    def AutoSwitch(self, value: bool) -> None: ...
    @AutoSwitchSpecified.setter
    def AutoSwitchSpecified(self, value: bool) -> None: ...
    @ConnectionMode.setter
    def ConnectionMode(self, value: WLanProfileConnectionMode) -> None: ...
    @ConnectionModeSpecified.setter
    def ConnectionModeSpecified(self, value: bool) -> None: ...
    @ConnectionType.setter
    def ConnectionType(self, value: WLanProfileConnectionType) -> None: ...
    @Ihv.setter
    def Ihv(self, value: WLanProfileIhv) -> None: ...
    @Msm.setter
    def Msm(self, value: WLanProfileMsm) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SsidConfig.setter
    def SsidConfig(self, value: Set(WLanProfileSsidConfig)) -> None: ...


class WLanProfileAdhocType:
    form = 0
    join = 1


class WLanProfileConnectionMode:
    auto = 0
    manual = 1


class WLanProfileConnectionType:
    IBSS = 0
    ESS = 1


class WLanProfileIhv:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def Connectivity(self) -> WLanProfileIhvConnectivity: ...
    @property
    def OuiHeader(self) -> WLanProfileIhvOuiHeader: ...
    @property
    def Security(self) -> WLanProfileIhvSecurity: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @Connectivity.setter
    def Connectivity(self, value: WLanProfileIhvConnectivity) -> None: ...
    @OuiHeader.setter
    def OuiHeader(self, value: WLanProfileIhvOuiHeader) -> None: ...
    @Security.setter
    def Security(self, value: WLanProfileIhvSecurity) -> None: ...


class WLanProfileIhvConnectivity:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...


class WLanProfileIhvOuiHeader:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def Oui(self) -> Set(Byte): ...
    @property
    def Type(self) -> Set(Byte): ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @Oui.setter
    def Oui(self, value: Set(Byte)) -> None: ...
    @Type.setter
    def Type(self, value: Set(Byte)) -> None: ...


class WLanProfileIhvSecurity:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...


class WLanProfileMsm:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def Connectivity(self) -> WLanProfileMsmConnectivity: ...
    @property
    def Security(self) -> WLanProfileMsmSecurity: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @Connectivity.setter
    def Connectivity(self, value: WLanProfileMsmConnectivity) -> None: ...
    @Security.setter
    def Security(self, value: WLanProfileMsmSecurity) -> None: ...


class WLanProfileMsmConnectivity:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def PhyType(self) -> Set(WLanProfileMsmConnectivityPhyType): ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @PhyType.setter
    def PhyType(self, value: Set(WLanProfileMsmConnectivityPhyType)) -> None: ...


class WLanProfileMsmConnectivityPhyType:
    a = 0
    b = 1
    g = 2
    n = 3
    IHV1 = 4
    IHV2 = 5
    IHV3 = 6
    IHV4 = 7
    IHV5 = 8
    IHV6 = 9
    IHV7 = 10
    IHV8 = 11
    IHV9 = 12
    IHV10 = 13
    IHV11 = 14
    IHV12 = 15
    IHV13 = 16
    IHV14 = 17
    IHV15 = 18
    IHV16 = 19


class WLanProfileMsmSecurity:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def AuthEncryption(self) -> WLanProfileMsmSecurityAuthEncryption: ...
    @property
    def KeyIndex(self) -> str: ...
    @property
    def OneX(self) -> OneX: ...
    @property
    def PMKCacheMode(self) -> WLanProfileMsmSecurityPMKCacheMode: ...
    @property
    def PMKCacheModeSpecified(self) -> bool: ...
    @property
    def PMKCacheSize(self) -> str: ...
    @property
    def PMKCacheTTL(self) -> str: ...
    @property
    def PreAuthMode(self) -> WLanProfileMsmSecurityPreAuthMode: ...
    @property
    def PreAuthModeSpecified(self) -> bool: ...
    @property
    def PreAuthThrottle(self) -> str: ...
    @property
    def SharedKey(self) -> WLanProfileMsmSecuritySharedKey: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @AuthEncryption.setter
    def AuthEncryption(self, value: WLanProfileMsmSecurityAuthEncryption) -> None: ...
    @KeyIndex.setter
    def KeyIndex(self, value: str) -> None: ...
    @OneX.setter
    def OneX(self, value: OneX) -> None: ...
    @PMKCacheMode.setter
    def PMKCacheMode(self, value: WLanProfileMsmSecurityPMKCacheMode) -> None: ...
    @PMKCacheModeSpecified.setter
    def PMKCacheModeSpecified(self, value: bool) -> None: ...
    @PMKCacheSize.setter
    def PMKCacheSize(self, value: str) -> None: ...
    @PMKCacheTTL.setter
    def PMKCacheTTL(self, value: str) -> None: ...
    @PreAuthMode.setter
    def PreAuthMode(self, value: WLanProfileMsmSecurityPreAuthMode) -> None: ...
    @PreAuthModeSpecified.setter
    def PreAuthModeSpecified(self, value: bool) -> None: ...
    @PreAuthThrottle.setter
    def PreAuthThrottle(self, value: str) -> None: ...
    @SharedKey.setter
    def SharedKey(self, value: WLanProfileMsmSecuritySharedKey) -> None: ...


class WLanProfileMsmSecurityAuthEncryption:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def Authentication(self) -> WLanProfileMsmSecurityAuthEncryptionAuthentication: ...
    @property
    def Encryption(self) -> WLanProfileMsmSecurityAuthEncryptionEncryption: ...
    @property
    def FipsMode(self) -> bool: ...
    @property
    def FipsModeSpecified(self) -> bool: ...
    @property
    def UseOneX(self) -> bool: ...
    @property
    def UseOneXSpecified(self) -> bool: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @Authentication.setter
    def Authentication(self, value: WLanProfileMsmSecurityAuthEncryptionAuthentication) -> None: ...
    @Encryption.setter
    def Encryption(self, value: WLanProfileMsmSecurityAuthEncryptionEncryption) -> None: ...
    @FipsMode.setter
    def FipsMode(self, value: bool) -> None: ...
    @FipsModeSpecified.setter
    def FipsModeSpecified(self, value: bool) -> None: ...
    @UseOneX.setter
    def UseOneX(self, value: bool) -> None: ...
    @UseOneXSpecified.setter
    def UseOneXSpecified(self, value: bool) -> None: ...


class WLanProfileMsmSecurityAuthEncryptionAuthentication:
    open = 0
    shared = 1
    WPA = 2
    WPAPSK = 3
    WPA2 = 4
    WPA2PSK = 5


class WLanProfileMsmSecurityAuthEncryptionEncryption:
    none = 0
    WEP = 1
    TKIP = 2
    AES = 3


class WLanProfileMsmSecurityPMKCacheMode:
    disabled = 0
    enabled = 1


class WLanProfileMsmSecurityPreAuthMode:
    disabled = 0
    enabled = 1


class WLanProfileMsmSecuritySharedKey:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def KeyMaterial(self) -> str: ...
    @property
    def KeyType(self) -> WLanProfileMsmSecuritySharedKeyKeyType: ...
    @property
    def protected(self) -> bool: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @KeyMaterial.setter
    def KeyMaterial(self, value: str) -> None: ...
    @KeyType.setter
    def KeyType(self, value: WLanProfileMsmSecuritySharedKeyKeyType) -> None: ...
    @protected.setter
    def protected(self, value: bool) -> None: ...


class WLanProfileMsmSecuritySharedKeyKeyType:
    networkKey = 0
    passPhrase = 1


class WLanProfileSsidConfig:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def NonBroadcast(self) -> bool: ...
    @property
    def NonBroadcastSpecified(self) -> bool: ...
    @property
    def Ssid(self) -> Set(WLanProfileSsidConfigSsid): ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @NonBroadcast.setter
    def NonBroadcast(self, value: bool) -> None: ...
    @NonBroadcastSpecified.setter
    def NonBroadcastSpecified(self, value: bool) -> None: ...
    @Ssid.setter
    def Ssid(self, value: Set(WLanProfileSsidConfigSsid)) -> None: ...


class WLanProfileSsidConfigSsid:
    def __init__(self): ...
    @property
    def Any(self) -> Set(XmlElement): ...
    @property
    def Name(self) -> str: ...
    @Any.setter
    def Any(self, value: Set(XmlElement)) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class WLanSvcSetting(PolicySetting):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rsopReader: RsopReader): ...
    @overload
    def __init__(self, serverCtx: ServerContext, dsPath: str): ...
    @property
    def WLanPolicies(self) -> Set(WLanPolicy): ...
    @WLanPolicies.setter
    def WLanPolicies(self, value: Set(WLanPolicy)) -> None: ...


class WLanSvcSettings(GPOExtension):
    def __init__(self): ...
    def Initialize(self, context: ReportingContext) -> None: ...
