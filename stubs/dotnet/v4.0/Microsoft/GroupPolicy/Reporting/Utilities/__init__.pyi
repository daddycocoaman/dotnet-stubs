from typing import Tuple, Set, Iterable, List


class BlobReader:
    def __init__(self, binBlob: Set(Byte)): ...
    def GetCurrentIndex(self) -> UInt32: ...
    def ReadString(self, lengthInBytes: Int64) -> str: ...
    def ReadUInt16(self) -> UInt16: ...
    def ReadUInt32(self) -> UInt32: ...
    def SetCurrentIndex(self, indexValue: Int64) -> None: ...
    def SkipBytes(self, bytesToSkip: Int64) -> None: ...


class ByteConverter:
    def ConvertToQWord(byteValue: Set(Byte)) -> Int64: ...
    def ConvertToString(byteValue: Set(Byte)) -> str: ...
    def ConvertToStrings(byteValue: Set(Byte)) -> Set(str): ...
    def ConvertToUInt32(byteValue: Set(Byte)) -> UInt32: ...
    def ConvertToUInt64(byteValue: Set(Byte)) -> UInt64: ...


class CtlExt:
    def __init__(self): ...


class Dbg:
    pass


class EntryTypeValue:
    User = 0
    Computer = 1
    LocalGroup = 2
    GlobalGroup = 3
    UniversalGroup = 4
    UNCPath = 5
    Unknown = 6


class EnumeratorPosition:
    BeforeFirst = 0
    InList = 1
    AfterLast = 2


class FileUtil:
    pass


class IMapEntry:
    def GetDestination(self) -> str: ...
    def GetDestinationOption(self) -> UInt32: ...
    def GetEntryType(self) -> UInt32: ...
    def GetSource(self) -> str: ...


class IMigrationTable:
    def AddEntry(self, source: str, entryType: UInt32, destOption: UInt32, destination: str) -> IMapEntry: ...
    def DeleteEntry(self, source: str) -> None: ...
    def GetEntries(self) -> Set(IMapEntry): ...
    def GetEntry(self, source: str) -> IMapEntry: ...
    def GetFilePathEntries(self) -> Set(IMapEntry): ...
    def GetSecurityPrincipalEntries(self) -> Set(IMapEntry): ...
    def Save(self, migrationTablePath: str) -> None: ...
    def UpdateDestination(self, source: str, destOption: UInt32, destination: str) -> IMapEntry: ...


class IniParser:
    def __init__(self, filename: str): ...
    def Dump(self) -> None: ...
    def FindSection(self, key: str) -> IniSection: ...
    @property
    def Sections(self) -> SortedList: ...


class IniSection:
    def __init__(self, sectionName: str): ...
    def AddInKeyValueList(self, key: str, value: str) -> None: ...
    def AddInNonKeyList(self, nonKey: str) -> None: ...
    def FindValue(self, key: str) -> str: ...
    @property
    def Name(self) -> str: ...
    def GetKeyValueList(self) -> SortedList: ...
    def GetNonKeyList(self) -> ArrayList: ...
    def GetUnsortedKeyValueList(self) -> IDictionary: ...


class ItemChoiceType:
    DestinationSameAsSource = 0
    DestinationNone = 1
    DestinationByRelativeName = 2
    Destination = 3


class Mapping:
    def __init__(self): ...
    @property
    def Item(self) -> str: ...
    @property
    def ItemElementName(self) -> ItemChoiceType: ...
    @property
    def Source(self) -> str: ...
    @property
    def Type(self) -> EntryTypeValue: ...
    def GetDestination(self) -> str: ...
    def GetDestinationOption(self) -> UInt32: ...
    def GetEntryType(self) -> UInt32: ...
    def GetSource(self) -> str: ...
    def Initialize(self, sourceName: str, entryType: UInt32, destOption: UInt32, destination: str) -> None: ...
    @Item.setter
    def Item(self, value: str) -> None: ...
    @ItemElementName.setter
    def ItemElementName(self, value: ItemChoiceType) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: EntryTypeValue) -> None: ...
    def SetDestination(self, destination: str) -> None: ...
    def SetDestinationOption(self, destOption: UInt32) -> None: ...


class MigrationTable:
    def __init__(self): ...
    def AddEntry(self, Source: str, EntryType: UInt32, DestOption: UInt32, Destination: str) -> IMapEntry: ...
    def DeleteEntry(self, Source: str) -> None: ...
    @property
    def Mappings(self) -> ArrayList: ...
    def GetEntries(self) -> Set(IMapEntry): ...
    def GetEntry(self, Source: str) -> IMapEntry: ...
    def GetFilePathEntries(self) -> Set(IMapEntry): ...
    def GetSecurityPrincipalEntries(self) -> Set(IMapEntry): ...
    def Reinitialize(self) -> None: ...
    def Save(self, MigrationTablePath: str) -> None: ...
    @Mappings.setter
    def Mappings(self, value: ArrayList) -> None: ...
    def UpdateDestination(self, Source: str, DestOption: UInt32, Destination: str) -> IMapEntry: ...


class NonUniqueKeysSortedList:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, comparer: IComparer): ...
    def Add(self, key: Object, value: Object) -> None: ...
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: int) -> Object: ...
    def GetValues(self, index: int) -> ArrayList: ...
    def GetVersion(self) -> UInt64: ...
    def KeysCount(self) -> int: ...


class NonUniqueKeysSortedListEnumerator:
    def __init__(self, list: NonUniqueKeysSortedList): ...
    @property
    def Current(self) -> Object: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class PrecedenceType:
    PrecedenceAll = 0
    PrecedenceOne = 1


class ResourceDllUtil:
    pass


class RsopReader:
    pass
