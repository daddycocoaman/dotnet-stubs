__all__ = ['Html','RsopEnhancements','Security','Utilities']
from typing import Tuple, Set, Iterable, List


class Backup:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, fileName: str, includeComments: bool): ...
    def ConvertToHtml(self) -> str: ...
    def ConvertToXml(self) -> str: ...
    def SaveToHtml(self, filename: str) -> None: ...
    def SaveToXml(self, filename: str) -> None: ...


class ErrorDetails:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, extensionError: ReportingDataException): ...
    @overload
    def __init__(self, description: str, source: str, details: str): ...
    @property
    def Description(self) -> str: ...
    @property
    def Details(self) -> str: ...
    @property
    def Error(self) -> UInt32: ...
    @property
    def ErrorSpecified(self) -> bool: ...
    @property
    def Source(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Details.setter
    def Details(self, value: str) -> None: ...
    @Error.setter
    def Error(self, value: UInt32) -> None: ...
    @ErrorSpecified.setter
    def ErrorSpecified(self, value: bool) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...


class ExtensionIDs:
    pass


class ExtensionNames:
    pass


class ExtensionResults:
    def __init__(self): ...


class GPMStarterGPOType:
    typeSystem = 0
    typeCustom = 1


class GPO:
    def __init__(self): ...
    def ConvertToHtml(self) -> str: ...
    def ConvertToXml(self) -> str: ...
    @property
    def Computer(self) -> GPOUserOrComputerConfig: ...
    @property
    def CreatedTime(self) -> DateTime: ...
    @property
    def FilterDataAvailable(self) -> bool: ...
    @property
    def FilterDescription(self) -> str: ...
    @property
    def FilterName(self) -> str: ...
    @property
    def Identifier(self) -> GPOIdentifier: ...
    @property
    def IncludeComments(self) -> bool: ...
    @property
    def LinksTo(self) -> ArrayList: ...
    @property
    def ModifiedTime(self) -> DateTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReadTime(self) -> DateTime: ...
    @property
    def SecurityDescriptor(self) -> SecurityDescriptor: ...
    @property
    def User(self) -> GPOUserOrComputerConfig: ...
    def SaveToHtml(self, filename: str) -> None: ...
    def SaveToXml(self, filename: str) -> None: ...
    @Computer.setter
    def Computer(self, value: GPOUserOrComputerConfig) -> None: ...
    @CreatedTime.setter
    def CreatedTime(self, value: DateTime) -> None: ...
    @FilterDataAvailable.setter
    def FilterDataAvailable(self, value: bool) -> None: ...
    @FilterDescription.setter
    def FilterDescription(self, value: str) -> None: ...
    @FilterName.setter
    def FilterName(self, value: str) -> None: ...
    @Identifier.setter
    def Identifier(self, value: GPOIdentifier) -> None: ...
    @IncludeComments.setter
    def IncludeComments(self, value: bool) -> None: ...
    @LinksTo.setter
    def LinksTo(self, value: ArrayList) -> None: ...
    @ModifiedTime.setter
    def ModifiedTime(self, value: DateTime) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ReadTime.setter
    def ReadTime(self, value: DateTime) -> None: ...
    @SecurityDescriptor.setter
    def SecurityDescriptor(self, value: SecurityDescriptor) -> None: ...
    @User.setter
    def User(self, value: GPOUserOrComputerConfig) -> None: ...


class GPOContext(ReportingContext):
    def GetDSContext(self) -> ServerContext: ...
    def GetDSPath(self) -> str: ...
    def GetOwnerGPO(self) -> GPO: ...
    def GetSysvolPath(self) -> str: ...


class GPOExtension:
    def Initialize(self, context: ReportingContext) -> None: ...


class GPOExtensionData:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, extensionError: ReportingDataException, extension: GPOExtension): ...
    @overload
    def __init__(self, name: str, errorDetails: ArrayList, extension: GPOExtension): ...
    @property
    def Error(self) -> ArrayList: ...
    @property
    def Extension(self) -> GPOExtension: ...
    @property
    def Name(self) -> str: ...
    @Error.setter
    def Error(self, value: ArrayList) -> None: ...
    @Extension.setter
    def Extension(self, value: GPOExtension) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class GPOIdentifier:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, identifier: str, domain: str): ...
    def Equals(self, objValue: Object) -> bool: ...
    @property
    def Domain(self) -> str: ...
    @property
    def Identifier(self) -> str: ...
    def GetHashCode(self) -> int: ...
    @Domain.setter
    def Domain(self, value: str) -> None: ...
    @Identifier.setter
    def Identifier(self, value: str) -> None: ...


class GPOLink:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, somName: str, somPath: str, enabled: bool, noOverride: bool): ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def NoOverride(self) -> bool: ...
    @property
    def SOMName(self) -> str: ...
    @property
    def SOMPath(self) -> str: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @NoOverride.setter
    def NoOverride(self, value: bool) -> None: ...
    @SOMName.setter
    def SOMName(self, value: str) -> None: ...
    @SOMPath.setter
    def SOMPath(self, value: str) -> None: ...


class GPOScope:
    User = 0
    Machine = 1


class GPOUserOrComputerConfig(ExtensionResults):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, extensions: Set(str), context: GPOContext, dsVersion: UInt16, sysvolVersion: UInt16, enabled: bool): ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ExtensionData(self) -> ArrayList: ...
    @property
    def VersionDirectory(self) -> UInt16: ...
    @property
    def VersionSysvol(self) -> UInt16: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ExtensionData.setter
    def ExtensionData(self, value: ArrayList) -> None: ...
    @VersionDirectory.setter
    def VersionDirectory(self, value: UInt16) -> None: ...
    @VersionSysvol.setter
    def VersionSysvol(self, value: UInt16) -> None: ...


class IReport:
    def ConvertToHtml(self) -> str: ...
    def ConvertToXml(self) -> str: ...
    def SaveToHtml(self, filename: str) -> None: ...
    def SaveToXml(self, filename: str) -> None: ...


class IReportFactory:
    def CreateMigrationTable(self) -> IMigrationTable: ...
    def GenerateFromBackup(self, bkpReportPath: str) -> IReport: ...
    def GenerateFromBackupEx(self, bkpReportPath: str, isGPOBackup: bool) -> IReport: ...
    def GenerateFromGPO(self, dc: str, domainDN: str, gpoIdentifier: str) -> IReport: ...
    def GenerateFromRSOP(self, wmiNamespace: str, server: str) -> IReport: ...
    def GenerateFromTemplate(self, dc: str, templateIdentifier: str, reportingLanguage: str) -> IReport: ...
    def GetMigrationTable(self, migrationTablePath: str) -> IMigrationTable: ...
    def IncludeComments(self, includeComments: bool) -> None: ...
    def InitializeAdm(self, strAdditionalAdmPath: str) -> None: ...


class LoggingStatusType:
    #None = 0
    Complete = 1
    NotComplete = 2
    NotSupported = 3


class LoopbackMode:
    #None = 0
    Merge = 1
    Replace = 2
    Invalid = -1


class PolicySetting:
    @property
    def GPO(self) -> GPOIdentifier: ...
    @property
    def Precedence(self) -> UInt32: ...
    @property
    def PrecedenceSpecified(self) -> bool: ...
    def IsHighestPrecedence(self) -> bool: ...
    @GPO.setter
    def GPO(self, value: GPOIdentifier) -> None: ...
    @Precedence.setter
    def Precedence(self, value: UInt32) -> None: ...
    @PrecedenceSpecified.setter
    def PrecedenceSpecified(self, value: bool) -> None: ...


class ReportFactory:
    def __init__(self): ...
    def CreateMigrationTable(self) -> IMigrationTable: ...
    def GenerateFromBackup(self, bkpReportPath: str) -> IReport: ...
    def GenerateFromBackupEx(self, bkpReportPath: str, isGPOBackup: bool) -> IReport: ...
    def GenerateFromGPO(self, dc: str, domainDN: str, gpoIdentifier: str) -> IReport: ...
    def GenerateFromRSOP(self, wmiNamespace: str, server: str) -> IReport: ...
    def GenerateFromTemplate(self, dc: str, templateIdentifier: str, reportingLanguage: str) -> IReport: ...
    def GetMigrationTable(self, migrationTablePath: str) -> IMigrationTable: ...
    def IncludeComments(self, includeComments: bool) -> None: ...
    def InitializeAdm(self, strAdditionalAdmPath: str) -> None: ...


class ReportingContext:
    def GetIncludeComments(self) -> bool: ...
    def GetReportingLanguage(self) -> str: ...
    def GetReportType(self) -> ReportingType: ...
    def GetScope(self) -> GPOScope: ...
    def GetServerName(self) -> str: ...


class ReportingDataException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, msgId: str): ...
    @overload
    def __init__(self, msgId: str, innerException: Exception): ...
    @overload
    def __init__(self, msgId: str, source: str, details: str, innerException: Exception): ...
    @property
    def Details(self) -> str: ...
    @property
    def hr(self) -> UInt32: ...


class ReportingType:
    Rsop = 0
    GPO = 1
    Template = 2


class Rsop:
    def __init__(self): ...
    def ConvertToHtml(self) -> str: ...
    def ConvertToXml(self) -> str: ...
    @property
    def ComputerResults(self) -> RsopTargetResults: ...
    @property
    def ReadTime(self) -> DateTime: ...
    @property
    def RsopDataType(self) -> RsopDataType: ...
    @property
    def UserResults(self) -> RsopTargetResults: ...
    def SaveToHtml(self, filename: str) -> None: ...
    def SaveToXml(self, filename: str) -> None: ...
    @ComputerResults.setter
    def ComputerResults(self, value: RsopTargetResults) -> None: ...
    @ReadTime.setter
    def ReadTime(self, value: DateTime) -> None: ...
    @RsopDataType.setter
    def RsopDataType(self, value: RsopDataType) -> None: ...
    @UserResults.setter
    def UserResults(self, value: RsopTargetResults) -> None: ...


class RsopContext(ReportingContext):
    def CreateReader(self) -> RsopReader: ...
    def GetRsopObject(self) -> Rsop: ...


class RsopDataType:
    PlanningData = 0
    LoggedData = 1


class RsopExtensionStatus:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, statusObject: ManagementObject): ...
    @property
    def BeginTime(self) -> DateTime: ...
    @property
    def EndTime(self) -> DateTime: ...
    @property
    def EndTimeSpecified(self) -> bool: ...
    @property
    def Error(self) -> UInt32: ...
    @property
    def EventLogActivityId(self) -> str: ...
    @property
    def Identifier(self) -> str: ...
    @property
    def LoggingStatus(self) -> LoggingStatusType: ...
    @property
    def Name(self) -> str: ...
    @property
    def ProcessingTime(self) -> UInt32: ...
    def IsGPCore(self) -> bool: ...
    @BeginTime.setter
    def BeginTime(self, value: DateTime) -> None: ...
    @EndTime.setter
    def EndTime(self, value: DateTime) -> None: ...
    @EndTimeSpecified.setter
    def EndTimeSpecified(self, value: bool) -> None: ...
    @Error.setter
    def Error(self, value: UInt32) -> None: ...
    @EventLogActivityId.setter
    def EventLogActivityId(self, value: str) -> None: ...
    @Identifier.setter
    def Identifier(self, value: str) -> None: ...
    @LoggingStatus.setter
    def LoggingStatus(self, value: LoggingStatusType) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ProcessingTime.setter
    def ProcessingTime(self, value: UInt32) -> None: ...


class RsopGPLink:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, gpLinkObject: ManagementObject, som: RsopSOM): ...
    @property
    def AppliedOrder(self) -> UInt64: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def LinkOrder(self) -> UInt64: ...
    @property
    def NoOverride(self) -> bool: ...
    @property
    def SOMOrder(self) -> UInt64: ...
    @property
    def SOMPath(self) -> str: ...
    @AppliedOrder.setter
    def AppliedOrder(self, value: UInt64) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @LinkOrder.setter
    def LinkOrder(self, value: UInt64) -> None: ...
    @NoOverride.setter
    def NoOverride(self, value: bool) -> None: ...
    @SOMOrder.setter
    def SOMOrder(self, value: UInt64) -> None: ...
    @SOMPath.setter
    def SOMPath(self, value: str) -> None: ...


class RsopGPOInfo:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, gpoId: str, gpoObject: ManagementObject, gpLink: RsopGPLink, wqlReader: RsopReader, rsopReader: RsopReader, serverFQDNName: str): ...
    def AddLink(self, gpLink: RsopGPLink) -> None: ...
    @property
    def AccessDenied(self) -> bool: ...
    @property
    def ComplementScopeEnabled(self) -> bool: ...
    @property
    def ComplementScopeEnabledSpecified(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def EnabledSpecified(self) -> bool: ...
    @property
    def ExtensionNames(self) -> ArrayList: ...
    @property
    def FilterAllowed(self) -> bool: ...
    @property
    def FilterId(self) -> str: ...
    @property
    def FilterName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Path(self) -> GPOIdentifier: ...
    @property
    def SecurityFilters(self) -> ArrayList: ...
    @property
    def SOMLinks(self) -> ArrayList: ...
    @property
    def VersionDirectory(self) -> UInt16: ...
    @property
    def VersionSysvol(self) -> UInt16: ...
    def RsopCheckVersionIfServerIsWin7OrBelow(self, serverFQDNName: str) -> bool: ...
    @AccessDenied.setter
    def AccessDenied(self, value: bool) -> None: ...
    @ComplementScopeEnabled.setter
    def ComplementScopeEnabled(self, value: bool) -> None: ...
    @ComplementScopeEnabledSpecified.setter
    def ComplementScopeEnabledSpecified(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @EnabledSpecified.setter
    def EnabledSpecified(self, value: bool) -> None: ...
    @FilterAllowed.setter
    def FilterAllowed(self, value: bool) -> None: ...
    @FilterId.setter
    def FilterId(self, value: str) -> None: ...
    @FilterName.setter
    def FilterName(self, value: str) -> None: ...
    @IsValid.setter
    def IsValid(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: GPOIdentifier) -> None: ...
    @SOMLinks.setter
    def SOMLinks(self, value: ArrayList) -> None: ...
    @VersionDirectory.setter
    def VersionDirectory(self, value: UInt16) -> None: ...
    @VersionSysvol.setter
    def VersionSysvol(self, value: UInt16) -> None: ...


class RsopSOM:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, somObject: ManagementObject): ...
    @property
    def Blocked(self) -> bool: ...
    @property
    def BlocksInheritance(self) -> bool: ...
    @property
    def Order(self) -> UInt64: ...
    @property
    def Path(self) -> str: ...
    @property
    def Reason(self) -> SOMReason: ...
    @property
    def Type(self) -> SOMType: ...
    def GetInstPath(self) -> str: ...
    @Blocked.setter
    def Blocked(self, value: bool) -> None: ...
    @BlocksInheritance.setter
    def BlocksInheritance(self, value: bool) -> None: ...
    @Order.setter
    def Order(self, value: UInt64) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @Reason.setter
    def Reason(self, value: SOMReason) -> None: ...
    @Type.setter
    def Type(self, value: SOMType) -> None: ...


class RsopTargetResults(ExtensionResults):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: RsopContext): ...
    @property
    def Domain(self) -> str: ...
    @property
    def EventsDetails(self) -> PolicyEventsDetails: ...
    @property
    def ExtensionData(self) -> ArrayList: ...
    @property
    def ExtensionStatus(self) -> ArrayList: ...
    @property
    def GPOList(self) -> Set(RsopGPOInfo): ...
    @property
    def IsRpcServerAvailable(self) -> bool: ...
    @property
    def Loopback(self) -> LoopbackMode: ...
    @property
    def LoopbackSpecified(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def SearchedSOMList(self) -> Set(RsopSOM): ...
    @property
    def SecurityGroups(self) -> Set(Trustee): ...
    @property
    def Site(self) -> str: ...
    @property
    def SlowLink(self) -> bool: ...
    @property
    def SOM(self) -> str: ...
    @property
    def Version(self) -> UInt32: ...
    def IsNameSpecified(self) -> bool: ...
    def IsPlanningMode(self) -> bool: ...
    def IsPresent(self, rsopDataType: RsopDataType) -> bool: ...
    @Domain.setter
    def Domain(self, value: str) -> None: ...
    @EventsDetails.setter
    def EventsDetails(self, value: PolicyEventsDetails) -> None: ...
    @ExtensionData.setter
    def ExtensionData(self, value: ArrayList) -> None: ...
    @ExtensionStatus.setter
    def ExtensionStatus(self, value: ArrayList) -> None: ...
    @GPOList.setter
    def GPOList(self, value: Set(RsopGPOInfo)) -> None: ...
    @IsRpcServerAvailable.setter
    def IsRpcServerAvailable(self, value: bool) -> None: ...
    @Loopback.setter
    def Loopback(self, value: LoopbackMode) -> None: ...
    @LoopbackSpecified.setter
    def LoopbackSpecified(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SearchedSOMList.setter
    def SearchedSOMList(self, value: Set(RsopSOM)) -> None: ...
    @SecurityGroups.setter
    def SecurityGroups(self, value: Set(Trustee)) -> None: ...
    @Site.setter
    def Site(self, value: str) -> None: ...
    @SlowLink.setter
    def SlowLink(self, value: bool) -> None: ...
    @SOM.setter
    def SOM(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: UInt32) -> None: ...


class RsopWMICompatibility:
    def RsopCheckVersionIfServerIsWin7OrBelow(serverName: str, netresult: int) -> Tuple[bool, int]: ...


class ServerContext:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dc: str): ...
    def MakeLdapPath(self, dn: str) -> str: ...
    def NormalizeDfsPath(self, path: str) -> str: ...


class SOMReason:
    #None = 0
    Normal = 1
    Loopback = 2


class SOMType:
    #None = 0
    Local = 1
    Site = 2
    Domain = 3
    OU = 4


class Template:
    def __init__(self): ...
    def ConvertToHtml(self) -> str: ...
    def ConvertToXml(self) -> str: ...
    @property
    def Author(self) -> str: ...
    @property
    def Computer(self) -> TemplateUserOrComputerConfig: ...
    @property
    def CreatedTime(self) -> DateTime: ...
    @property
    def Description(self) -> str: ...
    @property
    def Identifier(self) -> TemplateIdentifier: ...
    @property
    def IncludeComments(self) -> bool: ...
    @property
    def ModifiedTime(self) -> DateTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def Product(self) -> str: ...
    @property
    def ReadTime(self) -> DateTime: ...
    @property
    def SecurityDescriptor(self) -> SecurityDescriptor: ...
    @property
    def SystemVersion(self) -> str: ...
    @property
    def TemplateType(self) -> GPMStarterGPOType: ...
    @property
    def User(self) -> TemplateUserOrComputerConfig: ...
    def SaveToHtml(self, filename: str) -> None: ...
    def SaveToXml(self, filename: str) -> None: ...
    @Author.setter
    def Author(self, value: str) -> None: ...
    @Computer.setter
    def Computer(self, value: TemplateUserOrComputerConfig) -> None: ...
    @CreatedTime.setter
    def CreatedTime(self, value: DateTime) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Identifier.setter
    def Identifier(self, value: TemplateIdentifier) -> None: ...
    @IncludeComments.setter
    def IncludeComments(self, value: bool) -> None: ...
    @ModifiedTime.setter
    def ModifiedTime(self, value: DateTime) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Product.setter
    def Product(self, value: str) -> None: ...
    @ReadTime.setter
    def ReadTime(self, value: DateTime) -> None: ...
    @SecurityDescriptor.setter
    def SecurityDescriptor(self, value: SecurityDescriptor) -> None: ...
    @SystemVersion.setter
    def SystemVersion(self, value: str) -> None: ...
    @TemplateType.setter
    def TemplateType(self, value: GPMStarterGPOType) -> None: ...
    @User.setter
    def User(self, value: TemplateUserOrComputerConfig) -> None: ...


class TemplateContext(ReportingContext):
    def GetSysvolPath(self) -> str: ...


class TemplateIdentifier:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, identifier: str, domain: str): ...
    def Equals(self, objValue: Object) -> bool: ...
    @property
    def Domain(self) -> str: ...
    @property
    def Identifier(self) -> str: ...
    def GetHashCode(self) -> int: ...
    @Domain.setter
    def Domain(self, value: str) -> None: ...
    @Identifier.setter
    def Identifier(self, value: str) -> None: ...


class TemplateUserOrComputerConfig:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, extensions: Set(str), context: TemplateContext, sysvolVersion: UInt16, enabled: bool): ...
    @property
    def ExtensionData(self) -> ArrayList: ...
    @property
    def VersionSysvol(self) -> UInt16: ...
    @ExtensionData.setter
    def ExtensionData(self, value: ArrayList) -> None: ...
    @VersionSysvol.setter
    def VersionSysvol(self, value: UInt16) -> None: ...


class Trustee:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sid: str, server: str): ...
    @overload
    def __init__(self, sid: str, name: str, server: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def SID(self) -> str: ...
    def GetIdentifier(self) -> str: ...
    def IsEveryone(self) -> bool: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SID.setter
    def SID(self, value: str) -> None: ...
