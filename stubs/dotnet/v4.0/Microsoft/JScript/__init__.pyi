__all__ = ['Vsa']
from typing import Tuple, Set, Iterable, List


class ActivationObject(ScriptObject):
    def GetDefaultThisObject(self) -> Object: ...
    @overload
    def GetField(self, name: str, lexLevel: int) -> FieldInfo: ...
    def GetGlobalScope(self) -> GlobalScope: ...
    def GetLocalField(self, name: str) -> FieldInfo: ...
    def GetMember(self, name: str, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def GetMembers(self, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def GetMemberValue(self, name: str, lexlevel: int) -> Object: ...


class ActiveXObjectConstructor(ScriptFunction):
    @overload
    def CreateInstance(self, args: Set(Object)) -> Object: ...
    @overload
    def Invoke(self) -> Object: ...


class ArgumentsObject(JSObject):
    pass


class ArrayConstructor(ScriptFunction):
    def ConstructArray(self, args: Set(Object)) -> ArrayObject: ...
    @overload
    def CreateInstance(self, args: Set(Object)) -> ArrayObject: ...
    @overload
    def Invoke(self, args: Set(Object)) -> ArrayObject: ...


class ArrayLiteral(AST):
    def __init__(self, context: Context, elements: ASTList): ...


class ArrayObject(JSObject):
    @property
    def length(self) -> Object: ...
    @length.setter
    def length(self, value: Object) -> None: ...


class ArrayPrototype(ArrayObject):
    def concat(thisob: Object, engine: VsaEngine, args: Set(Object)) -> ArrayObject: ...
    @property
    def constructor() -> ArrayConstructor: ...
    def join(thisob: Object, separator: Object) -> str: ...
    def pop(thisob: Object) -> Object: ...
    def push(thisob: Object, args: Set(Object)) -> Int64: ...
    def reverse(thisob: Object) -> Object: ...
    def shift(thisob: Object) -> Object: ...
    def slice(thisob: Object, engine: VsaEngine, start: float, end: Object) -> ArrayObject: ...
    def sort(thisob: Object, function: Object) -> Object: ...
    def splice(thisob: Object, engine: VsaEngine, start: float, deleteCnt: float, args: Set(Object)) -> ArrayObject: ...
    def toLocaleString(thisob: Object) -> str: ...
    def toString(thisob: Object) -> str: ...
    def unshift(thisob: Object, args: Set(Object)) -> Object: ...


class ArrayWrapper(ArrayObject):
    @property
    def length(self) -> Object: ...
    @overload
    def GetType(self) -> Type: ...
    @length.setter
    def length(self, value: Object) -> None: ...


class AssemblyCustomAttributeList(AST):
    pass


class AST:
    pass


class ASTList(AST):
    pass


class BinaryOp(AST):
    pass


class Binding(AST):
    def IsMissing(value: Object) -> bool: ...


class BitwiseBinary(BinaryOp):
    def __init__(self, operatorTok: int): ...
    def EvaluateBitwiseBinary(self, v1: Object, v2: Object) -> Object: ...


class Block(AST):
    pass


class BlockScope(ActivationObject):
    def __init__(self, parent: ScriptObject, name: str, scopeId: int): ...


class BooleanConstructor(ScriptFunction):
    @overload
    def CreateInstance(self, args: Set(Object)) -> BooleanObject: ...
    @overload
    def Invoke(self, arg: Object) -> bool: ...


class BooleanObject(JSObject):
    @overload
    def GetType(self) -> Type: ...


class BooleanPrototype(BooleanObject):
    @property
    def constructor() -> BooleanConstructor: ...
    def toString(thisob: Object) -> str: ...
    def valueOf(thisob: Object) -> Object: ...


class BreakOutOfFinally:
    @overload
    def __init__(self, target: int): ...
    @overload
    def __init__(self, m: str): ...
    @overload
    def __init__(self, m: str, e: Exception): ...
    def GetObjectData(self, s: SerializationInfo, c: StreamingContext) -> None: ...


class Closure(ScriptFunction):
    def __init__(self, func: FunctionObject): ...
    def ToString(self) -> str: ...


class CmdLineError:
    NoError = 0
    AssemblyNotFound = 2001
    CannotCreateEngine = 2002
    CompilerConstant = 2003
    DuplicateFileAsSourceAndAssembly = 2004
    DuplicateResourceFile = 2005
    DuplicateResourceName = 2006
    DuplicateSourceFile = 2007
    ErrorSavingCompiledState = 2008
    InvalidAssembly = 2009
    InvalidCodePage = 2010
    InvalidDefinition = 2011
    InvalidLocaleID = 2012
    InvalidTarget = 2013
    InvalidSourceFile = 2014
    InvalidWarningLevel = 2015
    MultipleOutputNames = 2016
    MultipleTargets = 2017
    MissingDefineArgument = 2018
    MissingExtension = 2019
    MissingLibArgument = 2020
    MissingVersionInfo = 2021
    ManagedResourceNotFound = 2022
    NestedResponseFiles = 2023
    NoCodePage = 2024
    NoFileName = 2025
    NoInputSourcesSpecified = 2026
    NoLocaleID = 2027
    NoWarningLevel = 2028
    ResourceNotFound = 2029
    UnknownOption = 2030
    InvalidVersion = 2031
    SourceFileTooBig = 2032
    MultipleWin32Resources = 2033
    MissingReference = 2034
    SourceNotFound = 2035
    InvalidCharacters = 2036
    InvalidForCompilerOptions = 2037
    IncompatibleTargets = 2038
    InvalidPlatform = 2039
    LAST = 2039
    Unspecified = 2999


class CmdLineException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, m: str): ...
    @overload
    def __init__(self, errorCode: CmdLineError, culture: CultureInfo): ...
    @overload
    def __init__(self, m: str, e: Exception): ...
    @overload
    def __init__(self, errorCode: CmdLineError, context: str, culture: CultureInfo): ...
    @property
    def Message(self) -> str: ...
    def GetObjectData(self, s: SerializationInfo, c: StreamingContext) -> None: ...
    def ResourceKey(self, errorCode: CmdLineError) -> str: ...


class CmdLineOptionParser:
    def __init__(self): ...
    @overload
    def IsArgumentOption(option: str, prefix: str) -> str: ...
    @overload
    def IsArgumentOption(option: str, shortPrefix: str, longPrefix: str) -> str: ...
    @overload
    def IsBooleanOption(option: str, prefix: str) -> Object: ...
    @overload
    def IsBooleanOption(option: str, shortPrefix: str, longPrefix: str) -> Object: ...
    def IsSimpleOption(option: str, prefix: str) -> bool: ...


class COMCharStream:
    def __init__(self, messageReceiver: IMessageReceiver): ...
    def Close(self) -> None: ...
    def Flush(self) -> None: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Position(self) -> Int64: ...
    def Read(self, buffer: Set(Byte), offset: int, count: int) -> int: ...
    def Seek(self, offset: Int64, origin: SeekOrigin) -> Int64: ...
    @Position.setter
    def Position(self, value: Int64) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    def Write(self, buffer: Set(Byte), offset: int, count: int) -> None: ...


class COMFieldInfo:
    def __init__(self): ...
    @property
    def Attributes(self) -> FieldAttributes: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def FieldHandle(self) -> RuntimeFieldHandle: ...
    @property
    def FieldType(self) -> Type: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> Type: ...
    def GetCOMMemberInfo(self) -> COMMemberInfo: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> Set(Object): ...
    @overload
    def GetCustomAttributes(self, t: Type, inherit: bool) -> Set(Object): ...
    def GetValue(self, obj: Object) -> Object: ...
    def Initialize(self, name: str, dispatch: COMMemberInfo) -> None: ...
    def IsDefined(self, t: Type, inherit: bool) -> bool: ...
    @overload
    def SetValue(self, obj: Object, value: Object, invokeAttr: BindingFlags, binder: Binder, culture: CultureInfo) -> None: ...


class COMMemberInfo:
    def Call(self, invokeAttr: BindingFlags, binder: Binder, arguments: Set(Object), culture: CultureInfo) -> Object: ...
    def GetValue(self, invokeAttr: BindingFlags, binder: Binder, index: Set(Object), culture: CultureInfo) -> Object: ...
    def SetValue(self, value: Object, invokeAttr: BindingFlags, binder: Binder, index: Set(Object), culture: CultureInfo) -> None: ...


class COMMethodInfo(JSMethod):
    def __init__(self): ...
    @property
    def Attributes(self) -> MethodAttributes: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def MethodHandle(self) -> RuntimeMethodHandle: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> Type: ...
    @property
    def ReturnType(self) -> Type: ...
    @property
    def ReturnTypeCustomAttributes(self) -> ICustomAttributeProvider: ...
    def GetBaseDefinition(self) -> MethodInfo: ...
    def GetCOMMemberInfo(self) -> COMMemberInfo: ...
    def GetMethodImplementationFlags(self) -> MethodImplAttributes: ...
    def GetParameters(self) -> Set(ParameterInfo): ...
    def Initialize(self, name: str, dispatch: COMMemberInfo) -> None: ...
    @overload
    def Invoke(self, obj: Object, invokeAttr: BindingFlags, binder: Binder, parameters: Set(Object), culture: CultureInfo) -> Object: ...
    def ToString(self) -> str: ...


class COMPropertyInfo:
    def __init__(self): ...
    @property
    def Attributes(self) -> PropertyAttributes: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def PropertyType(self) -> Type: ...
    @property
    def ReflectedType(self) -> Type: ...
    @overload
    def GetAccessors(self, nonPublic: bool) -> Set(MethodInfo): ...
    def GetCOMMemberInfo(self) -> COMMemberInfo: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> Set(Object): ...
    @overload
    def GetCustomAttributes(self, t: Type, inherit: bool) -> Set(Object): ...
    @overload
    def GetGetMethod(self, nonPublic: bool) -> MethodInfo: ...
    def GetIndexParameters(self) -> Set(ParameterInfo): ...
    @overload
    def GetSetMethod(self, nonPublic: bool) -> MethodInfo: ...
    @overload
    def GetValue(self, obj: Object, invokeAttr: BindingFlags, binder: Binder, index: Set(Object), culture: CultureInfo) -> Object: ...
    def Initialize(self, name: str, dispatch: COMMemberInfo) -> None: ...
    def IsDefined(self, t: Type, inherit: bool) -> bool: ...
    @overload
    def SetValue(self, obj: Object, value: Object, invokeAttr: BindingFlags, binder: Binder, index: Set(Object), culture: CultureInfo) -> None: ...


class Context:
    @property
    def EndColumn(self) -> int: ...
    @property
    def EndLine(self) -> int: ...
    @property
    def EndPosition(self) -> int: ...
    @property
    def StartColumn(self) -> int: ...
    @property
    def StartLine(self) -> int: ...
    @property
    def StartPosition(self) -> int: ...
    def GetCode(self) -> str: ...
    def GetToken(self) -> JSToken: ...


class ContinueOutOfFinally:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, target: int): ...
    @overload
    def __init__(self, m: str): ...
    @overload
    def __init__(self, m: str, e: Exception): ...
    def GetObjectData(self, s: SerializationInfo, c: StreamingContext) -> None: ...


class Convert:
    def __init__(self): ...
    def CheckIfDoubleIsInteger(d: float) -> float: ...
    def CheckIfSingleIsInteger(s: Single) -> Single: ...
    def Coerce(value: Object, type: Object) -> Object: ...
    def Coerce2(value: Object, target: TypeCode, truncationPermitted: bool) -> Object: ...
    def CoerceT(value: Object, t: Type, explicitOK: bool) -> Object: ...
    def IsBadIndex(ast: AST) -> bool: ...
    def ThrowTypeMismatch(val: Object) -> None: ...
    @overload
    def ToBoolean(d: float) -> bool: ...
    @overload
    def ToBoolean(value: Object) -> bool: ...
    @overload
    def ToBoolean(value: Object, explicitConversion: bool) -> bool: ...
    def ToForInObject(value: Object, engine: VsaEngine) -> Object: ...
    def ToInt32(value: Object) -> int: ...
    def ToNativeArray(value: Object, handle: RuntimeTypeHandle) -> Object: ...
    @overload
    def ToNumber(str: str) -> float: ...
    @overload
    def ToNumber(value: Object) -> float: ...
    def ToObject(value: Object, engine: VsaEngine) -> Object: ...
    def ToObject2(value: Object, engine: VsaEngine) -> Object: ...
    @overload
    def ToString(b: bool) -> str: ...
    @overload
    def ToString(d: float) -> str: ...
    @overload
    def ToString(value: Object, explicitOK: bool) -> str: ...


class DateConstructor(ScriptFunction):
    @overload
    def CreateInstance(self, args: Set(Object)) -> DateObject: ...
    @overload
    def Invoke(self) -> str: ...
    def parse(str: str) -> float: ...
    def UTC(year: Object, month: Object, date: Object, hours: Object, minutes: Object, seconds: Object, ms: Object) -> float: ...


class DateObject(JSObject):
    pass


class DatePrototype(DateObject):
    @property
    def constructor() -> DateConstructor: ...
    def getDate(thisob: Object) -> float: ...
    def getDay(thisob: Object) -> float: ...
    def getFullYear(thisob: Object) -> float: ...
    def getHours(thisob: Object) -> float: ...
    def getMilliseconds(thisob: Object) -> float: ...
    def getMinutes(thisob: Object) -> float: ...
    def getMonth(thisob: Object) -> float: ...
    def getSeconds(thisob: Object) -> float: ...
    def getTime(thisob: Object) -> float: ...
    def getTimezoneOffset(thisob: Object) -> float: ...
    def getUTCDate(thisob: Object) -> float: ...
    def getUTCDay(thisob: Object) -> float: ...
    def getUTCFullYear(thisob: Object) -> float: ...
    def getUTCHours(thisob: Object) -> float: ...
    def getUTCMilliseconds(thisob: Object) -> float: ...
    def getUTCMinutes(thisob: Object) -> float: ...
    def getUTCMonth(thisob: Object) -> float: ...
    def getUTCSeconds(thisob: Object) -> float: ...
    def getVarDate(thisob: Object) -> Object: ...
    def getYear(thisob: Object) -> float: ...
    def setDate(thisob: Object, ddate: float) -> float: ...
    def setFullYear(thisob: Object, dyear: float, month: Object, date: Object) -> float: ...
    def setHours(thisob: Object, dhour: float, min: Object, sec: Object, msec: Object) -> float: ...
    def setMilliseconds(thisob: Object, dmsec: float) -> float: ...
    def setMinutes(thisob: Object, dmin: float, sec: Object, msec: Object) -> float: ...
    def setMonth(thisob: Object, dmonth: float, date: Object) -> float: ...
    def setSeconds(thisob: Object, dsec: float, msec: Object) -> float: ...
    def setTime(thisob: Object, time: float) -> float: ...
    def setUTCDate(thisob: Object, ddate: float) -> float: ...
    def setUTCFullYear(thisob: Object, dyear: float, month: Object, date: Object) -> float: ...
    def setUTCHours(thisob: Object, dhour: float, min: Object, sec: Object, msec: Object) -> float: ...
    def setUTCMilliseconds(thisob: Object, dmsec: float) -> float: ...
    def setUTCMinutes(thisob: Object, dmin: float, sec: Object, msec: Object) -> float: ...
    def setUTCMonth(thisob: Object, dmonth: float, date: Object) -> float: ...
    def setUTCSeconds(thisob: Object, dsec: float, msec: Object) -> float: ...
    def setYear(thisob: Object, dyear: float) -> float: ...
    def toDateString(thisob: Object) -> str: ...
    def toGMTString(thisob: Object) -> str: ...
    def toLocaleDateString(thisob: Object) -> str: ...
    def toLocaleString(thisob: Object) -> str: ...
    def toLocaleTimeString(thisob: Object) -> str: ...
    def toString(thisob: Object) -> str: ...
    def toTimeString(thisob: Object) -> str: ...
    def toUTCString(thisob: Object) -> str: ...
    def valueOf(thisob: Object) -> float: ...


class DebugBreak(AST):
    pass


class DebugConvert:
    def __init__(self): ...
    def BooleanToString(self, value: bool) -> str: ...
    def ByteToString(self, value: Byte, radix: int) -> str: ...
    def DecimalToString(self, value: Decimal) -> str: ...
    def DoubleToDateString(self, value: float) -> str: ...
    def DoubleToString(self, value: float) -> str: ...
    def GetErrorMessageForHR(self, hr: int, engine: IJSVsaEngine) -> str: ...
    def GetManagedCharObject(self, i: UInt16) -> Object: ...
    def GetManagedInt64Object(self, i: Int64) -> Object: ...
    def GetManagedObject(self, value: Object) -> Object: ...
    def GetManagedUInt64Object(self, i: UInt64) -> Object: ...
    def Int16ToString(self, value: Int16, radix: int) -> str: ...
    def Int32ToString(self, value: int, radix: int) -> str: ...
    def Int64ToString(self, value: Int64, radix: int) -> str: ...
    def RegexpToString(self, source: str, ignoreCase: bool, global: bool, multiline: bool) -> str: ...
    def SByteToString(self, value: SByte, radix: int) -> str: ...
    def SingleToString(self, value: Single) -> str: ...
    def StringToPrintable(self, source: str) -> str: ...
    def ToPrimitive(self, value: Object, typeCode: TypeCode, truncationPermitted: bool) -> Object: ...
    def UInt16ToString(self, value: UInt16, radix: int) -> str: ...
    def UInt32ToString(self, value: UInt32, radix: int) -> str: ...
    def UInt64ToString(self, value: UInt64, radix: int) -> str: ...


class DocumentContext:
    pass


class DynamicFieldInfo:
    @overload
    def __init__(self, name: str, value: Object): ...
    @overload
    def __init__(self, name: str, value: Object, fieldTypeName: str): ...


class Empty:
    pass


class EndOfFile(ParserException):
    pass


class EnumeratorConstructor(ScriptFunction):
    @overload
    def CreateInstance(self, args: Set(Object)) -> EnumeratorObject: ...
    @overload
    def Invoke(self) -> Object: ...


class EnumeratorObject(JSObject):
    pass


class EnumeratorPrototype(JSObject):
    def atEnd(thisob: Object) -> bool: ...
    @property
    def constructor() -> EnumeratorConstructor: ...
    def item(thisob: Object) -> Object: ...
    def moveFirst(thisob: Object) -> None: ...
    def moveNext(thisob: Object) -> None: ...


class Equality(BinaryOp):
    def __init__(self, operatorTok: int): ...
    def EvaluateEquality(self, v1: Object, v2: Object) -> bool: ...
    def JScriptEquals(v1: Object, v2: Object) -> bool: ...


class ErrorConstructor(ScriptFunction):
    @overload
    def CreateInstance(self, args: Set(Object)) -> ErrorObject: ...
    @overload
    def Invoke(self, args: Set(Object)) -> Object: ...


class ErrorObject(JSObject):
    def op_Explicit(err: ErrorObject) -> Exception: ...
    def ToException(err: ErrorObject) -> Exception: ...


class ErrorPrototype(JSObject):
    @property
    def constructor(self) -> ErrorConstructor: ...
    def toString(thisob: Object) -> str: ...


class ErrorType:
    OtherError = 0
    EvalError = 1
    RangeError = 2
    ReferenceError = 3
    SyntaxError = 4
    TypeError = 5
    URIError = 6


class Eval(AST):
    @overload
    def JScriptEvaluate(source: Object, engine: VsaEngine) -> Object: ...
    @overload
    def JScriptEvaluate(source: Object, unsafeOption: Object, engine: VsaEngine) -> Object: ...


class EvalErrorObject(ErrorObject):
    pass


class Expando:
    def __init__(self): ...


class FieldAccessor:
    def GetValue(self, thisob: Object) -> Object: ...
    def SetValue(self, thisob: Object, value: Object) -> None: ...


class ForIn(AST):
    def JScriptGetEnumerator(coll: Object) -> IEnumerator: ...


class FunctionConstructor(ScriptFunction):
    @overload
    def CreateInstance(self, args: Set(Object)) -> ScriptFunction: ...
    @overload
    def Invoke(self, args: Set(Object)) -> ScriptFunction: ...


class FunctionDeclaration(AST):
    def JScriptFunctionDeclaration(handle: RuntimeTypeHandle, name: str, method_name: str, formal_parameters: Set(str), fields: Set(JSLocalField), must_save_stack_locals: bool, hasArgumentsObject: bool, text: str, declaringObject: Object, engine: VsaEngine) -> Closure: ...


class FunctionExpression(AST):
    def JScriptFunctionExpression(handle: RuntimeTypeHandle, name: str, method_name: str, formal_params: Set(str), fields: Set(JSLocalField), must_save_stack_locals: bool, hasArgumentsObject: bool, text: str, engine: VsaEngine) -> FunctionObject: ...


class FunctionObject(ScriptFunction):
    def ToString(self) -> str: ...


class FunctionPrototype(ScriptFunction):
    def apply(thisob: Object, thisarg: Object, argArray: Object) -> Object: ...
    def call(thisob: Object, thisarg: Object, args: Set(Object)) -> Object: ...
    @property
    def constructor() -> FunctionConstructor: ...
    def toString(thisob: Object) -> str: ...


class FunctionWrapper(ScriptFunction):
    def ToString(self) -> str: ...


class GlobalObject:
    def CollectGarbage() -> None: ...
    def decodeURI(encodedURI: Object) -> str: ...
    def decodeURIComponent(encodedURI: Object) -> str: ...
    def encodeURI(uri: Object) -> str: ...
    def encodeURIComponent(uriComponent: Object) -> str: ...
    def escape(string: Object) -> str: ...
    def eval(x: Object) -> Object: ...
    @property
    def ActiveXObject() -> ActiveXObjectConstructor: ...
    @property
    def Array() -> ArrayConstructor: ...
    @property
    def boolean() -> Type: ...
    @property
    def Boolean() -> BooleanConstructor: ...
    @property
    def byte() -> Type: ...
    @property
    def char() -> Type: ...
    @property
    def Date() -> DateConstructor: ...
    @property
    def decimal() -> Type: ...
    @property
    def double() -> Type: ...
    @property
    def Enumerator() -> EnumeratorConstructor: ...
    @property
    def Error() -> ErrorConstructor: ...
    @property
    def EvalError() -> ErrorConstructor: ...
    @property
    def float() -> Type: ...
    @property
    def Function() -> FunctionConstructor: ...
    @property
    def int() -> Type: ...
    @property
    def long() -> Type: ...
    @property
    def Math() -> MathObject: ...
    @property
    def Number() -> NumberConstructor: ...
    @property
    def Object() -> ObjectConstructor: ...
    @property
    def RangeError() -> ErrorConstructor: ...
    @property
    def ReferenceError() -> ErrorConstructor: ...
    @property
    def RegExp() -> RegExpConstructor: ...
    @property
    def sbyte() -> Type: ...
    @property
    def short() -> Type: ...
    @property
    def String() -> StringConstructor: ...
    @property
    def SyntaxError() -> ErrorConstructor: ...
    @property
    def TypeError() -> ErrorConstructor: ...
    @property
    def uint() -> Type: ...
    @property
    def ulong() -> Type: ...
    @property
    def URIError() -> ErrorConstructor: ...
    @property
    def ushort() -> Type: ...
    @property
    def VBArray() -> VBArrayConstructor: ...
    @property
    def void() -> Type: ...
    def GetObject(moniker: Object, progId: Object) -> Object: ...
    def isFinite(number: float) -> bool: ...
    def isNaN(num: Object) -> bool: ...
    def parseFloat(string: Object) -> float: ...
    def parseInt(string: Object, radix: Object) -> float: ...
    def ScriptEngine() -> str: ...
    def ScriptEngineBuildVersion() -> int: ...
    def ScriptEngineMajorVersion() -> int: ...
    def ScriptEngineMinorVersion() -> int: ...
    def unescape(string: Object) -> str: ...


class Globals:
    def ConstructArray(args: Set(Object)) -> ArrayObject: ...
    def ConstructArrayLiteral(args: Set(Object)) -> ArrayObject: ...


class GlobalScope(ActivationObject):
    def __init__(self, parent: GlobalScope, engine: VsaEngine): ...
    def AddField(self, name: str) -> FieldInfo: ...
    def GetDefaultThisObject(self) -> Object: ...
    @overload
    def GetField(self, name: str, lexLevel: int) -> FieldInfo: ...
    def GetFields(self, bindingAttr: BindingFlags) -> Set(FieldInfo): ...
    def GetGlobalScope(self) -> GlobalScope: ...
    def GetLocalField(self, name: str) -> FieldInfo: ...
    def GetMember(self, name: str, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def GetMembers(self, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def GetMethods(self, bindingAttr: BindingFlags) -> Set(MethodInfo): ...
    def GetProperties(self, bindingAttr: BindingFlags) -> Set(PropertyInfo): ...


class Hide:
    def __init__(self): ...


class IActivationObject:
    def GetDefaultThisObject(self) -> Object: ...
    def GetField(self, name: str, lexLevel: int) -> FieldInfo: ...
    def GetGlobalScope(self) -> GlobalScope: ...
    def GetLocalField(self, name: str) -> FieldInfo: ...
    def GetMemberValue(self, name: str, lexlevel: int) -> Object: ...


class IAuthorServices:
    def GetCodeSense(self) -> IParseText: ...
    def GetColorizer(self) -> IColorizeText: ...


class IColorizeText:
    def Colorize(self, sourceCode: str, state: SourceState) -> ITokenEnumerator: ...
    def GetStateForText(self, sourceCode: str, currentState: SourceState) -> SourceState: ...


class IDebugConvert:
    def BooleanToString(self, value: bool) -> str: ...
    def ByteToString(self, value: Byte, radix: int) -> str: ...
    def DoubleToDateString(self, value: float) -> str: ...
    def DoubleToString(self, value: float) -> str: ...
    def GetErrorMessageForHR(self, hr: int, engine: IJSVsaEngine) -> str: ...
    def GetManagedCharObject(self, i: UInt16) -> Object: ...
    def GetManagedInt64Object(self, i: Int64) -> Object: ...
    def GetManagedObject(self, value: Object) -> Object: ...
    def GetManagedUInt64Object(self, i: UInt64) -> Object: ...
    def Int16ToString(self, value: Int16, radix: int) -> str: ...
    def Int32ToString(self, value: int, radix: int) -> str: ...
    def Int64ToString(self, value: Int64, radix: int) -> str: ...
    def RegexpToString(self, source: str, ignoreCase: bool, global: bool, multiline: bool) -> str: ...
    def SByteToString(self, value: SByte, radix: int) -> str: ...
    def SingleToString(self, value: Single) -> str: ...
    def StringToPrintable(self, source: str) -> str: ...
    def ToPrimitive(self, value: Object, typeCode: TypeCode, truncationPermitted: bool) -> Object: ...
    def UInt16ToString(self, value: UInt16, radix: int) -> str: ...
    def UInt32ToString(self, value: UInt32, radix: int) -> str: ...
    def UInt64ToString(self, value: UInt64, radix: int) -> str: ...


class IDebugConvert2:
    def DecimalToString(self, value: Decimal) -> str: ...


class IDebuggerObject:
    def HasEnumerableMember(self, name: str) -> bool: ...
    def IsCOMObject(self) -> bool: ...
    def IsEqual(self, o: IDebuggerObject) -> bool: ...
    def IsScriptFunction(self) -> bool: ...
    def IsScriptObject(self) -> bool: ...


class IDebugScriptScope:
    def SetThisValue(self, thisValue: Object) -> None: ...


class IDebugType:
    def HasInstance(self, o: Object) -> bool: ...


class IDebugVsaScriptCodeItem:
    def Evaluate(self) -> Object: ...
    def ParseNamedBreakPoint(self, input: str) -> Tuple[bool, str, int, str, str, UInt64]: ...


class IDefineEvent:
    def AddEvent(self, code: str, startLine: int) -> Object: ...


class IEngine2:
    def Clone(self, domain: AppDomain) -> IJSVsaEngine: ...
    def CompileEmpty(self) -> bool: ...
    def ConnectEvents(self) -> None: ...
    def DisconnectEvents(self) -> None: ...
    def GetAssembly(self) -> Assembly: ...
    def GetGlobalScope(self) -> IVsaScriptScope: ...
    def GetModule(self) -> Module: ...
    def InitVsaEngine(self, rootMoniker: str, site: IJSVsaSite) -> None: ...
    def Interrupt(self) -> None: ...
    def RegisterEventSource(self, name: str) -> None: ...
    def Restart(self) -> None: ...
    def Run(self, domain: AppDomain) -> None: ...
    def RunEmpty(self) -> None: ...


class IErrorHandler:
    def OnCompilerError(self, error: IVsaFullErrorInfo) -> bool: ...


class IMessageReceiver:
    def Message(self, strValue: str) -> None: ...


class IMethodsCompletionInfo:
    pass


class Import(AST):
    def JScriptImport(name: str, engine: VsaEngine) -> None: ...


class In(BinaryOp):
    def JScriptIn(v1: Object, v2: Object) -> bool: ...


class INeedEngine:
    def GetEngine(self) -> VsaEngine: ...
    def SetEngine(self, engine: VsaEngine) -> None: ...


class Instanceof(BinaryOp):
    def JScriptInstanceof(v1: Object, v2: Object) -> bool: ...


class IObjectCompletionInfo:
    pass


class IParseText:
    def Parse(self, code: str, error: IErrorHandler) -> None: ...


class IRedirectOutput:
    def SetOutputStream(self, output: IMessageReceiver) -> None: ...


class ISite2:
    def GetParentChain(self, obj: Object) -> Set(Object): ...


class ITokenColorInfo:
    @property
    def Color(self) -> TokenColor: ...
    @property
    def EndPosition(self) -> int: ...
    @property
    def StartPosition(self) -> int: ...


class ITokenEnumerator:
    def GetNext(self) -> ITokenColorInfo: ...
    def Reset(self) -> None: ...


class IVsaFullErrorInfo:
    @property
    def EndLine(self) -> int: ...


class IVsaScriptCodeItem:
    def Execute(self) -> Object: ...
    @property
    def StartColumn(self) -> int: ...
    @property
    def StartLine(self) -> int: ...
    @StartColumn.setter
    def StartColumn(self, value: int) -> None: ...
    @StartLine.setter
    def StartLine(self, value: int) -> None: ...


class IVsaScriptScope:
    def AddItem(self, itemName: str, type: JSVsaItemType) -> IJSVsaItem: ...
    def CreateDynamicItem(self, itemName: str, type: JSVsaItemType) -> IJSVsaItem: ...
    @property
    def Parent(self) -> IVsaScriptScope: ...
    def GetItem(self, itemName: str) -> IJSVsaItem: ...
    def GetItemAtIndex(self, index: int) -> IJSVsaItem: ...
    def GetItemCount(self) -> int: ...
    def GetObject(self) -> Object: ...
    @overload
    def RemoveItem(self, itemName: str) -> None: ...
    @overload
    def RemoveItem(self, item: IJSVsaItem) -> None: ...
    def RemoveItemAtIndex(self, index: int) -> None: ...


class IWrappedMember:
    def GetWrappedObject(self) -> Object: ...


class JSAuthor:
    def __init__(self): ...
    def GetCodeSense(self) -> IParseText: ...
    def GetColorizer(self) -> IColorizeText: ...


class JSBuiltin:
    #None = 0
    Array_concat = 1
    Array_join = 2
    Array_pop = 3
    Array_push = 4
    Array_reverse = 5
    Array_shift = 6
    Array_slice = 7
    Array_sort = 8
    Array_splice = 9
    Array_toLocaleString = 10
    Array_toString = 11
    Array_unshift = 12
    Boolean_toString = 13
    Boolean_valueOf = 14
    Date_getDate = 15
    Date_getDay = 16
    Date_getFullYear = 17
    Date_getHours = 18
    Date_getMilliseconds = 19
    Date_getMinutes = 20
    Date_getMonth = 21
    Date_getSeconds = 22
    Date_getTime = 23
    Date_getTimezoneOffset = 24
    Date_getUTCDate = 25
    Date_getUTCDay = 26
    Date_getUTCFullYear = 27
    Date_getUTCHours = 28
    Date_getUTCMilliseconds = 29
    Date_getUTCMinutes = 30
    Date_getUTCMonth = 31
    Date_getUTCSeconds = 32
    Date_getVarDate = 33
    Date_getYear = 34
    Date_parse = 35
    Date_setDate = 36
    Date_setFullYear = 37
    Date_setHours = 38
    Date_setMinutes = 39
    Date_setMilliseconds = 40
    Date_setMonth = 41
    Date_setSeconds = 42
    Date_setTime = 43
    Date_setUTCDate = 44
    Date_setUTCFullYear = 45
    Date_setUTCHours = 46
    Date_setUTCMinutes = 47
    Date_setUTCMilliseconds = 48
    Date_setUTCMonth = 49
    Date_setUTCSeconds = 50
    Date_setYear = 51
    Date_toDateString = 52
    Date_toGMTString = 53
    Date_toLocaleDateString = 54
    Date_toLocaleString = 55
    Date_toLocaleTimeString = 56
    Date_toString = 57
    Date_toTimeString = 58
    Date_toUTCString = 59
    Date_UTC = 60
    Date_valueOf = 61
    Enumerator_atEnd = 62
    Enumerator_item = 63
    Enumerator_moveFirst = 64
    Enumerator_moveNext = 65
    Error_toString = 66
    Function_apply = 67
    Function_call = 68
    Function_toString = 69
    Global_CollectGarbage = 70
    Global_decodeURI = 71
    Global_decodeURIComponent = 72
    Global_encodeURI = 73
    Global_encodeURIComponent = 74
    Global_escape = 75
    Global_eval = 76
    Global_GetObject = 77
    Global_isNaN = 78
    Global_isFinite = 79
    Global_parseFloat = 80
    Global_parseInt = 81
    Global_ScriptEngine = 82
    Global_ScriptEngineBuildVersion = 83
    Global_ScriptEngineMajorVersion = 84
    Global_ScriptEngineMinorVersion = 85
    Global_unescape = 86
    Math_abs = 87
    Math_acos = 88
    Math_asin = 89
    Math_atan = 90
    Math_atan2 = 91
    Math_ceil = 92
    Math_cos = 93
    Math_exp = 94
    Math_floor = 95
    Math_log = 96
    Math_max = 97
    Math_min = 98
    Math_pow = 99
    Math_random = 100
    Math_round = 101
    Math_sin = 102
    Math_sqrt = 103
    Math_tan = 104
    Number_toExponential = 105
    Number_toFixed = 106
    Number_toLocaleString = 107
    Number_toPrecision = 108
    Number_toString = 109
    Number_valueOf = 110
    Object_hasOwnProperty = 111
    Object_isPrototypeOf = 112
    Object_propertyIsEnumerable = 113
    Object_toLocaleString = 114
    Object_toString = 115
    Object_valueOf = 116
    RegExp_compile = 117
    RegExp_exec = 118
    RegExp_test = 119
    RegExp_toString = 120
    String_anchor = 121
    String_big = 122
    String_blink = 123
    String_bold = 124
    String_charAt = 125
    String_charCodeAt = 126
    String_concat = 127
    String_fixed = 128
    String_fontcolor = 129
    String_fontsize = 130
    String_fromCharCode = 131
    String_indexOf = 132
    String_italics = 133
    String_lastIndexOf = 134
    String_link = 135
    String_localeCompare = 136
    String_match = 137
    String_replace = 138
    String_search = 139
    String_slice = 140
    String_small = 141
    String_split = 142
    String_strike = 143
    String_sub = 144
    String_substr = 145
    String_substring = 146
    String_sup = 147
    String_toLocaleLowerCase = 148
    String_toLocaleUpperCase = 149
    String_toLowerCase = 150
    String_toString = 151
    String_toUpperCase = 152
    String_valueOf = 153
    VBArray_dimensions = 154
    VBArray_getItem = 155
    VBArray_lbound = 156
    VBArray_toArray = 157
    VBArray_ubound = 158


class JSConstructor:
    @property
    def Attributes(self) -> MethodAttributes: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def MethodHandle(self) -> RuntimeMethodHandle: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> Type: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> Set(Object): ...
    @overload
    def GetCustomAttributes(self, t: Type, inherit: bool) -> Set(Object): ...
    def GetMethodImplementationFlags(self) -> MethodImplAttributes: ...
    def GetParameters(self) -> Set(ParameterInfo): ...
    @overload
    def Invoke(self, options: BindingFlags, binder: Binder, parameters: Set(Object), culture: CultureInfo) -> Object: ...
    @overload
    def Invoke(self, obj: Object, options: BindingFlags, binder: Binder, parameters: Set(Object), culture: CultureInfo) -> Object: ...
    def IsDefined(self, type: Type, inherit: bool) -> bool: ...


class JScriptCodeProvider:
    def __init__(self): ...
    def CreateCompiler(self) -> ICodeCompiler: ...
    @overload
    def CreateGenerator(self) -> ICodeGenerator: ...
    @property
    def FileExtension(self) -> str: ...


class JScriptException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, m: str): ...
    @overload
    def __init__(self, errorNumber: JSError): ...
    @overload
    def __init__(self, m: str, e: Exception): ...
    @property
    def Column(self) -> int: ...
    @property
    def Description(self) -> str: ...
    @property
    def EndColumn(self) -> int: ...
    @property
    def EndLine(self) -> int: ...
    @property
    def ErrorNumber(self) -> int: ...
    @property
    def Line(self) -> int: ...
    @property
    def LineText(self) -> str: ...
    @property
    def Message(self) -> str: ...
    @property
    def Number(self) -> int: ...
    @property
    def Severity(self) -> int: ...
    @property
    def SourceItem(self) -> IJSVsaItem: ...
    @property
    def SourceMoniker(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def StartColumn(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class JSError:
    NoError = 0
    InvalidCall = 5
    OutOfMemory = 7
    TypeMismatch = 13
    OutOfStack = 28
    InternalError = 51
    FileNotFound = 53
    NeedObject = 424
    CantCreateObject = 429
    OLENoPropOrMethod = 438
    ActionNotSupported = 445
    NotCollection = 451
    SyntaxError = 1002
    NoColon = 1003
    NoSemicolon = 1004
    NoLeftParen = 1005
    NoRightParen = 1006
    NoRightBracket = 1007
    NoLeftCurly = 1008
    NoRightCurly = 1009
    NoIdentifier = 1010
    NoEqual = 1011
    IllegalChar = 1014
    UnterminatedString = 1015
    NoCommentEnd = 1016
    BadReturn = 1018
    BadBreak = 1019
    BadContinue = 1020
    BadHexDigit = 1023
    NoWhile = 1024
    BadLabel = 1025
    NoLabel = 1026
    DupDefault = 1027
    NoMemberIdentifier = 1028
    NoCcEnd = 1029
    CcOff = 1030
    NotConst = 1031
    NoAt = 1032
    NoCatch = 1033
    InvalidElse = 1034
    NoComma = 1100
    DupVisibility = 1101
    IllegalVisibility = 1102
    BadSwitch = 1103
    CcInvalidEnd = 1104
    CcInvalidElse = 1105
    CcInvalidElif = 1106
    ErrEOF = 1107
    IncompatibleVisibility = 1108
    ClassNotAllowed = 1109
    NeedCompileTimeConstant = 1110
    DuplicateName = 1111
    NeedType = 1112
    NotInsideClass = 1113
    InvalidPositionDirective = 1114
    MustBeEOL = 1115
    WrongDirective = 1118
    CannotNestPositionDirective = 1119
    CircularDefinition = 1120
    Deprecated = 1121
    IllegalUseOfThis = 1122
    NotAccessible = 1123
    CannotUseNameOfClass = 1124
    MustImplementMethod = 1128
    NeedInterface = 1129
    UnreachableCatch = 1133
    TypeCannotBeExtended = 1134
    UndeclaredVariable = 1135
    VariableLeftUninitialized = 1136
    KeywordUsedAsIdentifier = 1137
    NotAllowedInSuperConstructorCall = 1140
    NotMeantToBeCalledDirectly = 1141
    GetAndSetAreInconsistent = 1142
    InvalidCustomAttribute = 1143
    InvalidCustomAttributeArgument = 1144
    InvalidCustomAttributeClassOrCtor = 1146
    TooManyParameters = 1148
    AmbiguousBindingBecauseOfWith = 1149
    AmbiguousBindingBecauseOfEval = 1150
    NoSuchMember = 1151
    ItemNotAllowedOnExpandoClass = 1152
    MethodNotAllowedOnExpandoClass = 1153
    MethodClashOnExpandoSuperClass = 1155
    BaseClassIsExpandoAlready = 1156
    AbstractCannotBePrivate = 1157
    NotIndexable = 1158
    StaticMissingInStaticInit = 1159
    MissingConstructForAttributes = 1160
    OnlyClassesAllowed = 1161
    ExpandoClassShouldNotImpleEnumerable = 1162
    NonCLSCompliantMember = 1163
    NotDeletable = 1164
    PackageExpected = 1165
    UselessExpression = 1169
    HidesParentMember = 1170
    CannotChangeVisibility = 1171
    HidesAbstractInBase = 1172
    NewNotSpecifiedInMethodDeclaration = 1173
    MethodInBaseIsNotVirtual = 1174
    NoMethodInBaseToNew = 1175
    DifferentReturnTypeFromBase = 1176
    ClashWithProperty = 1177
    OverrideAndHideUsedTogether = 1178
    InvalidLanguageOption = 1179
    NoMethodInBaseToOverride = 1180
    NotValidForConstructor = 1181
    CannotReturnValueFromVoidFunction = 1182
    AmbiguousMatch = 1183
    AmbiguousConstructorCall = 1184
    SuperClassConstructorNotAccessible = 1185
    OctalLiteralsAreDeprecated = 1186
    VariableMightBeUnitialized = 1187
    NotOKToCallSuper = 1188
    IllegalUseOfSuper = 1189
    BadWayToLeaveFinally = 1190
    NoCommaOrTypeDefinitionError = 1191
    AbstractWithBody = 1192
    NoRightParenOrComma = 1193
    NoRightBracketOrComma = 1194
    ExpressionExpected = 1195
    UnexpectedSemicolon = 1196
    TooManyTokensSkipped = 1197
    BadVariableDeclaration = 1198
    BadFunctionDeclaration = 1199
    BadPropertyDeclaration = 1200
    DoesNotHaveAnAddress = 1203
    TooFewParameters = 1204
    UselessAssignment = 1205
    SuspectAssignment = 1206
    SuspectSemicolon = 1207
    ImpossibleConversion = 1208
    FinalPrecludesAbstract = 1209
    NeedInstance = 1210
    CannotBeAbstract = 1212
    InvalidBaseTypeForEnum = 1213
    CannotInstantiateAbstractClass = 1214
    ArrayMayBeCopied = 1215
    AbstractCannotBeStatic = 1216
    StaticIsAlreadyFinal = 1217
    StaticMethodsCannotOverride = 1218
    StaticMethodsCannotHide = 1219
    ExpandoPrecludesOverride = 1220
    IllegalParamArrayAttribute = 1221
    ExpandoPrecludesAbstract = 1222
    ShouldBeAbstract = 1223
    BadModifierInInterface = 1224
    VarIllegalInInterface = 1226
    InterfaceIllegalInInterface = 1227
    NoVarInEnum = 1228
    InvalidImport = 1229
    EnumNotAllowed = 1230
    InvalidCustomAttributeTarget = 1231
    PackageInWrongContext = 1232
    ConstructorMayNotHaveReturnType = 1233
    OnlyClassesAndPackagesAllowed = 1234
    InvalidDebugDirective = 1235
    CustomAttributeUsedMoreThanOnce = 1236
    NestedInstanceTypeCannotBeExtendedByStatic = 1237
    PropertyLevelAttributesMustBeOnGetter = 1238
    BadThrow = 1239
    ParamListNotLast = 1240
    NoSuchType = 1241
    BadOctalLiteral = 1242
    InstanceNotAccessibleFromStatic = 1243
    StaticRequiresTypeName = 1244
    NonStaticWithTypeName = 1245
    NoSuchStaticMember = 1246
    SuspectLoopCondition = 1247
    ExpectedAssembly = 1248
    AssemblyAttributesMustBeGlobal = 1249
    ExpandoPrecludesStatic = 1250
    DuplicateMethod = 1251
    NotAnExpandoFunction = 1252
    NotValidVersionString = 1253
    ExecutablesCannotBeLocalized = 1254
    StringConcatIsSlow = 1255
    CcInvalidInDebugger = 1256
    ExpandoMustBePublic = 1257
    DelegatesShouldNotBeExplicitlyConstructed = 1258
    ImplicitlyReferencedAssemblyNotFound = 1259
    PossibleBadConversion = 1260
    PossibleBadConversionFromString = 1261
    InvalidResource = 1262
    WrongUseOfAddressOf = 1263
    NonCLSCompliantType = 1264
    MemberTypeCLSCompliantMismatch = 1265
    TypeAssemblyCLSCompliantMismatch = 1266
    IncompatibleAssemblyReference = 1267
    InvalidAssemblyKeyFile = 1268
    TypeNameTooLong = 1269
    MemberInitializerCannotContainFuncExpr = 1270
    CantAssignThis = 5000
    NumberExpected = 5001
    FunctionExpected = 5002
    CannotAssignToFunctionResult = 5003
    StringExpected = 5005
    DateExpected = 5006
    ObjectExpected = 5007
    IllegalAssignment = 5008
    UndefinedIdentifier = 5009
    BooleanExpected = 5010
    VBArrayExpected = 5013
    EnumeratorExpected = 5015
    RegExpExpected = 5016
    RegExpSyntax = 5017
    UncaughtException = 5022
    InvalidPrototype = 5023
    URIEncodeError = 5024
    URIDecodeError = 5025
    FractionOutOfRange = 5026
    PrecisionOutOfRange = 5027
    ArrayLengthConstructIncorrect = 5029
    ArrayLengthAssignIncorrect = 5030
    NeedArrayObject = 5031
    NoConstructor = 5032
    IllegalEval = 5033
    NotYetImplemented = 5034
    MustProvideNameForNamedParameter = 5035
    DuplicateNamedParameter = 5036
    MissingNameParameter = 5037
    MoreNamedParametersThanArguments = 5038
    NonSupportedInDebugger = 5039
    AssignmentToReadOnly = 5040
    WriteOnlyProperty = 5041
    IncorrectNumberOfIndices = 5042
    RefParamsNonSupportedInDebugger = 5043
    CannotCallSecurityMethodLateBound = 5044
    CannotUseStaticSecurityAttribute = 5045
    NonClsException = 5046
    FuncEvalAborted = 6000
    FuncEvalTimedout = 6001
    FuncEvalThreadSuspended = 6002
    FuncEvalThreadSleepWaitJoin = 6003
    FuncEvalBadThreadState = 6004
    FuncEvalBadThreadNotStarted = 6005
    NoFuncEvalAllowed = 6006
    FuncEvalBadLocation = 6007
    FuncEvalWebMethod = 6008
    StaticVarNotAvailable = 6009
    TypeObjectNotAvailable = 6010
    ExceptionFromHResult = 6011
    SideEffectsDisallowed = 6012


class JSField:
    @property
    def Attributes(self) -> FieldAttributes: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def FieldHandle(self) -> RuntimeFieldHandle: ...
    @property
    def FieldType(self) -> Type: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> Type: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> Set(Object): ...
    @overload
    def GetCustomAttributes(self, t: Type, inherit: bool) -> Set(Object): ...
    def IsDefined(self, type: Type, inherit: bool) -> bool: ...


class JSFieldInfo:
    @property
    def Attributes(self) -> FieldAttributes: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def FieldHandle(self) -> RuntimeFieldHandle: ...
    @property
    def FieldType(self) -> Type: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> Type: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> Set(Object): ...
    @overload
    def GetCustomAttributes(self, t: Type, inherit: bool) -> Set(Object): ...
    def GetValue(self, obj: Object) -> Object: ...
    def IsDefined(self, type: Type, inherit: bool) -> bool: ...
    @overload
    def SetValue(self, obj: Object, value: Object) -> None: ...
    @overload
    def SetValue(self, obj: Object, value: Object, invokeAttr: BindingFlags, binder: Binder, culture: CultureInfo) -> None: ...


class JSFunctionAttribute:
    @overload
    def __init__(self, value: JSFunctionAttributeEnum): ...
    @overload
    def __init__(self, value: JSFunctionAttributeEnum, builtinFunction: JSBuiltin): ...
    def GetAttributeValue(self) -> JSFunctionAttributeEnum: ...


class JSFunctionAttributeEnum:
    #None = 0
    HasArguments = 1
    HasThisObject = 2
    IsNested = 4
    HasStackFrame = 8
    HasVarArgs = 16
    HasEngine = 32
    ClassicFunction = 35
    NestedFunction = 44
    ClassicNestedFunction = 47
    IsExpandoMethod = 64
    IsInstanceNestedClassConstructor = 128


class JSLocalField(JSVariableField):
    def __init__(self, name: str, handle: RuntimeTypeHandle, slotNumber: int): ...
    @property
    def FieldType(self) -> Type: ...
    def GetValue(self, obj: Object) -> Object: ...
    @overload
    def SetValue(self, obj: Object, value: Object, invokeAttr: BindingFlags, binder: Binder, locale: CultureInfo) -> None: ...


class JSMethod:
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def MethodHandle(self) -> RuntimeMethodHandle: ...
    @property
    def ReflectedType(self) -> Type: ...
    @property
    def ReturnTypeCustomAttributes(self) -> ICustomAttributeProvider: ...
    def GetBaseDefinition(self) -> MethodInfo: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> Set(Object): ...
    @overload
    def GetCustomAttributes(self, t: Type, inherit: bool) -> Set(Object): ...
    def GetMethodImplementationFlags(self) -> MethodImplAttributes: ...
    @overload
    def Invoke(self, obj: Object, options: BindingFlags, binder: Binder, parameters: Set(Object), culture: CultureInfo) -> Object: ...
    def IsDefined(self, type: Type, inherit: bool) -> bool: ...


class JSMethodInfo:
    @property
    def Attributes(self) -> MethodAttributes: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def MemberType(self) -> MemberTypes: ...
    @property
    def MethodHandle(self) -> RuntimeMethodHandle: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReflectedType(self) -> Type: ...
    @property
    def ReturnType(self) -> Type: ...
    @property
    def ReturnTypeCustomAttributes(self) -> ICustomAttributeProvider: ...
    def GetBaseDefinition(self) -> MethodInfo: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> Set(Object): ...
    @overload
    def GetCustomAttributes(self, type: Type, inherit: bool) -> Set(Object): ...
    def GetMethodImplementationFlags(self) -> MethodImplAttributes: ...
    def GetParameters(self) -> Set(ParameterInfo): ...
    @overload
    def Invoke(self, obj: Object, options: BindingFlags, binder: Binder, parameters: Set(Object), culture: CultureInfo) -> Object: ...
    def IsDefined(self, type: Type, inherit: bool) -> bool: ...
    def ToString(self) -> str: ...


class JSObject(ScriptObject):
    def __init__(self): ...
    def AddField(self, name: str) -> FieldInfo: ...
    def GetMember(self, name: str, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def GetMembers(self, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def SetMemberValue2(self, name: str, value: Object) -> None: ...
    def ToString(self) -> str: ...


class JSParser:
    def __init__(self, context: Context): ...
    def Parse(self) -> ScriptBlock: ...
    def ParseEvalBody(self) -> Block: ...


class JSPrototypeObject(JSObject):
    pass


class JSScanner:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sourceContext: Context): ...
    def GetCurrentLine(self) -> int: ...
    def GetCurrentPosition(self, absolute: bool) -> int: ...
    def GetNextToken(self) -> None: ...
    def GetSourceCode(self) -> str: ...
    def GetStartLinePosition(self) -> int: ...
    def GetStringLiteral(self) -> str: ...
    def GotEndOfLine(self) -> bool: ...
    def IsKeyword(token: JSToken) -> bool: ...
    def IsOperator(token: JSToken) -> bool: ...
    def SetAuthoringMode(self, mode: bool) -> None: ...
    def SetSource(self, sourceContext: Context) -> None: ...
    def SkipMultiLineComment(self) -> int: ...


class JSToken:
    EndOfFile = 0
    If = 1
    For = 2
    Do = 3
    While = 4
    Continue = 5
    Break = 6
    Return = 7
    Import = 8
    With = 9
    Switch = 10
    Throw = 11
    Try = 12
    Package = 13
    Internal = 14
    Abstract = 15
    Public = 16
    Static = 17
    Private = 18
    Protected = 19
    Final = 20
    Event = 21
    Var = 22
    Const = 23
    Class = 24
    Function = 25
    LeftCurly = 26
    Semicolon = 27
    Null = 28
    True = 29
    False = 30
    This = 31
    Identifier = 32
    StringLiteral = 33
    IntegerLiteral = 34
    NumericLiteral = 35
    LeftParen = 36
    LeftBracket = 37
    AccessField = 38
    FirstOp = 39
    LogicalNot = 39
    BitwiseNot = 40
    Delete = 41
    Void = 42
    Typeof = 43
    Increment = 44
    Decrement = 45
    Plus = 46
    FirstBinaryOp = 46
    Minus = 47
    LogicalOr = 48
    LogicalAnd = 49
    BitwiseOr = 50
    BitwiseXor = 51
    BitwiseAnd = 52
    Equal = 53
    NotEqual = 54
    StrictEqual = 55
    StrictNotEqual = 56
    GreaterThan = 57
    LessThan = 58
    LessThanEqual = 59
    GreaterThanEqual = 60
    LeftShift = 61
    RightShift = 62
    UnsignedRightShift = 63
    Multiply = 64
    Divide = 65
    LastPPOperator = 66
    Modulo = 66
    Instanceof = 67
    In = 68
    Assign = 69
    PlusAssign = 70
    MinusAssign = 71
    MultiplyAssign = 72
    DivideAssign = 73
    BitwiseAndAssign = 74
    BitwiseOrAssign = 75
    BitwiseXorAssign = 76
    ModuloAssign = 77
    LeftShiftAssign = 78
    RightShiftAssign = 79
    LastBinaryOp = 80
    UnsignedRightShiftAssign = 80
    LastAssign = 80
    ConditionalIf = 81
    Colon = 82
    Comma = 83
    LastOp = 83
    Case = 84
    Catch = 85
    Debugger = 86
    Default = 87
    Else = 88
    Export = 89
    Extends = 90
    Finally = 91
    Get = 92
    Implements = 93
    Interface = 94
    New = 95
    Set = 96
    Super = 97
    RightParen = 98
    RightCurly = 99
    RightBracket = 100
    PreProcessorConstant = 101
    Comment = 102
    UnterminatedComment = 103
    Assert = 104
    Boolean = 105
    Byte = 106
    Char = 107
    Decimal = 108
    Double = 109
    DoubleColon = 110
    Enum = 111
    Ensure = 112
    Float = 113
    Goto = 114
    Int = 115
    Invariant = 116
    Long = 117
    Namespace = 118
    Native = 119
    Require = 120
    Sbyte = 121
    Short = 122
    Synchronized = 123
    Transient = 124
    Throws = 125
    ParamArray = 126
    Volatile = 127
    Ushort = 128
    Uint = 129
    Ulong = 130
    Use = 131
    EndOfLine = 132
    PreProcessDirective = 133
    #None = -1


class JSVariableField(JSField):
    @property
    def Attributes(self) -> FieldAttributes: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def FieldType(self) -> Type: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetCustomAttributes(self, inherit: bool) -> Set(Object): ...


class LateBinding:
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, obj: Object): ...
    def Call(self, arguments: Set(Object), construct: bool, brackets: bool, engine: VsaEngine) -> Object: ...
    def CallValue(thisob: Object, val: Object, arguments: Set(Object), construct: bool, brackets: bool, engine: VsaEngine) -> Object: ...
    def CallValue2(val: Object, thisob: Object, arguments: Set(Object), construct: bool, brackets: bool, engine: VsaEngine) -> Object: ...
    def Delete(self) -> bool: ...
    def DeleteMember(obj: Object, name: str) -> bool: ...
    def GetNonMissingValue(self) -> Object: ...
    def GetValue2(self) -> Object: ...
    def SetIndexedPropertyValueStatic(obj: Object, arguments: Set(Object), value: Object) -> None: ...
    def SetValue(self, value: Object) -> None: ...


class LenientArrayPrototype(ArrayPrototype):
    pass


class LenientBooleanPrototype(BooleanPrototype):
    pass


class LenientDateConstructor(DateConstructor):
    pass


class LenientDatePrototype(DatePrototype):
    pass


class LenientEnumeratorPrototype(EnumeratorPrototype):
    pass


class LenientErrorPrototype(ErrorPrototype):
    pass


class LenientFunctionPrototype(FunctionPrototype):
    pass


class LenientGlobalObject(GlobalObject):
    @property
    def ActiveXObject(self) -> Object: ...
    @property
    def Array(self) -> Object: ...
    @property
    def Boolean(self) -> Object: ...
    @property
    def Date(self) -> Object: ...
    @property
    def Enumerator(self) -> Object: ...
    @property
    def Error(self) -> Object: ...
    @property
    def EvalError(self) -> Object: ...
    @property
    def Function(self) -> Object: ...
    @property
    def Math(self) -> Object: ...
    @property
    def Number(self) -> Object: ...
    @property
    def Object(self) -> Object: ...
    @property
    def RangeError(self) -> Object: ...
    @property
    def ReferenceError(self) -> Object: ...
    @property
    def RegExp(self) -> Object: ...
    @property
    def String(self) -> Object: ...
    @property
    def SyntaxError(self) -> Object: ...
    @property
    def TypeError(self) -> Object: ...
    @property
    def URIError(self) -> Object: ...
    @property
    def VBArray(self) -> Object: ...
    @ActiveXObject.setter
    def ActiveXObject(self, value: Object) -> None: ...
    @Array.setter
    def Array(self, value: Object) -> None: ...
    @Boolean.setter
    def Boolean(self, value: Object) -> None: ...
    @Date.setter
    def Date(self, value: Object) -> None: ...
    @Enumerator.setter
    def Enumerator(self, value: Object) -> None: ...
    @Error.setter
    def Error(self, value: Object) -> None: ...
    @EvalError.setter
    def EvalError(self, value: Object) -> None: ...
    @Function.setter
    def Function(self, value: Object) -> None: ...
    @Math.setter
    def Math(self, value: Object) -> None: ...
    @Number.setter
    def Number(self, value: Object) -> None: ...
    @Object.setter
    def Object(self, value: Object) -> None: ...
    @RangeError.setter
    def RangeError(self, value: Object) -> None: ...
    @ReferenceError.setter
    def ReferenceError(self, value: Object) -> None: ...
    @RegExp.setter
    def RegExp(self, value: Object) -> None: ...
    @String.setter
    def String(self, value: Object) -> None: ...
    @SyntaxError.setter
    def SyntaxError(self, value: Object) -> None: ...
    @TypeError.setter
    def TypeError(self, value: Object) -> None: ...
    @URIError.setter
    def URIError(self, value: Object) -> None: ...
    @VBArray.setter
    def VBArray(self, value: Object) -> None: ...


class LenientMathObject(MathObject):
    pass


class LenientNumberPrototype(NumberPrototype):
    pass


class LenientObjectPrototype(ObjectPrototype):
    pass


class LenientRegExpPrototype(RegExpPrototype):
    pass


class LenientStringConstructor(StringConstructor):
    pass


class LenientStringPrototype(StringPrototype):
    pass


class LenientVBArrayPrototype(VBArrayPrototype):
    pass


class MathObject(JSObject):
    def abs(d: float) -> float: ...
    def acos(x: float) -> float: ...
    def asin(x: float) -> float: ...
    def atan(x: float) -> float: ...
    def atan2(dy: float, dx: float) -> float: ...
    def ceil(x: float) -> float: ...
    def cos(x: float) -> float: ...
    def exp(x: float) -> float: ...
    def floor(x: float) -> float: ...
    def log(x: float) -> float: ...
    def max(x: Object, y: Object, args: Set(Object)) -> float: ...
    def min(x: Object, y: Object, args: Set(Object)) -> float: ...
    def pow(dx: float, dy: float) -> float: ...
    def random() -> float: ...
    def round(d: float) -> float: ...
    def sin(x: float) -> float: ...
    def sqrt(x: float) -> float: ...
    def tan(x: float) -> float: ...


class MemberInfoInitializer:
    def GetCOMMemberInfo(self) -> COMMemberInfo: ...
    def Initialize(self, name: str, dispatch: COMMemberInfo) -> None: ...


class MemberInfoList:
    pass


class MethodInvoker:
    def Invoke(self, thisob: Object, parameters: Set(Object)) -> Object: ...


class Missing:
    pass


class Namespace:
    def GetNamespace(name: str, engine: VsaEngine) -> Namespace: ...


class NoContextException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, m: str): ...
    @overload
    def __init__(self, m: str, e: Exception): ...


class NotRecommended:
    def __init__(self, message: str): ...
    @property
    def IsError(self) -> bool: ...
    @property
    def Message(self) -> str: ...


class NumberConstructor(ScriptFunction):
    @overload
    def CreateInstance(self, args: Set(Object)) -> NumberObject: ...
    @overload
    def Invoke(self, arg: Object) -> float: ...


class NumberObject(JSObject):
    @overload
    def GetType(self) -> Type: ...


class NumberPrototype(NumberObject):
    @property
    def constructor() -> NumberConstructor: ...
    def toExponential(thisob: Object, fractionDigits: Object) -> str: ...
    def toFixed(thisob: Object, fractionDigits: float) -> str: ...
    def toLocaleString(thisob: Object) -> str: ...
    def toPrecision(thisob: Object, precision: Object) -> str: ...
    def toString(thisob: Object, radix: Object) -> str: ...
    def valueOf(thisob: Object) -> Object: ...


class NumericBinary(BinaryOp):
    def __init__(self, operatorTok: int): ...
    def DoOp(v1: Object, v2: Object, operatorTok: JSToken) -> Object: ...
    def EvaluateNumericBinary(self, v1: Object, v2: Object) -> Object: ...


class NumericUnary(UnaryOp):
    def __init__(self, operatorTok: int): ...
    def EvaluateUnary(self, v: Object) -> Object: ...


class ObjectConstructor(ScriptFunction):
    def ConstructObject(self) -> JSObject: ...
    @overload
    def CreateInstance(self, args: Set(Object)) -> Object: ...
    @overload
    def Invoke(self, args: Set(Object)) -> Object: ...


class ObjectPrototype(JSObject):
    @property
    def constructor() -> ObjectConstructor: ...
    def hasOwnProperty(thisob: Object, name: Object) -> bool: ...
    def isPrototypeOf(thisob: Object, ob: Object) -> bool: ...
    def propertyIsEnumerable(thisob: Object, name: Object) -> bool: ...
    def toLocaleString(thisob: Object) -> str: ...
    def toString(thisob: Object) -> str: ...
    def valueOf(thisob: Object) -> Object: ...


class Override:
    def __init__(self): ...


class Package(AST):
    def JScriptPackage(rootName: str, engine: VsaEngine) -> None: ...


class ParserException:
    pass


class Plus(BinaryOp):
    def __init__(self): ...
    def DoOp(v1: Object, v2: Object) -> Object: ...
    def EvaluatePlus(self, v1: Object, v2: Object) -> Object: ...


class PostOrPrefixOperator(UnaryOp):
    def __init__(self, operatorTok: int): ...
    def EvaluatePostOrPrefix(self, v: Object) -> Tuple[Object, Object]: ...


class RangeErrorObject(ErrorObject):
    pass


class ReferenceAttribute:
    def __init__(self, reference: str): ...


class ReferenceErrorObject(ErrorObject):
    pass


class RegExpConstructor(ScriptFunction):
    def Construct(self, pattern: str, ignoreCase: bool, global: bool, multiline: bool) -> Object: ...
    @overload
    def CreateInstance(self, args: Set(Object)) -> RegExpObject: ...
    @property
    def index(self) -> Object: ...
    @property
    def input(self) -> Object: ...
    @property
    def lastIndex(self) -> Object: ...
    @property
    def lastMatch(self) -> Object: ...
    @property
    def lastParen(self) -> Object: ...
    @property
    def leftContext(self) -> Object: ...
    @property
    def rightContext(self) -> Object: ...
    @overload
    def Invoke(self, args: Set(Object)) -> RegExpObject: ...
    @input.setter
    def input(self, value: Object) -> None: ...


class RegExpMatch(ArrayObject):
    pass


class RegExpObject(JSObject):
    @property
    def global(self) -> bool: ...
    @property
    def ignoreCase(self) -> bool: ...
    @property
    def lastIndex(self) -> Object: ...
    @property
    def multiline(self) -> bool: ...
    @property
    def source(self) -> str: ...
    @lastIndex.setter
    def lastIndex(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class RegExpPrototype(JSObject):
    def compile(thisob: Object, source: Object, flags: Object) -> RegExpObject: ...
    def exec(thisob: Object, input: Object) -> Object: ...
    @property
    def constructor() -> RegExpConstructor: ...
    def test(thisob: Object, input: Object) -> bool: ...
    def toString(thisob: Object) -> str: ...


class Relational(BinaryOp):
    def __init__(self, operatorTok: int): ...
    def EvaluateRelational(self, v1: Object, v2: Object) -> float: ...
    def JScriptCompare(v1: Object, v2: Object) -> float: ...


class ReturnOutOfFinally:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, m: str): ...
    @overload
    def __init__(self, m: str, e: Exception): ...


class Runtime:
    def DoubleToInt64(val: float) -> Int64: ...
    @overload
    def Equals(v1: Object, v2: Object) -> bool: ...
    def UncheckedDecimalToInt64(val: Decimal) -> Int64: ...


class ScriptBlock(AST):
    pass


class ScriptFunction(JSObject):
    def CreateInstance(self, args: Set(Object)) -> Object: ...
    @property
    def length(self) -> int: ...
    @property
    def prototype(self) -> Object: ...
    def Invoke(self, thisob: Object, args: Set(Object)) -> Object: ...
    def InvokeMember(self, name: str, invokeAttr: BindingFlags, binder: Binder, target: Object, args: Set(Object), modifiers: Set(ParameterModifier), culture: CultureInfo, namedParameters: Set(str)) -> Object: ...
    @length.setter
    def length(self, value: int) -> None: ...
    @prototype.setter
    def prototype(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class ScriptObject:
    @property
    def Item(self, index: float) -> Object: ...
    @property
    def Item(self, pars: Set(Object)) -> Object: ...
    @property
    def Item(self, name: str) -> Object: ...
    @property
    def Item(self, index: int) -> Object: ...
    @property
    def UnderlyingSystemType(self) -> Type: ...
    def GetField(self, name: str, bindingAttr: BindingFlags) -> FieldInfo: ...
    def GetFields(self, bindingAttr: BindingFlags) -> Set(FieldInfo): ...
    def GetMember(self, name: str, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def GetMembers(self, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    @overload
    def GetMethod(self, name: str, bindingAttr: BindingFlags) -> MethodInfo: ...
    @overload
    def GetMethod(self, name: str, bindingAttr: BindingFlags, binder: Binder, types: Set(Type), modifiers: Set(ParameterModifier)) -> MethodInfo: ...
    def GetMethods(self, bindingAttr: BindingFlags) -> Set(MethodInfo): ...
    def GetParent(self) -> ScriptObject: ...
    def GetProperties(self, bindingAttr: BindingFlags) -> Set(PropertyInfo): ...
    @overload
    def GetProperty(self, name: str, bindingAttr: BindingFlags) -> PropertyInfo: ...
    @overload
    def GetProperty(self, name: str, bindingAttr: BindingFlags, binder: Binder, returnType: Type, types: Set(Type), modifiers: Set(ParameterModifier)) -> PropertyInfo: ...
    def InvokeMember(self, name: str, invokeAttr: BindingFlags, binder: Binder, target: Object, args: Set(Object), modifiers: Set(ParameterModifier), locale: CultureInfo, namedParameters: Set(str)) -> Object: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...
    @Item.setter
    def Item(self, name: str, value: Object) -> None: ...
    @Item.setter
    def Item(self, index: float, value: Object) -> None: ...
    @Item.setter
    def Item(self, pars: Set(Object), value: Object) -> None: ...


class ScriptStream:
    def __init__(self): ...
    @overload
    def PrintStackTrace() -> None: ...
    @overload
    def PrintStackTrace(e: Exception) -> None: ...
    def Write(str: str) -> None: ...
    def WriteLine(str: str) -> None: ...


class SimpleHashtable:
    def __init__(self, threshold: UInt32): ...
    @property
    def Item(self, key: Object) -> Object: ...
    def GetEnumerator(self) -> IDictionaryEnumerator: ...
    def Remove(self, key: Object) -> None: ...
    @Item.setter
    def Item(self, key: Object, value: Object) -> None: ...


class SourceState:
    STATE_COLOR_NORMAL = 0
    STATE_COLOR_COMMENT = 1
    STATE_COLOR_STRING = 2


class StackFrame(ScriptObject):
    def GetDefaultThisObject(self) -> Object: ...
    @overload
    def GetField(self, name: str, lexLevel: int) -> FieldInfo: ...
    def GetGlobalScope(self) -> GlobalScope: ...
    def GetMember(self, name: str, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def GetMembers(self, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def GetMemberValue(self, name: str, lexlevel: int) -> Object: ...
    def PushStackFrameForMethod(thisob: Object, fields: Set(JSLocalField), engine: VsaEngine) -> None: ...
    def PushStackFrameForStaticMethod(thisclass: RuntimeTypeHandle, fields: Set(JSLocalField), engine: VsaEngine) -> None: ...


class StrictEquality(BinaryOp):
    def JScriptStrictEquals(v1: Object, v2: Object) -> bool: ...


class StringConstructor(ScriptFunction):
    @overload
    def CreateInstance(self, args: Set(Object)) -> StringObject: ...
    def fromCharCode(args: Set(Object)) -> str: ...
    @overload
    def Invoke(self, arg: Object) -> str: ...


class StringObject(JSObject):
    def Equals(self, ob: Object) -> bool: ...
    @property
    def length(self) -> int: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...


class StringPrototype(StringObject):
    def anchor(thisob: Object, anchorName: Object) -> str: ...
    def big(thisob: Object) -> str: ...
    def blink(thisob: Object) -> str: ...
    def bold(thisob: Object) -> str: ...
    def charAt(thisob: Object, pos: float) -> str: ...
    def charCodeAt(thisob: Object, pos: float) -> Object: ...
    def concat(thisob: Object, args: Set(Object)) -> str: ...
    def fixed(thisob: Object) -> str: ...
    def fontcolor(thisob: Object, colorName: Object) -> str: ...
    def fontsize(thisob: Object, fontSize: Object) -> str: ...
    @property
    def constructor() -> StringConstructor: ...
    def indexOf(thisob: Object, searchString: Object, position: float) -> int: ...
    def italics(thisob: Object) -> str: ...
    def lastIndexOf(thisob: Object, searchString: Object, position: float) -> int: ...
    def link(thisob: Object, linkRef: Object) -> str: ...
    def localeCompare(thisob: Object, thatob: Object) -> int: ...
    def match(thisob: Object, engine: VsaEngine, regExp: Object) -> Object: ...
    def replace(thisob: Object, regExp: Object, replacement: Object) -> str: ...
    def search(thisob: Object, engine: VsaEngine, regExp: Object) -> int: ...
    def slice(thisob: Object, start: float, end: Object) -> str: ...
    def small(thisob: Object) -> str: ...
    def split(thisob: Object, engine: VsaEngine, separator: Object, limit: Object) -> ArrayObject: ...
    def strike(thisob: Object) -> str: ...
    def sub(thisob: Object) -> str: ...
    def substr(thisob: Object, start: float, count: Object) -> str: ...
    def substring(thisob: Object, start: float, end: Object) -> str: ...
    def sup(thisob: Object) -> str: ...
    def toLocaleLowerCase(thisob: Object) -> str: ...
    def toLocaleUpperCase(thisob: Object) -> str: ...
    def toLowerCase(thisob: Object) -> str: ...
    def toString(thisob: Object) -> str: ...
    def toUpperCase(thisob: Object) -> str: ...
    def valueOf(thisob: Object) -> Object: ...


class SuperTypeMembersSorter:
    pass


class SyntaxErrorObject(ErrorObject):
    pass


class Throw(AST):
    def JScriptThrow(value: Object) -> Exception: ...


class TokenColor:
    COLOR_TEXT = 0
    COLOR_IDENTIFIER = 1
    COLOR_KEYWORD = 2
    COLOR_COMMENT = 3
    COLOR_OPERATOR = 4
    COLOR_NUMBER = 5
    COLOR_STRING = 6
    COLOR_CONDITIONAL_COMP = 7


class Try(AST):
    def JScriptExceptionValue(e: Object, engine: VsaEngine) -> Object: ...
    def PushHandlerScope(engine: VsaEngine, id: str, scopeId: int) -> None: ...


class TypedArray:
    def __init__(self, elementType: IReflect, rank: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def UnderlyingSystemType(self) -> Type: ...
    def GetField(self, name: str, bindingAttr: BindingFlags) -> FieldInfo: ...
    def GetFields(self, bindingAttr: BindingFlags) -> Set(FieldInfo): ...
    def GetHashCode(self) -> int: ...
    def GetMember(self, name: str, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def GetMembers(self, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    @overload
    def GetMethod(self, name: str, bindingAttr: BindingFlags) -> MethodInfo: ...
    @overload
    def GetMethod(self, name: str, bindingAttr: BindingFlags, binder: Binder, types: Set(Type), modifiers: Set(ParameterModifier)) -> MethodInfo: ...
    def GetMethods(self, bindingAttr: BindingFlags) -> Set(MethodInfo): ...
    def GetProperties(self, bindingAttr: BindingFlags) -> Set(PropertyInfo): ...
    @overload
    def GetProperty(self, name: str, bindingAttr: BindingFlags) -> PropertyInfo: ...
    @overload
    def GetProperty(self, name: str, bindingAttr: BindingFlags, binder: Binder, returnType: Type, types: Set(Type), modifiers: Set(ParameterModifier)) -> PropertyInfo: ...
    def InvokeMember(self, name: str, flags: BindingFlags, binder: Binder, target: Object, args: Set(Object), modifiers: Set(ParameterModifier), locale: CultureInfo, namedParameters: Set(str)) -> Object: ...
    def ToString(self) -> str: ...


class TypeErrorObject(ErrorObject):
    pass


class Typeof(UnaryOp):
    def JScriptTypeof(value: Object) -> str: ...


class TypeReflector(ScriptObject):
    def GetMember(self, name: str, bindingAttr: BindingFlags) -> Set(MemberInfo): ...
    def GetMembers(self, bindingAttr: BindingFlags) -> Set(MemberInfo): ...


class UnaryOp(AST):
    pass


class URIErrorObject(ErrorObject):
    pass


class VBArrayConstructor(ScriptFunction):
    @overload
    def CreateInstance(self, args: Set(Object)) -> Object: ...


class VBArrayObject(JSObject):
    def __init__(self, parent: VBArrayPrototype, array: Array): ...


class VBArrayPrototype(JSObject):
    def dimensions(thisob: Object) -> int: ...
    @property
    def constructor() -> VBArrayConstructor: ...
    def getItem(thisob: Object, args: Set(Object)) -> Object: ...
    def lbound(thisob: Object, dimension: Object) -> int: ...
    def toArray(thisob: Object, engine: VsaEngine) -> ArrayObject: ...
    def ubound(thisob: Object, dimension: Object) -> int: ...


class VsaItem:
    @property
    def IsDirty(self) -> bool: ...
    @property
    def ItemType(self) -> JSVsaItemType: ...
    @property
    def Name(self) -> str: ...
    def GetOption(self, name: str) -> Object: ...
    @IsDirty.setter
    def IsDirty(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def SetOption(self, name: str, value: Object) -> None: ...


class VsaItems:
    def __init__(self, engine: VsaEngine): ...
    def Close(self) -> None: ...
    def CreateItem(self, name: str, itemType: JSVsaItemType, itemFlag: JSVsaItemFlag) -> IJSVsaItem: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> IJSVsaItem: ...
    @property
    def Item(self, itemName: str) -> IJSVsaItem: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def Remove(self, itemName: str) -> None: ...
    @overload
    def Remove(self, itemIndex: int) -> None: ...


class VSAITEMTYPE2:
    #None = 0
    HOSTOBJECT = 16
    HOSTSCOPE = 17
    HOSTSCOPEANDOBJECT = 18
    SCRIPTSCOPE = 19
    SCRIPTBLOCK = 20
    STATEMENT = 21
    EXPRESSION = 22


class With(AST):
    def JScriptWith(withOb: Object, engine: VsaEngine) -> Object: ...
