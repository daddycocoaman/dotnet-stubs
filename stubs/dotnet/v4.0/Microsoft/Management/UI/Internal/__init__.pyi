from typing import Tuple, Set, Iterable, List


class AddFilterRulePicker:
    def __init__(self): ...
    def add_AddFilterRulesCommandChanged(self, value: EventHandler) -> None: ...
    def add_AddFilterRulesCommandTargetChanged(self, value: EventHandler) -> None: ...
    def add_IsOpenChanged(self, value: EventHandler) -> None: ...
    @property
    def AddFilterRulesCommand(self) -> ICommand: ...
    @property
    def AddFilterRulesCommandTarget(self) -> IInputElement: ...
    @property
    def ColumnFilterRules(self) -> ObservableCollection: ...
    @property
    def IsOpen(self) -> bool: ...
    @property
    def ShortcutFilterRules(self) -> ObservableCollection: ...
    def remove_AddFilterRulesCommandChanged(self, value: EventHandler) -> None: ...
    def remove_AddFilterRulesCommandTargetChanged(self, value: EventHandler) -> None: ...
    def remove_IsOpenChanged(self, value: EventHandler) -> None: ...
    @AddFilterRulesCommand.setter
    def AddFilterRulesCommand(self, value: ICommand) -> None: ...
    @AddFilterRulesCommandTarget.setter
    def AddFilterRulesCommandTarget(self, value: IInputElement) -> None: ...
    @IsOpen.setter
    def IsOpen(self, value: bool) -> None: ...


class AddFilterRulePickerItem:
    def __init__(self, filterRule: FilterRulePanelItem): ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @property
    def FilterRule(self) -> FilterRulePanelItem: ...
    @property
    def IsChecked(self) -> bool: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @IsChecked.setter
    def IsChecked(self, value: bool) -> None: ...


class AutomationButton:
    def __init__(self): ...


class AutomationGroup:
    def __init__(self): ...


class AutomationImage:
    def __init__(self): ...


class AutomationTextBlock:
    def __init__(self): ...


class ColumnPicker:
    def InitializeComponent(self) -> None: ...




class ControlState:
    Ready = 0
    Error = 1
    Refreshing = 2


class CustomTypeComparer:
    def Compare(value1: T, value2: T) -> int: ...


class DataErrorInfoValidationResult:
    def __init__(self, isValid: bool, errorContent: Object, errorMessage: str): ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def IsUserVisible(self) -> bool: ...
    @property
    def ValidResult() -> DataErrorInfoValidationResult: ...


class DataErrorInfoValidationRule:
    def Validate(self, value: Object, cultureInfo: CultureInfo) -> DataErrorInfoValidationResult: ...




class DateTimeApproximationComparer:
    def __init__(self): ...
    def Compare(self, value1: DateTime, value2: DateTime) -> int: ...


class DefaultFilterRuleCustomizationFactory(FilterRuleCustomizationFactory):
    def __init__(self): ...
    def ClearValues(self, rule: FilterRule) -> None: ...
    def CreateDefaultFilterRulesForPropertyValueSelectorFilterRule(self) -> ICollection: ...
    @property
    def PropertyValueGetter(self) -> IPropertyValueGetter: ...
    def GetErrorMessageForInvalidValue(self, value: str, typeToParseTo: Type) -> str: ...
    @PropertyValueGetter.setter
    def PropertyValueGetter(self, value: IPropertyValueGetter) -> None: ...
    def TransferValues(self, oldRule: FilterRule, newRule: FilterRule) -> None: ...


class DefaultStringConverter:
    def __init__(self): ...
    def Convert(self, values: Set(Object), targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetTypes: Set(Type), parameter: Object, culture: CultureInfo) -> Set(Object): ...
    @property
    def DefaultValue(self) -> str: ...
    @DefaultValue.setter
    def DefaultValue(self, value: str) -> None: ...


class DismissiblePopup:
    def __init__(self): ...
    def add_CloseOnEscapeChanged(self, value: EventHandler) -> None: ...
    def add_FocusChildOnOpenChanged(self, value: EventHandler) -> None: ...
    def add_SetFocusOnCloseChanged(self, value: EventHandler) -> None: ...
    def add_SetFocusOnCloseElementChanged(self, value: EventHandler) -> None: ...
    @property
    def CloseOnEscape(self) -> bool: ...
    @property
    def FocusChildOnOpen(self) -> bool: ...
    @property
    def SetFocusOnClose(self) -> bool: ...
    @property
    def SetFocusOnCloseElement(self) -> UIElement: ...
    def remove_CloseOnEscapeChanged(self, value: EventHandler) -> None: ...
    def remove_FocusChildOnOpenChanged(self, value: EventHandler) -> None: ...
    def remove_SetFocusOnCloseChanged(self, value: EventHandler) -> None: ...
    def remove_SetFocusOnCloseElementChanged(self, value: EventHandler) -> None: ...
    @CloseOnEscape.setter
    def CloseOnEscape(self, value: bool) -> None: ...
    @FocusChildOnOpen.setter
    def FocusChildOnOpen(self, value: bool) -> None: ...
    @SetFocusOnClose.setter
    def SetFocusOnClose(self, value: bool) -> None: ...
    @SetFocusOnCloseElement.setter
    def SetFocusOnCloseElement(self, value: UIElement) -> None: ...






class ExpanderButton:
    def __init__(self): ...


class ExpanderButtonAutomationPeer:
    def __init__(self, owner: ExpanderButton): ...
    def GetPattern(self, patternInterface: PatternInterface) -> Object: ...


class ExtendedFrameworkElementAutomationPeer:
    @overload
    def __init__(self, owner: FrameworkElement): ...
    @overload
    def __init__(self, owner: FrameworkElement, controlType: AutomationControlType): ...
    @overload
    def __init__(self, owner: FrameworkElement, controlType: AutomationControlType, isControlElement: bool): ...


class FilterEvaluator:
    def add_FilterExpressionChanged(self, value: EventHandler) -> None: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def AddFilterExpressionProvider(self, provider: IFilterExpressionProvider) -> None: ...
    @property
    def FilterExpression(self) -> FilterExpressionNode: ...
    @property
    def FilterExpressionProviders(self) -> ReadOnlyCollection: ...
    @property
    def FilterStatus(self) -> FilterStatus: ...
    @property
    def HasFilterExpression(self) -> bool: ...
    @property
    def StartFilterOnExpressionChanged(self) -> bool: ...
    def remove_FilterExpressionChanged(self, value: EventHandler) -> None: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def RemoveFilterExpressionProvider(self, provider: IFilterExpressionProvider) -> None: ...
    @StartFilterOnExpressionChanged.setter
    def StartFilterOnExpressionChanged(self, value: bool) -> None: ...
    def StartFilter(self) -> None: ...
    def StopFilter(self) -> None: ...


class FilterExceptionEventArgs:
    def __init__(self, exception: Exception): ...
    @property
    def Exception(self) -> Exception: ...


class FilterExpressionAndOperatorNode(FilterExpressionNode):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, children: Iterable[FilterExpressionNode]): ...
    def Evaluate(self, item: Object) -> bool: ...
    @property
    def Children(self) -> ICollection: ...


class FilterExpressionNode:
    def Evaluate(self, item: Object) -> bool: ...
    def FindAll(self) -> ICollection: ...


class FilterExpressionOperandNode(FilterExpressionNode):
    def __init__(self, rule: FilterRule): ...
    def Evaluate(self, item: Object) -> bool: ...
    @property
    def Rule(self) -> FilterRule: ...


class FilterExpressionOrOperatorNode(FilterExpressionNode):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, children: Iterable[FilterExpressionNode]): ...
    def Evaluate(self, item: Object) -> bool: ...
    @property
    def Children(self) -> ICollection: ...


class FilterRule:
    def add_EvaluationResultInvalidated(self, value: EventHandler) -> None: ...
    def Evaluate(self, item: Object) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    def remove_EvaluationResultInvalidated(self, value: EventHandler) -> None: ...


class FilterRuleCustomizationFactory:
    def ClearValues(self, rule: FilterRule) -> None: ...
    def CreateDefaultFilterRulesForPropertyValueSelectorFilterRule(self) -> ICollection: ...
    @property
    def FactoryInstance() -> FilterRuleCustomizationFactory: ...
    @property
    def PropertyValueGetter(self) -> IPropertyValueGetter: ...
    def GetErrorMessageForInvalidValue(self, value: str, typeToParseTo: Type) -> str: ...
    @FactoryInstance.setter
    def FactoryInstance(value: FilterRuleCustomizationFactory) -> None: ...
    @PropertyValueGetter.setter
    def PropertyValueGetter(self, value: IPropertyValueGetter) -> None: ...
    def TransferValues(self, oldRule: FilterRule, newRule: FilterRule) -> None: ...


class FilterRuleExtensions:
    def DeepCopy(rule: FilterRule) -> FilterRule: ...


class FilterRulePanel:
    def __init__(self): ...
    def add_FilterExpressionChanged(self, value: EventHandler) -> None: ...
    def AddFilterRulePanelItemContentTemplate(self, type: Type, dataTemplate: DataTemplate) -> None: ...
    def ClearContentTemplates(self) -> None: ...
    @property
    def Controller(self) -> FilterRulePanelController: ...
    @property
    def FilterExpression(self) -> FilterExpressionNode: ...
    @property
    def FilterRulePanelItems(self) -> ReadOnlyCollection: ...
    @property
    def FilterRuleTemplateSelector(self) -> DataTemplateSelector: ...
    @property
    def HasFilterExpression(self) -> bool: ...
    def remove_FilterExpressionChanged(self, value: EventHandler) -> None: ...
    def RemoveFilterRulePanelItemContentTemplate(self, type: Type) -> None: ...
    def TryGetContentTemplate(self, type: Type) -> Tuple[bool, DataTemplate]: ...


class FilterRulePanelContentPresenter:
    def __init__(self): ...
    @property
    def ContentConverter(self) -> IValueConverter: ...
    @ContentConverter.setter
    def ContentConverter(self, value: IValueConverter) -> None: ...


class FilterRulePanelController:
    def __init__(self): ...
    def add_FilterExpressionChanged(self, value: EventHandler) -> None: ...
    def AddFilterRulePanelItem(self, item: FilterRulePanelItem) -> None: ...
    def ClearFilterRulePanelItems(self) -> None: ...
    @property
    def FilterExpression(self) -> FilterExpressionNode: ...
    @property
    def FilterRulePanelItems(self) -> ReadOnlyCollection: ...
    @property
    def HasFilterExpression(self) -> bool: ...
    def remove_FilterExpressionChanged(self, value: EventHandler) -> None: ...
    def RemoveFilterRulePanelItem(self, item: FilterRulePanelItem) -> None: ...


class FilterRulePanelItem:
    def __init__(self, rule: FilterRule, groupId: str): ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @property
    def GroupId(self) -> str: ...
    @property
    def ItemType(self) -> FilterRulePanelItemType: ...
    @property
    def Rule(self) -> FilterRule: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...


class FilterRulePanelItemType:
    FirstHeader = 0
    Header = 1
    Item = 2


class FilterRuleTemplateSelector:
    def __init__(self): ...
    @property
    def TemplateDictionary(self) -> IDictionary: ...
    def SelectTemplate(self, item: Object, container: DependencyObject) -> DataTemplate: ...


class FilterRuleToDisplayNameConverter:
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class FilterStatus:
    NotApplied = 0
    InProgress = 1
    Applied = 2


class HelpWindowResources:
    @property
    def CancelText() -> str: ...
    @property
    def CaseSensitiveTitle() -> str: ...
    @property
    def CommonParameters() -> str: ...
    @property
    def Culture() -> CultureInfo: ...
    @property
    def DescriptionTitle() -> str: ...
    @property
    def ExamplesTitle() -> str: ...
    @property
    def FindText() -> str: ...
    @property
    def HelpSectionsTitle() -> str: ...
    @property
    def HelpTitleFormat() -> str: ...
    @property
    def InputsTitle() -> str: ...
    @property
    def LinkTextFormat() -> str: ...
    @property
    def MethodsTitle() -> str: ...
    @property
    def NextText() -> str: ...
    @property
    def NoMatches() -> str: ...
    @property
    def NotesTitle() -> str: ...
    @property
    def OKText() -> str: ...
    @property
    def OneMatch() -> str: ...
    @property
    def OutputsTitle() -> str: ...
    @property
    def ParameterAcceptWildcard() -> str: ...
    @property
    def ParameterDefautValue() -> str: ...
    @property
    def ParameterPipelineInput() -> str: ...
    @property
    def ParameterPosition() -> str: ...
    @property
    def ParameterRequired() -> str: ...
    @property
    def ParametersTitle() -> str: ...
    @property
    def PreviousText() -> str: ...
    @property
    def PropertiesTitle() -> str: ...
    @property
    def RelatedLinksTitle() -> str: ...
    @property
    def RemarksTitle() -> str: ...
    @property
    def ResourceManager() -> ResourceManager: ...
    @property
    def SearchOptionsTitle() -> str: ...
    @property
    def SettingsText() -> str: ...
    @property
    def SomeMatchesFormat() -> str: ...
    @property
    def SynopsisTitle() -> str: ...
    @property
    def SyntaxTitle() -> str: ...
    @property
    def Title() -> str: ...
    @property
    def WholeWordTitle() -> str: ...
    @property
    def ZoomLabelTextFormat() -> str: ...
    @property
    def ZoomSlider() -> str: ...
    @Culture.setter
    def Culture(value: CultureInfo) -> None: ...


class IAsyncProgress:
    @property
    def OperationError(self) -> Exception: ...
    @property
    def OperationInProgress(self) -> bool: ...


class IEvaluate:
    def Evaluate(self, item: Object) -> bool: ...


class IFilterExpressionProvider:
    def add_FilterExpressionChanged(self, value: EventHandler) -> None: ...
    @property
    def FilterExpression(self) -> FilterExpressionNode: ...
    @property
    def HasFilterExpression(self) -> bool: ...
    def remove_FilterExpressionChanged(self, value: EventHandler) -> None: ...


class InnerList:
    def __init__(self): ...
    def add_AutoGenerateColumnsChanged(self, value: EventHandler) -> None: ...
    def add_IsGroupsExpandedChanged(self, value: EventHandler) -> None: ...
    def add_ItemSourcesPropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def ApplySort(self, column: InnerListColumn, shouldScrollIntoView: bool) -> None: ...
    def ClearSort(self) -> None: ...
    @property
    def AutoGenerateColumns(self) -> bool: ...
    @property
    def Columns(self) -> ObservableCollection: ...
    @property
    def InnerGrid(self) -> InnerListGridView: ...
    @property
    def IsGroupsExpanded(self) -> bool: ...
    @property
    def Items(self) -> ItemCollection: ...
    @property
    def SortedColumn(self) -> InnerListColumn: ...
    def GetIsPrimarySortColumn(element: DependencyObject) -> bool: ...
    def RefreshColumns(self) -> None: ...
    def remove_AutoGenerateColumnsChanged(self, value: EventHandler) -> None: ...
    def remove_IsGroupsExpandedChanged(self, value: EventHandler) -> None: ...
    def remove_ItemSourcesPropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @overload
    def ScrollIntoView(self, item: Object) -> None: ...
    def ScrollIntoViewFromTop(self, item: Object) -> None: ...
    @AutoGenerateColumns.setter
    def AutoGenerateColumns(self, value: bool) -> None: ...
    @IsGroupsExpanded.setter
    def IsGroupsExpanded(self, value: bool) -> None: ...


class InnerListColumn:
    @overload
    def __init__(self, dataDescription: UIPropertyGroupDescription): ...
    @overload
    def __init__(self, dataDescription: UIPropertyGroupDescription, isVisible: bool): ...
    @overload
    def __init__(self, dataDescription: UIPropertyGroupDescription, isVisible: bool, createDefaultBinding: bool): ...
    @property
    def DataDescription(self) -> UIPropertyGroupDescription: ...
    @property
    def MinWidth(self) -> float: ...
    @property
    def Required(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @DataDescription.setter
    def DataDescription(self, value: UIPropertyGroupDescription) -> None: ...
    @MinWidth.setter
    def MinWidth(self, value: float) -> None: ...
    @Required.setter
    def Required(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class InnerListGridView:
    def __init__(self): ...
    def ReleaseReferences(self) -> None: ...


class InputFieldBackgroundTextConverter:
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class IntegralConverter:
    def __init__(self): ...
    def Convert(self, values: Set(Object), targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetTypes: Set(Type), parameter: Object, culture: CultureInfo) -> Set(Object): ...


class InverseBooleanConverter:
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class IPropertyValueGetter:
    @overload
    def TryGetPropertyValue(self, propertyName: str, value: Object) -> Tuple[bool, Object]: ...
    @overload
    def TryGetPropertyValue(self, propertyName: str, value: Object) -> Tuple[bool, T]: ...




class IsEmptyFilterRule(FilterRule):
    def __init__(self): ...
    def Evaluate(self, item: Object) -> bool: ...


class IsEqualConverter:
    def __init__(self): ...
    def Convert(self, values: Set(Object), targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetTypes: Set(Type), parameter: Object, culture: CultureInfo) -> Set(Object): ...






class IsNotEmptyFilterRule(IsEmptyFilterRule):
    def __init__(self): ...
    def Evaluate(self, item: Object) -> bool: ...


class IsNotEmptyValidationRule(DataErrorInfoValidationRule):
    def __init__(self): ...
    def Validate(self, value: Object, cultureInfo: CultureInfo) -> DataErrorInfoValidationResult: ...


class IsNotNullConverter:
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...




class IsValidatingValueValidConverter:
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class ItemsControlFilterEvaluator(FilterEvaluator):
    def __init__(self): ...
    def add_FilterExceptionOccurred(self, value: EventHandler) -> None: ...
    @property
    def FilterTarget(self) -> ItemsControl: ...
    def remove_FilterExceptionOccurred(self, value: EventHandler) -> None: ...
    @FilterTarget.setter
    def FilterTarget(self, value: ItemsControl) -> None: ...
    def StartFilter(self) -> None: ...
    def StopFilter(self) -> None: ...


class ListOrganizer:
    def __init__(self): ...
    def add_DropDownButtonTemplateChanged(self, value: EventHandler) -> None: ...
    def add_DropDownStyleChanged(self, value: EventHandler) -> None: ...
    def add_HighlightedItemChanged(self, value: EventHandler) -> None: ...
    def add_ItemDeleted(self, value: EventHandler) -> None: ...
    def add_ItemSelected(self, value: EventHandler) -> None: ...
    def add_ItemsSourceChanged(self, value: EventHandler) -> None: ...
    def add_NoItemsTextChanged(self, value: EventHandler) -> None: ...
    def add_TextContentPropertyNameChanged(self, value: EventHandler) -> None: ...
    @property
    def DropDownButtonTemplate(self) -> ControlTemplate: ...
    @property
    def DropDownStyle(self) -> Style: ...
    @property
    def HighlightedItem(self) -> Object: ...
    @property
    def ItemsSource(self) -> IEnumerable: ...
    @property
    def NoItemsText(self) -> str: ...
    @property
    def TextContentPropertyName(self) -> str: ...
    def OnApplyTemplate(self) -> None: ...
    def remove_DropDownButtonTemplateChanged(self, value: EventHandler) -> None: ...
    def remove_DropDownStyleChanged(self, value: EventHandler) -> None: ...
    def remove_HighlightedItemChanged(self, value: EventHandler) -> None: ...
    def remove_ItemDeleted(self, value: EventHandler) -> None: ...
    def remove_ItemSelected(self, value: EventHandler) -> None: ...
    def remove_ItemsSourceChanged(self, value: EventHandler) -> None: ...
    def remove_NoItemsTextChanged(self, value: EventHandler) -> None: ...
    def remove_TextContentPropertyNameChanged(self, value: EventHandler) -> None: ...
    @DropDownButtonTemplate.setter
    def DropDownButtonTemplate(self, value: ControlTemplate) -> None: ...
    @DropDownStyle.setter
    def DropDownStyle(self, value: Style) -> None: ...
    @HighlightedItem.setter
    def HighlightedItem(self, value: Object) -> None: ...
    @ItemsSource.setter
    def ItemsSource(self, value: IEnumerable) -> None: ...
    @NoItemsText.setter
    def NoItemsText(self, value: str) -> None: ...
    @TextContentPropertyName.setter
    def TextContentPropertyName(self, value: str) -> None: ...


class ListOrganizerItem:
    def __init__(self): ...
    def add_TextContentPropertyNameChanged(self, value: EventHandler) -> None: ...
    def Delete(self) -> None: ...
    @property
    def IsInEditMode(self) -> bool: ...
    @property
    def TextContentPropertyName(self) -> str: ...
    def OnApplyTemplate(self) -> None: ...
    def remove_TextContentPropertyNameChanged(self, value: EventHandler) -> None: ...
    def Rename(self) -> None: ...
    def Select(self) -> None: ...
    @TextContentPropertyName.setter
    def TextContentPropertyName(self, value: str) -> None: ...


class ManagementList:
    def __init__(self): ...
    def add_AddFilterRulePickerChanged(self, value: EventHandler) -> None: ...
    def add_CurrentViewChanged(self, value: EventHandler) -> None: ...
    def add_EvaluatorChanged(self, value: EventHandler) -> None: ...
    def add_FilterRulePanelChanged(self, value: EventHandler) -> None: ...
    def add_IsFilterShownChanged(self, value: EventHandler) -> None: ...
    def add_IsLoadingItemsChanged(self, value: EventHandler) -> None: ...
    def add_IsSearchShownChanged(self, value: EventHandler) -> None: ...
    def add_ListChanged(self, value: EventHandler) -> None: ...
    def add_SearchBoxChanged(self, value: EventHandler) -> None: ...
    def add_ViewManagerUserActionStateChanged(self, value: EventHandler) -> None: ...
    def add_ViewSaverUserActionStateChanged(self, value: EventHandler) -> None: ...
    def add_ViewsChanged(self, value: RoutedEventHandler) -> None: ...
    @overload
    def AddColumn(self, column: InnerListColumn) -> None: ...
    @overload
    def AddColumn(self, column: InnerListColumn, addDefaultFilterRules: bool) -> None: ...
    def AddRule(self, rule: FilterRule) -> None: ...
    @property
    def AddFilterRulePicker(self) -> AddFilterRulePicker: ...
    @property
    def CurrentView(self) -> StateDescriptor: ...
    @property
    def Evaluator(self) -> ItemsControlFilterEvaluator: ...
    @property
    def FilterRulePanel(self) -> FilterRulePanel: ...
    @property
    def IsFilterShown(self) -> bool: ...
    @property
    def IsLoadingItems(self) -> bool: ...
    @property
    def IsSearchShown(self) -> bool: ...
    @property
    def List(self) -> InnerList: ...
    @property
    def SavedViewFactory(self) -> IStateDescriptorFactory: ...
    @property
    def SearchBox(self) -> SearchBox: ...
    @property
    def ViewManagerUserActionState(self) -> UserActionState: ...
    @property
    def Views(self) -> ObservableCollection: ...
    @property
    def ViewSaverUserActionState(self) -> UserActionState: ...
    def OnApplyTemplate(self) -> None: ...
    def remove_AddFilterRulePickerChanged(self, value: EventHandler) -> None: ...
    def remove_CurrentViewChanged(self, value: EventHandler) -> None: ...
    def remove_EvaluatorChanged(self, value: EventHandler) -> None: ...
    def remove_FilterRulePanelChanged(self, value: EventHandler) -> None: ...
    def remove_IsFilterShownChanged(self, value: EventHandler) -> None: ...
    def remove_IsLoadingItemsChanged(self, value: EventHandler) -> None: ...
    def remove_IsSearchShownChanged(self, value: EventHandler) -> None: ...
    def remove_ListChanged(self, value: EventHandler) -> None: ...
    def remove_SearchBoxChanged(self, value: EventHandler) -> None: ...
    def remove_ViewManagerUserActionStateChanged(self, value: EventHandler) -> None: ...
    def remove_ViewSaverUserActionStateChanged(self, value: EventHandler) -> None: ...
    def remove_ViewsChanged(self, value: RoutedEventHandler) -> None: ...
    def ResetView(self) -> None: ...
    @Evaluator.setter
    def Evaluator(self, value: ItemsControlFilterEvaluator) -> None: ...
    @IsFilterShown.setter
    def IsFilterShown(self, value: bool) -> None: ...
    @IsLoadingItems.setter
    def IsLoadingItems(self, value: bool) -> None: ...
    @IsSearchShown.setter
    def IsSearchShown(self, value: bool) -> None: ...
    @SavedViewFactory.setter
    def SavedViewFactory(self, value: IStateDescriptorFactory) -> None: ...
    @ViewManagerUserActionState.setter
    def ViewManagerUserActionState(self, value: UserActionState) -> None: ...
    @ViewSaverUserActionState.setter
    def ViewSaverUserActionState(self, value: UserActionState) -> None: ...


class ManagementListStateDescriptor:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def RestoreState(self, subject: ManagementList) -> None: ...
    @overload
    def RestoreState(self, subject: ManagementList, applyRestoredFilter: bool) -> None: ...
    def SaveState(self, subject: ManagementList) -> None: ...
    def ToString(self) -> str: ...


class ManagementListStateDescriptorFactory:
    def __init__(self): ...
    def Create(self) -> StateDescriptor: ...


class ManagementListTitle:
    def __init__(self): ...
    def add_ListChanged(self, value: EventHandler) -> None: ...
    def add_ListStatusChanged(self, value: EventHandler) -> None: ...
    def add_TitleChanged(self, value: EventHandler) -> None: ...
    def add_TotalItemCountChanged(self, value: EventHandler) -> None: ...
    @property
    def List(self) -> ManagementList: ...
    @property
    def ListStatus(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def TotalItemCount(self) -> int: ...
    def remove_ListChanged(self, value: EventHandler) -> None: ...
    def remove_ListStatusChanged(self, value: EventHandler) -> None: ...
    def remove_TitleChanged(self, value: EventHandler) -> None: ...
    def remove_TotalItemCountChanged(self, value: EventHandler) -> None: ...
    @List.setter
    def List(self, value: ManagementList) -> None: ...
    @ListStatus.setter
    def ListStatus(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @TotalItemCount.setter
    def TotalItemCount(self, value: int) -> None: ...


class MessageTextBox:
    def __init__(self): ...
    def add_BackgroundTextChanged(self, value: EventHandler) -> None: ...
    def add_IsBackgroundTextShownChanged(self, value: EventHandler) -> None: ...
    @property
    def BackgroundText(self) -> str: ...
    @property
    def IsBackgroundTextShown(self) -> bool: ...
    def remove_BackgroundTextChanged(self, value: EventHandler) -> None: ...
    def remove_IsBackgroundTextShownChanged(self, value: EventHandler) -> None: ...
    @BackgroundText.setter
    def BackgroundText(self, value: str) -> None: ...


class PickerBase:
    def __init__(self): ...
    def add_DropDownButtonTemplateChanged(self, value: EventHandler) -> None: ...
    def add_DropDownStyleChanged(self, value: EventHandler) -> None: ...
    def add_IsOpenChanged(self, value: EventHandler) -> None: ...
    @property
    def DropDownButtonTemplate(self) -> ControlTemplate: ...
    @property
    def DropDownStyle(self) -> Style: ...
    @property
    def IsOpen(self) -> bool: ...
    def OnApplyTemplate(self) -> None: ...
    def remove_DropDownButtonTemplateChanged(self, value: EventHandler) -> None: ...
    def remove_DropDownStyleChanged(self, value: EventHandler) -> None: ...
    def remove_IsOpenChanged(self, value: EventHandler) -> None: ...
    @DropDownButtonTemplate.setter
    def DropDownButtonTemplate(self, value: ControlTemplate) -> None: ...
    @DropDownStyle.setter
    def DropDownStyle(self, value: Style) -> None: ...
    @IsOpen.setter
    def IsOpen(self, value: bool) -> None: ...


class PopupControlButton(ExpanderButton):
    def __init__(self): ...
    def add_IsPopupOpenChanged(self, value: EventHandler) -> None: ...
    @property
    def IsPopupOpen(self) -> bool: ...
    def remove_IsPopupOpenChanged(self, value: EventHandler) -> None: ...
    @IsPopupOpen.setter
    def IsPopupOpen(self, value: bool) -> None: ...


class PropertiesTextContainsFilterRule(TextFilterRule):
    def __init__(self): ...
    def Evaluate(self, item: Object) -> bool: ...
    @property
    def PropertyNames(self) -> ICollection: ...




class PropertyValueGetter:
    def __init__(self): ...
    @overload
    def TryGetPropertyValue(self, propertyName: str, value: Object) -> Tuple[bool, Object]: ...
    @overload
    def TryGetPropertyValue(self, propertyName: str, value: Object) -> Tuple[bool, T]: ...






class ResizeGripLocation:
    Right = 0
    Left = 1


class Resizer:
    def __init__(self): ...
    def add_DraggingTemplateChanged(self, value: EventHandler) -> None: ...
    def add_GripBrushChanged(self, value: EventHandler) -> None: ...
    def add_GripLocationChanged(self, value: EventHandler) -> None: ...
    def add_GripWidthChanged(self, value: EventHandler) -> None: ...
    def add_ResizeWhileDraggingChanged(self, value: EventHandler) -> None: ...
    def add_VisibleGripWidthChanged(self, value: EventHandler) -> None: ...
    @property
    def DraggingTemplate(self) -> DataTemplate: ...
    @property
    def GripBrush(self) -> Brush: ...
    @property
    def GripLocation(self) -> ResizeGripLocation: ...
    @property
    def GripWidth(self) -> float: ...
    @property
    def ResizeWhileDragging(self) -> bool: ...
    @property
    def VisibleGripWidth(self) -> float: ...
    def GetThumbGripLocation(element: DependencyObject) -> ResizeGripLocation: ...
    def OnApplyTemplate(self) -> None: ...
    def remove_DraggingTemplateChanged(self, value: EventHandler) -> None: ...
    def remove_GripBrushChanged(self, value: EventHandler) -> None: ...
    def remove_GripLocationChanged(self, value: EventHandler) -> None: ...
    def remove_GripWidthChanged(self, value: EventHandler) -> None: ...
    def remove_ResizeWhileDraggingChanged(self, value: EventHandler) -> None: ...
    def remove_VisibleGripWidthChanged(self, value: EventHandler) -> None: ...
    @DraggingTemplate.setter
    def DraggingTemplate(self, value: DataTemplate) -> None: ...
    @GripBrush.setter
    def GripBrush(self, value: Brush) -> None: ...
    @GripLocation.setter
    def GripLocation(self, value: ResizeGripLocation) -> None: ...
    @GripWidth.setter
    def GripWidth(self, value: float) -> None: ...
    @ResizeWhileDragging.setter
    def ResizeWhileDragging(self, value: bool) -> None: ...
    @VisibleGripWidth.setter
    def VisibleGripWidth(self, value: float) -> None: ...
    def SetThumbGripLocation(element: DependencyObject, value: ResizeGripLocation) -> None: ...


class ResizerGripThicknessConverter:
    def __init__(self): ...
    def Convert(self, values: Set(Object), targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetTypes: Set(Type), parameter: Object, culture: CultureInfo) -> Set(Object): ...


class ScalableImage:
    def __init__(self): ...
    def add_SourceChanged(self, value: EventHandler) -> None: ...
    @property
    def Source(self) -> ScalableImageSource: ...
    def remove_SourceChanged(self, value: EventHandler) -> None: ...
    @Source.setter
    def Source(self, value: ScalableImageSource) -> None: ...


class ScalableImageSource:
    def __init__(self): ...
    def add_AccessibleNameChanged(self, value: EventHandler) -> None: ...
    def add_BrushChanged(self, value: EventHandler) -> None: ...
    def add_ImageChanged(self, value: EventHandler) -> None: ...
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def Brush(self) -> Brush: ...
    @property
    def Image(self) -> ImageSource: ...
    @property
    def Size(self) -> Size: ...
    def remove_AccessibleNameChanged(self, value: EventHandler) -> None: ...
    def remove_BrushChanged(self, value: EventHandler) -> None: ...
    def remove_ImageChanged(self, value: EventHandler) -> None: ...
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @Brush.setter
    def Brush(self, value: Brush) -> None: ...
    @Image.setter
    def Image(self, value: ImageSource) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...


class SearchBox:
    def __init__(self): ...
    def add_BackgroundTextChanged(self, value: EventHandler) -> None: ...
    def add_FilterExpressionChanged(self, value: EventHandler) -> None: ...
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @property
    def BackgroundText(self) -> str: ...
    @property
    def FilterExpression(self) -> FilterExpressionNode: ...
    @property
    def HasFilterExpression(self) -> bool: ...
    @property
    def Parser(self) -> SearchTextParser: ...
    @property
    def Text(self) -> str: ...
    def remove_BackgroundTextChanged(self, value: EventHandler) -> None: ...
    def remove_FilterExpressionChanged(self, value: EventHandler) -> None: ...
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @BackgroundText.setter
    def BackgroundText(self, value: str) -> None: ...
    @Parser.setter
    def Parser(self, value: SearchTextParser) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class SearchTextParser:
    def __init__(self): ...
    def ClearSearchableRules(self) -> None: ...
    @property
    def FullTextRule(self) -> TextFilterRule: ...
    def Parse(self, text: str) -> ReadOnlyCollection: ...
    @FullTextRule.setter
    def FullTextRule(self, value: TextFilterRule) -> None: ...
    def TryAddSearchableRule(self, selectorRule: SelectorFilterRule) -> bool: ...


class SearchTextParseResult:
    def __init__(self, rule: FilterRule): ...
    @property
    def FilterRule(self) -> FilterRule: ...


class SelectorFilterRule(FilterRule):
    def __init__(self): ...
    def Evaluate(self, item: Object) -> bool: ...
    @property
    def AvailableRules(self) -> ValidatingSelectorValue: ...
    @property
    def IsValid(self) -> bool: ...


class ShowCommandResources:
    @property
    def ActionButtons_Button_Cancel() -> str: ...
    @property
    def ActionButtons_Button_Copy() -> str: ...
    @property
    def ActionButtons_Button_Ok() -> str: ...
    @property
    def ActionButtons_Button_Run() -> str: ...
    @property
    def All() -> str: ...
    @property
    def AllModulesControl_Label_Modules() -> str: ...
    @property
    def CanReceiveValueFromPipeline() -> str: ...
    @property
    def CmdletControl_Button_GetHelp() -> str: ...
    @property
    def CmdletControl_Button_ToolTip_Help() -> str: ...
    @property
    def CmdletControl_Header_CommonParameters() -> str: ...
    @property
    def CmdletControl_Header_Errors() -> str: ...
    @property
    def CmdletTooltipFormat() -> str: ...
    @property
    def CommandNameAutomationName() -> str: ...
    @property
    def CommonToAllParameterSets() -> str: ...
    @property
    def Culture() -> CultureInfo: ...
    @property
    def DetailsParameterTitleFormat() -> str: ...
    @property
    def EndProcessingErrorMessage() -> str: ...
    @property
    def Imported() -> str: ...
    @property
    def ImportModuleButtonText() -> str: ...
    @property
    def ImportModuleFailedFormat() -> str: ...
    @property
    def Mandatory() -> str: ...
    @property
    def MandatoryLabelSegment() -> str: ...
    @property
    def MandatoryNameLabelFormat() -> str: ...
    @property
    def ModulesAutomationName() -> str: ...
    @property
    def MultiParameter_Button_Browse() -> str: ...
    @property
    def NameLabelFormat() -> str: ...
    @property
    def NoModuleName() -> str: ...
    @property
    def NoParameters() -> str: ...
    @property
    def NotImported() -> str: ...
    @property
    def NotImportedFormat() -> str: ...
    @property
    def Optional() -> str: ...
    @property
    def PleaseWaitMessage() -> str: ...
    @property
    def PositionFormat() -> str: ...
    @property
    def RefreshShowCommandTooltipFormat() -> str: ...
    @property
    def ResourceManager() -> ResourceManager: ...
    @property
    def SelectMultipleValuesForParameterFormat() -> str: ...
    @property
    def ShowCommandError() -> str: ...
    @property
    def ShowModuleControl_Label_Name() -> str: ...
    @property
    def ShowModuleControl_RefreshButton() -> str: ...
    @property
    def TypeFormat() -> str: ...
    @Culture.setter
    def Culture(value: CultureInfo) -> None: ...






class StringFormatConverter:
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class TextBlockService:
    def GetIsTextTrimmed(element: DependencyObject) -> bool: ...
    def GetIsTextTrimmedExternally(element: DependencyObject) -> bool: ...
    def GetIsTextTrimmedMonitoringEnabled(element: DependencyObject) -> bool: ...
    def GetUntrimmedText(element: DependencyObject) -> str: ...
    def SetIsTextTrimmedExternally(element: DependencyObject, value: bool) -> None: ...
    def SetIsTextTrimmedMonitoringEnabled(element: DependencyObject, value: bool) -> None: ...
    def SetUntrimmedText(element: DependencyObject, value: str) -> None: ...


class TextContainsFilterRule(TextFilterRule):
    def __init__(self): ...


class TextDoesNotContainFilterRule(TextContainsFilterRule):
    def __init__(self): ...


class TextDoesNotEqualFilterRule(TextEqualsFilterRule):
    def __init__(self): ...


class TextEndsWithFilterRule(TextFilterRule):
    def __init__(self): ...


class TextEqualsFilterRule(TextFilterRule):
    def __init__(self): ...


class TextFilterRule:
    @property
    def CultureInvariant(self) -> bool: ...
    @property
    def IgnoreCase(self) -> bool: ...
    @CultureInvariant.setter
    def CultureInvariant(self, value: bool) -> None: ...
    @IgnoreCase.setter
    def IgnoreCase(self, value: bool) -> None: ...


class TextStartsWithFilterRule(TextFilterRule):
    def __init__(self): ...


class TextTrimConverter:
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class UIPropertyGroupDescription:
    @overload
    def __init__(self, propertyName: str, displayName: str): ...
    @overload
    def __init__(self, propertyName: str, displayName: str, dataType: Type): ...
    @property
    def DataType(self) -> Type: ...
    @property
    def DisplayContent(self) -> Object: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def SortDirection(self) -> ListSortDirection: ...
    def ReverseSortDirection(self) -> ListSortDirection: ...
    @DataType.setter
    def DataType(self, value: Type) -> None: ...
    @DisplayContent.setter
    def DisplayContent(self, value: Object) -> None: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @SortDirection.setter
    def SortDirection(self, value: ListSortDirection) -> None: ...
    def ToString(self) -> str: ...


class UserActionState:
    Enabled = 0
    Disabled = 1
    Hidden = 2


class Utilities:
    def AreAllItemsOfType(items: IEnumerable) -> bool: ...
    def Find(items: IEnumerable) -> T: ...
    def NullCheckTrim(value: str) -> str: ...
    def ResortObservableCollection(modify: ObservableCollection, sorted: IEnumerable) -> None: ...




class ValidatingSelectorValueToDisplayNameConverter:
    def __init__(self): ...
    def Convert(self, values: Set(Object), targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetTypes: Set(Type), parameter: Object, culture: CultureInfo) -> Set(Object): ...




class ValidatingValueBase:
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def AddValidationRule(self, rule: DataErrorInfoValidationRule) -> None: ...
    def ClearValidationRules(self) -> None: ...
    @property
    def Error(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Item(self, columnName: str) -> str: ...
    @property
    def ValidationRules(self) -> ReadOnlyCollection: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def RemoveValidationRule(self, rule: DataErrorInfoValidationRule) -> None: ...


class ValidatingValueToGenericParameterTypeConverter:
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    @property
    def Instance() -> ValidatingValueToGenericParameterTypeConverter: ...


class VisualToAncestorDataConverter:
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class WaitRing:
    def __init__(self): ...


class XamlLocalizableResources:
    @property
    def AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_157() -> str: ...
    @property
    def AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_180() -> str: ...
    @property
    def AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_293() -> str: ...
    @property
    def AutoResXGen_AddFilterRulePicker_Content_214() -> str: ...
    @property
    def AutoResXGen_AddFilterRulePicker_Content_223() -> str: ...
    @property
    def AutoResXGen_BackForwardHistory_AutomationPropertiesName_613() -> str: ...
    @property
    def AutoResXGen_BackForwardHistory_AutomationPropertiesName_619() -> str: ...
    @property
    def AutoResXGen_BreadcrumbItem_AutomationPropertiesName_142() -> str: ...
    @property
    def AutoResXGen_BreadcrumbItem_Text_144() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_AutomationPropertiesName_104() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_AutomationPropertiesName_49() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_AutomationPropertiesName_75() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_AutomationPropertiesName_86() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Content_127() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Content_134() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Content_189() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Content_199() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Content_42() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Content_5() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Content_73() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Content_84() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Content_93() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Text_142() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Text_152() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Tooltip_76() -> str: ...
    @property
    def AutoResXGen_ColumnPicker_Tooltip_84() -> str: ...
    @property
    def AutoResXGen_DesignerStyleResources_ToolTip_119() -> str: ...
    @property
    def AutoResXGen_DesignerStyleResources_Tooltip_148() -> str: ...
    @property
    def AutoResXGen_DesignerStyleResources_ToolTip_160() -> str: ...
    @property
    def AutoResXGen_DesignerStyleResources_ToolTip_97() -> str: ...
    @property
    def AutoResXGen_FilterRulePanel_AutomationPropertiesName_199() -> str: ...
    @property
    def AutoResXGen_FilterRulePanel_AutomationPropertiesName_257() -> str: ...
    @property
    def AutoResXGen_FilterRulePanel_BackgroundText_200() -> str: ...
    @property
    def AutoResXGen_ListOrganizer_AutomationPropertiesName_47() -> str: ...
    @property
    def AutoResXGen_ListOrganizer_AutomationPropertiesName_72() -> str: ...
    @property
    def AutoResXGen_ListOrganizer_AutomationPropertiesName_95() -> str: ...
    @property
    def AutoResXGen_ManagementList_AutomationPropertiesName_302() -> str: ...
    @property
    def AutoResXGen_ManagementList_AutomationPropertiesName_395() -> str: ...
    @property
    def AutoResXGen_ManagementList_Text_392() -> str: ...
    @property
    def AutoResXGen_ManagementList_Text_602() -> str: ...
    @property
    def AutoResXGen_ManagementList_TextBlock_106() -> str: ...
    @property
    def AutoResXGen_ManagementList_TextBlock_129() -> str: ...
    @property
    def AutoResXGen_ManagementList_TextBlock_83() -> str: ...
    @property
    def AutoResXGen_ManagementList_ToolTip_314() -> str: ...
    @property
    def AutoResXGen_ManagementList2_AutomationPropertiesName_314() -> str: ...
    @property
    def AutoResXGen_ManagementList2_AutomationPropertiesName_52() -> str: ...
    @property
    def AutoResXGen_ManagementList2_Content_186() -> str: ...
    @property
    def AutoResXGen_ManagementList2_Content_19() -> str: ...
    @property
    def AutoResXGen_ManagementList2_Content_196() -> str: ...
    @property
    def AutoResXGen_ManagementList2_Content_33() -> str: ...
    @property
    def AutoResXGen_ManagementList2_NoItemsText_50() -> str: ...
    @property
    def AutoResXGen_ManagementList2_Text_124() -> str: ...
    @property
    def AutoResXGen_ManagementList2_Text_166() -> str: ...
    @property
    def AutoResXGen_ManagementList2_ToolTip_104() -> str: ...
    @property
    def AutoResXGen_ManagementList2_ToolTip_132() -> str: ...
    @property
    def AutoResXGen_ManagementList2_ToolTip_32() -> str: ...
    @property
    def AutoResXGen_SearchBox_AutomationPropertiesName_75() -> str: ...
    @property
    def AutoResXGen_SearchBox_AutomationPropertiesName_85() -> str: ...
    @property
    def AutoResXGen_TaskPane_AutomationPropertiesName_133() -> str: ...
    @property
    def AutoResXGen_TaskPane_Text_74() -> str: ...
    @property
    def AutoResXGen_Tile_AutomationPropertiesName_674() -> str: ...
    @property
    def AutoResXGen_WaitingRing_AutomationPropertiesName_74() -> str: ...
    @property
    def CollapsingTabControl_CollapseButton_AutomationName() -> str: ...
    @property
    def CollapsingTabControl_CollapseButton_ToolTip() -> str: ...
    @property
    def CollapsingTabControl_ExpandButton_AutomationName() -> str: ...
    @property
    def CollapsingTabControl_ExpandButton_ToolTip() -> str: ...
    @property
    def ColumnsExplorer_Column_FindTextBox_AutomationName() -> str: ...
    @property
    def ColumnsExplorer_Column_FindTextBox_BackgroundText() -> str: ...
    @property
    def Culture() -> CultureInfo: ...
    @property
    def FilterRule_AccessibleName() -> str: ...
    @property
    def FilterRulePanel_LogicalOperatorText_FirstHeader() -> str: ...
    @property
    def FilterRulePanel_LogicalOperatorText_Header() -> str: ...
    @property
    def FilterRulePanel_LogicalOperatorText_Item() -> str: ...
    @property
    def InnerList_GridViewColumnHeader_ItemStatus_Ascending() -> str: ...
    @property
    def InnerList_GridViewColumnHeader_ItemStatus_Descending() -> str: ...
    @property
    def ManagementList_NoMatchesFound_Message() -> str: ...
    @property
    def ManagementList_SearchBox_BackgroundText_Live() -> str: ...
    @property
    def ManagementList_SortGlyph_Ascending_AutomationName() -> str: ...
    @property
    def ManagementList_SortGlyph_Descending_AutomationName() -> str: ...
    @property
    def ManagementList_StartFilterButton_AutomationName() -> str: ...
    @property
    def ManagementList_StopFilterButton_AutomationName() -> str: ...
    @property
    def ManagementList_ToggleFilterPanelButton_AutomationName() -> str: ...
    @property
    def ManagementListTitle_ListStatus_FilterApplied() -> str: ...
    @property
    def ManagementListTitle_ListStatus_FilterInProgress() -> str: ...
    @property
    def ManagementListTitle_ListStatus_FilterNotApplied() -> str: ...
    @property
    def ManagementListTitle_Title_WithViewName() -> str: ...
    @property
    def NavigationList_ShownChildrenButton_AutomationName() -> str: ...
    @property
    def NavigationList_ShownChildrenButton_ToolTip() -> str: ...
    @property
    def OutGridView_Button_Cancel() -> str: ...
    @property
    def OutGridView_Button_OK() -> str: ...
    @property
    def ResourceManager() -> ResourceManager: ...
    @Culture.setter
    def Culture(value: CultureInfo) -> None: ...
