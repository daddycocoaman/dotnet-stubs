from typing import Tuple, Set, Iterable, List


class AsyncResultType:
    Result = 0
    Exception = 1
    Completion = 2


class BinaryMiLogBase:
    @property
    def Path(self) -> str: ...
    @Path.setter
    def Path(self, value: str) -> None: ...


class CimBaseCommand:
    def Dispose(self) -> None: ...


class CimCmdletsAssemblyInitializer:
    def __init__(self): ...
    def OnImport(self) -> None: ...


class CimIndicationEventArgs:
    @property
    def Context(self) -> Object: ...


class CimIndicationEventExceptionEventArgs(CimIndicationEventArgs):
    def __init__(self, theException: Exception): ...
    @property
    def Exception(self) -> Exception: ...


class CimIndicationEventInstanceEventArgs(CimIndicationEventArgs):
    def __init__(self, result: CimSubscriptionResult): ...
    @property
    def Bookmark(self) -> str: ...
    @property
    def MachineId(self) -> str: ...
    @property
    def NewEvent(self) -> CimInstance: ...


class CimIndicationWatcher:
    @overload
    def __init__(self, computerName: str, theNamespace: str, queryDialect: str, queryExpression: str, operationTimeout: UInt32): ...
    @overload
    def __init__(self, cimSession: CimSession, theNamespace: str, queryDialect: str, queryExpression: str, operationTimeout: UInt32): ...
    def add_CimIndicationArrived(self, value: EventHandler) -> None: ...
    @property
    def EnableRaisingEvents(self) -> bool: ...
    def remove_CimIndicationArrived(self, value: EventHandler) -> None: ...
    @EnableRaisingEvents.setter
    def EnableRaisingEvents(self, value: bool) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...


class ExportBinaryMiLogCommand(BinaryMiLogBase):
    def __init__(self): ...
    def Dispose(self) -> None: ...
    @property
    def InputObject(self) -> CimInstance: ...
    @InputObject.setter
    def InputObject(self, value: CimInstance) -> None: ...


class GetCimAssociatedInstanceCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def Association(self) -> str: ...
    @property
    def CimSession(self) -> Set(CimSession): ...
    @property
    def ComputerName(self) -> Set(str): ...
    @property
    def InputObject(self) -> CimInstance: ...
    @property
    def KeyOnly(self) -> SwitchParameter: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def OperationTimeoutSec(self) -> UInt32: ...
    @property
    def ResourceUri(self) -> Uri: ...
    @property
    def ResultClassName(self) -> str: ...
    @Association.setter
    def Association(self, value: str) -> None: ...
    @CimSession.setter
    def CimSession(self, value: Set(CimSession)) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: Set(str)) -> None: ...
    @InputObject.setter
    def InputObject(self, value: CimInstance) -> None: ...
    @KeyOnly.setter
    def KeyOnly(self, value: SwitchParameter) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @OperationTimeoutSec.setter
    def OperationTimeoutSec(self, value: UInt32) -> None: ...
    @ResourceUri.setter
    def ResourceUri(self, value: Uri) -> None: ...
    @ResultClassName.setter
    def ResultClassName(self, value: str) -> None: ...


class GetCimClassCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def CimSession(self) -> Set(CimSession): ...
    @property
    def ClassName(self) -> str: ...
    @property
    def ComputerName(self) -> Set(str): ...
    @property
    def MethodName(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def OperationTimeoutSec(self) -> UInt32: ...
    @property
    def PropertyName(self) -> str: ...
    @property
    def QualifierName(self) -> str: ...
    @CimSession.setter
    def CimSession(self, value: Set(CimSession)) -> None: ...
    @ClassName.setter
    def ClassName(self, value: str) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: Set(str)) -> None: ...
    @MethodName.setter
    def MethodName(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @OperationTimeoutSec.setter
    def OperationTimeoutSec(self, value: UInt32) -> None: ...
    @PropertyName.setter
    def PropertyName(self, value: str) -> None: ...
    @QualifierName.setter
    def QualifierName(self, value: str) -> None: ...


class GetCimInstanceCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def CimSession(self) -> Set(CimSession): ...
    @property
    def ClassName(self) -> str: ...
    @property
    def ComputerName(self) -> Set(str): ...
    @property
    def Filter(self) -> str: ...
    @property
    def InputObject(self) -> CimInstance: ...
    @property
    def KeyOnly(self) -> SwitchParameter: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def OperationTimeoutSec(self) -> UInt32: ...
    @property
    def Property(self) -> Set(str): ...
    @property
    def Query(self) -> str: ...
    @property
    def QueryDialect(self) -> str: ...
    @property
    def ResourceUri(self) -> Uri: ...
    @property
    def Shallow(self) -> SwitchParameter: ...
    @CimSession.setter
    def CimSession(self, value: Set(CimSession)) -> None: ...
    @ClassName.setter
    def ClassName(self, value: str) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: Set(str)) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @InputObject.setter
    def InputObject(self, value: CimInstance) -> None: ...
    @KeyOnly.setter
    def KeyOnly(self, value: SwitchParameter) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @OperationTimeoutSec.setter
    def OperationTimeoutSec(self, value: UInt32) -> None: ...
    @Property.setter
    def Property(self, value: Set(str)) -> None: ...
    @Query.setter
    def Query(self, value: str) -> None: ...
    @QueryDialect.setter
    def QueryDialect(self, value: str) -> None: ...
    @ResourceUri.setter
    def ResourceUri(self, value: Uri) -> None: ...
    @Shallow.setter
    def Shallow(self, value: SwitchParameter) -> None: ...


class GetCimSessionCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def ComputerName(self) -> Set(str): ...
    @property
    def Id(self) -> Set(UInt32): ...
    @property
    def InstanceId(self) -> Set(Guid): ...
    @property
    def Name(self) -> Set(str): ...
    @ComputerName.setter
    def ComputerName(self, value: Set(str)) -> None: ...
    @Id.setter
    def Id(self, value: Set(UInt32)) -> None: ...
    @InstanceId.setter
    def InstanceId(self, value: Set(Guid)) -> None: ...
    @Name.setter
    def Name(self, value: Set(str)) -> None: ...


class ImportBinaryMiLogCommand(BinaryMiLogBase):
    def __init__(self): ...


class InvokeCimMethodCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def Arguments(self) -> IDictionary: ...
    @property
    def CimClass(self) -> CimClass: ...
    @property
    def CimSession(self) -> Set(CimSession): ...
    @property
    def ClassName(self) -> str: ...
    @property
    def ComputerName(self) -> Set(str): ...
    @property
    def InputObject(self) -> CimInstance: ...
    @property
    def MethodName(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def OperationTimeoutSec(self) -> UInt32: ...
    @property
    def Query(self) -> str: ...
    @property
    def QueryDialect(self) -> str: ...
    @property
    def ResourceUri(self) -> Uri: ...
    @Arguments.setter
    def Arguments(self, value: IDictionary) -> None: ...
    @CimClass.setter
    def CimClass(self, value: CimClass) -> None: ...
    @CimSession.setter
    def CimSession(self, value: Set(CimSession)) -> None: ...
    @ClassName.setter
    def ClassName(self, value: str) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: Set(str)) -> None: ...
    @InputObject.setter
    def InputObject(self, value: CimInstance) -> None: ...
    @MethodName.setter
    def MethodName(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @OperationTimeoutSec.setter
    def OperationTimeoutSec(self, value: UInt32) -> None: ...
    @Query.setter
    def Query(self, value: str) -> None: ...
    @QueryDialect.setter
    def QueryDialect(self, value: str) -> None: ...
    @ResourceUri.setter
    def ResourceUri(self, value: Uri) -> None: ...


class NewCimInstanceCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def CimClass(self) -> CimClass: ...
    @property
    def CimSession(self) -> Set(CimSession): ...
    @property
    def ClassName(self) -> str: ...
    @property
    def ClientOnly(self) -> SwitchParameter: ...
    @property
    def ComputerName(self) -> Set(str): ...
    @property
    def Key(self) -> Set(str): ...
    @property
    def Namespace(self) -> str: ...
    @property
    def OperationTimeoutSec(self) -> UInt32: ...
    @property
    def Property(self) -> IDictionary: ...
    @property
    def ResourceUri(self) -> Uri: ...
    @CimClass.setter
    def CimClass(self, value: CimClass) -> None: ...
    @CimSession.setter
    def CimSession(self, value: Set(CimSession)) -> None: ...
    @ClassName.setter
    def ClassName(self, value: str) -> None: ...
    @ClientOnly.setter
    def ClientOnly(self, value: SwitchParameter) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: Set(str)) -> None: ...
    @Key.setter
    def Key(self, value: Set(str)) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @OperationTimeoutSec.setter
    def OperationTimeoutSec(self, value: UInt32) -> None: ...
    @Property.setter
    def Property(self, value: IDictionary) -> None: ...
    @ResourceUri.setter
    def ResourceUri(self, value: Uri) -> None: ...


class NewCimSessionCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def Authentication(self) -> PasswordAuthenticationMechanism: ...
    @property
    def CertificateThumbprint(self) -> str: ...
    @property
    def ComputerName(self) -> Set(str): ...
    @property
    def Credential(self) -> PSCredential: ...
    @property
    def Name(self) -> str: ...
    @property
    def OperationTimeoutSec(self) -> UInt32: ...
    @property
    def Port(self) -> UInt32: ...
    @property
    def SessionOption(self) -> CimSessionOptions: ...
    @property
    def SkipTestConnection(self) -> SwitchParameter: ...
    @Authentication.setter
    def Authentication(self, value: PasswordAuthenticationMechanism) -> None: ...
    @CertificateThumbprint.setter
    def CertificateThumbprint(self, value: str) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: Set(str)) -> None: ...
    @Credential.setter
    def Credential(self, value: PSCredential) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @OperationTimeoutSec.setter
    def OperationTimeoutSec(self, value: UInt32) -> None: ...
    @Port.setter
    def Port(self, value: UInt32) -> None: ...
    @SessionOption.setter
    def SessionOption(self, value: CimSessionOptions) -> None: ...
    @SkipTestConnection.setter
    def SkipTestConnection(self, value: SwitchParameter) -> None: ...


class NewCimSessionOptionCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def EncodePortInServicePrincipalName(self) -> SwitchParameter: ...
    @property
    def Encoding(self) -> PacketEncoding: ...
    @property
    def HttpPrefix(self) -> Uri: ...
    @property
    def Impersonation(self) -> ImpersonationType: ...
    @property
    def MaxEnvelopeSizeKB(self) -> UInt32: ...
    @property
    def NoEncryption(self) -> SwitchParameter: ...
    @property
    def PacketIntegrity(self) -> SwitchParameter: ...
    @property
    def PacketPrivacy(self) -> SwitchParameter: ...
    @property
    def Protocol(self) -> ProtocolType: ...
    @property
    def ProxyAuthentication(self) -> PasswordAuthenticationMechanism: ...
    @property
    def ProxyCertificateThumbprint(self) -> str: ...
    @property
    def ProxyCredential(self) -> PSCredential: ...
    @property
    def ProxyType(self) -> ProxyType: ...
    @property
    def SkipCACheck(self) -> SwitchParameter: ...
    @property
    def SkipCNCheck(self) -> SwitchParameter: ...
    @property
    def SkipRevocationCheck(self) -> SwitchParameter: ...
    @property
    def UICulture(self) -> CultureInfo: ...
    @property
    def UseSsl(self) -> SwitchParameter: ...
    @Culture.setter
    def Culture(self, value: CultureInfo) -> None: ...
    @EncodePortInServicePrincipalName.setter
    def EncodePortInServicePrincipalName(self, value: SwitchParameter) -> None: ...
    @Encoding.setter
    def Encoding(self, value: PacketEncoding) -> None: ...
    @HttpPrefix.setter
    def HttpPrefix(self, value: Uri) -> None: ...
    @Impersonation.setter
    def Impersonation(self, value: ImpersonationType) -> None: ...
    @MaxEnvelopeSizeKB.setter
    def MaxEnvelopeSizeKB(self, value: UInt32) -> None: ...
    @NoEncryption.setter
    def NoEncryption(self, value: SwitchParameter) -> None: ...
    @PacketIntegrity.setter
    def PacketIntegrity(self, value: SwitchParameter) -> None: ...
    @PacketPrivacy.setter
    def PacketPrivacy(self, value: SwitchParameter) -> None: ...
    @Protocol.setter
    def Protocol(self, value: ProtocolType) -> None: ...
    @ProxyAuthentication.setter
    def ProxyAuthentication(self, value: PasswordAuthenticationMechanism) -> None: ...
    @ProxyCertificateThumbprint.setter
    def ProxyCertificateThumbprint(self, value: str) -> None: ...
    @ProxyCredential.setter
    def ProxyCredential(self, value: PSCredential) -> None: ...
    @ProxyType.setter
    def ProxyType(self, value: ProxyType) -> None: ...
    @SkipCACheck.setter
    def SkipCACheck(self, value: SwitchParameter) -> None: ...
    @SkipCNCheck.setter
    def SkipCNCheck(self, value: SwitchParameter) -> None: ...
    @SkipRevocationCheck.setter
    def SkipRevocationCheck(self, value: SwitchParameter) -> None: ...
    @UICulture.setter
    def UICulture(self, value: CultureInfo) -> None: ...
    @UseSsl.setter
    def UseSsl(self, value: SwitchParameter) -> None: ...


class ProtocolType:
    Default = 0
    Dcom = 1
    Wsman = 2


class RegisterCimIndicationCommand(ObjectEventRegistrationBase):
    def __init__(self): ...
    @property
    def CimSession(self) -> CimSession: ...
    @property
    def ClassName(self) -> str: ...
    @property
    def ComputerName(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def OperationTimeoutSec(self) -> UInt32: ...
    @property
    def Query(self) -> str: ...
    @property
    def QueryDialect(self) -> str: ...
    @CimSession.setter
    def CimSession(self, value: CimSession) -> None: ...
    @ClassName.setter
    def ClassName(self, value: str) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @OperationTimeoutSec.setter
    def OperationTimeoutSec(self, value: UInt32) -> None: ...
    @Query.setter
    def Query(self, value: str) -> None: ...
    @QueryDialect.setter
    def QueryDialect(self, value: str) -> None: ...


class RemoveCimInstanceCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def CimSession(self) -> Set(CimSession): ...
    @property
    def ComputerName(self) -> Set(str): ...
    @property
    def InputObject(self) -> CimInstance: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def OperationTimeoutSec(self) -> UInt32: ...
    @property
    def Query(self) -> str: ...
    @property
    def QueryDialect(self) -> str: ...
    @property
    def ResourceUri(self) -> Uri: ...
    @CimSession.setter
    def CimSession(self, value: Set(CimSession)) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: Set(str)) -> None: ...
    @InputObject.setter
    def InputObject(self, value: CimInstance) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @OperationTimeoutSec.setter
    def OperationTimeoutSec(self, value: UInt32) -> None: ...
    @Query.setter
    def Query(self, value: str) -> None: ...
    @QueryDialect.setter
    def QueryDialect(self, value: str) -> None: ...
    @ResourceUri.setter
    def ResourceUri(self, value: Uri) -> None: ...


class RemoveCimSessionCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def CimSession(self) -> Set(CimSession): ...
    @property
    def ComputerName(self) -> Set(str): ...
    @property
    def Id(self) -> Set(UInt32): ...
    @property
    def InstanceId(self) -> Set(Guid): ...
    @property
    def Name(self) -> Set(str): ...
    @CimSession.setter
    def CimSession(self, value: Set(CimSession)) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: Set(str)) -> None: ...
    @Id.setter
    def Id(self, value: Set(UInt32)) -> None: ...
    @InstanceId.setter
    def InstanceId(self, value: Set(Guid)) -> None: ...
    @Name.setter
    def Name(self, value: Set(str)) -> None: ...


class SetCimInstanceCommand(CimBaseCommand):
    def __init__(self): ...
    @property
    def CimSession(self) -> Set(CimSession): ...
    @property
    def ComputerName(self) -> Set(str): ...
    @property
    def InputObject(self) -> CimInstance: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def OperationTimeoutSec(self) -> UInt32: ...
    @property
    def PassThru(self) -> SwitchParameter: ...
    @property
    def Property(self) -> IDictionary: ...
    @property
    def Query(self) -> str: ...
    @property
    def QueryDialect(self) -> str: ...
    @property
    def ResourceUri(self) -> Uri: ...
    @CimSession.setter
    def CimSession(self, value: Set(CimSession)) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: Set(str)) -> None: ...
    @InputObject.setter
    def InputObject(self, value: CimInstance) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @OperationTimeoutSec.setter
    def OperationTimeoutSec(self, value: UInt32) -> None: ...
    @PassThru.setter
    def PassThru(self, value: SwitchParameter) -> None: ...
    @Property.setter
    def Property(self, value: IDictionary) -> None: ...
    @Query.setter
    def Query(self, value: str) -> None: ...
    @QueryDialect.setter
    def QueryDialect(self, value: str) -> None: ...
    @ResourceUri.setter
    def ResourceUri(self, value: Uri) -> None: ...
