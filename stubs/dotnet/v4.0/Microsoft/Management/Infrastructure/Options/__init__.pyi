from typing import Tuple, Set, Iterable, List


class CertificateAuthenticationMechanism:
    Default = 0
    ClientCertificate = 1
    IssuerCertificate = 2


class CimCallbackMode:
    #None = 0
    Report = 0
    Inquire = 1
    Ignore = 2


class CimCredential:
    @overload
    def __init__(self, authenticationMechanism: str): ...
    @overload
    def __init__(self, authenticationMechanism: ImpersonatedAuthenticationMechanism): ...
    @overload
    def __init__(self, authenticationMechanism: str, certificateThumbprint: str): ...
    @overload
    def __init__(self, authenticationMechanism: CertificateAuthenticationMechanism, certificateThumbprint: str): ...
    @overload
    def __init__(self, authenticationMechanism: str, domain: str, userName: str, password: SecureString): ...
    @overload
    def __init__(self, authenticationMechanism: PasswordAuthenticationMechanism, domain: str, userName: str, password: SecureString): ...


class CimOperationFlags:
    #None = 0
    BasicTypeInformation = 2
    FullTypeInformation = 4
    LocalizedQualifiers = 8
    ExpensiveProperties = 64
    PolymorphismShallow = 128
    PolymorphismDeepBasePropsOnly = 384
    ReportOperationStarted = 512
    NoTypeInformation = 1024
    StandardTypeInformation = 2048


class CimOperationOptions:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, mustUnderstand: bool): ...
    @overload
    def __init__(self, optionsToClone: CimOperationOptions): ...
    def DisableChannel(self, channelNumber: UInt32) -> None: ...
    def Dispose(self) -> None: ...
    def EnableChannel(self, channelNumber: UInt32) -> None: ...
    @property
    def CancellationToken(self) -> Nullable: ...
    @property
    def ClassNamesOnly(self) -> bool: ...
    @property
    def EnableMethodResultStreaming(self) -> bool: ...
    @property
    def Flags(self) -> CimOperationFlags: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def KeysOnly(self) -> bool: ...
    @property
    def PromptUserMode(self) -> CimCallbackMode: ...
    @property
    def ReportOperationStarted(self) -> bool: ...
    @property
    def ResourceUri(self) -> Uri: ...
    @property
    def ResourceUriPrefix(self) -> Uri: ...
    @property
    def ShortenLifetimeOfResults(self) -> bool: ...
    @property
    def Timeout(self) -> TimeSpan: ...
    @property
    def UseMachineId(self) -> bool: ...
    @property
    def WriteErrorMode(self) -> CimCallbackMode: ...
    @CancellationToken.setter
    def CancellationToken(self, value: Nullable) -> None: ...
    @ClassNamesOnly.setter
    def ClassNamesOnly(self, value: bool) -> None: ...
    @EnableMethodResultStreaming.setter
    def EnableMethodResultStreaming(self, value: bool) -> None: ...
    @Flags.setter
    def Flags(self, value: CimOperationFlags) -> None: ...
    @KeysOnly.setter
    def KeysOnly(self, value: bool) -> None: ...
    @PromptUser.setter
    def PromptUser(self, value: PromptUserCallback) -> None: ...
    @PromptUserMode.setter
    def PromptUserMode(self, value: CimCallbackMode) -> None: ...
    @ResourceUri.setter
    def ResourceUri(self, value: Uri) -> None: ...
    @ResourceUriPrefix.setter
    def ResourceUriPrefix(self, value: Uri) -> None: ...
    @ShortenLifetimeOfResults.setter
    def ShortenLifetimeOfResults(self, value: bool) -> None: ...
    @Timeout.setter
    def Timeout(self, value: TimeSpan) -> None: ...
    @UseMachineId.setter
    def UseMachineId(self, value: bool) -> None: ...
    @WriteError.setter
    def WriteError(self, value: WriteErrorCallback) -> None: ...
    @WriteErrorMode.setter
    def WriteErrorMode(self, value: CimCallbackMode) -> None: ...
    @WriteMessage.setter
    def WriteMessage(self, value: WriteMessageCallback) -> None: ...
    @WriteProgress.setter
    def WriteProgress(self, value: WriteProgressCallback) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: UInt32, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: str, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: bool, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: Byte, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: SByte, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: Int16, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: int, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: UInt16, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: Int64, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: Single, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: float, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: Char, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: UInt64, mustComply: bool) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: Object, cimType: CimType, mustComply: bool) -> None: ...
    @overload
    def SetOption(self, optionName: str, optionValue: UInt32) -> None: ...
    @overload
    def SetOption(self, optionName: str, optionValue: str) -> None: ...
    def SetPromptUserRegularMode(self, callbackMode: CimCallbackMode, automaticConfirmation: bool) -> None: ...


class CimPromptType:
    #None = 0
    Normal = 0
    Critical = 1


class CimResponseType:
    #None = 0
    No = 0
    Yes = 1
    NoToAll = 2
    YesToAll = 3


class CimSessionOptions:
    def __init__(self): ...
    def AddDestinationCredentials(self, credential: CimCredential) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def Timeout(self) -> TimeSpan: ...
    @property
    def UICulture(self) -> CultureInfo: ...
    @Culture.setter
    def Culture(self, value: CultureInfo) -> None: ...
    @Timeout.setter
    def Timeout(self, value: TimeSpan) -> None: ...
    @UICulture.setter
    def UICulture(self, value: CultureInfo) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: str) -> None: ...
    @overload
    def SetCustomOption(self, optionName: str, optionValue: UInt32) -> None: ...


class CimSubscriptionDeliveryOptions:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, types: CimSubscriptionDeliveryType): ...
    @overload
    def __init__(self, optionsToClone: CimSubscriptionDeliveryOptions): ...
    def AddCredentials(self, optionName: str, optionValue: CimCredential, flags: UInt32) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def SetDateTime(self, optionName: str, optionValue: DateTime, flags: UInt32) -> None: ...
    @overload
    def SetDateTime(self, optionName: str, optionValue: TimeSpan, flags: UInt32) -> None: ...
    def SetInterval(self, optionName: str, optionValue: TimeSpan, flags: UInt32) -> None: ...
    def SetNumber(self, optionName: str, optionValue: UInt32, flags: UInt32) -> None: ...
    def SetString(self, optionName: str, optionValue: str, flags: UInt32) -> None: ...


class CimWriteMessageChannel:
    Warning = 0
    Verbose = 1
    Debug = 2


class DComSessionOptions(CimSessionOptions):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, optionsToClone: DComSessionOptions): ...
    @property
    def Impersonation(self) -> ImpersonationType: ...
    @property
    def PacketIntegrity(self) -> bool: ...
    @property
    def PacketPrivacy(self) -> bool: ...
    @Impersonation.setter
    def Impersonation(self, value: ImpersonationType) -> None: ...
    @PacketIntegrity.setter
    def PacketIntegrity(self, value: bool) -> None: ...
    @PacketPrivacy.setter
    def PacketPrivacy(self, value: bool) -> None: ...


class ImpersonatedAuthenticationMechanism:
    #None = 0
    Negotiate = 1
    Kerberos = 2
    NtlmDomain = 3


class ImpersonationType:
    Default = 0
    #None = 1
    Identify = 2
    Impersonate = 3
    Delegate = 4


class PacketEncoding:
    Default = 0
    Utf8 = 1
    Utf16 = 2


class PasswordAuthenticationMechanism:
    Default = 0
    Digest = 1
    Negotiate = 2
    Basic = 3
    Kerberos = 4
    NtlmDomain = 5
    CredSsp = 6


class PromptUserCallback:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, message: str, promptType: CimPromptType, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> CimResponseType: ...
    def Invoke(self, message: str, promptType: CimPromptType) -> CimResponseType: ...


class ProxyType:
    #None = 0
    WinHttp = 1
    Auto = 2
    InternetExplorer = 3


class WriteErrorCallback:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, cimError: CimInstance, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> CimResponseType: ...
    def Invoke(self, cimError: CimInstance) -> CimResponseType: ...


class WriteMessageCallback:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, channel: UInt32, message: str, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, channel: UInt32, message: str) -> None: ...


class WriteProgressCallback:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, activity: str, currentOperation: str, statusDescription: str, percentageCompleted: UInt32, secondsRemaining: UInt32, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, activity: str, currentOperation: str, statusDescription: str, percentageCompleted: UInt32, secondsRemaining: UInt32) -> None: ...


class WSManSessionOptions(CimSessionOptions):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, optionsToClone: WSManSessionOptions): ...
    def AddProxyCredentials(self, credential: CimCredential) -> None: ...
    @property
    def CertCACheck(self) -> bool: ...
    @property
    def CertCNCheck(self) -> bool: ...
    @property
    def CertRevocationCheck(self) -> bool: ...
    @property
    def DestinationPort(self) -> UInt32: ...
    @property
    def EncodePortInServicePrincipalName(self) -> bool: ...
    @property
    def HttpUrlPrefix(self) -> Uri: ...
    @property
    def MaxEnvelopeSize(self) -> UInt32: ...
    @property
    def NoEncryption(self) -> bool: ...
    @property
    def PacketEncoding(self) -> PacketEncoding: ...
    @property
    def ProxyType(self) -> ProxyType: ...
    @property
    def UseSsl(self) -> bool: ...
    @CertCACheck.setter
    def CertCACheck(self, value: bool) -> None: ...
    @CertCNCheck.setter
    def CertCNCheck(self, value: bool) -> None: ...
    @CertRevocationCheck.setter
    def CertRevocationCheck(self, value: bool) -> None: ...
    @DestinationPort.setter
    def DestinationPort(self, value: UInt32) -> None: ...
    @EncodePortInServicePrincipalName.setter
    def EncodePortInServicePrincipalName(self, value: bool) -> None: ...
    @HttpUrlPrefix.setter
    def HttpUrlPrefix(self, value: Uri) -> None: ...
    @MaxEnvelopeSize.setter
    def MaxEnvelopeSize(self, value: UInt32) -> None: ...
    @NoEncryption.setter
    def NoEncryption(self, value: bool) -> None: ...
    @PacketEncoding.setter
    def PacketEncoding(self, value: PacketEncoding) -> None: ...
    @ProxyType.setter
    def ProxyType(self, value: ProxyType) -> None: ...
    @UseSsl.setter
    def UseSsl(self, value: bool) -> None: ...
