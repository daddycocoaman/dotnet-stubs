__all__ = ['Generic','Options','Serialization']
from typing import Tuple, Set, Iterable, List


class CimClass:
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CimClassMethods(self) -> CimReadOnlyKeyedCollection: ...
    @property
    def CimClassProperties(self) -> CimReadOnlyKeyedCollection: ...
    @property
    def CimClassQualifiers(self) -> CimReadOnlyKeyedCollection: ...
    @property
    def CimSuperClass(self) -> CimClass: ...
    @property
    def CimSuperClassName(self) -> str: ...
    @property
    def CimSystemProperties(self) -> CimSystemProperties: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class CimConverter:
    def GetCimType(dotNetType: Type) -> CimType: ...
    def GetDotNetType(cimType: CimType) -> Type: ...


class CimException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cimError: CimInstance): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    def Dispose(self) -> None: ...
    @property
    def ErrorData(self) -> CimInstance: ...
    @property
    def ErrorSource(self) -> str: ...
    @property
    def ErrorType(self) -> UInt16: ...
    @property
    def MessageId(self) -> str: ...
    @property
    def NativeErrorCode(self) -> NativeErrorCode: ...
    @property
    def StatusCode(self) -> UInt32: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class CimFlags:
    #None = 0
    Class = 1
    Method = 2
    Property = 4
    Parameter = 8
    Association = 16
    Indication = 32
    Reference = 64
    Any = 127
    EnableOverride = 128
    DisableOverride = 256
    Restricted = 512
    ToSubclass = 1024
    Translatable = 2048
    Key = 4096
    In = 8192
    Out = 16384
    Required = 32768
    Static = 65536
    Abstract = 131072
    Terminal = 262144
    Expensive = 524288
    Stream = 1048576
    ReadOnly = 2097152
    NotModified = 33554432
    NullValue = 536870912
    Borrow = 1073741824
    Adopt = 2147483648


class CimInstance:
    @overload
    def __init__(self, cimInstanceToClone: CimInstance): ...
    @overload
    def __init__(self, className: str): ...
    @overload
    def __init__(self, cimClass: CimClass): ...
    @overload
    def __init__(self, className: str, namespaceName: str): ...
    def Dispose(self) -> None: ...
    @property
    def CimClass(self) -> CimClass: ...
    @property
    def CimInstanceProperties(self) -> CimKeyedCollection: ...
    @property
    def CimSystemProperties(self) -> CimSystemProperties: ...
    def GetCimSessionComputerName(self) -> str: ...
    def GetCimSessionInstanceId(self) -> Guid: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def ToString(self) -> str: ...


class CimMethodDeclaration:
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> CimReadOnlyKeyedCollection: ...
    @property
    def Qualifiers(self) -> CimReadOnlyKeyedCollection: ...
    @property
    def ReturnType(self) -> CimType: ...
    def ToString(self) -> str: ...


class CimMethodParameter:
    @overload
    def Create(name: str, value: Object, flags: CimFlags) -> CimMethodParameter: ...
    @overload
    def Create(name: str, value: Object, type: CimType, flags: CimFlags) -> CimMethodParameter: ...
    @property
    def CimType(self) -> CimType: ...
    @property
    def Flags(self) -> CimFlags: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class CimMethodParameterDeclaration:
    @property
    def CimType(self) -> CimType: ...
    @property
    def Name(self) -> str: ...
    @property
    def Qualifiers(self) -> CimReadOnlyKeyedCollection: ...
    @property
    def ReferenceClassName(self) -> str: ...


class CimMethodParametersCollection:
    def __init__(self): ...
    def Add(self, newParameter: CimMethodParameter) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, parameterName: str) -> CimMethodParameter: ...
    def GetEnumerator(self) -> IEnumerator: ...


class CimMethodResult(CimMethodResultBase):
    def Dispose(self) -> None: ...
    @property
    def OutParameters(self) -> CimReadOnlyKeyedCollection: ...
    @property
    def ReturnValue(self) -> CimMethodParameter: ...


class CimMethodResultBase:
    pass


class CimMethodStreamedResult(CimMethodResultBase):
    @property
    def ItemType(self) -> CimType: ...
    @property
    def ItemValue(self) -> Object: ...
    @property
    def ParameterName(self) -> str: ...


class CimProperty:
    @overload
    def Create(name: str, value: Object, flags: CimFlags) -> CimProperty: ...
    @overload
    def Create(name: str, value: Object, type: CimType, flags: CimFlags) -> CimProperty: ...
    @property
    def CimType(self) -> CimType: ...
    @property
    def Flags(self) -> CimFlags: ...
    @property
    def IsValueModified(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @IsValueModified.setter
    def IsValueModified(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class CimPropertyDeclaration:
    @property
    def CimType(self) -> CimType: ...
    @property
    def Flags(self) -> CimFlags: ...
    @property
    def Name(self) -> str: ...
    @property
    def Qualifiers(self) -> CimReadOnlyKeyedCollection: ...
    @property
    def ReferenceClassName(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    def ToString(self) -> str: ...


class CimQualifier:
    @property
    def CimType(self) -> CimType: ...
    @property
    def Flags(self) -> CimFlags: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    def ToString(self) -> str: ...


class CimSession:
    def Close(self) -> None: ...
    def CloseAsync(self) -> CimAsyncStatus: ...
    @overload
    def Create(computerName: str) -> CimSession: ...
    @overload
    def Create(computerName: str, sessionOptions: CimSessionOptions) -> CimSession: ...
    @overload
    def CreateAsync(computerName: str) -> CimAsyncResult: ...
    @overload
    def CreateAsync(computerName: str, sessionOptions: CimSessionOptions) -> CimAsyncResult: ...
    @overload
    def CreateInstance(self, namespaceName: str, instance: CimInstance) -> CimInstance: ...
    @overload
    def CreateInstance(self, namespaceName: str, instance: CimInstance, options: CimOperationOptions) -> CimInstance: ...
    @overload
    def CreateInstanceAsync(self, namespaceName: str, instance: CimInstance) -> CimAsyncResult: ...
    @overload
    def CreateInstanceAsync(self, namespaceName: str, instance: CimInstance, options: CimOperationOptions) -> CimAsyncResult: ...
    @overload
    def DeleteInstance(self, instance: CimInstance) -> None: ...
    @overload
    def DeleteInstance(self, namespaceName: str, instance: CimInstance) -> None: ...
    @overload
    def DeleteInstance(self, namespaceName: str, instance: CimInstance, options: CimOperationOptions) -> None: ...
    @overload
    def DeleteInstanceAsync(self, instance: CimInstance) -> CimAsyncStatus: ...
    @overload
    def DeleteInstanceAsync(self, namespaceName: str, instance: CimInstance) -> CimAsyncStatus: ...
    @overload
    def DeleteInstanceAsync(self, namespaceName: str, instance: CimInstance, options: CimOperationOptions) -> CimAsyncStatus: ...
    def Dispose(self) -> None: ...
    @overload
    def EnumerateAssociatedInstances(self, namespaceName: str, sourceInstance: CimInstance, associationClassName: str, resultClassName: str, sourceRole: str, resultRole: str) -> Iterable[CimInstance]: ...
    @overload
    def EnumerateAssociatedInstances(self, namespaceName: str, sourceInstance: CimInstance, associationClassName: str, resultClassName: str, sourceRole: str, resultRole: str, options: CimOperationOptions) -> Iterable[CimInstance]: ...
    @overload
    def EnumerateAssociatedInstancesAsync(self, namespaceName: str, sourceInstance: CimInstance, associationClassName: str, resultClassName: str, sourceRole: str, resultRole: str) -> CimAsyncMultipleResults: ...
    @overload
    def EnumerateAssociatedInstancesAsync(self, namespaceName: str, sourceInstance: CimInstance, associationClassName: str, resultClassName: str, sourceRole: str, resultRole: str, options: CimOperationOptions) -> CimAsyncMultipleResults: ...
    @overload
    def EnumerateClasses(self, namespaceName: str) -> Iterable[CimClass]: ...
    @overload
    def EnumerateClasses(self, namespaceName: str, className: str) -> Iterable[CimClass]: ...
    @overload
    def EnumerateClasses(self, namespaceName: str, className: str, options: CimOperationOptions) -> Iterable[CimClass]: ...
    @overload
    def EnumerateClassesAsync(self, namespaceName: str) -> CimAsyncMultipleResults: ...
    @overload
    def EnumerateClassesAsync(self, namespaceName: str, className: str) -> CimAsyncMultipleResults: ...
    @overload
    def EnumerateClassesAsync(self, namespaceName: str, className: str, options: CimOperationOptions) -> CimAsyncMultipleResults: ...
    @overload
    def EnumerateInstances(self, namespaceName: str, className: str) -> Iterable[CimInstance]: ...
    @overload
    def EnumerateInstances(self, namespaceName: str, className: str, options: CimOperationOptions) -> Iterable[CimInstance]: ...
    @overload
    def EnumerateInstancesAsync(self, namespaceName: str, className: str) -> CimAsyncMultipleResults: ...
    @overload
    def EnumerateInstancesAsync(self, namespaceName: str, className: str, options: CimOperationOptions) -> CimAsyncMultipleResults: ...
    @overload
    def EnumerateReferencingInstances(self, namespaceName: str, sourceInstance: CimInstance, associationClassName: str, sourceRole: str) -> Iterable[CimInstance]: ...
    @overload
    def EnumerateReferencingInstances(self, namespaceName: str, sourceInstance: CimInstance, associationClassName: str, sourceRole: str, options: CimOperationOptions) -> Iterable[CimInstance]: ...
    @overload
    def EnumerateReferencingInstancesAsync(self, namespaceName: str, sourceInstance: CimInstance, associationClassName: str, sourceRole: str) -> CimAsyncMultipleResults: ...
    @overload
    def EnumerateReferencingInstancesAsync(self, namespaceName: str, sourceInstance: CimInstance, associationClassName: str, sourceRole: str, options: CimOperationOptions) -> CimAsyncMultipleResults: ...
    @property
    def ComputerName(self) -> str: ...
    @property
    def InstanceId(self) -> Guid: ...
    @overload
    def GetClass(self, namespaceName: str, className: str) -> CimClass: ...
    @overload
    def GetClass(self, namespaceName: str, className: str, options: CimOperationOptions) -> CimClass: ...
    @overload
    def GetClassAsync(self, namespaceName: str, className: str) -> CimAsyncResult: ...
    @overload
    def GetClassAsync(self, namespaceName: str, className: str, options: CimOperationOptions) -> CimAsyncResult: ...
    @overload
    def GetInstance(self, namespaceName: str, instanceId: CimInstance) -> CimInstance: ...
    @overload
    def GetInstance(self, namespaceName: str, instanceId: CimInstance, options: CimOperationOptions) -> CimInstance: ...
    @overload
    def GetInstanceAsync(self, namespaceName: str, instanceId: CimInstance) -> CimAsyncResult: ...
    @overload
    def GetInstanceAsync(self, namespaceName: str, instanceId: CimInstance, options: CimOperationOptions) -> CimAsyncResult: ...
    @overload
    def InvokeMethod(self, instance: CimInstance, methodName: str, methodParameters: CimMethodParametersCollection) -> CimMethodResult: ...
    @overload
    def InvokeMethod(self, namespaceName: str, className: str, methodName: str, methodParameters: CimMethodParametersCollection) -> CimMethodResult: ...
    @overload
    def InvokeMethod(self, namespaceName: str, instance: CimInstance, methodName: str, methodParameters: CimMethodParametersCollection) -> CimMethodResult: ...
    @overload
    def InvokeMethod(self, namespaceName: str, className: str, methodName: str, methodParameters: CimMethodParametersCollection, options: CimOperationOptions) -> CimMethodResult: ...
    @overload
    def InvokeMethod(self, namespaceName: str, instance: CimInstance, methodName: str, methodParameters: CimMethodParametersCollection, options: CimOperationOptions) -> CimMethodResult: ...
    @overload
    def InvokeMethodAsync(self, instance: CimInstance, methodName: str, methodParameters: CimMethodParametersCollection) -> CimAsyncResult: ...
    @overload
    def InvokeMethodAsync(self, namespaceName: str, className: str, methodName: str, methodParameters: CimMethodParametersCollection) -> CimAsyncResult: ...
    @overload
    def InvokeMethodAsync(self, namespaceName: str, instance: CimInstance, methodName: str, methodParameters: CimMethodParametersCollection) -> CimAsyncResult: ...
    @overload
    def InvokeMethodAsync(self, namespaceName: str, className: str, methodName: str, methodParameters: CimMethodParametersCollection, options: CimOperationOptions) -> CimAsyncMultipleResults: ...
    @overload
    def InvokeMethodAsync(self, namespaceName: str, instance: CimInstance, methodName: str, methodParameters: CimMethodParametersCollection, options: CimOperationOptions) -> CimAsyncMultipleResults: ...
    @overload
    def ModifyInstance(self, instance: CimInstance) -> CimInstance: ...
    @overload
    def ModifyInstance(self, namespaceName: str, instance: CimInstance) -> CimInstance: ...
    @overload
    def ModifyInstance(self, namespaceName: str, instance: CimInstance, options: CimOperationOptions) -> CimInstance: ...
    @overload
    def ModifyInstanceAsync(self, instance: CimInstance) -> CimAsyncResult: ...
    @overload
    def ModifyInstanceAsync(self, namespaceName: str, instance: CimInstance) -> CimAsyncResult: ...
    @overload
    def ModifyInstanceAsync(self, namespaceName: str, instance: CimInstance, options: CimOperationOptions) -> CimAsyncResult: ...
    @overload
    def QueryInstances(self, namespaceName: str, queryDialect: str, queryExpression: str) -> Iterable[CimInstance]: ...
    @overload
    def QueryInstances(self, namespaceName: str, queryDialect: str, queryExpression: str, options: CimOperationOptions) -> Iterable[CimInstance]: ...
    @overload
    def QueryInstancesAsync(self, namespaceName: str, queryDialect: str, queryExpression: str) -> CimAsyncMultipleResults: ...
    @overload
    def QueryInstancesAsync(self, namespaceName: str, queryDialect: str, queryExpression: str, options: CimOperationOptions) -> CimAsyncMultipleResults: ...
    @overload
    def Subscribe(self, namespaceName: str, queryDialect: str, queryExpression: str) -> Iterable[CimSubscriptionResult]: ...
    @overload
    def Subscribe(self, namespaceName: str, queryDialect: str, queryExpression: str, operationOptions: CimOperationOptions) -> Iterable[CimSubscriptionResult]: ...
    @overload
    def Subscribe(self, namespaceName: str, queryDialect: str, queryExpression: str, options: CimSubscriptionDeliveryOptions) -> Iterable[CimSubscriptionResult]: ...
    @overload
    def Subscribe(self, namespaceName: str, queryDialect: str, queryExpression: str, operationOptions: CimOperationOptions, options: CimSubscriptionDeliveryOptions) -> Iterable[CimSubscriptionResult]: ...
    @overload
    def SubscribeAsync(self, namespaceName: str, queryDialect: str, queryExpression: str) -> CimAsyncMultipleResults: ...
    @overload
    def SubscribeAsync(self, namespaceName: str, queryDialect: str, queryExpression: str, operationOptions: CimOperationOptions) -> CimAsyncMultipleResults: ...
    @overload
    def SubscribeAsync(self, namespaceName: str, queryDialect: str, queryExpression: str, options: CimSubscriptionDeliveryOptions) -> CimAsyncMultipleResults: ...
    @overload
    def SubscribeAsync(self, namespaceName: str, queryDialect: str, queryExpression: str, operationOptions: CimOperationOptions, options: CimSubscriptionDeliveryOptions) -> CimAsyncMultipleResults: ...
    @overload
    def TestConnection(self) -> bool: ...
    @overload
    def TestConnection(self) -> Tuple[bool, CimInstance, CimException]: ...
    def TestConnectionAsync(self) -> CimAsyncResult: ...
    def ToString(self) -> str: ...


class CimSubscriptionDeliveryType:
    Pull = 1
    Push = 2
    #None = 2


class CimSubscriptionResult:
    def Dispose(self) -> None: ...
    @property
    def Bookmark(self) -> str: ...
    @property
    def Instance(self) -> CimInstance: ...
    @property
    def MachineId(self) -> str: ...


class CimSystemProperties:
    @property
    def ClassName(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def ServerName(self) -> str: ...


class CimType:
    Unknown = 0
    Boolean = 1
    UInt8 = 2
    SInt8 = 3
    UInt16 = 4
    SInt16 = 5
    UInt32 = 6
    SInt32 = 7
    UInt64 = 8
    SInt64 = 9
    Real32 = 10
    Real64 = 11
    Char16 = 12
    DateTime = 13
    String = 14
    Reference = 15
    Instance = 16
    BooleanArray = 17
    UInt8Array = 18
    SInt8Array = 19
    UInt16Array = 20
    SInt16Array = 21
    UInt32Array = 22
    SInt32Array = 23
    UInt64Array = 24
    SInt64Array = 25
    Real32Array = 26
    Real64Array = 27
    Char16Array = 28
    DateTimeArray = 29
    StringArray = 30
    ReferenceArray = 31
    InstanceArray = 32


class NativeErrorCode:
    Ok = 0
    Failed = 1
    AccessDenied = 2
    InvalidNamespace = 3
    InvalidParameter = 4
    InvalidClass = 5
    NotFound = 6
    NotSupported = 7
    ClassHasChildren = 8
    ClassHasInstances = 9
    InvalidSuperClass = 10
    AlreadyExists = 11
    NoSuchProperty = 12
    TypeMismatch = 13
    QueryLanguageNotSupported = 14
    InvalidQuery = 15
    MethodNotAvailable = 16
    MethodNotFound = 17
    NamespaceNotEmpty = 20
    InvalidEnumerationContext = 21
    InvalidOperationTimeout = 22
    PullHasBeenAbandoned = 23
    PullCannotBeAbandoned = 24
    FilteredEnumerationNotSupported = 25
    ContinuationOnErrorNotSupported = 26
    ServerLimitsExceeded = 27
    ServerIsShuttingDown = 28
