from typing import Tuple, Set, Iterable, List


class SqlHierarchyId:
    @overload
    def CompareTo(self, hid: SqlHierarchyId) -> int: ...
    @overload
    def CompareTo(self, obj: Object) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Null() -> SqlHierarchyId: ...
    def GetAncestor(self, n: int) -> SqlHierarchyId: ...
    def GetDescendant(self, child1: SqlHierarchyId, child2: SqlHierarchyId) -> SqlHierarchyId: ...
    def GetHashCode(self) -> int: ...
    def GetLevel(self) -> SqlInt16: ...
    def GetReparentedValue(self, oldRoot: SqlHierarchyId, newRoot: SqlHierarchyId) -> SqlHierarchyId: ...
    def GetRoot() -> SqlHierarchyId: ...
    def IsDescendantOf(self, parent: SqlHierarchyId) -> SqlBoolean: ...
    def op_Equality(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def op_GreaterThan(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def op_Inequality(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def op_LessThan(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def op_LessThanOrEqual(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def Parse(input: SqlString) -> SqlHierarchyId: ...
    def Read(self, r: BinaryReader) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, w: BinaryWriter) -> None: ...
