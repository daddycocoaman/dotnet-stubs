from typing import Tuple, Set, Iterable, List


class GeographyCollectionAggregate:
    def __init__(self): ...
    def Accumulate(self, g: SqlGeography) -> None: ...
    def Init(self) -> None: ...
    def Merge(self, group: GeographyCollectionAggregate) -> None: ...
    def Read(self, r: BinaryReader) -> None: ...
    def Terminate(self) -> SqlGeography: ...
    def Write(self, w: BinaryWriter) -> None: ...


class GeographyConvexHullAggregate:
    def __init__(self): ...
    def Accumulate(self, g: SqlGeography) -> None: ...
    def Init(self) -> None: ...
    def Merge(self, group: GeographyConvexHullAggregate) -> None: ...
    def Read(self, r: BinaryReader) -> None: ...
    def Terminate(self) -> SqlGeography: ...
    def Write(self, w: BinaryWriter) -> None: ...


class GeographyEnvelopeAggregate:
    def __init__(self): ...
    def Accumulate(self, g: SqlGeography) -> None: ...
    def Init(self) -> None: ...
    def Merge(self, group: GeographyEnvelopeAggregate) -> None: ...
    def Terminate(self) -> SqlGeography: ...


class GeographyTessellationFunction:
    def FillRow(obj: Object) -> Tuple[SqlBytes, Int16, int]: ...
    def InitMethod(geographyObject: SqlGeography, densityGrid0: int, densityGrid1: int, densityGrid2: int, densityGrid3: int, cardinality: int, tessellationMode: int, distanceBuffer: SqlDouble) -> IEnumerable: ...


class GeographyUnionAggregate:
    def __init__(self): ...
    def Accumulate(self, g: SqlGeography) -> None: ...
    def Init(self) -> None: ...
    def Merge(self, group: GeographyUnionAggregate) -> None: ...
    def Read(self, r: BinaryReader) -> None: ...
    def Terminate(self) -> SqlGeography: ...
    def Write(self, w: BinaryWriter) -> None: ...


class GeometryCollectionAggregate:
    def __init__(self): ...
    def Accumulate(self, g: SqlGeometry) -> None: ...
    def Init(self) -> None: ...
    def Merge(self, group: GeometryCollectionAggregate) -> None: ...
    def Read(self, r: BinaryReader) -> None: ...
    def Terminate(self) -> SqlGeometry: ...
    def Write(self, w: BinaryWriter) -> None: ...


class GeometryConvexHullAggregate:
    def __init__(self): ...
    def Accumulate(self, g: SqlGeometry) -> None: ...
    def Init(self) -> None: ...
    def Merge(self, group: GeometryConvexHullAggregate) -> None: ...
    def Read(self, r: BinaryReader) -> None: ...
    def Terminate(self) -> SqlGeometry: ...
    def Write(self, w: BinaryWriter) -> None: ...


class GeometryEnvelopeAggregate:
    def __init__(self): ...
    def Accumulate(self, g: SqlGeometry) -> None: ...
    def Init(self) -> None: ...
    def Merge(self, group: GeometryEnvelopeAggregate) -> None: ...
    def Terminate(self) -> SqlGeometry: ...


class GeometryTessellationFunction:
    def FillRow(obj: Object) -> Tuple[SqlBytes, Int16, int]: ...
    def InitMethod(geometryObject: SqlGeometry, rootX: float, rootY: float, maxX: float, maxY: float, densityGrid0: int, densityGrid1: int, densityGrid2: int, densityGrid3: int, cardinality: int, tessellationMode: int, distanceBuffer: SqlDouble) -> IEnumerable: ...


class GeometryUnionAggregate:
    def __init__(self): ...
    def Accumulate(self, g: SqlGeometry) -> None: ...
    def Init(self) -> None: ...
    def Merge(self, group: GeometryUnionAggregate) -> None: ...
    def Read(self, r: BinaryReader) -> None: ...
    def Terminate(self) -> SqlGeometry: ...
    def Write(self, w: BinaryWriter) -> None: ...


class HierarchyIdException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class IGeographySink110:
    def AddCircularArc(self, x1: float, y1: float, z1: Nullable, m1: Nullable, x2: float, y2: float, z2: Nullable, m2: Nullable) -> None: ...


class IGeometrySink110:
    def AddCircularArc(self, x1: float, y1: float, z1: Nullable, m1: Nullable, x2: float, y2: float, z2: Nullable, m2: Nullable) -> None: ...


class ISqlSpatialGridIndexable:
    def BufferForDistanceQuery(self, distance: float) -> Tuple[ISqlSpatialGridIndexable, bool]: ...
    def GetBoundingBoxCorners(self) -> Tuple[float, float, float, float]: ...
    def GetGridCoverage(self, isTopmostGrid: bool, rGridMinX: float, rGridMinY: float, rGridWidth: float, rGridHeight: float, rFuzzX: float, rFuzzY: float, cGridRows: int, cGridColumns: int, touched: Boolean[,], contained: Boolean[,]) -> Tuple[int, int, bool, bool]: ...
    def InteriorBufferForDistanceQuery(self, distance: float) -> ISqlSpatialGridIndexable: ...


class OpenGisGeographyType:
    Point = 1
    LineString = 2
    Polygon = 3
    MultiPoint = 4
    MultiLineString = 5
    MultiPolygon = 6
    GeometryCollection = 7
    CircularString = 8
    CompoundCurve = 9
    CurvePolygon = 10
    FullGlobe = 11


class OpenGisGeometryType:
    Point = 1
    LineString = 2
    Polygon = 3
    MultiPoint = 4
    MultiLineString = 5
    MultiPolygon = 6
    GeometryCollection = 7
    CircularString = 8
    CompoundCurve = 9
    CurvePolygon = 10


class SpaceFillingCurve:
    def Hilbert(order: int, x: UInt32, y: UInt32) -> UInt64: ...
    def ReverseHilbert(order: int, hilbert: UInt64) -> Tuple[UInt32, UInt32]: ...


class SpatialGridCoverage:
    def __init__(self): ...
    def FillRow(obj: Object) -> Tuple[int, Byte, Set(Byte)]: ...
    def Geodetic(geography: SqlGeography, rows: int, columns: int) -> IEnumerable: ...
    def Planar(geometry: SqlGeometry, rootX: float, rootY: float, maxX: float, maxY: float, rows: int, columns: int) -> IEnumerable: ...


class SpatialTessellationFunction:
    def __init__(self): ...
    def FillRow(obj: Object) -> Tuple[Set(Byte), Byte, Set(Byte), Set(Byte)]: ...
    def Geodetic(geography: SqlGeography, cardinality: int, maxDepth: int, options: int, distanceBuffer: SqlDouble) -> IEnumerable: ...
    def GetAttribute(obj: Object) -> int: ...
    def GetCoverage(obj: Object) -> SqlGeometry: ...
    def GetId(obj: Object) -> str: ...
    def GetIsAncestor(obj: Object) -> bool: ...
    def Planar(geometry: SqlGeometry, rootX: float, rootY: float, maxX: float, maxY: float, cardinality: int, maxDepth: int, options: int, distanceBuffer: SqlDouble) -> IEnumerable: ...


class SqlGeography:
    def __init__(self): ...
    def AsBinaryZM(self) -> SqlBytes: ...
    def AsGml(self) -> SqlXml: ...
    def AsTextZM(self) -> SqlChars: ...
    def BufferWithCurves(self, distance: float) -> SqlGeography: ...
    def BufferWithTolerance(self, distance: float, tolerance: float, relative: bool) -> SqlGeography: ...
    def CurveToLineWithTolerance(self, tolerance: float, relative: bool) -> SqlGeography: ...
    def Deserialize(bytes: SqlBytes) -> SqlGeography: ...
    def EnvelopeAngle(self) -> SqlDouble: ...
    def EnvelopeCenter(self) -> SqlGeography: ...
    def Filter(self, other: SqlGeography) -> SqlBoolean: ...
    def GeomFromGml(xml: SqlXml, srid: int) -> SqlGeography: ...
    @property
    def HasM(self) -> bool: ...
    @property
    def HasZ(self) -> bool: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Lat(self) -> SqlDouble: ...
    @property
    def Long(self) -> SqlDouble: ...
    @property
    def M(self) -> SqlDouble: ...
    @property
    def Null() -> SqlGeography: ...
    @property
    def STSrid(self) -> SqlInt32: ...
    @property
    def Z(self) -> SqlDouble: ...
    def InstanceOf(self, geometryType: str) -> SqlBoolean: ...
    def IsValidDetailed(self) -> str: ...
    def MakeValid(self) -> SqlGeography: ...
    def MinDbCompatibilityLevel(self) -> int: ...
    def NumRings(self) -> SqlInt32: ...
    def Parse(s: SqlString) -> SqlGeography: ...
    def Point(latitude: float, longitude: float, srid: int) -> SqlGeography: ...
    def Populate(self, sink: IGeographySink110) -> None: ...
    def Read(self, r: BinaryReader) -> None: ...
    def Reduce(self, tolerance: float) -> SqlGeography: ...
    def ReorientObject(self) -> SqlGeography: ...
    def RingN(self, n: int) -> SqlGeography: ...
    def Serialize(self) -> SqlBytes: ...
    @STSrid.setter
    def STSrid(self, value: SqlInt32) -> None: ...
    def ShortestLineTo(self, other: SqlGeography) -> SqlGeography: ...
    def STArea(self) -> SqlDouble: ...
    def STAsBinary(self) -> SqlBytes: ...
    def STAsText(self) -> SqlChars: ...
    def STBuffer(self, distance: float) -> SqlGeography: ...
    def STContains(self, other: SqlGeography) -> SqlBoolean: ...
    def STConvexHull(self) -> SqlGeography: ...
    def STCurveN(self, n: int) -> SqlGeography: ...
    def STCurveToLine(self) -> SqlGeography: ...
    def STDifference(self, other: SqlGeography) -> SqlGeography: ...
    def STDimension(self) -> SqlInt32: ...
    def STDisjoint(self, other: SqlGeography) -> SqlBoolean: ...
    def STDistance(self, other: SqlGeography) -> SqlDouble: ...
    def STEndPoint(self) -> SqlGeography: ...
    def STEquals(self, other: SqlGeography) -> SqlBoolean: ...
    def STGeomCollFromText(geometryCollectionTaggedText: SqlChars, srid: int) -> SqlGeography: ...
    def STGeomCollFromWKB(wkbGeometryCollection: SqlBytes, srid: int) -> SqlGeography: ...
    def STGeometryN(self, n: int) -> SqlGeography: ...
    def STGeometryType(self) -> SqlString: ...
    def STGeomFromText(geometryTaggedText: SqlChars, srid: int) -> SqlGeography: ...
    def STGeomFromWKB(wkbGeometry: SqlBytes, srid: int) -> SqlGeography: ...
    def STIntersection(self, other: SqlGeography) -> SqlGeography: ...
    def STIntersects(self, other: SqlGeography) -> SqlBoolean: ...
    def STIsClosed(self) -> SqlBoolean: ...
    def STIsEmpty(self) -> SqlBoolean: ...
    def STIsValid(self) -> SqlBoolean: ...
    def STLength(self) -> SqlDouble: ...
    def STLineFromText(lineStringTaggedText: SqlChars, srid: int) -> SqlGeography: ...
    def STLineFromWKB(wkbLineString: SqlBytes, srid: int) -> SqlGeography: ...
    def STMLineFromText(multiLineStringTaggedText: SqlChars, srid: int) -> SqlGeography: ...
    def STMLineFromWKB(wkbMultiLineString: SqlBytes, srid: int) -> SqlGeography: ...
    def STMPointFromText(multiPointTaggedText: SqlChars, srid: int) -> SqlGeography: ...
    def STMPointFromWKB(wkbMultiPoint: SqlBytes, srid: int) -> SqlGeography: ...
    def STMPolyFromText(multiPolygonTaggedText: SqlChars, srid: int) -> SqlGeography: ...
    def STMPolyFromWKB(wkbMultiPolygon: SqlBytes, srid: int) -> SqlGeography: ...
    def STNumCurves(self) -> SqlInt32: ...
    def STNumGeometries(self) -> SqlInt32: ...
    def STNumPoints(self) -> SqlInt32: ...
    def STOverlaps(self, other: SqlGeography) -> SqlBoolean: ...
    def STPointFromText(pointTaggedText: SqlChars, srid: int) -> SqlGeography: ...
    def STPointFromWKB(wkbPoint: SqlBytes, srid: int) -> SqlGeography: ...
    def STPointN(self, n: int) -> SqlGeography: ...
    def STPolyFromText(polygonTaggedText: SqlChars, srid: int) -> SqlGeography: ...
    def STPolyFromWKB(wkbPolygon: SqlBytes, srid: int) -> SqlGeography: ...
    def STStartPoint(self) -> SqlGeography: ...
    def STSymDifference(self, other: SqlGeography) -> SqlGeography: ...
    def STUnion(self, other: SqlGeography) -> SqlGeography: ...
    def STWithin(self, other: SqlGeography) -> SqlBoolean: ...
    def ToString(self) -> str: ...
    def Write(self, w: BinaryWriter) -> None: ...


class SqlGeographyBuilder:
    def __init__(self): ...
    @overload
    def AddCircularArc(self, latitude1: float, longitude1: float, latitude2: float, longitude2: float) -> None: ...
    @overload
    def AddCircularArc(self, latitude1: float, longitude1: float, z1: Nullable, m1: Nullable, latitude2: float, longitude2: float, z2: Nullable, m2: Nullable) -> None: ...
    @overload
    def AddLine(self, latitude: float, longitude: float) -> None: ...
    @overload
    def AddLine(self, latitude: float, longitude: float, z: Nullable, m: Nullable) -> None: ...
    @overload
    def BeginFigure(self, latitude: float, longitude: float) -> None: ...
    @overload
    def BeginFigure(self, latitude: float, longitude: float, z: Nullable, m: Nullable) -> None: ...
    def BeginGeography(self, type: OpenGisGeographyType) -> None: ...
    def EndFigure(self) -> None: ...
    def EndGeography(self) -> None: ...
    @property
    def ConstructedGeography(self) -> SqlGeography: ...
    def SetSrid(self, srid: int) -> None: ...


class SqlGeometry:
    def __init__(self): ...
    def AsBinaryZM(self) -> SqlBytes: ...
    def AsGml(self) -> SqlXml: ...
    def AsTextZM(self) -> SqlChars: ...
    def BufferWithCurves(self, distance: float) -> SqlGeometry: ...
    def BufferWithTolerance(self, distance: float, tolerance: float, relative: bool) -> SqlGeometry: ...
    def CurveToLineWithTolerance(self, tolerance: float, relative: bool) -> SqlGeometry: ...
    def Deserialize(bytes: SqlBytes) -> SqlGeometry: ...
    def Filter(self, other: SqlGeometry) -> SqlBoolean: ...
    def GeomFromGml(xml: SqlXml, srid: int) -> SqlGeometry: ...
    @property
    def HasM(self) -> bool: ...
    @property
    def HasZ(self) -> bool: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def M(self) -> SqlDouble: ...
    @property
    def Null() -> SqlGeometry: ...
    @property
    def STSrid(self) -> SqlInt32: ...
    @property
    def STX(self) -> SqlDouble: ...
    @property
    def STY(self) -> SqlDouble: ...
    @property
    def Z(self) -> SqlDouble: ...
    def InstanceOf(self, geometryType: str) -> SqlBoolean: ...
    def IsValidDetailed(self) -> str: ...
    def MakeValid(self) -> SqlGeometry: ...
    def MinDbCompatibilityLevel(self) -> int: ...
    def Parse(s: SqlString) -> SqlGeometry: ...
    def Point(x: float, y: float, srid: int) -> SqlGeometry: ...
    def Populate(self, sink: IGeometrySink110) -> None: ...
    def Read(self, r: BinaryReader) -> None: ...
    def Reduce(self, tolerance: float) -> SqlGeometry: ...
    def Serialize(self) -> SqlBytes: ...
    @STSrid.setter
    def STSrid(self, value: SqlInt32) -> None: ...
    def ShortestLineTo(self, other: SqlGeometry) -> SqlGeometry: ...
    def STArea(self) -> SqlDouble: ...
    def STAsBinary(self) -> SqlBytes: ...
    def STAsText(self) -> SqlChars: ...
    def STBoundary(self) -> SqlGeometry: ...
    def STBuffer(self, distance: float) -> SqlGeometry: ...
    def STCentroid(self) -> SqlGeometry: ...
    def STContains(self, other: SqlGeometry) -> SqlBoolean: ...
    def STConvexHull(self) -> SqlGeometry: ...
    def STCrosses(self, other: SqlGeometry) -> SqlBoolean: ...
    def STCurveN(self, n: int) -> SqlGeometry: ...
    def STCurveToLine(self) -> SqlGeometry: ...
    def STDifference(self, other: SqlGeometry) -> SqlGeometry: ...
    def STDimension(self) -> SqlInt32: ...
    def STDisjoint(self, other: SqlGeometry) -> SqlBoolean: ...
    def STDistance(self, other: SqlGeometry) -> SqlDouble: ...
    def STEndPoint(self) -> SqlGeometry: ...
    def STEnvelope(self) -> SqlGeometry: ...
    def STEquals(self, other: SqlGeometry) -> SqlBoolean: ...
    def STExteriorRing(self) -> SqlGeometry: ...
    def STGeomCollFromText(geometryCollectionTaggedText: SqlChars, srid: int) -> SqlGeometry: ...
    def STGeomCollFromWKB(wkbGeometryCollection: SqlBytes, srid: int) -> SqlGeometry: ...
    def STGeometryN(self, n: int) -> SqlGeometry: ...
    def STGeometryType(self) -> SqlString: ...
    def STGeomFromText(geometryTaggedText: SqlChars, srid: int) -> SqlGeometry: ...
    def STGeomFromWKB(wkbGeometry: SqlBytes, srid: int) -> SqlGeometry: ...
    def STInteriorRingN(self, n: int) -> SqlGeometry: ...
    def STIntersection(self, other: SqlGeometry) -> SqlGeometry: ...
    def STIntersects(self, other: SqlGeometry) -> SqlBoolean: ...
    def STIsClosed(self) -> SqlBoolean: ...
    def STIsEmpty(self) -> SqlBoolean: ...
    def STIsRing(self) -> SqlBoolean: ...
    def STIsSimple(self) -> SqlBoolean: ...
    def STIsValid(self) -> SqlBoolean: ...
    def STLength(self) -> SqlDouble: ...
    def STLineFromText(lineStringTaggedText: SqlChars, srid: int) -> SqlGeometry: ...
    def STLineFromWKB(wkbLineString: SqlBytes, srid: int) -> SqlGeometry: ...
    def STMLineFromText(multiLineStringTaggedText: SqlChars, srid: int) -> SqlGeometry: ...
    def STMLineFromWKB(wkbMultiLineString: SqlBytes, srid: int) -> SqlGeometry: ...
    def STMPointFromText(multiPointTaggedText: SqlChars, srid: int) -> SqlGeometry: ...
    def STMPointFromWKB(wkbMultiPoint: SqlBytes, srid: int) -> SqlGeometry: ...
    def STMPolyFromText(multiPolygonTaggedText: SqlChars, srid: int) -> SqlGeometry: ...
    def STMPolyFromWKB(wkbMultiPolygon: SqlBytes, srid: int) -> SqlGeometry: ...
    def STNumCurves(self) -> SqlInt32: ...
    def STNumGeometries(self) -> SqlInt32: ...
    def STNumInteriorRing(self) -> SqlInt32: ...
    def STNumPoints(self) -> SqlInt32: ...
    def STOverlaps(self, other: SqlGeometry) -> SqlBoolean: ...
    def STPointFromText(pointTaggedText: SqlChars, srid: int) -> SqlGeometry: ...
    def STPointFromWKB(wkbPoint: SqlBytes, srid: int) -> SqlGeometry: ...
    def STPointN(self, n: int) -> SqlGeometry: ...
    def STPointOnSurface(self) -> SqlGeometry: ...
    def STPolyFromText(polygonTaggedText: SqlChars, srid: int) -> SqlGeometry: ...
    def STPolyFromWKB(wkbPolygon: SqlBytes, srid: int) -> SqlGeometry: ...
    def STRelate(self, other: SqlGeometry, intersectionPatternMatrix: str) -> SqlBoolean: ...
    def STStartPoint(self) -> SqlGeometry: ...
    def STSymDifference(self, other: SqlGeometry) -> SqlGeometry: ...
    def STTouches(self, other: SqlGeometry) -> SqlBoolean: ...
    def STUnion(self, other: SqlGeometry) -> SqlGeometry: ...
    def STWithin(self, other: SqlGeometry) -> SqlBoolean: ...
    def ToString(self) -> str: ...
    def Write(self, w: BinaryWriter) -> None: ...


class SqlGeometryBuilder:
    def __init__(self): ...
    @overload
    def AddCircularArc(self, x1: float, y1: float, x2: float, y2: float) -> None: ...
    @overload
    def AddCircularArc(self, x1: float, y1: float, z1: Nullable, m1: Nullable, x2: float, y2: float, z2: Nullable, m2: Nullable) -> None: ...
    @overload
    def AddLine(self, x: float, y: float) -> None: ...
    @overload
    def AddLine(self, x: float, y: float, z: Nullable, m: Nullable) -> None: ...
    @overload
    def BeginFigure(self, x: float, y: float) -> None: ...
    @overload
    def BeginFigure(self, x: float, y: float, z: Nullable, m: Nullable) -> None: ...
    def BeginGeometry(self, type: OpenGisGeometryType) -> None: ...
    def EndFigure(self) -> None: ...
    def EndGeometry(self) -> None: ...
    @property
    def ConstructedGeometry(self) -> SqlGeometry: ...
    def SetSrid(self, srid: int) -> None: ...


class SqlHierarchyId:
    @overload
    def CompareTo(self, hid: SqlHierarchyId) -> int: ...
    @overload
    def CompareTo(self, obj: Object) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Null() -> SqlHierarchyId: ...
    def GetAncestor(self, n: int) -> SqlHierarchyId: ...
    def GetDescendant(self, child1: SqlHierarchyId, child2: SqlHierarchyId) -> SqlHierarchyId: ...
    def GetHashCode(self) -> int: ...
    def GetLevel(self) -> SqlInt16: ...
    def GetReparentedValue(self, oldRoot: SqlHierarchyId, newRoot: SqlHierarchyId) -> SqlHierarchyId: ...
    def GetRoot() -> SqlHierarchyId: ...
    def IsDescendantOf(self, parent: SqlHierarchyId) -> SqlBoolean: ...
    def op_Equality(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def op_GreaterThan(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def op_Inequality(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def op_LessThan(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def op_LessThanOrEqual(hid1: SqlHierarchyId, hid2: SqlHierarchyId) -> SqlBoolean: ...
    def Parse(input: SqlString) -> SqlHierarchyId: ...
    def Read(self, r: BinaryReader) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, w: BinaryWriter) -> None: ...


class ValidityState:
    Valid = 0
    InvalidUnknown = 1
    InvalidIsolatedPoint = 2
    InvalidRingOverlap = 3
    InvalidSplitRing = 4
    InvalidDegeneratesToPoint = 5
    InvalidDegeneratePolygon = 6
    InvalidOpenRing = 7
    InvalidRedundantRing = 8
    InvalidInconsistentOrientation = 9
    InvalidExteriorRing = 10
    InvalidRingOutOfPlace = 11
    InvalidEdgeOverlap = 12
    InvalidPolygon = 13
    InvalidAntipodalEdge = 14
