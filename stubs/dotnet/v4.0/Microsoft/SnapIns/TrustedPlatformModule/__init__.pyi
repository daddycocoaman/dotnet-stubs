from typing import Tuple, Set, Iterable, List


class BlockNewCommandForm(MirroredForm):
    def __init__(self, showPolicyWarning: bool): ...
    @property
    def CommandNumber(self) -> UInt32: ...


class CommandManagementScopeNode(ScopeNode):
    def __init__(self): ...
    def add_Refreshed(self, value: EventHandler) -> None: ...
    def remove_Refreshed(self, value: EventHandler) -> None: ...


class ComputerNotAvailableException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class EnhancedPanel:
    def __init__(self): ...


class EnhancedTableLayoutPanel(MirroredTableLayoutPanel):
    def __init__(self): ...


class HeaderPanel:
    def __init__(self): ...


class MirroredForm:
    def __init__(self): ...


class MirroredPanel:
    def __init__(self): ...


class MirroredTableLayoutPanel:
    def __init__(self): ...


class NativeMethods:
    pass


class OverviewView(FormView):
    def __init__(self): ...
    def EndRefreshing(self) -> None: ...


class RefreshableMessageView(MessageView):
    def __init__(self): ...


class TpmWmiObject:
    def ClearTpmObject() -> None: ...
    @property
    def MachineName() -> str: ...
    @property
    def tpm() -> TrustedPlatformModuleWmi: ...
    @MachineName.setter
    def MachineName(value: str) -> None: ...


class TrustedPlatformModuleManagement(SnapIn):
    def __init__(self): ...
    @property
    def MachineName(self) -> str: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...


class TrustedPlatformModuleManagementInstaller(SnapInInstaller):
    def __init__(self): ...


class TrustedPlatformModuleManagementScopeNode(ScopeNode):
    def __init__(self): ...
    def add_Refreshed(self, value: EventHandler) -> None: ...
    def remove_Refreshed(self, value: EventHandler) -> None: ...


class TrustedPlatformModuleNotPresentException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class TrustedPlatformModuleWmi:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, machineName: str): ...
    def AddBlockedCommand(self, commandOrdinal: UInt32) -> None: ...
    @property
    def IsActivated(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def IsInReducedFunctionality(self) -> bool: ...
    @property
    def IsLockedOut(self) -> bool: ...
    @property
    def IsOwned(self) -> bool: ...
    @property
    def IsReady(self) -> bool: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def ManufacturerId(self) -> str: ...
    @property
    def ManufacturerVersion(self) -> str: ...
    @property
    def ManufacturerVersion20Complete(self) -> str: ...
    @property
    def PhysicalPresenceVersionInfo(self) -> str: ...
    @property
    def ReducedFunctionalityFlags(self) -> UInt32: ...
    @property
    def SpecVersion(self) -> str: ...
    def GetLockoutHealTime(self) -> UInt32: ...
    def GetManufacturerId(self) -> str: ...
    def GetTpm20FirmwareVersion(self) -> str: ...
    def IsCommandBlocked(self, commandOrdinal: UInt32) -> UInt32: ...
    def IsCommandPresent(self, commandOrdinal: UInt32) -> bool: ...
    def RemoveBlockedCommand(self, commandOrdinal: UInt32) -> None: ...


class Utils:
    def PublishWnfStateData(state: WnfStateName, data: Set(Byte)) -> UInt32: ...
    def QueryWnfStateData(state: WnfStateName, bufferSize: UInt32) -> Tuple[UInt32, Set(Byte)]: ...


class WmiException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, errorCode: UInt32): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, errorCode: UInt32): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @property
    def ErrorCode(self) -> UInt32: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @ErrorCode.setter
    def ErrorCode(self, value: UInt32) -> None: ...


class WnfStateName:
    def __init__(self, content: Set(UInt32)): ...
