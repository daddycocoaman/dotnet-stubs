from typing import Tuple, Set, Iterable, List


class CounterFileInfo:
    @property
    def NewestRecord(self) -> DateTime: ...
    @property
    def OldestRecord(self) -> DateTime: ...
    @property
    def SampleCount(self) -> UInt32: ...


class CounterSet:
    @property
    def CounterSetName(self) -> str: ...
    @property
    def CounterSetType(self) -> PerformanceCounterCategoryType: ...
    @property
    def Description(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def Paths(self) -> StringCollection: ...
    @property
    def PathsWithInstances(self) -> StringCollection: ...


class PerformanceCounterSample:
    @property
    def CookedValue(self) -> float: ...
    @property
    def CounterType(self) -> PerformanceCounterType: ...
    @property
    def DefaultScale(self) -> UInt32: ...
    @property
    def InstanceName(self) -> str: ...
    @property
    def MultipleCount(self) -> UInt32: ...
    @property
    def Path(self) -> str: ...
    @property
    def RawValue(self) -> UInt64: ...
    @property
    def SecondValue(self) -> UInt64: ...
    @property
    def Status(self) -> UInt32: ...
    @property
    def TimeBase(self) -> UInt64: ...
    @property
    def Timestamp(self) -> DateTime: ...
    @property
    def Timestamp100NSec(self) -> UInt64: ...
    @CookedValue.setter
    def CookedValue(self, value: float) -> None: ...
    @CounterType.setter
    def CounterType(self, value: PerformanceCounterType) -> None: ...
    @DefaultScale.setter
    def DefaultScale(self, value: UInt32) -> None: ...
    @InstanceName.setter
    def InstanceName(self, value: str) -> None: ...
    @MultipleCount.setter
    def MultipleCount(self, value: UInt32) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @RawValue.setter
    def RawValue(self, value: UInt64) -> None: ...
    @SecondValue.setter
    def SecondValue(self, value: UInt64) -> None: ...
    @Status.setter
    def Status(self, value: UInt32) -> None: ...
    @TimeBase.setter
    def TimeBase(self, value: UInt64) -> None: ...
    @Timestamp.setter
    def Timestamp(self, value: DateTime) -> None: ...
    @Timestamp100NSec.setter
    def Timestamp100NSec(self, value: UInt64) -> None: ...


class PerformanceCounterSampleSet:
    @property
    def CounterSamples(self) -> Set(PerformanceCounterSample): ...
    @property
    def Timestamp(self) -> DateTime: ...
    @CounterSamples.setter
    def CounterSamples(self, value: Set(PerformanceCounterSample)) -> None: ...
    @Timestamp.setter
    def Timestamp(self, value: DateTime) -> None: ...
