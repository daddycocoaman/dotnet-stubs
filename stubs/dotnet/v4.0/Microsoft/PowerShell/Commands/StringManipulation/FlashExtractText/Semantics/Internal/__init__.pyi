from typing import Tuple, Set, Iterable, List


class CachedList:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, l: Iterable[PositionMatch]): ...
    def BinarySearchForFirstGreaterOrEqual(self, key: UInt32) -> int: ...
    def BinarySearchForFirstLessThanOrEqual(self, key: UInt32) -> int: ...
    def GetValues(self, start: UInt32, end: UInt32) -> Tuple: ...


class PositionMatch:
    def __init__(self, p: UInt32, l: UInt32): ...
    @overload
    def Equals(self, other: PositionMatch) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(positionMatchA: PositionMatch, positionMatchB: PositionMatch) -> bool: ...
    def op_Inequality(positionMatchA: PositionMatch, positionMatchB: PositionMatch) -> bool: ...


class RegularExpression:
    def __init__(self, regExp1: Token, regExp2: Token, regExp3: Token, exampleCount: int): ...
    @overload
    def Create(exampleCount: int) -> RegularExpression: ...
    @overload
    def Create(re: Token, regularExpressionList: RegularExpression) -> RegularExpression: ...
    @overload
    def Create(token: Token, exampleCount: int) -> RegularExpression: ...
    @overload
    def Create(regex: RegularExpression, re: Token) -> RegularExpression: ...
    @overload
    def Create(token1: Token, token2: Token, exampleCount: int) -> RegularExpression: ...
    @overload
    def Create(token1: Token, token2: Token, token3: Token, exampleCount: int) -> RegularExpression: ...
    def Equals(self, other: Object) -> bool: ...
    @property
    def Display(self) -> str: ...
    @property
    def Item(self, i: int) -> Token: ...
    @property
    def Regex(self) -> Regex: ...
    @property
    def Score(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def LeftMatchesAt(self, context: SynthesisContext, position: UInt32, start: UInt32, end: UInt32) -> bool: ...
    @overload
    def MatchesAt(self, context: SynthesisContext, position: UInt32) -> bool: ...
    @overload
    def MatchesAt(self, context: SynthesisContext, position: UInt32, start: UInt32, end: UInt32) -> bool: ...
    def Render(self) -> str: ...
    def RenderXml(self) -> XElement: ...
    @overload
    def Run(self, range: Tuple) -> List: ...
    @overload
    def Run(self, context: SynthesisContext) -> List: ...
    @overload
    def Run(self, context: SynthesisContext, start: UInt32, end: UInt32) -> List: ...
    def ToRegexJsonArray(self) -> Set(str): ...
    def ToRegexString(self) -> str: ...
    def ToString(self) -> str: ...
    def TryParse(literal: str) -> RegularExpression: ...


class SynthesisContext:
    def __init__(self, s: str): ...
    def AddStaticToken(token: Token) -> None: ...
    @property
    def Content(self) -> str: ...
    @property
    def EndPosition(self) -> UInt32: ...
    @property
    def FieldRegex(self) -> RegularExpression: ...
    @property
    def InputEndIsPrecise(self) -> bool: ...
    @property
    def InputStartIsPrecise(self) -> bool: ...
    @property
    def PrefixFieldRegex(self) -> RegularExpression: ...
    @property
    def StartPosition(self) -> UInt32: ...
    @property
    def SuffixFieldRegex(self) -> RegularExpression: ...
    def GetStaticTokenByName(name: str) -> Token: ...
    def InitializeLearningContext(self, examples: List, inputStartIsPrecise: bool, inputEndIsPrecise: bool, prefixRegex: Regex, contentRegex: Regex, suffixRegex: Regex) -> None: ...
    def TryGetAllMatchesEndingAt(self, pos: UInt32) -> Tuple[bool, Dictionary]: ...
    def TryGetAllMatchesStartingAt(self, pos: UInt32) -> Tuple[bool, Dictionary]: ...
    def TryGetMatchPositionsFor(self, token: Token) -> Tuple[bool, CachedList]: ...
    def TryGetTokenMatchEndingAt(self, pos: UInt32, token: Token) -> Tuple[bool, TokenMatch]: ...
    def TryGetTokenMatchStartingAt(self, pos: UInt32, token: Token) -> Tuple[bool, TokenMatch]: ...


class Token:
    def __init__(self, regex: Regex, name: str, score: int, isSymbol: bool): ...
    def CompareTo(self, other: Token) -> int: ...
    @overload
    def Equals(self, other: Token) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Display(self) -> str: ...
    @property
    def IsDynamicToken(self) -> bool: ...
    @property
    def IsSymbol(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Regex(self) -> Regex: ...
    @property
    def Score(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: Token, right: Token) -> bool: ...
    def op_Inequality(left: Token, right: Token) -> bool: ...
    def ToString(self) -> str: ...
    def ToXml(self) -> XElement: ...
    def TryParse(xml: XElement) -> Token: ...


class TokenMatch:
    def __init__(self, t: Token, l: UInt32): ...
    @overload
    def Equals(self, other: TokenMatch) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: TokenMatch, right: TokenMatch) -> bool: ...
    def op_Inequality(left: TokenMatch, right: TokenMatch) -> bool: ...
