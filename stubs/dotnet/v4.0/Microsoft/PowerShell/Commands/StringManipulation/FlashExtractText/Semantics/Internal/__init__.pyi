from typing import Tuple, Set, Iterable, List


class SynthesisContext:
    def __init__(self, s: str): ...
    def AddStaticToken(token: Token) -> None: ...
    @property
    def Content(self) -> str: ...
    @property
    def EndPosition(self) -> UInt32: ...
    @property
    def FieldRegex(self) -> RegularExpression: ...
    @property
    def InputEndIsPrecise(self) -> bool: ...
    @property
    def InputStartIsPrecise(self) -> bool: ...
    @property
    def PrefixFieldRegex(self) -> RegularExpression: ...
    @property
    def StartPosition(self) -> UInt32: ...
    @property
    def SuffixFieldRegex(self) -> RegularExpression: ...
    def GetStaticTokenByName(name: str) -> Token: ...
    def InitializeLearningContext(self, examples: List, inputStartIsPrecise: bool, inputEndIsPrecise: bool, prefixRegex: Regex, contentRegex: Regex, suffixRegex: Regex) -> None: ...
    def TryGetAllMatchesEndingAt(self, pos: UInt32) -> Tuple[bool, Dictionary]: ...
    def TryGetAllMatchesStartingAt(self, pos: UInt32) -> Tuple[bool, Dictionary]: ...
    def TryGetMatchPositionsFor(self, token: Token) -> Tuple[bool, CachedList]: ...
    def TryGetTokenMatchEndingAt(self, pos: UInt32, token: Token) -> Tuple[bool, TokenMatch]: ...
    def TryGetTokenMatchStartingAt(self, pos: UInt32, token: Token) -> Tuple[bool, TokenMatch]: ...
