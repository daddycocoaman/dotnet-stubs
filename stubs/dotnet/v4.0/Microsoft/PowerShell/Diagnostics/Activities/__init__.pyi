from typing import Tuple, Set, Iterable, List


class ExportCounter(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Circular(self) -> InArgument: ...
    @property
    def FileFormat(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def MaxSize(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Circular.setter
    def Circular(self, value: InArgument) -> None: ...
    @FileFormat.setter
    def FileFormat(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @MaxSize.setter
    def MaxSize(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class GetCounter(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Continuous(self) -> InArgument: ...
    @property
    def Counter(self) -> InArgument: ...
    @property
    def ListSet(self) -> InArgument: ...
    @property
    def MaxSamples(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SampleInterval(self) -> InArgument: ...
    @Continuous.setter
    def Continuous(self, value: InArgument) -> None: ...
    @Counter.setter
    def Counter(self, value: InArgument) -> None: ...
    @ListSet.setter
    def ListSet(self, value: InArgument) -> None: ...
    @MaxSamples.setter
    def MaxSamples(self, value: InArgument) -> None: ...
    @SampleInterval.setter
    def SampleInterval(self, value: InArgument) -> None: ...


class GetWinEvent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def FilterHashtable(self) -> InArgument: ...
    @property
    def FilterXml(self) -> InArgument: ...
    @property
    def FilterXPath(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def ListLog(self) -> InArgument: ...
    @property
    def ListProvider(self) -> InArgument: ...
    @property
    def LogName(self) -> InArgument: ...
    @property
    def MaxEvents(self) -> InArgument: ...
    @property
    def Oldest(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def ProviderName(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @FilterHashtable.setter
    def FilterHashtable(self, value: InArgument) -> None: ...
    @FilterXml.setter
    def FilterXml(self, value: InArgument) -> None: ...
    @FilterXPath.setter
    def FilterXPath(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @ListLog.setter
    def ListLog(self, value: InArgument) -> None: ...
    @ListProvider.setter
    def ListProvider(self, value: InArgument) -> None: ...
    @LogName.setter
    def LogName(self, value: InArgument) -> None: ...
    @MaxEvents.setter
    def MaxEvents(self, value: InArgument) -> None: ...
    @Oldest.setter
    def Oldest(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @ProviderName.setter
    def ProviderName(self, value: InArgument) -> None: ...


class ImportCounter(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Counter(self) -> InArgument: ...
    @property
    def EndTime(self) -> InArgument: ...
    @property
    def ListSet(self) -> InArgument: ...
    @property
    def MaxSamples(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def StartTime(self) -> InArgument: ...
    @property
    def Summary(self) -> InArgument: ...
    @Counter.setter
    def Counter(self, value: InArgument) -> None: ...
    @EndTime.setter
    def EndTime(self, value: InArgument) -> None: ...
    @ListSet.setter
    def ListSet(self, value: InArgument) -> None: ...
    @MaxSamples.setter
    def MaxSamples(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @StartTime.setter
    def StartTime(self, value: InArgument) -> None: ...
    @Summary.setter
    def Summary(self, value: InArgument) -> None: ...


class NewWinEvent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Payload(self) -> InArgument: ...
    @property
    def ProviderName(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Version(self) -> InArgument: ...
    @property
    def WinEventId(self) -> InArgument: ...
    @Payload.setter
    def Payload(self, value: InArgument) -> None: ...
    @ProviderName.setter
    def ProviderName(self, value: InArgument) -> None: ...
    @Version.setter
    def Version(self, value: InArgument) -> None: ...
    @WinEventId.setter
    def WinEventId(self, value: InArgument) -> None: ...
