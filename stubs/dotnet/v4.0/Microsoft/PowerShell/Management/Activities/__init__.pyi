from typing import Tuple, Set, Iterable, List


class AddComputer(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def DomainName(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def LocalCredential(self) -> InArgument: ...
    @property
    def NewName(self) -> InArgument: ...
    @property
    def Options(self) -> InArgument: ...
    @property
    def OUPath(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Restart(self) -> InArgument: ...
    @property
    def Server(self) -> InArgument: ...
    @property
    def UnjoinDomainCredential(self) -> InArgument: ...
    @property
    def Unsecure(self) -> InArgument: ...
    @property
    def WorkgroupName(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @DomainName.setter
    def DomainName(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @LocalCredential.setter
    def LocalCredential(self, value: InArgument) -> None: ...
    @NewName.setter
    def NewName(self, value: InArgument) -> None: ...
    @Options.setter
    def Options(self, value: InArgument) -> None: ...
    @OUPath.setter
    def OUPath(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Restart.setter
    def Restart(self, value: InArgument) -> None: ...
    @Server.setter
    def Server(self, value: InArgument) -> None: ...
    @UnjoinDomainCredential.setter
    def UnjoinDomainCredential(self, value: InArgument) -> None: ...
    @Unsecure.setter
    def Unsecure(self, value: InArgument) -> None: ...
    @WorkgroupName.setter
    def WorkgroupName(self, value: InArgument) -> None: ...


class AddContent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Encoding(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def NoNewline(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Stream(self) -> InArgument: ...
    @property
    def Value(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Encoding.setter
    def Encoding(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @NoNewline.setter
    def NoNewline(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Stream.setter
    def Stream(self, value: InArgument) -> None: ...
    @Value.setter
    def Value(self, value: InArgument) -> None: ...


class CheckpointComputer(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Description(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def RestorePointType(self) -> InArgument: ...
    @Description.setter
    def Description(self, value: InArgument) -> None: ...
    @RestorePointType.setter
    def RestorePointType(self, value: InArgument) -> None: ...


class ClearContent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Stream(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Stream.setter
    def Stream(self, value: InArgument) -> None: ...


class ClearEventLog(PSRemotingActivity):
    def __init__(self): ...
    @property
    def LogName(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @LogName.setter
    def LogName(self, value: InArgument) -> None: ...


class ClearItem(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class ClearItemProperty(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class ClearRecycleBin(PSRemotingActivity):
    def __init__(self): ...
    @property
    def DriveLetter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @DriveLetter.setter
    def DriveLetter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...


class ConvertPath(PSActivity):
    def __init__(self): ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class CopyItem(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Container(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Destination(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def FromSession(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Recurse(self) -> InArgument: ...
    @property
    def ToSession(self) -> InArgument: ...
    @Container.setter
    def Container(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Destination.setter
    def Destination(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @FromSession.setter
    def FromSession(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Recurse.setter
    def Recurse(self, value: InArgument) -> None: ...
    @ToSession.setter
    def ToSession(self, value: InArgument) -> None: ...


class CopyItemProperty(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Destination(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Destination.setter
    def Destination(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class DisableComputerRestore(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Drive(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Drive.setter
    def Drive(self, value: InArgument) -> None: ...


class EnableComputerRestore(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Drive(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Drive.setter
    def Drive(self, value: InArgument) -> None: ...


class GetChildItem(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Attributes(self) -> InArgument: ...
    @property
    def Depth(self) -> InArgument: ...
    @property
    def Directory(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def File(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Hidden(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ReadOnly(self) -> InArgument: ...
    @property
    def Recurse(self) -> InArgument: ...
    @property
    def System(self) -> InArgument: ...
    @Attributes.setter
    def Attributes(self, value: InArgument) -> None: ...
    @Depth.setter
    def Depth(self, value: InArgument) -> None: ...
    @Directory.setter
    def Directory(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @File.setter
    def File(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Hidden.setter
    def Hidden(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: InArgument) -> None: ...
    @Recurse.setter
    def Recurse(self, value: InArgument) -> None: ...
    @System.setter
    def System(self, value: InArgument) -> None: ...


class GetComputerRestorePoint(PSRemotingActivity):
    def __init__(self): ...
    @property
    def LastStatus(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def RestorePoint(self) -> InArgument: ...
    @LastStatus.setter
    def LastStatus(self, value: InArgument) -> None: ...
    @RestorePoint.setter
    def RestorePoint(self, value: InArgument) -> None: ...


class GetContent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Delimiter(self) -> InArgument: ...
    @property
    def Encoding(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Raw(self) -> InArgument: ...
    @property
    def ReadCount(self) -> InArgument: ...
    @property
    def Stream(self) -> InArgument: ...
    @property
    def Tail(self) -> InArgument: ...
    @property
    def TotalCount(self) -> InArgument: ...
    @property
    def Wait(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Delimiter.setter
    def Delimiter(self, value: InArgument) -> None: ...
    @Encoding.setter
    def Encoding(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Raw.setter
    def Raw(self, value: InArgument) -> None: ...
    @ReadCount.setter
    def ReadCount(self, value: InArgument) -> None: ...
    @Stream.setter
    def Stream(self, value: InArgument) -> None: ...
    @Tail.setter
    def Tail(self, value: InArgument) -> None: ...
    @TotalCount.setter
    def TotalCount(self, value: InArgument) -> None: ...
    @Wait.setter
    def Wait(self, value: InArgument) -> None: ...


class GetEventLog(PSRemotingActivity):
    def __init__(self): ...
    @property
    def After(self) -> InArgument: ...
    @property
    def AsBaseObject(self) -> InArgument: ...
    @property
    def AsString(self) -> InArgument: ...
    @property
    def Before(self) -> InArgument: ...
    @property
    def EntryType(self) -> InArgument: ...
    @property
    def Index(self) -> InArgument: ...
    @property
    def InstanceId(self) -> InArgument: ...
    @property
    def List(self) -> InArgument: ...
    @property
    def LogName(self) -> InArgument: ...
    @property
    def Message(self) -> InArgument: ...
    @property
    def Newest(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Source(self) -> InArgument: ...
    @property
    def UserName(self) -> InArgument: ...
    @After.setter
    def After(self, value: InArgument) -> None: ...
    @AsBaseObject.setter
    def AsBaseObject(self, value: InArgument) -> None: ...
    @AsString.setter
    def AsString(self, value: InArgument) -> None: ...
    @Before.setter
    def Before(self, value: InArgument) -> None: ...
    @EntryType.setter
    def EntryType(self, value: InArgument) -> None: ...
    @Index.setter
    def Index(self, value: InArgument) -> None: ...
    @InstanceId.setter
    def InstanceId(self, value: InArgument) -> None: ...
    @List.setter
    def List(self, value: InArgument) -> None: ...
    @LogName.setter
    def LogName(self, value: InArgument) -> None: ...
    @Message.setter
    def Message(self, value: InArgument) -> None: ...
    @Newest.setter
    def Newest(self, value: InArgument) -> None: ...
    @Source.setter
    def Source(self, value: InArgument) -> None: ...
    @UserName.setter
    def UserName(self, value: InArgument) -> None: ...


class GetHotFix(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Description(self) -> InArgument: ...
    @property
    def HotFixId(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Description.setter
    def Description(self, value: InArgument) -> None: ...
    @HotFixId.setter
    def HotFixId(self, value: InArgument) -> None: ...


class GetItem(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Stream(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Stream.setter
    def Stream(self, value: InArgument) -> None: ...


class GetItemProperty(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class GetItemPropertyValue(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class GetLocation(PSRemotingActivity):
    def __init__(self): ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def PSDrive(self) -> InArgument: ...
    @property
    def PSProvider(self) -> InArgument: ...
    @property
    def Stack(self) -> InArgument: ...
    @property
    def StackName(self) -> InArgument: ...
    @PSDrive.setter
    def PSDrive(self, value: InArgument) -> None: ...
    @PSProvider.setter
    def PSProvider(self, value: InArgument) -> None: ...
    @Stack.setter
    def Stack(self, value: InArgument) -> None: ...
    @StackName.setter
    def StackName(self, value: InArgument) -> None: ...


class GetProcess(PSRemotingActivity):
    def __init__(self): ...
    @property
    def FileVersionInfo(self) -> InArgument: ...
    @property
    def IncludeUserName(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Module(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def ProcessId(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @FileVersionInfo.setter
    def FileVersionInfo(self, value: InArgument) -> None: ...
    @IncludeUserName.setter
    def IncludeUserName(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Module.setter
    def Module(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @ProcessId.setter
    def ProcessId(self, value: InArgument) -> None: ...


class GetPSDrive(PSRemotingActivity):
    def __init__(self): ...
    @property
    def LiteralName(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def PSProvider(self) -> InArgument: ...
    @property
    def Scope(self) -> InArgument: ...
    @LiteralName.setter
    def LiteralName(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PSProvider.setter
    def PSProvider(self, value: InArgument) -> None: ...
    @Scope.setter
    def Scope(self, value: InArgument) -> None: ...


class GetPSProvider(PSRemotingActivity):
    def __init__(self): ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def PSProvider(self) -> InArgument: ...
    @PSProvider.setter
    def PSProvider(self, value: InArgument) -> None: ...


class GetService(PSRemotingActivity):
    def __init__(self): ...
    @property
    def DependentServices(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def RequiredServices(self) -> InArgument: ...
    @property
    def ServiceDisplayName(self) -> InArgument: ...
    @DependentServices.setter
    def DependentServices(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @RequiredServices.setter
    def RequiredServices(self, value: InArgument) -> None: ...
    @ServiceDisplayName.setter
    def ServiceDisplayName(self, value: InArgument) -> None: ...


class InvokeItem(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class JoinPath(PSRemotingActivity):
    def __init__(self): ...
    @property
    def ChildPath(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Resolve(self) -> InArgument: ...
    @ChildPath.setter
    def ChildPath(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Resolve.setter
    def Resolve(self, value: InArgument) -> None: ...


class LimitEventLog(PSRemotingActivity):
    def __init__(self): ...
    @property
    def LogName(self) -> InArgument: ...
    @property
    def MaximumSize(self) -> InArgument: ...
    @property
    def OverflowAction(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def RetentionDays(self) -> InArgument: ...
    @LogName.setter
    def LogName(self, value: InArgument) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: InArgument) -> None: ...
    @OverflowAction.setter
    def OverflowAction(self, value: InArgument) -> None: ...
    @RetentionDays.setter
    def RetentionDays(self, value: InArgument) -> None: ...


class MoveItem(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Destination(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Destination.setter
    def Destination(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class MoveItemProperty(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Destination(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Destination.setter
    def Destination(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class NewEventLog(PSRemotingActivity):
    def __init__(self): ...
    @property
    def CategoryResourceFile(self) -> InArgument: ...
    @property
    def LogName(self) -> InArgument: ...
    @property
    def MessageResourceFile(self) -> InArgument: ...
    @property
    def ParameterResourceFile(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Source(self) -> InArgument: ...
    @CategoryResourceFile.setter
    def CategoryResourceFile(self, value: InArgument) -> None: ...
    @LogName.setter
    def LogName(self, value: InArgument) -> None: ...
    @MessageResourceFile.setter
    def MessageResourceFile(self, value: InArgument) -> None: ...
    @ParameterResourceFile.setter
    def ParameterResourceFile(self, value: InArgument) -> None: ...
    @Source.setter
    def Source(self, value: InArgument) -> None: ...


class NewItem(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def ItemType(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Value(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @ItemType.setter
    def ItemType(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Value.setter
    def Value(self, value: InArgument) -> None: ...


class NewItemProperty(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PropertyType(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Value(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @PropertyType.setter
    def PropertyType(self, value: InArgument) -> None: ...
    @Value.setter
    def Value(self, value: InArgument) -> None: ...


class NewService(PSRemotingActivity):
    def __init__(self): ...
    @property
    def BinaryPathName(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def DependsOn(self) -> InArgument: ...
    @property
    def Description(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ServiceDisplayName(self) -> InArgument: ...
    @property
    def StartupType(self) -> InArgument: ...
    @BinaryPathName.setter
    def BinaryPathName(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @DependsOn.setter
    def DependsOn(self, value: InArgument) -> None: ...
    @Description.setter
    def Description(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @ServiceDisplayName.setter
    def ServiceDisplayName(self, value: InArgument) -> None: ...
    @StartupType.setter
    def StartupType(self, value: InArgument) -> None: ...


class NewWebServiceProxy(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Class(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Namespace(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Uri(self) -> InArgument: ...
    @property
    def UseDefaultCredential(self) -> InArgument: ...
    @Class.setter
    def Class(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Namespace.setter
    def Namespace(self, value: InArgument) -> None: ...
    @Uri.setter
    def Uri(self, value: InArgument) -> None: ...
    @UseDefaultCredential.setter
    def UseDefaultCredential(self, value: InArgument) -> None: ...


class RegisterWmiEvent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Action(self) -> InArgument: ...
    @property
    def Class(self) -> InArgument: ...
    @property
    def ComputerName(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Forward(self) -> InArgument: ...
    @property
    def MaxTriggerCount(self) -> InArgument: ...
    @property
    def MessageData(self) -> InArgument: ...
    @property
    def Namespace(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Query(self) -> InArgument: ...
    @property
    def SourceIdentifier(self) -> InArgument: ...
    @property
    def SupportEvent(self) -> InArgument: ...
    @property
    def Timeout(self) -> InArgument: ...
    @Action.setter
    def Action(self, value: InArgument) -> None: ...
    @Class.setter
    def Class(self, value: InArgument) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Forward.setter
    def Forward(self, value: InArgument) -> None: ...
    @MaxTriggerCount.setter
    def MaxTriggerCount(self, value: InArgument) -> None: ...
    @MessageData.setter
    def MessageData(self, value: InArgument) -> None: ...
    @Namespace.setter
    def Namespace(self, value: InArgument) -> None: ...
    @Query.setter
    def Query(self, value: InArgument) -> None: ...
    @SourceIdentifier.setter
    def SourceIdentifier(self, value: InArgument) -> None: ...
    @SupportEvent.setter
    def SupportEvent(self, value: InArgument) -> None: ...
    @Timeout.setter
    def Timeout(self, value: InArgument) -> None: ...


class RemoveComputer(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def LocalCredential(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Restart(self) -> InArgument: ...
    @property
    def UnjoinDomainCredential(self) -> InArgument: ...
    @property
    def WorkgroupName(self) -> InArgument: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @LocalCredential.setter
    def LocalCredential(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Restart.setter
    def Restart(self, value: InArgument) -> None: ...
    @UnjoinDomainCredential.setter
    def UnjoinDomainCredential(self, value: InArgument) -> None: ...
    @WorkgroupName.setter
    def WorkgroupName(self, value: InArgument) -> None: ...


class RemoveEventLog(PSRemotingActivity):
    def __init__(self): ...
    @property
    def LogName(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Source(self) -> InArgument: ...
    @LogName.setter
    def LogName(self, value: InArgument) -> None: ...
    @Source.setter
    def Source(self, value: InArgument) -> None: ...


class RemoveItem(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Recurse(self) -> InArgument: ...
    @property
    def Stream(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Recurse.setter
    def Recurse(self, value: InArgument) -> None: ...
    @Stream.setter
    def Stream(self, value: InArgument) -> None: ...


class RemoveItemProperty(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class RemoveWmiObject(PSRemotingActivity):
    def __init__(self): ...
    @property
    def AsJob(self) -> InArgument: ...
    @property
    def Authentication(self) -> InArgument: ...
    @property
    def Authority(self) -> InArgument: ...
    @property
    def Class(self) -> InArgument: ...
    @property
    def ComputerName(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def EnableAllPrivileges(self) -> InArgument: ...
    @property
    def Impersonation(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Locale(self) -> InArgument: ...
    @property
    def Namespace(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ThrottleLimit(self) -> InArgument: ...
    @AsJob.setter
    def AsJob(self, value: InArgument) -> None: ...
    @Authentication.setter
    def Authentication(self, value: InArgument) -> None: ...
    @Authority.setter
    def Authority(self, value: InArgument) -> None: ...
    @Class.setter
    def Class(self, value: InArgument) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @EnableAllPrivileges.setter
    def EnableAllPrivileges(self, value: InArgument) -> None: ...
    @Impersonation.setter
    def Impersonation(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Locale.setter
    def Locale(self, value: InArgument) -> None: ...
    @Namespace.setter
    def Namespace(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @ThrottleLimit.setter
    def ThrottleLimit(self, value: InArgument) -> None: ...


class RenameComputer(PSRemotingActivity):
    def __init__(self): ...
    @property
    def DomainCredential(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def LocalCredential(self) -> InArgument: ...
    @property
    def NewName(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Protocol(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Restart(self) -> InArgument: ...
    @property
    def WsmanAuthentication(self) -> InArgument: ...
    @DomainCredential.setter
    def DomainCredential(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @LocalCredential.setter
    def LocalCredential(self, value: InArgument) -> None: ...
    @NewName.setter
    def NewName(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Protocol.setter
    def Protocol(self, value: InArgument) -> None: ...
    @Restart.setter
    def Restart(self, value: InArgument) -> None: ...
    @WsmanAuthentication.setter
    def WsmanAuthentication(self, value: InArgument) -> None: ...


class RenameItem(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def NewName(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @NewName.setter
    def NewName(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class RenameItemProperty(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def NewName(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @NewName.setter
    def NewName(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class ResetComputerMachinePassword(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Server(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Server.setter
    def Server(self, value: InArgument) -> None: ...


class ResolvePath(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Relative(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Relative.setter
    def Relative(self, value: InArgument) -> None: ...


class RestartActivityContext:
    def __init__(self): ...


class RestartComputer(PSActivity):
    def __init__(self): ...
    @property
    def DcomAuthentication(self) -> InArgument: ...
    @property
    def Delay(self) -> InArgument: ...
    @property
    def DisableSelfRestart() -> bool: ...
    @property
    def For(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Impersonation(self) -> InArgument: ...
    @property
    def Protocol(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def PSComputerName(self) -> InArgument: ...
    @property
    def PSCredential(self) -> InArgument: ...
    @property
    def ThrottleLimit(self) -> InArgument: ...
    @property
    def Timeout(self) -> InArgument: ...
    @property
    def Wait(self) -> InArgument: ...
    @property
    def WsmanAuthentication(self) -> InArgument: ...
    @DcomAuthentication.setter
    def DcomAuthentication(self, value: InArgument) -> None: ...
    @Delay.setter
    def Delay(self, value: InArgument) -> None: ...
    @DisableSelfRestart.setter
    def DisableSelfRestart(value: bool) -> None: ...
    @For.setter
    def For(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Impersonation.setter
    def Impersonation(self, value: InArgument) -> None: ...
    @Protocol.setter
    def Protocol(self, value: InArgument) -> None: ...
    @PSComputerName.setter
    def PSComputerName(self, value: InArgument) -> None: ...
    @PSCredential.setter
    def PSCredential(self, value: InArgument) -> None: ...
    @ThrottleLimit.setter
    def ThrottleLimit(self, value: InArgument) -> None: ...
    @Timeout.setter
    def Timeout(self, value: InArgument) -> None: ...
    @Wait.setter
    def Wait(self, value: InArgument) -> None: ...
    @WsmanAuthentication.setter
    def WsmanAuthentication(self, value: InArgument) -> None: ...


class RestartService(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ServiceDisplayName(self) -> InArgument: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @ServiceDisplayName.setter
    def ServiceDisplayName(self, value: InArgument) -> None: ...


class RestoreComputer(PSRemotingActivity):
    def __init__(self): ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def RestorePoint(self) -> InArgument: ...
    @RestorePoint.setter
    def RestorePoint(self, value: InArgument) -> None: ...


class ResumeService(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ServiceDisplayName(self) -> InArgument: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @ServiceDisplayName.setter
    def ServiceDisplayName(self, value: InArgument) -> None: ...


class SetContent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Encoding(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def NoNewline(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Stream(self) -> InArgument: ...
    @property
    def Value(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Encoding.setter
    def Encoding(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @NoNewline.setter
    def NoNewline(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Stream.setter
    def Stream(self, value: InArgument) -> None: ...
    @Value.setter
    def Value(self, value: InArgument) -> None: ...


class SetItem(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Value(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Value.setter
    def Value(self, value: InArgument) -> None: ...


class SetItemProperty(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Value(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Value.setter
    def Value(self, value: InArgument) -> None: ...


class SetService(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Description(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ServiceDisplayName(self) -> InArgument: ...
    @property
    def StartupType(self) -> InArgument: ...
    @property
    def Status(self) -> InArgument: ...
    @Description.setter
    def Description(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @ServiceDisplayName.setter
    def ServiceDisplayName(self, value: InArgument) -> None: ...
    @StartupType.setter
    def StartupType(self, value: InArgument) -> None: ...
    @Status.setter
    def Status(self, value: InArgument) -> None: ...


class SetWmiInstance(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Arguments(self) -> InArgument: ...
    @property
    def AsJob(self) -> InArgument: ...
    @property
    def Authentication(self) -> InArgument: ...
    @property
    def Authority(self) -> InArgument: ...
    @property
    def Class(self) -> InArgument: ...
    @property
    def ComputerName(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def EnableAllPrivileges(self) -> InArgument: ...
    @property
    def Impersonation(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Locale(self) -> InArgument: ...
    @property
    def Namespace(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def PutType(self) -> InArgument: ...
    @property
    def ThrottleLimit(self) -> InArgument: ...
    @Arguments.setter
    def Arguments(self, value: InArgument) -> None: ...
    @AsJob.setter
    def AsJob(self, value: InArgument) -> None: ...
    @Authentication.setter
    def Authentication(self, value: InArgument) -> None: ...
    @Authority.setter
    def Authority(self, value: InArgument) -> None: ...
    @Class.setter
    def Class(self, value: InArgument) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @EnableAllPrivileges.setter
    def EnableAllPrivileges(self, value: InArgument) -> None: ...
    @Impersonation.setter
    def Impersonation(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Locale.setter
    def Locale(self, value: InArgument) -> None: ...
    @Namespace.setter
    def Namespace(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @PutType.setter
    def PutType(self, value: InArgument) -> None: ...
    @ThrottleLimit.setter
    def ThrottleLimit(self, value: InArgument) -> None: ...


class SplitPath(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def IsAbsolute(self) -> InArgument: ...
    @property
    def Leaf(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def NoQualifier(self) -> InArgument: ...
    @property
    def Parent(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Qualifier(self) -> InArgument: ...
    @property
    def Resolve(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @IsAbsolute.setter
    def IsAbsolute(self, value: InArgument) -> None: ...
    @Leaf.setter
    def Leaf(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @NoQualifier.setter
    def NoQualifier(self, value: InArgument) -> None: ...
    @Parent.setter
    def Parent(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Qualifier.setter
    def Qualifier(self, value: InArgument) -> None: ...
    @Resolve.setter
    def Resolve(self, value: InArgument) -> None: ...


class StartProcess(PSRemotingActivity):
    def __init__(self): ...
    @property
    def ArgumentList(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def FilePath(self) -> InArgument: ...
    @property
    def LoadUserProfile(self) -> InArgument: ...
    @property
    def NoNewWindow(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def RedirectStandardError(self) -> InArgument: ...
    @property
    def RedirectStandardInput(self) -> InArgument: ...
    @property
    def RedirectStandardOutput(self) -> InArgument: ...
    @property
    def UseNewEnvironment(self) -> InArgument: ...
    @property
    def Verb(self) -> InArgument: ...
    @property
    def Wait(self) -> InArgument: ...
    @property
    def WindowStyle(self) -> InArgument: ...
    @property
    def WorkingDirectory(self) -> InArgument: ...
    @ArgumentList.setter
    def ArgumentList(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @FilePath.setter
    def FilePath(self, value: InArgument) -> None: ...
    @LoadUserProfile.setter
    def LoadUserProfile(self, value: InArgument) -> None: ...
    @NoNewWindow.setter
    def NoNewWindow(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @RedirectStandardError.setter
    def RedirectStandardError(self, value: InArgument) -> None: ...
    @RedirectStandardInput.setter
    def RedirectStandardInput(self, value: InArgument) -> None: ...
    @RedirectStandardOutput.setter
    def RedirectStandardOutput(self, value: InArgument) -> None: ...
    @UseNewEnvironment.setter
    def UseNewEnvironment(self, value: InArgument) -> None: ...
    @Verb.setter
    def Verb(self, value: InArgument) -> None: ...
    @Wait.setter
    def Wait(self, value: InArgument) -> None: ...
    @WindowStyle.setter
    def WindowStyle(self, value: InArgument) -> None: ...
    @WorkingDirectory.setter
    def WorkingDirectory(self, value: InArgument) -> None: ...


class StartService(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ServiceDisplayName(self) -> InArgument: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @ServiceDisplayName.setter
    def ServiceDisplayName(self, value: InArgument) -> None: ...


class StopComputer(PSRemotingActivity):
    def __init__(self): ...
    @property
    def AsJob(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def DcomAuthentication(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Impersonation(self) -> InArgument: ...
    @property
    def Protocol(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ThrottleLimit(self) -> InArgument: ...
    @property
    def WsmanAuthentication(self) -> InArgument: ...
    @AsJob.setter
    def AsJob(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @DcomAuthentication.setter
    def DcomAuthentication(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Impersonation.setter
    def Impersonation(self, value: InArgument) -> None: ...
    @Protocol.setter
    def Protocol(self, value: InArgument) -> None: ...
    @ThrottleLimit.setter
    def ThrottleLimit(self, value: InArgument) -> None: ...
    @WsmanAuthentication.setter
    def WsmanAuthentication(self, value: InArgument) -> None: ...


class StopProcess(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def ProcessId(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @ProcessId.setter
    def ProcessId(self, value: InArgument) -> None: ...


class StopService(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def NoWait(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ServiceDisplayName(self) -> InArgument: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @NoWait.setter
    def NoWait(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @ServiceDisplayName.setter
    def ServiceDisplayName(self, value: InArgument) -> None: ...


class SuspendService(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ServiceDisplayName(self) -> InArgument: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @ServiceDisplayName.setter
    def ServiceDisplayName(self, value: InArgument) -> None: ...


class TestComputerSecureChannel(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Repair(self) -> InArgument: ...
    @property
    def Server(self) -> InArgument: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Repair.setter
    def Repair(self, value: InArgument) -> None: ...
    @Server.setter
    def Server(self, value: InArgument) -> None: ...


class TestConnection(PSRemotingActivity):
    def __init__(self): ...
    @property
    def AsJob(self) -> InArgument: ...
    @property
    def BufferSize(self) -> InArgument: ...
    @property
    def ComputerName(self) -> InArgument: ...
    @property
    def Count(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def DcomAuthentication(self) -> InArgument: ...
    @property
    def Delay(self) -> InArgument: ...
    @property
    def Impersonation(self) -> InArgument: ...
    @property
    def Protocol(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Quiet(self) -> InArgument: ...
    @property
    def Source(self) -> InArgument: ...
    @property
    def ThrottleLimit(self) -> InArgument: ...
    @property
    def TimeToLive(self) -> InArgument: ...
    @property
    def WsmanAuthentication(self) -> InArgument: ...
    @AsJob.setter
    def AsJob(self, value: InArgument) -> None: ...
    @BufferSize.setter
    def BufferSize(self, value: InArgument) -> None: ...
    @ComputerName.setter
    def ComputerName(self, value: InArgument) -> None: ...
    @Count.setter
    def Count(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @DcomAuthentication.setter
    def DcomAuthentication(self, value: InArgument) -> None: ...
    @Delay.setter
    def Delay(self, value: InArgument) -> None: ...
    @Impersonation.setter
    def Impersonation(self, value: InArgument) -> None: ...
    @Protocol.setter
    def Protocol(self, value: InArgument) -> None: ...
    @Quiet.setter
    def Quiet(self, value: InArgument) -> None: ...
    @Source.setter
    def Source(self, value: InArgument) -> None: ...
    @ThrottleLimit.setter
    def ThrottleLimit(self, value: InArgument) -> None: ...
    @TimeToLive.setter
    def TimeToLive(self, value: InArgument) -> None: ...
    @WsmanAuthentication.setter
    def WsmanAuthentication(self, value: InArgument) -> None: ...


class TestPath(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Filter(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def IsValid(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def NewerThan(self) -> InArgument: ...
    @property
    def OlderThan(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PathType(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Filter.setter
    def Filter(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @IsValid.setter
    def IsValid(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @NewerThan.setter
    def NewerThan(self, value: InArgument) -> None: ...
    @OlderThan.setter
    def OlderThan(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @PathType.setter
    def PathType(self, value: InArgument) -> None: ...


class WaitProcess(PSRemotingActivity):
    def __init__(self): ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def ProcessId(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Timeout(self) -> InArgument: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @ProcessId.setter
    def ProcessId(self, value: InArgument) -> None: ...
    @Timeout.setter
    def Timeout(self, value: InArgument) -> None: ...


class WriteEventLog(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Category(self) -> InArgument: ...
    @property
    def EntryType(self) -> InArgument: ...
    @property
    def EventId(self) -> InArgument: ...
    @property
    def LogName(self) -> InArgument: ...
    @property
    def Message(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def RawData(self) -> InArgument: ...
    @property
    def Source(self) -> InArgument: ...
    @Category.setter
    def Category(self, value: InArgument) -> None: ...
    @EntryType.setter
    def EntryType(self, value: InArgument) -> None: ...
    @EventId.setter
    def EventId(self, value: InArgument) -> None: ...
    @LogName.setter
    def LogName(self, value: InArgument) -> None: ...
    @Message.setter
    def Message(self, value: InArgument) -> None: ...
    @RawData.setter
    def RawData(self, value: InArgument) -> None: ...
    @Source.setter
    def Source(self, value: InArgument) -> None: ...
