from typing import Tuple, Set, Iterable, List


class AddJobTriggerCommand(ScheduleJobCmdletBase):
    def __init__(self): ...
    @property
    def Id(self) -> Set(int): ...
    @property
    def InputObject(self) -> Set(ScheduledJobDefinition): ...
    @property
    def Name(self) -> Set(str): ...
    @property
    def Trigger(self) -> Set(ScheduledJobTrigger): ...
    @Id.setter
    def Id(self, value: Set(int)) -> None: ...
    @InputObject.setter
    def InputObject(self, value: Set(ScheduledJobDefinition)) -> None: ...
    @Name.setter
    def Name(self, value: Set(str)) -> None: ...
    @Trigger.setter
    def Trigger(self, value: Set(ScheduledJobTrigger)) -> None: ...


class DisableJobTriggerCommand(EnableDisableScheduledJobCmdletBase):
    def __init__(self): ...


class DisableScheduledJobCommand(DisableScheduledJobDefinitionBase):
    def __init__(self): ...


class DisableScheduledJobDefinitionBase(ScheduleJobCmdletBase):
    @property
    def Id(self) -> int: ...
    @property
    def InputObject(self) -> ScheduledJobDefinition: ...
    @property
    def Name(self) -> str: ...
    @property
    def PassThru(self) -> SwitchParameter: ...
    @Id.setter
    def Id(self, value: int) -> None: ...
    @InputObject.setter
    def InputObject(self, value: ScheduledJobDefinition) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @PassThru.setter
    def PassThru(self, value: SwitchParameter) -> None: ...


class EnableDisableScheduledJobCmdletBase(ScheduleJobCmdletBase):
    @property
    def InputObject(self) -> Set(ScheduledJobTrigger): ...
    @property
    def PassThru(self) -> SwitchParameter: ...
    @InputObject.setter
    def InputObject(self, value: Set(ScheduledJobTrigger)) -> None: ...
    @PassThru.setter
    def PassThru(self, value: SwitchParameter) -> None: ...


class EnableJobTriggerCommand(EnableDisableScheduledJobCmdletBase):
    def __init__(self): ...


class EnableScheduledJobCommand(DisableScheduledJobDefinitionBase):
    def __init__(self): ...


class GetJobTriggerCommand(ScheduleJobCmdletBase):
    def __init__(self): ...
    @property
    def Id(self) -> int: ...
    @property
    def InputObject(self) -> ScheduledJobDefinition: ...
    @property
    def Name(self) -> str: ...
    @property
    def TriggerId(self) -> Set(int): ...
    @Id.setter
    def Id(self, value: int) -> None: ...
    @InputObject.setter
    def InputObject(self, value: ScheduledJobDefinition) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @TriggerId.setter
    def TriggerId(self, value: Set(int)) -> None: ...


class GetScheduledJobCommand(ScheduleJobCmdletBase):
    def __init__(self): ...
    @property
    def Id(self) -> Set(int): ...
    @property
    def Name(self) -> Set(str): ...
    @Id.setter
    def Id(self, value: Set(int)) -> None: ...
    @Name.setter
    def Name(self, value: Set(str)) -> None: ...


class GetScheduledJobOptionCommand(ScheduleJobCmdletBase):
    def __init__(self): ...
    @property
    def Id(self) -> int: ...
    @property
    def InputObject(self) -> ScheduledJobDefinition: ...
    @property
    def Name(self) -> str: ...
    @Id.setter
    def Id(self, value: int) -> None: ...
    @InputObject.setter
    def InputObject(self, value: ScheduledJobDefinition) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class JobTriggerToCimInstanceConverter:
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, sourceValue: Object, destinationType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, sourceValue: Object, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, sourceValue: Object, destinationType: Type, formatProvider: IFormatProvider, ignoreCase: bool) -> Object: ...
    @overload
    def ConvertTo(self, sourceValue: Object, destinationType: Type, formatProvider: IFormatProvider, ignoreCase: bool) -> Object: ...


class NewJobTriggerCommand(ScheduleJobCmdletBase):
    def __init__(self): ...
    @property
    def At(self) -> DateTime: ...
    @property
    def AtLogOn(self) -> SwitchParameter: ...
    @property
    def AtStartup(self) -> SwitchParameter: ...
    @property
    def Daily(self) -> SwitchParameter: ...
    @property
    def DaysInterval(self) -> int: ...
    @property
    def DaysOfWeek(self) -> Set(DayOfWeek): ...
    @property
    def Once(self) -> SwitchParameter: ...
    @property
    def RandomDelay(self) -> TimeSpan: ...
    @property
    def RepeatIndefinitely(self) -> SwitchParameter: ...
    @property
    def RepetitionDuration(self) -> TimeSpan: ...
    @property
    def RepetitionInterval(self) -> TimeSpan: ...
    @property
    def User(self) -> str: ...
    @property
    def Weekly(self) -> SwitchParameter: ...
    @property
    def WeeksInterval(self) -> int: ...
    @At.setter
    def At(self, value: DateTime) -> None: ...
    @AtLogOn.setter
    def AtLogOn(self, value: SwitchParameter) -> None: ...
    @AtStartup.setter
    def AtStartup(self, value: SwitchParameter) -> None: ...
    @Daily.setter
    def Daily(self, value: SwitchParameter) -> None: ...
    @DaysInterval.setter
    def DaysInterval(self, value: int) -> None: ...
    @DaysOfWeek.setter
    def DaysOfWeek(self, value: Set(DayOfWeek)) -> None: ...
    @Once.setter
    def Once(self, value: SwitchParameter) -> None: ...
    @RandomDelay.setter
    def RandomDelay(self, value: TimeSpan) -> None: ...
    @RepeatIndefinitely.setter
    def RepeatIndefinitely(self, value: SwitchParameter) -> None: ...
    @RepetitionDuration.setter
    def RepetitionDuration(self, value: TimeSpan) -> None: ...
    @RepetitionInterval.setter
    def RepetitionInterval(self, value: TimeSpan) -> None: ...
    @User.setter
    def User(self, value: str) -> None: ...
    @Weekly.setter
    def Weekly(self, value: SwitchParameter) -> None: ...
    @WeeksInterval.setter
    def WeeksInterval(self, value: int) -> None: ...


class NewScheduledJobOptionCommand(ScheduledJobOptionCmdletBase):
    def __init__(self): ...


class RegisterScheduledJobCommand(ScheduleJobCmdletBase):
    def __init__(self): ...
    @property
    def ArgumentList(self) -> Set(Object): ...
    @property
    def Authentication(self) -> AuthenticationMechanism: ...
    @property
    def Credential(self) -> PSCredential: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def InitializationScript(self) -> ScriptBlock: ...
    @property
    def MaxResultCount(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def RunAs32(self) -> SwitchParameter: ...
    @property
    def RunEvery(self) -> TimeSpan: ...
    @property
    def RunNow(self) -> SwitchParameter: ...
    @property
    def ScheduledJobOption(self) -> ScheduledJobOptions: ...
    @property
    def ScriptBlock(self) -> ScriptBlock: ...
    @property
    def Trigger(self) -> Set(ScheduledJobTrigger): ...
    @ArgumentList.setter
    def ArgumentList(self, value: Set(Object)) -> None: ...
    @Authentication.setter
    def Authentication(self, value: AuthenticationMechanism) -> None: ...
    @Credential.setter
    def Credential(self, value: PSCredential) -> None: ...
    @FilePath.setter
    def FilePath(self, value: str) -> None: ...
    @InitializationScript.setter
    def InitializationScript(self, value: ScriptBlock) -> None: ...
    @MaxResultCount.setter
    def MaxResultCount(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RunAs32.setter
    def RunAs32(self, value: SwitchParameter) -> None: ...
    @RunEvery.setter
    def RunEvery(self, value: TimeSpan) -> None: ...
    @RunNow.setter
    def RunNow(self, value: SwitchParameter) -> None: ...
    @ScheduledJobOption.setter
    def ScheduledJobOption(self, value: ScheduledJobOptions) -> None: ...
    @ScriptBlock.setter
    def ScriptBlock(self, value: ScriptBlock) -> None: ...
    @Trigger.setter
    def Trigger(self, value: Set(ScheduledJobTrigger)) -> None: ...


class RemoveJobTriggerCommand(ScheduleJobCmdletBase):
    def __init__(self): ...
    @property
    def Id(self) -> Set(int): ...
    @property
    def InputObject(self) -> Set(ScheduledJobDefinition): ...
    @property
    def Name(self) -> Set(str): ...
    @property
    def TriggerId(self) -> Set(int): ...
    @Id.setter
    def Id(self, value: Set(int)) -> None: ...
    @InputObject.setter
    def InputObject(self, value: Set(ScheduledJobDefinition)) -> None: ...
    @Name.setter
    def Name(self, value: Set(str)) -> None: ...
    @TriggerId.setter
    def TriggerId(self, value: Set(int)) -> None: ...


class ScheduledJob:
    def __init__(self, command: str, name: str, jobDefinition: ScheduledJobDefinition): ...
    @property
    def Command(self) -> str: ...
    @property
    def Definition(self) -> ScheduledJobDefinition: ...
    @property
    def HasMoreData(self) -> bool: ...
    @property
    def Location(self) -> str: ...
    @property
    def StatusMessage(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def ResumeJob(self) -> None: ...
    def ResumeJobAsync(self) -> None: ...
    def StartJob(self) -> None: ...
    def StartJobAsync(self) -> None: ...
    @overload
    def StopJob(self) -> None: ...
    @overload
    def StopJob(self, force: bool, reason: str) -> None: ...
    @overload
    def StopJobAsync(self) -> None: ...
    @overload
    def StopJobAsync(self, force: bool, reason: str) -> None: ...
    @overload
    def SuspendJob(self) -> None: ...
    @overload
    def SuspendJob(self, force: bool, reason: str) -> None: ...
    @overload
    def SuspendJobAsync(self) -> None: ...
    @overload
    def SuspendJobAsync(self, force: bool, reason: str) -> None: ...
    def UnblockJob(self) -> None: ...
    def UnblockJobAsync(self) -> None: ...


class ScheduledJobDefinition:
    def __init__(self, invocationInfo: JobInvocationInfo, triggers: Iterable[ScheduledJobTrigger], options: ScheduledJobOptions, credential: PSCredential): ...
    def AddTriggers(self, triggers: Iterable[ScheduledJobTrigger], save: bool) -> None: ...
    def ClearExecutionHistory(self) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Command(self) -> str: ...
    @property
    def Credential(self) -> PSCredential: ...
    @property
    def Definition(self) -> JobDefinition: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ExecutionHistoryLength(self) -> int: ...
    @property
    def GlobalId(self) -> Guid: ...
    @property
    def Id(self) -> int: ...
    @property
    def InvocationInfo(self) -> JobInvocationInfo: ...
    @property
    def JobTriggers(self) -> List: ...
    @property
    def Name(self) -> str: ...
    @property
    def Options(self) -> ScheduledJobOptions: ...
    @property
    def PSExecutionArgs(self) -> str: ...
    @property
    def PSExecutionPath(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetTrigger(self, triggerId: int) -> ScheduledJobTrigger: ...
    def GetTriggers(self, triggerIds: Iterable[int]) -> Tuple[List, List]: ...
    def LoadFromStore(definitionName: str, definitionPath: str) -> ScheduledJobDefinition: ...
    def Register(self) -> None: ...
    def Remove(self, force: bool) -> None: ...
    def RemoveTriggers(self, triggerIds: Iterable[int], save: bool) -> List: ...
    def Run(self) -> Job2: ...
    def RunAsTask(self) -> None: ...
    def Save(self) -> None: ...
    def SetEnabled(self, enabled: bool, save: bool) -> None: ...
    def SetExecutionHistoryLength(self, executionHistoryLength: int, save: bool) -> None: ...
    def SetName(self, name: str, save: bool) -> None: ...
    def SetTriggers(self, newTriggers: Iterable[ScheduledJobTrigger], save: bool) -> None: ...
    @overload
    def StartJob(self) -> ScheduledJob: ...
    @overload
    def StartJob(DefinitionName: str) -> Job2: ...
    def UpdateJobInvocationInfo(self, jobInvocationInfo: JobInvocationInfo, save: bool) -> None: ...
    def UpdateOptions(self, options: ScheduledJobOptions, save: bool) -> None: ...
    def UpdateTriggers(self, triggers: Iterable[ScheduledJobTrigger], save: bool) -> List: ...


class ScheduledJobException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ScheduledJobInvocationInfo:
    def __init__(self, definition: JobDefinition, parameters: Dictionary): ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class ScheduledJobOptionCmdletBase(ScheduleJobCmdletBase):
    @property
    def ContinueIfGoingOnBattery(self) -> SwitchParameter: ...
    @property
    def DoNotAllowDemandStart(self) -> SwitchParameter: ...
    @property
    def HideInTaskScheduler(self) -> SwitchParameter: ...
    @property
    def IdleDuration(self) -> TimeSpan: ...
    @property
    def IdleTimeout(self) -> TimeSpan: ...
    @property
    def MultipleInstancePolicy(self) -> TaskMultipleInstancePolicy: ...
    @property
    def RequireNetwork(self) -> SwitchParameter: ...
    @property
    def RestartOnIdleResume(self) -> SwitchParameter: ...
    @property
    def RunElevated(self) -> SwitchParameter: ...
    @property
    def StartIfIdle(self) -> SwitchParameter: ...
    @property
    def StartIfOnBattery(self) -> SwitchParameter: ...
    @property
    def StopIfGoingOffIdle(self) -> SwitchParameter: ...
    @property
    def WakeToRun(self) -> SwitchParameter: ...
    @ContinueIfGoingOnBattery.setter
    def ContinueIfGoingOnBattery(self, value: SwitchParameter) -> None: ...
    @DoNotAllowDemandStart.setter
    def DoNotAllowDemandStart(self, value: SwitchParameter) -> None: ...
    @HideInTaskScheduler.setter
    def HideInTaskScheduler(self, value: SwitchParameter) -> None: ...
    @IdleDuration.setter
    def IdleDuration(self, value: TimeSpan) -> None: ...
    @IdleTimeout.setter
    def IdleTimeout(self, value: TimeSpan) -> None: ...
    @MultipleInstancePolicy.setter
    def MultipleInstancePolicy(self, value: TaskMultipleInstancePolicy) -> None: ...
    @RequireNetwork.setter
    def RequireNetwork(self, value: SwitchParameter) -> None: ...
    @RestartOnIdleResume.setter
    def RestartOnIdleResume(self, value: SwitchParameter) -> None: ...
    @RunElevated.setter
    def RunElevated(self, value: SwitchParameter) -> None: ...
    @StartIfIdle.setter
    def StartIfIdle(self, value: SwitchParameter) -> None: ...
    @StartIfOnBattery.setter
    def StartIfOnBattery(self, value: SwitchParameter) -> None: ...
    @StopIfGoingOffIdle.setter
    def StopIfGoingOffIdle(self, value: SwitchParameter) -> None: ...
    @WakeToRun.setter
    def WakeToRun(self, value: SwitchParameter) -> None: ...


class ScheduledJobOptions:
    def __init__(self): ...
    @property
    def DoNotAllowDemandStart(self) -> bool: ...
    @property
    def IdleDuration(self) -> TimeSpan: ...
    @property
    def IdleTimeout(self) -> TimeSpan: ...
    @property
    def JobDefinition(self) -> ScheduledJobDefinition: ...
    @property
    def MultipleInstancePolicy(self) -> TaskMultipleInstancePolicy: ...
    @property
    def RestartOnIdleResume(self) -> bool: ...
    @property
    def RunElevated(self) -> bool: ...
    @property
    def RunWithoutNetwork(self) -> bool: ...
    @property
    def ShowInTaskScheduler(self) -> bool: ...
    @property
    def StartIfNotIdle(self) -> bool: ...
    @property
    def StartIfOnBatteries(self) -> bool: ...
    @property
    def StopIfGoingOffIdle(self) -> bool: ...
    @property
    def StopIfGoingOnBatteries(self) -> bool: ...
    @property
    def WakeToRun(self) -> bool: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @DoNotAllowDemandStart.setter
    def DoNotAllowDemandStart(self, value: bool) -> None: ...
    @IdleDuration.setter
    def IdleDuration(self, value: TimeSpan) -> None: ...
    @IdleTimeout.setter
    def IdleTimeout(self, value: TimeSpan) -> None: ...
    @MultipleInstancePolicy.setter
    def MultipleInstancePolicy(self, value: TaskMultipleInstancePolicy) -> None: ...
    @RestartOnIdleResume.setter
    def RestartOnIdleResume(self, value: bool) -> None: ...
    @RunElevated.setter
    def RunElevated(self, value: bool) -> None: ...
    @RunWithoutNetwork.setter
    def RunWithoutNetwork(self, value: bool) -> None: ...
    @ShowInTaskScheduler.setter
    def ShowInTaskScheduler(self, value: bool) -> None: ...
    @StartIfNotIdle.setter
    def StartIfNotIdle(self, value: bool) -> None: ...
    @StartIfOnBatteries.setter
    def StartIfOnBatteries(self, value: bool) -> None: ...
    @StopIfGoingOffIdle.setter
    def StopIfGoingOffIdle(self, value: bool) -> None: ...
    @StopIfGoingOnBatteries.setter
    def StopIfGoingOnBatteries(self, value: bool) -> None: ...
    @WakeToRun.setter
    def WakeToRun(self, value: bool) -> None: ...
    def UpdateJobDefinition(self) -> None: ...


class ScheduledJobSourceAdapter:
    def __init__(self): ...
    def GetJobByInstanceId(self, instanceId: Guid, recurse: bool) -> Job2: ...
    def GetJobBySessionId(self, id: int, recurse: bool) -> Job2: ...
    def GetJobs(self) -> List[Job2]: ...
    def GetJobsByCommand(self, command: str, recurse: bool) -> List[Job2]: ...
    def GetJobsByFilter(self, filter: Dictionary, recurse: bool) -> List[Job2]: ...
    def GetJobsByName(self, name: str, recurse: bool) -> List[Job2]: ...
    def GetJobsByState(self, state: JobState, recurse: bool) -> List[Job2]: ...
    @overload
    def NewJob(self, specification: JobInvocationInfo) -> Job2: ...
    @overload
    def NewJob(self, definitionName: str, definitionPath: str) -> Job2: ...
    def PersistJob(self, job: Job2) -> None: ...
    def RemoveJob(self, job: Job2) -> None: ...


class ScheduledJobTrigger:
    def __init__(self): ...
    def CreateAtLogOnTrigger(user: str, delay: TimeSpan, id: int, enabled: bool) -> ScheduledJobTrigger: ...
    def CreateAtStartupTrigger(delay: TimeSpan, id: int, enabled: bool) -> ScheduledJobTrigger: ...
    def CreateDailyTrigger(time: DateTime, interval: int, delay: TimeSpan, id: int, enabled: bool) -> ScheduledJobTrigger: ...
    def CreateOnceTrigger(time: DateTime, delay: TimeSpan, repetitionInterval: Nullable, repetitionDuration: Nullable, id: int, enabled: bool) -> ScheduledJobTrigger: ...
    def CreateWeeklyTrigger(time: DateTime, interval: int, daysOfWeek: Iterable[DayOfWeek], delay: TimeSpan, id: int, enabled: bool) -> ScheduledJobTrigger: ...
    @property
    def At(self) -> Nullable: ...
    @property
    def DaysOfWeek(self) -> List: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Frequency(self) -> TriggerFrequency: ...
    @property
    def Id(self) -> int: ...
    @property
    def Interval(self) -> int: ...
    @property
    def JobDefinition(self) -> ScheduledJobDefinition: ...
    @property
    def RandomDelay(self) -> TimeSpan: ...
    @property
    def RepetitionDuration(self) -> Nullable: ...
    @property
    def RepetitionInterval(self) -> Nullable: ...
    @property
    def User(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @At.setter
    def At(self, value: Nullable) -> None: ...
    @DaysOfWeek.setter
    def DaysOfWeek(self, value: List) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Frequency.setter
    def Frequency(self, value: TriggerFrequency) -> None: ...
    @Interval.setter
    def Interval(self, value: int) -> None: ...
    @RandomDelay.setter
    def RandomDelay(self, value: TimeSpan) -> None: ...
    @RepetitionDuration.setter
    def RepetitionDuration(self, value: Nullable) -> None: ...
    @RepetitionInterval.setter
    def RepetitionInterval(self, value: Nullable) -> None: ...
    @User.setter
    def User(self, value: str) -> None: ...
    def UpdateJobDefinition(self) -> None: ...


class ScheduleJobCmdletBase:
    pass


class SetJobTriggerCommand(ScheduleJobCmdletBase):
    def __init__(self): ...
    @property
    def At(self) -> DateTime: ...
    @property
    def AtLogOn(self) -> SwitchParameter: ...
    @property
    def AtStartup(self) -> SwitchParameter: ...
    @property
    def Daily(self) -> SwitchParameter: ...
    @property
    def DaysInterval(self) -> int: ...
    @property
    def DaysOfWeek(self) -> Set(DayOfWeek): ...
    @property
    def InputObject(self) -> Set(ScheduledJobTrigger): ...
    @property
    def Once(self) -> SwitchParameter: ...
    @property
    def PassThru(self) -> SwitchParameter: ...
    @property
    def RandomDelay(self) -> TimeSpan: ...
    @property
    def RepeatIndefinitely(self) -> SwitchParameter: ...
    @property
    def RepetitionDuration(self) -> TimeSpan: ...
    @property
    def RepetitionInterval(self) -> TimeSpan: ...
    @property
    def User(self) -> str: ...
    @property
    def Weekly(self) -> SwitchParameter: ...
    @property
    def WeeksInterval(self) -> int: ...
    @At.setter
    def At(self, value: DateTime) -> None: ...
    @AtLogOn.setter
    def AtLogOn(self, value: SwitchParameter) -> None: ...
    @AtStartup.setter
    def AtStartup(self, value: SwitchParameter) -> None: ...
    @Daily.setter
    def Daily(self, value: SwitchParameter) -> None: ...
    @DaysInterval.setter
    def DaysInterval(self, value: int) -> None: ...
    @DaysOfWeek.setter
    def DaysOfWeek(self, value: Set(DayOfWeek)) -> None: ...
    @InputObject.setter
    def InputObject(self, value: Set(ScheduledJobTrigger)) -> None: ...
    @Once.setter
    def Once(self, value: SwitchParameter) -> None: ...
    @PassThru.setter
    def PassThru(self, value: SwitchParameter) -> None: ...
    @RandomDelay.setter
    def RandomDelay(self, value: TimeSpan) -> None: ...
    @RepeatIndefinitely.setter
    def RepeatIndefinitely(self, value: SwitchParameter) -> None: ...
    @RepetitionDuration.setter
    def RepetitionDuration(self, value: TimeSpan) -> None: ...
    @RepetitionInterval.setter
    def RepetitionInterval(self, value: TimeSpan) -> None: ...
    @User.setter
    def User(self, value: str) -> None: ...
    @Weekly.setter
    def Weekly(self, value: SwitchParameter) -> None: ...
    @WeeksInterval.setter
    def WeeksInterval(self, value: int) -> None: ...


class SetScheduledJobCommand(ScheduleJobCmdletBase):
    def __init__(self): ...
    @property
    def ArgumentList(self) -> Set(Object): ...
    @property
    def Authentication(self) -> AuthenticationMechanism: ...
    @property
    def ClearExecutionHistory(self) -> SwitchParameter: ...
    @property
    def Credential(self) -> PSCredential: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def InitializationScript(self) -> ScriptBlock: ...
    @property
    def InputObject(self) -> ScheduledJobDefinition: ...
    @property
    def MaxResultCount(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def PassThru(self) -> SwitchParameter: ...
    @property
    def RunAs32(self) -> SwitchParameter: ...
    @property
    def RunEvery(self) -> TimeSpan: ...
    @property
    def RunNow(self) -> SwitchParameter: ...
    @property
    def ScheduledJobOption(self) -> ScheduledJobOptions: ...
    @property
    def ScriptBlock(self) -> ScriptBlock: ...
    @property
    def Trigger(self) -> Set(ScheduledJobTrigger): ...
    @ArgumentList.setter
    def ArgumentList(self, value: Set(Object)) -> None: ...
    @Authentication.setter
    def Authentication(self, value: AuthenticationMechanism) -> None: ...
    @ClearExecutionHistory.setter
    def ClearExecutionHistory(self, value: SwitchParameter) -> None: ...
    @Credential.setter
    def Credential(self, value: PSCredential) -> None: ...
    @FilePath.setter
    def FilePath(self, value: str) -> None: ...
    @InitializationScript.setter
    def InitializationScript(self, value: ScriptBlock) -> None: ...
    @InputObject.setter
    def InputObject(self, value: ScheduledJobDefinition) -> None: ...
    @MaxResultCount.setter
    def MaxResultCount(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @PassThru.setter
    def PassThru(self, value: SwitchParameter) -> None: ...
    @RunAs32.setter
    def RunAs32(self, value: SwitchParameter) -> None: ...
    @RunEvery.setter
    def RunEvery(self, value: TimeSpan) -> None: ...
    @RunNow.setter
    def RunNow(self, value: SwitchParameter) -> None: ...
    @ScheduledJobOption.setter
    def ScheduledJobOption(self, value: ScheduledJobOptions) -> None: ...
    @ScriptBlock.setter
    def ScriptBlock(self, value: ScriptBlock) -> None: ...
    @Trigger.setter
    def Trigger(self, value: Set(ScheduledJobTrigger)) -> None: ...


class SetScheduledJobOptionCommand(ScheduledJobOptionCmdletBase):
    def __init__(self): ...
    @property
    def InputObject(self) -> ScheduledJobOptions: ...
    @property
    def PassThru(self) -> SwitchParameter: ...
    @InputObject.setter
    def InputObject(self, value: ScheduledJobOptions) -> None: ...
    @PassThru.setter
    def PassThru(self, value: SwitchParameter) -> None: ...


class TaskMultipleInstancePolicy:
    #None = 0
    IgnoreNew = 1
    Parallel = 2
    Queue = 3
    StopExisting = 4


class TriggerFrequency:
    #None = 0
    Once = 1
    Daily = 2
    Weekly = 3
    AtLogon = 4
    AtStartup = 5


class UnregisterScheduledJobCommand(ScheduleJobCmdletBase):
    def __init__(self): ...
    @property
    def Force(self) -> SwitchParameter: ...
    @property
    def Id(self) -> Set(int): ...
    @property
    def InputObject(self) -> Set(ScheduledJobDefinition): ...
    @property
    def Name(self) -> Set(str): ...
    @Force.setter
    def Force(self, value: SwitchParameter) -> None: ...
    @Id.setter
    def Id(self, value: Set(int)) -> None: ...
    @InputObject.setter
    def InputObject(self, value: Set(ScheduledJobDefinition)) -> None: ...
    @Name.setter
    def Name(self, value: Set(str)) -> None: ...
