from typing import Tuple, Set, Iterable, List


class ConsoleEditor(ISEEditor):
    def Clear(self) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def InputText(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @InputText.setter
    def InputText(self, value: str) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class IAddOnToolHostObject:
    @property
    def HostObject(self) -> ObjectModelRoot: ...
    @HostObject.setter
    def HostObject(self, value: ObjectModelRoot) -> None: ...


class ISEAddOnTool:
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @property
    def Control(self) -> Control: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @IsVisible.setter
    def IsVisible(self, value: bool) -> None: ...


class ISEAddOnToolAddedOrRemovedEventArgs:
    @property
    def Added(self) -> bool: ...
    @property
    def Tool(self) -> ISEAddOnTool: ...


class ISEAddOnToolCollection:
    @overload
    def Add(self, name: str, controlType: Type) -> ISEAddOnTool: ...
    @overload
    def Add(self, name: str, controlType: Type, isVisible: bool) -> ISEAddOnTool: ...
    @overload
    def Contains(self, control: UserControl) -> bool: ...


class ISEAddOnToolEventArgs:
    @property
    def Tool(self) -> ISEAddOnTool: ...


class ISEAddOnToolPaneOpenOrClosedEventArgs:
    @property
    def Collection(self) -> ISEAddOnToolCollection: ...
    @property
    def Opened(self) -> bool: ...


class ISEEditor:
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def Clear(self) -> None: ...
    def EnsureVisible(self, lineNumber: int) -> None: ...
    def Focus(self) -> None: ...
    @property
    def CanGoToMatch(self) -> bool: ...
    @property
    def CaretColumn(self) -> int: ...
    @property
    def CaretLine(self) -> int: ...
    @property
    def CaretLineText(self) -> str: ...
    @property
    def LineCount(self) -> int: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def Text(self) -> str: ...
    def GetLineLength(self, lineNumber: int) -> int: ...
    def GoToMatch(self) -> None: ...
    def InsertText(self, text: str) -> None: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def Select(self, startLine: int, startColumn: int, endLine: int, endColumn: int) -> None: ...
    def SelectCaretLine(self) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    def SetCaretPosition(self, lineNumber: int, columnNumber: int) -> None: ...
    def ToggleOutliningExpansion(self) -> None: ...


class ISEFile:
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Editor(self) -> ISEEditor: ...
    @property
    def Encoding(self) -> Encoding: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def IsRecovered(self) -> bool: ...
    @property
    def IsSaved(self) -> bool: ...
    @property
    def IsUntitled(self) -> bool: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @overload
    def Save(self) -> None: ...
    @overload
    def Save(self, saveEncoding: Encoding) -> None: ...
    @overload
    def SaveAs(self, saveAsFileName: str) -> None: ...
    @overload
    def SaveAs(self, saveAsFileName: str, saveEncoding: Encoding) -> None: ...


class ISEFileCollection:
    @overload
    def Add(self) -> ISEFile: ...
    @overload
    def Add(self, fullPath: str) -> ISEFile: ...
    @property
    def SelectedFile(self) -> ISEFile: ...
    @overload
    def Remove(self, file: ISEFile, force: bool) -> None: ...
    @SelectedFile.setter
    def SelectedFile(self, value: ISEFile) -> None: ...
    def SetSelectedFile(self, file: ISEFile) -> None: ...


class ISEMenuItem:
    @property
    def Action(self) -> ScriptBlock: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Shortcut(self) -> KeyGesture: ...
    @property
    def Submenus(self) -> List[ISEMenuItem]: ...


class ISEMenuItemCollection:
    @overload
    def Add(self, displayName: str, action: ScriptBlock, shortcut: KeyGesture) -> ISEMenuItem: ...


class ISEOptions:
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @property
    def AutoSaveMinuteInterval(self) -> Int16: ...
    @property
    def ConsolePaneBackgroundColor(self) -> Color: ...
    @property
    def ConsolePaneForegroundColor(self) -> Color: ...
    @property
    def ConsolePaneTextBackgroundColor(self) -> Color: ...
    @property
    def ConsoleTokenColors(self) -> IDictionary: ...
    @property
    def DebugBackgroundColor(self) -> Color: ...
    @property
    def DebugForegroundColor(self) -> Color: ...
    @property
    def DefaultOptions(self) -> ISEOptions: ...
    @property
    def ErrorBackgroundColor(self) -> Color: ...
    @property
    def ErrorForegroundColor(self) -> Color: ...
    @property
    def FontName(self) -> str: ...
    @property
    def FontSize(self) -> int: ...
    @property
    def IntellisenseTimeoutInSeconds(self) -> int: ...
    @property
    def MruCount(self) -> int: ...
    @property
    def ScriptPaneBackgroundColor(self) -> Color: ...
    @property
    def ScriptPaneForegroundColor(self) -> Color: ...
    @property
    def SelectedScriptPaneState(self) -> SelectedScriptPaneState: ...
    @property
    def ShowDefaultSnippets(self) -> bool: ...
    @property
    def ShowIntellisenseInConsolePane(self) -> bool: ...
    @property
    def ShowIntellisenseInScriptPane(self) -> bool: ...
    @property
    def ShowLineNumbers(self) -> bool: ...
    @property
    def ShowOutlining(self) -> bool: ...
    @property
    def ShowToolBar(self) -> bool: ...
    @property
    def ShowWarningBeforeSavingOnRun(self) -> bool: ...
    @property
    def ShowWarningForDuplicateFiles(self) -> bool: ...
    @property
    def TokenColors(self) -> IDictionary: ...
    @property
    def UseEnterToSelectInConsolePaneIntellisense(self) -> bool: ...
    @property
    def UseEnterToSelectInScriptPaneIntellisense(self) -> bool: ...
    @property
    def UseLocalHelp(self) -> bool: ...
    @property
    def VerboseBackgroundColor(self) -> Color: ...
    @property
    def VerboseForegroundColor(self) -> Color: ...
    @property
    def WarningBackgroundColor(self) -> Color: ...
    @property
    def WarningForegroundColor(self) -> Color: ...
    @property
    def XmlTokenColors(self) -> IDictionary: ...
    @property
    def Zoom(self) -> float: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def RestoreDefaultConsoleTokenColors(self) -> None: ...
    def RestoreDefaults(self) -> None: ...
    def RestoreDefaultTokenColors(self) -> None: ...
    def RestoreDefaultXmlTokenColors(self) -> None: ...
    @AutoSaveMinuteInterval.setter
    def AutoSaveMinuteInterval(self, value: Int16) -> None: ...
    @ConsolePaneBackgroundColor.setter
    def ConsolePaneBackgroundColor(self, value: Color) -> None: ...
    @ConsolePaneForegroundColor.setter
    def ConsolePaneForegroundColor(self, value: Color) -> None: ...
    @ConsolePaneTextBackgroundColor.setter
    def ConsolePaneTextBackgroundColor(self, value: Color) -> None: ...
    @DebugBackgroundColor.setter
    def DebugBackgroundColor(self, value: Color) -> None: ...
    @DebugForegroundColor.setter
    def DebugForegroundColor(self, value: Color) -> None: ...
    @ErrorBackgroundColor.setter
    def ErrorBackgroundColor(self, value: Color) -> None: ...
    @ErrorForegroundColor.setter
    def ErrorForegroundColor(self, value: Color) -> None: ...
    @FontName.setter
    def FontName(self, value: str) -> None: ...
    @FontSize.setter
    def FontSize(self, value: int) -> None: ...
    @IntellisenseTimeoutInSeconds.setter
    def IntellisenseTimeoutInSeconds(self, value: int) -> None: ...
    @MruCount.setter
    def MruCount(self, value: int) -> None: ...
    @ScriptPaneBackgroundColor.setter
    def ScriptPaneBackgroundColor(self, value: Color) -> None: ...
    @ScriptPaneForegroundColor.setter
    def ScriptPaneForegroundColor(self, value: Color) -> None: ...
    @SelectedScriptPaneState.setter
    def SelectedScriptPaneState(self, value: SelectedScriptPaneState) -> None: ...
    @ShowDefaultSnippets.setter
    def ShowDefaultSnippets(self, value: bool) -> None: ...
    @ShowIntellisenseInConsolePane.setter
    def ShowIntellisenseInConsolePane(self, value: bool) -> None: ...
    @ShowIntellisenseInScriptPane.setter
    def ShowIntellisenseInScriptPane(self, value: bool) -> None: ...
    @ShowLineNumbers.setter
    def ShowLineNumbers(self, value: bool) -> None: ...
    @ShowOutlining.setter
    def ShowOutlining(self, value: bool) -> None: ...
    @ShowToolBar.setter
    def ShowToolBar(self, value: bool) -> None: ...
    @ShowWarningBeforeSavingOnRun.setter
    def ShowWarningBeforeSavingOnRun(self, value: bool) -> None: ...
    @ShowWarningForDuplicateFiles.setter
    def ShowWarningForDuplicateFiles(self, value: bool) -> None: ...
    @UseEnterToSelectInConsolePaneIntellisense.setter
    def UseEnterToSelectInConsolePaneIntellisense(self, value: bool) -> None: ...
    @UseEnterToSelectInScriptPaneIntellisense.setter
    def UseEnterToSelectInScriptPaneIntellisense(self, value: bool) -> None: ...
    @UseLocalHelp.setter
    def UseLocalHelp(self, value: bool) -> None: ...
    @VerboseBackgroundColor.setter
    def VerboseBackgroundColor(self, value: Color) -> None: ...
    @VerboseForegroundColor.setter
    def VerboseForegroundColor(self, value: Color) -> None: ...
    @WarningBackgroundColor.setter
    def WarningBackgroundColor(self, value: Color) -> None: ...
    @WarningForegroundColor.setter
    def WarningForegroundColor(self, value: Color) -> None: ...
    @Zoom.setter
    def Zoom(self, value: float) -> None: ...


class ISESnippet:
    @overload
    def Equals(self, other: ISESnippet) -> bool: ...
    @property
    def Author(self) -> str: ...
    @property
    def CodeFragment(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def DisplayTitle(self) -> str: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsTabSpecific(self) -> bool: ...
    @property
    def SchemaVersion(self) -> Version: ...


class ISESnippetCollection:
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> ISESnippet: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Load(self, filePathName: str) -> None: ...


class ObjectModelRoot:
    @property
    def CurrentFile(self) -> ISEFile: ...
    @property
    def CurrentPowerShellTab(self) -> PowerShellTab: ...
    @property
    def CurrentVisibleHorizontalTool(self) -> ISEAddOnTool: ...
    @property
    def CurrentVisibleVerticalTool(self) -> ISEAddOnTool: ...
    @property
    def Options(self) -> ISEOptions: ...
    @property
    def PowerShellTabs(self) -> PowerShellTabCollection: ...


class PowerShellTab:
    def add_AddOnToolAddedOrRemoved(self, value: EventHandler) -> None: ...
    def add_AddOnToolPaneOpenedOrClosed(self, value: EventHandler) -> None: ...
    def add_AddOnToolVisibilityChanged(self, value: EventHandler) -> None: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def add_ZoomLevelChanged(self, value: EventHandler) -> None: ...
    @property
    def AddOnsMenu(self) -> ISEMenuItem: ...
    @property
    def CanInvoke(self) -> bool: ...
    @property
    def ConsolePane(self) -> ConsoleEditor: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def ExpandedScript(self) -> bool: ...
    @property
    def Files(self) -> ISEFileCollection: ...
    @property
    def HorizontalAddOnTools(self) -> ISEAddOnToolCollection: ...
    @property
    def HorizontalAddOnToolsPaneOpened(self) -> bool: ...
    @property
    def Prompt(self) -> str: ...
    @property
    def ShowCommands(self) -> bool: ...
    @property
    def Snippets(self) -> ISESnippetCollection: ...
    @property
    def StatusText(self) -> str: ...
    @property
    def VerticalAddOnTools(self) -> ISEAddOnToolCollection: ...
    @property
    def VerticalAddOnToolsPaneOpened(self) -> bool: ...
    @property
    def VisibleHorizontalAddOnTools(self) -> ReadOnlyISEAddOnToolCollection: ...
    @property
    def VisibleVerticalAddOnTools(self) -> ReadOnlyISEAddOnToolCollection: ...
    @property
    def ZoomLevel(self) -> float: ...
    @overload
    def Invoke(self, script: str) -> None: ...
    @overload
    def Invoke(self, script: ScriptBlock) -> None: ...
    @overload
    def InvokeSynchronous(self, script: ScriptBlock) -> Collection: ...
    @overload
    def InvokeSynchronous(self, script: str) -> Collection: ...
    @overload
    def InvokeSynchronous(self, script: ScriptBlock, useNewScope: bool) -> Collection: ...
    @overload
    def InvokeSynchronous(self, script: str, useNewScope: bool) -> Collection: ...
    @overload
    def InvokeSynchronous(self, script: str, useNewScope: bool, millisecondsTimeout: int) -> Collection: ...
    def InvokeSynchronousCommand(self, command: str, useNewScope: bool, millisecondsTimeout: int) -> Collection: ...
    def remove_AddOnToolAddedOrRemoved(self, value: EventHandler) -> None: ...
    def remove_AddOnToolPaneOpenedOrClosed(self, value: EventHandler) -> None: ...
    def remove_AddOnToolVisibilityChanged(self, value: EventHandler) -> None: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def remove_ZoomLevelChanged(self, value: EventHandler) -> None: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @ExpandedScript.setter
    def ExpandedScript(self, value: bool) -> None: ...
    @HorizontalAddOnToolsPaneOpened.setter
    def HorizontalAddOnToolsPaneOpened(self, value: bool) -> None: ...
    @ShowCommands.setter
    def ShowCommands(self, value: bool) -> None: ...
    @VerticalAddOnToolsPaneOpened.setter
    def VerticalAddOnToolsPaneOpened(self, value: bool) -> None: ...
    @ZoomLevel.setter
    def ZoomLevel(self, value: float) -> None: ...


class PowerShellTabCollection:
    @overload
    def Add(self) -> PowerShellTab: ...
    @property
    def HasMultipleTabs(self) -> bool: ...
    @property
    def SelectedPowerShellTab(self) -> PowerShellTab: ...
    @SelectedPowerShellTab.setter
    def SelectedPowerShellTab(self, value: PowerShellTab) -> None: ...
    def SetSelectedPowerShellTab(self, powerShellTab: PowerShellTab) -> None: ...


class PSXmlTokenType:
    Tag = 0
    QuotedString = 1
    CommentDelimiter = 2
    Comment = 3
    ElementName = 4
    Attribute = 5
    Text = 6
    Quote = 7
    MarkupExtension = 8
    CharacterData = 9


class ReadOnlyISEAddOnToolCollection:
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @overload
    def Contains(self, control: UserControl) -> bool: ...
    @property
    def SelectedAddOnTool(self) -> ISEAddOnTool: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @SelectedAddOnTool.setter
    def SelectedAddOnTool(self, value: ISEAddOnTool) -> None: ...


class SelectedScriptPaneState:
    Top = 0
    Right = 1
    Maximized = 2


class SnippetStrings:
    pass


