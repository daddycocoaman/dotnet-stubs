from typing import Tuple, Set, Iterable, List


class AddMember(PSActivity):
    def __init__(self): ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def MemberType(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def NotePropertyMembers(self) -> InArgument: ...
    @property
    def NotePropertyName(self) -> InArgument: ...
    @property
    def NotePropertyValue(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SecondValue(self) -> InArgument: ...
    @property
    def TypeName(self) -> InArgument: ...
    @property
    def Value(self) -> InArgument: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @MemberType.setter
    def MemberType(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @NotePropertyMembers.setter
    def NotePropertyMembers(self, value: InArgument) -> None: ...
    @NotePropertyName.setter
    def NotePropertyName(self, value: InArgument) -> None: ...
    @NotePropertyValue.setter
    def NotePropertyValue(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @SecondValue.setter
    def SecondValue(self, value: InArgument) -> None: ...
    @TypeName.setter
    def TypeName(self, value: InArgument) -> None: ...
    @Value.setter
    def Value(self, value: InArgument) -> None: ...


class AddType(PSRemotingActivity):
    def __init__(self): ...
    @property
    def AssemblyName(self) -> InArgument: ...
    @property
    def CodeDomProvider(self) -> InArgument: ...
    @property
    def CompilerParameters(self) -> InArgument: ...
    @property
    def IgnoreWarnings(self) -> InArgument: ...
    @property
    def Language(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def MemberDefinition(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def Namespace(self) -> InArgument: ...
    @property
    def OutputAssembly(self) -> InArgument: ...
    @property
    def OutputType(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ReferencedAssemblies(self) -> InArgument: ...
    @property
    def TypeDefinition(self) -> InArgument: ...
    @property
    def UsingNamespace(self) -> InArgument: ...
    @AssemblyName.setter
    def AssemblyName(self, value: InArgument) -> None: ...
    @CodeDomProvider.setter
    def CodeDomProvider(self, value: InArgument) -> None: ...
    @CompilerParameters.setter
    def CompilerParameters(self, value: InArgument) -> None: ...
    @IgnoreWarnings.setter
    def IgnoreWarnings(self, value: InArgument) -> None: ...
    @Language.setter
    def Language(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @MemberDefinition.setter
    def MemberDefinition(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @Namespace.setter
    def Namespace(self, value: InArgument) -> None: ...
    @OutputAssembly.setter
    def OutputAssembly(self, value: InArgument) -> None: ...
    @OutputType.setter
    def OutputType(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @ReferencedAssemblies.setter
    def ReferencedAssemblies(self, value: InArgument) -> None: ...
    @TypeDefinition.setter
    def TypeDefinition(self, value: InArgument) -> None: ...
    @UsingNamespace.setter
    def UsingNamespace(self, value: InArgument) -> None: ...


class CompareObject(PSActivity):
    def __init__(self): ...
    @property
    def CaseSensitive(self) -> InArgument: ...
    @property
    def Culture(self) -> InArgument: ...
    @property
    def DifferenceObject(self) -> InArgument: ...
    @property
    def ExcludeDifferent(self) -> InArgument: ...
    @property
    def IncludeEqual(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Property(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def ReferenceObject(self) -> InArgument: ...
    @property
    def SyncWindow(self) -> InArgument: ...
    @CaseSensitive.setter
    def CaseSensitive(self, value: InArgument) -> None: ...
    @Culture.setter
    def Culture(self, value: InArgument) -> None: ...
    @DifferenceObject.setter
    def DifferenceObject(self, value: InArgument) -> None: ...
    @ExcludeDifferent.setter
    def ExcludeDifferent(self, value: InArgument) -> None: ...
    @IncludeEqual.setter
    def IncludeEqual(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Property.setter
    def Property(self, value: InArgument) -> None: ...
    @ReferenceObject.setter
    def ReferenceObject(self, value: InArgument) -> None: ...
    @SyncWindow.setter
    def SyncWindow(self, value: InArgument) -> None: ...


class ConvertFromCsv(PSActivity):
    def __init__(self): ...
    @property
    def Delimiter(self) -> InArgument: ...
    @property
    def Header(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def UseCulture(self) -> InArgument: ...
    @Delimiter.setter
    def Delimiter(self, value: InArgument) -> None: ...
    @Header.setter
    def Header(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @UseCulture.setter
    def UseCulture(self, value: InArgument) -> None: ...


class ConvertFromJson(PSActivity):
    def __init__(self): ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...


class ConvertFromString(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Delimiter(self) -> InArgument: ...
    @property
    def IncludeExtent(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def PropertyNames(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def TemplateContent(self) -> InArgument: ...
    @property
    def TemplateFile(self) -> InArgument: ...
    @property
    def UpdateTemplate(self) -> InArgument: ...
    @Delimiter.setter
    def Delimiter(self, value: InArgument) -> None: ...
    @IncludeExtent.setter
    def IncludeExtent(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @PropertyNames.setter
    def PropertyNames(self, value: InArgument) -> None: ...
    @TemplateContent.setter
    def TemplateContent(self, value: InArgument) -> None: ...
    @TemplateFile.setter
    def TemplateFile(self, value: InArgument) -> None: ...
    @UpdateTemplate.setter
    def UpdateTemplate(self, value: InArgument) -> None: ...


class ConvertFromStringData(PSActivity):
    def __init__(self): ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def StringData(self) -> InArgument: ...
    @StringData.setter
    def StringData(self, value: InArgument) -> None: ...


class ConvertToCsv(PSActivity):
    def __init__(self): ...
    @property
    def Delimiter(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def NoTypeInformation(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def UseCulture(self) -> InArgument: ...
    @Delimiter.setter
    def Delimiter(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @NoTypeInformation.setter
    def NoTypeInformation(self, value: InArgument) -> None: ...
    @UseCulture.setter
    def UseCulture(self, value: InArgument) -> None: ...


class ConvertToHtml(PSActivity):
    def __init__(self): ...
    @property
    def As(self) -> InArgument: ...
    @property
    def Body(self) -> InArgument: ...
    @property
    def CssUri(self) -> InArgument: ...
    @property
    def Fragment(self) -> InArgument: ...
    @property
    def Head(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def PostContent(self) -> InArgument: ...
    @property
    def PreContent(self) -> InArgument: ...
    @property
    def Property(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Title(self) -> InArgument: ...
    @As.setter
    def As(self, value: InArgument) -> None: ...
    @Body.setter
    def Body(self, value: InArgument) -> None: ...
    @CssUri.setter
    def CssUri(self, value: InArgument) -> None: ...
    @Fragment.setter
    def Fragment(self, value: InArgument) -> None: ...
    @Head.setter
    def Head(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @PostContent.setter
    def PostContent(self, value: InArgument) -> None: ...
    @PreContent.setter
    def PreContent(self, value: InArgument) -> None: ...
    @Property.setter
    def Property(self, value: InArgument) -> None: ...
    @Title.setter
    def Title(self, value: InArgument) -> None: ...


class ConvertToJson(PSActivity):
    def __init__(self): ...
    @property
    def Compress(self) -> InArgument: ...
    @property
    def Depth(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Compress.setter
    def Compress(self, value: InArgument) -> None: ...
    @Depth.setter
    def Depth(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...


class ConvertToXml(PSActivity):
    def __init__(self): ...
    @property
    def As(self) -> InArgument: ...
    @property
    def Depth(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def NoTypeInformation(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @As.setter
    def As(self, value: InArgument) -> None: ...
    @Depth.setter
    def Depth(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @NoTypeInformation.setter
    def NoTypeInformation(self, value: InArgument) -> None: ...


class ExportClixml(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Depth(self) -> InArgument: ...
    @property
    def Encoding(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def NoClobber(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Depth.setter
    def Depth(self, value: InArgument) -> None: ...
    @Encoding.setter
    def Encoding(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @NoClobber.setter
    def NoClobber(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class ExportCsv(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Append(self) -> InArgument: ...
    @property
    def Delimiter(self) -> InArgument: ...
    @property
    def Encoding(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def NoClobber(self) -> InArgument: ...
    @property
    def NoTypeInformation(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def UseCulture(self) -> InArgument: ...
    @Append.setter
    def Append(self, value: InArgument) -> None: ...
    @Delimiter.setter
    def Delimiter(self, value: InArgument) -> None: ...
    @Encoding.setter
    def Encoding(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @NoClobber.setter
    def NoClobber(self, value: InArgument) -> None: ...
    @NoTypeInformation.setter
    def NoTypeInformation(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @UseCulture.setter
    def UseCulture(self, value: InArgument) -> None: ...


class ExportFormatData(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def IncludeScriptBlock(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def NoClobber(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @IncludeScriptBlock.setter
    def IncludeScriptBlock(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @NoClobber.setter
    def NoClobber(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class GetCulture(PSRemotingActivity):
    def __init__(self): ...
    @property
    def PSCommandName(self) -> str: ...


class GetDate(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Date(self) -> InArgument: ...
    @property
    def Day(self) -> InArgument: ...
    @property
    def DisplayHint(self) -> InArgument: ...
    @property
    def Format(self) -> InArgument: ...
    @property
    def Hour(self) -> InArgument: ...
    @property
    def Millisecond(self) -> InArgument: ...
    @property
    def Minute(self) -> InArgument: ...
    @property
    def Month(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Second(self) -> InArgument: ...
    @property
    def UFormat(self) -> InArgument: ...
    @property
    def Year(self) -> InArgument: ...
    @Date.setter
    def Date(self, value: InArgument) -> None: ...
    @Day.setter
    def Day(self, value: InArgument) -> None: ...
    @DisplayHint.setter
    def DisplayHint(self, value: InArgument) -> None: ...
    @Format.setter
    def Format(self, value: InArgument) -> None: ...
    @Hour.setter
    def Hour(self, value: InArgument) -> None: ...
    @Millisecond.setter
    def Millisecond(self, value: InArgument) -> None: ...
    @Minute.setter
    def Minute(self, value: InArgument) -> None: ...
    @Month.setter
    def Month(self, value: InArgument) -> None: ...
    @Second.setter
    def Second(self, value: InArgument) -> None: ...
    @UFormat.setter
    def UFormat(self, value: InArgument) -> None: ...
    @Year.setter
    def Year(self, value: InArgument) -> None: ...


class GetEvent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def EventIdentifier(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SourceIdentifier(self) -> InArgument: ...
    @EventIdentifier.setter
    def EventIdentifier(self, value: InArgument) -> None: ...
    @SourceIdentifier.setter
    def SourceIdentifier(self, value: InArgument) -> None: ...


class GetEventSubscriber(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SourceIdentifier(self) -> InArgument: ...
    @property
    def SubscriptionId(self) -> InArgument: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @SourceIdentifier.setter
    def SourceIdentifier(self, value: InArgument) -> None: ...
    @SubscriptionId.setter
    def SubscriptionId(self, value: InArgument) -> None: ...


class GetHost(PSActivity):
    def __init__(self): ...
    @property
    def PSCommandName(self) -> str: ...


class GetMember(PSActivity):
    def __init__(self): ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def MemberType(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Static(self) -> InArgument: ...
    @property
    def View(self) -> InArgument: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @MemberType.setter
    def MemberType(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @Static.setter
    def Static(self, value: InArgument) -> None: ...
    @View.setter
    def View(self, value: InArgument) -> None: ...


class GetRandom(PSActivity):
    def __init__(self): ...
    @property
    def Count(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Maximum(self) -> InArgument: ...
    @property
    def Minimum(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SetSeed(self) -> InArgument: ...
    @Count.setter
    def Count(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Maximum.setter
    def Maximum(self, value: InArgument) -> None: ...
    @Minimum.setter
    def Minimum(self, value: InArgument) -> None: ...
    @SetSeed.setter
    def SetSeed(self, value: InArgument) -> None: ...


class GetTraceSource(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...


class GetTypeData(PSRemotingActivity):
    def __init__(self): ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def TypeName(self) -> InArgument: ...
    @TypeName.setter
    def TypeName(self, value: InArgument) -> None: ...


class GetUICulture(PSRemotingActivity):
    def __init__(self): ...
    @property
    def PSCommandName(self) -> str: ...


class GetUnique(PSActivity):
    def __init__(self): ...
    @property
    def AsString(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def OnType(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @AsString.setter
    def AsString(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @OnType.setter
    def OnType(self, value: InArgument) -> None: ...


class GroupObject(PSActivity):
    def __init__(self): ...
    @property
    def AsHashTable(self) -> InArgument: ...
    @property
    def AsString(self) -> InArgument: ...
    @property
    def CaseSensitive(self) -> InArgument: ...
    @property
    def Culture(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def NoElement(self) -> InArgument: ...
    @property
    def Property(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @AsHashTable.setter
    def AsHashTable(self, value: InArgument) -> None: ...
    @AsString.setter
    def AsString(self, value: InArgument) -> None: ...
    @CaseSensitive.setter
    def CaseSensitive(self, value: InArgument) -> None: ...
    @Culture.setter
    def Culture(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @NoElement.setter
    def NoElement(self, value: InArgument) -> None: ...
    @Property.setter
    def Property(self, value: InArgument) -> None: ...


class ImportClixml(PSRemotingActivity):
    def __init__(self): ...
    @property
    def First(self) -> InArgument: ...
    @property
    def IncludeTotalCount(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Skip(self) -> InArgument: ...
    @First.setter
    def First(self, value: InArgument) -> None: ...
    @IncludeTotalCount.setter
    def IncludeTotalCount(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Skip.setter
    def Skip(self, value: InArgument) -> None: ...


class ImportCsv(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Delimiter(self) -> InArgument: ...
    @property
    def Encoding(self) -> InArgument: ...
    @property
    def Header(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def UseCulture(self) -> InArgument: ...
    @Delimiter.setter
    def Delimiter(self, value: InArgument) -> None: ...
    @Encoding.setter
    def Encoding(self, value: InArgument) -> None: ...
    @Header.setter
    def Header(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @UseCulture.setter
    def UseCulture(self, value: InArgument) -> None: ...


class ImportLocalizedData(PSRemotingActivity):
    def __init__(self): ...
    @property
    def BaseDirectory(self) -> InArgument: ...
    @property
    def FileName(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SupportedCommand(self) -> InArgument: ...
    @property
    def UICulture(self) -> InArgument: ...
    @BaseDirectory.setter
    def BaseDirectory(self, value: InArgument) -> None: ...
    @FileName.setter
    def FileName(self, value: InArgument) -> None: ...
    @SupportedCommand.setter
    def SupportedCommand(self, value: InArgument) -> None: ...
    @UICulture.setter
    def UICulture(self, value: InArgument) -> None: ...


class InvokeExpression(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Command(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Command.setter
    def Command(self, value: InArgument) -> None: ...


class InvokeRestMethod(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Body(self) -> InArgument: ...
    @property
    def Certificate(self) -> InArgument: ...
    @property
    def CertificateThumbprint(self) -> InArgument: ...
    @property
    def ContentType(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def DisableKeepAlive(self) -> InArgument: ...
    @property
    def Headers(self) -> InArgument: ...
    @property
    def InFile(self) -> InArgument: ...
    @property
    def MaximumRedirection(self) -> InArgument: ...
    @property
    def Method(self) -> InArgument: ...
    @property
    def OutFile(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Proxy(self) -> InArgument: ...
    @property
    def ProxyCredential(self) -> InArgument: ...
    @property
    def ProxyUseDefaultCredentials(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SessionVariable(self) -> InArgument: ...
    @property
    def TimeoutSec(self) -> InArgument: ...
    @property
    def TransferEncoding(self) -> InArgument: ...
    @property
    def Uri(self) -> InArgument: ...
    @property
    def UseBasicParsing(self) -> InArgument: ...
    @property
    def UseDefaultCredentials(self) -> InArgument: ...
    @property
    def UserAgent(self) -> InArgument: ...
    @property
    def WebSession(self) -> InArgument: ...
    @Body.setter
    def Body(self, value: InArgument) -> None: ...
    @Certificate.setter
    def Certificate(self, value: InArgument) -> None: ...
    @CertificateThumbprint.setter
    def CertificateThumbprint(self, value: InArgument) -> None: ...
    @ContentType.setter
    def ContentType(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @DisableKeepAlive.setter
    def DisableKeepAlive(self, value: InArgument) -> None: ...
    @Headers.setter
    def Headers(self, value: InArgument) -> None: ...
    @InFile.setter
    def InFile(self, value: InArgument) -> None: ...
    @MaximumRedirection.setter
    def MaximumRedirection(self, value: InArgument) -> None: ...
    @Method.setter
    def Method(self, value: InArgument) -> None: ...
    @OutFile.setter
    def OutFile(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Proxy.setter
    def Proxy(self, value: InArgument) -> None: ...
    @ProxyCredential.setter
    def ProxyCredential(self, value: InArgument) -> None: ...
    @ProxyUseDefaultCredentials.setter
    def ProxyUseDefaultCredentials(self, value: InArgument) -> None: ...
    @SessionVariable.setter
    def SessionVariable(self, value: InArgument) -> None: ...
    @TimeoutSec.setter
    def TimeoutSec(self, value: InArgument) -> None: ...
    @TransferEncoding.setter
    def TransferEncoding(self, value: InArgument) -> None: ...
    @Uri.setter
    def Uri(self, value: InArgument) -> None: ...
    @UseBasicParsing.setter
    def UseBasicParsing(self, value: InArgument) -> None: ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: InArgument) -> None: ...
    @UserAgent.setter
    def UserAgent(self, value: InArgument) -> None: ...
    @WebSession.setter
    def WebSession(self, value: InArgument) -> None: ...


class InvokeWebRequest(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Body(self) -> InArgument: ...
    @property
    def Certificate(self) -> InArgument: ...
    @property
    def CertificateThumbprint(self) -> InArgument: ...
    @property
    def ContentType(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def DisableKeepAlive(self) -> InArgument: ...
    @property
    def Headers(self) -> InArgument: ...
    @property
    def InFile(self) -> InArgument: ...
    @property
    def MaximumRedirection(self) -> InArgument: ...
    @property
    def Method(self) -> InArgument: ...
    @property
    def OutFile(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def Proxy(self) -> InArgument: ...
    @property
    def ProxyCredential(self) -> InArgument: ...
    @property
    def ProxyUseDefaultCredentials(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SessionVariable(self) -> InArgument: ...
    @property
    def TimeoutSec(self) -> InArgument: ...
    @property
    def TransferEncoding(self) -> InArgument: ...
    @property
    def Uri(self) -> InArgument: ...
    @property
    def UseBasicParsing(self) -> InArgument: ...
    @property
    def UseDefaultCredentials(self) -> InArgument: ...
    @property
    def UserAgent(self) -> InArgument: ...
    @property
    def WebSession(self) -> InArgument: ...
    @Body.setter
    def Body(self, value: InArgument) -> None: ...
    @Certificate.setter
    def Certificate(self, value: InArgument) -> None: ...
    @CertificateThumbprint.setter
    def CertificateThumbprint(self, value: InArgument) -> None: ...
    @ContentType.setter
    def ContentType(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @DisableKeepAlive.setter
    def DisableKeepAlive(self, value: InArgument) -> None: ...
    @Headers.setter
    def Headers(self, value: InArgument) -> None: ...
    @InFile.setter
    def InFile(self, value: InArgument) -> None: ...
    @MaximumRedirection.setter
    def MaximumRedirection(self, value: InArgument) -> None: ...
    @Method.setter
    def Method(self, value: InArgument) -> None: ...
    @OutFile.setter
    def OutFile(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @Proxy.setter
    def Proxy(self, value: InArgument) -> None: ...
    @ProxyCredential.setter
    def ProxyCredential(self, value: InArgument) -> None: ...
    @ProxyUseDefaultCredentials.setter
    def ProxyUseDefaultCredentials(self, value: InArgument) -> None: ...
    @SessionVariable.setter
    def SessionVariable(self, value: InArgument) -> None: ...
    @TimeoutSec.setter
    def TimeoutSec(self, value: InArgument) -> None: ...
    @TransferEncoding.setter
    def TransferEncoding(self, value: InArgument) -> None: ...
    @Uri.setter
    def Uri(self, value: InArgument) -> None: ...
    @UseBasicParsing.setter
    def UseBasicParsing(self, value: InArgument) -> None: ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: InArgument) -> None: ...
    @UserAgent.setter
    def UserAgent(self, value: InArgument) -> None: ...
    @WebSession.setter
    def WebSession(self, value: InArgument) -> None: ...


class MeasureCommand(PSActivity):
    def __init__(self): ...
    @property
    def Expression(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Expression.setter
    def Expression(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...


class MeasureObject(PSActivity):
    def __init__(self): ...
    @property
    def Average(self) -> InArgument: ...
    @property
    def Character(self) -> InArgument: ...
    @property
    def IgnoreWhiteSpace(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Line(self) -> InArgument: ...
    @property
    def Maximum(self) -> InArgument: ...
    @property
    def Minimum(self) -> InArgument: ...
    @property
    def Property(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Sum(self) -> InArgument: ...
    @property
    def Word(self) -> InArgument: ...
    @Average.setter
    def Average(self, value: InArgument) -> None: ...
    @Character.setter
    def Character(self, value: InArgument) -> None: ...
    @IgnoreWhiteSpace.setter
    def IgnoreWhiteSpace(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Line.setter
    def Line(self, value: InArgument) -> None: ...
    @Maximum.setter
    def Maximum(self, value: InArgument) -> None: ...
    @Minimum.setter
    def Minimum(self, value: InArgument) -> None: ...
    @Property.setter
    def Property(self, value: InArgument) -> None: ...
    @Sum.setter
    def Sum(self, value: InArgument) -> None: ...
    @Word.setter
    def Word(self, value: InArgument) -> None: ...


class NewEvent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def EventArguments(self) -> InArgument: ...
    @property
    def MessageData(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Sender(self) -> InArgument: ...
    @property
    def SourceIdentifier(self) -> InArgument: ...
    @EventArguments.setter
    def EventArguments(self, value: InArgument) -> None: ...
    @MessageData.setter
    def MessageData(self, value: InArgument) -> None: ...
    @Sender.setter
    def Sender(self, value: InArgument) -> None: ...
    @SourceIdentifier.setter
    def SourceIdentifier(self, value: InArgument) -> None: ...


class NewTimeSpan(PSActivity):
    def __init__(self): ...
    @property
    def Days(self) -> InArgument: ...
    @property
    def End(self) -> InArgument: ...
    @property
    def Hours(self) -> InArgument: ...
    @property
    def Minutes(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Seconds(self) -> InArgument: ...
    @property
    def Start(self) -> InArgument: ...
    @Days.setter
    def Days(self, value: InArgument) -> None: ...
    @End.setter
    def End(self, value: InArgument) -> None: ...
    @Hours.setter
    def Hours(self, value: InArgument) -> None: ...
    @Minutes.setter
    def Minutes(self, value: InArgument) -> None: ...
    @Seconds.setter
    def Seconds(self, value: InArgument) -> None: ...
    @Start.setter
    def Start(self, value: InArgument) -> None: ...


class OutFile(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Append(self) -> InArgument: ...
    @property
    def Encoding(self) -> InArgument: ...
    @property
    def FilePath(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def NoClobber(self) -> InArgument: ...
    @property
    def NoNewline(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Width(self) -> InArgument: ...
    @Append.setter
    def Append(self, value: InArgument) -> None: ...
    @Encoding.setter
    def Encoding(self, value: InArgument) -> None: ...
    @FilePath.setter
    def FilePath(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @NoClobber.setter
    def NoClobber(self, value: InArgument) -> None: ...
    @NoNewline.setter
    def NoNewline(self, value: InArgument) -> None: ...
    @Width.setter
    def Width(self, value: InArgument) -> None: ...


class OutPrinter(PSRemotingActivity):
    def __init__(self): ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...


class OutString(PSActivity):
    def __init__(self): ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Stream(self) -> InArgument: ...
    @property
    def Width(self) -> InArgument: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Stream.setter
    def Stream(self, value: InArgument) -> None: ...
    @Width.setter
    def Width(self, value: InArgument) -> None: ...


class RegisterEngineEvent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Action(self) -> InArgument: ...
    @property
    def Forward(self) -> InArgument: ...
    @property
    def MaxTriggerCount(self) -> InArgument: ...
    @property
    def MessageData(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SourceIdentifier(self) -> InArgument: ...
    @property
    def SupportEvent(self) -> InArgument: ...
    @Action.setter
    def Action(self, value: InArgument) -> None: ...
    @Forward.setter
    def Forward(self, value: InArgument) -> None: ...
    @MaxTriggerCount.setter
    def MaxTriggerCount(self, value: InArgument) -> None: ...
    @MessageData.setter
    def MessageData(self, value: InArgument) -> None: ...
    @SourceIdentifier.setter
    def SourceIdentifier(self, value: InArgument) -> None: ...
    @SupportEvent.setter
    def SupportEvent(self, value: InArgument) -> None: ...


class RegisterObjectEvent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Action(self) -> InArgument: ...
    @property
    def EventName(self) -> InArgument: ...
    @property
    def Forward(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def MaxTriggerCount(self) -> InArgument: ...
    @property
    def MessageData(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SourceIdentifier(self) -> InArgument: ...
    @property
    def SupportEvent(self) -> InArgument: ...
    @Action.setter
    def Action(self, value: InArgument) -> None: ...
    @EventName.setter
    def EventName(self, value: InArgument) -> None: ...
    @Forward.setter
    def Forward(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @MaxTriggerCount.setter
    def MaxTriggerCount(self, value: InArgument) -> None: ...
    @MessageData.setter
    def MessageData(self, value: InArgument) -> None: ...
    @SourceIdentifier.setter
    def SourceIdentifier(self, value: InArgument) -> None: ...
    @SupportEvent.setter
    def SupportEvent(self, value: InArgument) -> None: ...


class RemoveEvent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def EventIdentifier(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SourceIdentifier(self) -> InArgument: ...
    @EventIdentifier.setter
    def EventIdentifier(self, value: InArgument) -> None: ...
    @SourceIdentifier.setter
    def SourceIdentifier(self, value: InArgument) -> None: ...


class SelectObject(PSActivity):
    def __init__(self): ...
    @property
    def ExcludeProperty(self) -> InArgument: ...
    @property
    def ExpandProperty(self) -> InArgument: ...
    @property
    def First(self) -> InArgument: ...
    @property
    def Index(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Last(self) -> InArgument: ...
    @property
    def Property(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Skip(self) -> InArgument: ...
    @property
    def SkipLast(self) -> InArgument: ...
    @property
    def Unique(self) -> InArgument: ...
    @property
    def Wait(self) -> InArgument: ...
    @ExcludeProperty.setter
    def ExcludeProperty(self, value: InArgument) -> None: ...
    @ExpandProperty.setter
    def ExpandProperty(self, value: InArgument) -> None: ...
    @First.setter
    def First(self, value: InArgument) -> None: ...
    @Index.setter
    def Index(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Last.setter
    def Last(self, value: InArgument) -> None: ...
    @Property.setter
    def Property(self, value: InArgument) -> None: ...
    @Skip.setter
    def Skip(self, value: InArgument) -> None: ...
    @SkipLast.setter
    def SkipLast(self, value: InArgument) -> None: ...
    @Unique.setter
    def Unique(self, value: InArgument) -> None: ...
    @Wait.setter
    def Wait(self, value: InArgument) -> None: ...


class SelectString(PSRemotingActivity):
    def __init__(self): ...
    @property
    def AllMatches(self) -> InArgument: ...
    @property
    def CaseSensitive(self) -> InArgument: ...
    @property
    def Context(self) -> InArgument: ...
    @property
    def Encoding(self) -> InArgument: ...
    @property
    def Exclude(self) -> InArgument: ...
    @property
    def Include(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def List(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def NotMatch(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def Pattern(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Quiet(self) -> InArgument: ...
    @property
    def SimpleMatch(self) -> InArgument: ...
    @AllMatches.setter
    def AllMatches(self, value: InArgument) -> None: ...
    @CaseSensitive.setter
    def CaseSensitive(self, value: InArgument) -> None: ...
    @Context.setter
    def Context(self, value: InArgument) -> None: ...
    @Encoding.setter
    def Encoding(self, value: InArgument) -> None: ...
    @Exclude.setter
    def Exclude(self, value: InArgument) -> None: ...
    @Include.setter
    def Include(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @List.setter
    def List(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @NotMatch.setter
    def NotMatch(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Pattern.setter
    def Pattern(self, value: InArgument) -> None: ...
    @Quiet.setter
    def Quiet(self, value: InArgument) -> None: ...
    @SimpleMatch.setter
    def SimpleMatch(self, value: InArgument) -> None: ...


class SelectXml(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Content(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Namespace(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Xml(self) -> InArgument: ...
    @property
    def XPath(self) -> InArgument: ...
    @Content.setter
    def Content(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Namespace.setter
    def Namespace(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...
    @Xml.setter
    def Xml(self, value: InArgument) -> None: ...
    @XPath.setter
    def XPath(self, value: InArgument) -> None: ...


class SendMailMessage(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Attachments(self) -> InArgument: ...
    @property
    def Bcc(self) -> InArgument: ...
    @property
    def Body(self) -> InArgument: ...
    @property
    def BodyAsHtml(self) -> InArgument: ...
    @property
    def Cc(self) -> InArgument: ...
    @property
    def Credential(self) -> InArgument: ...
    @property
    def DeliveryNotificationOption(self) -> InArgument: ...
    @property
    def Encoding(self) -> InArgument: ...
    @property
    def From(self) -> InArgument: ...
    @property
    def Port(self) -> InArgument: ...
    @property
    def Priority(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SmtpServer(self) -> InArgument: ...
    @property
    def Subject(self) -> InArgument: ...
    @property
    def To(self) -> InArgument: ...
    @property
    def UseSsl(self) -> InArgument: ...
    @Attachments.setter
    def Attachments(self, value: InArgument) -> None: ...
    @Bcc.setter
    def Bcc(self, value: InArgument) -> None: ...
    @Body.setter
    def Body(self, value: InArgument) -> None: ...
    @BodyAsHtml.setter
    def BodyAsHtml(self, value: InArgument) -> None: ...
    @Cc.setter
    def Cc(self, value: InArgument) -> None: ...
    @Credential.setter
    def Credential(self, value: InArgument) -> None: ...
    @DeliveryNotificationOption.setter
    def DeliveryNotificationOption(self, value: InArgument) -> None: ...
    @Encoding.setter
    def Encoding(self, value: InArgument) -> None: ...
    @From.setter
    def From(self, value: InArgument) -> None: ...
    @Port.setter
    def Port(self, value: InArgument) -> None: ...
    @Priority.setter
    def Priority(self, value: InArgument) -> None: ...
    @SmtpServer.setter
    def SmtpServer(self, value: InArgument) -> None: ...
    @Subject.setter
    def Subject(self, value: InArgument) -> None: ...
    @To.setter
    def To(self, value: InArgument) -> None: ...
    @UseSsl.setter
    def UseSsl(self, value: InArgument) -> None: ...


class SetDate(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Adjust(self) -> InArgument: ...
    @property
    def Date(self) -> InArgument: ...
    @property
    def DisplayHint(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Adjust.setter
    def Adjust(self, value: InArgument) -> None: ...
    @Date.setter
    def Date(self, value: InArgument) -> None: ...
    @DisplayHint.setter
    def DisplayHint(self, value: InArgument) -> None: ...


class SetTraceSource(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Debugger(self) -> InArgument: ...
    @property
    def FilePath(self) -> InArgument: ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def ListenerOption(self) -> InArgument: ...
    @property
    def Name(self) -> InArgument: ...
    @property
    def Option(self) -> InArgument: ...
    @property
    def PassThru(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def PSHost(self) -> InArgument: ...
    @property
    def RemoveFileListener(self) -> InArgument: ...
    @property
    def RemoveListener(self) -> InArgument: ...
    @Debugger.setter
    def Debugger(self, value: InArgument) -> None: ...
    @FilePath.setter
    def FilePath(self, value: InArgument) -> None: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @ListenerOption.setter
    def ListenerOption(self, value: InArgument) -> None: ...
    @Name.setter
    def Name(self, value: InArgument) -> None: ...
    @Option.setter
    def Option(self, value: InArgument) -> None: ...
    @PassThru.setter
    def PassThru(self, value: InArgument) -> None: ...
    @PSHost.setter
    def PSHost(self, value: InArgument) -> None: ...
    @RemoveFileListener.setter
    def RemoveFileListener(self, value: InArgument) -> None: ...
    @RemoveListener.setter
    def RemoveListener(self, value: InArgument) -> None: ...


class SortObject(PSActivity):
    def __init__(self): ...
    @property
    def CaseSensitive(self) -> InArgument: ...
    @property
    def Culture(self) -> InArgument: ...
    @property
    def Descending(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Property(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Unique(self) -> InArgument: ...
    @CaseSensitive.setter
    def CaseSensitive(self, value: InArgument) -> None: ...
    @Culture.setter
    def Culture(self, value: InArgument) -> None: ...
    @Descending.setter
    def Descending(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Property.setter
    def Property(self, value: InArgument) -> None: ...
    @Unique.setter
    def Unique(self, value: InArgument) -> None: ...


class StartSleep(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Milliseconds(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Seconds(self) -> InArgument: ...
    @Milliseconds.setter
    def Milliseconds(self, value: InArgument) -> None: ...
    @Seconds.setter
    def Seconds(self, value: InArgument) -> None: ...


class TeeObject(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Append(self) -> InArgument: ...
    @property
    def FilePath(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Variable(self) -> InArgument: ...
    @Append.setter
    def Append(self, value: InArgument) -> None: ...
    @FilePath.setter
    def FilePath(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Variable.setter
    def Variable(self, value: InArgument) -> None: ...


class UnblockFile(PSRemotingActivity):
    def __init__(self): ...
    @property
    def LiteralPath(self) -> InArgument: ...
    @property
    def Path(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @LiteralPath.setter
    def LiteralPath(self, value: InArgument) -> None: ...
    @Path.setter
    def Path(self, value: InArgument) -> None: ...


class UnregisterEvent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def Force(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SourceIdentifier(self) -> InArgument: ...
    @property
    def SubscriptionId(self) -> InArgument: ...
    @Force.setter
    def Force(self, value: InArgument) -> None: ...
    @SourceIdentifier.setter
    def SourceIdentifier(self, value: InArgument) -> None: ...
    @SubscriptionId.setter
    def SubscriptionId(self, value: InArgument) -> None: ...


class UpdateList(PSActivity):
    def __init__(self): ...
    @property
    def Add(self) -> InArgument: ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def Property(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Remove(self) -> InArgument: ...
    @property
    def Replace(self) -> InArgument: ...
    @Add.setter
    def Add(self, value: InArgument) -> None: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @Property.setter
    def Property(self, value: InArgument) -> None: ...
    @Remove.setter
    def Remove(self, value: InArgument) -> None: ...
    @Replace.setter
    def Replace(self, value: InArgument) -> None: ...


class WaitEvent(PSRemotingActivity):
    def __init__(self): ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SourceIdentifier(self) -> InArgument: ...
    @property
    def Timeout(self) -> InArgument: ...
    @SourceIdentifier.setter
    def SourceIdentifier(self, value: InArgument) -> None: ...
    @Timeout.setter
    def Timeout(self, value: InArgument) -> None: ...


class WriteDebug(PSActivity):
    def __init__(self): ...
    @property
    def Message(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Message.setter
    def Message(self, value: InArgument) -> None: ...


class WriteError(PSActivity):
    def __init__(self): ...
    @property
    def Category(self) -> InArgument: ...
    @property
    def CategoryActivity(self) -> InArgument: ...
    @property
    def CategoryReason(self) -> InArgument: ...
    @property
    def CategoryTargetName(self) -> InArgument: ...
    @property
    def CategoryTargetType(self) -> InArgument: ...
    @property
    def ErrorId(self) -> InArgument: ...
    @property
    def ErrorRecord(self) -> InArgument: ...
    @property
    def Exception(self) -> InArgument: ...
    @property
    def Message(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def RecommendedAction(self) -> InArgument: ...
    @property
    def TargetObject(self) -> InArgument: ...
    @Category.setter
    def Category(self, value: InArgument) -> None: ...
    @CategoryActivity.setter
    def CategoryActivity(self, value: InArgument) -> None: ...
    @CategoryReason.setter
    def CategoryReason(self, value: InArgument) -> None: ...
    @CategoryTargetName.setter
    def CategoryTargetName(self, value: InArgument) -> None: ...
    @CategoryTargetType.setter
    def CategoryTargetType(self, value: InArgument) -> None: ...
    @ErrorId.setter
    def ErrorId(self, value: InArgument) -> None: ...
    @ErrorRecord.setter
    def ErrorRecord(self, value: InArgument) -> None: ...
    @Exception.setter
    def Exception(self, value: InArgument) -> None: ...
    @Message.setter
    def Message(self, value: InArgument) -> None: ...
    @RecommendedAction.setter
    def RecommendedAction(self, value: InArgument) -> None: ...
    @TargetObject.setter
    def TargetObject(self, value: InArgument) -> None: ...


class WriteInformation(PSActivity):
    def __init__(self): ...
    @property
    def MessageData(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def Tags(self) -> InArgument: ...
    @MessageData.setter
    def MessageData(self, value: InArgument) -> None: ...
    @Tags.setter
    def Tags(self, value: InArgument) -> None: ...


class WriteOutput(PSActivity):
    def __init__(self): ...
    @property
    def InputObject(self) -> InArgument: ...
    @property
    def NoEnumerate(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @InputObject.setter
    def InputObject(self, value: InArgument) -> None: ...
    @NoEnumerate.setter
    def NoEnumerate(self, value: InArgument) -> None: ...


class WriteProgress(PSActivity):
    def __init__(self): ...
    @property
    def Activity(self) -> InArgument: ...
    @property
    def Completed(self) -> InArgument: ...
    @property
    def CurrentOperation(self) -> InArgument: ...
    @property
    def ParentId(self) -> InArgument: ...
    @property
    def PercentComplete(self) -> InArgument: ...
    @property
    def ProgressId(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @property
    def SecondsRemaining(self) -> InArgument: ...
    @property
    def SourceId(self) -> InArgument: ...
    @property
    def Status(self) -> InArgument: ...
    @Activity.setter
    def Activity(self, value: InArgument) -> None: ...
    @Completed.setter
    def Completed(self, value: InArgument) -> None: ...
    @CurrentOperation.setter
    def CurrentOperation(self, value: InArgument) -> None: ...
    @ParentId.setter
    def ParentId(self, value: InArgument) -> None: ...
    @PercentComplete.setter
    def PercentComplete(self, value: InArgument) -> None: ...
    @ProgressId.setter
    def ProgressId(self, value: InArgument) -> None: ...
    @SecondsRemaining.setter
    def SecondsRemaining(self, value: InArgument) -> None: ...
    @SourceId.setter
    def SourceId(self, value: InArgument) -> None: ...
    @Status.setter
    def Status(self, value: InArgument) -> None: ...


class WriteVerbose(PSActivity):
    def __init__(self): ...
    @property
    def Message(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Message.setter
    def Message(self, value: InArgument) -> None: ...


class WriteWarning(PSActivity):
    def __init__(self): ...
    @property
    def Message(self) -> InArgument: ...
    @property
    def PSCommandName(self) -> str: ...
    @Message.setter
    def Message(self, value: InArgument) -> None: ...
