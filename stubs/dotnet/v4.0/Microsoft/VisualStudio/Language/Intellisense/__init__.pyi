__all__ = ['Implementation']
from typing import Tuple, Set, Iterable, List




class Completion:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, displayText: str): ...
    @overload
    def __init__(self, displayText: str, insertionText: str, description: str, iconSource: ImageSource, iconAutomationText: str): ...
    @property
    def Description(self) -> str: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def IconAutomationText(self) -> str: ...
    @property
    def IconSource(self) -> ImageSource: ...
    @property
    def InsertionText(self) -> str: ...
    @property
    def Properties(self) -> PropertyCollection: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @DisplayText.setter
    def DisplayText(self, value: str) -> None: ...
    @IconAutomationText.setter
    def IconAutomationText(self, value: str) -> None: ...
    @IconSource.setter
    def IconSource(self, value: ImageSource) -> None: ...
    @InsertionText.setter
    def InsertionText(self, value: str) -> None: ...


class CompletionMatchType:
    MatchDisplayText = 0
    MatchInsertionText = 1


class CompletionPresenterStyle:
    def __init__(self): ...
    @property
    def AreGradientsAllowed(self) -> Nullable: ...
    @property
    def BackgroundBrush(self) -> Brush: ...
    @property
    def BorderBrush(self) -> Brush: ...
    @property
    def CompletionTextRunProperties(self) -> TextRunProperties: ...
    @property
    def SelectionBackgroundBrush(self) -> Brush: ...
    @property
    def SelectionBorderBrush(self) -> Brush: ...
    @property
    def SelectionTextRunProperties(self) -> TextRunProperties: ...
    @property
    def TabItemHotBackgroundBrush(self) -> Brush: ...
    @property
    def TabItemHotBorderBrush(self) -> Brush: ...
    @property
    def TabItemHotTextRunProperties(self) -> TextRunProperties: ...
    @property
    def TabPanelBackgroundBrush(self) -> Brush: ...
    @property
    def TooltipBackgroundBrush(self) -> Brush: ...
    @property
    def TooltipBorderBrush(self) -> Brush: ...
    @property
    def TooltipTextRunProperties(self) -> TextRunProperties: ...


class CompletionSelectionStatus:
    def __init__(self, completion: Completion, isSelected: bool, isUnique: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Completion(self) -> Completion: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def IsUnique(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(status1: CompletionSelectionStatus, status2: CompletionSelectionStatus) -> bool: ...
    def op_Inequality(status1: CompletionSelectionStatus, status2: CompletionSelectionStatus) -> bool: ...


class CompletionSet:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, moniker: str, displayName: str, applicableTo: ITrackingSpan, completions: Iterable[Completion], completionBuilders: Iterable[Completion]): ...
    def add_SelectionStatusChanged(self, value: EventHandler) -> None: ...
    def Filter(self) -> None: ...
    @property
    def ApplicableTo(self) -> ITrackingSpan: ...
    @property
    def CompletionBuilders(self) -> List[Completion]: ...
    @property
    def Completions(self) -> List[Completion]: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Moniker(self) -> str: ...
    @property
    def SelectionStatus(self) -> CompletionSelectionStatus: ...
    def Recalculate(self) -> None: ...
    def remove_SelectionStatusChanged(self, value: EventHandler) -> None: ...
    def SelectBestMatch(self) -> None: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @SelectionStatus.setter
    def SelectionStatus(self, value: CompletionSelectionStatus) -> None: ...


class CurrentParameterChangedEventArgs:
    def __init__(self, previousCurrentParameter: IParameter, newCurrentParameter: IParameter): ...
    @property
    def NewCurrentParameter(self) -> IParameter: ...
    @property
    def PreviousCurrentParameter(self) -> IParameter: ...




class ICompletionBroker:
    def CreateCompletionSession(self, textView: ITextView, triggerPoint: ITrackingPoint, trackCaret: bool) -> ICompletionSession: ...
    def DismissAllSessions(self, textView: ITextView) -> None: ...
    def GetSessions(self, textView: ITextView) -> ReadOnlyCollection: ...
    def IsCompletionActive(self, textView: ITextView) -> bool: ...
    @overload
    def TriggerCompletion(self, textView: ITextView) -> ICompletionSession: ...
    @overload
    def TriggerCompletion(self, textView: ITextView, triggerPoint: ITrackingPoint, trackCaret: bool) -> ICompletionSession: ...


class ICompletionSession:
    def add_Committed(self, value: EventHandler) -> None: ...
    def add_SelectedCompletionSetChanged(self, value: EventHandler) -> None: ...
    def Commit(self) -> None: ...
    def Filter(self) -> None: ...
    @property
    def CompletionSets(self) -> ReadOnlyObservableCollection: ...
    @property
    def IsStarted(self) -> bool: ...
    @property
    def SelectedCompletionSet(self) -> CompletionSet: ...
    def remove_Committed(self, value: EventHandler) -> None: ...
    def remove_SelectedCompletionSetChanged(self, value: EventHandler) -> None: ...
    @SelectedCompletionSet.setter
    def SelectedCompletionSet(self, value: CompletionSet) -> None: ...


class ICompletionSource:
    def AugmentCompletionSession(self, session: ICompletionSession, completionSets: List[CompletionSet]) -> None: ...


class ICompletionSourceProvider:
    def TryCreateCompletionSource(self, textBuffer: ITextBuffer) -> ICompletionSource: ...


class IconDescription:
    def __init__(self, group: StandardGlyphGroup, item: StandardGlyphItem): ...
    @property
    def Group(self) -> StandardGlyphGroup: ...
    @property
    def Item(self) -> StandardGlyphItem: ...
    def ToString(self) -> str: ...


class ICustomCommit:
    def Commit(self) -> None: ...


class ICustomIntellisensePresenter:
    def Render(self) -> None: ...


class ICustomKeyboardHandler:
    def CaptureKeyboard(self) -> bool: ...
    def ReleaseKeyboard(self) -> None: ...


class IGlyphService:
    def GetGlyph(self, group: StandardGlyphGroup, item: StandardGlyphItem) -> ImageSource: ...


class IIntellisenseCommandTarget:
    def ExecuteKeyboardCommand(self, command: IntellisenseKeyboardCommand) -> bool: ...


class IIntellisenseController:
    def ConnectSubjectBuffer(self, subjectBuffer: ITextBuffer) -> None: ...
    def Detach(self, textView: ITextView) -> None: ...
    def DisconnectSubjectBuffer(self, subjectBuffer: ITextBuffer) -> None: ...


class IIntellisenseControllerProvider:
    def TryCreateIntellisenseController(self, textView: ITextView, subjectBuffers: List[ITextBuffer]) -> IIntellisenseController: ...


class IIntellisensePresenter:
    @property
    def Session(self) -> IIntellisenseSession: ...


class IIntellisensePresenterProvider:
    def TryCreateIntellisensePresenter(self, session: IIntellisenseSession) -> IIntellisensePresenter: ...


class IIntellisenseSession:
    def add_Dismissed(self, value: EventHandler) -> None: ...
    def add_PresenterChanged(self, value: EventHandler) -> None: ...
    def add_Recalculated(self, value: EventHandler) -> None: ...
    def Collapse(self) -> None: ...
    def Dismiss(self) -> None: ...
    @property
    def IsDismissed(self) -> bool: ...
    @property
    def Presenter(self) -> IIntellisensePresenter: ...
    @property
    def TextView(self) -> ITextView: ...
    @overload
    def GetTriggerPoint(self, textBuffer: ITextBuffer) -> ITrackingPoint: ...
    @overload
    def GetTriggerPoint(self, textSnapshot: ITextSnapshot) -> Nullable: ...
    def Match(self) -> bool: ...
    def Recalculate(self) -> None: ...
    def remove_Dismissed(self, value: EventHandler) -> None: ...
    def remove_PresenterChanged(self, value: EventHandler) -> None: ...
    def remove_Recalculated(self, value: EventHandler) -> None: ...
    def Start(self) -> None: ...


class IIntellisenseSessionStack:
    def CollapseAllSessions(self) -> None: ...
    @property
    def Sessions(self) -> ReadOnlyObservableCollection: ...
    @property
    def TopSession(self) -> IIntellisenseSession: ...
    def MoveSessionToTop(self, session: IIntellisenseSession) -> None: ...
    def PopSession(self) -> IIntellisenseSession: ...
    def PushSession(self, session: IIntellisenseSession) -> None: ...


class IIntellisenseSessionStackMapService:
    def GetStackForTextView(self, textView: ITextView) -> IIntellisenseSessionStack: ...


class IntellisenseKeyboardCommand:
    Up = 0
    Down = 1
    PageUp = 2
    PageDown = 3
    TopLine = 4
    BottomLine = 5
    Home = 6
    End = 7
    Enter = 8
    Escape = 9
    IncreaseFilterLevel = 10
    DecreaseFilterLevel = 11


class IntellisenseSpaceReservationManagerNames:
    pass


class IParameter:
    @property
    def Documentation(self) -> str: ...
    @property
    def Locus(self) -> Span: ...
    @property
    def Name(self) -> str: ...
    @property
    def PrettyPrintedLocus(self) -> Span: ...
    @property
    def Signature(self) -> ISignature: ...


class IPopupIntellisensePresenter:
    def add_PopupStylesChanged(self, value: EventHandler) -> None: ...
    def add_PresentationSpanChanged(self, value: EventHandler) -> None: ...
    def add_SurfaceElementChanged(self, value: EventHandler) -> None: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def PopupStyles(self) -> PopupStyles: ...
    @property
    def PresentationSpan(self) -> ITrackingSpan: ...
    @property
    def SpaceReservationManagerName(self) -> str: ...
    @property
    def SurfaceElement(self) -> UIElement: ...
    def remove_PopupStylesChanged(self, value: EventHandler) -> None: ...
    def remove_PresentationSpanChanged(self, value: EventHandler) -> None: ...
    def remove_SurfaceElementChanged(self, value: EventHandler) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...


class IQuickInfoBroker:
    def CreateQuickInfoSession(self, textView: ITextView, triggerPoint: ITrackingPoint, trackMouse: bool) -> IQuickInfoSession: ...
    def GetSessions(self, textView: ITextView) -> ReadOnlyCollection: ...
    def IsQuickInfoActive(self, textView: ITextView) -> bool: ...
    @overload
    def TriggerQuickInfo(self, textView: ITextView) -> IQuickInfoSession: ...
    @overload
    def TriggerQuickInfo(self, textView: ITextView, triggerPoint: ITrackingPoint, trackMouse: bool) -> IQuickInfoSession: ...


class IQuickInfoSession:
    def add_ApplicableToSpanChanged(self, value: EventHandler) -> None: ...
    @property
    def ApplicableToSpan(self) -> ITrackingSpan: ...
    @property
    def QuickInfoContent(self) -> BulkObservableCollection: ...
    @property
    def TrackMouse(self) -> bool: ...
    def remove_ApplicableToSpanChanged(self, value: EventHandler) -> None: ...


class IQuickInfoSource:
    def AugmentQuickInfoSession(self, session: IQuickInfoSession, quickInfoContent: List[Object]) -> Tuple[ITrackingSpan]: ...


class IQuickInfoSourceProvider:
    def TryCreateQuickInfoSource(self, textBuffer: ITextBuffer) -> IQuickInfoSource: ...


class ISignature:
    def add_CurrentParameterChanged(self, value: EventHandler) -> None: ...
    @property
    def ApplicableToSpan(self) -> ITrackingSpan: ...
    @property
    def Content(self) -> str: ...
    @property
    def CurrentParameter(self) -> IParameter: ...
    @property
    def Documentation(self) -> str: ...
    @property
    def Parameters(self) -> ReadOnlyCollection: ...
    @property
    def PrettyPrintedContent(self) -> str: ...
    def remove_CurrentParameterChanged(self, value: EventHandler) -> None: ...


class ISignatureHelpBroker:
    def CreateSignatureHelpSession(self, textView: ITextView, triggerPoint: ITrackingPoint, trackCaret: bool) -> ISignatureHelpSession: ...
    def DismissAllSessions(self, textView: ITextView) -> None: ...
    def GetSessions(self, textView: ITextView) -> ReadOnlyCollection: ...
    def IsSignatureHelpActive(self, textView: ITextView) -> bool: ...
    @overload
    def TriggerSignatureHelp(self, textView: ITextView) -> ISignatureHelpSession: ...
    @overload
    def TriggerSignatureHelp(self, textView: ITextView, triggerPoint: ITrackingPoint, trackCaret: bool) -> ISignatureHelpSession: ...


class ISignatureHelpSession:
    def add_SelectedSignatureChanged(self, value: EventHandler) -> None: ...
    @property
    def SelectedSignature(self) -> ISignature: ...
    @property
    def Signatures(self) -> ReadOnlyObservableCollection: ...
    def remove_SelectedSignatureChanged(self, value: EventHandler) -> None: ...
    @SelectedSignature.setter
    def SelectedSignature(self, value: ISignature) -> None: ...


class ISignatureHelpSource:
    def AugmentSignatureHelpSession(self, session: ISignatureHelpSession, signatures: List[ISignature]) -> None: ...
    def GetBestMatch(self, session: ISignatureHelpSession) -> ISignature: ...


class ISignatureHelpSourceProvider:
    def TryCreateSignatureHelpSource(self, textBuffer: ITextBuffer) -> ISignatureHelpSource: ...


class ISmartTagAction:
    @property
    def ActionSets(self) -> ReadOnlyCollection: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Icon(self) -> ImageSource: ...
    @property
    def IsEnabled(self) -> bool: ...
    def Invoke(self) -> None: ...


class ISmartTagBroker:
    def CreateSmartTagSession(self, textView: ITextView, type: SmartTagType, triggerPoint: ITrackingPoint, state: SmartTagState) -> ISmartTagSession: ...
    def GetSessions(self, textView: ITextView) -> ReadOnlyCollection: ...
    def IsSmartTagActive(self, textView: ITextView) -> bool: ...


class ISmartTagSession:
    def add_ApplicableToSpanChanged(self, value: EventHandler) -> None: ...
    def add_IconSourceChanged(self, value: EventHandler) -> None: ...
    def add_StateChanged(self, value: EventHandler) -> None: ...
    def add_TagSpanChanged(self, value: EventHandler) -> None: ...
    @property
    def ActionSets(self) -> ReadOnlyObservableCollection: ...
    @property
    def ApplicableToSpan(self) -> ITrackingSpan: ...
    @property
    def IconSource(self) -> ImageSource: ...
    @property
    def State(self) -> SmartTagState: ...
    @property
    def TagSpan(self) -> ITrackingSpan: ...
    @property
    def TagText(self) -> str: ...
    @property
    def Type(self) -> SmartTagType: ...
    def remove_ApplicableToSpanChanged(self, value: EventHandler) -> None: ...
    def remove_IconSourceChanged(self, value: EventHandler) -> None: ...
    def remove_StateChanged(self, value: EventHandler) -> None: ...
    def remove_TagSpanChanged(self, value: EventHandler) -> None: ...
    @ApplicableToSpan.setter
    def ApplicableToSpan(self, value: ITrackingSpan) -> None: ...
    @IconSource.setter
    def IconSource(self, value: ImageSource) -> None: ...
    @State.setter
    def State(self, value: SmartTagState) -> None: ...
    @TagSpan.setter
    def TagSpan(self, value: ITrackingSpan) -> None: ...
    @TagText.setter
    def TagText(self, value: str) -> None: ...


class ISmartTagSource:
    def AugmentSmartTagSession(self, session: ISmartTagSession, smartTagActionSets: List[SmartTagActionSet]) -> None: ...


class ISmartTagSourceProvider:
    def TryCreateSmartTagSource(self, textBuffer: ITextBuffer) -> ISmartTagSource: ...


class ITextFormattable:
    def GetHighlightedTextRunProperties(self, defaultHighlightedTextRunProperties: TextRunProperties) -> TextRunProperties: ...
    def GetTextRunProperties(self, defaultTextRunProperties: TextRunProperties) -> TextRunProperties: ...




class IWpfKeyboardTrackingService:
    def BeginTrackingKeyboard(self, handle: IntPtr, messagesToCapture: List[UInt32]) -> None: ...
    def EndTrackingKeyboard(self) -> None: ...


class QuickInfoPresenterStyle:
    def __init__(self): ...
    @property
    def AreGradientsAllowed(self) -> Nullable: ...
    @property
    def BackgroundBrush(self) -> Brush: ...
    @property
    def BorderBrush(self) -> Brush: ...
    @property
    def QuickInfoAppearanceCategory(self) -> str: ...


class SelectedSignatureChangedEventArgs:
    def __init__(self, previousSelectedSignature: ISignature, newSelectedSignature: ISignature): ...
    @property
    def NewSelectedSignature(self) -> ISignature: ...
    @property
    def PreviousSelectedSignature(self) -> ISignature: ...


class SignatureHelpPresenterStyle:
    def __init__(self): ...
    @property
    def AreGradientsAllowed(self) -> Nullable: ...
    @property
    def BackgroundBrush(self) -> Brush: ...
    @property
    def BorderBrush(self) -> Brush: ...
    @property
    def CurrentParameterDocumentationTextRunProperties(self) -> TextRunProperties: ...
    @property
    def CurrentParameterNameTextRunProperties(self) -> TextRunProperties: ...
    @property
    def ForegroundBrush(self) -> Brush: ...
    @property
    def SignatureAppearanceCategory(self) -> str: ...
    @property
    def SignatureDocumentationTextRunProperties(self) -> TextRunProperties: ...
    @property
    def UpDownSignatureTextRunProperties(self) -> TextRunProperties: ...


class SmartTag:
    def __init__(self, smartTagType: SmartTagType, actionSets: ReadOnlyCollection): ...
    @property
    def ActionSets(self) -> ReadOnlyCollection: ...
    @property
    def SmartTagType(self) -> SmartTagType: ...


class SmartTagActionSet:
    def __init__(self, actions: ReadOnlyCollection): ...
    @property
    def Actions(self) -> ReadOnlyCollection: ...


class SmartTagState:
    Collapsed = 0
    Intermediate = 1
    Expanded = 2


class SmartTagType:
    Factoid = 0
    Ephemeral = 1


class StandardGlyphGroup:
    GlyphGroupClass = 0
    GlyphGroupConstant = 6
    GlyphGroupDelegate = 12
    GlyphGroupEnum = 18
    GlyphGroupEnumMember = 24
    GlyphGroupEvent = 30
    GlyphGroupException = 36
    GlyphGroupField = 42
    GlyphGroupInterface = 48
    GlyphGroupMacro = 54
    GlyphGroupMap = 60
    GlyphGroupMapItem = 66
    GlyphGroupMethod = 72
    GlyphGroupOverload = 78
    GlyphGroupModule = 84
    GlyphGroupNamespace = 90
    GlyphGroupOperator = 96
    GlyphGroupProperty = 102
    GlyphGroupStruct = 108
    GlyphGroupTemplate = 114
    GlyphGroupTypedef = 120
    GlyphGroupType = 126
    GlyphGroupUnion = 132
    GlyphGroupVariable = 138
    GlyphGroupValueType = 144
    GlyphGroupIntrinsic = 150
    GlyphGroupJSharpMethod = 156
    GlyphGroupJSharpField = 162
    GlyphGroupJSharpClass = 168
    GlyphGroupJSharpNamespace = 174
    GlyphGroupJSharpInterface = 180
    GlyphGroupError = 186
    GlyphBscFile = 191
    GlyphAssembly = 192
    GlyphLibrary = 193
    GlyphVBProject = 194
    GlyphCoolProject = 196
    GlyphCppProject = 199
    GlyphDialogId = 200
    GlyphOpenFolder = 201
    GlyphClosedFolder = 202
    GlyphArrow = 203
    GlyphCSharpFile = 204
    GlyphCSharpExpansion = 205
    GlyphKeyword = 206
    GlyphInformation = 207
    GlyphReference = 208
    GlyphRecursion = 209
    GlyphXmlItem = 210
    GlyphJSharpProject = 211
    GlyphJSharpDocument = 212
    GlyphForwardType = 213
    GlyphCallersGraph = 214
    GlyphCallGraph = 215
    GlyphWarning = 216
    GlyphMaybeReference = 217
    GlyphMaybeCaller = 218
    GlyphMaybeCall = 219
    GlyphExtensionMethod = 220
    GlyphExtensionMethodInternal = 221
    GlyphExtensionMethodFriend = 222
    GlyphExtensionMethodProtected = 223
    GlyphExtensionMethodPrivate = 224
    GlyphExtensionMethodShortcut = 225
    GlyphXmlAttribute = 226
    GlyphXmlChild = 227
    GlyphXmlDescendant = 228
    GlyphXmlNamespace = 229
    GlyphXmlAttributeQuestion = 230
    GlyphXmlAttributeCheck = 231
    GlyphXmlChildQuestion = 232
    GlyphXmlChildCheck = 233
    GlyphXmlDescendantQuestion = 234
    GlyphXmlDescendantCheck = 235
    GlyphGroupUnknown = 236


class StandardGlyphItem:
    GlyphItemPublic = 0
    GlyphItemInternal = 1
    GlyphItemFriend = 2
    GlyphItemProtected = 3
    GlyphItemPrivate = 4
    GlyphItemShortcut = 5
    TotalGlyphItems = 6


class UIElementType:
    Small = 0
    Large = 1
    Tooltip = 2


