__all__ = ['Standalone']
from typing import Tuple, Set, Iterable, List


class FindData:
    @overload
    def __init__(self, searchPattern: str, textSnapshot: ITextSnapshot): ...
    @overload
    def __init__(self, searchPattern: str, textSnapshot: ITextSnapshot, findOptions: FindOptions, textStructureNavigator: ITextStructureNavigator): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def FindOptions(self) -> FindOptions: ...
    @property
    def SearchString(self) -> str: ...
    @property
    def TextSnapshotToSearch(self) -> ITextSnapshot: ...
    @property
    def TextStructureNavigator(self) -> ITextStructureNavigator: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(data1: FindData, data2: FindData) -> bool: ...
    def op_Inequality(data1: FindData, data2: FindData) -> bool: ...
    @FindOptions.setter
    def FindOptions(self, value: FindOptions) -> None: ...
    @SearchString.setter
    def SearchString(self, value: str) -> None: ...
    @TextSnapshotToSearch.setter
    def TextSnapshotToSearch(self, value: ITextSnapshot) -> None: ...
    @TextStructureNavigator.setter
    def TextStructureNavigator(self, value: ITextStructureNavigator) -> None: ...
    def ToString(self) -> str: ...


class FindOptions:
    #None = 0
    MatchCase = 1
    UseRegularExpressions = 2
    WholeWord = 4
    SearchReverse = 8


class IEditorOperations:
    def AddAfterTextBufferChangePrimitive(self) -> None: ...
    def AddBeforeTextBufferChangePrimitive(self) -> None: ...
    def Backspace(self) -> bool: ...
    def Capitalize(self) -> bool: ...
    def ConvertSpacesToTabs(self) -> bool: ...
    def ConvertTabsToSpaces(self) -> bool: ...
    def CopySelection(self) -> bool: ...
    def CutFullLine(self) -> bool: ...
    def CutSelection(self) -> bool: ...
    def DecreaseLineIndent(self) -> bool: ...
    def Delete(self) -> bool: ...
    def DeleteBlankLines(self) -> bool: ...
    def DeleteFullLine(self) -> bool: ...
    def DeleteHorizontalWhiteSpace(self) -> bool: ...
    def DeleteToBeginningOfLine(self) -> bool: ...
    def DeleteToEndOfLine(self) -> bool: ...
    def DeleteWordToLeft(self) -> bool: ...
    def DeleteWordToRight(self) -> bool: ...
    def ExtendSelection(self, newEnd: int) -> None: ...
    @property
    def CanCut(self) -> bool: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def CanPaste(self) -> bool: ...
    @property
    def Options(self) -> IEditorOptions: ...
    @property
    def ProvisionalCompositionSpan(self) -> ITrackingSpan: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def TextView(self) -> ITextView: ...
    def GetWhitespaceForVirtualSpace(self, point: VirtualSnapshotPoint) -> str: ...
    def GotoLine(self, lineNumber: int) -> None: ...
    def IncreaseLineIndent(self) -> bool: ...
    def Indent(self) -> bool: ...
    def InsertFile(self, filePath: str) -> bool: ...
    def InsertNewLine(self) -> bool: ...
    def InsertProvisionalText(self, text: str) -> bool: ...
    def InsertText(self, text: str) -> bool: ...
    def InsertTextAsBox(self, text: str) -> Tuple[bool, VirtualSnapshotPoint, VirtualSnapshotPoint]: ...
    def MakeLowercase(self) -> bool: ...
    def MakeUppercase(self) -> bool: ...
    def MoveCaret(self, textLine: ITextViewLine, horizontalOffset: float, extendSelection: bool) -> None: ...
    def MoveCurrentLineToBottom(self) -> None: ...
    def MoveCurrentLineToTop(self) -> None: ...
    def MoveLineDown(self, extendSelection: bool) -> None: ...
    def MoveLineUp(self, extendSelection: bool) -> None: ...
    def MoveToBottomOfView(self, extendSelection: bool) -> None: ...
    def MoveToEndOfDocument(self, extendSelection: bool) -> None: ...
    def MoveToEndOfLine(self, extendSelection: bool) -> None: ...
    def MoveToHome(self, extendSelection: bool) -> None: ...
    def MoveToLastNonWhiteSpaceCharacter(self, extendSelection: bool) -> None: ...
    def MoveToNextCharacter(self, extendSelection: bool) -> None: ...
    def MoveToNextWord(self, extendSelection: bool) -> None: ...
    def MoveToPreviousCharacter(self, extendSelection: bool) -> None: ...
    def MoveToPreviousWord(self, extendSelection: bool) -> None: ...
    def MoveToStartOfDocument(self, extendSelection: bool) -> None: ...
    def MoveToStartOfLine(self, extendSelection: bool) -> None: ...
    def MoveToStartOfLineAfterWhiteSpace(self, extendSelection: bool) -> None: ...
    def MoveToStartOfNextLineAfterWhiteSpace(self, extendSelection: bool) -> None: ...
    def MoveToStartOfPreviousLineAfterWhiteSpace(self, extendSelection: bool) -> None: ...
    def MoveToTopOfView(self, extendSelection: bool) -> None: ...
    def NormalizeLineEndings(self, replacement: str) -> bool: ...
    def OpenLineAbove(self) -> bool: ...
    def OpenLineBelow(self) -> bool: ...
    def PageDown(self, extendSelection: bool) -> None: ...
    def PageUp(self, extendSelection: bool) -> None: ...
    def Paste(self) -> bool: ...
    def ReplaceAllMatches(self, searchText: str, replaceText: str, matchCase: bool, matchWholeWord: bool, useRegularExpressions: bool) -> int: ...
    def ReplaceSelection(self, text: str) -> bool: ...
    def ReplaceText(self, replaceSpan: Span, text: str) -> bool: ...
    def ResetSelection(self) -> None: ...
    def ScrollColumnLeft(self) -> None: ...
    def ScrollColumnRight(self) -> None: ...
    def ScrollDownAndMoveCaretIfNecessary(self) -> None: ...
    def ScrollLineBottom(self) -> None: ...
    def ScrollLineCenter(self) -> None: ...
    def ScrollLineTop(self) -> None: ...
    def ScrollPageDown(self) -> None: ...
    def ScrollPageUp(self) -> None: ...
    def ScrollUpAndMoveCaretIfNecessary(self) -> None: ...
    def SelectAll(self) -> None: ...
    @overload
    def SelectAndMoveCaret(self, anchorPoint: VirtualSnapshotPoint, activePoint: VirtualSnapshotPoint) -> None: ...
    @overload
    def SelectAndMoveCaret(self, anchorPoint: VirtualSnapshotPoint, activePoint: VirtualSnapshotPoint, selectionMode: TextSelectionMode) -> None: ...
    @overload
    def SelectAndMoveCaret(self, anchorPoint: VirtualSnapshotPoint, activePoint: VirtualSnapshotPoint, selectionMode: TextSelectionMode, scrollOptions: Nullable) -> None: ...
    def SelectCurrentWord(self) -> None: ...
    def SelectEnclosing(self) -> None: ...
    def SelectFirstChild(self) -> None: ...
    def SelectLine(self, viewLine: ITextViewLine, extendSelection: bool) -> None: ...
    def SelectNextSibling(self, extendSelection: bool) -> None: ...
    def SelectPreviousSibling(self, extendSelection: bool) -> None: ...
    def SwapCaretAndAnchor(self) -> None: ...
    def Tabify(self) -> bool: ...
    def ToggleCase(self) -> bool: ...
    def TransposeCharacter(self) -> bool: ...
    def TransposeLine(self) -> bool: ...
    def TransposeWord(self) -> bool: ...
    def Unindent(self) -> bool: ...
    def Untabify(self) -> bool: ...
    def ZoomIn(self) -> None: ...
    def ZoomOut(self) -> None: ...
    def ZoomTo(self, zoomLevel: float) -> None: ...


class IEditorOperationsFactoryService:
    def GetEditorOperations(self, textView: ITextView) -> IEditorOperations: ...


class IMergeTextUndoTransactionPolicy:
    def CanMerge(self, newerTransaction: ITextUndoTransaction, olderTransaction: ITextUndoTransaction) -> bool: ...
    def PerformTransactionMerge(self, existingTransaction: ITextUndoTransaction, newTransaction: ITextUndoTransaction) -> None: ...
    def TestCompatiblePolicy(self, other: IMergeTextUndoTransactionPolicy) -> bool: ...


class ITextBufferUndoManager:
    @property
    def TextBuffer(self) -> ITextBuffer: ...
    @property
    def TextBufferUndoHistory(self) -> ITextUndoHistory: ...
    def UnregisterUndoHistory(self) -> None: ...


class ITextBufferUndoManagerProvider:
    def GetTextBufferUndoManager(self, textBuffer: ITextBuffer) -> ITextBufferUndoManager: ...
    def RemoveTextBufferUndoManager(self, textBuffer: ITextBuffer) -> None: ...


class ITextSearchService:
    def FindAll(self, findData: FindData) -> Collection: ...
    def FindNext(self, startIndex: int, wraparound: bool, findData: FindData) -> Nullable: ...


class ITextStructureNavigator:
    @property
    def ContentType(self) -> IContentType: ...
    def GetExtentOfWord(self, currentPosition: SnapshotPoint) -> TextExtent: ...
    def GetSpanOfEnclosing(self, activeSpan: SnapshotSpan) -> SnapshotSpan: ...
    def GetSpanOfFirstChild(self, activeSpan: SnapshotSpan) -> SnapshotSpan: ...
    def GetSpanOfNextSibling(self, activeSpan: SnapshotSpan) -> SnapshotSpan: ...
    def GetSpanOfPreviousSibling(self, activeSpan: SnapshotSpan) -> SnapshotSpan: ...


class ITextStructureNavigatorProvider:
    def CreateTextStructureNavigator(self, textBuffer: ITextBuffer) -> ITextStructureNavigator: ...


class ITextStructureNavigatorSelectorService:
    def CreateTextStructureNavigator(self, textBuffer: ITextBuffer, contentType: IContentType) -> ITextStructureNavigator: ...
    def GetTextStructureNavigator(self, textBuffer: ITextBuffer) -> ITextStructureNavigator: ...


class ITextUndoHistory:
    def add_UndoRedoHappened(self, value: EventHandler) -> None: ...
    def add_UndoTransactionCompleted(self, value: EventHandler) -> None: ...
    def CreateTransaction(self, description: str) -> ITextUndoTransaction: ...
    @property
    def CanRedo(self) -> bool: ...
    @property
    def CanUndo(self) -> bool: ...
    @property
    def CurrentTransaction(self) -> ITextUndoTransaction: ...
    @property
    def LastRedoTransaction(self) -> ITextUndoTransaction: ...
    @property
    def LastUndoTransaction(self) -> ITextUndoTransaction: ...
    @property
    def RedoDescription(self) -> str: ...
    @property
    def RedoStack(self) -> Iterable[ITextUndoTransaction]: ...
    @property
    def State(self) -> TextUndoHistoryState: ...
    @property
    def UndoDescription(self) -> str: ...
    @property
    def UndoStack(self) -> Iterable[ITextUndoTransaction]: ...
    def Redo(self, count: int) -> None: ...
    def remove_UndoRedoHappened(self, value: EventHandler) -> None: ...
    def remove_UndoTransactionCompleted(self, value: EventHandler) -> None: ...
    def Undo(self, count: int) -> None: ...


class ITextUndoHistoryRegistry:
    def AttachHistory(self, context: Object, history: ITextUndoHistory) -> None: ...
    def GetHistory(self, context: Object) -> ITextUndoHistory: ...
    def RegisterHistory(self, context: Object) -> ITextUndoHistory: ...
    def RemoveHistory(self, history: ITextUndoHistory) -> None: ...
    def TryGetHistory(self, context: Object) -> Tuple[bool, ITextUndoHistory]: ...


class ITextUndoPrimitive:
    def CanMerge(self, older: ITextUndoPrimitive) -> bool: ...
    def Do(self) -> None: ...
    @property
    def CanRedo(self) -> bool: ...
    @property
    def CanUndo(self) -> bool: ...
    @property
    def Parent(self) -> ITextUndoTransaction: ...
    def Merge(self, older: ITextUndoPrimitive) -> ITextUndoPrimitive: ...
    @Parent.setter
    def Parent(self, value: ITextUndoTransaction) -> None: ...
    def Undo(self) -> None: ...


class ITextUndoTransaction:
    def AddUndo(self, undo: ITextUndoPrimitive) -> None: ...
    def Cancel(self) -> None: ...
    def Complete(self) -> None: ...
    def Do(self) -> None: ...
    @property
    def CanRedo(self) -> bool: ...
    @property
    def CanUndo(self) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def History(self) -> ITextUndoHistory: ...
    @property
    def MergePolicy(self) -> IMergeTextUndoTransactionPolicy: ...
    @property
    def Parent(self) -> ITextUndoTransaction: ...
    @property
    def State(self) -> UndoTransactionState: ...
    @property
    def UndoPrimitives(self) -> List[ITextUndoPrimitive]: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @MergePolicy.setter
    def MergePolicy(self, value: IMergeTextUndoTransactionPolicy) -> None: ...
    def Undo(self) -> None: ...


class TextExtent:
    @overload
    def __init__(self, textExtent: TextExtent): ...
    @overload
    def __init__(self, span: SnapshotSpan, isSignificant: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsSignificant(self) -> bool: ...
    @property
    def Span(self) -> SnapshotSpan: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(extent1: TextExtent, extent2: TextExtent) -> bool: ...
    def op_Inequality(extent1: TextExtent, extent2: TextExtent) -> bool: ...


class TextUndoHistoryState:
    Idle = 0
    Undoing = 1
    Redoing = 2


class TextUndoRedoEventArgs:
    def __init__(self, state: TextUndoHistoryState, transaction: ITextUndoTransaction): ...
    @property
    def State(self) -> TextUndoHistoryState: ...
    @property
    def Transaction(self) -> ITextUndoTransaction: ...


class TextUndoTransactionCompletedEventArgs:
    def __init__(self, transaction: ITextUndoTransaction, result: TextUndoTransactionCompletionResult): ...
    @property
    def Result(self) -> TextUndoTransactionCompletionResult: ...
    @property
    def Transaction(self) -> ITextUndoTransaction: ...


class TextUndoTransactionCompletionResult:
    TransactionAdded = 0
    TransactionMerged = 1


class UndoTransactionState:
    Open = 0
    Completed = 1
    Canceled = 2
    Redoing = 3
    Undoing = 4
    Undone = 5
    Invalid = 6
