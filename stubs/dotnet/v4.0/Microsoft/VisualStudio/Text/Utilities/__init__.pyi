__all__ = ['Automation']
from typing import Tuple, Set, Iterable, List


class GeometryAdornment:
    def __init__(self, borderPen: Pen, fillBrush: Brush, geometry: Geometry): ...


class IContentTypeAndTextViewRoleMetadata:
    pass


class IContentTypeMetadata:
    @property
    def ContentTypes(self) -> Iterable[str]: ...


class IEncodingDetectorMetadata:
    pass


class IOrderableContentTypeAndTextViewRoleMetadata:
    pass


class IOrderableContentTypeMetadata:
    pass


class ITextViewRoleMetadata:
    @property
    def TextViewRoles(self) -> Iterable[str]: ...


class IWpfTextViewMarginMetadata:
    @property
    def GridCellLength(self) -> float: ...
    @property
    def GridUnitType(self) -> GridUnitType: ...
    @property
    def MarginContainer(self) -> str: ...




class ProjectionSpanDifference:
    def __init__(self, differenceCollection: IDifferenceCollection, insertedSpans: ReadOnlyCollection, deletedSpans: ReadOnlyCollection): ...
    @property
    def DeletedSpans(self) -> ReadOnlyCollection: ...
    @property
    def DifferenceCollection(self) -> IDifferenceCollection: ...
    @property
    def InsertedSpans(self) -> ReadOnlyCollection: ...


class Strings:
    @property
    def Backslash() -> str: ...
    @property
    def Capital() -> str: ...
    @property
    def ChildElementsNotSupported() -> str: ...
    @property
    def Colon() -> str: ...
    @property
    def Comma() -> str: ...
    @property
    def Culture() -> CultureInfo: ...
    @property
    def DoubleQuote() -> str: ...
    @property
    def InvalidTextMovementUnit() -> str: ...
    @property
    def LeftAngledBracket() -> str: ...
    @property
    def LeftCurlyBrace() -> str: ...
    @property
    def LeftParenthesis() -> str: ...
    @property
    def LeftSquareBracket() -> str: ...
    @property
    def Period() -> str: ...
    @property
    def QuestionMark() -> str: ...
    @property
    def RangeNotValid() -> str: ...
    @property
    def ResourceManager() -> ResourceManager: ...
    @property
    def RightAngledBracket() -> str: ...
    @property
    def RightCurlyBrace() -> str: ...
    @property
    def RightParenthesis() -> str: ...
    @property
    def RightSquareBracket() -> str: ...
    @property
    def Semicolon() -> str: ...
    @property
    def SingleQuote() -> str: ...
    @property
    def Slash() -> str: ...
    @property
    def TargetRangeNotValid() -> str: ...
    @property
    def UnsupportedSearchBasedOnTextFormatted() -> str: ...
    @Culture.setter
    def Culture(value: CultureInfo) -> None: ...






class WeakReferenceForDictionaryKey:
    def __init__(self, target: Object): ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class WpfHelper:
    def AttachContext(hwndSource: HwndSource, imeContext: IntPtr) -> IntPtr: ...
    def BrushesEqual(brush: Brush, other: Brush) -> bool: ...
    def ConfirmReconvertString(lParam: IntPtr, selection: SnapshotSpan) -> SnapshotSpan: ...
    def EnableImmComposition() -> None: ...
    def FlushImmCompositionString(immContext: IntPtr) -> None: ...
    def GetDefaultIMEWnd() -> IntPtr: ...
    def GetImmCompositionString(immContext: IntPtr, dwIndex: int) -> str: ...
    def GetImmContext(hwnd: IntPtr) -> IntPtr: ...
    def GetKeyboardLayout() -> IntPtr: ...
    def GetRootVisual(visual: Visual) -> Visual: ...
    def GetScreenRect(screenCoordinates: Point) -> Rect: ...
    def HanjaConversion(context: IntPtr, keyboardLayout: IntPtr, selection: Char) -> bool: ...
    def ImmIsIME(hkl: IntPtr) -> bool: ...
    def ImmNotifyIME(immContext: IntPtr, dwAction: int, dwIndex: int, dwValue: int) -> bool: ...
    def ReconvertString(lParam: IntPtr, selection: SnapshotSpan) -> IntPtr: ...
    def ReleaseContext(hwnd: IntPtr, immContext: IntPtr) -> bool: ...
    def SetCompositionPositionAndHeight(source: HwndSource, immContext: IntPtr, baseFont: str, compositionFont: str, topPaddingOverride: float, bottomPaddingOverride: float, heightPaddingOverride: float, compositionTopLeft: Point, textHeight: float, relativeTo: Visual, viewTopLeft: Point, viewBottomRight: Point) -> bool: ...
    def SetNoTopmost(visual: Visual) -> None: ...
    def TypefacesEqual(typeface: Typeface, other: Typeface) -> bool: ...


