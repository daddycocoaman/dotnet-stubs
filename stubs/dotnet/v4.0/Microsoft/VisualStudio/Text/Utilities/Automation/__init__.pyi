from typing import Tuple, Set, Iterable, List


class AutomationProperties:
    @overload
    def __init__(self, className: str, automationId: str, name: str, helpText: str, wpfTextView: IWpfTextView): ...
    @overload
    def __init__(self, className: str, automationId: str, name: str, helpText: str, controlType: AutomationControlType, wpfTextView: IWpfTextView): ...
    def AddPattern(self, patternInterface: PatternInterface, patternHandler: Object) -> None: ...
    @property
    def AutomationId(self) -> str: ...
    @property
    def ClassName(self) -> str: ...
    @property
    def ControlType(self) -> AutomationControlType: ...
    @property
    def HelpText(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def TextView(self) -> IWpfTextView: ...
    def GetPatternProvider(self, patternInterface: PatternInterface) -> Object: ...
    @AutomationId.setter
    def AutomationId(self, value: str) -> None: ...
    @ClassName.setter
    def ClassName(self, value: str) -> None: ...
    @HelpText.setter
    def HelpText(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...




class CustomReadOnlyValueProvider:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> str: ...
    def Invoke(self) -> str: ...


class IAutomatedElement:
    @property
    def AutomationAdapter(self) -> IAutomationAdapter: ...


class IAutomationAdapter:
    @property
    def AutomationPeer(self) -> AutomationPeer: ...
    @property
    def AutomationProperties(self) -> AutomationProperties: ...
    @property
    def AutomationProvider(self) -> IRawElementProviderSimple: ...
    def GetAutomationProviderForChild(self, child: AutomationPeer) -> IRawElementProviderSimple: ...




class PatternProvider:
    pass


class ReadOnlyValuePatternProvider:
    def __init__(self, customValueProvider: CustomReadOnlyValueProvider): ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    def SetValue(self, value: str) -> None: ...


class SelectionValuePatternProvider(PatternProvider):
    def __init__(self, wpfTextView: IWpfTextView): ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    def SetValue(self, value: str) -> None: ...


class TextPatternProvider(PatternProvider):
    def __init__(self, textView: IWpfTextView, automatedView: IAutomatedElement, viewPrimitivesFactoryService: IViewPrimitivesFactoryService): ...
    @property
    def DocumentRange(self) -> ITextRangeProvider: ...
    @property
    def SupportedTextSelection(self) -> SupportedTextSelection: ...
    def GetSelection(self) -> Set(ITextRangeProvider): ...
    def GetVisibleRanges(self) -> Set(ITextRangeProvider): ...
    def RangeFromChild(self, childElement: IRawElementProviderSimple) -> ITextRangeProvider: ...
    def RangeFromPoint(self, screenLocation: Point) -> ITextRangeProvider: ...


class TextRangePatternProvider(PatternProvider):
    @overload
    def __init__(self, textView: IWpfTextView, automatedView: IAutomatedElement, span: Span, viewPrimitive: TextView): ...
    @overload
    def __init__(self, textView: IWpfTextView, automatedView: IAutomatedElement, span: Span, viewPrimitivesFactoryService: IViewPrimitivesFactoryService): ...
    @overload
    def __init__(self, textView: IWpfTextView, automatedView: IAutomatedElement, start: ITrackingPoint, end: ITrackingPoint, viewPrimitiveFactoryService: IViewPrimitivesFactoryService): ...
    @overload
    def __init__(self, textView: IWpfTextView, automatedView: IAutomatedElement, start: ITrackingPoint, end: ITrackingPoint, viewPrimitive: TextView): ...
    def AddToSelection(self) -> None: ...
    def Clone(self) -> ITextRangeProvider: ...
    def CommonInitializationWithTextView(self, textView: ITextView, automatedView: IAutomatedElement, start: ITrackingPoint, end: ITrackingPoint, viewPrimitive: TextView) -> None: ...
    def Compare(self, range: ITextRangeProvider) -> bool: ...
    def CompareEndpoints(self, endpoint: TextPatternRangeEndpoint, targetRange: ITextRangeProvider, targetEndpoint: TextPatternRangeEndpoint) -> int: ...
    def ExpandToEnclosingUnit(self, unit: TextUnit) -> None: ...
    def FindAttribute(self, attribute: int, value: Object, backward: bool) -> ITextRangeProvider: ...
    def FindText(self, text: str, backward: bool, ignoreCase: bool) -> ITextRangeProvider: ...
    def GetAttributeValue(self, attribute: int) -> Object: ...
    def GetBoundingRectangles(self) -> Set(float): ...
    def GetChildren(self) -> Set(IRawElementProviderSimple): ...
    def GetEnclosingElement(self) -> IRawElementProviderSimple: ...
    def GetText(self, maxLength: int) -> str: ...
    def Move(self, unit: TextUnit, count: int) -> int: ...
    def MoveEndpointByRange(self, endpoint: TextPatternRangeEndpoint, targetRange: ITextRangeProvider, targetEndpoint: TextPatternRangeEndpoint) -> None: ...
    def MoveEndpointByUnit(self, endpoint: TextPatternRangeEndpoint, unit: TextUnit, count: int) -> int: ...
    def RemoveFromSelection(self) -> None: ...
    def ScrollIntoView(self, alignToTop: bool) -> None: ...
    def Select(self) -> None: ...


class ViewValuePatternProvider(PatternProvider):
    def __init__(self, wpfTextView: IWpfTextView): ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    def SetValue(self, value: str) -> None: ...


