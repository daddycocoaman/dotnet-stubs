from typing import Tuple, Set, Iterable, List


class StringDifferenceOptions:
    @overload
    def __init__(self, other: StringDifferenceOptions): ...
    @overload
    def __init__(self, differenceType: StringDifferenceTypes, locality: int, ignoreTrimWhiteSpace: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ContinueProcessingPredicate(self) -> ContinueProcessingPredicate: ...
    @property
    def DetermineLocalityCallback(self) -> DetermineLocalityCallback: ...
    @property
    def DifferenceType(self) -> StringDifferenceTypes: ...
    @property
    def IgnoreTrimWhiteSpace(self) -> bool: ...
    @property
    def Locality(self) -> int: ...
    @property
    def WordSplitBehavior(self) -> WordSplitBehavior: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: StringDifferenceOptions, right: StringDifferenceOptions) -> bool: ...
    def op_Inequality(left: StringDifferenceOptions, right: StringDifferenceOptions) -> bool: ...
    @ContinueProcessingPredicate.setter
    def ContinueProcessingPredicate(self, value: ContinueProcessingPredicate) -> None: ...
    @DetermineLocalityCallback.setter
    def DetermineLocalityCallback(self, value: DetermineLocalityCallback) -> None: ...
    @DifferenceType.setter
    def DifferenceType(self, value: StringDifferenceTypes) -> None: ...
    @IgnoreTrimWhiteSpace.setter
    def IgnoreTrimWhiteSpace(self, value: bool) -> None: ...
    @Locality.setter
    def Locality(self, value: int) -> None: ...
    @WordSplitBehavior.setter
    def WordSplitBehavior(self, value: WordSplitBehavior) -> None: ...
    def ToString(self) -> str: ...
