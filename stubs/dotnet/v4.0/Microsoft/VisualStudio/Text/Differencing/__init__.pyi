from typing import Tuple, Set, Iterable, List




class DetermineLocalityCallback:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, differenceType: StringDifferenceTypes, leftStrings: List[str], rightStrings: List[str], callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Nullable: ...
    def Invoke(self, differenceType: StringDifferenceTypes, leftStrings: List[str], rightStrings: List[str]) -> Nullable: ...


class Difference:
    def __init__(self, left: Span, right: Span, before: Match, after: Match): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def After(self) -> Match: ...
    @property
    def Before(self) -> Match: ...
    @property
    def DifferenceType(self) -> DifferenceType: ...
    @property
    def Left(self) -> Span: ...
    @property
    def Right(self) -> Span: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class DifferenceType:
    Add = 0
    Remove = 1
    Change = 2




class IDifferenceService:
    @overload
    def DifferenceSequences(self, left: IList, right: IList) -> IDifferenceCollection: ...
    @overload
    def DifferenceSequences(self, left: IList, right: IList, continueProcessingPredicate: ContinueProcessingPredicate) -> IDifferenceCollection: ...


class IHierarchicalDifferenceCollection:
    @property
    def LeftDecomposition(self) -> ITokenizedStringList: ...
    @property
    def RightDecomposition(self) -> ITokenizedStringList: ...
    def GetContainedDifferences(self, index: int) -> IHierarchicalDifferenceCollection: ...
    def HasContainedDifferences(self, index: int) -> bool: ...


class IHierarchicalStringDifferenceService:
    def DiffSnapshotSpans(self, left: SnapshotSpan, right: SnapshotSpan, differenceOptions: StringDifferenceOptions) -> IHierarchicalDifferenceCollection: ...
    def DiffStrings(self, left: str, right: str, differenceOptions: StringDifferenceOptions) -> IHierarchicalDifferenceCollection: ...


class ITokenizedStringList:
    @property
    def Original(self) -> str: ...
    def GetElementInOriginal(self, index: int) -> Span: ...
    def GetSpanInOriginal(self, span: Span) -> Span: ...


class Match:
    def __init__(self, left: Span, right: Span): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Left(self) -> Span: ...
    @property
    def Length(self) -> int: ...
    @property
    def Right(self) -> Span: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetHashCode(self) -> int: ...


class StringDifferenceOptions:
    @overload
    def __init__(self, other: StringDifferenceOptions): ...
    @overload
    def __init__(self, differenceType: StringDifferenceTypes, locality: int, ignoreTrimWhiteSpace: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ContinueProcessingPredicate(self) -> ContinueProcessingPredicate: ...
    @property
    def DetermineLocalityCallback(self) -> DetermineLocalityCallback: ...
    @property
    def DifferenceType(self) -> StringDifferenceTypes: ...
    @property
    def IgnoreTrimWhiteSpace(self) -> bool: ...
    @property
    def Locality(self) -> int: ...
    @property
    def WordSplitBehavior(self) -> WordSplitBehavior: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: StringDifferenceOptions, right: StringDifferenceOptions) -> bool: ...
    def op_Inequality(left: StringDifferenceOptions, right: StringDifferenceOptions) -> bool: ...
    @ContinueProcessingPredicate.setter
    def ContinueProcessingPredicate(self, value: ContinueProcessingPredicate) -> None: ...
    @DetermineLocalityCallback.setter
    def DetermineLocalityCallback(self, value: DetermineLocalityCallback) -> None: ...
    @DifferenceType.setter
    def DifferenceType(self, value: StringDifferenceTypes) -> None: ...
    @IgnoreTrimWhiteSpace.setter
    def IgnoreTrimWhiteSpace(self, value: bool) -> None: ...
    @Locality.setter
    def Locality(self, value: int) -> None: ...
    @WordSplitBehavior.setter
    def WordSplitBehavior(self, value: WordSplitBehavior) -> None: ...
    def ToString(self) -> str: ...


class StringDifferenceTypes:
    Line = 1
    Word = 2
    Character = 4


class WordSplitBehavior:
    Default = 0
    CharacterClass = 0
    WhiteSpace = 1
    WhiteSpaceAndPunctuation = 2
