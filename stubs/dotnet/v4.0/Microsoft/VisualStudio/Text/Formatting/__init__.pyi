from typing import Tuple, Set, Iterable, List


class IAdornmentElement:
    @property
    def Affinity(self) -> PositionAffinity: ...
    @property
    def Baseline(self) -> float: ...
    @property
    def BottomSpace(self) -> float: ...
    @property
    def IdentityTag(self) -> Object: ...
    @property
    def ProviderTag(self) -> Object: ...
    @property
    def TextHeight(self) -> float: ...
    @property
    def TopSpace(self) -> float: ...
    @property
    def Width(self) -> float: ...


class IFormattedLine:
    def GetOrCreateVisual(self) -> Visual: ...
    def RemoveVisual(self) -> None: ...
    def SetChange(self, change: TextViewLineChange) -> None: ...
    def SetDeltaY(self, deltaY: float) -> None: ...
    def SetLineTransform(self, transform: LineTransform) -> None: ...
    def SetSnapshot(self, visualSnapshot: ITextSnapshot, editSnapshot: ITextSnapshot) -> None: ...
    def SetTop(self, top: float) -> None: ...
    def SetVisibleArea(self, visibleArea: Rect) -> None: ...


class IFormattedLineSource:
    def FormatLineInVisualBuffer(self, visualLine: ITextSnapshotLine) -> Collection: ...
    @property
    def BaseIndentation(self) -> float: ...
    @property
    def ColumnWidth(self) -> float: ...
    @property
    def DefaultTextProperties(self) -> TextRunProperties: ...
    @property
    def LineHeight(self) -> float: ...
    @property
    def MaxAutoIndent(self) -> float: ...
    @property
    def SourceTextSnapshot(self) -> ITextSnapshot: ...
    @property
    def TabSize(self) -> int: ...
    @property
    def TextAndAdornmentSequencer(self) -> ITextAndAdornmentSequencer: ...
    @property
    def TextHeightAboveBaseline(self) -> float: ...
    @property
    def TextHeightBelowBaseline(self) -> float: ...
    @property
    def TopTextSnapshot(self) -> ITextSnapshot: ...
    @property
    def UseDisplayMode(self) -> bool: ...
    @property
    def WordWrapWidth(self) -> float: ...


class IFormattedTextSourceFactoryService:
    @overload
    def Create(self, sourceTextSnapshot: ITextSnapshot, visualBufferSnapshot: ITextSnapshot, tabSize: int, baseIndent: float, wordWrapWidth: float, maxAutoIndent: float, useDisplayMode: bool, sequencer: ITextAndAdornmentSequencer, classificationFormatMap: IClassificationFormatMap) -> IFormattedLineSource: ...
    @overload
    def Create(self, sourceTextSnapshot: ITextSnapshot, visualBufferSnapshot: ITextSnapshot, tabSize: int, baseIndent: float, wordWrapWidth: float, maxAutoIndent: float, useDisplayMode: bool, aggregateClassifier: IClassifier, sequencer: ITextAndAdornmentSequencer, classificationFormatMap: IClassificationFormatMap) -> IFormattedLineSource: ...
    @overload
    def Create(self, sourceTextSnapshot: ITextSnapshot, visualBufferSnapshot: ITextSnapshot, tabSize: int, baseIndent: float, wordWrapWidth: float, maxAutoIndent: float, useDisplayMode: bool, aggregateClassifier: IClassifier, sequencer: ITextAndAdornmentSequencer, classificationFormatMap: IClassificationFormatMap, isViewWrapEnabled: bool) -> IFormattedLineSource: ...


class ILineTransformSource:
    def GetLineTransform(self, line: ITextViewLine, yPosition: float, placement: ViewRelativePosition) -> LineTransform: ...


class ILineTransformSourceProvider:
    def Create(self, textView: IWpfTextView) -> ILineTransformSource: ...


class IRtfBuilderService:
    @overload
    def GenerateRtf(self, spans: NormalizedSnapshotSpanCollection) -> str: ...
    @overload
    def GenerateRtf(self, spans: NormalizedSnapshotSpanCollection, delimiter: str) -> str: ...
    @overload
    def GenerateRtf(self, spans: NormalizedSnapshotSpanCollection, textView: ITextView) -> str: ...
    @overload
    def GenerateRtf(self, spans: NormalizedSnapshotSpanCollection, textView: ITextView, delimiter: str) -> str: ...


class ISequenceElement:
    @property
    def ShouldRenderText(self) -> bool: ...
    @property
    def Span(self) -> IMappingSpan: ...


class ITextAndAdornmentCollection:
    @property
    def Sequencer(self) -> ITextAndAdornmentSequencer: ...


class ITextAndAdornmentSequencer:
    def add_SequenceChanged(self, value: EventHandler) -> None: ...
    @overload
    def CreateTextAndAdornmentCollection(self, topLine: ITextSnapshotLine, sourceTextSnapshot: ITextSnapshot) -> ITextAndAdornmentCollection: ...
    @overload
    def CreateTextAndAdornmentCollection(self, topSpan: SnapshotSpan, sourceTextSnapshot: ITextSnapshot) -> ITextAndAdornmentCollection: ...
    @property
    def BufferGraph(self) -> IBufferGraph: ...
    @property
    def SourceBuffer(self) -> ITextBuffer: ...
    @property
    def TopBuffer(self) -> ITextBuffer: ...
    def remove_SequenceChanged(self, value: EventHandler) -> None: ...


class ITextAndAdornmentSequencerFactoryService:
    def Create(self, view: ITextView) -> ITextAndAdornmentSequencer: ...


class ITextParagraphPropertiesFactoryService:
    def Create(self, formattedLineSource: IFormattedLineSource, textProperties: TextFormattingRunProperties, line: IMappingSpan, lineStart: IMappingPoint, lineSegment: int) -> TextParagraphProperties: ...


class ITextViewLine:
    def ContainsBufferPosition(self, bufferPosition: SnapshotPoint) -> bool: ...
    @property
    def Baseline(self) -> float: ...
    @property
    def Bottom(self) -> float: ...
    @property
    def Change(self) -> TextViewLineChange: ...
    @property
    def DefaultLineTransform(self) -> LineTransform: ...
    @property
    def DeltaY(self) -> float: ...
    @property
    def End(self) -> SnapshotPoint: ...
    @property
    def EndIncludingLineBreak(self) -> SnapshotPoint: ...
    @property
    def EndOfLineWidth(self) -> float: ...
    @property
    def Extent(self) -> SnapshotSpan: ...
    @property
    def ExtentAsMappingSpan(self) -> IMappingSpan: ...
    @property
    def ExtentIncludingLineBreak(self) -> SnapshotSpan: ...
    @property
    def ExtentIncludingLineBreakAsMappingSpan(self) -> IMappingSpan: ...
    @property
    def Height(self) -> float: ...
    @property
    def IdentityTag(self) -> Object: ...
    @property
    def IsFirstTextViewLineForSnapshotLine(self) -> bool: ...
    @property
    def IsLastTextViewLineForSnapshotLine(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Left(self) -> float: ...
    @property
    def Length(self) -> int: ...
    @property
    def LengthIncludingLineBreak(self) -> int: ...
    @property
    def LineBreakLength(self) -> int: ...
    @property
    def LineTransform(self) -> LineTransform: ...
    @property
    def Right(self) -> float: ...
    @property
    def Snapshot(self) -> ITextSnapshot: ...
    @property
    def Start(self) -> SnapshotPoint: ...
    @property
    def TextBottom(self) -> float: ...
    @property
    def TextHeight(self) -> float: ...
    @property
    def TextLeft(self) -> float: ...
    @property
    def TextRight(self) -> float: ...
    @property
    def TextTop(self) -> float: ...
    @property
    def TextWidth(self) -> float: ...
    @property
    def Top(self) -> float: ...
    @property
    def VirtualSpaceWidth(self) -> float: ...
    @property
    def VisibilityState(self) -> VisibilityState: ...
    @property
    def Width(self) -> float: ...
    def GetAdornmentBounds(self, identityTag: Object) -> Nullable: ...
    def GetAdornmentTags(self, providerTag: Object) -> ReadOnlyCollection: ...
    @overload
    def GetBufferPositionFromXCoordinate(self, xCoordinate: float) -> Nullable: ...
    @overload
    def GetBufferPositionFromXCoordinate(self, xCoordinate: float, textOnly: bool) -> Nullable: ...
    @overload
    def GetCharacterBounds(self, bufferPosition: VirtualSnapshotPoint) -> TextBounds: ...
    @overload
    def GetCharacterBounds(self, bufferPosition: SnapshotPoint) -> TextBounds: ...
    @overload
    def GetExtendedCharacterBounds(self, bufferPosition: SnapshotPoint) -> TextBounds: ...
    @overload
    def GetExtendedCharacterBounds(self, bufferPosition: VirtualSnapshotPoint) -> TextBounds: ...
    def GetInsertionBufferPositionFromXCoordinate(self, xCoordinate: float) -> VirtualSnapshotPoint: ...
    def GetNormalizedTextBounds(self, bufferSpan: SnapshotSpan) -> Collection: ...
    def GetTextElementSpan(self, bufferPosition: SnapshotPoint) -> SnapshotSpan: ...
    def GetVirtualBufferPositionFromXCoordinate(self, xCoordinate: float) -> VirtualSnapshotPoint: ...
    def IntersectsBufferSpan(self, bufferSpan: SnapshotSpan) -> bool: ...


class IWpfTextViewLine:
    @property
    def TextLines(self) -> ReadOnlyCollection: ...
    @property
    def VisibleArea(self) -> Rect: ...
    def GetCharacterFormatting(self, bufferPosition: SnapshotPoint) -> TextRunProperties: ...


class LineTransform:
    @overload
    def __init__(self, verticalScale: float): ...
    @overload
    def __init__(self, topSpace: float, bottomSpace: float, verticalScale: float): ...
    @overload
    def __init__(self, topSpace: float, bottomSpace: float, verticalScale: float, right: float): ...
    def Combine(transform1: LineTransform, transform2: LineTransform) -> LineTransform: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def BottomSpace(self) -> float: ...
    @property
    def Right(self) -> float: ...
    @property
    def TopSpace(self) -> float: ...
    @property
    def VerticalScale(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(transform1: LineTransform, transform2: LineTransform) -> bool: ...
    def op_Inequality(transform1: LineTransform, transform2: LineTransform) -> bool: ...


class TextAndAdornmentSequenceChangedEventArgs:
    def __init__(self, span: IMappingSpan): ...
    @property
    def Span(self) -> IMappingSpan: ...


class TextBounds:
    def __init__(self, leading: float, top: float, bidiWidth: float, height: float, textTop: float, textHeight: float): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Bottom(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def IsRightToLeft(self) -> bool: ...
    @property
    def Leading(self) -> float: ...
    @property
    def Left(self) -> float: ...
    @property
    def Right(self) -> float: ...
    @property
    def TextBottom(self) -> float: ...
    @property
    def TextHeight(self) -> float: ...
    @property
    def TextTop(self) -> float: ...
    @property
    def Top(self) -> float: ...
    @property
    def Trailing(self) -> float: ...
    @property
    def Width(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(bounds1: TextBounds, bounds2: TextBounds) -> bool: ...
    def op_Inequality(bounds1: TextBounds, bounds2: TextBounds) -> bool: ...
    def ToString(self) -> str: ...


class TextFormattingParagraphProperties:
    @overload
    def __init__(self, defaultTextRunProperties: TextFormattingRunProperties): ...
    @overload
    def __init__(self, defaultTextRunProperties: TextFormattingRunProperties, defaultTabSize: float): ...
    @property
    def DefaultIncrementalTab(self) -> float: ...
    @property
    def DefaultTextRunProperties(self) -> TextRunProperties: ...
    @property
    def FirstLineInParagraph(self) -> bool: ...
    @property
    def FlowDirection(self) -> FlowDirection: ...
    @property
    def Indent(self) -> float: ...
    @property
    def LineHeight(self) -> float: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def TextMarkerProperties(self) -> TextMarkerProperties: ...
    @property
    def TextWrapping(self) -> TextWrapping: ...


class TextFormattingRunProperties:
    def BackgroundBrushSame(self, brush: Brush) -> bool: ...
    def ClearBackgroundBrush(self) -> TextFormattingRunProperties: ...
    def ClearBackgroundOpacity(self) -> TextFormattingRunProperties: ...
    def ClearBold(self) -> TextFormattingRunProperties: ...
    def ClearCultureInfo(self) -> TextFormattingRunProperties: ...
    def ClearFontHintingEmSize(self) -> TextFormattingRunProperties: ...
    def ClearFontRenderingEmSize(self) -> TextFormattingRunProperties: ...
    def ClearForegroundBrush(self) -> TextFormattingRunProperties: ...
    def ClearForegroundOpacity(self) -> TextFormattingRunProperties: ...
    def ClearItalic(self) -> TextFormattingRunProperties: ...
    def ClearTextDecorations(self) -> TextFormattingRunProperties: ...
    def ClearTextEffects(self) -> TextFormattingRunProperties: ...
    def ClearTypeface(self) -> TextFormattingRunProperties: ...
    @overload
    def CreateTextFormattingRunProperties() -> TextFormattingRunProperties: ...
    @overload
    def CreateTextFormattingRunProperties(typeface: Typeface, size: float, foreground: Color) -> TextFormattingRunProperties: ...
    @overload
    def CreateTextFormattingRunProperties(foreground: Brush, background: Brush, typeface: Typeface, size: Nullable, hintingSize: Nullable, textDecorations: TextDecorationCollection, textEffects: TextEffectCollection, cultureInfo: CultureInfo) -> TextFormattingRunProperties: ...
    def ForegroundBrushSame(self, brush: Brush) -> bool: ...
    @property
    def BackgroundBrush(self) -> Brush: ...
    @property
    def BackgroundBrushEmpty(self) -> bool: ...
    @property
    def BackgroundOpacity(self) -> float: ...
    @property
    def BackgroundOpacityEmpty(self) -> bool: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def BoldEmpty(self) -> bool: ...
    @property
    def CultureInfo(self) -> CultureInfo: ...
    @property
    def CultureInfoEmpty(self) -> bool: ...
    @property
    def FontHintingEmSize(self) -> float: ...
    @property
    def FontHintingEmSizeEmpty(self) -> bool: ...
    @property
    def FontRenderingEmSize(self) -> float: ...
    @property
    def FontRenderingEmSizeEmpty(self) -> bool: ...
    @property
    def ForegroundBrush(self) -> Brush: ...
    @property
    def ForegroundBrushEmpty(self) -> bool: ...
    @property
    def ForegroundOpacity(self) -> float: ...
    @property
    def ForegroundOpacityEmpty(self) -> bool: ...
    @property
    def Italic(self) -> bool: ...
    @property
    def ItalicEmpty(self) -> bool: ...
    @property
    def TextDecorations(self) -> TextDecorationCollection: ...
    @property
    def TextDecorationsEmpty(self) -> bool: ...
    @property
    def TextEffects(self) -> TextEffectCollection: ...
    @property
    def TextEffectsEmpty(self) -> bool: ...
    @property
    def Typeface(self) -> Typeface: ...
    @property
    def TypefaceEmpty(self) -> bool: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetRealObject(self, context: StreamingContext) -> Object: ...
    def SameSize(self, other: TextFormattingRunProperties) -> bool: ...
    def SetBackground(self, background: Color) -> TextFormattingRunProperties: ...
    def SetBackgroundBrush(self, brush: Brush) -> TextFormattingRunProperties: ...
    def SetBackgroundOpacity(self, opacity: float) -> TextFormattingRunProperties: ...
    def SetBold(self, isBold: bool) -> TextFormattingRunProperties: ...
    def SetCultureInfo(self, cultureInfo: CultureInfo) -> TextFormattingRunProperties: ...
    def SetFontHintingEmSize(self, hintingSize: float) -> TextFormattingRunProperties: ...
    def SetFontRenderingEmSize(self, renderingSize: float) -> TextFormattingRunProperties: ...
    def SetForeground(self, foreground: Color) -> TextFormattingRunProperties: ...
    def SetForegroundBrush(self, brush: Brush) -> TextFormattingRunProperties: ...
    def SetForegroundOpacity(self, opacity: float) -> TextFormattingRunProperties: ...
    def SetItalic(self, isItalic: bool) -> TextFormattingRunProperties: ...
    def SetTextDecorations(self, textDecorations: TextDecorationCollection) -> TextFormattingRunProperties: ...
    def SetTextEffects(self, textEffects: TextEffectCollection) -> TextFormattingRunProperties: ...
    def SetTypeface(self, typeface: Typeface) -> TextFormattingRunProperties: ...


class TextViewLineChange:
    #None = 0
    NewOrReformatted = 1
    Translated = 2


class VisibilityState:
    Unattached = 0
    Hidden = 1
    PartiallyVisible = 2
    FullyVisible = 3
