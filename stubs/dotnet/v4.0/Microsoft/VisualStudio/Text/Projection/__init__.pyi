from typing import Tuple, Set, Iterable, List


class ElisionBufferOptions:
    #None = 0
    FillInMappingMode = 1


class ElisionSourceSpansChangedEventArgs(TextContentChangedEventArgs):
    def __init__(self, beforeSnapshot: IProjectionSnapshot, afterSnapshot: IProjectionSnapshot, elidedSpans: NormalizedSpanCollection, expandedSpans: NormalizedSpanCollection, sourceToken: Object): ...
    @property
    def After(self) -> IProjectionSnapshot: ...
    @property
    def Before(self) -> IProjectionSnapshot: ...
    @property
    def ElidedSpans(self) -> NormalizedSpanCollection: ...
    @property
    def ExpandedSpans(self) -> NormalizedSpanCollection: ...


class GraphBufferContentTypeChangedEventArgs:
    def __init__(self, textBuffer: ITextBuffer, beforeContentType: IContentType, afterContentType: IContentType): ...
    @property
    def AfterContentType(self) -> IContentType: ...
    @property
    def BeforeContentType(self) -> IContentType: ...
    @property
    def TextBuffer(self) -> ITextBuffer: ...


class GraphBuffersChangedEventArgs:
    def __init__(self, addedBuffers: List[ITextBuffer], removedBuffers: List[ITextBuffer]): ...
    @property
    def AddedBuffers(self) -> ReadOnlyCollection: ...
    @property
    def RemovedBuffers(self) -> ReadOnlyCollection: ...


class IBufferGraph:
    def add_GraphBufferContentTypeChanged(self, value: EventHandler) -> None: ...
    def add_GraphBuffersChanged(self, value: EventHandler) -> None: ...
    def CreateMappingPoint(self, point: SnapshotPoint, trackingMode: PointTrackingMode) -> IMappingPoint: ...
    def CreateMappingSpan(self, span: SnapshotSpan, trackingMode: SpanTrackingMode) -> IMappingSpan: ...
    @property
    def TopBuffer(self) -> ITextBuffer: ...
    def GetTextBuffers(self, match: Predicate) -> Collection: ...
    @overload
    def MapDownToBuffer(self, span: SnapshotSpan, trackingMode: SpanTrackingMode, targetBuffer: ITextBuffer) -> NormalizedSnapshotSpanCollection: ...
    @overload
    def MapDownToBuffer(self, position: SnapshotPoint, trackingMode: PointTrackingMode, targetBuffer: ITextBuffer, affinity: PositionAffinity) -> Nullable: ...
    @overload
    def MapDownToFirstMatch(self, span: SnapshotSpan, trackingMode: SpanTrackingMode, match: Predicate) -> NormalizedSnapshotSpanCollection: ...
    @overload
    def MapDownToFirstMatch(self, position: SnapshotPoint, trackingMode: PointTrackingMode, match: Predicate, affinity: PositionAffinity) -> Nullable: ...
    def MapDownToInsertionPoint(self, position: SnapshotPoint, trackingMode: PointTrackingMode, match: Predicate) -> Nullable: ...
    @overload
    def MapDownToSnapshot(self, span: SnapshotSpan, trackingMode: SpanTrackingMode, targetSnapshot: ITextSnapshot) -> NormalizedSnapshotSpanCollection: ...
    @overload
    def MapDownToSnapshot(self, position: SnapshotPoint, trackingMode: PointTrackingMode, targetSnapshot: ITextSnapshot, affinity: PositionAffinity) -> Nullable: ...
    @overload
    def MapUpToBuffer(self, span: SnapshotSpan, trackingMode: SpanTrackingMode, targetBuffer: ITextBuffer) -> NormalizedSnapshotSpanCollection: ...
    @overload
    def MapUpToBuffer(self, point: SnapshotPoint, trackingMode: PointTrackingMode, affinity: PositionAffinity, targetBuffer: ITextBuffer) -> Nullable: ...
    @overload
    def MapUpToFirstMatch(self, span: SnapshotSpan, trackingMode: SpanTrackingMode, match: Predicate) -> NormalizedSnapshotSpanCollection: ...
    @overload
    def MapUpToFirstMatch(self, point: SnapshotPoint, trackingMode: PointTrackingMode, match: Predicate, affinity: PositionAffinity) -> Nullable: ...
    @overload
    def MapUpToSnapshot(self, span: SnapshotSpan, trackingMode: SpanTrackingMode, targetSnapshot: ITextSnapshot) -> NormalizedSnapshotSpanCollection: ...
    @overload
    def MapUpToSnapshot(self, point: SnapshotPoint, trackingMode: PointTrackingMode, affinity: PositionAffinity, targetSnapshot: ITextSnapshot) -> Nullable: ...
    def remove_GraphBufferContentTypeChanged(self, value: EventHandler) -> None: ...
    def remove_GraphBuffersChanged(self, value: EventHandler) -> None: ...


class IBufferGraphFactoryService:
    def CreateBufferGraph(self, textBuffer: ITextBuffer) -> IBufferGraph: ...


class IElisionBuffer:
    def add_SourceSpansChanged(self, value: EventHandler) -> None: ...
    def ElideSpans(self, spansToElide: NormalizedSpanCollection) -> IProjectionSnapshot: ...
    def ExpandSpans(self, spansToExpand: NormalizedSpanCollection) -> IProjectionSnapshot: ...
    @property
    def CurrentSnapshot(self) -> IElisionSnapshot: ...
    @property
    def Options(self) -> ElisionBufferOptions: ...
    @property
    def SourceBuffer(self) -> ITextBuffer: ...
    def ModifySpans(self, spansToElide: NormalizedSpanCollection, spansToExpand: NormalizedSpanCollection) -> IProjectionSnapshot: ...
    def remove_SourceSpansChanged(self, value: EventHandler) -> None: ...


class IElisionSnapshot:
    @property
    def SourceSnapshot(self) -> ITextSnapshot: ...
    @property
    def TextBuffer(self) -> IElisionBuffer: ...
    def MapFromSourceSnapshotToNearest(self, point: SnapshotPoint) -> SnapshotPoint: ...


class IProjectionBuffer:
    def add_SourceBuffersChanged(self, value: EventHandler) -> None: ...
    def add_SourceSpansChanged(self, value: EventHandler) -> None: ...
    def DeleteSpans(self, position: int, spansToDelete: int) -> IProjectionSnapshot: ...
    @overload
    def InsertSpan(self, position: int, spanToInsert: ITrackingSpan) -> IProjectionSnapshot: ...
    @overload
    def InsertSpan(self, position: int, literalSpanToInsert: str) -> IProjectionSnapshot: ...
    def InsertSpans(self, position: int, spansToInsert: List[Object]) -> IProjectionSnapshot: ...
    def remove_SourceBuffersChanged(self, value: EventHandler) -> None: ...
    def remove_SourceSpansChanged(self, value: EventHandler) -> None: ...
    def ReplaceSpans(self, position: int, spansToReplace: int, spansToInsert: List[Object], options: EditOptions, editTag: Object) -> IProjectionSnapshot: ...


class IProjectionBufferBase:
    def Delete(self, deleteSpan: Span) -> IProjectionSnapshot: ...
    @property
    def CurrentSnapshot(self) -> IProjectionSnapshot: ...
    @property
    def SourceBuffers(self) -> List[ITextBuffer]: ...
    def Insert(self, position: int, text: str) -> IProjectionSnapshot: ...
    def Replace(self, replaceSpan: Span, replaceWith: str) -> IProjectionSnapshot: ...


class IProjectionBufferFactoryService:
    def add_ProjectionBufferCreated(self, value: EventHandler) -> None: ...
    @overload
    def CreateElisionBuffer(self, projectionEditResolver: IProjectionEditResolver, exposedSpans: NormalizedSnapshotSpanCollection, options: ElisionBufferOptions) -> IElisionBuffer: ...
    @overload
    def CreateElisionBuffer(self, projectionEditResolver: IProjectionEditResolver, exposedSpans: NormalizedSnapshotSpanCollection, options: ElisionBufferOptions, contentType: IContentType) -> IElisionBuffer: ...
    @overload
    def CreateProjectionBuffer(self, projectionEditResolver: IProjectionEditResolver, sourceSpans: List[Object], options: ProjectionBufferOptions) -> IProjectionBuffer: ...
    @overload
    def CreateProjectionBuffer(self, projectionEditResolver: IProjectionEditResolver, sourceSpans: List[Object], options: ProjectionBufferOptions, contentType: IContentType) -> IProjectionBuffer: ...
    @property
    def ProjectionContentType(self) -> IContentType: ...
    def remove_ProjectionBufferCreated(self, value: EventHandler) -> None: ...


class IProjectionEditResolver:
    def FillInInsertionSizes(self, projectionInsertionPoint: SnapshotPoint, sourceInsertionPoints: ReadOnlyCollection, insertionText: str, insertionSizes: List[int]) -> None: ...
    def FillInReplacementSizes(self, projectionReplacementSpan: SnapshotSpan, sourceReplacementSpans: ReadOnlyCollection, insertionText: str, insertionSizes: List[int]) -> None: ...
    def GetTypicalInsertionPosition(self, projectionInsertionPoint: SnapshotPoint, sourceInsertionPoints: ReadOnlyCollection) -> int: ...


class IProjectionSnapshot:
    @property
    def SourceSnapshots(self) -> ReadOnlyCollection: ...
    @property
    def SpanCount(self) -> int: ...
    @property
    def TextBuffer(self) -> IProjectionBufferBase: ...
    def GetMatchingSnapshot(self, textBuffer: ITextBuffer) -> ITextSnapshot: ...
    @overload
    def GetSourceSpans(self) -> ReadOnlyCollection: ...
    @overload
    def GetSourceSpans(self, startSpanIndex: int, count: int) -> ReadOnlyCollection: ...
    @overload
    def MapFromSourceSnapshot(self, span: SnapshotSpan) -> ReadOnlyCollection: ...
    @overload
    def MapFromSourceSnapshot(self, point: SnapshotPoint, affinity: PositionAffinity) -> Nullable: ...
    @overload
    def MapToSourceSnapshot(self, position: int) -> SnapshotPoint: ...
    @overload
    def MapToSourceSnapshot(self, position: int, affinity: PositionAffinity) -> SnapshotPoint: ...
    @overload
    def MapToSourceSnapshots(self, position: int) -> ReadOnlyCollection: ...
    @overload
    def MapToSourceSnapshots(self, span: Span) -> ReadOnlyCollection: ...


class ProjectionBufferOptions:
    #None = 0
    PermissiveEdgeInclusiveSourceSpans = 1
    WritableLiteralSpans = 2


class ProjectionSourceBuffersChangedEventArgs(ProjectionSourceSpansChangedEventArgs):
    def __init__(self, beforeSnapshot: IProjectionSnapshot, afterSnapshot: IProjectionSnapshot, insertedSpans: List[ITrackingSpan], deletedSpans: List[ITrackingSpan], spanPosition: int, addedBuffers: List[ITextBuffer], removedBuffers: List[ITextBuffer], options: EditOptions, editTag: Object): ...
    @property
    def AddedBuffers(self) -> ReadOnlyCollection: ...
    @property
    def RemovedBuffers(self) -> ReadOnlyCollection: ...


class ProjectionSourceSpansChangedEventArgs(TextContentChangedEventArgs):
    def __init__(self, beforeSnapshot: IProjectionSnapshot, afterSnapshot: IProjectionSnapshot, insertedSpans: List[ITrackingSpan], deletedSpans: List[ITrackingSpan], spanPosition: int, options: EditOptions, editTag: Object): ...
    @property
    def After(self) -> IProjectionSnapshot: ...
    @property
    def Before(self) -> IProjectionSnapshot: ...
    @property
    def DeletedSpans(self) -> ReadOnlyCollection: ...
    @property
    def InsertedSpans(self) -> ReadOnlyCollection: ...
    @property
    def SpanPosition(self) -> int: ...
