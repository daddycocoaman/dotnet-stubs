__all__ = ['Adornments','Adornments','Adornments','Adornments','Adornments','Adornments','Adornments','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Classification','Differencing','Differencing','Differencing','Differencing','Differencing','Differencing','Differencing','Differencing','Differencing','Differencing','Differencing','Differencing','Differencing','Document','Document','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Editor','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','Formatting','IncrementalSearch','IncrementalSearch','IncrementalSearch','IncrementalSearch','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Operations','Outlining','Outlining','Outlining','Outlining','Outlining','Outlining','Outlining','Outlining','Projection','Projection','Projection','Projection','Projection','Projection','Projection','Projection','Projection','Projection','Projection','Projection','Projection','Projection','Projection','Projection','Storage','Storage','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Tagging','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities','Utilities']
from typing import Tuple, Set, Iterable, List


class VirtualSnapshotSpan:
    @overload
    def __init__(self, snapshotSpan: SnapshotSpan): ...
    @overload
    def __init__(self, start: VirtualSnapshotPoint, end: VirtualSnapshotPoint): ...
    @overload
    def Contains(self, virtualPoint: VirtualSnapshotPoint) -> bool: ...
    @overload
    def Contains(self, virtualSpan: VirtualSnapshotSpan) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def End(self) -> VirtualSnapshotPoint: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsInVirtualSpace(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Snapshot(self) -> ITextSnapshot: ...
    @property
    def SnapshotSpan(self) -> SnapshotSpan: ...
    @property
    def Start(self) -> VirtualSnapshotPoint: ...
    def GetHashCode(self) -> int: ...
    def GetText(self) -> str: ...
    def Intersection(self, virtualSpan: VirtualSnapshotSpan) -> Nullable: ...
    def IntersectsWith(self, virtualSpan: VirtualSnapshotSpan) -> bool: ...
    def op_Equality(left: VirtualSnapshotSpan, right: VirtualSnapshotSpan) -> bool: ...
    def op_Inequality(left: VirtualSnapshotSpan, right: VirtualSnapshotSpan) -> bool: ...
    def Overlap(self, virtualSpan: VirtualSnapshotSpan) -> Nullable: ...
    def OverlapsWith(self, virtualSpan: VirtualSnapshotSpan) -> bool: ...
    def ToString(self) -> str: ...
    @overload
    def TranslateTo(self, snapshot: ITextSnapshot) -> VirtualSnapshotSpan: ...
    @overload
    def TranslateTo(self, snapshot: ITextSnapshot, trackingMode: SpanTrackingMode) -> VirtualSnapshotSpan: ...
