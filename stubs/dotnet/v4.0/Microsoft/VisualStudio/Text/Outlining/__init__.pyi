from typing import Tuple, Set, Iterable, List


class ICollapsed:
    @property
    def CollapsedChildren(self) -> Iterable[ICollapsed]: ...


class ICollapsible:
    @property
    def CollapsedForm(self) -> Object: ...
    @property
    def CollapsedHintForm(self) -> Object: ...
    @property
    def Extent(self) -> ITrackingSpan: ...
    @property
    def IsCollapsed(self) -> bool: ...
    @property
    def IsCollapsible(self) -> bool: ...
    @property
    def Tag(self) -> IOutliningRegionTag: ...


class IOutliningManager:
    def add_OutliningEnabledChanged(self, value: EventHandler) -> None: ...
    def add_RegionsChanged(self, value: EventHandler) -> None: ...
    def add_RegionsCollapsed(self, value: EventHandler) -> None: ...
    def add_RegionsExpanded(self, value: EventHandler) -> None: ...
    def CollapseAll(self, span: SnapshotSpan, match: Predicate) -> Iterable[ICollapsed]: ...
    def Expand(self, collapsible: ICollapsed) -> ICollapsible: ...
    def ExpandAll(self, span: SnapshotSpan, match: Predicate) -> Iterable[ICollapsible]: ...
    @property
    def Enabled(self) -> bool: ...
    @overload
    def GetAllRegions(self, span: SnapshotSpan) -> Iterable[ICollapsible]: ...
    @overload
    def GetAllRegions(self, spans: NormalizedSnapshotSpanCollection) -> Iterable[ICollapsible]: ...
    @overload
    def GetAllRegions(self, span: SnapshotSpan, exposedRegionsOnly: bool) -> Iterable[ICollapsible]: ...
    @overload
    def GetAllRegions(self, spans: NormalizedSnapshotSpanCollection, exposedRegionsOnly: bool) -> Iterable[ICollapsible]: ...
    @overload
    def GetCollapsedRegions(self, span: SnapshotSpan) -> Iterable[ICollapsed]: ...
    @overload
    def GetCollapsedRegions(self, spans: NormalizedSnapshotSpanCollection) -> Iterable[ICollapsed]: ...
    @overload
    def GetCollapsedRegions(self, spans: NormalizedSnapshotSpanCollection, exposedRegionsOnly: bool) -> Iterable[ICollapsed]: ...
    @overload
    def GetCollapsedRegions(self, span: SnapshotSpan, exposedRegionsOnly: bool) -> Iterable[ICollapsed]: ...
    def remove_OutliningEnabledChanged(self, value: EventHandler) -> None: ...
    def remove_RegionsChanged(self, value: EventHandler) -> None: ...
    def remove_RegionsCollapsed(self, value: EventHandler) -> None: ...
    def remove_RegionsExpanded(self, value: EventHandler) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    def TryCollapse(self, collapsible: ICollapsible) -> ICollapsed: ...


class IOutliningManagerService:
    def GetOutliningManager(self, textView: ITextView) -> IOutliningManager: ...


class OutliningEnabledEventArgs:
    def __init__(self, enabled: bool): ...
    @property
    def Enabled(self) -> bool: ...


class RegionsChangedEventArgs:
    def __init__(self, affectedSpan: SnapshotSpan): ...
    @property
    def AffectedSpan(self) -> SnapshotSpan: ...


class RegionsCollapsedEventArgs:
    def __init__(self, collapsedRegions: Iterable[ICollapsed]): ...
    @property
    def CollapsedRegions(self) -> Iterable[ICollapsed]: ...


class RegionsExpandedEventArgs:
    @overload
    def __init__(self, expandedRegions: Iterable[ICollapsible]): ...
    @overload
    def __init__(self, expandedRegions: Iterable[ICollapsible], removalPending: bool): ...
    @property
    def ExpandedRegions(self) -> Iterable[ICollapsible]: ...
    @property
    def RemovalPending(self) -> bool: ...
