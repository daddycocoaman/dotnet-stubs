__all__ = ['Implementation']
from typing import Tuple, Set, Iterable, List


class ClassificationChangedEventArgs:
    def __init__(self, changeSpan: SnapshotSpan): ...
    @property
    def ChangeSpan(self) -> SnapshotSpan: ...


class ClassificationFormatDefinition(EditorFormatDefinition):
    @property
    def BackgroundOpacity(self) -> Nullable: ...
    @property
    def CultureInfo(self) -> CultureInfo: ...
    @property
    def FontHintingSize(self) -> Nullable: ...
    @property
    def FontRenderingSize(self) -> Nullable: ...
    @property
    def FontTypeface(self) -> Typeface: ...
    @property
    def ForegroundOpacity(self) -> Nullable: ...
    @property
    def IsBold(self) -> Nullable: ...
    @property
    def IsItalic(self) -> Nullable: ...
    @property
    def TextDecorations(self) -> TextDecorationCollection: ...
    @property
    def TextEffects(self) -> TextEffectCollection: ...


class ClassificationSpan:
    def __init__(self, span: SnapshotSpan, classification: IClassificationType): ...
    @property
    def ClassificationType(self) -> IClassificationType: ...
    @property
    def Span(self) -> SnapshotSpan: ...


class ClassificationTypeAttribute(MultipleBaseMetadataAttribute):
    def __init__(self): ...
    @property
    def ClassificationTypeNames(self) -> str: ...
    @ClassificationTypeNames.setter
    def ClassificationTypeNames(self, value: str) -> None: ...


class ClassificationTypeDefinition:
    def __init__(self): ...


class EditorFormatDefinition:
    def CreateResourceDictionary(self) -> ResourceDictionary: ...
    @property
    def BackgroundBrush(self) -> Brush: ...
    @property
    def BackgroundColor(self) -> Nullable: ...
    @property
    def BackgroundCustomizable(self) -> Nullable: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def ForegroundBrush(self) -> Brush: ...
    @property
    def ForegroundColor(self) -> Nullable: ...
    @property
    def ForegroundCustomizable(self) -> Nullable: ...


class FormatItemsEventArgs:
    def __init__(self, items: ReadOnlyCollection): ...
    @property
    def ChangedItems(self) -> ReadOnlyCollection: ...


class IClassificationFormatMap:
    def add_ClassificationFormatMappingChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddExplicitTextProperties(self, classificationType: IClassificationType, properties: TextFormattingRunProperties) -> None: ...
    @overload
    def AddExplicitTextProperties(self, classificationType: IClassificationType, properties: TextFormattingRunProperties, priority: IClassificationType) -> None: ...
    def BeginBatchUpdate(self) -> None: ...
    def EndBatchUpdate(self) -> None: ...
    @property
    def CurrentPriorityOrder(self) -> ReadOnlyCollection: ...
    @property
    def DefaultTextProperties(self) -> TextFormattingRunProperties: ...
    @property
    def IsInBatchUpdate(self) -> bool: ...
    def GetEditorFormatMapKey(self, classificationType: IClassificationType) -> str: ...
    def GetExplicitTextProperties(self, classificationType: IClassificationType) -> TextFormattingRunProperties: ...
    def GetTextProperties(self, classificationType: IClassificationType) -> TextFormattingRunProperties: ...
    def remove_ClassificationFormatMappingChanged(self, value: EventHandler) -> None: ...
    @DefaultTextProperties.setter
    def DefaultTextProperties(self, value: TextFormattingRunProperties) -> None: ...
    def SetExplicitTextProperties(self, classificationType: IClassificationType, properties: TextFormattingRunProperties) -> None: ...
    def SetTextProperties(self, classificationType: IClassificationType, properties: TextFormattingRunProperties) -> None: ...
    def SwapPriorities(self, firstType: IClassificationType, secondType: IClassificationType) -> None: ...


class IClassificationFormatMapService:
    @overload
    def GetClassificationFormatMap(self, textView: ITextView) -> IClassificationFormatMap: ...
    @overload
    def GetClassificationFormatMap(self, category: str) -> IClassificationFormatMap: ...


class IClassificationFormatMetadata:
    @property
    def ClassificationTypeNames(self) -> Iterable[str]: ...


class IClassificationType:
    @property
    def BaseTypes(self) -> Iterable[IClassificationType]: ...
    @property
    def Classification(self) -> str: ...
    def IsOfType(self, type: str) -> bool: ...


class IClassificationTypeRegistryService:
    def CreateClassificationType(self, type: str, baseTypes: Iterable[IClassificationType]) -> IClassificationType: ...
    @overload
    def CreateTransientClassificationType(self, baseTypes: Iterable[IClassificationType]) -> IClassificationType: ...
    @overload
    def CreateTransientClassificationType(self, baseTypes: Set(IClassificationType)) -> IClassificationType: ...
    def GetClassificationType(self, type: str) -> IClassificationType: ...


class IClassifier:
    def add_ClassificationChanged(self, value: EventHandler) -> None: ...
    def GetClassificationSpans(self, span: SnapshotSpan) -> List[ClassificationSpan]: ...
    def remove_ClassificationChanged(self, value: EventHandler) -> None: ...


class IClassifierAggregatorService:
    def GetClassifier(self, textBuffer: ITextBuffer) -> IClassifier: ...


class IClassifierProvider:
    def GetClassifier(self, textBuffer: ITextBuffer) -> IClassifier: ...


class IEditorFormatMap:
    def add_FormatMappingChanged(self, value: EventHandler) -> None: ...
    def AddProperties(self, key: str, properties: ResourceDictionary) -> None: ...
    def BeginBatchUpdate(self) -> None: ...
    def EndBatchUpdate(self) -> None: ...
    @property
    def IsInBatchUpdate(self) -> bool: ...
    def GetProperties(self, key: str) -> ResourceDictionary: ...
    def remove_FormatMappingChanged(self, value: EventHandler) -> None: ...
    def SetProperties(self, key: str, properties: ResourceDictionary) -> None: ...


class IEditorFormatMapService:
    @overload
    def GetEditorFormatMap(self, view: ITextView) -> IEditorFormatMap: ...
    @overload
    def GetEditorFormatMap(self, category: str) -> IEditorFormatMap: ...


class IEditorFormatMetadata:
    @property
    def Name(self) -> str: ...
    @property
    def UserVisible(self) -> bool: ...


class IViewClassifierAggregatorService:
    def GetClassifier(self, textView: ITextView) -> IClassifier: ...


class MarkerFormatDefinition(EditorFormatDefinition):
    pass


class Priority:
    pass


class UserVisibleAttribute(SingletonBaseMetadataAttribute):
    def __init__(self, userVisible: bool): ...
    @property
    def UserVisible(self) -> bool: ...
