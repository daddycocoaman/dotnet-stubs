from typing import Tuple, Set, Iterable, List


class HighlightCurrentLineBrush:
    def __init__(self): ...
    @property
    def Default(self) -> Brush: ...
    @property
    def Key(self) -> EditorOptionKey: ...
    @overload
    def IsValid(self, proposedValue: Brush) -> Tuple[bool, Brush]: ...


class IGlyphMetadata:
    pass


class ImeCompositionWindowBottomOffset:
    def __init__(self): ...
    @property
    def Default(self) -> float: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class ImeCompositionWindowFont:
    def __init__(self): ...
    @property
    def Default(self) -> str: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class ImeCompositionWindowHeightOffset:
    def __init__(self): ...
    @property
    def Default(self) -> float: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class ImeCompositionWindowTopOffset:
    def __init__(self): ...
    @property
    def Default(self) -> float: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class ISelectionPainter:
    def Activate(self) -> None: ...
    def Clear(self) -> None: ...
    def Update(self, selectionChanged: bool) -> None: ...


class IThumbnailSupport:
    @property
    def RemoveVisualsWhenHidden(self) -> bool: ...
    @RemoveVisualsWhenHidden.setter
    def RemoveVisualsWhenHidden(self, value: bool) -> None: ...


class SelectionAdornment:
    def __init__(self, borderPen: Pen, fillBrush: Brush, drawingPath: Geometry): ...


class TextViewLineCollection:
    def __init__(self, textView: ITextView, textLines: List[IFormattedLine]): ...
    def Add(self, item: ITextViewLine) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, item: ITextViewLine) -> bool: ...
    def ContainsBufferPosition(self, bufferPosition: SnapshotPoint) -> bool: ...
    def CopyTo(self, array: Set(ITextViewLine), arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def FormattedSpan(self) -> SnapshotSpan: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def WpfTextViewLines(self) -> ReadOnlyCollection: ...
    def GetCharacterBounds(self, bufferPosition: SnapshotPoint) -> TextBounds: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetIndexOfTextLine(self, textLine: ITextViewLine) -> int: ...
    @overload
    def GetLineMarkerGeometry(self, bufferSpan: SnapshotSpan) -> Geometry: ...
    @overload
    def GetLineMarkerGeometry(self, bufferSpan: SnapshotSpan, clipToBounds: bool, padding: Thickness) -> Geometry: ...
    @overload
    def GetMarkerGeometry(self, bufferSpan: SnapshotSpan) -> Geometry: ...
    @overload
    def GetMarkerGeometry(self, bufferSpan: SnapshotSpan, clipToBounds: bool, padding: Thickness) -> Geometry: ...
    def GetNormalizedTextBounds(self, bufferSpan: SnapshotSpan) -> Collection: ...
    def GetTextElementSpan(self, bufferPosition: SnapshotPoint) -> SnapshotSpan: ...
    @overload
    def GetTextMarkerGeometry(self, bufferSpan: SnapshotSpan) -> Geometry: ...
    @overload
    def GetTextMarkerGeometry(self, bufferSpan: SnapshotSpan, clipToBounds: bool, padding: Thickness) -> Geometry: ...
    def GetTextViewLineContainingBufferPosition(self, bufferPosition: SnapshotPoint) -> ITextViewLine: ...
    def GetTextViewLineContainingYCoordinate(self, y: float) -> ITextViewLine: ...
    def GetTextViewLinesIntersectingSpan(self, bufferSpan: SnapshotSpan) -> Collection: ...
    def IndexOf(self, item: ITextViewLine) -> int: ...
    def Insert(self, index: int, item: ITextViewLine) -> None: ...
    def IntersectsBufferSpan(self, bufferSpan: SnapshotSpan) -> bool: ...
    def Invalidate(self) -> None: ...
    def Remove(self, item: ITextViewLine) -> bool: ...
    def RemoveAt(self, index: int) -> None: ...
