__all__ = ['DragDrop','Implementation','OptionsExtensionMethods']
from typing import Tuple, Set, Iterable, List


class AdornmentLayerDefinition:
    def __init__(self): ...


class AdornmentPositioningBehavior:
    OwnerControlled = 0
    ViewportRelative = 1
    TextRelative = 2


class AdornmentRemovedCallback:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, tag: Object, element: UIElement, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, tag: Object, element: UIElement) -> None: ...


class AppearanceCategoryOption:
    def __init__(self): ...
    @property
    def Default(self) -> str: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class AutoScrollEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class BackgroundBrushChangedEventArgs:
    def __init__(self, newBackgroundBrush: Brush): ...
    @property
    def NewBackgroundBrush(self) -> Brush: ...


class Caret(DisplayTextPoint):
    def EnsureVisible(self) -> None: ...
    @property
    def AdvancedCaret(self) -> ITextCaret: ...
    @overload
    def MovePageDown(self) -> None: ...
    @overload
    def MovePageDown(self, extendSelection: bool) -> None: ...
    @overload
    def MovePageUp(self) -> None: ...
    @overload
    def MovePageUp(self, extendSelection: bool) -> None: ...
    @overload
    def MoveTo(self, position: int, extendSelection: bool) -> None: ...
    @overload
    def MoveToBeginningOfNextLine(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToBeginningOfNextViewLine(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToBeginningOfPreviousLine(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToBeginningOfPreviousViewLine(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToEndOfDocument(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToEndOfLine(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToEndOfViewLine(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToLine(self, lineNumber: int, extendSelection: bool) -> None: ...
    @overload
    def MoveToLine(self, lineNumber: int, offset: int, extendSelection: bool) -> None: ...
    @overload
    def MoveToNextCharacter(self, extendSelection: bool) -> None: ...
    def MoveToNextLine(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToNextWord(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToPreviousCharacter(self, extendSelection: bool) -> None: ...
    def MoveToPreviousLine(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToPreviousWord(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToStartOfDocument(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToStartOfLine(self, extendSelection: bool) -> None: ...
    @overload
    def MoveToStartOfViewLine(self, extendSelection: bool) -> None: ...


class CaretPosition:
    def __init__(self, bufferPosition: VirtualSnapshotPoint, mappingPoint: IMappingPoint, caretAffinity: PositionAffinity): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Affinity(self) -> PositionAffinity: ...
    @property
    def BufferPosition(self) -> SnapshotPoint: ...
    @property
    def Point(self) -> IMappingPoint: ...
    @property
    def VirtualBufferPosition(self) -> VirtualSnapshotPoint: ...
    @property
    def VirtualSpaces(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(caretPosition1: CaretPosition, caretPosition2: CaretPosition) -> bool: ...
    def op_Inequality(caretPosition1: CaretPosition, caretPosition2: CaretPosition) -> bool: ...
    def ToString(self) -> str: ...


class CaretPositionChangedEventArgs:
    def __init__(self, textView: ITextView, oldPosition: CaretPosition, newPosition: CaretPosition): ...
    @property
    def NewPosition(self) -> CaretPosition: ...
    @property
    def OldPosition(self) -> CaretPosition: ...
    @property
    def TextView(self) -> ITextView: ...


class ChangeTrackingMarginEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class CollapseHintAdornmentControl:
    @property
    def IsHighlighted(self) -> bool: ...
    def GetIsHighlighted(control: CollapseHintAdornmentControl) -> bool: ...
    @IsHighlighted.setter
    def IsHighlighted(self, value: bool) -> None: ...
    def SetIsHighlighted(control: CollapseHintAdornmentControl, isExpanded: bool) -> None: ...


class ConnectionReason:
    TextViewLifetime = 0
    ContentTypeChange = 1
    BufferGraphChange = 2


class ConvertTabsToSpaces:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class CutOrCopyBlankLineIfNoSelection:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class DefaultOptions:
    pass


class DefaultTextViewHostOptions:
    pass


class DefaultTextViewOptions:
    pass


class DefaultWpfViewOptions:
    pass


class DisplayTextPoint(TextPoint):
    @overload
    def Clone(self) -> DisplayTextPoint: ...
    @property
    def AdvancedTextViewLine(self) -> ITextViewLine: ...
    @property
    def DisplayColumn(self) -> int: ...
    @property
    def EndOfViewLine(self) -> int: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def StartOfViewLine(self) -> int: ...
    @property
    def TextView(self) -> TextView: ...
    @overload
    def GetDisplayTextRange(self, otherPoint: DisplayTextPoint) -> DisplayTextRange: ...
    @overload
    def GetDisplayTextRange(self, otherPosition: int) -> DisplayTextRange: ...
    def GetFirstNonWhiteSpaceCharacterOnViewLine(self) -> DisplayTextPoint: ...
    def MoveToBeginningOfNextViewLine(self) -> None: ...
    def MoveToBeginningOfPreviousViewLine(self) -> None: ...
    def MoveToEndOfViewLine(self) -> None: ...
    def MoveToStartOfViewLine(self) -> None: ...


class DisplayTextRange(TextRange):
    @overload
    def Clone(self) -> DisplayTextRange: ...
    @property
    def TextView(self) -> TextView: ...
    @property
    def Visibility(self) -> VisibilityState: ...
    def GetDisplayEndPoint(self) -> DisplayTextPoint: ...
    def GetDisplayStartPoint(self) -> DisplayTextPoint: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...


class DisplayUrlsAsHyperlinks:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class DragDropEditing:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class EditorOptionChangedEventArgs:
    def __init__(self, optionId: str): ...
    @property
    def OptionId(self) -> str: ...


class EditorOptionDefinition:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DefaultValue(self) -> Object: ...
    @property
    def Name(self) -> str: ...
    @property
    def ValueType(self) -> Type: ...
    def GetHashCode(self) -> int: ...
    def IsApplicableToScope(self, scope: IPropertyOwner) -> bool: ...
    def IsValid(self, proposedValue: Object) -> Tuple[bool, Object]: ...






class EditorPrimitiveIds:
    pass


class EnsureSpanVisibleOptions:
    #None = 0
    ShowStart = 1
    MinimumScroll = 2
    AlwaysCenter = 4


class GlyphMarginEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class GridCellLengthAttribute(SingletonBaseMetadataAttribute):
    def __init__(self, cellLength: float): ...
    @property
    def GridCellLength(self) -> float: ...


class GridUnitTypeAttribute(SingletonBaseMetadataAttribute):
    def __init__(self, gridUnitType: GridUnitType): ...
    @property
    def GridUnitType(self) -> GridUnitType: ...


class HighlightCurrentLineOption:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class HorizontalScrollBarEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class HowToShow:
    AsIs = 0
    Centered = 1
    OnFirstLineOfView = 2


class IAdornmentLayer:
    @overload
    def AddAdornment(self, visualSpan: SnapshotSpan, tag: Object, adornment: UIElement) -> bool: ...
    @overload
    def AddAdornment(self, behavior: AdornmentPositioningBehavior, visualSpan: Nullable, tag: Object, adornment: UIElement, removedCallback: AdornmentRemovedCallback) -> bool: ...
    @property
    def Elements(self) -> ReadOnlyCollection: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def TextView(self) -> IWpfTextView: ...
    def RemoveAdornment(self, adornment: UIElement) -> None: ...
    def RemoveAdornmentsByTag(self, tag: Object) -> None: ...
    def RemoveAdornmentsByVisualSpan(self, visualSpan: SnapshotSpan) -> None: ...
    def RemoveAllAdornments(self) -> None: ...
    @overload
    def RemoveMatchingAdornments(self, match: Predicate) -> None: ...
    @overload
    def RemoveMatchingAdornments(self, visualSpan: SnapshotSpan, match: Predicate) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...


class IAdornmentLayerElement:
    @property
    def Adornment(self) -> UIElement: ...
    @property
    def Behavior(self) -> AdornmentPositioningBehavior: ...
    @property
    def RemovedCallback(self) -> AdornmentRemovedCallback: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def VisualSpan(self) -> Nullable: ...


class IBufferPrimitives:
    @property
    def Buffer(self) -> TextBuffer: ...


class IBufferPrimitivesFactoryService:
    def CreateTextBuffer(self, textBuffer: ITextBuffer) -> TextBuffer: ...
    def CreateTextPoint(self, textBuffer: TextBuffer, position: int) -> TextPoint: ...
    def CreateTextRange(self, textBuffer: TextBuffer, startPoint: TextPoint, endPoint: TextPoint) -> TextRange: ...


class IEditorOptions:
    def add_OptionChanged(self, value: EventHandler) -> None: ...
    @overload
    def ClearOptionValue(self, optionId: str) -> bool: ...
    @overload
    def ClearOptionValue(self, key: EditorOptionKey) -> bool: ...
    @property
    def GlobalOptions(self) -> IEditorOptions: ...
    @property
    def Parent(self) -> IEditorOptions: ...
    @property
    def SupportedOptions(self) -> Iterable[EditorOptionDefinition]: ...
    @overload
    def GetOptionValue(self, optionId: str) -> T: ...
    @overload
    def GetOptionValue(self, key: EditorOptionKey) -> T: ...
    @overload
    def GetOptionValue(self, optionId: str) -> Object: ...
    @overload
    def IsOptionDefined(self, optionId: str, localScopeOnly: bool) -> bool: ...
    @overload
    def IsOptionDefined(self, key: EditorOptionKey, localScopeOnly: bool) -> bool: ...
    def remove_OptionChanged(self, value: EventHandler) -> None: ...
    @Parent.setter
    def Parent(self, value: IEditorOptions) -> None: ...
    @overload
    def SetOptionValue(self, optionId: str, value: Object) -> None: ...
    @overload
    def SetOptionValue(self, key: EditorOptionKey, value: T) -> None: ...


class IEditorOptionsFactoryService:
    def CreateOptions(self) -> IEditorOptions: ...
    @property
    def GlobalOptions(self) -> IEditorOptions: ...
    def GetOptions(self, scope: IPropertyOwner) -> IEditorOptions: ...


class IEditorPrimitivesFactoryService:
    def GetBufferPrimitives(self, textBuffer: ITextBuffer) -> IBufferPrimitives: ...
    def GetViewPrimitives(self, textView: ITextView) -> IViewPrimitives: ...


class IGlyphFactory:
    def GenerateGlyph(self, line: IWpfTextViewLine, tag: IGlyphTag) -> UIElement: ...


class IGlyphFactoryProvider:
    def GetGlyphFactory(self, view: IWpfTextView, margin: IWpfTextViewMargin) -> IGlyphFactory: ...


class IGlyphMouseProcessorProvider:
    def GetAssociatedMouseProcessor(self, wpfTextViewHost: IWpfTextViewHost, margin: IWpfTextViewMargin) -> IMouseProcessor: ...


class IGlyphTag:
    pass


class IKeyProcessorProvider:
    def GetAssociatedProcessor(self, wpfTextView: IWpfTextView) -> KeyProcessor: ...


class ImeTextComposition:
    def __init__(self, inputManager: InputManager, source: IInputElement, resultText: str): ...


class IMouseProcessor:
    def PostprocessDragEnter(self, e: DragEventArgs) -> None: ...
    def PostprocessDragLeave(self, e: DragEventArgs) -> None: ...
    def PostprocessDragOver(self, e: DragEventArgs) -> None: ...
    def PostprocessDrop(self, e: DragEventArgs) -> None: ...
    def PostprocessGiveFeedback(self, e: GiveFeedbackEventArgs) -> None: ...
    def PostprocessMouseDown(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseEnter(self, e: MouseEventArgs) -> None: ...
    def PostprocessMouseLeave(self, e: MouseEventArgs) -> None: ...
    def PostprocessMouseLeftButtonDown(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseLeftButtonUp(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseMove(self, e: MouseEventArgs) -> None: ...
    def PostprocessMouseRightButtonDown(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseRightButtonUp(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseUp(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseWheel(self, e: MouseWheelEventArgs) -> None: ...
    def PostprocessQueryContinueDrag(self, e: QueryContinueDragEventArgs) -> None: ...
    def PreprocessDragEnter(self, e: DragEventArgs) -> None: ...
    def PreprocessDragLeave(self, e: DragEventArgs) -> None: ...
    def PreprocessDragOver(self, e: DragEventArgs) -> None: ...
    def PreprocessDrop(self, e: DragEventArgs) -> None: ...
    def PreprocessGiveFeedback(self, e: GiveFeedbackEventArgs) -> None: ...
    def PreprocessMouseDown(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseEnter(self, e: MouseEventArgs) -> None: ...
    def PreprocessMouseLeave(self, e: MouseEventArgs) -> None: ...
    def PreprocessMouseLeftButtonDown(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseLeftButtonUp(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseMove(self, e: MouseEventArgs) -> None: ...
    def PreprocessMouseRightButtonDown(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseRightButtonUp(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseUp(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseWheel(self, e: MouseWheelEventArgs) -> None: ...
    def PreprocessQueryContinueDrag(self, e: QueryContinueDragEventArgs) -> None: ...


class IMouseProcessorProvider:
    def GetAssociatedProcessor(self, wpfTextView: IWpfTextView) -> IMouseProcessor: ...


class IndentSize:
    def __init__(self): ...
    @property
    def Default(self) -> int: ...
    @property
    def Key(self) -> EditorOptionKey: ...
    @overload
    def IsValid(self, proposedValue: int) -> Tuple[bool, int]: ...


class IntraTextAdornment:
    def GetIsSelected(element: UIElement) -> bool: ...
    def SetIsSelected(element: UIElement, isSelected: bool) -> None: ...


class IntraTextAdornmentTag:
    @overload
    def __init__(self, adornment: UIElement, removalCallback: AdornmentRemovedCallback): ...
    @overload
    def __init__(self, adornment: UIElement, removalCallback: AdornmentRemovedCallback, affinity: Nullable): ...
    @overload
    def __init__(self, adornment: UIElement, removalCallback: AdornmentRemovedCallback, topSpace: Nullable, baseline: Nullable, textHeight: Nullable, bottomSpace: Nullable, affinity: Nullable): ...
    @property
    def Adornment(self) -> UIElement: ...
    @property
    def Affinity(self) -> Nullable: ...
    @property
    def Baseline(self) -> Nullable: ...
    @property
    def BottomSpace(self) -> Nullable: ...
    @property
    def RemovalCallback(self) -> AdornmentRemovedCallback: ...
    @property
    def TextHeight(self) -> Nullable: ...
    @property
    def TopSpace(self) -> Nullable: ...


class IScrollMap:
    @property
    def AreElisionsExpanded(self) -> bool: ...
    @property
    def End(self) -> float: ...
    @property
    def Start(self) -> float: ...
    @property
    def ThumbSize(self) -> float: ...
    def GetBufferPositionAtCoordinate(self, coordinate: float) -> SnapshotPoint: ...
    def GetCoordinateAtBufferPosition(self, bufferPosition: SnapshotPoint) -> float: ...


class IScrollMapFactoryService:
    @overload
    def Create(self, textView: ITextView) -> IScrollMap: ...
    @overload
    def Create(self, textView: ITextView, areElisionsExpanded: bool) -> IScrollMap: ...


class ISmartIndent:
    def GetDesiredIndentation(self, line: ITextSnapshotLine) -> Nullable: ...


class ISmartIndentationService:
    def GetDesiredIndentation(self, textView: ITextView, line: ITextSnapshotLine) -> Nullable: ...


class ISmartIndentProvider:
    def CreateSmartIndent(self, textView: ITextView) -> ISmartIndent: ...


class ISpaceReservationAgent:
    def add_GotFocus(self, value: EventHandler) -> None: ...
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def IsMouseOver(self) -> bool: ...
    def Hide(self) -> None: ...
    def PositionAndDisplay(self, reservedSpace: Geometry) -> Geometry: ...
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    def remove_LostFocus(self, value: EventHandler) -> None: ...


class ISpaceReservationManager:
    def add_AgentChanged(self, value: EventHandler) -> None: ...
    def add_GotAggregateFocus(self, value: EventHandler) -> None: ...
    def add_LostAggregateFocus(self, value: EventHandler) -> None: ...
    def AddAgent(self, agent: ISpaceReservationAgent) -> None: ...
    def CreatePopupAgent(self, visualSpan: ITrackingSpan, style: PopupStyles, content: UIElement) -> ISpaceReservationAgent: ...
    @property
    def Agents(self) -> ReadOnlyCollection: ...
    @property
    def HasAggregateFocus(self) -> bool: ...
    @property
    def IsMouseOver(self) -> bool: ...
    def remove_AgentChanged(self, value: EventHandler) -> None: ...
    def remove_GotAggregateFocus(self, value: EventHandler) -> None: ...
    def remove_LostAggregateFocus(self, value: EventHandler) -> None: ...
    def RemoveAgent(self, agent: ISpaceReservationAgent) -> bool: ...
    def UpdatePopupAgent(self, agent: ISpaceReservationAgent, visualSpan: ITrackingSpan, styles: PopupStyles) -> None: ...


class IsViewportLeftClipped:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class ITextCaret:
    def add_PositionChanged(self, value: EventHandler) -> None: ...
    def EnsureVisible(self) -> None: ...
    @property
    def Bottom(self) -> float: ...
    @property
    def ContainingTextViewLine(self) -> ITextViewLine: ...
    @property
    def Height(self) -> float: ...
    @property
    def InVirtualSpace(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def Left(self) -> float: ...
    @property
    def OverwriteMode(self) -> bool: ...
    @property
    def Position(self) -> CaretPosition: ...
    @property
    def Right(self) -> float: ...
    @property
    def Top(self) -> float: ...
    @property
    def Width(self) -> float: ...
    @overload
    def MoveTo(self, textLine: ITextViewLine) -> CaretPosition: ...
    @overload
    def MoveTo(self, bufferPosition: SnapshotPoint) -> CaretPosition: ...
    @overload
    def MoveTo(self, bufferPosition: VirtualSnapshotPoint) -> CaretPosition: ...
    @overload
    def MoveTo(self, textLine: ITextViewLine, xCoordinate: float) -> CaretPosition: ...
    @overload
    def MoveTo(self, bufferPosition: VirtualSnapshotPoint, caretAffinity: PositionAffinity) -> CaretPosition: ...
    @overload
    def MoveTo(self, bufferPosition: SnapshotPoint, caretAffinity: PositionAffinity) -> CaretPosition: ...
    @overload
    def MoveTo(self, bufferPosition: VirtualSnapshotPoint, caretAffinity: PositionAffinity, captureHorizontalPosition: bool) -> CaretPosition: ...
    @overload
    def MoveTo(self, bufferPosition: SnapshotPoint, caretAffinity: PositionAffinity, captureHorizontalPosition: bool) -> CaretPosition: ...
    @overload
    def MoveTo(self, textLine: ITextViewLine, xCoordinate: float, captureHorizontalPosition: bool) -> CaretPosition: ...
    def MoveToNextCaretPosition(self) -> CaretPosition: ...
    def MoveToPreferredCoordinates(self) -> CaretPosition: ...
    def MoveToPreviousCaretPosition(self) -> CaretPosition: ...
    def remove_PositionChanged(self, value: EventHandler) -> None: ...
    @IsHidden.setter
    def IsHidden(self, value: bool) -> None: ...


class ITextEditorFactoryService:
    def add_TextViewCreated(self, value: EventHandler) -> None: ...
    @overload
    def CreateTextView(self) -> IWpfTextView: ...
    @overload
    def CreateTextView(self, textBuffer: ITextBuffer) -> IWpfTextView: ...
    @overload
    def CreateTextView(self, textBuffer: ITextBuffer, roles: ITextViewRoleSet) -> IWpfTextView: ...
    @overload
    def CreateTextView(self, viewModel: ITextViewModel, roles: ITextViewRoleSet, parentOptions: IEditorOptions) -> IWpfTextView: ...
    @overload
    def CreateTextView(self, dataModel: ITextDataModel, roles: ITextViewRoleSet, parentOptions: IEditorOptions) -> IWpfTextView: ...
    @overload
    def CreateTextView(self, textBuffer: ITextBuffer, roles: ITextViewRoleSet, parentOptions: IEditorOptions) -> IWpfTextView: ...
    def CreateTextViewHost(self, wpfTextView: IWpfTextView, setFocus: bool) -> IWpfTextViewHost: ...
    @overload
    def CreateTextViewRoleSet(self, roles: Iterable[str]) -> ITextViewRoleSet: ...
    @overload
    def CreateTextViewRoleSet(self, roles: Set(str)) -> ITextViewRoleSet: ...
    @property
    def AllPredefinedRoles(self) -> ITextViewRoleSet: ...
    @property
    def DefaultRoles(self) -> ITextViewRoleSet: ...
    @property
    def NoRoles(self) -> ITextViewRoleSet: ...
    def remove_TextViewCreated(self, value: EventHandler) -> None: ...


class ITextSelection:
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    def Clear(self) -> None: ...
    @property
    def ActivationTracksFocus(self) -> bool: ...
    @property
    def ActivePoint(self) -> VirtualSnapshotPoint: ...
    @property
    def AnchorPoint(self) -> VirtualSnapshotPoint: ...
    @property
    def End(self) -> VirtualSnapshotPoint: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsReversed(self) -> bool: ...
    @property
    def Mode(self) -> TextSelectionMode: ...
    @property
    def SelectedSpans(self) -> NormalizedSnapshotSpanCollection: ...
    @property
    def Start(self) -> VirtualSnapshotPoint: ...
    @property
    def StreamSelectionSpan(self) -> VirtualSnapshotSpan: ...
    @property
    def TextView(self) -> ITextView: ...
    @property
    def VirtualSelectedSpans(self) -> ReadOnlyCollection: ...
    def GetSelectionOnTextViewLine(self, line: ITextViewLine) -> Nullable: ...
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def Select(self, anchorPoint: VirtualSnapshotPoint, activePoint: VirtualSnapshotPoint) -> None: ...
    @overload
    def Select(self, selectionSpan: SnapshotSpan, isReversed: bool) -> None: ...
    @ActivationTracksFocus.setter
    def ActivationTracksFocus(self, value: bool) -> None: ...
    @IsActive.setter
    def IsActive(self, value: bool) -> None: ...
    @Mode.setter
    def Mode(self, value: TextSelectionMode) -> None: ...


class ITextView:
    def add_Closed(self, value: EventHandler) -> None: ...
    def add_GotAggregateFocus(self, value: EventHandler) -> None: ...
    def add_LayoutChanged(self, value: EventHandler) -> None: ...
    def add_LostAggregateFocus(self, value: EventHandler) -> None: ...
    def add_MouseHover(self, value: EventHandler) -> None: ...
    def add_ViewportHeightChanged(self, value: EventHandler) -> None: ...
    def add_ViewportLeftChanged(self, value: EventHandler) -> None: ...
    def add_ViewportWidthChanged(self, value: EventHandler) -> None: ...
    def Close(self) -> None: ...
    @overload
    def DisplayTextLineContainingBufferPosition(self, bufferPosition: SnapshotPoint, verticalDistance: float, relativeTo: ViewRelativePosition) -> None: ...
    @overload
    def DisplayTextLineContainingBufferPosition(self, bufferPosition: SnapshotPoint, verticalDistance: float, relativeTo: ViewRelativePosition, viewportWidthOverride: Nullable, viewportHeightOverride: Nullable) -> None: ...
    @property
    def BufferGraph(self) -> IBufferGraph: ...
    @property
    def Caret(self) -> ITextCaret: ...
    @property
    def HasAggregateFocus(self) -> bool: ...
    @property
    def InLayout(self) -> bool: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def IsMouseOverViewOrAdornments(self) -> bool: ...
    @property
    def LineHeight(self) -> float: ...
    @property
    def MaxTextRightCoordinate(self) -> float: ...
    @property
    def Options(self) -> IEditorOptions: ...
    @property
    def ProvisionalTextHighlight(self) -> ITrackingSpan: ...
    @property
    def Roles(self) -> ITextViewRoleSet: ...
    @property
    def Selection(self) -> ITextSelection: ...
    @property
    def TextBuffer(self) -> ITextBuffer: ...
    @property
    def TextDataModel(self) -> ITextDataModel: ...
    @property
    def TextSnapshot(self) -> ITextSnapshot: ...
    @property
    def TextViewLines(self) -> ITextViewLineCollection: ...
    @property
    def TextViewModel(self) -> ITextViewModel: ...
    @property
    def ViewportBottom(self) -> float: ...
    @property
    def ViewportHeight(self) -> float: ...
    @property
    def ViewportLeft(self) -> float: ...
    @property
    def ViewportRight(self) -> float: ...
    @property
    def ViewportTop(self) -> float: ...
    @property
    def ViewportWidth(self) -> float: ...
    @property
    def ViewScroller(self) -> IViewScroller: ...
    @property
    def VisualSnapshot(self) -> ITextSnapshot: ...
    def GetTextElementSpan(self, point: SnapshotPoint) -> SnapshotSpan: ...
    def GetTextViewLineContainingBufferPosition(self, bufferPosition: SnapshotPoint) -> ITextViewLine: ...
    def QueueSpaceReservationStackRefresh(self) -> None: ...
    def remove_Closed(self, value: EventHandler) -> None: ...
    def remove_GotAggregateFocus(self, value: EventHandler) -> None: ...
    def remove_LayoutChanged(self, value: EventHandler) -> None: ...
    def remove_LostAggregateFocus(self, value: EventHandler) -> None: ...
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    def remove_ViewportHeightChanged(self, value: EventHandler) -> None: ...
    def remove_ViewportLeftChanged(self, value: EventHandler) -> None: ...
    def remove_ViewportWidthChanged(self, value: EventHandler) -> None: ...
    @ProvisionalTextHighlight.setter
    def ProvisionalTextHighlight(self, value: ITrackingSpan) -> None: ...
    @ViewportLeft.setter
    def ViewportLeft(self, value: float) -> None: ...


class ITextViewLineCollection:
    def ContainsBufferPosition(self, bufferPosition: SnapshotPoint) -> bool: ...
    @property
    def FirstVisibleLine(self) -> ITextViewLine: ...
    @property
    def FormattedSpan(self) -> SnapshotSpan: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LastVisibleLine(self) -> ITextViewLine: ...
    def GetCharacterBounds(self, bufferPosition: SnapshotPoint) -> TextBounds: ...
    def GetIndexOfTextLine(self, textLine: ITextViewLine) -> int: ...
    def GetNormalizedTextBounds(self, bufferSpan: SnapshotSpan) -> Collection: ...
    def GetTextElementSpan(self, bufferPosition: SnapshotPoint) -> SnapshotSpan: ...
    def GetTextViewLineContainingBufferPosition(self, bufferPosition: SnapshotPoint) -> ITextViewLine: ...
    def GetTextViewLineContainingYCoordinate(self, y: float) -> ITextViewLine: ...
    def GetTextViewLinesIntersectingSpan(self, bufferSpan: SnapshotSpan) -> Collection: ...
    def IntersectsBufferSpan(self, bufferSpan: SnapshotSpan) -> bool: ...


class ITextViewMargin:
    @property
    def Enabled(self) -> bool: ...
    @property
    def MarginSize(self) -> float: ...
    def GetTextViewMargin(self, marginName: str) -> ITextViewMargin: ...


class ITextViewModel:
    @property
    def DataBuffer(self) -> ITextBuffer: ...
    @property
    def DataModel(self) -> ITextDataModel: ...
    @property
    def EditBuffer(self) -> ITextBuffer: ...
    @property
    def VisualBuffer(self) -> ITextBuffer: ...
    def GetNearestPointInVisualBuffer(self, editBufferPoint: SnapshotPoint) -> SnapshotPoint: ...
    def GetNearestPointInVisualSnapshot(self, editBufferPoint: SnapshotPoint, targetVisualSnapshot: ITextSnapshot, trackingMode: PointTrackingMode) -> SnapshotPoint: ...
    def IsPointInVisualBuffer(self, editBufferPoint: SnapshotPoint, affinity: PositionAffinity) -> bool: ...


class ITextViewModelProvider:
    def CreateTextViewModel(self, dataModel: ITextDataModel, roles: ITextViewRoleSet) -> ITextViewModel: ...


class ITextViewRoleSet:
    def Contains(self, textViewRole: str) -> bool: ...
    def ContainsAll(self, textViewRoles: Iterable[str]) -> bool: ...
    def ContainsAny(self, textViewRoles: Iterable[str]) -> bool: ...
    def UnionWith(self, roleSet: ITextViewRoleSet) -> ITextViewRoleSet: ...


class IVerticalFractionMap:
    def add_MappingChanged(self, value: EventHandler) -> None: ...
    @property
    def TextView(self) -> ITextView: ...
    def GetBufferPositionAtFraction(self, fraction: float) -> SnapshotPoint: ...
    def GetFractionAtBufferPosition(self, bufferPosition: SnapshotPoint) -> float: ...
    def remove_MappingChanged(self, value: EventHandler) -> None: ...


class IVerticalScrollBar:
    def add_TrackSpanChanged(self, value: EventHandler) -> None: ...
    @property
    def Map(self) -> IScrollMap: ...
    @property
    def ThumbHeight(self) -> float: ...
    @property
    def TrackSpanBottom(self) -> float: ...
    @property
    def TrackSpanHeight(self) -> float: ...
    @property
    def TrackSpanTop(self) -> float: ...
    def GetBufferPositionOfYCoordinate(self, y: float) -> SnapshotPoint: ...
    def GetYCoordinateOfBufferPosition(self, bufferPosition: SnapshotPoint) -> float: ...
    def GetYCoordinateOfScrollMapPosition(self, scrollMapPosition: float) -> float: ...
    def remove_TrackSpanChanged(self, value: EventHandler) -> None: ...


class IViewPrimitives:
    @property
    def Caret(self) -> Caret: ...
    @property
    def Selection(self) -> Selection: ...
    @property
    def View(self) -> TextView: ...


class IViewPrimitivesFactoryService:
    def CreateCaret(self, textView: TextView) -> Caret: ...
    def CreateDisplayTextPoint(self, textView: TextView, position: int) -> DisplayTextPoint: ...
    def CreateDisplayTextRange(self, textView: TextView, textRange: TextRange) -> DisplayTextRange: ...
    def CreateSelection(self, textView: TextView) -> Selection: ...
    def CreateTextView(self, textView: ITextView) -> TextView: ...


class IViewScroller:
    @overload
    def EnsureSpanVisible(self, span: SnapshotSpan) -> None: ...
    @overload
    def EnsureSpanVisible(self, span: SnapshotSpan, options: EnsureSpanVisibleOptions) -> None: ...
    @overload
    def EnsureSpanVisible(self, span: VirtualSnapshotSpan, options: EnsureSpanVisibleOptions) -> None: ...
    def ScrollViewportHorizontallyByPixels(self, distanceToScroll: float) -> None: ...
    def ScrollViewportVerticallyByLine(self, direction: ScrollDirection) -> None: ...
    def ScrollViewportVerticallyByLines(self, direction: ScrollDirection, count: int) -> None: ...
    def ScrollViewportVerticallyByPage(self, direction: ScrollDirection) -> bool: ...
    def ScrollViewportVerticallyByPixels(self, distanceToScroll: float) -> None: ...


class IWpfTextView:
    def add_BackgroundBrushChanged(self, value: EventHandler) -> None: ...
    def add_ZoomLevelChanged(self, value: EventHandler) -> None: ...
    @property
    def Background(self) -> Brush: ...
    @property
    def FormattedLineSource(self) -> IFormattedLineSource: ...
    @property
    def LineTransformSource(self) -> ILineTransformSource: ...
    @property
    def TextViewLines(self) -> IWpfTextViewLineCollection: ...
    @property
    def VisualElement(self) -> FrameworkElement: ...
    @property
    def ZoomLevel(self) -> float: ...
    def GetAdornmentLayer(self, name: str) -> IAdornmentLayer: ...
    def GetSpaceReservationManager(self, name: str) -> ISpaceReservationManager: ...
    def GetTextViewLineContainingBufferPosition(self, bufferPosition: SnapshotPoint) -> IWpfTextViewLine: ...
    def remove_BackgroundBrushChanged(self, value: EventHandler) -> None: ...
    def remove_ZoomLevelChanged(self, value: EventHandler) -> None: ...
    @Background.setter
    def Background(self, value: Brush) -> None: ...
    @ZoomLevel.setter
    def ZoomLevel(self, value: float) -> None: ...


class IWpfTextViewConnectionListener:
    def SubjectBuffersConnected(self, textView: IWpfTextView, reason: ConnectionReason, subjectBuffers: Collection) -> None: ...
    def SubjectBuffersDisconnected(self, textView: IWpfTextView, reason: ConnectionReason, subjectBuffers: Collection) -> None: ...


class IWpfTextViewCreationListener:
    def TextViewCreated(self, textView: IWpfTextView) -> None: ...


class IWpfTextViewHost:
    def add_Closed(self, value: EventHandler) -> None: ...
    def Close(self) -> None: ...
    @property
    def HostControl(self) -> Control: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def TextView(self) -> IWpfTextView: ...
    def GetTextViewMargin(self, marginName: str) -> IWpfTextViewMargin: ...
    def remove_Closed(self, value: EventHandler) -> None: ...


class IWpfTextViewLineCollection:
    @property
    def FirstVisibleLine(self) -> IWpfTextViewLine: ...
    @property
    def Item(self, index: int) -> IWpfTextViewLine: ...
    @property
    def LastVisibleLine(self) -> IWpfTextViewLine: ...
    @property
    def WpfTextViewLines(self) -> ReadOnlyCollection: ...
    @overload
    def GetLineMarkerGeometry(self, bufferSpan: SnapshotSpan) -> Geometry: ...
    @overload
    def GetLineMarkerGeometry(self, bufferSpan: SnapshotSpan, clipToViewport: bool, padding: Thickness) -> Geometry: ...
    @overload
    def GetMarkerGeometry(self, bufferSpan: SnapshotSpan) -> Geometry: ...
    @overload
    def GetMarkerGeometry(self, bufferSpan: SnapshotSpan, clipToViewport: bool, padding: Thickness) -> Geometry: ...
    @overload
    def GetTextMarkerGeometry(self, bufferSpan: SnapshotSpan) -> Geometry: ...
    @overload
    def GetTextMarkerGeometry(self, bufferSpan: SnapshotSpan, clipToViewport: bool, padding: Thickness) -> Geometry: ...
    def GetTextViewLineContainingBufferPosition(self, bufferPosition: SnapshotPoint) -> IWpfTextViewLine: ...


class IWpfTextViewMargin:
    @property
    def VisualElement(self) -> FrameworkElement: ...


class IWpfTextViewMarginProvider:
    def CreateMargin(self, wpfTextViewHost: IWpfTextViewHost, marginContainer: IWpfTextViewMargin) -> IWpfTextViewMargin: ...


class KeyProcessor:
    @property
    def IsInterestedInHandledEvents(self) -> bool: ...
    def KeyDown(self, args: KeyEventArgs) -> None: ...
    def KeyUp(self, args: KeyEventArgs) -> None: ...
    def PreviewKeyDown(self, args: KeyEventArgs) -> None: ...
    def PreviewKeyUp(self, args: KeyEventArgs) -> None: ...
    def PreviewTextInput(self, args: TextCompositionEventArgs) -> None: ...
    def PreviewTextInputStart(self, args: TextCompositionEventArgs) -> None: ...
    def PreviewTextInputUpdate(self, args: TextCompositionEventArgs) -> None: ...
    def TextInput(self, args: TextCompositionEventArgs) -> None: ...
    def TextInputStart(self, args: TextCompositionEventArgs) -> None: ...
    def TextInputUpdate(self, args: TextCompositionEventArgs) -> None: ...


class LineNumberMarginEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class MarginContainerAttribute(SingletonBaseMetadataAttribute):
    def __init__(self, marginContainer: str): ...
    @property
    def MarginContainer(self) -> str: ...


class MouseHoverAttribute:
    def __init__(self, delay: int): ...
    @property
    def Delay(self) -> int: ...


class MouseHoverEventArgs:
    def __init__(self, view: ITextView, position: int, textPosition: IMappingPoint): ...
    @property
    def Position(self) -> int: ...
    @property
    def TextPosition(self) -> IMappingPoint: ...
    @property
    def View(self) -> ITextView: ...


class MouseProcessorBase:
    def PostprocessDragEnter(self, e: DragEventArgs) -> None: ...
    def PostprocessDragLeave(self, e: DragEventArgs) -> None: ...
    def PostprocessDragOver(self, e: DragEventArgs) -> None: ...
    def PostprocessDrop(self, e: DragEventArgs) -> None: ...
    def PostprocessGiveFeedback(self, e: GiveFeedbackEventArgs) -> None: ...
    def PostprocessMouseDown(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseEnter(self, e: MouseEventArgs) -> None: ...
    def PostprocessMouseLeave(self, e: MouseEventArgs) -> None: ...
    def PostprocessMouseLeftButtonDown(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseLeftButtonUp(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseMove(self, e: MouseEventArgs) -> None: ...
    def PostprocessMouseRightButtonDown(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseRightButtonUp(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseUp(self, e: MouseButtonEventArgs) -> None: ...
    def PostprocessMouseWheel(self, e: MouseWheelEventArgs) -> None: ...
    def PostprocessQueryContinueDrag(self, e: QueryContinueDragEventArgs) -> None: ...
    def PreprocessDragEnter(self, e: DragEventArgs) -> None: ...
    def PreprocessDragLeave(self, e: DragEventArgs) -> None: ...
    def PreprocessDragOver(self, e: DragEventArgs) -> None: ...
    def PreprocessDrop(self, e: DragEventArgs) -> None: ...
    def PreprocessGiveFeedback(self, e: GiveFeedbackEventArgs) -> None: ...
    def PreprocessMouseDown(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseEnter(self, e: MouseEventArgs) -> None: ...
    def PreprocessMouseLeave(self, e: MouseEventArgs) -> None: ...
    def PreprocessMouseLeftButtonDown(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseLeftButtonUp(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseMove(self, e: MouseEventArgs) -> None: ...
    def PreprocessMouseRightButtonDown(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseRightButtonUp(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseUp(self, e: MouseButtonEventArgs) -> None: ...
    def PreprocessMouseWheel(self, e: MouseWheelEventArgs) -> None: ...
    def PreprocessQueryContinueDrag(self, e: QueryContinueDragEventArgs) -> None: ...


class MouseWheelZoomEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class NewLineCharacter:
    def __init__(self): ...
    @property
    def Default(self) -> str: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class OutliningCollapsedAdornmentControl:
    pass


class OutliningMarginBracketControl:
    @property
    def FirstLineOffset(self) -> float: ...
    @property
    def IsHighlighted(self) -> bool: ...
    def GetFirstLineOffset(control: OutliningMarginBracketControl) -> float: ...
    def GetIsHighlighted(control: OutliningMarginBracketControl) -> bool: ...
    @FirstLineOffset.setter
    def FirstLineOffset(self, value: float) -> None: ...
    @IsHighlighted.setter
    def IsHighlighted(self, value: bool) -> None: ...
    def SetFirstLineOffset(control: OutliningMarginBracketControl, firstLineOffset: float) -> None: ...
    def SetIsHighlighted(control: OutliningMarginBracketControl, isExpanded: bool) -> None: ...


class OutliningMarginControl:
    pass


class OutliningMarginEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class OutliningMarginHeaderControl:
    @property
    def IsExpanded(self) -> bool: ...
    @property
    def IsHighlighted(self) -> bool: ...
    def GetIsExpanded(control: OutliningMarginHeaderControl) -> bool: ...
    def GetIsHighlighted(control: OutliningMarginHeaderControl) -> bool: ...
    @IsExpanded.setter
    def IsExpanded(self, value: bool) -> None: ...
    @IsHighlighted.setter
    def IsHighlighted(self, value: bool) -> None: ...
    def SetIsExpanded(control: OutliningMarginHeaderControl, isExpanded: bool) -> None: ...
    def SetIsHighlighted(control: OutliningMarginHeaderControl, isExpanded: bool) -> None: ...


class OutliningUndoEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class OverwriteMode:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class PredefinedAdornmentLayers:
    pass


class PredefinedMarginNames:
    pass


class PredefinedTextViewRoles:
    pass


class ProduceScreenReaderFriendlyText:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class ReplicateNewLineCharacter:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class ScrollDirection:
    Up = 0
    Down = 1


class Selection(DisplayTextRange):
    def Clear(self) -> None: ...
    def ExtendSelection(self, newEnd: TextPoint) -> None: ...
    @property
    def AdvancedSelection(self) -> ITextSelection: ...
    @property
    def IsReversed(self) -> bool: ...
    def SelectAll(self) -> None: ...
    @overload
    def SelectRange(self, textRange: TextRange) -> None: ...
    @overload
    def SelectRange(self, selectionStart: TextPoint, selectionEnd: TextPoint) -> None: ...
    @IsReversed.setter
    def IsReversed(self, value: bool) -> None: ...


class SelectionMarginEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class SimpleGraphicsOption:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class SpaceReservationAgentChangedEventArgs:
    def __init__(self, oldAgent: ISpaceReservationAgent, newAgent: ISpaceReservationAgent): ...
    @property
    def NewAgent(self) -> ISpaceReservationAgent: ...
    @property
    def OldAgent(self) -> ISpaceReservationAgent: ...


class SpaceReservationManagerDefinition:
    def __init__(self): ...


class TabSize:
    def __init__(self): ...
    @property
    def Default(self) -> int: ...
    @property
    def Key(self) -> EditorOptionKey: ...
    @overload
    def IsValid(self, proposedValue: int) -> Tuple[bool, int]: ...


class TextBuffer:
    @property
    def AdvancedTextBuffer(self) -> ITextBuffer: ...
    @property
    def Lines(self) -> Iterable[TextRange]: ...
    def GetEndPoint(self) -> TextPoint: ...
    def GetLine(self, line: int) -> TextRange: ...
    def GetStartPoint(self) -> TextPoint: ...
    @overload
    def GetTextPoint(self, position: int) -> TextPoint: ...
    @overload
    def GetTextPoint(self, line: int, column: int) -> TextPoint: ...
    @overload
    def GetTextRange(self, startPoint: TextPoint, endPoint: TextPoint) -> TextRange: ...
    @overload
    def GetTextRange(self, startPosition: int, endPosition: int) -> TextRange: ...


class TextPoint:
    def Clone(self) -> TextPoint: ...
    def DeleteNext(self) -> bool: ...
    def DeletePrevious(self) -> bool: ...
    @overload
    def Find(self, pattern: str) -> TextRange: ...
    @overload
    def Find(self, pattern: str, endPoint: TextPoint) -> TextRange: ...
    @overload
    def Find(self, pattern: str, findOptions: FindOptions) -> TextRange: ...
    @overload
    def Find(self, pattern: str, findOptions: FindOptions, endPoint: TextPoint) -> TextRange: ...
    @overload
    def FindAll(self, pattern: str) -> Collection: ...
    @overload
    def FindAll(self, pattern: str, endPoint: TextPoint) -> Collection: ...
    @overload
    def FindAll(self, pattern: str, findOptions: FindOptions) -> Collection: ...
    @overload
    def FindAll(self, pattern: str, findOptions: FindOptions, endPoint: TextPoint) -> Collection: ...
    @property
    def AdvancedTextPoint(self) -> SnapshotPoint: ...
    @property
    def Column(self) -> int: ...
    @property
    def CurrentPosition(self) -> int: ...
    @property
    def EndOfLine(self) -> int: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def StartOfLine(self) -> int: ...
    @property
    def TextBuffer(self) -> TextBuffer: ...
    def GetCurrentWord(self) -> TextRange: ...
    def GetFirstNonWhiteSpaceCharacterOnLine(self) -> TextPoint: ...
    def GetNextCharacter(self) -> str: ...
    def GetNextWord(self) -> TextRange: ...
    def GetPreviousCharacter(self) -> str: ...
    def GetPreviousWord(self) -> TextRange: ...
    @overload
    def GetTextRange(self, otherPoint: TextPoint) -> TextRange: ...
    @overload
    def GetTextRange(self, otherPosition: int) -> TextRange: ...
    def InsertIndent(self) -> bool: ...
    def InsertNewLine(self) -> bool: ...
    def InsertText(self, text: str) -> bool: ...
    def MoveTo(self, position: int) -> None: ...
    def MoveToBeginningOfNextLine(self) -> None: ...
    def MoveToBeginningOfPreviousLine(self) -> None: ...
    def MoveToEndOfDocument(self) -> None: ...
    def MoveToEndOfLine(self) -> None: ...
    def MoveToLine(self, lineNumber: int) -> None: ...
    def MoveToNextCharacter(self) -> None: ...
    def MoveToNextWord(self) -> None: ...
    def MoveToPreviousCharacter(self) -> None: ...
    def MoveToPreviousWord(self) -> None: ...
    def MoveToStartOfDocument(self) -> None: ...
    def MoveToStartOfLine(self) -> None: ...
    def RemovePreviousIndent(self) -> bool: ...
    def TransposeCharacter(self) -> bool: ...
    @overload
    def TransposeLine(self) -> bool: ...
    @overload
    def TransposeLine(self, lineNumber: int) -> bool: ...


class TextRange:
    def Capitalize(self) -> bool: ...
    def Clone(self) -> TextRange: ...
    def Delete(self) -> bool: ...
    @overload
    def Find(self, pattern: str) -> TextRange: ...
    @overload
    def Find(self, pattern: str, findOptions: FindOptions) -> TextRange: ...
    @overload
    def FindAll(self, pattern: str) -> Collection: ...
    @overload
    def FindAll(self, pattern: str, findOptions: FindOptions) -> Collection: ...
    @property
    def AdvancedTextRange(self) -> SnapshotSpan: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def TextBuffer(self) -> TextBuffer: ...
    def GetEndPoint(self) -> TextPoint: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetStartPoint(self) -> TextPoint: ...
    def GetText(self) -> str: ...
    def Indent(self) -> bool: ...
    def MakeLowercase(self) -> bool: ...
    def MakeUppercase(self) -> bool: ...
    def MoveTo(self, newRange: TextRange) -> None: ...
    def ReplaceText(self, newText: str) -> bool: ...
    def SetEnd(self, endPoint: TextPoint) -> None: ...
    def SetStart(self, startPoint: TextPoint) -> None: ...
    def ToggleCase(self) -> bool: ...
    def Unindent(self) -> bool: ...


class TextSelectionMode:
    Stream = 0
    Box = 1


class TextView:
    @property
    def AdvancedTextView(self) -> ITextView: ...
    @property
    def Caret(self) -> Caret: ...
    @property
    def Selection(self) -> Selection: ...
    @property
    def TextBuffer(self) -> TextBuffer: ...
    @property
    def VisibleSpan(self) -> DisplayTextRange: ...
    @overload
    def GetTextPoint(self, position: int) -> DisplayTextPoint: ...
    @overload
    def GetTextPoint(self, textPoint: TextPoint) -> DisplayTextPoint: ...
    @overload
    def GetTextPoint(self, line: int, column: int) -> DisplayTextPoint: ...
    @overload
    def GetTextRange(self, textRange: TextRange) -> DisplayTextRange: ...
    @overload
    def GetTextRange(self, startPoint: TextPoint, endPoint: TextPoint) -> DisplayTextRange: ...
    @overload
    def GetTextRange(self, startPosition: int, endPosition: int) -> DisplayTextRange: ...
    def MoveLineToBottom(self, lineNumber: int) -> None: ...
    def MoveLineToTop(self, lineNumber: int) -> None: ...
    def ScrollDown(self, lines: int) -> None: ...
    def ScrollPageDown(self) -> None: ...
    def ScrollPageUp(self) -> None: ...
    def ScrollUp(self, lines: int) -> None: ...
    @overload
    def Show(self, point: DisplayTextPoint, howToShow: HowToShow) -> bool: ...
    @overload
    def Show(self, textRange: DisplayTextRange, howToShow: HowToShow) -> VisibilityState: ...


class TextViewCreatedEventArgs:
    def __init__(self, textView: ITextView): ...
    @property
    def TextView(self) -> ITextView: ...


class TextViewLayoutChangedEventArgs:
    def __init__(self, oldState: ViewState, newState: ViewState, newOrReformattedLines: List[ITextViewLine], translatedLines: List[ITextViewLine]): ...
    @property
    def HorizontalTranslation(self) -> bool: ...
    @property
    def NewOrReformattedLines(self) -> ReadOnlyCollection: ...
    @property
    def NewOrReformattedSpans(self) -> NormalizedSnapshotSpanCollection: ...
    @property
    def NewSnapshot(self) -> ITextSnapshot: ...
    @property
    def NewViewState(self) -> ViewState: ...
    @property
    def OldSnapshot(self) -> ITextSnapshot: ...
    @property
    def OldViewState(self) -> ViewState: ...
    @property
    def TranslatedLines(self) -> ReadOnlyCollection: ...
    @property
    def TranslatedSpans(self) -> NormalizedSnapshotSpanCollection: ...
    @property
    def VerticalTranslation(self) -> bool: ...


class TextViewRoleAttribute(MultipleBaseMetadataAttribute):
    def __init__(self, role: str): ...
    @property
    def TextViewRoles(self) -> str: ...


class UseVirtualSpace:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class UseVisibleWhitespace:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class VerticalScrollBarEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...




class ViewProhibitUserInput:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class ViewRelativePosition:
    Top = 0
    Bottom = 1


class ViewState:
    @overload
    def __init__(self, view: ITextView): ...
    @overload
    def __init__(self, view: ITextView, effectiveViewportWidth: float, effectiveViewportHeight: float): ...
    @property
    def EditSnapshot(self) -> ITextSnapshot: ...
    @property
    def ViewportBottom(self) -> float: ...
    @property
    def ViewportHeight(self) -> float: ...
    @property
    def ViewportLeft(self) -> float: ...
    @property
    def ViewportRight(self) -> float: ...
    @property
    def ViewportTop(self) -> float: ...
    @property
    def ViewportWidth(self) -> float: ...
    @property
    def VisualSnapshot(self) -> ITextSnapshot: ...


class WordWrapStyle:
    def __init__(self): ...
    @property
    def Default(self) -> WordWrapStyles: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class WordWrapStyles:
    #None = 0
    WordWrap = 1
    VisibleGlyphs = 2
    AutoIndent = 4


class WpfTextViewKeyboardFilterName:
    pass




class ZoomConstants:
    pass


class ZoomControl:
    @property
    def SelectedZoomLevel(self) -> float: ...
    def GetSelectedZoomLevel(control: DependencyObject) -> float: ...
    @SelectedZoomLevel.setter
    def SelectedZoomLevel(self, value: float) -> None: ...
    def SetSelectedZoomLevel(control: DependencyObject, value: float) -> None: ...


class ZoomControlEnabled:
    def __init__(self): ...
    @property
    def Default(self) -> bool: ...
    @property
    def Key(self) -> EditorOptionKey: ...


class ZoomLevelChangedEventArgs:
    def __init__(self, newZoomLevel: float, transform: Transform): ...
    @property
    def NewZoomLevel(self) -> float: ...
    @property
    def ZoomTransform(self) -> Transform: ...


class ZoomLevelConverter:
    def __init__(self): ...
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
