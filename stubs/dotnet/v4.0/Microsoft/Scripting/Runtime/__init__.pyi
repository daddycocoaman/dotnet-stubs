from typing import Tuple, Set, Iterable, List


class ContextId:
    @overload
    def Equals(self, other: ContextId) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Id(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def LookupContext(identifier: Object) -> ContextId: ...
    def op_Equality(self: ContextId, other: ContextId) -> bool: ...
    def op_Inequality(self: ContextId, other: ContextId) -> bool: ...
    def RegisterContext(identifier: Object) -> ContextId: ...


class DlrConfiguration:
    def __init__(self, debugMode: bool, privateBinding: bool, options: IDictionary): ...
    def AddLanguage(self, languageTypeName: str, displayName: str, names: List[str], fileExtensions: List[str], options: IDictionary) -> None: ...
    @property
    def DebugMode(self) -> bool: ...
    @property
    def PrivateBinding(self) -> bool: ...
    @overload
    def GetFileExtensions(self) -> Set(str): ...
    @overload
    def GetFileExtensions(self, context: LanguageContext) -> Set(str): ...
    @overload
    def GetLanguageNames(self) -> Set(str): ...
    @overload
    def GetLanguageNames(self, context: LanguageContext) -> Set(str): ...


class DocumentationProvider:
    def GetMembers(self, value: Object) -> ICollection: ...
    def GetOverloads(self, value: Object) -> ICollection: ...


class DynamicOperations:
    def __init__(self, lc: LanguageContext): ...
    @overload
    def ContainsMember(self, obj: Object, name: str) -> bool: ...
    @overload
    def ContainsMember(self, obj: Object, name: str, ignoreCase: bool) -> bool: ...
    @overload
    def ConvertTo(self, obj: Object) -> T: ...
    @overload
    def ConvertTo(self, obj: Object, type: Type) -> Object: ...
    def CreateInstance(self, obj: Object, parameters: Set(Object)) -> Object: ...
    @overload
    def DoOperation(self, operation: ExpressionType, target: TTarget) -> TResult: ...
    @overload
    def DoOperation(self, operation: ExpressionType, target: TTarget, other: TOther) -> TResult: ...
    @overload
    def ExplicitConvertTo(self, obj: Object) -> T: ...
    @overload
    def ExplicitConvertTo(self, obj: Object, type: Type) -> Object: ...
    def Format(self, obj: Object) -> str: ...
    def GetCallSignatures(self, o: Object) -> List[str]: ...
    def GetDocumentation(self, o: Object) -> str: ...
    @overload
    def GetMember(self, obj: Object, name: str) -> Object: ...
    @overload
    def GetMember(self, obj: Object, name: str) -> T: ...
    @overload
    def GetMember(self, obj: Object, name: str, ignoreCase: bool) -> Object: ...
    @overload
    def GetMember(self, obj: Object, name: str, ignoreCase: bool) -> T: ...
    def GetMemberNames(self, obj: Object) -> List[str]: ...
    def GetOrCreateActionSite(self, siteBinder: CallSiteBinder) -> CallSite: ...
    @overload
    def GetOrCreateSite(self, siteBinder: CallSiteBinder) -> CallSite: ...
    @overload
    def GetOrCreateSite(self, siteBinder: CallSiteBinder) -> CallSite: ...
    @overload
    def GetOrCreateSite(self, siteBinder: CallSiteBinder) -> CallSite: ...
    @overload
    def GetOrCreateSite(self, siteBinder: CallSiteBinder) -> CallSite: ...
    @overload
    def ImplicitConvertTo(self, obj: Object) -> T: ...
    @overload
    def ImplicitConvertTo(self, obj: Object, type: Type) -> Object: ...
    def Invoke(self, obj: Object, parameters: Set(Object)) -> Object: ...
    @overload
    def InvokeMember(self, obj: Object, memberName: str, parameters: Set(Object)) -> Object: ...
    @overload
    def InvokeMember(self, obj: Object, memberName: str, ignoreCase: bool, parameters: Set(Object)) -> Object: ...
    def IsCallable(self, o: Object) -> bool: ...
    @overload
    def RemoveMember(self, obj: Object, name: str) -> None: ...
    @overload
    def RemoveMember(self, obj: Object, name: str, ignoreCase: bool) -> None: ...
    @overload
    def SetMember(self, obj: Object, name: str, value: Object) -> None: ...
    @overload
    def SetMember(self, obj: Object, name: str, value: T) -> None: ...
    @overload
    def SetMember(self, obj: Object, name: str, value: T, ignoreCase: bool) -> None: ...
    @overload
    def SetMember(self, obj: Object, name: str, value: Object, ignoreCase: bool) -> None: ...
    @overload
    def TryConvertTo(self, obj: Object) -> Tuple[bool, T]: ...
    @overload
    def TryConvertTo(self, obj: Object, type: Type) -> Tuple[bool, Object]: ...
    @overload
    def TryExplicitConvertTo(self, obj: Object) -> Tuple[bool, T]: ...
    @overload
    def TryExplicitConvertTo(self, obj: Object, type: Type) -> Tuple[bool, Object]: ...
    @overload
    def TryGetMember(self, obj: Object, name: str) -> Tuple[bool, Object]: ...
    @overload
    def TryGetMember(self, obj: Object, name: str, ignoreCase: bool) -> Tuple[bool, Object]: ...
    @overload
    def TryImplicitConvertTo(self, obj: Object) -> Tuple[bool, T]: ...
    @overload
    def TryImplicitConvertTo(self, obj: Object, type: Type) -> Tuple[bool, Object]: ...


class DynamicRuntimeHostingProvider:
    @property
    def PlatformAdaptationLayer(self) -> PlatformAdaptationLayer: ...


class DynamicStackFrame:
    def __init__(self, method: MethodBase, funcName: str, filename: str, line: int): ...
    def GetFileLineNumber(self) -> int: ...
    def GetFileName(self) -> str: ...
    def GetMethod(self) -> MethodBase: ...
    def GetMethodName(self) -> str: ...
    def ToString(self) -> str: ...


class LanguageContext:
    def CompileSourceCode(self, sourceUnit: SourceUnit, options: CompilerOptions, errorSink: ErrorSink) -> ScriptCode: ...
    def CreateBinaryOperationBinder(self, operation: ExpressionType) -> BinaryOperationBinder: ...
    def CreateCallBinder(self, name: str, ignoreCase: bool, callInfo: CallInfo) -> InvokeMemberBinder: ...
    def CreateConvertBinder(self, toType: Type, explicitCast: Nullable) -> ConvertBinder: ...
    def CreateCreateBinder(self, callInfo: CallInfo) -> CreateInstanceBinder: ...
    def CreateDeleteMemberBinder(self, name: str, ignoreCase: bool) -> DeleteMemberBinder: ...
    @overload
    def CreateFileUnit(self, path: str) -> SourceUnit: ...
    @overload
    def CreateFileUnit(self, path: str, content: str) -> SourceUnit: ...
    @overload
    def CreateFileUnit(self, path: str, encoding: Encoding) -> SourceUnit: ...
    @overload
    def CreateFileUnit(self, path: str, encoding: Encoding, kind: SourceCodeKind) -> SourceUnit: ...
    def CreateGetMemberBinder(self, name: str, ignoreCase: bool) -> GetMemberBinder: ...
    def CreateInvokeBinder(self, callInfo: CallInfo) -> InvokeBinder: ...
    @overload
    def CreateScope(self) -> Scope: ...
    @overload
    def CreateScope(self, dictionary: IDictionary) -> Scope: ...
    @overload
    def CreateScope(self, storage: IDynamicMetaObjectProvider) -> Scope: ...
    def CreateScopeExtension(self, scope: Scope) -> ScopeExtension: ...
    def CreateSetMemberBinder(self, name: str, ignoreCase: bool) -> SetMemberBinder: ...
    @overload
    def CreateSnippet(self, code: str, kind: SourceCodeKind) -> SourceUnit: ...
    @overload
    def CreateSnippet(self, code: str, id: str, kind: SourceCodeKind) -> SourceUnit: ...
    @overload
    def CreateSourceUnit(self, contentProvider: TextContentProvider, path: str, kind: SourceCodeKind) -> SourceUnit: ...
    @overload
    def CreateSourceUnit(self, contentProvider: StreamContentProvider, path: str, encoding: Encoding, kind: SourceCodeKind) -> SourceUnit: ...
    def CreateUnaryOperationBinder(self, operation: ExpressionType) -> UnaryOperationBinder: ...
    def EnsureScopeExtension(self, scope: Scope) -> ScopeExtension: ...
    def ExecuteProgram(self, program: SourceUnit) -> int: ...
    def FormatException(self, exception: Exception) -> str: ...
    def FormatObject(self, operations: DynamicOperations, obj: Object) -> str: ...
    def GenerateSourceCode(self, codeDom: CodeObject, path: str, kind: SourceCodeKind) -> SourceUnit: ...
    @property
    def CanCreateSourceCode(self) -> bool: ...
    @property
    def ContextId(self) -> ContextId: ...
    @property
    def DefaultEncoding(self) -> Encoding: ...
    @property
    def DomainManager(self) -> ScriptDomainManager: ...
    @property
    def LanguageGuid(self) -> Guid: ...
    @property
    def LanguageVersion(self) -> Version: ...
    @property
    def Operations(self) -> DynamicOperations: ...
    @property
    def Options(self) -> LanguageOptions: ...
    @property
    def VendorGuid(self) -> Guid: ...
    def GetCallSignatures(self, obj: Object) -> List[str]: ...
    def GetCompilerErrorSink(self) -> ErrorSink: ...
    @overload
    def GetCompilerOptions(self) -> CompilerOptions: ...
    @overload
    def GetCompilerOptions(self, scope: Scope) -> CompilerOptions: ...
    def GetDocumentation(self, obj: Object) -> str: ...
    def GetExceptionMessage(self, exception: Exception) -> Tuple[str, str]: ...
    def GetMemberNames(self, obj: Object) -> List[str]: ...
    def GetScope(self, path: str) -> Scope: ...
    def GetSearchPaths(self) -> ICollection: ...
    def GetService(self, args: Set(Object)) -> TService: ...
    def GetSourceReader(self, stream: Stream, defaultEncoding: Encoding, path: str) -> SourceCodeReader: ...
    def GetStackFrames(self, exception: Exception) -> List[DynamicStackFrame]: ...
    def IsCallable(self, obj: Object) -> bool: ...
    def LoadCompiledCode(self, method: Delegate, path: str, customData: str) -> ScriptCode: ...
    @overload
    def ScopeGetVariable(self, scope: Scope, name: str) -> Object: ...
    @overload
    def ScopeGetVariable(self, scope: Scope, name: str) -> T: ...
    def ScopeSetVariable(self, scope: Scope, name: str, value: Object) -> None: ...
    def ScopeTryGetVariable(self, scope: Scope, name: str) -> Tuple[bool, Object]: ...
    def SetSearchPaths(self, paths: ICollection) -> None: ...
    def Shutdown(self) -> None: ...


class NotNullAttribute:
    def __init__(self): ...


class NotNullItemsAttribute:
    def __init__(self): ...


class ObjectDictionaryExpando:
    def __init__(self, dictionary: IDictionary): ...
    @property
    def Dictionary(self) -> IDictionary: ...


class ParserSink:
    def __init__(self): ...
    def EndParameters(self, span: SourceSpan) -> None: ...
    def MatchPair(self, opening: SourceSpan, closing: SourceSpan, priority: int) -> None: ...
    def MatchTriple(self, opening: SourceSpan, middle: SourceSpan, closing: SourceSpan, priority: int) -> None: ...
    def NextParameter(self, span: SourceSpan) -> None: ...
    def QualifyName(self, selector: SourceSpan, span: SourceSpan, name: str) -> None: ...
    def StartName(self, span: SourceSpan, name: str) -> None: ...
    def StartParameters(self, context: SourceSpan) -> None: ...


class Scope:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dictionary: IDictionary): ...
    @overload
    def __init__(self, storage: IDynamicMetaObjectProvider): ...
    @property
    def Storage(self) -> Object: ...
    def GetExtension(self, languageContextId: ContextId) -> ScopeExtension: ...
    def SetExtension(self, languageContextId: ContextId, extension: ScopeExtension) -> ScopeExtension: ...


class ScopeExtension:
    def __init__(self, scope: Scope): ...
    @property
    def Scope(self) -> Scope: ...


class ScriptDomainManager:
    def __init__(self, hostingProvider: DynamicRuntimeHostingProvider, configuration: DlrConfiguration): ...
    def add_AssemblyLoaded(self, value: EventHandler) -> None: ...
    @property
    def Configuration(self) -> DlrConfiguration: ...
    @property
    def Globals(self) -> Scope: ...
    @property
    def Host(self) -> DynamicRuntimeHostingProvider: ...
    @property
    def Platform(self) -> PlatformAdaptationLayer: ...
    @property
    def SharedIO(self) -> SharedIO: ...
    def GetLanguage(self, providerType: Type) -> LanguageContext: ...
    def GetLanguageByExtension(self, fileExtension: str) -> LanguageContext: ...
    def GetLanguageByName(self, languageName: str) -> LanguageContext: ...
    def GetLanguageByTypeName(self, providerAssemblyQualifiedTypeName: str) -> LanguageContext: ...
    def GetLoadedAssemblyList(self) -> List[Assembly]: ...
    def LoadAssembly(self, assembly: Assembly) -> bool: ...
    def remove_AssemblyLoaded(self, value: EventHandler) -> None: ...
    @Globals.setter
    def Globals(self, value: Scope) -> None: ...
    def TryGetLanguage(self, languageName: str) -> Tuple[bool, LanguageContext]: ...
    def TryGetLanguageByFileExtension(self, fileExtension: str) -> Tuple[bool, LanguageContext]: ...


class SharedIO:
    @property
    def ErrorEncoding(self) -> Encoding: ...
    @property
    def ErrorStream(self) -> Stream: ...
    @property
    def ErrorWriter(self) -> TextWriter: ...
    @property
    def InputEncoding(self) -> Encoding: ...
    @property
    def InputReader(self) -> TextReader: ...
    @property
    def InputStream(self) -> Stream: ...
    @property
    def OutputEncoding(self) -> Encoding: ...
    @property
    def OutputStream(self) -> Stream: ...
    @property
    def OutputWriter(self) -> TextWriter: ...
    def GetEncoding(self, type: ConsoleStreamType) -> Encoding: ...
    def GetReader(self) -> Tuple[TextReader, Encoding]: ...
    def GetStream(self, type: ConsoleStreamType) -> Stream: ...
    def GetStreamProxy(self, type: ConsoleStreamType) -> Stream: ...
    def GetWriter(self, type: ConsoleStreamType) -> TextWriter: ...
    def RedirectToConsole(self) -> None: ...
    def SetErrorOutput(self, stream: Stream, writer: TextWriter) -> None: ...
    def SetInput(self, stream: Stream, reader: TextReader, encoding: Encoding) -> None: ...
    def SetOutput(self, stream: Stream, writer: TextWriter) -> None: ...


class StringDictionaryExpando:
    def __init__(self, data: IDictionary): ...
    @property
    def Dictionary(self) -> IDictionary: ...


class TokenizerService:
    @property
    def CurrentPosition(self) -> SourceLocation: ...
    @property
    def CurrentState(self) -> Object: ...
    @property
    def ErrorSink(self) -> ErrorSink: ...
    @property
    def IsRestartable(self) -> bool: ...
    def Initialize(self, state: Object, sourceReader: TextReader, sourceUnit: SourceUnit, initialLocation: SourceLocation) -> None: ...
    def ReadToken(self) -> TokenInfo: ...
    def ReadTokens(self, characterCount: int) -> Iterable[TokenInfo]: ...
    @ErrorSink.setter
    def ErrorSink(self, value: ErrorSink) -> None: ...
    def SkipToken(self) -> bool: ...
    def SkipTokens(self, countOfChars: int) -> bool: ...
