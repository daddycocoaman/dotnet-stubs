__all__ = ['Hosting','Runtime','Utils']
from typing import Tuple, Set, Iterable, List


class ArgumentTypeException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class AssemblyLoadedEventArgs:
    def __init__(self, assembly: Assembly): ...
    @property
    def Assembly(self) -> Assembly: ...


class CompilerOptions:
    def __init__(self): ...


class ErrorCounter(ErrorSink):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sink: ErrorSink): ...
    @overload
    def Add(self, source: SourceUnit, message: str, span: SourceSpan, errorCode: int, severity: Severity) -> None: ...
    def ClearCounters(self) -> None: ...
    @property
    def AnyError(self) -> bool: ...
    @property
    def ErrorCount(self) -> int: ...
    @property
    def FatalErrorCount(self) -> int: ...
    @property
    def WarningCount(self) -> int: ...


class ErrorSink:
    @overload
    def Add(self, source: SourceUnit, message: str, span: SourceSpan, errorCode: int, severity: Severity) -> None: ...
    @overload
    def Add(self, message: str, path: str, code: str, line: str, span: SourceSpan, errorCode: int, severity: Severity) -> None: ...


class IndexSpan:
    def __init__(self, start: int, length: int): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: IndexSpan) -> bool: ...
    @property
    def End(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Start(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(self: IndexSpan, other: IndexSpan) -> bool: ...
    def op_Inequality(self: IndexSpan, other: IndexSpan) -> bool: ...


class InvalidImplementationException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, e: Exception): ...


class IScopeVariable:
    def DeleteValue(self) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    def SetValue(self, value: Object) -> None: ...
    def TryGetValue(self) -> Tuple[bool, Object]: ...


class LanguageOptions:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, options: IDictionary): ...
    @property
    def CompilationThreshold(self) -> int: ...
    @property
    def ExceptionDetail(self) -> bool: ...
    @property
    def InterpretedMode(self) -> bool: ...
    @property
    def NoAdaptiveCompilation(self) -> bool: ...
    @property
    def PerfStats(self) -> bool: ...
    @property
    def SearchPaths(self) -> ReadOnlyCollection: ...
    @property
    def ShowClrExceptions(self) -> bool: ...
    def GetOption(options: IDictionary, name: str, defaultValue: T) -> T: ...
    def GetSearchPathsOption(options: IDictionary) -> ReadOnlyCollection: ...
    def GetStringCollectionOption(options: IDictionary, name: str, separators: Set(Char)) -> ReadOnlyCollection: ...
    @ExceptionDetail.setter
    def ExceptionDetail(self, value: bool) -> None: ...
    @InterpretedMode.setter
    def InterpretedMode(self, value: bool) -> None: ...
    @ShowClrExceptions.setter
    def ShowClrExceptions(self, value: bool) -> None: ...


class ParamDictionaryAttribute:
    def __init__(self): ...


class PlatformAdaptationLayer:
    def __init__(self): ...
    def CombinePaths(self, path1: str, path2: str) -> str: ...
    def CreateDirectory(self, path: str) -> None: ...
    def DeleteDirectory(self, path: str, recursive: bool) -> None: ...
    def DeleteFile(self, path: str, deleteReadOnly: bool) -> None: ...
    def DirectoryExists(self, path: str) -> bool: ...
    def FileExists(self, path: str) -> bool: ...
    @property
    def CurrentDirectory(self) -> str: ...
    @property
    def IsNativeModule() -> bool: ...
    @property
    def IsSingleRootFileSystem(self) -> bool: ...
    @property
    def PathComparer(self) -> StringComparer: ...
    def GetDirectories(self, path: str, searchPattern: str) -> Set(str): ...
    def GetDirectoryName(self, path: str) -> str: ...
    def GetEnvironmentVariable(self, key: str) -> str: ...
    def GetEnvironmentVariables(self) -> Dictionary: ...
    def GetExtension(self, path: str) -> str: ...
    def GetFileName(self, path: str) -> str: ...
    def GetFileNameWithoutExtension(self, path: str) -> str: ...
    def GetFiles(self, path: str, searchPattern: str) -> Set(str): ...
    @overload
    def GetFileSystemEntries(self, path: str, searchPattern: str) -> Set(str): ...
    @overload
    def GetFileSystemEntries(self, path: str, searchPattern: str, includeFiles: bool, includeDirectories: bool) -> Set(str): ...
    def GetFullPath(self, path: str) -> str: ...
    def IsAbsolutePath(self, path: str) -> bool: ...
    def LoadAssembly(self, name: str) -> Assembly: ...
    def LoadAssemblyFromPath(self, path: str) -> Assembly: ...
    def MoveFileSystemEntry(self, sourcePath: str, destinationPath: str) -> None: ...
    def OpenFileStream(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, bufferSize: int) -> Stream: ...
    def OpenInputFileStream(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, bufferSize: int) -> Stream: ...
    def OpenOutputFileStream(self, path: str) -> Stream: ...
    @CurrentDirectory.setter
    def CurrentDirectory(self, value: str) -> None: ...
    def SetEnvironmentVariable(self, key: str, value: str) -> None: ...
    def TerminateScriptExecution(self, exitCode: int) -> None: ...


class ScopeStorage:
    def __init__(self): ...
    def DeleteValue(self, name: str, ignoreCase: bool) -> bool: ...
    @property
    def Item(self, index: str) -> Object: ...
    def GetItems(self) -> List[str]: ...
    def GetMemberNames(self) -> List[str]: ...
    def GetMetaObject(self, parameter: Expression) -> DynamicMetaObject: ...
    @overload
    def GetScopeVariable(self, name: str) -> ScopeVariable: ...
    @overload
    def GetScopeVariable(self, name: str, ignoreCase: bool) -> IScopeVariable: ...
    def GetScopeVariableIgnoreCase(self, name: str) -> ScopeVariableIgnoreCase: ...
    def GetValue(self, name: str, ignoreCase: bool) -> Object: ...
    def HasValue(self, name: str, ignoreCase: bool) -> bool: ...
    @Item.setter
    def Item(self, index: str, value: Object) -> None: ...
    def SetValue(self, name: str, ignoreCase: bool, value: Object) -> None: ...
    def TryGetValue(self, name: str, ignoreCase: bool) -> Tuple[bool, Object]: ...


class ScopeVariable:
    def DeleteValue(self) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def WeakReference(self) -> WeakReference: ...
    def SetValue(self, value: Object) -> None: ...
    def TryGetValue(self) -> Tuple[bool, Object]: ...


class ScopeVariableIgnoreCase:
    def DeleteValue(self) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def WeakReference(self) -> WeakReference: ...
    def SetValue(self, value: Object) -> None: ...
    def TryGetValue(self) -> Tuple[bool, Object]: ...


class ScriptCode:
    def CreateScope(self) -> Scope: ...
    @property
    def LanguageContext(self) -> LanguageContext: ...
    @property
    def SourceUnit(self) -> SourceUnit: ...
    @overload
    def Run(self) -> Object: ...
    @overload
    def Run(self, scope: Scope) -> Object: ...
    def ToString(self) -> str: ...


class ScriptCodeParseResult:
    Complete = 0
    Empty = 1
    Invalid = 2
    IncompleteToken = 3
    IncompleteStatement = 4


class Severity:
    Ignore = 0
    Warning = 1
    Error = 2
    FatalError = 3


class SourceCodeKind:
    Unspecified = 0
    Expression = 1
    Statements = 2
    SingleStatement = 3
    File = 4
    InteractiveCode = 5
    AutoDetect = 6


class SourceCodePropertiesUtils:
    def IsCompleteOrInvalid(props: ScriptCodeParseResult, allowIncompleteStatement: bool) -> bool: ...


class SourceCodeReader:
    def __init__(self, textReader: TextReader, encoding: Encoding): ...
    @property
    def BaseReader(self) -> TextReader: ...
    @property
    def Encoding(self) -> Encoding: ...
    def Peek(self) -> int: ...
    @overload
    def Read(self) -> int: ...
    @overload
    def Read(self, buffer: Set(Char), index: int, count: int) -> int: ...
    def ReadLine(self) -> str: ...
    def ReadToEnd(self) -> str: ...
    def SeekLine(self, line: int) -> bool: ...


class SourceLocation:
    def __init__(self, index: int, line: int, column: int): ...
    def Compare(left: SourceLocation, right: SourceLocation) -> int: ...
    @overload
    def Equals(self, other: SourceLocation) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Column(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Line(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: SourceLocation, right: SourceLocation) -> bool: ...
    def op_GreaterThan(left: SourceLocation, right: SourceLocation) -> bool: ...
    def op_GreaterThanOrEqual(left: SourceLocation, right: SourceLocation) -> bool: ...
    def op_Inequality(left: SourceLocation, right: SourceLocation) -> bool: ...
    def op_LessThan(left: SourceLocation, right: SourceLocation) -> bool: ...
    def op_LessThanOrEqual(left: SourceLocation, right: SourceLocation) -> bool: ...
    def ToString(self) -> str: ...


class SourceSpan:
    def __init__(self, start: SourceLocation, end: SourceLocation): ...
    @overload
    def Equals(self, other: SourceSpan) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def End(self) -> SourceLocation: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Start(self) -> SourceLocation: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: SourceSpan, right: SourceSpan) -> bool: ...
    def op_Inequality(left: SourceSpan, right: SourceSpan) -> bool: ...
    def ToString(self) -> str: ...


class SourceUnit:
    def __init__(self, context: LanguageContext, contentProvider: TextContentProvider, path: str, kind: SourceCodeKind): ...
    @overload
    def Compile(self) -> ScriptCode: ...
    @overload
    def Compile(self, errorSink: ErrorSink) -> ScriptCode: ...
    @overload
    def Compile(self, options: CompilerOptions, errorSink: ErrorSink) -> ScriptCode: ...
    @overload
    def Execute(self) -> Object: ...
    @overload
    def Execute(self, errorSink: ErrorSink) -> Object: ...
    @overload
    def Execute(self, scope: Scope) -> Object: ...
    @overload
    def Execute(self, options: CompilerOptions, errorSink: ErrorSink) -> Object: ...
    @overload
    def Execute(self, scope: Scope, errorSink: ErrorSink) -> Object: ...
    def ExecuteProgram(self) -> int: ...
    @property
    def CodeProperties(self) -> Nullable: ...
    @property
    def Document(self) -> SymbolDocumentInfo: ...
    @property
    def EmitDebugSymbols(self) -> bool: ...
    @property
    def HasLineMapping(self) -> bool: ...
    @property
    def HasPath(self) -> bool: ...
    @property
    def Kind(self) -> SourceCodeKind: ...
    @property
    def LanguageContext(self) -> LanguageContext: ...
    @property
    def Path(self) -> str: ...
    def GetCode(self) -> str: ...
    def GetCodeLine(self, line: int) -> str: ...
    def GetCodeLines(self, start: int, count: int) -> Set(str): ...
    @overload
    def GetCodeProperties(self) -> ScriptCodeParseResult: ...
    @overload
    def GetCodeProperties(self, options: CompilerOptions) -> ScriptCodeParseResult: ...
    def GetReader(self) -> SourceCodeReader: ...
    @overload
    def MakeLocation(self, loc: SourceLocation) -> SourceLocation: ...
    @overload
    def MakeLocation(self, index: int, line: int, column: int) -> SourceLocation: ...
    def MapLine(self, line: int) -> int: ...
    @CodeProperties.setter
    def CodeProperties(self, value: Nullable) -> None: ...
    def SetLineMapping(self, lineMap: Set(KeyValuePair)) -> None: ...


class StreamContentProvider:
    def GetStream(self) -> Stream: ...


class SyntaxErrorException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, sourceUnit: SourceUnit, span: SourceSpan, errorCode: int, severity: Severity): ...
    @overload
    def __init__(self, message: str, path: str, code: str, line: str, span: SourceSpan, errorCode: int, severity: Severity): ...
    @property
    def Column(self) -> int: ...
    @property
    def ErrorCode(self) -> int: ...
    @property
    def Line(self) -> int: ...
    @property
    def RawSpan(self) -> SourceSpan: ...
    @property
    def Severity(self) -> Severity: ...
    @property
    def SourceCode(self) -> str: ...
    @property
    def SourcePath(self) -> str: ...
    def GetCodeLine(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetSymbolDocumentName(self) -> str: ...


class TextContentProvider:
    def GetReader(self) -> SourceCodeReader: ...


class TokenCategory:
    #None = 0
    EndOfStream = 1
    WhiteSpace = 2
    Comment = 3
    LineComment = 4
    DocComment = 5
    NumericLiteral = 6
    CharacterLiteral = 7
    StringLiteral = 8
    RegularExpressionLiteral = 9
    Keyword = 10
    Directive = 11
    Operator = 12
    Delimiter = 13
    Identifier = 14
    Grouping = 15
    Error = 16
    LanguageDefined = 256


class TokenInfo:
    def __init__(self, span: SourceSpan, category: TokenCategory, trigger: TokenTriggers): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: TokenInfo) -> bool: ...
    @property
    def Category(self) -> TokenCategory: ...
    @property
    def SourceSpan(self) -> SourceSpan: ...
    @property
    def Trigger(self) -> TokenTriggers: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(first: TokenInfo, second: TokenInfo) -> bool: ...
    def op_Inequality(first: TokenInfo, second: TokenInfo) -> bool: ...
    @Category.setter
    def Category(self, value: TokenCategory) -> None: ...
    @SourceSpan.setter
    def SourceSpan(self, value: SourceSpan) -> None: ...
    @Trigger.setter
    def Trigger(self, value: TokenTriggers) -> None: ...
    def ToString(self) -> str: ...


class TokenKind:
    Default = 0
    Error = 1
    Whitespace = 2
    EndOfLine = 3
    LineJoin = 4
    Indentation = 5
    SingleLineComment = 6
    MultiLineComment = 7
    NestableCommentStart = 8
    NestableCommentEnd = 9
    SingleLineDocComment = 10
    MultiLineDocComment = 11
    Directive = 12
    Keyword = 13
    Identifier = 14
    VerbatimIdentifier = 15
    Variable = 16
    IntegerLiteral = 17
    FloatLiteral = 18
    CharacterLiteral = 19
    String = 20
    UnicodeString = 21
    FormattedString = 22
    FormattedUnicodeString = 23
    LeftParenthesis = 24
    RightParenthesis = 25
    LeftBracket = 26
    RightBracket = 27
    LeftBrace = 28
    RightBrace = 29
    Comma = 30
    Dot = 31
    Semicolon = 32
    Colon = 33
    DoubleColon = 34
    TripleColon = 35
    Plus = 36
    PlusPlus = 37
    PlusEqual = 38
    Minus = 39
    MinusMinus = 40
    MinusEqual = 41
    Mul = 42
    MulEqual = 43
    Div = 44
    DivEqual = 45
    FloorDivide = 46
    FloorDivideEqual = 47
    Mod = 48
    ModEqual = 49
    Power = 50
    PowerEqual = 51
    LeftShift = 52
    LeftShiftEqual = 53
    RightShift = 54
    RightShiftEqual = 55
    BitwiseAnd = 56
    BitwiseAndEqual = 57
    BitwiseOr = 58
    BitwiseOrEqual = 59
    Xor = 60
    XorEqual = 61
    BooleanAnd = 62
    BooleanAndEqual = 63
    BooleanOr = 64
    BooleanOrEqual = 65
    Twiddle = 66
    TwiddleEqual = 67
    LessThan = 68
    GreaterThan = 69
    LessThanOrEqual = 70
    GreaterThanOrEqual = 71
    Assign = 72
    AssignAlias = 73
    AssignColon = 74
    Equal = 75
    StrictEqual = 76
    Not = 77
    NotEqual = 78
    StrictNotEqual = 79
    Unequal = 80
    CompareEqual = 81
    Match = 82
    NotMatch = 83
    Arrow = 84
    DoubleArrow = 85
    BackQuote = 86
    DoubleDot = 87
    TripleDot = 88
    At = 89
    DoubleAt = 90
    Question = 91
    DoubleQuestion = 92
    Backslash = 93
    DoubleBackslash = 94
    Dollar = 95
    DoubleDollar = 96
    LanguageDefined = 97


class TokenTriggers:
    #None = 0
    MemberSelect = 1
    MatchBraces = 2
    ParameterStart = 16
    ParameterNext = 32
    ParameterEnd = 64
    Parameter = 128
    MethodTip = 240
