__all__ = ['Configuration','Providers']
from typing import Tuple, Set, Iterable, List


class CompiledCode:
    @overload
    def Execute(self) -> Object: ...
    @overload
    def Execute(self) -> T: ...
    @overload
    def Execute(self, scope: ScriptScope) -> Object: ...
    @overload
    def Execute(self, scope: ScriptScope) -> T: ...
    @overload
    def ExecuteAndWrap(self) -> ObjectHandle: ...
    @overload
    def ExecuteAndWrap(self) -> Tuple[ObjectHandle, ObjectHandle]: ...
    @overload
    def ExecuteAndWrap(self, scope: ScriptScope) -> ObjectHandle: ...
    @overload
    def ExecuteAndWrap(self, scope: ScriptScope) -> Tuple[ObjectHandle, ObjectHandle]: ...
    @property
    def DefaultScope(self) -> ScriptScope: ...
    @property
    def Engine(self) -> ScriptEngine: ...
    def InitializeLifetimeService(self) -> Object: ...


class DocumentationOperations:
    @overload
    def GetMembers(self, value: Object) -> ICollection: ...
    @overload
    def GetMembers(self, value: ObjectHandle) -> ICollection: ...
    @overload
    def GetOverloads(self, value: Object) -> ICollection: ...
    @overload
    def GetOverloads(self, value: ObjectHandle) -> ICollection: ...
    def InitializeLifetimeService(self) -> Object: ...


class ErrorListener:
    def ErrorReported(self, source: ScriptSource, message: str, span: SourceSpan, errorCode: int, severity: Severity) -> None: ...
    def InitializeLifetimeService(self) -> Object: ...


class ErrorSinkProxyListener(ErrorListener):
    def __init__(self, errorSink: ErrorSink): ...
    def ErrorReported(self, source: ScriptSource, message: str, span: SourceSpan, errorCode: int, severity: Severity) -> None: ...


class ExceptionOperations:
    @overload
    def FormatException(self, exception: Exception) -> str: ...
    @overload
    def FormatException(self, exception: ObjectHandle) -> str: ...
    @overload
    def GetExceptionMessage(self, exception: Exception) -> Tuple[str, str]: ...
    @overload
    def GetExceptionMessage(self, exception: ObjectHandle) -> Tuple[str, str]: ...
    @overload
    def GetStackFrames(self, exception: Exception) -> List[DynamicStackFrame]: ...
    @overload
    def GetStackFrames(self, exception: ObjectHandle) -> List[DynamicStackFrame]: ...
    @overload
    def HandleException(self, exception: Exception) -> bool: ...
    @overload
    def HandleException(self, exception: ObjectHandle) -> bool: ...
    def InitializeLifetimeService(self) -> Object: ...


class LanguageSetup:
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, typeName: str, displayName: str): ...
    @overload
    def __init__(self, typeName: str, displayName: str, names: Iterable[str], fileExtensions: Iterable[str]): ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def ExceptionDetail(self) -> bool: ...
    @property
    def FileExtensions(self) -> List[str]: ...
    @property
    def InterpretedMode(self) -> bool: ...
    @property
    def Names(self) -> List[str]: ...
    @property
    def NoAdaptiveCompilation(self) -> bool: ...
    @property
    def Options(self) -> IDictionary: ...
    @property
    def PerfStats(self) -> bool: ...
    @property
    def TypeName(self) -> str: ...
    def GetOption(self, name: str, defaultValue: T) -> T: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @ExceptionDetail.setter
    def ExceptionDetail(self, value: bool) -> None: ...
    @InterpretedMode.setter
    def InterpretedMode(self, value: bool) -> None: ...
    @NoAdaptiveCompilation.setter
    def NoAdaptiveCompilation(self, value: bool) -> None: ...
    @PerfStats.setter
    def PerfStats(self, value: bool) -> None: ...
    @TypeName.setter
    def TypeName(self, value: str) -> None: ...


class MemberDoc:
    def __init__(self, name: str, kind: MemberKind): ...
    @property
    def Kind(self) -> MemberKind: ...
    @property
    def Name(self) -> str: ...


class MemberKind:
    #None = 0
    Class = 1
    Delegate = 2
    Enum = 3
    Event = 4
    Field = 5
    Function = 6
    Module = 7
    Property = 8
    Constant = 9
    EnumMember = 10
    Instance = 11
    Method = 12
    Namespace = 13


class ObjectOperations:
    @overload
    def Add(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def Add(self, self: Object, other: Object) -> Object: ...
    @overload
    def BitwiseAnd(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def BitwiseAnd(self, self: Object, other: Object) -> Object: ...
    @overload
    def BitwiseOr(self, self: Object, other: Object) -> Object: ...
    @overload
    def BitwiseOr(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def ContainsMember(self, obj: Object, name: str) -> bool: ...
    @overload
    def ContainsMember(self, obj: ObjectHandle, name: str) -> bool: ...
    @overload
    def ContainsMember(self, obj: Object, name: str, ignoreCase: bool) -> bool: ...
    @overload
    def ConvertTo(self, obj: ObjectHandle) -> ObjectHandle: ...
    @overload
    def ConvertTo(self, obj: Object) -> T: ...
    @overload
    def ConvertTo(self, obj: ObjectHandle, type: Type) -> ObjectHandle: ...
    @overload
    def ConvertTo(self, obj: Object, type: Type) -> Object: ...
    @overload
    def CreateInstance(self, obj: ObjectHandle, parameters: Set(ObjectHandle)) -> ObjectHandle: ...
    @overload
    def CreateInstance(self, obj: ObjectHandle, parameters: Set(Object)) -> ObjectHandle: ...
    @overload
    def CreateInstance(self, obj: Object, parameters: Set(Object)) -> Object: ...
    @overload
    def Divide(self, self: Object, other: Object) -> Object: ...
    @overload
    def Divide(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def DoOperation(self, operation: ExpressionType, target: TTarget) -> TResult: ...
    @overload
    def DoOperation(self, operation: ExpressionType, target: Object) -> Object: ...
    @overload
    def DoOperation(self, op: ExpressionType, target: ObjectHandle) -> ObjectHandle: ...
    @overload
    def DoOperation(self, operation: ExpressionType, target: Object, other: Object) -> Object: ...
    @overload
    def DoOperation(self, op: ExpressionType, target: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def DoOperation(self, operation: ExpressionType, target: TTarget, other: TOther) -> TResult: ...
    @overload
    def Equal(self, self: ObjectHandle, other: ObjectHandle) -> bool: ...
    @overload
    def Equal(self, self: Object, other: Object) -> bool: ...
    @overload
    def ExclusiveOr(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def ExclusiveOr(self, self: Object, other: Object) -> Object: ...
    @overload
    def ExplicitConvertTo(self, obj: ObjectHandle) -> ObjectHandle: ...
    @overload
    def ExplicitConvertTo(self, obj: Object) -> T: ...
    @overload
    def ExplicitConvertTo(self, obj: Object, type: Type) -> Object: ...
    @overload
    def ExplicitConvertTo(self, obj: ObjectHandle, type: Type) -> ObjectHandle: ...
    @overload
    def Format(self, obj: Object) -> str: ...
    @overload
    def Format(self, obj: ObjectHandle) -> str: ...
    @property
    def Engine(self) -> ScriptEngine: ...
    @overload
    def GetCallSignatures(self, obj: Object) -> List[str]: ...
    @overload
    def GetCallSignatures(self, obj: ObjectHandle) -> List[str]: ...
    @overload
    def GetDocumentation(self, obj: ObjectHandle) -> str: ...
    @overload
    def GetDocumentation(self, obj: Object) -> str: ...
    @overload
    def GetMember(self, obj: Object, name: str) -> T: ...
    @overload
    def GetMember(self, obj: Object, name: str) -> Object: ...
    @overload
    def GetMember(self, obj: ObjectHandle, name: str) -> ObjectHandle: ...
    @overload
    def GetMember(self, obj: ObjectHandle, name: str) -> T: ...
    @overload
    def GetMember(self, obj: Object, name: str, ignoreCase: bool) -> T: ...
    @overload
    def GetMember(self, obj: Object, name: str, ignoreCase: bool) -> Object: ...
    @overload
    def GetMemberNames(self, obj: Object) -> List[str]: ...
    @overload
    def GetMemberNames(self, obj: ObjectHandle) -> List[str]: ...
    @overload
    def GreaterThan(self, self: Object, other: Object) -> bool: ...
    @overload
    def GreaterThan(self, self: ObjectHandle, other: ObjectHandle) -> bool: ...
    @overload
    def GreaterThanOrEqual(self, self: ObjectHandle, other: ObjectHandle) -> bool: ...
    @overload
    def GreaterThanOrEqual(self, self: Object, other: Object) -> bool: ...
    @overload
    def ImplicitConvertTo(self, obj: Object) -> T: ...
    @overload
    def ImplicitConvertTo(self, obj: ObjectHandle) -> ObjectHandle: ...
    @overload
    def ImplicitConvertTo(self, obj: ObjectHandle, type: Type) -> ObjectHandle: ...
    @overload
    def ImplicitConvertTo(self, obj: Object, type: Type) -> Object: ...
    def InitializeLifetimeService(self) -> Object: ...
    @overload
    def Invoke(self, obj: ObjectHandle, parameters: Set(ObjectHandle)) -> ObjectHandle: ...
    @overload
    def Invoke(self, obj: Object, parameters: Set(Object)) -> Object: ...
    @overload
    def Invoke(self, obj: ObjectHandle, parameters: Set(Object)) -> ObjectHandle: ...
    def InvokeMember(self, obj: Object, memberName: str, parameters: Set(Object)) -> Object: ...
    @overload
    def IsCallable(self, obj: ObjectHandle) -> bool: ...
    @overload
    def IsCallable(self, obj: Object) -> bool: ...
    @overload
    def LeftShift(self, self: Object, other: Object) -> Object: ...
    @overload
    def LeftShift(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def LessThan(self, self: ObjectHandle, other: ObjectHandle) -> bool: ...
    @overload
    def LessThan(self, self: Object, other: Object) -> bool: ...
    @overload
    def LessThanOrEqual(self, self: Object, other: Object) -> bool: ...
    @overload
    def LessThanOrEqual(self, self: ObjectHandle, other: ObjectHandle) -> bool: ...
    @overload
    def Modulo(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def Modulo(self, self: Object, other: Object) -> Object: ...
    @overload
    def Multiply(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def Multiply(self, self: Object, other: Object) -> Object: ...
    @overload
    def NotEqual(self, self: Object, other: Object) -> bool: ...
    @overload
    def NotEqual(self, self: ObjectHandle, other: ObjectHandle) -> bool: ...
    @overload
    def Power(self, self: Object, other: Object) -> Object: ...
    @overload
    def Power(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def RemoveMember(self, obj: Object, name: str) -> None: ...
    @overload
    def RemoveMember(self, obj: ObjectHandle, name: str) -> None: ...
    @overload
    def RemoveMember(self, obj: Object, name: str, ignoreCase: bool) -> None: ...
    @overload
    def RightShift(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def RightShift(self, self: Object, other: Object) -> Object: ...
    @overload
    def SetMember(self, obj: Object, name: str, value: Object) -> None: ...
    @overload
    def SetMember(self, obj: Object, name: str, value: T) -> None: ...
    @overload
    def SetMember(self, obj: ObjectHandle, name: str, value: T) -> None: ...
    @overload
    def SetMember(self, obj: ObjectHandle, name: str, value: ObjectHandle) -> None: ...
    @overload
    def SetMember(self, obj: Object, name: str, value: Object, ignoreCase: bool) -> None: ...
    @overload
    def SetMember(self, obj: Object, name: str, value: T, ignoreCase: bool) -> None: ...
    @overload
    def Subtract(self, self: Object, other: Object) -> Object: ...
    @overload
    def Subtract(self, self: ObjectHandle, other: ObjectHandle) -> ObjectHandle: ...
    @overload
    def TryConvertTo(self, obj: ObjectHandle) -> Tuple[bool, ObjectHandle]: ...
    @overload
    def TryConvertTo(self, obj: Object) -> Tuple[bool, T]: ...
    @overload
    def TryConvertTo(self, obj: Object, type: Type) -> Tuple[bool, Object]: ...
    @overload
    def TryConvertTo(self, obj: ObjectHandle, type: Type) -> Tuple[bool, ObjectHandle]: ...
    @overload
    def TryExplicitConvertTo(self, obj: Object) -> Tuple[bool, T]: ...
    @overload
    def TryExplicitConvertTo(self, obj: ObjectHandle) -> Tuple[bool, ObjectHandle]: ...
    @overload
    def TryExplicitConvertTo(self, obj: Object, type: Type) -> Tuple[bool, Object]: ...
    @overload
    def TryExplicitConvertTo(self, obj: ObjectHandle, type: Type) -> Tuple[bool, ObjectHandle]: ...
    @overload
    def TryGetMember(self, obj: Object, name: str) -> Tuple[bool, Object]: ...
    @overload
    def TryGetMember(self, obj: ObjectHandle, name: str) -> Tuple[bool, ObjectHandle]: ...
    @overload
    def TryGetMember(self, obj: Object, name: str, ignoreCase: bool) -> Tuple[bool, Object]: ...
    @overload
    def TryImplicitConvertTo(self, obj: ObjectHandle) -> Tuple[bool, ObjectHandle]: ...
    @overload
    def TryImplicitConvertTo(self, obj: Object) -> Tuple[bool, T]: ...
    @overload
    def TryImplicitConvertTo(self, obj: Object, type: Type) -> Tuple[bool, Object]: ...
    @overload
    def TryImplicitConvertTo(self, obj: ObjectHandle, type: Type) -> Tuple[bool, ObjectHandle]: ...
    def Unwrap(self, obj: ObjectHandle) -> T: ...


class OverloadDoc:
    @overload
    def __init__(self, name: str, documentation: str, parameters: ICollection): ...
    @overload
    def __init__(self, name: str, documentation: str, parameters: ICollection, returnParameter: ParameterDoc): ...
    @property
    def Documentation(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parameters(self) -> ICollection: ...
    @property
    def ReturnParameter(self) -> ParameterDoc: ...


class ParameterDoc:
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, paramFlags: ParameterFlags): ...
    @overload
    def __init__(self, name: str, typeName: str): ...
    @overload
    def __init__(self, name: str, typeName: str, documentation: str): ...
    @overload
    def __init__(self, name: str, typeName: str, documentation: str, paramFlags: ParameterFlags): ...
    @property
    def Documentation(self) -> str: ...
    @property
    def Flags(self) -> ParameterFlags: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeName(self) -> str: ...


class ParameterFlags:
    #None = 0
    ParamsArray = 1
    ParamsDict = 2


class ScriptEngine:
    @overload
    def CreateOperations(self) -> ObjectOperations: ...
    @overload
    def CreateOperations(self, scope: ScriptScope) -> ObjectOperations: ...
    @overload
    def CreateScope(self) -> ScriptScope: ...
    @overload
    def CreateScope(self, dictionary: IDictionary) -> ScriptScope: ...
    @overload
    def CreateScope(self, storage: IDynamicMetaObjectProvider) -> ScriptScope: ...
    @overload
    def CreateScriptSource(self, content: CodeObject) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: StreamContentProvider, path: str) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: CodeObject, kind: SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: CodeObject, path: str) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: StreamContentProvider, path: str, encoding: Encoding) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: CodeObject, path: str, kind: SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, contentProvider: TextContentProvider, path: str, kind: SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSource(self, content: StreamContentProvider, path: str, encoding: Encoding, kind: SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromFile(self, path: str) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromFile(self, path: str, encoding: Encoding) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromFile(self, path: str, encoding: Encoding, kind: SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromString(self, expression: str) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromString(self, code: str, kind: SourceCodeKind) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromString(self, expression: str, path: str) -> ScriptSource: ...
    @overload
    def CreateScriptSourceFromString(self, code: str, path: str, kind: SourceCodeKind) -> ScriptSource: ...
    @overload
    def Execute(self, expression: str) -> T: ...
    @overload
    def Execute(self, expression: str) -> Object: ...
    @overload
    def Execute(self, expression: str, scope: ScriptScope) -> T: ...
    @overload
    def Execute(self, expression: str, scope: ScriptScope) -> Object: ...
    @overload
    def ExecuteAndWrap(self, expression: str) -> ObjectHandle: ...
    @overload
    def ExecuteAndWrap(self, expression: str, scope: ScriptScope) -> ObjectHandle: ...
    @overload
    def ExecuteFile(self, path: str) -> ScriptScope: ...
    @overload
    def ExecuteFile(self, path: str, scope: ScriptScope) -> ScriptScope: ...
    @property
    def LanguageVersion(self) -> Version: ...
    @property
    def Operations(self) -> ObjectOperations: ...
    @property
    def Runtime(self) -> ScriptRuntime: ...
    @property
    def Setup(self) -> LanguageSetup: ...
    @overload
    def GetCompilerOptions(self) -> CompilerOptions: ...
    @overload
    def GetCompilerOptions(self, scope: ScriptScope) -> CompilerOptions: ...
    def GetScope(self, path: str) -> ScriptScope: ...
    def GetSearchPaths(self) -> ICollection: ...
    def GetService(self, args: Set(Object)) -> TService: ...
    def InitializeLifetimeService(self) -> Object: ...
    def SetSearchPaths(self, paths: ICollection) -> None: ...


class ScriptHost:
    def __init__(self): ...
    @property
    def PlatformAdaptationLayer(self) -> PlatformAdaptationLayer: ...
    @property
    def Runtime(self) -> ScriptRuntime: ...
    def InitializeLifetimeService(self) -> Object: ...


class ScriptIO:
    @property
    def ErrorEncoding(self) -> Encoding: ...
    @property
    def ErrorStream(self) -> Stream: ...
    @property
    def ErrorWriter(self) -> TextWriter: ...
    @property
    def InputEncoding(self) -> Encoding: ...
    @property
    def InputReader(self) -> TextReader: ...
    @property
    def InputStream(self) -> Stream: ...
    @property
    def OutputEncoding(self) -> Encoding: ...
    @property
    def OutputStream(self) -> Stream: ...
    @property
    def OutputWriter(self) -> TextWriter: ...
    def InitializeLifetimeService(self) -> Object: ...
    def RedirectToConsole(self) -> None: ...
    @overload
    def SetErrorOutput(self, stream: Stream, encoding: Encoding) -> None: ...
    @overload
    def SetErrorOutput(self, stream: Stream, writer: TextWriter) -> None: ...
    @overload
    def SetInput(self, stream: Stream, encoding: Encoding) -> None: ...
    @overload
    def SetInput(self, stream: Stream, reader: TextReader, encoding: Encoding) -> None: ...
    @overload
    def SetOutput(self, stream: Stream, writer: TextWriter) -> None: ...
    @overload
    def SetOutput(self, stream: Stream, encoding: Encoding) -> None: ...


class ScriptRuntime:
    def __init__(self, setup: ScriptRuntimeSetup): ...
    def CreateFromConfiguration() -> ScriptRuntime: ...
    def CreateOperations(self) -> ObjectOperations: ...
    def CreateRemote(domain: AppDomain, setup: ScriptRuntimeSetup) -> ScriptRuntime: ...
    @overload
    def CreateScope(self) -> ScriptScope: ...
    @overload
    def CreateScope(self, dictionary: IDictionary) -> ScriptScope: ...
    @overload
    def CreateScope(self, storage: IDynamicMetaObjectProvider) -> ScriptScope: ...
    @overload
    def CreateScope(self, languageId: str) -> ScriptScope: ...
    @overload
    def CreateScope(self, languageId: str, storage: IDictionary) -> ScriptScope: ...
    @overload
    def CreateScope(self, languageId: str, storage: IDynamicMetaObjectProvider) -> ScriptScope: ...
    def ExecuteFile(self, path: str) -> ScriptScope: ...
    @property
    def Globals(self) -> ScriptScope: ...
    @property
    def Host(self) -> ScriptHost: ...
    @property
    def IO(self) -> ScriptIO: ...
    @property
    def Operations(self) -> ObjectOperations: ...
    @property
    def Setup(self) -> ScriptRuntimeSetup: ...
    def GetEngine(self, languageName: str) -> ScriptEngine: ...
    def GetEngineByFileExtension(self, fileExtension: str) -> ScriptEngine: ...
    def GetEngineByTypeName(self, assemblyQualifiedTypeName: str) -> ScriptEngine: ...
    def InitializeLifetimeService(self) -> Object: ...
    def LoadAssembly(self, assembly: Assembly) -> None: ...
    @Globals.setter
    def Globals(self, value: ScriptScope) -> None: ...
    def Shutdown(self) -> None: ...
    def TryGetEngine(self, languageName: str) -> Tuple[bool, ScriptEngine]: ...
    def TryGetEngineByFileExtension(self, fileExtension: str) -> Tuple[bool, ScriptEngine]: ...
    def UseFile(self, path: str) -> ScriptScope: ...


class ScriptRuntimeSetup:
    def __init__(self): ...
    @property
    def DebugMode(self) -> bool: ...
    @property
    def HostArguments(self) -> List[Object]: ...
    @property
    def HostType(self) -> Type: ...
    @property
    def LanguageSetups(self) -> List[LanguageSetup]: ...
    @property
    def Options(self) -> IDictionary: ...
    @property
    def PrivateBinding(self) -> bool: ...
    @overload
    def ReadConfiguration() -> ScriptRuntimeSetup: ...
    @overload
    def ReadConfiguration(configFileStream: Stream) -> ScriptRuntimeSetup: ...
    @overload
    def ReadConfiguration(configFilePath: str) -> ScriptRuntimeSetup: ...
    @DebugMode.setter
    def DebugMode(self, value: bool) -> None: ...
    @HostArguments.setter
    def HostArguments(self, value: List[Object]) -> None: ...
    @HostType.setter
    def HostType(self, value: Type) -> None: ...
    @PrivateBinding.setter
    def PrivateBinding(self, value: bool) -> None: ...


class ScriptScope:
    def ContainsVariable(self, name: str) -> bool: ...
    @property
    def Engine(self) -> ScriptEngine: ...
    def GetItems(self) -> Iterable[KeyValuePair]: ...
    @overload
    def GetVariable(self, name: str) -> T: ...
    @overload
    def GetVariable(self, name: str) -> Object: ...
    def GetVariableHandle(self, name: str) -> ObjectHandle: ...
    def GetVariableNames(self) -> Iterable[str]: ...
    def InitializeLifetimeService(self) -> Object: ...
    def RemoveVariable(self, name: str) -> bool: ...
    @overload
    def SetVariable(self, name: str, value: Object) -> None: ...
    @overload
    def SetVariable(self, name: str, handle: ObjectHandle) -> None: ...
    @overload
    def TryGetVariable(self, name: str) -> Tuple[bool, T]: ...
    @overload
    def TryGetVariable(self, name: str) -> Tuple[bool, Object]: ...
    def TryGetVariableHandle(self, name: str) -> Tuple[bool, ObjectHandle]: ...


class ScriptSource:
    @overload
    def Compile(self) -> CompiledCode: ...
    @overload
    def Compile(self, errorListener: ErrorListener) -> CompiledCode: ...
    @overload
    def Compile(self, compilerOptions: CompilerOptions) -> CompiledCode: ...
    @overload
    def Compile(self, compilerOptions: CompilerOptions, errorListener: ErrorListener) -> CompiledCode: ...
    def DetectEncoding(self) -> Encoding: ...
    @overload
    def Execute(self) -> Object: ...
    @overload
    def Execute(self) -> T: ...
    @overload
    def Execute(self, scope: ScriptScope) -> T: ...
    @overload
    def Execute(self, scope: ScriptScope) -> Object: ...
    @overload
    def ExecuteAndWrap(self) -> ObjectHandle: ...
    @overload
    def ExecuteAndWrap(self, scope: ScriptScope) -> ObjectHandle: ...
    @overload
    def ExecuteAndWrap(self) -> Tuple[ObjectHandle, ObjectHandle]: ...
    @overload
    def ExecuteAndWrap(self, scope: ScriptScope) -> Tuple[ObjectHandle, ObjectHandle]: ...
    def ExecuteProgram(self) -> int: ...
    @property
    def Engine(self) -> ScriptEngine: ...
    @property
    def Kind(self) -> SourceCodeKind: ...
    @property
    def Path(self) -> str: ...
    def GetCode(self) -> str: ...
    def GetCodeLine(self, line: int) -> str: ...
    def GetCodeLines(self, start: int, count: int) -> Set(str): ...
    @overload
    def GetCodeProperties(self) -> ScriptCodeParseResult: ...
    @overload
    def GetCodeProperties(self, options: CompilerOptions) -> ScriptCodeParseResult: ...
    def GetReader(self) -> SourceCodeReader: ...
    def InitializeLifetimeService(self) -> Object: ...
    @overload
    def MapLine(self, line: int) -> int: ...
    @overload
    def MapLine(self, span: SourceSpan) -> SourceSpan: ...
    @overload
    def MapLine(self, location: SourceLocation) -> SourceLocation: ...
    def MapLinetoFile(self, line: int) -> str: ...


class TokenCategorizer:
    @property
    def CurrentPosition(self) -> SourceLocation: ...
    @property
    def CurrentState(self) -> Object: ...
    @property
    def ErrorSink(self) -> ErrorSink: ...
    @property
    def IsRestartable(self) -> bool: ...
    def Initialize(self, state: Object, scriptSource: ScriptSource, initialLocation: SourceLocation) -> None: ...
    def InitializeLifetimeService(self) -> Object: ...
    def ReadToken(self) -> TokenInfo: ...
    def ReadTokens(self, characterCount: int) -> Iterable[TokenInfo]: ...
    @ErrorSink.setter
    def ErrorSink(self, value: ErrorSink) -> None: ...
    def SkipToken(self) -> bool: ...
    def SkipTokens(self, characterCount: int) -> bool: ...
