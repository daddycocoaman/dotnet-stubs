from typing import Tuple, Set, Iterable, List


class ConsoleRestartManager:
    def __init__(self, exitOnNormalExit: bool): ...
    def BreakExecution(self) -> None: ...
    def CreateRemoteConsoleHost(self) -> RemoteConsoleHost: ...
    @property
    def ConsoleThread(self) -> Thread: ...
    def GetMemberNames(self, expression: str) -> List[str]: ...
    def RestartConsole(self) -> None: ...
    def Start(self) -> None: ...
    def Terminate(self) -> None: ...


class RemoteCommandDispatcher:
    def __init__(self, scope: ScriptScope): ...
    def AbortCommand(self) -> bool: ...
    def Execute(self, compiledCode: CompiledCode, scope: ScriptScope) -> Object: ...
    @property
    def ScriptScope(self) -> ScriptScope: ...
    def InitializeLifetimeService(self) -> Object: ...


class RemoteConsoleCommandLine(CommandLine):
    def __init__(self, scope: ScriptScope, remoteCommandDispatcher: RemoteCommandDispatcher, remoteOutputReceived: AutoResetEvent): ...


class RemoteConsoleHost(ConsoleHost):
    def AbortCommand(self) -> bool: ...
    def CustomizeRemoteRuntimeStartInfo(self, processInfo: ProcessStartInfo) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dispose(self, disposing: bool) -> None: ...
    @property
    def RemoteRuntimeProcess(self) -> Process: ...
    @property
    def ScriptScope(self) -> ScriptScope: ...
    def Run(self, args: Set(str)) -> int: ...
    def Terminate(self, exitCode: int) -> None: ...


class RemoteRuntimeServer:
    pass


class RemoteRuntimeStartupException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
