from typing import Tuple, Set, Iterable, List


class LanguageElement:
    def __init__(self): ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Extensions(self) -> str: ...
    @property
    def Names(self) -> str: ...
    @property
    def Type(self) -> str: ...
    def GetExtensionsArray(self) -> Set(str): ...
    def GetNamesArray(self) -> Set(str): ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @Extensions.setter
    def Extensions(self, value: str) -> None: ...
    @Names.setter
    def Names(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: str) -> None: ...


class LanguageElementCollection:
    def __init__(self): ...
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType: ...


class OptionElement:
    def __init__(self): ...
    @property
    def Language(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Language.setter
    def Language(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class OptionElementCollection:
    def __init__(self): ...
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType: ...


class Section:
    def __init__(self): ...
    @property
    def DebugMode(self) -> Nullable: ...
    @property
    def PrivateBinding(self) -> Nullable: ...
    def GetLanguages(self) -> Iterable[LanguageElement]: ...
    def GetOptions(self) -> Iterable[OptionElement]: ...
    @DebugMode.setter
    def DebugMode(self, value: Nullable) -> None: ...
    @PrivateBinding.setter
    def PrivateBinding(self, value: Nullable) -> None: ...
