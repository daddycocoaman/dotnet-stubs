__all__ = ['XamlIntegration']
from typing import Tuple, Set, Iterable, List


class VisualBasic:
    def GetSettings(target: Object) -> VisualBasicSettings: ...
    def SetSettings(target: Object, value: VisualBasicSettings) -> None: ...
    def SetSettingsForImplementation(target: Object, value: VisualBasicSettings) -> None: ...
    def ShouldSerializeSettings(target: Object) -> bool: ...


class VisualBasicDesignerHelper:
    def CreatePrecompiledVisualBasicReference(targetType: Type, expressionText: str, namespaces: Iterable[str], referencedAssemblies: Iterable[str], environment: LocationReferenceEnvironment) -> Tuple[Activity, Type, SourceExpressionException, VisualBasicSettings]: ...
    def CreatePrecompiledVisualBasicValue(targetType: Type, expressionText: str, namespaces: Iterable[str], referencedAssemblies: Iterable[str], environment: LocationReferenceEnvironment) -> Tuple[Activity, Type, SourceExpressionException, VisualBasicSettings]: ...
    @property
    def NameShadowingConstraint() -> Constraint: ...
    def RecompileVisualBasicReference(visualBasicReference: ActivityWithResult) -> Tuple[Activity, Type, SourceExpressionException, VisualBasicSettings]: ...
    def RecompileVisualBasicValue(visualBasicValue: ActivityWithResult) -> Tuple[Activity, Type, SourceExpressionException, VisualBasicSettings]: ...


class VisualBasicImportReference:
    def __init__(self): ...
    @overload
    def Equals(self, other: VisualBasicImportReference) -> bool: ...
    @property
    def Assembly(self) -> str: ...
    @property
    def Import(self) -> str: ...
    def GetHashCode(self) -> int: ...
    @Assembly.setter
    def Assembly(self, value: str) -> None: ...
    @Import.setter
    def Import(self, value: str) -> None: ...




class VisualBasicSettings:
    def __init__(self): ...
    @property
    def Default() -> VisualBasicSettings: ...
    @property
    def ImportReferences(self) -> ISet: ...


