__all__ = ['Internal']
from typing import Tuple, Set, Iterable, List


class ClipboardProxy:
    def Clear(self) -> None: ...
    def ContainsAudio(self) -> bool: ...
    def ContainsData(self, format: str) -> bool: ...
    def ContainsFileDropList(self) -> bool: ...
    def ContainsImage(self) -> bool: ...
    @overload
    def ContainsText(self) -> bool: ...
    @overload
    def ContainsText(self, format: TextDataFormat) -> bool: ...
    def GetAudioStream(self) -> Stream: ...
    def GetData(self, format: str) -> Object: ...
    def GetDataObject(self) -> IDataObject: ...
    def GetFileDropList(self) -> StringCollection: ...
    def GetImage(self) -> Image: ...
    @overload
    def GetText(self) -> str: ...
    @overload
    def GetText(self, format: TextDataFormat) -> str: ...
    @overload
    def SetAudio(self, audioStream: Stream) -> None: ...
    @overload
    def SetAudio(self, audioBytes: Set(Byte)) -> None: ...
    def SetData(self, format: str, data: Object) -> None: ...
    def SetDataObject(self, data: DataObject) -> None: ...
    def SetFileDropList(self, filePaths: StringCollection) -> None: ...
    def SetImage(self, image: Image) -> None: ...
    @overload
    def SetText(self, text: str) -> None: ...
    @overload
    def SetText(self, text: str, format: TextDataFormat) -> None: ...


class FileSystemProxy:
    def CombinePath(self, baseDirectory: str, relativePath: str) -> str: ...
    @overload
    def CopyDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str) -> None: ...
    @overload
    def CopyDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption) -> None: ...
    @overload
    def CopyDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, overwrite: bool) -> None: ...
    @overload
    def CopyDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str, showUI: UIOption) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str, overwrite: bool) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    def CreateDirectory(self, directory: str) -> None: ...
    @overload
    def DeleteDirectory(self, directory: str, onDirectoryNotEmpty: DeleteDirectoryOption) -> None: ...
    @overload
    def DeleteDirectory(self, directory: str, showUI: UIOption, recycle: RecycleOption) -> None: ...
    @overload
    def DeleteDirectory(self, directory: str, showUI: UIOption, recycle: RecycleOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    def DeleteFile(self, file: str) -> None: ...
    @overload
    def DeleteFile(self, file: str, showUI: UIOption, recycle: RecycleOption) -> None: ...
    @overload
    def DeleteFile(self, file: str, showUI: UIOption, recycle: RecycleOption, onUserCancel: UICancelOption) -> None: ...
    def DirectoryExists(self, directory: str) -> bool: ...
    def FileExists(self, file: str) -> bool: ...
    @overload
    def FindInFiles(self, directory: str, containsText: str, ignoreCase: bool, searchType: SearchOption) -> ReadOnlyCollection: ...
    @overload
    def FindInFiles(self, directory: str, containsText: str, ignoreCase: bool, searchType: SearchOption, fileWildcards: Set(str)) -> ReadOnlyCollection: ...
    @property
    def CurrentDirectory(self) -> str: ...
    @property
    def Drives(self) -> ReadOnlyCollection: ...
    @property
    def SpecialDirectories(self) -> SpecialDirectoriesProxy: ...
    @overload
    def GetDirectories(self, directory: str) -> ReadOnlyCollection: ...
    @overload
    def GetDirectories(self, directory: str, searchType: SearchOption, wildcards: Set(str)) -> ReadOnlyCollection: ...
    def GetDirectoryInfo(self, directory: str) -> DirectoryInfo: ...
    def GetDriveInfo(self, drive: str) -> DriveInfo: ...
    def GetFileInfo(self, file: str) -> FileInfo: ...
    @overload
    def GetFiles(self, directory: str) -> ReadOnlyCollection: ...
    @overload
    def GetFiles(self, directory: str, searchType: SearchOption, wildcards: Set(str)) -> ReadOnlyCollection: ...
    def GetName(self, path: str) -> str: ...
    def GetParentPath(self, path: str) -> str: ...
    def GetTempFileName(self) -> str: ...
    @overload
    def MoveDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str) -> None: ...
    @overload
    def MoveDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption) -> None: ...
    @overload
    def MoveDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, overwrite: bool) -> None: ...
    @overload
    def MoveDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    def MoveFile(self, sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    def MoveFile(self, sourceFileName: str, destinationFileName: str, showUI: UIOption) -> None: ...
    @overload
    def MoveFile(self, sourceFileName: str, destinationFileName: str, overwrite: bool) -> None: ...
    @overload
    def MoveFile(self, sourceFileName: str, destinationFileName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    def OpenTextFieldParser(self, file: str) -> TextFieldParser: ...
    @overload
    def OpenTextFieldParser(self, file: str, delimiters: Set(str)) -> TextFieldParser: ...
    @overload
    def OpenTextFieldParser(self, file: str, fieldWidths: Set(int)) -> TextFieldParser: ...
    @overload
    def OpenTextFileReader(self, file: str) -> StreamReader: ...
    @overload
    def OpenTextFileReader(self, file: str, encoding: Encoding) -> StreamReader: ...
    @overload
    def OpenTextFileWriter(self, file: str, append: bool) -> StreamWriter: ...
    @overload
    def OpenTextFileWriter(self, file: str, append: bool, encoding: Encoding) -> StreamWriter: ...
    def ReadAllBytes(self, file: str) -> Set(Byte): ...
    @overload
    def ReadAllText(self, file: str) -> str: ...
    @overload
    def ReadAllText(self, file: str, encoding: Encoding) -> str: ...
    def RenameDirectory(self, directory: str, newName: str) -> None: ...
    def RenameFile(self, file: str, newName: str) -> None: ...
    @CurrentDirectory.setter
    def CurrentDirectory(self, value: str) -> None: ...
    def WriteAllBytes(self, file: str, data: Set(Byte), append: bool) -> None: ...
    @overload
    def WriteAllText(self, file: str, text: str, append: bool) -> None: ...
    @overload
    def WriteAllText(self, file: str, text: str, append: bool, encoding: Encoding) -> None: ...


class RegistryProxy:
    @property
    def ClassesRoot(self) -> RegistryKey: ...
    @property
    def CurrentConfig(self) -> RegistryKey: ...
    @property
    def CurrentUser(self) -> RegistryKey: ...
    @property
    def DynData(self) -> RegistryKey: ...
    @property
    def LocalMachine(self) -> RegistryKey: ...
    @property
    def PerformanceData(self) -> RegistryKey: ...
    @property
    def Users(self) -> RegistryKey: ...
    def GetValue(self, keyName: str, valueName: str, defaultValue: Object) -> Object: ...
    @overload
    def SetValue(self, keyName: str, valueName: str, value: Object) -> None: ...
    @overload
    def SetValue(self, keyName: str, valueName: str, value: Object, valueKind: RegistryValueKind) -> None: ...


class SpecialDirectoriesProxy:
    @property
    def AllUsersApplicationData(self) -> str: ...
    @property
    def CurrentUserApplicationData(self) -> str: ...
    @property
    def Desktop(self) -> str: ...
    @property
    def MyDocuments(self) -> str: ...
    @property
    def MyMusic(self) -> str: ...
    @property
    def MyPictures(self) -> str: ...
    @property
    def ProgramFiles(self) -> str: ...
    @property
    def Programs(self) -> str: ...
    @property
    def Temp(self) -> str: ...
