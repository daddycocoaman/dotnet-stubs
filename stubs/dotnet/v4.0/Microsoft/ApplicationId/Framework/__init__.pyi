from typing import Tuple, Set, Iterable, List


class BranchPage(WizardPage):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wizard: WizardForm, parentPage: WizardPage): ...
    def OnDisplayedInWizard(self) -> None: ...


class ButtonType:
    #None = 0
    Previous = 1
    Next = 2
    Finish = 3
    Cancel = 4


class ConfirmationPage(WizardPage):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wizard: WizardForm): ...
    @overload
    def __init__(self, wizard: WizardForm, parentPage: WizardPage): ...
    @property
    def InstructionText(self) -> str: ...
    def OnActivated(self) -> None: ...
    @InstructionText.setter
    def InstructionText(self, value: str) -> None: ...


class FiniteProgressPage(ProgressPage):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wizard: WizardForm): ...
    @overload
    def __init__(self, wizard: WizardForm, parentPage: WizardPage): ...
    @property
    def CurrentStep(self) -> int: ...
    @property
    def EndStep(self) -> int: ...
    @property
    def StartStep(self) -> int: ...
    @property
    def StepIncrement(self) -> int: ...
    def Increment(self, incrementAmount: int) -> None: ...
    def NextStep(self) -> None: ...
    def OnActivated(self) -> None: ...
    @CurrentStep.setter
    def CurrentStep(self, value: int) -> None: ...
    @EndStep.setter
    def EndStep(self, value: int) -> None: ...
    @StartStep.setter
    def StartStep(self, value: int) -> None: ...
    @StepIncrement.setter
    def StepIncrement(self, value: int) -> None: ...
    def StartProgress(self) -> None: ...


class HelpInvokedEventArgs:
    def __init__(self, helpFile: str, topic: str): ...
    @property
    def HelpFile(self) -> str: ...
    @property
    def Topic(self) -> str: ...


class HelpInvokedEventHandler:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: HelpInvokedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: HelpInvokedEventArgs) -> None: ...


class InfiniteProgressPage(ProgressPage):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wizard: WizardForm): ...
    @overload
    def __init__(self, wizard: WizardForm, parentPage: WizardPage): ...
    def DoWizardAction(self) -> None: ...
    @property
    def AnimatedPicture(self) -> Image: ...
    @property
    def AnimatedPictureFile(self) -> str: ...
    def OnActionComplete(self) -> None: ...
    def OnActivated(self) -> None: ...
    def OnDeactivate(self) -> bool: ...
    @AnimatedPicture.setter
    def AnimatedPicture(self, value: Image) -> None: ...
    @AnimatedPictureFile.setter
    def AnimatedPictureFile(self, value: str) -> None: ...
    def StartProgress(self) -> None: ...


class OrientationPanelStepMode:
    Automatic = 0
    AllEnabled = 1
    AllDisabled = 2


class ProgressPage(WizardPage):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wizard: WizardForm): ...
    @overload
    def __init__(self, wizard: WizardForm, parentPage: WizardPage): ...
    @property
    def StatusText(self) -> str: ...
    def NextStep(self) -> None: ...
    def OnActivated(self) -> None: ...
    def OnDeactivate(self) -> bool: ...
    @StatusText.setter
    def StatusText(self, value: str) -> None: ...
    def StartProgress(self) -> None: ...
    def StopProgress(self) -> None: ...


class SummaryPage(WizardPage):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wizard: WizardForm): ...
    @overload
    def __init__(self, wizard: WizardForm, parentPage: WizardPage): ...
    def OnActivated(self) -> None: ...
    def OnDeactivated(self) -> None: ...


class TitleType:
    #None = 0
    Number = 1
    NumberOfN = 2


class WizardAction:
    def __init__(self, id: str, title: str, description: str, isGroup: bool, status: WizardActionStatus): ...
    def AddCorrectiveStep(self, correctiveStep: str) -> None: ...
    def AddFailure(self, failure: str) -> None: ...
    def AddWarning(self, warning: str) -> None: ...
    @property
    def CorrectiveSteps(self) -> List: ...
    @property
    def Description(self) -> str: ...
    @property
    def Failures(self) -> List: ...
    @property
    def Id(self) -> str: ...
    @property
    def IsGroup(self) -> bool: ...
    @property
    def Status(self) -> WizardActionStatus: ...
    @property
    def Title(self) -> str: ...
    @property
    def Warnings(self) -> List: ...
    def RemoveAllFailures(self) -> None: ...
    def RemoveAllWarnings(self) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...
    @IsGroup.setter
    def IsGroup(self, value: bool) -> None: ...
    @Status.setter
    def Status(self, value: WizardActionStatus) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...


class WizardActionStatus:
    NotStarted = 0
    Incomplete = 1
    CompleteWithWarning = 2
    CompleteWithFailure = 3
    CompleteWithSuccess = 4


class WizardForm:
    def __init__(self): ...
    def add_HelpInvoked(self, value: HelpInvokedEventHandler) -> None: ...
    def AddPage(self, page: WizardPage) -> int: ...
    def DoesUserDataExist(self, key: Object) -> bool: ...
    def EnableButton(self, buttonType: ButtonType, enable: bool) -> None: ...
    def FocusButton(self, buttonType: ButtonType) -> None: ...
    def FocusStep(self, page: WizardPage) -> None: ...
    @property
    def ActivePage(self) -> WizardPage: ...
    @property
    def ActivePageIndex(self) -> int: ...
    @property
    def Appx(self) -> bool: ...
    @property
    def ConfirmationMessage(self) -> str: ...
    @property
    def DisplayConfirmation(self) -> bool: ...
    @property
    def EnableOrientationPanel(self) -> bool: ...
    @property
    def HelpFile(self) -> str: ...
    @property
    def HelpKeyword(self) -> str: ...
    @property
    def MovingNavigationStepKeyPress(self) -> bool: ...
    @property
    def MovingNavigationStepMouseClick(self) -> bool: ...
    @property
    def MovingNext(self) -> bool: ...
    @property
    def MovingPrevious(self) -> bool: ...
    @property
    def NextPage(self) -> WizardPage: ...
    @property
    def OrientationPanelStepMode(self) -> OrientationPanelStepMode: ...
    @property
    def PageCount(self) -> int: ...
    @property
    def PreviousPage(self) -> WizardPage: ...
    @property
    def ShowOrientationPanel(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def WizardFormMinSize(self) -> Size: ...
    @property
    def WizardTitleType(self) -> TitleType: ...
    def GetEnvironmentFont(self, font: Font) -> Tuple[bool, Font]: ...
    def GetOrientationPanelBackColor(self, color: Color) -> Tuple[bool, Color]: ...
    def GetOrientationPanelForeColor(self, color: Color) -> Tuple[bool, Color]: ...
    @overload
    def GetPage(self, index: int) -> WizardPage: ...
    @overload
    def GetPage(self, pageId: str) -> WizardPage: ...
    def GetUserData(self, key: Object) -> Object: ...
    @overload
    def GoToPage(self, pageId: str) -> None: ...
    @overload
    def GoToPage(self, page: WizardPage) -> None: ...
    @overload
    def InsertPageAfter(self, index: int, page: WizardPage) -> int: ...
    @overload
    def InsertPageAfter(self, pageId: str, page: WizardPage) -> int: ...
    @overload
    def InsertPageBefore(self, pageId: str, page: WizardPage) -> int: ...
    @overload
    def InsertPageBefore(self, index: int, page: WizardPage) -> int: ...
    def InvokeHelp(self, helpFile: str, topic: str) -> None: ...
    def IsButtonEnabled(self, buttonType: ButtonType) -> bool: ...
    def NextPageFromPage(self, thePage: WizardPage) -> WizardPage: ...
    def OnCancel(self) -> None: ...
    def OnFinish(self) -> None: ...
    def OnNavigationStepKeyPress(self, page: WizardPage) -> None: ...
    def OnNavigationStepMouseClicked(self, page: WizardPage) -> None: ...
    def OnNext(self) -> None: ...
    def OnPrevious(self) -> None: ...
    def OnValidationStateChanged(self, page: WizardPage) -> None: ...
    def RefreshPageLogo(self) -> None: ...
    def remove_HelpInvoked(self, value: HelpInvokedEventHandler) -> None: ...
    @overload
    def RemovePage(self, pageId: str) -> None: ...
    @overload
    def RemovePage(self, index: int) -> None: ...
    @Appx.setter
    def Appx(self, value: bool) -> None: ...
    @ConfirmationMessage.setter
    def ConfirmationMessage(self, value: str) -> None: ...
    @DefaultButton.setter
    def DefaultButton(self, value: ButtonType) -> None: ...
    @DisplayConfirmation.setter
    def DisplayConfirmation(self, value: bool) -> None: ...
    @EnableOrientationPanel.setter
    def EnableOrientationPanel(self, value: bool) -> None: ...
    @HelpFile.setter
    def HelpFile(self, value: str) -> None: ...
    @HelpKeyword.setter
    def HelpKeyword(self, value: str) -> None: ...
    @OrientationPanelStepMode.setter
    def OrientationPanelStepMode(self, value: OrientationPanelStepMode) -> None: ...
    @ShowOrientationPanel.setter
    def ShowOrientationPanel(self, value: bool) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @WizardTitleType.setter
    def WizardTitleType(self, value: TitleType) -> None: ...
    def SetButtonAccessibleName(self, buttonType: ButtonType, accessibleName: str) -> None: ...
    def SetButtonText(self, buttonType: ButtonType, buttonText: str) -> None: ...
    def SetControlHelpKeyword(self, ctrl: Control, keyword: str) -> None: ...
    def SetControlHelpPopupText(self, ctrl: Control, helpText: str) -> None: ...
    def SetUserData(self, key: Object, data: Object) -> None: ...
    def SetUserDataStorageObject(self, userStorageObject: Hashtable) -> None: ...
    @overload
    def Start(self) -> None: ...
    @overload
    def Start(self, parent: IWin32Window) -> None: ...
    def StartModeless(self, parent: IWin32Window) -> None: ...
    def ThrowArgumentException(msg: str, args: Set(Object)) -> None: ...
    def ThrowException(msg: str, args: Set(Object)) -> None: ...
    def UpdateTitle(self) -> None: ...
    def ValidatePage(page: WizardPage) -> None: ...


class WizardFrameworkException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class WizardPage:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wizard: WizardForm): ...
    @overload
    def __init__(self, wizard: WizardForm, parentPage: WizardPage): ...
    def AddSubPage(self, page: WizardPage) -> int: ...
    def EnableStep(self, enable: bool) -> None: ...
    @property
    def ActiveSubPage(self) -> WizardPage: ...
    @property
    def CanActivate(self) -> bool: ...
    @property
    def Cancellable(self) -> bool: ...
    @property
    def CanDeactivate(self) -> bool: ...
    @property
    def Headline(self) -> str: ...
    @property
    def HelpKeyword(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def IndentationLevel(self) -> int: ...
    @property
    def InfoRTBoxIcon(self) -> Bitmap: ...
    @property
    def InfoRTBoxSize(self) -> Size: ...
    @property
    def InfoRTBoxText(self) -> str: ...
    @property
    def IsDataValid(self) -> bool: ...
    @property
    def IsDisplayedInWizard(self) -> bool: ...
    @property
    def Logo(self) -> Bitmap: ...
    @property
    def NextSubPage(self) -> WizardPage: ...
    @property
    def ParentPage(self) -> WizardPage: ...
    @property
    def PreviousSubPage(self) -> WizardPage: ...
    @property
    def ShowInfoPanel(self) -> bool: ...
    @property
    def Skippable(self) -> bool: ...
    @property
    def StepTitle(self) -> str: ...
    @property
    def SubPageCount(self) -> int: ...
    @property
    def TopMostPage(self) -> WizardPage: ...
    @property
    def Visited(self) -> bool: ...
    @overload
    def GetSubPage(self, index: int) -> WizardPage: ...
    @overload
    def GetSubPage(self, pageId: str) -> WizardPage: ...
    def GetSubPageCount(self) -> int: ...
    def HasActiveSubPage(self) -> bool: ...
    def HasBranchPage(self) -> bool: ...
    @overload
    def InsertSubPageAfter(self, pageId: str, page: WizardPage) -> int: ...
    @overload
    def InsertSubPageAfter(self, index: int, page: WizardPage) -> int: ...
    @overload
    def InsertSubPageBefore(self, pageId: str, page: WizardPage) -> int: ...
    @overload
    def InsertSubPageBefore(self, index: int, page: WizardPage) -> int: ...
    def IsRemovable(self) -> bool: ...
    def IsSelectedBranch(self) -> bool: ...
    def IsSubPage(self, page: WizardPage) -> bool: ...
    def OnActivate(self) -> bool: ...
    def OnActivated(self) -> None: ...
    def OnBranchChange(self, branchPageId: str) -> None: ...
    def OnDeactivate(self) -> bool: ...
    def OnDeactivated(self) -> None: ...
    def OnDisplayedInWizard(self) -> None: ...
    def OnSkip(self, fromPage: WizardPage, toPage: WizardPage) -> bool: ...
    def RemoveAllSubPages(self) -> None: ...
    @overload
    def RemoveSubPage(self, pageId: str) -> None: ...
    @overload
    def RemoveSubPage(self, index: int) -> None: ...
    @Cancellable.setter
    def Cancellable(self, value: bool) -> None: ...
    @Headline.setter
    def Headline(self, value: str) -> None: ...
    @HelpKeyword.setter
    def HelpKeyword(self, value: str) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...
    @InfoRTBoxIcon.setter
    def InfoRTBoxIcon(self, value: Bitmap) -> None: ...
    @InfoRTBoxSize.setter
    def InfoRTBoxSize(self, value: Size) -> None: ...
    @InfoRTBoxText.setter
    def InfoRTBoxText(self, value: str) -> None: ...
    @Logo.setter
    def Logo(self, value: Bitmap) -> None: ...
    @ParentPage.setter
    def ParentPage(self, value: WizardPage) -> None: ...
    @ShowInfoPanel.setter
    def ShowInfoPanel(self, value: bool) -> None: ...
    @Skippable.setter
    def Skippable(self, value: bool) -> None: ...
    @StepTitle.setter
    def StepTitle(self, value: str) -> None: ...
    @Visited.setter
    def Visited(self, value: bool) -> None: ...
    def SetFocus(self) -> None: ...
