from typing import Tuple, Set, Iterable, List


class AppxListView:
    def __init__(self): ...
    @property
    def CheckedItems(self) -> List: ...


class BeforeYouStartPage(WizardPage):
    def __init__(self, wiz: WizardForm, Id: str): ...
    @property
    def ShouldPageBeShown() -> bool: ...
    def OnActivated(self) -> None: ...
    def OnDeactivated(self) -> None: ...
    def Validates(self) -> bool: ...


class BrowseDSObjectsDialog:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, computerName: str): ...
    def Dispose(self) -> None: ...
    def GetSelectedAdsPaths(self) -> Set(str): ...
    def GetSelectedNames(self) -> Set(str): ...
    def GetSelectedObjectSids(self) -> Set(Set(Byte)): ...
    def GetSelectedUpnNames(self) -> Set(str): ...
    def ShowDialog(self, owner: IWin32Window, pickerType: PickerTypes, multipleSelect: bool) -> DialogResult: ...
    def ShowPickComputerDialog(self, owner: IWin32Window, multipleSelect: bool) -> DialogResult: ...
    def ShowPickUserDialog(self, owner: IWin32Window, multipleSelect: bool) -> DialogResult: ...


class ConditionTypeEnum:
    Undefined = 0
    FQBN = 1
    FQPN = 2
    Hash = 3
    Group = 4


class ConditionTypePage(WizardPage):
    def __init__(self, wiz: WizardForm, Id: str): ...
    @property
    def ConditionType(self) -> ConditionTypeEnum: ...
    @property
    def GenerateNegation(self) -> bool: ...
    def OnActivated(self) -> None: ...
    @ConditionType.setter
    def ConditionType(self, value: ConditionTypeEnum) -> None: ...
    @GenerateNegation.setter
    def GenerateNegation(self, value: bool) -> None: ...
    def Validates(self) -> bool: ...


class FQBNConditionForm:
    def __init__(self): ...
    @property
    def Appx(self) -> bool: ...
    @property
    def Condition(self) -> RuleCondition: ...
    @property
    def Filter(self) -> str: ...
    @Appx.setter
    def Appx(self, value: bool) -> None: ...
    @Condition.setter
    def Condition(self, value: RuleCondition) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...


class FQBNControl:
    def __init__(self): ...
    def add_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    @property
    def Appx(self) -> bool: ...
    @property
    def Condition(self) -> FilePublisherCondition: ...
    @property
    def Filter(self) -> str: ...
    @property
    def Validates(self) -> bool: ...
    def ManageFocus(self) -> None: ...
    def remove_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    @Appx.setter
    def Appx(self, value: bool) -> None: ...
    @Condition.setter
    def Condition(self, value: FilePublisherCondition) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...


class FQBNPage(WizardPage):
    def __init__(self, wiz: WizardForm, Id: str): ...
    @property
    def Condition(self) -> FilePublisherCondition: ...
    def OnActivated(self) -> None: ...
    @Condition.setter
    def Condition(self, value: FilePublisherCondition) -> None: ...
    def Validates(self) -> bool: ...


class FQPNConditionForm:
    def __init__(self): ...
    @property
    def Condition(self) -> RuleCondition: ...
    @property
    def Filter(self) -> str: ...
    @Condition.setter
    def Condition(self, value: RuleCondition) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...


class FQPNControl:
    def __init__(self): ...
    def add_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    @property
    def Condition(self) -> FilePathCondition: ...
    @property
    def Filter(self) -> str: ...
    @property
    def Validates(self) -> bool: ...
    def remove_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    @Condition.setter
    def Condition(self, value: FilePathCondition) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...


class FQPNPage(WizardPage):
    def __init__(self, wiz: WizardForm, Id: str): ...
    @property
    def Condition(self) -> FilePathCondition: ...
    def OnActivated(self) -> None: ...
    @Condition.setter
    def Condition(self, value: FilePathCondition) -> None: ...
    def Validates(self) -> bool: ...


class HashConditionForm:
    def __init__(self): ...
    @property
    def Condition(self) -> RuleCondition: ...
    @property
    def Filter(self) -> str: ...
    @Condition.setter
    def Condition(self, value: RuleCondition) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...


class HashControl:
    def __init__(self): ...
    def add_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    @property
    def Condition(self) -> FileHashCondition: ...
    @property
    def Filter(self) -> str: ...
    @property
    def Validates(self) -> bool: ...
    @property
    def Working(self) -> bool: ...
    def remove_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    @Condition.setter
    def Condition(self, value: FileHashCondition) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...


class HashPage(WizardPage):
    def __init__(self, wiz: WizardForm, Id: str): ...
    @property
    def Condition(self) -> FileHashCondition: ...
    def OnActivated(self) -> None: ...
    def OnDeactivate(self) -> bool: ...
    @Condition.setter
    def Condition(self, value: FileHashCondition) -> None: ...
    def Validates(self) -> bool: ...


class HelpLinkTextAndTopic:
    def __init__(self, Text: str, Topic: str): ...


class InvalidPathConditionException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class InvalidPublisherConditionException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class PermissionsControl:
    def __init__(self): ...
    def add_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    @property
    def ActionType(self) -> AppLockerRuleActionType: ...
    @property
    def Sid(self) -> SecurityIdentifier: ...
    @property
    def Trustee(self) -> str: ...
    @property
    def Validates(self) -> bool: ...
    def remove_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    @ActionType.setter
    def ActionType(self, value: AppLockerRuleActionType) -> None: ...
    @Sid.setter
    def Sid(self, value: SecurityIdentifier) -> None: ...
    @Trustee.setter
    def Trustee(self, value: str) -> None: ...


class PermissionsPage(WizardPage):
    def __init__(self, wiz: WizardForm, Id: str): ...
    @property
    def ActionType(self) -> AppLockerRuleActionType: ...
    @property
    def Sid(self) -> SecurityIdentifier: ...
    @property
    def Trustee(self) -> str: ...
    def OnActivated(self) -> None: ...
    def Validates(self) -> bool: ...


class PickerTypes:
    Computers = 1
    Users = 2
    Groups = 4
    WellKnownAccounts = 8


class ProgressForm:
    def __init__(self): ...
    @property
    def Cancelled(self) -> bool: ...
    @property
    def Label(self) -> str: ...
    @Cancellable.setter
    def Cancellable(self, value: bool) -> None: ...
    @CurrentState.setter
    def CurrentState(self, value: int) -> None: ...
    @Label.setter
    def Label(self, value: str) -> None: ...


class RestrictionsControl:
    def __init__(self): ...
    def add_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    def FormatConditionForDisplay(condition: RuleCondition) -> Set(str): ...
    @property
    def Appx(self) -> bool: ...
    @property
    def Filter(self) -> str: ...
    @property
    def Restrictions(self) -> ICollection: ...
    @property
    def Validates(self) -> bool: ...
    def ManageFocus(self) -> None: ...
    def remove_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    @Appx.setter
    def Appx(self, value: bool) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    def TypeFromCondition(condition: RuleCondition) -> str: ...
    def UpdateRestrictions(self, value: ICollection) -> None: ...


class RestrictionsPage(WizardPage):
    def __init__(self, wiz: WizardForm, Id: str): ...
    @property
    def Restrictions(self) -> ICollection: ...
    def OnActivated(self) -> None: ...
    def Validates(self) -> bool: ...


class RuleControlChangedEventArgs:
    def __init__(self, validates: bool): ...
    @property
    def Validates(self) -> bool: ...


class RuleControlChangedEventHandler:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: RuleControlChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: RuleControlChangedEventArgs) -> None: ...


class RuleNameControl:
    def __init__(self): ...
    def add_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    def AutoGeneratedName(condition: RuleCondition, appX: bool, publisherDisplayName: str) -> str: ...
    @property
    def AutoGenerated(self) -> bool: ...
    @property
    def RuleDescription(self) -> str: ...
    @property
    def RuleName(self) -> str: ...
    @property
    def Validates(self) -> bool: ...
    def remove_RuleControlChanged(self, value: RuleControlChangedEventHandler) -> None: ...
    @AutoGenerated.setter
    def AutoGenerated(self, value: bool) -> None: ...
    @RuleDescription.setter
    def RuleDescription(self, value: str) -> None: ...
    @RuleName.setter
    def RuleName(self, value: str) -> None: ...


class RuleNamePage(WizardPage):
    def __init__(self, wiz: WizardForm, Id: str): ...
    @property
    def AutoGenerated(self) -> bool: ...
    @property
    def RuleDescription(self) -> str: ...
    @property
    def RuleName(self) -> str: ...
    def OnActivated(self) -> None: ...
    def Validates(self) -> bool: ...


class RuleWizard(WizardForm):
    def __init__(self): ...
    @property
    def Appx(self) -> bool: ...
    @property
    def Filter(self) -> str: ...
    @property
    def HelpFileName(self) -> str: ...
    @property
    def Logo(self) -> Bitmap: ...
    @property
    def Rule(self) -> AppLockerRule: ...
    @overload
    def InvokeHelp(self, topic: str) -> None: ...
    def ManageNextPages(self) -> None: ...
    @Appx.setter
    def Appx(self, value: bool) -> None: ...
    @BeforeYouBeginHelpLinkTextAndTopic.setter
    def BeforeYouBeginHelpLinkTextAndTopic(self, value: HelpLinkTextAndTopic) -> None: ...
    @ConditionTypeHelpLinkTextAndTopic.setter
    def ConditionTypeHelpLinkTextAndTopic(self, value: HelpLinkTextAndTopic) -> None: ...
    @ExceptionsHelpLinkTextAndTopic.setter
    def ExceptionsHelpLinkTextAndTopic(self, value: HelpLinkTextAndTopic) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @HashHelpLinkTextAndTopic.setter
    def HashHelpLinkTextAndTopic(self, value: HelpLinkTextAndTopic) -> None: ...
    @HelpFileName.setter
    def HelpFileName(self, value: str) -> None: ...
    @Logo.setter
    def Logo(self, value: Bitmap) -> None: ...
    @PathHelpLinkTextAndTopic.setter
    def PathHelpLinkTextAndTopic(self, value: HelpLinkTextAndTopic) -> None: ...
    @PermissionsHelpLinkTextAndTopic.setter
    def PermissionsHelpLinkTextAndTopic(self, value: HelpLinkTextAndTopic) -> None: ...
    @PublisherHelpLinkTextAndTopic.setter
    def PublisherHelpLinkTextAndTopic(self, value: HelpLinkTextAndTopic) -> None: ...
