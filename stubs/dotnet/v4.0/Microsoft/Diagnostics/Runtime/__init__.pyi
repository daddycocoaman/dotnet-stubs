__all__ = ['DacInterface','Implementation','Utilities','Windows']
from typing import Tuple, Set, Iterable, List


class AMD64Context:
    @property
    def Size() -> int: ...


class Architecture:
    Unknown = 0
    X86 = 1
    Amd64 = 2
    Arm = 3
    Arm64 = 4


class Arm64Context:
    @property
    def Size() -> int: ...


class ArmContext:
    @property
    def Size() -> int: ...


class CacheOptions:
    def __init__(self): ...
    @property
    def CacheFieldNames(self) -> StringCaching: ...
    @property
    def CacheFields(self) -> bool: ...
    @property
    def CacheMethodNames(self) -> StringCaching: ...
    @property
    def CacheMethods(self) -> bool: ...
    @property
    def CacheTypeNames(self) -> StringCaching: ...
    @property
    def CacheTypes(self) -> bool: ...
    @property
    def MaxDumpCacheSize(self) -> Int64: ...
    @property
    def UseOSMemoryFeatures(self) -> bool: ...
    @CacheFieldNames.setter
    def CacheFieldNames(self, value: StringCaching) -> None: ...
    @CacheFields.setter
    def CacheFields(self, value: bool) -> None: ...
    @CacheMethodNames.setter
    def CacheMethodNames(self, value: StringCaching) -> None: ...
    @CacheMethods.setter
    def CacheMethods(self, value: bool) -> None: ...
    @CacheTypeNames.setter
    def CacheTypeNames(self, value: StringCaching) -> None: ...
    @CacheTypes.setter
    def CacheTypes(self, value: bool) -> None: ...
    @MaxDumpCacheSize.setter
    def MaxDumpCacheSize(self, value: Int64) -> None: ...
    @UseOSMemoryFeatures.setter
    def UseOSMemoryFeatures(self, value: bool) -> None: ...


class ClrAppDomain:
    @property
    def Address(self) -> UInt64: ...
    @property
    def ApplicationBase(self) -> str: ...
    @property
    def ConfigurationFile(self) -> str: ...
    @property
    def Id(self) -> int: ...
    @property
    def Modules(self) -> ImmutableArray: ...
    @property
    def Name(self) -> str: ...
    @property
    def Runtime(self) -> ClrRuntime: ...
    def ToString(self) -> str: ...


class ClrArray:
    def __init__(self, address: UInt64, type: ClrType): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ClrArray) -> bool: ...
    @overload
    def Equals(self, other: ClrObject) -> bool: ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def Length(self) -> int: ...
    @property
    def Rank(self) -> int: ...
    @property
    def Type(self) -> ClrType: ...
    def GetHashCode(self) -> int: ...
    def GetLength(self, dimension: int) -> int: ...
    def GetLowerBound(self, dimension: int) -> int: ...
    @overload
    def GetObjectValue(self, indices: Set(int)) -> ClrObject: ...
    @overload
    def GetObjectValue(self, index: int) -> ClrObject: ...
    @overload
    def GetStructValue(self, indices: Set(int)) -> ClrValueType: ...
    @overload
    def GetStructValue(self, index: int) -> ClrValueType: ...
    def GetUpperBound(self, dimension: int) -> int: ...
    @overload
    def GetValue(self, index: int) -> T: ...
    @overload
    def GetValue(self, indices: Set(int)) -> T: ...
    def op_Equality(left: ClrArray, right: ClrArray) -> bool: ...
    def op_Inequality(left: ClrArray, right: ClrArray) -> bool: ...
    def ReadValues(self, start: int, count: int) -> Set(T): ...


class ClrDiagnosticsException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, hr: int): ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class ClrDiagnosticsExceptionKind:
    Unknown = 0
    CorruptedFileOrUnknownFormat = 1
    RevisionMismatch = 2
    DebuggerError = 3
    CrashDumpError = 4
    DataRequestError = 5
    DacError = 6
    RuntimeUninitialized = 7


class ClrElementType:
    Unknown = 0
    Void = 1
    Boolean = 2
    Char = 3
    Int8 = 4
    UInt8 = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Float = 12
    Double = 13
    String = 14
    Pointer = 15
    Struct = 17
    Class = 18
    Var = 19
    Array = 20
    GenericInstantiation = 21
    NativeInt = 24
    NativeUInt = 25
    FunctionPointer = 27
    Object = 28
    SZArray = 29
    MVar = 30


class ClrEnum:
    def __init__(self, type: ClrType): ...
    def EnumerateValues(self) -> Iterable[ValueTuple]: ...
    @property
    def ElementType(self) -> ClrElementType: ...
    @property
    def Type(self) -> ClrType: ...
    def GetEnumNames(self) -> Iterable[str]: ...
    def GetEnumValue(self, name: str) -> T: ...


class ClrException:
    def __init__(self, helpers: IExceptionHelpers, thread: ClrThread, obj: ClrObject): ...
    def AsObject(self) -> ClrObject: ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def HResult(self) -> int: ...
    @property
    def Inner(self) -> ClrException: ...
    @property
    def Message(self) -> str: ...
    @property
    def StackTrace(self) -> ImmutableArray: ...
    @property
    def Thread(self) -> ClrThread: ...
    @property
    def Type(self) -> ClrType: ...
    def ToString(self) -> str: ...


class ClrField:
    @property
    def ContainingType(self) -> ClrType: ...
    @property
    def ElementType(self) -> ClrElementType: ...
    @property
    def IsInternal(self) -> bool: ...
    @property
    def IsObjectReference(self) -> bool: ...
    @property
    def IsPrimitive(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def IsProtected(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsValueType(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Offset(self) -> int: ...
    @property
    def Size(self) -> int: ...
    @property
    def Token(self) -> int: ...
    @property
    def Type(self) -> ClrType: ...
    def ToString(self) -> str: ...


class ClrFinalizerRoot:
    def __init__(self, address: UInt64, obj: ClrObject): ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def IsInterior(self) -> bool: ...
    @property
    def IsPinned(self) -> bool: ...
    @property
    def Object(self) -> ClrObject: ...
    @property
    def RootKind(self) -> ClrRootKind: ...
    def ToString(self) -> str: ...


class ClrFlavor:
    Desktop = 0
    Core = 3


class ClrGenericParameter:
    def __init__(self, metadataToken: int, index: int, attributes: GenericParameterAttributes, name: str): ...
    @property
    def Attributes(self) -> GenericParameterAttributes: ...
    @property
    def Index(self) -> int: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def Name(self) -> str: ...


class ClrHandle:
    @property
    def Address(self) -> UInt64: ...
    @property
    def AppDomain(self) -> ClrAppDomain: ...
    @property
    def Dependent(self) -> ClrObject: ...
    @property
    def HandleKind(self) -> ClrHandleKind: ...
    @property
    def IsInterior(self) -> bool: ...
    @property
    def IsPinned(self) -> bool: ...
    @property
    def IsStrong(self) -> bool: ...
    @property
    def Object(self) -> ClrObject: ...
    @property
    def ReferenceCount(self) -> UInt32: ...
    @property
    def RootKind(self) -> ClrRootKind: ...
    def ToString(self) -> str: ...


class ClrHandleKind:
    WeakShort = 0
    WeakLong = 1
    Strong = 2
    Pinned = 3
    RefCounted = 5
    Dependent = 6
    AsyncPinned = 7
    SizedRef = 8
    WeakWinRT = 9


class ClrHeap:
    def EnumerateAllocationContexts(self) -> Iterable[MemoryRange]: ...
    def EnumerateFinalizableObjects(self) -> Iterable[ClrObject]: ...
    def EnumerateFinalizerRoots(self) -> Iterable[ClrFinalizerRoot]: ...
    def EnumerateObjectReferences(self, obj: UInt64, type: ClrType, carefully: bool, considerDependantHandles: bool) -> Iterable[ClrObject]: ...
    def EnumerateObjects(self) -> Iterable[ClrObject]: ...
    def EnumerateReferencesWithFields(self, obj: UInt64, type: ClrType, carefully: bool, considerDependantHandles: bool) -> Iterable[ClrReference]: ...
    def EnumerateRoots(self) -> Iterable[IClrRoot]: ...
    @property
    def CanWalkHeap(self) -> bool: ...
    @property
    def ExceptionType(self) -> ClrType: ...
    @property
    def FreeType(self) -> ClrType: ...
    @property
    def IsServer(self) -> bool: ...
    @property
    def LogicalHeapCount(self) -> int: ...
    @property
    def ObjectType(self) -> ClrType: ...
    @property
    def Runtime(self) -> ClrRuntime: ...
    @property
    def Segments(self) -> ImmutableArray: ...
    @property
    def StringType(self) -> ClrType: ...
    def GetComFlags(self, obj: UInt64) -> SyncBlockComFlags: ...
    def GetObject(self, objRef: UInt64) -> ClrObject: ...
    def GetObjectSize(self, objRef: UInt64, type: ClrType) -> UInt64: ...
    def GetObjectType(self, objRef: UInt64) -> ClrType: ...
    def GetSegmentByAddress(self, address: UInt64) -> ClrSegment: ...
    def GetSyncBlock(self, obj: UInt64) -> SyncBlock: ...
    def ToString(self) -> str: ...


class ClrInfo:
    @overload
    def CreateRuntime(self) -> ClrRuntime: ...
    @overload
    def CreateRuntime(self, dacPath: str, ignoreMismatch: bool) -> ClrRuntime: ...
    @property
    def DacInfo(self) -> DacInfo: ...
    @property
    def DataTarget(self) -> DataTarget: ...
    @property
    def Flavor(self) -> ClrFlavor: ...
    @property
    def ModuleInfo(self) -> ModuleInfo: ...
    @property
    def SingleFileRuntimeInfo(self) -> Nullable: ...
    @property
    def Version(self) -> VersionInfo: ...
    def ToString(self) -> str: ...


class ClrInfoProvider:
    def GetDacFileName(flavor: ClrFlavor, platform: OSPlatform) -> str: ...
    def GetDacRequestFileName(flavor: ClrFlavor, currentArchitecture: Architecture, targetArchitecture: Architecture, version: VersionInfo, platform: OSPlatform) -> str: ...
    def IsSupportedRuntime(moduleInfo: ModuleInfo) -> Tuple[bool, ClrFlavor, OSPlatform]: ...


class ClrInstanceField(ClrField):
    @overload
    def GetAddress(self, objRef: UInt64) -> UInt64: ...
    @overload
    def GetAddress(self, objRef: UInt64, interior: bool) -> UInt64: ...
    def Read(self, objRef: UInt64, interior: bool) -> T: ...
    def ReadObject(self, objRef: UInt64, interior: bool) -> ClrObject: ...
    def ReadString(self, objRef: UInt64, interior: bool) -> str: ...
    def ReadStruct(self, objRef: UInt64, interior: bool) -> ClrValueType: ...


class ClrInterface:
    def __init__(self, name: str, baseInterface: ClrInterface): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ClrInterface) -> bool: ...
    @property
    def BaseInterface(self) -> ClrInterface: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: ClrInterface, right: ClrInterface) -> bool: ...
    def op_Inequality(left: ClrInterface, right: ClrInterface) -> bool: ...
    def ToString(self) -> str: ...


class ClrMethod:
    @overload
    def Equals(self, other: ClrMethod) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CompilationType(self) -> MethodCompilationType: ...
    @property
    def HotColdInfo(self) -> HotColdRegions: ...
    @property
    def IL(self) -> ILInfo: ...
    @property
    def ILOffsetMap(self) -> ImmutableArray: ...
    @property
    def IsAbstract(self) -> bool: ...
    @property
    def IsClassConstructor(self) -> bool: ...
    @property
    def IsConstructor(self) -> bool: ...
    @property
    def IsFinal(self) -> bool: ...
    @property
    def IsInternal(self) -> bool: ...
    @property
    def IsPInvoke(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def IsProtected(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsRTSpecialName(self) -> bool: ...
    @property
    def IsSpecialName(self) -> bool: ...
    @property
    def IsStatic(self) -> bool: ...
    @property
    def IsVirtual(self) -> bool: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def MethodDesc(self) -> UInt64: ...
    @property
    def Name(self) -> str: ...
    @property
    def NativeCode(self) -> UInt64: ...
    @property
    def Signature(self) -> str: ...
    @property
    def Type(self) -> ClrType: ...
    def GetHashCode(self) -> int: ...
    def GetILOffset(self, addr: UInt64) -> int: ...
    def op_Equality(left: ClrMethod, right: ClrMethod) -> bool: ...
    def op_Inequality(left: ClrMethod, right: ClrMethod) -> bool: ...


class ClrModule:
    def EnumerateTypeDefToMethodTableMap(self) -> Iterable[ValueTuple]: ...
    @overload
    def Equals(self, other: ClrModule) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def AppDomain(self) -> ClrAppDomain: ...
    @property
    def AssemblyAddress(self) -> UInt64: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def DebuggingMode(self) -> DebuggingModes: ...
    @property
    def ImageBase(self) -> UInt64: ...
    @property
    def IsDynamic(self) -> bool: ...
    @property
    def IsPEFile(self) -> bool: ...
    @property
    def Layout(self) -> ModuleLayout: ...
    @property
    def MetadataAddress(self) -> UInt64: ...
    @property
    def MetadataImport(self) -> MetadataImport: ...
    @property
    def MetadataLength(self) -> UInt64: ...
    @property
    def Name(self) -> str: ...
    @property
    def Pdb(self) -> PdbInfo: ...
    @property
    def Size(self) -> UInt64: ...
    def GetHashCode(self) -> int: ...
    def GetTypeByName(self, name: str) -> ClrType: ...
    def op_Equality(left: ClrModule, right: ClrModule) -> bool: ...
    def op_Inequality(left: ClrModule, right: ClrModule) -> bool: ...
    def ResolveToken(self, typeDefOrRefToken: int) -> ClrType: ...
    def ToString(self) -> str: ...


class ClrObject:
    def __init__(self, address: UInt64, type: ClrType): ...
    def AsArray(self) -> ClrArray: ...
    def AsException(self) -> ClrException: ...
    def AsRuntimeType(self) -> ClrType: ...
    def AsString(self, maxLength: int) -> str: ...
    def EnumerateReferences(self, carefully: bool, considerDependantHandles: bool) -> Iterable[ClrObject]: ...
    def EnumerateReferencesWithFields(self, carefully: bool, considerDependantHandles: bool) -> Iterable[ClrReference]: ...
    @overload
    def Equals(self, entity: IAddressableTypedEntity) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ClrObject) -> bool: ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def ContainsPointers(self) -> bool: ...
    @property
    def HasComCallableWrapper(self) -> bool: ...
    @property
    def HasRuntimeCallableWrapper(self) -> bool: ...
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsBoxedValue(self) -> bool: ...
    @property
    def IsComClassFactory(self) -> bool: ...
    @property
    def IsException(self) -> bool: ...
    @property
    def IsFree(self) -> bool: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def IsRuntimeType(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Size(self) -> UInt64: ...
    @property
    def SyncBlock(self) -> SyncBlock: ...
    @property
    def Type(self) -> ClrType: ...
    def GetComCallableWrapper(self) -> ComCallableWrapper: ...
    def GetHashCode(self) -> int: ...
    def GetRuntimeCallableWrapper(self) -> RuntimeCallableWrapper: ...
    def op_Equality(left: ClrObject, right: ClrObject) -> bool: ...
    def op_Explicit(obj: ClrObject) -> str: ...
    def op_Implicit(clrObject: ClrObject) -> UInt64: ...
    def op_Inequality(left: ClrObject, right: ClrObject) -> bool: ...
    def ReadBoxedValue(self) -> T: ...
    def ReadField(self, fieldName: str) -> T: ...
    def ReadObjectField(self, fieldName: str) -> ClrObject: ...
    def ReadStringField(self, fieldName: str, maxLength: int) -> str: ...
    def ReadValueTypeField(self, fieldName: str) -> ClrValueType: ...
    def ToString(self) -> str: ...


class ClrReference:
    def CreateFromDependentHandle(reference: ClrObject) -> ClrReference: ...
    def CreateFromFieldOrArray(reference: ClrObject, containingType: ClrType, offset: int) -> ClrReference: ...
    @property
    def Field(self) -> ClrInstanceField: ...
    @property
    def InnerField(self) -> Nullable: ...
    @property
    def IsArrayElement(self) -> bool: ...
    @property
    def IsDependentHandle(self) -> bool: ...
    @property
    def IsField(self) -> bool: ...
    @property
    def Object(self) -> ClrObject: ...
    @property
    def Offset(self) -> int: ...
    def ToString(self) -> str: ...


class ClrRootKind:
    #None = 0
    FinalizerQueue = 1
    StrongHandle = 2
    PinnedHandle = 3
    Stack = 4
    RefCountedHandle = 5
    AsyncPinnedHandle = 7
    SizedRefHandle = 8


class ClrRuntime:
    def Dispose(self) -> None: ...
    def EnumerateHandles(self) -> Iterable[ClrHandle]: ...
    def EnumerateModules(self) -> Iterable[ClrModule]: ...
    def FlushCachedData(self) -> None: ...
    @property
    def AppDomains(self) -> ImmutableArray: ...
    @property
    def BaseClassLibrary(self) -> ClrModule: ...
    @property
    def ClrInfo(self) -> ClrInfo: ...
    @property
    def DacLibrary(self) -> DacLibrary: ...
    @property
    def DataTarget(self) -> DataTarget: ...
    @property
    def Heap(self) -> ClrHeap: ...
    @property
    def IsThreadSafe(self) -> bool: ...
    @property
    def SharedDomain(self) -> ClrAppDomain: ...
    @property
    def SystemDomain(self) -> ClrAppDomain: ...
    @property
    def Threads(self) -> ImmutableArray: ...
    def GetJitHelperFunctionName(self, address: UInt64) -> str: ...
    def GetMethodByHandle(self, methodHandle: UInt64) -> ClrMethod: ...
    def GetMethodByInstructionPointer(self, ip: UInt64) -> ClrMethod: ...
    def GetTypeByMethodTable(self, methodTable: UInt64) -> ClrType: ...


class ClrSegment:
    def EnumerateObjects(self) -> Iterable[ClrObject]: ...
    @property
    def CommittedMemory(self) -> MemoryRange: ...
    @property
    def End(self) -> UInt64: ...
    @property
    def FirstObjectAddress(self) -> UInt64: ...
    @property
    def Generation0(self) -> MemoryRange: ...
    @property
    def Generation1(self) -> MemoryRange: ...
    @property
    def Generation2(self) -> MemoryRange: ...
    @property
    def Heap(self) -> ClrHeap: ...
    @property
    def IsEphemeralSegment(self) -> bool: ...
    @property
    def IsLargeObjectSegment(self) -> bool: ...
    @property
    def IsPinnedObjectSegment(self) -> bool: ...
    @property
    def Length(self) -> UInt64: ...
    @property
    def LogicalHeap(self) -> int: ...
    @property
    def ObjectRange(self) -> MemoryRange: ...
    @property
    def ReservedMemory(self) -> MemoryRange: ...
    @property
    def Start(self) -> UInt64: ...
    def GetGeneration(self, obj: UInt64) -> int: ...
    def GetNextObjectAddress(self, obj: UInt64) -> UInt64: ...
    def GetPreviousObjectAddress(self, obj: UInt64) -> UInt64: ...
    def ToString(self) -> str: ...


class ClrStackFrame:
    @property
    def Context(self) -> ReadOnlySpan: ...
    @property
    def FrameName(self) -> str: ...
    @property
    def InstructionPointer(self) -> UInt64: ...
    @property
    def Kind(self) -> ClrStackFrameKind: ...
    @property
    def Method(self) -> ClrMethod: ...
    @property
    def StackPointer(self) -> UInt64: ...
    @property
    def Thread(self) -> ClrThread: ...


class ClrStackFrameKind:
    ManagedMethod = 0
    Runtime = 1
    Unknown = -1


class ClrStackInteriorRoot:
    def __init__(self, seg: ClrSegment, address: UInt64, objAddr: UInt64, stackFrame: ClrStackFrame, pinned: bool): ...
    def AsObject(self) -> Nullable: ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def IsInterior(self) -> bool: ...
    @property
    def IsPinned(self) -> bool: ...
    @property
    def Object(self) -> ClrObject: ...
    @property
    def ObjectPointer(self) -> UInt64: ...
    @property
    def RootKind(self) -> ClrRootKind: ...
    @property
    def StackFrame(self) -> ClrStackFrame: ...
    def ToString(self) -> str: ...


class ClrStackRoot:
    def __init__(self, address: UInt64, obj: ClrObject, stackFrame: ClrStackFrame, pinned: bool): ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def IsInterior(self) -> bool: ...
    @property
    def IsPinned(self) -> bool: ...
    @property
    def Object(self) -> ClrObject: ...
    @property
    def RootKind(self) -> ClrRootKind: ...
    @property
    def StackFrame(self) -> ClrStackFrame: ...
    def ToString(self) -> str: ...


class ClrStaticField(ClrField):
    def GetAddress(self, appDomain: ClrAppDomain) -> UInt64: ...
    def IsInitialized(self, appDomain: ClrAppDomain) -> bool: ...
    def Read(self, appDomain: ClrAppDomain) -> T: ...
    def ReadObject(self, appDomain: ClrAppDomain) -> ClrObject: ...
    def ReadString(self, appDomain: ClrAppDomain) -> str: ...
    def ReadStruct(self, appDomain: ClrAppDomain) -> ClrValueType: ...


class ClrThread:
    def EnumerateStackRoots(self) -> Iterable[IClrStackRoot]: ...
    def EnumerateStackTrace(self, includeContext: bool) -> Iterable[ClrStackFrame]: ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def CurrentAppDomain(self) -> ClrAppDomain: ...
    @property
    def CurrentException(self) -> ClrException: ...
    @property
    def GCMode(self) -> GCMode: ...
    @property
    def IsAborted(self) -> bool: ...
    @property
    def IsAbortRequested(self) -> bool: ...
    @property
    def IsAlive(self) -> bool: ...
    @property
    def IsBackground(self) -> bool: ...
    @property
    def IsCoInitialized(self) -> bool: ...
    @property
    def IsDebugSuspended(self) -> bool: ...
    @property
    def IsFinalizer(self) -> bool: ...
    @property
    def IsGCSuspendPending(self) -> bool: ...
    @property
    def IsMTA(self) -> bool: ...
    @property
    def IsSTA(self) -> bool: ...
    @property
    def IsUnstarted(self) -> bool: ...
    @property
    def IsUserSuspended(self) -> bool: ...
    @property
    def LockCount(self) -> UInt32: ...
    @property
    def ManagedThreadId(self) -> int: ...
    @property
    def OSThreadId(self) -> UInt32: ...
    @property
    def Runtime(self) -> ClrRuntime: ...
    @property
    def StackBase(self) -> UInt64: ...
    @property
    def StackLimit(self) -> UInt64: ...


class ClrType:
    def AsEnum(self) -> ClrEnum: ...
    def EnumerateGenericParameters(self) -> Iterable[ClrGenericParameter]: ...
    def EnumerateInterfaces(self) -> Iterable[ClrInterface]: ...
    @overload
    def Equals(self, other: ClrType) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AssemblyLoadContextAddress(self) -> UInt64: ...
    @property
    def AssemblyLoadContextHandle(self) -> UInt64: ...
    @property
    def BaseType(self) -> ClrType: ...
    @property
    def ClrObjectHelpers(self) -> IClrObjectHelpers: ...
    @property
    def ComponentSize(self) -> int: ...
    @property
    def ComponentType(self) -> ClrType: ...
    @property
    def ContainsPointers(self) -> bool: ...
    @property
    def ElementType(self) -> ClrElementType: ...
    @property
    def Fields(self) -> ImmutableArray: ...
    @property
    def GCDesc(self) -> GCDesc: ...
    @property
    def Heap(self) -> ClrHeap: ...
    @property
    def IsAbstract(self) -> bool: ...
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsCollectible(self) -> bool: ...
    @property
    def IsEnum(self) -> bool: ...
    @property
    def IsException(self) -> bool: ...
    @property
    def IsFinalizable(self) -> bool: ...
    @property
    def IsFree(self) -> bool: ...
    @property
    def IsInterface(self) -> bool: ...
    @property
    def IsInternal(self) -> bool: ...
    @property
    def IsObjectReference(self) -> bool: ...
    @property
    def IsPointer(self) -> bool: ...
    @property
    def IsPrimitive(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def IsProtected(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsSealed(self) -> bool: ...
    @property
    def IsShared(self) -> bool: ...
    @property
    def IsString(self) -> bool: ...
    @property
    def IsValueType(self) -> bool: ...
    @property
    def LoaderAllocatorHandle(self) -> UInt64: ...
    @property
    def MetadataToken(self) -> int: ...
    @property
    def Methods(self) -> ImmutableArray: ...
    @property
    def MethodTable(self) -> UInt64: ...
    @property
    def Module(self) -> ClrModule: ...
    @property
    def Name(self) -> str: ...
    @property
    def StaticFields(self) -> ImmutableArray: ...
    @property
    def StaticSize(self) -> int: ...
    def GetArrayElementAddress(self, objRef: UInt64, index: int) -> UInt64: ...
    def GetFieldByName(self, name: str) -> ClrInstanceField: ...
    def GetHashCode(self) -> int: ...
    def GetStaticFieldByName(self, name: str) -> ClrStaticField: ...
    def IsFinalizeSuppressed(self, obj: UInt64) -> bool: ...
    def op_Equality(left: ClrType, right: ClrType) -> bool: ...
    def op_Inequality(left: ClrType, right: ClrType) -> bool: ...
    def ReadArrayElements(self, objRef: UInt64, start: int, count: int) -> Set(T): ...
    def ToString(self) -> str: ...


class ClrValueType:
    @overload
    def Equals(self, other: IAddressableTypedEntity) -> bool: ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Type(self) -> ClrType: ...
    def ReadField(self, fieldName: str) -> T: ...
    def ReadObjectField(self, fieldName: str) -> ClrObject: ...
    def ReadStringField(self, fieldName: str, maxLength: int) -> str: ...
    def ReadValueTypeField(self, fieldName: str) -> ClrValueType: ...


class ComCallableWrapper:
    def __init__(self, data: ICcwData): ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def Handle(self) -> UInt64: ...
    @property
    def Interfaces(self) -> ImmutableArray: ...
    @property
    def IUnknown(self) -> UInt64: ...
    @property
    def Object(self) -> UInt64: ...
    @property
    def RefCount(self) -> int: ...


class ComInterfaceData:
    def __init__(self, type: ClrType, pointer: UInt64): ...
    @property
    def InterfacePointer(self) -> UInt64: ...
    @property
    def Type(self) -> ClrType: ...


class CustomDataTarget:
    def __init__(self, reader: IDataReader): ...
    def Dispose(self) -> None: ...
    @property
    def BinaryLocator(self) -> IBinaryLocator: ...
    @property
    def CacheOptions(self) -> CacheOptions: ...
    @property
    def DataReader(self) -> IDataReader: ...
    @property
    def DefaultSymbolPath(self) -> str: ...
    @BinaryLocator.setter
    def BinaryLocator(self, value: IBinaryLocator) -> None: ...
    @CacheOptions.setter
    def CacheOptions(self, value: CacheOptions) -> None: ...
    @DataReader.setter
    def DataReader(self, value: IDataReader) -> None: ...
    @DefaultSymbolPath.setter
    def DefaultSymbolPath(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class DacInfo:
    def __init__(self, localPath: str, specificName: str, agnosticName: str, targetArch: Architecture, filesize: int, timestamp: int, version: VersionInfo, clrBuildId: ImmutableArray): ...
    @property
    def ClrBuildId(self) -> ImmutableArray: ...
    @property
    def IndexFileSize(self) -> int: ...
    @property
    def IndexTimeStamp(self) -> int: ...
    @property
    def LocalDacPath(self) -> str: ...
    @property
    def PlatformAgnosticFileName(self) -> str: ...
    @property
    def PlatformSpecificFileName(self) -> str: ...
    @property
    def TargetArchitecture(self) -> Architecture: ...
    @property
    def Version(self) -> VersionInfo: ...


class DacLibrary:
    @overload
    def __init__(self, dataTarget: DataTarget, pClrDataProcess: IntPtr): ...
    @overload
    def __init__(self, dataTarget: DataTarget, dacPath: str): ...
    @overload
    def __init__(self, dataTarget: DataTarget, dacPath: str, runtimeBaseAddress: UInt64): ...
    def Dispose(self) -> None: ...
    @property
    def DacPrivateInterface(self) -> ClrDataProcess: ...
    @property
    def OwningLibrary(self) -> RefCountedFreeLibrary: ...
    @property
    def SOSDacInterface(self) -> SOSDac: ...
    @property
    def SOSDacInterface6(self) -> SOSDac6: ...
    @property
    def SOSDacInterface8(self) -> SOSDac8: ...
    def GetInterface(self, riid: Guid) -> Tuple[T, Guid]: ...


class DataTarget:
    def __init__(self, customTarget: CustomDataTarget): ...
    def AttachToProcess(processId: int, suspend: bool) -> DataTarget: ...
    def CreateFromDbgEng(pDebugClient: IntPtr) -> DataTarget: ...
    def CreateSnapshotAndAttach(processId: int) -> DataTarget: ...
    def Dispose(self) -> None: ...
    def EnumerateModules(self) -> Iterable[ModuleInfo]: ...
    @property
    def BinaryLocator(self) -> IBinaryLocator: ...
    @property
    def CacheOptions(self) -> CacheOptions: ...
    @property
    def ClrVersions(self) -> ImmutableArray: ...
    @property
    def DataReader(self) -> IDataReader: ...
    @property
    def PlatformFunctions() -> PlatformFunctions: ...
    @overload
    def LoadDump(filePath: str, cacheOptions: CacheOptions) -> DataTarget: ...
    @overload
    def LoadDump(displayName: str, stream: Stream, cacheOptions: CacheOptions, leaveOpen: bool) -> DataTarget: ...
    @BinaryLocator.setter
    def BinaryLocator(self, value: IBinaryLocator) -> None: ...


class Float80:
    pass


class GCDesc:
    def __init__(self, data: Set(Byte)): ...
    @property
    def IsEmpty(self) -> bool: ...
    def WalkObject(self, buffer: Set(Byte), size: int) -> Iterable[ValueTuple]: ...


class GCMode:
    Cooperative = 0
    Preemptive = 1


class GCRoot:
    def __init__(self, heap: ClrHeap): ...
    def add_ProgressUpdated(self, value: GCRootProgressUpdatedEventHandler) -> None: ...
    def EnumerateAllPaths(self, source: UInt64, target: UInt64, returnOnlyFullyUniquePaths: bool, cancellationToken: CancellationToken) -> Iterable[LinkedList]: ...
    @overload
    def EnumerateGCRoots(self, target: UInt64, cancellationToken: CancellationToken) -> Iterable[GCRootPath]: ...
    @overload
    def EnumerateGCRoots(self, target: UInt64, returnOnlyFullyUniquePaths: bool, cancellationToken: CancellationToken) -> Iterable[GCRootPath]: ...
    @overload
    def EnumerateGCRoots(self, target: UInt64, returnOnlyFullyUniquePaths: bool, maxDegreeOfParallelism: int, cancellationToken: CancellationToken) -> Iterable[GCRootPath]: ...
    @overload
    def EnumerateGCRoots(self, target: UInt64, returnOnlyFullyUniquePaths: bool, maxDegreeOfParallelism: int, roots: Iterable[IClrRoot], cancellationToken: CancellationToken) -> Iterable[GCRootPath]: ...
    def FindSinglePath(self, source: UInt64, target: UInt64, cancellationToken: CancellationToken) -> LinkedList: ...
    @property
    def Heap(self) -> ClrHeap: ...
    def remove_ProgressUpdated(self, value: GCRootProgressUpdatedEventHandler) -> None: ...


class GCRootPath:
    def __init__(self, root: IClrRoot, path: ImmutableArray): ...
    @property
    def Path(self) -> ImmutableArray: ...
    @property
    def Root(self) -> IClrRoot: ...
    def ToString(self) -> str: ...


class GCRootProgressUpdatedEventHandler:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, source: GCRoot, processed: Int64, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, source: GCRoot, processed: Int64) -> None: ...


class HotColdRegions:
    def __init__(self, hotStart: UInt64, hotSize: UInt32, coldStart: UInt64, coldSize: UInt32): ...
    @property
    def ColdSize(self) -> UInt32: ...
    @property
    def ColdStart(self) -> UInt64: ...
    @property
    def HotSize(self) -> UInt32: ...
    @property
    def HotStart(self) -> UInt64: ...


class IAddressableTypedEntity:
    @property
    def Address(self) -> UInt64: ...
    @property
    def Type(self) -> ClrType: ...
    def ReadField(self, fieldName: str) -> T: ...
    def ReadObjectField(self, fieldName: str) -> ClrObject: ...
    def ReadStringField(self, fieldName: str, maxLength: int) -> str: ...
    def ReadValueTypeField(self, fieldName: str) -> ClrValueType: ...


class IAddressableTypedEntityExtensions:
    def GetFieldFrom(entity: IAddressableTypedEntity, fieldName: str) -> IAddressableTypedEntity: ...


class IBinaryLocator:
    @overload
    def FindBinary(self, fileName: str, buildId: ImmutableArray, checkProperties: bool) -> str: ...
    @overload
    def FindBinary(self, fileName: str, buildTimeStamp: int, imageSize: int, checkProperties: bool) -> str: ...
    @overload
    def FindBinaryAsync(self, fileName: str, buildId: ImmutableArray, checkProperties: bool) -> Task: ...
    @overload
    def FindBinaryAsync(self, fileName: str, buildTimeStamp: int, imageSize: int, checkProperties: bool) -> Task: ...


class IClrRoot:
    @property
    def Address(self) -> UInt64: ...
    @property
    def IsInterior(self) -> bool: ...
    @property
    def IsPinned(self) -> bool: ...
    @property
    def Object(self) -> ClrObject: ...
    @property
    def RootKind(self) -> ClrRootKind: ...


class IClrStackRoot:
    @property
    def StackFrame(self) -> ClrStackFrame: ...


class IDataReader:
    def EnumerateModules(self) -> Iterable[ModuleInfo]: ...
    def FlushCachedData(self) -> None: ...
    @property
    def Architecture(self) -> Architecture: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsThreadSafe(self) -> bool: ...
    @property
    def ProcessId(self) -> int: ...
    @property
    def TargetPlatform(self) -> OSPlatform: ...
    def GetBuildId(self, baseAddress: UInt64) -> ImmutableArray: ...
    def GetThreadContext(self, threadID: UInt32, contextFlags: UInt32, context: Span) -> bool: ...
    def GetVersionInfo(self, baseAddress: UInt64) -> Tuple[bool, VersionInfo]: ...


class IExportReader:
    def TryGetSymbolAddress(self, baseAddress: UInt64, name: str) -> Tuple[bool, UInt64]: ...


class ILInfo:
    def __init__(self, address: UInt64, len: int, flags: UInt32, localVarSignatureToken: UInt32): ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def Flags(self) -> UInt32: ...
    @property
    def Length(self) -> int: ...
    @property
    def LocalVarSignatureToken(self) -> UInt32: ...


class ILToNativeMap:
    def ToString(self) -> str: ...


class IMemoryReader:
    @property
    def PointerSize(self) -> int: ...
    @overload
    def Read(self, address: UInt64) -> T: ...
    @overload
    def Read(self, address: UInt64, buffer: Span) -> int: ...
    @overload
    def Read(self, address: UInt64) -> Tuple[bool, T]: ...
    @overload
    def ReadPointer(self, address: UInt64) -> UInt64: ...
    @overload
    def ReadPointer(self, address: UInt64) -> Tuple[bool, UInt64]: ...


class M128A:
    def Clear(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: M128A) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: M128A, right: M128A) -> bool: ...
    def op_Inequality(left: M128A, right: M128A) -> bool: ...


class MemoryRange:
    def __init__(self, start: UInt64, end: UInt64): ...
    def CompareTo(self, address: UInt64) -> int: ...
    @overload
    def Contains(self, address: UInt64) -> bool: ...
    @overload
    def Contains(self, other: MemoryRange) -> bool: ...
    def CreateFromLength(start: UInt64, length: UInt64) -> MemoryRange: ...
    @property
    def End(self) -> UInt64: ...
    @property
    def Length(self) -> UInt64: ...
    @property
    def Start(self) -> UInt64: ...
    def Overlaps(self, other: MemoryRange) -> bool: ...
    def ToString(self) -> str: ...


class MethodCompilationType:
    #None = 0
    Jit = 1
    Ngen = 2


class ModuleInfo:
    @overload
    def __init__(self, imageBase: UInt64, fileName: str, isVirtual: bool, indexFileSize: int, indexTimeStamp: int, buildId: ImmutableArray): ...
    @overload
    def __init__(self, reader: IDataReader, imageBase: UInt64, fileName: str, isVirtual: bool, indexFileSize: int, indexTimeStamp: int, buildId: ImmutableArray): ...
    @property
    def BuildId(self) -> ImmutableArray: ...
    @property
    def DataReader(self) -> IDataReader: ...
    @property
    def DataTarget(self) -> DataTarget: ...
    @property
    def FileName(self) -> str: ...
    @property
    def ImageBase(self) -> UInt64: ...
    @property
    def IndexFileSize(self) -> int: ...
    @property
    def IndexTimeStamp(self) -> int: ...
    @property
    def IsManaged(self) -> bool: ...
    @property
    def Pdb(self) -> PdbInfo: ...
    @property
    def Version(self) -> VersionInfo: ...
    def GetPEImage(self) -> PEImage: ...
    def ToString(self) -> str: ...


class ModuleLayout:
    Unknown = 0
    Mapped = 1
    Flat = 2
    Loaded = 4


class ObjectSet:
    def __init__(self, heap: ClrHeap): ...
    def Add(self, obj: UInt64) -> bool: ...
    def Clear(self) -> None: ...
    def Contains(self, obj: UInt64) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Heap(self) -> ClrHeap: ...
    @property
    def MinObjSize(self) -> int: ...
    def Remove(self, obj: UInt64) -> bool: ...


class PdbInfo:
    def __init__(self, path: str, guid: Guid, rev: int): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: PdbInfo) -> bool: ...
    @property
    def Guid(self) -> Guid: ...
    @property
    def Path(self) -> str: ...
    @property
    def Revision(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: PdbInfo, right: PdbInfo) -> bool: ...
    def op_Inequality(left: PdbInfo, right: PdbInfo) -> bool: ...
    def ToString(self) -> str: ...


class PlatformFunctions:
    def FreeLibrary(self, handle: IntPtr) -> bool: ...
    def GetLibraryExport(self, handle: IntPtr, name: str) -> IntPtr: ...
    def IsEqualFileVersion(self, file: str, version: VersionInfo) -> bool: ...
    def LoadLibrary(self, libraryPath: str) -> IntPtr: ...
    def TryGetWow64(self, proc: IntPtr) -> Tuple[bool, bool]: ...


class RefCountedFreeLibrary:
    def __init__(self, library: IntPtr): ...
    def AddRef(self) -> int: ...
    def Release(self) -> int: ...


class RegisterAttribute:
    def __init__(self, registerType: RegisterType): ...
    @property
    def Name(self) -> str: ...
    @property
    def RegisterType(self) -> RegisterType: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class RegisterType:
    General = 1
    Control = 2
    Segments = 3
    FloatingPoint = 4
    Debug = 5
    TypeMask = 15
    ProgramCounter = 16
    StackPointer = 32
    FramePointer = 64


class RuntimeCallableWrapper:
    def __init__(self, runtime: ClrRuntime, data: IRcwData): ...
    @property
    def Address(self) -> UInt64: ...
    @property
    def CreatorThread(self) -> ClrThread: ...
    @property
    def Interfaces(self) -> ImmutableArray: ...
    @property
    def IsDisconnected(self) -> bool: ...
    @property
    def IUnknown(self) -> UInt64: ...
    @property
    def Object(self) -> UInt64: ...
    @property
    def RefCount(self) -> int: ...
    @property
    def VTablePointer(self) -> UInt64: ...
    @property
    def WinRTObject(self) -> UInt64: ...


class RuntimeInfo:
    pass


class StringCaching:
    #None = 0
    Cache = 1
    Intern = 2


class SyncBlock:
    def __init__(self, obj: UInt64): ...
    @property
    def HoldingThreadAddress(self) -> UInt64: ...
    @property
    def IsComCallWrapper(self) -> bool: ...
    @property
    def IsComClassFactory(self) -> bool: ...
    @property
    def IsMonitorHeld(self) -> bool: ...
    @property
    def IsRuntimeCallWrapper(self) -> bool: ...
    @property
    def Object(self) -> UInt64: ...
    @property
    def RecursionCount(self) -> int: ...
    @property
    def WaitingThreadCount(self) -> int: ...


class SyncBlockComFlags:
    #None = 0
    ComCallableWrapper = 1
    RuntimeCallableWrapper = 2
    ComClassFactory = 4


class VectorRegisterArea:
    def __init__(self, other: VectorRegisterArea): ...
    def Clear(self) -> None: ...


class VersionInfo:
    def __init__(self, major: int, minor: int, revision: int, patch: int): ...
    def CompareTo(self, other: VersionInfo) -> int: ...
    @overload
    def Equals(self, other: VersionInfo) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Major(self) -> int: ...
    @property
    def Minor(self) -> int: ...
    @property
    def Patch(self) -> int: ...
    @property
    def Revision(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: VersionInfo, right: VersionInfo) -> bool: ...
    def op_GreaterThan(left: VersionInfo, right: VersionInfo) -> bool: ...
    def op_GreaterThanOrEqual(left: VersionInfo, right: VersionInfo) -> bool: ...
    def op_Inequality(left: VersionInfo, right: VersionInfo) -> bool: ...
    def op_LessThan(left: VersionInfo, right: VersionInfo) -> bool: ...
    def op_LessThanOrEqual(left: VersionInfo, right: VersionInfo) -> bool: ...
    def ToString(self) -> str: ...


class X86Context:
    @property
    def Size() -> int: ...


class XmmSaveArea:
    pass
