from typing import Tuple, Set, Iterable, List


class CallableCOMWrapper(COMHelper):
    def AddRef(self) -> int: ...
    def Dispose(self) -> None: ...
    def QueryInterface(self, riid: Guid) -> Tuple[IntPtr, Guid]: ...
    def Release(self) -> int: ...
    def SuppressRelease(self) -> None: ...


class COMCallableIUnknown(COMHelper):
    def __init__(self): ...
    def AddInterface(self, guid: Guid, validate: bool) -> VTableBuilder: ...
    def AddRef(self) -> int: ...
    @property
    def IUnknown(self) -> IUnknownVTable: ...
    @property
    def IUnknownObject(self) -> IntPtr: ...
    def Release(self) -> int: ...


class COMHelper:
    def QueryInterface(pUnk: IntPtr, riid: Guid) -> Tuple[HResult, Guid, IntPtr]: ...
    def Release(pUnk: IntPtr) -> int: ...


class ElfAuxvType:
    Null = 0
    Base = 7


class ElfCoreFile:
    @overload
    def __init__(self, coredump: str): ...
    @overload
    def __init__(self, stream: Stream, leaveOpen: bool): ...
    def Dispose(self) -> None: ...
    def EnumeratePRStatus(self) -> Iterable[IElfPRStatus]: ...
    @property
    def ElfFile(self) -> ElfFile: ...
    @property
    def LoadedImages(self) -> ImmutableDictionary: ...
    def GetAuxvValue(self, type: ElfAuxvType) -> UInt64: ...
    def ReadMemory(self, address: UInt64, buffer: Span) -> int: ...


class ElfFile:
    @overload
    def __init__(self, filename: str): ...
    @overload
    def __init__(self, stream: Stream, leaveOpen: bool): ...
    @overload
    def __init__(self, stream: Stream, position: UInt64, leaveOpen: bool, isVirtual: bool): ...
    def Dispose(self) -> None: ...
    @property
    def BuildId(self) -> ImmutableArray: ...
    @property
    def Header(self) -> IElfHeader: ...
    @property
    def Notes(self) -> ImmutableArray: ...
    @property
    def ProgramHeaders(self) -> ImmutableArray: ...
    def TryGetExportSymbol(self, symbolName: str) -> Tuple[bool, UInt64]: ...


class ElfHeaderType:
    Relocatable = 1
    Executable = 2
    Shared = 3
    Core = 4


class ElfLoadedImage:
    def AsStream(self) -> Stream: ...
    @property
    def BaseAddress(self) -> UInt64: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Size(self) -> UInt64: ...
    def Open(self) -> ElfFile: ...
    def ToString(self) -> str: ...


class ElfMachine:
    EM_NONE = 0
    EM_386 = 3
    EM_PARISC = 15
    EM_SPARC32PLUS = 18
    EM_PPC = 20
    EM_PPC64 = 21
    EM_S390 = 22
    EM_SPU = 23
    EM_ARM = 40
    EM_SH = 42
    EM_SPARCV9 = 43
    EM_H8_300 = 46
    EM_IA_64 = 50
    EM_X86_64 = 62
    EM_CRIS = 76
    EM_V850 = 87
    EM_M32R = 88
    EM_MN10300 = 89
    EM_BLACKFIN = 106
    EM_AARCH64 = 183
    EM_AVR32 = 6317
    EM_FRV = 21569


class ElfNote:
    @property
    def ContentSize(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> ElfNoteType: ...
    @overload
    def ReadContents(self, position: UInt64) -> T: ...
    @overload
    def ReadContents(self, position: UInt64, buffer: Span) -> int: ...


class ElfNoteType:
    PrpsStatus = 1
    PrpsFpreg = 2
    PrpsInfo = 3
    TASKSTRUCT = 4
    Aux = 6
    File = 1179208773


class ElfProgramHeader:
    @property
    def FileOffset(self) -> UInt64: ...
    @property
    def FileSize(self) -> UInt64: ...
    @property
    def IsExecutable(self) -> bool: ...
    @property
    def IsWritable(self) -> bool: ...
    @property
    def Type(self) -> ElfProgramHeaderType: ...
    @property
    def VirtualAddress(self) -> UInt64: ...
    @property
    def VirtualSize(self) -> UInt64: ...


class ElfProgramHeaderType:
    Null = 0
    Load = 1
    Dynamic = 2
    Interp = 3
    Note = 4
    Shlib = 5
    Phdr = 6


class FileVersionInfo:
    @property
    def Comments(self) -> str: ...
    @property
    def FileVersion(self) -> str: ...
    @property
    def VersionInfo(self) -> VersionInfo: ...
    def ToString(self) -> str: ...


class HResult:
    def __init__(self, hr: int): ...
    @property
    def IsOK(self) -> bool: ...
    @property
    def Value(self) -> int: ...
    @overload
    def op_Implicit(hr: int) -> HResult: ...
    @overload
    def op_Implicit(hr: HResult) -> int: ...
    @overload
    def op_Implicit(hr: HResult) -> bool: ...
    @Value.setter
    def Value(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class IElfHeader:
    @property
    def Architecture(self) -> ElfMachine: ...
    @property
    def Is64Bit(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ProgramHeaderCount(self) -> UInt16: ...
    @property
    def ProgramHeaderEntrySize(self) -> UInt16: ...
    @property
    def ProgramHeaderOffset(self) -> UInt64: ...
    @property
    def SectionHeaderCount(self) -> UInt16: ...
    @property
    def SectionHeaderEntrySize(self) -> UInt16: ...
    @property
    def SectionHeaderOffset(self) -> UInt64: ...
    @property
    def SectionHeaderStringIndex(self) -> UInt16: ...
    @property
    def Type(self) -> ElfHeaderType: ...


class IElfPRStatus:
    def CopyRegistersAsContext(self, context: Span) -> bool: ...
    @property
    def ProcessId(self) -> UInt32: ...
    @property
    def ThreadId(self) -> UInt32: ...


class IUnknownVTable:
    pass


class PEImage:
    @overload
    def __init__(self, stream: Stream, leaveOpen: bool): ...
    @overload
    def __init__(self, stream: Stream, leaveOpen: bool, isVirtual: bool): ...
    def Dispose(self) -> None: ...
    @property
    def CoffHeader(self) -> CoffHeader: ...
    @property
    def CorHeader(self) -> CorHeader: ...
    @property
    def DefaultPdb(self) -> PdbInfo: ...
    @property
    def IndexFileSize(self) -> int: ...
    @property
    def IndexTimeStamp(self) -> int: ...
    @property
    def IsManaged(self) -> bool: ...
    @property
    def IsPE64(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Pdbs(self) -> ImmutableArray: ...
    @property
    def PEHeader(self) -> PEHeader: ...
    @property
    def Reader(self) -> PEReader: ...
    @property
    def Resources(self) -> ResourceEntry: ...
    @property
    def Sections(self) -> ImmutableArray: ...
    def GetFileVersionInfo(self) -> FileVersionInfo: ...
    def Read(self, virtualAddress: int, dest: Span) -> int: ...
    def RvaToOffset(self, virtualAddress: int) -> int: ...
    def TryGetExportSymbol(self, symbolName: str) -> Tuple[bool, UInt64]: ...


class ResourceEntry:
    @property
    def ChildCount(self) -> int: ...
    @property
    def Children(self) -> ImmutableArray: ...
    @property
    def Image(self) -> PEImage: ...
    @property
    def IsLeaf(self) -> bool: ...
    @property
    def Item(self, name: str) -> ResourceEntry: ...
    @property
    def MaxChildrenCount() -> int: ...
    @property
    def MaxNameLength() -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> ResourceEntry: ...
    @property
    def Size(self) -> int: ...
    @overload
    def GetData(self, span: Span) -> int: ...
    @overload
    def GetData(self, offset: int) -> T: ...
    @MaxChildrenCount.setter
    def MaxChildrenCount(value: int) -> None: ...
    @MaxNameLength.setter
    def MaxNameLength(value: int) -> None: ...
    def ToString(self) -> str: ...


class SigParser:
    @overload
    def __init__(self, rhs: SigParser): ...
    @overload
    def __init__(self, sig: IntPtr, len: int): ...
    def GetCallingConvInfo(self) -> Tuple[bool, int]: ...
    def GetData(self) -> Tuple[bool, int]: ...
    @overload
    def GetElemType(self) -> Tuple[bool, ClrElementType]: ...
    @overload
    def GetElemType(self) -> Tuple[bool, int]: ...
    def GetToken(self) -> Tuple[bool, int]: ...
    def IsNull(self) -> bool: ...
    def PeekCallingConvInfo(self) -> Tuple[bool, int]: ...
    @overload
    def PeekElemType(self) -> Tuple[bool, ClrElementType]: ...
    @overload
    def PeekElemType(self) -> Tuple[bool, int]: ...
    def SkipCustomModifiers(self) -> bool: ...
    def SkipExactlyOne(self) -> bool: ...


class VTableBuilder:
    def AddMethod(self, func: Delegate, validate: bool) -> None: ...
    def Complete(self) -> IntPtr: ...
