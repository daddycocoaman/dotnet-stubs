from typing import Tuple, Set, Iterable, List


class ConnectableDevice:
    @overload
    def Connect(self) -> IDevice: ...
    @overload
    def Connect(self, alwaysUsePrimaryConnectivity: bool) -> IDevice: ...
    @property
    def Id(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def UapVersion(self) -> Version: ...
    @property
    def Version(self) -> Version: ...
    def GetHashCode(self) -> int: ...
    def IdNative(self) -> str: ...
    def IsEmulator(self) -> bool: ...
    def IsLegacyEmulator(self) -> bool: ...
    def ToString(self) -> str: ...


class MultiTargetingConnectivity:
    @overload
    def __init__(self, localeId: int): ...
    @overload
    def __init__(self, localeId: int, noLegacyDevices: bool): ...
    def GetConnectableDevice(self, deviceId: str) -> ConnectableDevice: ...
    @overload
    def GetConnectableDevices(self, targetOsVersion: Version) -> Collection: ...
    @overload
    def GetConnectableDevices(self, noLegacyDevices: bool) -> Collection: ...
    @overload
    def GetConnectableDevices(self, targetOsVersion: Version, targetUapVersion: Version) -> Collection: ...
    def GetDefaultDeviceId(self) -> str: ...


class OS:
    pass
