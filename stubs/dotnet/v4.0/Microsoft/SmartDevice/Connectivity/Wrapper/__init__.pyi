from typing import Tuple, Set, Iterable, List


class ConnectivityWrapper12:
    def CreateConnectedDeviceInstance(device: Device) -> IDevice: ...
    def CreateConnectedDeviceInstanceFromId(localeId: int, deviceId: str) -> IDevice: ...
    def GetDefaultDeviceId(localeId: int) -> str: ...
    def GetDevice(localeId: int, deviceId: str) -> Device: ...
    def GetDevices(localeId: int, bNoLegacyDevices: bool) -> Collection: ...
    def GetLegacyDefaultDeviceId(localeId: int) -> str: ...
    def GetPlatformInfo(device: Device) -> PlatformInfo: ...
    def IsValidDevice(localeId: int, deviceId: str) -> bool: ...


class DeviceObject:
    def __init__(self, device: Device, isPrimaryTargetVersion: bool): ...
    def Activate(self) -> None: ...
    def Disconnect(self) -> None: ...
    @property
    def IsPrimaryTargetVersion(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetApplication(self, productId: Guid) -> IRemoteApplication: ...
    def GetEndPoints(self, servicePort: int) -> Tuple[str, str, int]: ...
    def GetFileDeployer(self) -> IFileDeployer: ...
    def GetInstalledApplications(self) -> Collection: ...
    def GetRemoteAgent(self, packageId: str) -> IRemoteAgent: ...
    def GetSystemInfo(self) -> ISystemInfo: ...
    def InstallApplication(self, productId: Guid, instanceId: Guid, applicationGenre: str, iconPath: str, xapPackage: str) -> IRemoteApplication: ...
    def IsApplicationInstalled(self, productId: Guid) -> bool: ...


class DevicePacketStreamObject:
    def Close(self) -> None: ...
    def CreatePacket(self) -> IPacket: ...
    @property
    def Buffering(self) -> bool: ...
    def IsConnected(self) -> bool: ...
    def IsPacketAvailable(self) -> bool: ...
    def Read(self) -> IPacket: ...
    def Write(self, packet: IPacket) -> None: ...


class FileDeployerObject:
    def DownloadPackage(self, packageId: str) -> None: ...
    @overload
    def ReceiveFile(self, sourceDeviceFileName: str, destinationDesktopFileName: str) -> None: ...
    @overload
    def ReceiveFile(self, sourceDeviceFileName: str, destinationDesktopFileName: str, overwrite: bool) -> None: ...
    @overload
    def SendFile(self, sourceDesktopFileName: str, destinationDeviceFileName: str) -> None: ...
    @overload
    def SendFile(self, sourceDesktopFileName: str, destinationDeviceFileName: str, overwrite: bool, register: bool) -> None: ...


class PacketObject:
    def __init__(self, packet: Packet): ...
    @property
    def Count(self) -> int: ...
    def IsEndOfPacket(self) -> bool: ...
    def ReadBool(self) -> bool: ...
    def ReadByte(self) -> Byte: ...
    def ReadBytes(self) -> Set(Byte): ...
    def ReadChar(self) -> Char: ...
    def ReadInt32(self) -> int: ...
    def ReadString(self) -> str: ...
    def Reset(self) -> None: ...
    def WriteBool(self, value: bool) -> None: ...
    def WriteByte(self, value: Byte) -> None: ...
    def WriteBytes(self, value: Set(Byte)) -> None: ...
    def WriteChar(self, value: Char) -> None: ...
    def WriteInt32(self, value: int) -> None: ...
    def WriteString(self, value: str) -> None: ...


class RemoteAgentObject:
    def CreatePacketStream(self, serviceId: str) -> IDevicePacketStream: ...
    def Start(self, arguments: str) -> None: ...


class RemoteApplicationObject:
    @property
    def InstanceID(self) -> Guid: ...
    @property
    def ProductID(self) -> Guid: ...
    @overload
    def GetIsolatedStore(self) -> IRemoteIsolatedStorageFile: ...
    @overload
    def GetIsolatedStore(self, isoStoreRoot: str) -> IRemoteIsolatedStorageFile: ...
    def IsRunning(self) -> bool: ...
    @overload
    def Launch(self) -> None: ...
    @overload
    def Launch(self, serviceInfo: str) -> None: ...
    def TerminateRunningInstances(self) -> None: ...
    def Uninstall(self) -> None: ...
    def UpdateApplication(self, applicationGenre: str, iconPath: str, xapPackage: str) -> None: ...
    def UpdateInstalledFile(self, fileNameRelPath: str, srcFilePath: str) -> bool: ...
    def UpdateInstalledFiles(self, fileList: Set(str), xapDeviceRelativePaths: Set(str)) -> int: ...
    def UpdateInstalledFilesInfo(self, fileList: Set(str), xapDeviceRelativePaths: Set(str)) -> None: ...


class RemoteFileInfoObject:
    def __init__(self, remoteFileInfo: RemoteFileInfo): ...
    @property
    def FileAttribute(self) -> FileAttributes: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Name(self) -> str: ...
    def IsDirectory(self) -> bool: ...
    @FileAttribute.setter
    def FileAttribute(self, value: FileAttributes) -> None: ...


class RemoteIsolatedStorageFileObject:
    def CreateDirectory(self, targetDeviceDirPath: str) -> None: ...
    def DeleteDirectory(self, targetDeviceDirPath: str) -> None: ...
    def DeleteFile(self, targetDeviceFilePath: str) -> None: ...
    def DirectoryExists(self, targetDeviceDirPath: str) -> bool: ...
    def FileExists(self, targetDeviceFilePath: str) -> bool: ...
    def GetDirectoryListing(self, searchPattern: str) -> List: ...
    def ReceiveFile(self, sourceDeviceFilePath: str, targetDesktopFilePath: str, createNew: bool) -> None: ...
    def SendFile(self, sourceDesktopFilePath: str, targetDeviceFilePath: str, createNew: bool) -> None: ...


class SystemInfoObject:
    def __init__(self, systemInfo: SystemInfo): ...
    @property
    def AvailPhys(self) -> int: ...
    @property
    def AvailVirtual(self) -> int: ...
    @property
    def InstructionSet(self) -> str: ...
    @property
    def NumberOfProcessors(self) -> int: ...
    @property
    def OSBuildNo(self) -> int: ...
    @property
    def OSMajor(self) -> int: ...
    @property
    def OSMinor(self) -> int: ...
    @property
    def ProcessorArchitecture(self) -> str: ...
    @property
    def TotalPhys(self) -> int: ...
    @property
    def TotalVirtual(self) -> int: ...
