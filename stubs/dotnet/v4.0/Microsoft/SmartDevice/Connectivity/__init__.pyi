from typing import Tuple, Set, Iterable, List


class AppNotInstalledException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...


class DatastoreConfiguration:
    def __init__(self): ...
    @property
    def AdditionalConfigurationFolder(self) -> str: ...
    @property
    def ConfigurationCacheFolder(self) -> str: ...
    @property
    def ConfigurationFolder(self) -> str: ...
    @property
    def LocaleId(self) -> int: ...
    @property
    def SirepClientManifest(self) -> str: ...
    @property
    def VisualStudioInstallationFolder(self) -> str: ...
    def GetKey(self) -> str: ...
    @AdditionalConfigurationFolder.setter
    def AdditionalConfigurationFolder(self, value: str) -> None: ...
    @ConfigurationCacheFolder.setter
    def ConfigurationCacheFolder(self, value: str) -> None: ...
    @ConfigurationFolder.setter
    def ConfigurationFolder(self, value: str) -> None: ...
    @LocaleId.setter
    def LocaleId(self, value: int) -> None: ...
    @SirepClientManifest.setter
    def SirepClientManifest(self, value: str) -> None: ...
    @VisualStudioInstallationFolder.setter
    def VisualStudioInstallationFolder(self, value: str) -> None: ...


class DatastoreException(SmartDeviceException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, hresult: int): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class DatastoreManager:
    def __init__(self, localeId: int): ...
    def add_DatastoreRefreshEvent(self, value: EventHandler) -> None: ...
    @property
    def Datastore(self) -> ICcDatastore: ...
    @property
    def LocaleId(self) -> int: ...
    def Get(localeId: int) -> DatastoreManager: ...
    def GetPlatform(self, platformId: ObjectId) -> Platform: ...
    def GetPlatforms(self) -> Collection: ...
    def remove_DatastoreRefreshEvent(self, value: EventHandler) -> None: ...
    @LocaleId.setter
    def LocaleId(self, value: int) -> None: ...


class DataType:
    InvalidType = 0
    ByteType = 1
    Int32Type = 2
    CharType = 3
    BoolType = 4
    ByteArrayType = 5
    StringType = 6


class DefaultDatastoreConfigurationProvider:
    def __init__(self): ...


class Device:
    def Activate(self) -> None: ...
    def Connect(self) -> None: ...
    def Disconnect(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Id(self) -> ObjectId: ...
    @property
    def Name(self) -> str: ...
    @property
    def Platform(self) -> Platform: ...
    def GetApplication(self, productId: Guid) -> RemoteApplication: ...
    def GetEndPoints(self, servicePort: int) -> Tuple[str, str, int]: ...
    def GetFileDeployer(self) -> FileDeployer: ...
    def GetHashCode(self) -> int: ...
    def GetInstalledApplications(self) -> Collection: ...
    def GetPlatformInfo(self) -> PlatformInfo: ...
    def GetProperty(self, propertyName: str) -> str: ...
    def GetRemoteAgent(self, packageId: ObjectId) -> RemoteAgent: ...
    def GetSystemInfo(self) -> SystemInfo: ...
    def GetUapVersionInfo(self) -> UapVersionInfo: ...
    def InstallApplication(self, productId: Guid, instanceId: Guid, applicationGenre: str, iconPath: str, xapPackage: str) -> RemoteApplication: ...
    def IsApplicationInstalled(self, productId: Guid) -> bool: ...
    def IsConnected(self) -> bool: ...
    def IsEmulator(self) -> bool: ...
    def ToString(self) -> str: ...


class DeviceNotConnectedException(SmartDeviceException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, ex: COMException): ...
    @overload
    def __init__(self, message: str, hresult: int): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class DeviceNotFoundException(DatastoreException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class DevicePacketStream:
    def Close(self) -> None: ...
    @property
    def Buffering(self) -> bool: ...
    @property
    def MaxPacketSize() -> int: ...
    def IsConnected(self) -> bool: ...
    def IsPacketAvailable(self) -> bool: ...
    def Read(self) -> Packet: ...
    @Buffering.setter
    def Buffering(self, value: bool) -> None: ...
    def Write(self, packet: Packet) -> None: ...


class FileDeployer:
    def DownloadPackage(self, packageId: ObjectId) -> None: ...
    @overload
    def ReceiveFile(self, sourceDeviceFileName: str, destinationDesktopFileName: str) -> None: ...
    @overload
    def ReceiveFile(self, sourceDeviceFileName: str, destinationDesktopFileName: str, overwrite: bool) -> None: ...
    @overload
    def SendFile(self, sourceDesktopFileName: str, destinationDeviceFileName: str) -> None: ...
    @overload
    def SendFile(self, sourceDesktopFileName: str, destinationDeviceFileName: str, overwrite: bool, register: bool) -> None: ...


class IDatastoreConfigurationProvider:
    def GetDatastoreConfiguration(self, localeId: int) -> DatastoreConfiguration: ...


class InstructionSetType:
    Unknown = 0
    X86 = 65537
    MipsII = 16908288
    MipsIIfp = 16908289
    MipsIV = 16973824
    MipsIVfp = 16973825
    Sh4 = 67239937
    Armv4 = 83951616
    Armv4fp = 83951617
    Armv4i = 84017152
    Armv4ifp = 84017153
    Armv4t = 84082688
    Armv4tfp = 84082689


class ObjectId:
    @overload
    def __init__(self, id: str): ...
    @overload
    def __init__(self, guid: Guid): ...
    @overload
    def __init__(self, objId: ObjectId): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(objA: Object, objB: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    @overload
    def op_Equality(objA: ObjectId, objB: ObjectId) -> bool: ...
    @overload
    def op_Equality(objId: ObjectId, strId: str) -> bool: ...
    @overload
    def op_Inequality(objA: ObjectId, objB: ObjectId) -> bool: ...
    @overload
    def op_Inequality(objId: ObjectId, strId: str) -> bool: ...
    def ToString(self) -> str: ...


class Packet:
    def __init__(self): ...
    @property
    def Count(self) -> int: ...
    def IsEndOfPacket(self) -> bool: ...
    def ReadBool(self) -> bool: ...
    def ReadByte(self) -> Byte: ...
    def ReadBytes(self) -> Set(Byte): ...
    def ReadChar(self) -> Char: ...
    def ReadDataType(self) -> DataType: ...
    def ReadInt32(self) -> int: ...
    def ReadString(self) -> str: ...
    def Reset(self) -> None: ...
    def WriteBool(self, value: bool) -> None: ...
    def WriteByte(self, value: Byte) -> None: ...
    def WriteBytes(self, value: Set(Byte)) -> None: ...
    def WriteChar(self, value: Char) -> None: ...
    def WriteInt32(self, value: int) -> None: ...
    def WriteString(self, value: str) -> None: ...


class Platform:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Id(self) -> ObjectId: ...
    @property
    def Name(self) -> str: ...
    def GetDefaultDeviceId(self) -> ObjectId: ...
    def GetDevice(self, deviceId: ObjectId) -> Device: ...
    @overload
    def GetDevices(self) -> Collection: ...
    @overload
    def GetDevices(self, fWantPseudoDevices: bool) -> Collection: ...
    def GetHashCode(self) -> int: ...
    def GetLegacyDefaultDeviceId(self) -> ObjectId: ...
    def GetOSVersion(self) -> Version: ...
    def GetProperty(self, propertyName: str) -> str: ...
    def ToString(self) -> str: ...


class PlatformInfo:
    @property
    def InstructionSet(self) -> InstructionSetType: ...
    @property
    def OSMajor(self) -> int: ...
    @property
    def OSMinor(self) -> int: ...
    @InstructionSet.setter
    def InstructionSet(self, value: InstructionSetType) -> None: ...
    @OSMajor.setter
    def OSMajor(self, value: int) -> None: ...
    @OSMinor.setter
    def OSMinor(self, value: int) -> None: ...


class PlatformNotFoundException(DatastoreException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ProcessorArchitectureType:
    Intel = 0
    Mips = 1
    Alpha = 2
    PowerPC = 3
    ShX = 4
    Arm = 5
    Ia64 = 6
    Alpha64 = 7
    Unknown = 65535


class RemoteAgent:
    def CreatePacketStream(self, serviceId: ObjectId) -> DevicePacketStream: ...
    @property
    def Id(self) -> ObjectId: ...
    def Start(self, arguments: str) -> None: ...


class RemoteApplication:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Genre(self) -> str: ...
    @property
    def InstanceID(self) -> Guid: ...
    @property
    def ProductID(self) -> Guid: ...
    @property
    def Title(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetInstalledFileInfo(self, fileNameRelPath: str) -> RemoteFileInfo: ...
    def GetIsolatedStore(self, isoStoreRoot: str) -> RemoteIsolatedStorageFile: ...
    def IsRunning(self) -> bool: ...
    @overload
    def Launch(self) -> None: ...
    @overload
    def Launch(self, serviceInfo: str) -> None: ...
    def TerminateRunningInstances(self) -> None: ...
    def ToString(self) -> str: ...
    def Uninstall(self) -> None: ...
    def UpdateApplication(self, applicationGenre: str, iconPath: str, xapPackage: str) -> None: ...
    def UpdateInstalledFile(self, fileNameRelPath: str, srcFilePath: str) -> bool: ...
    def UpdateInstalledFiles(self, fileList: Set(str), xapDeviceRelativePaths: Set(str)) -> int: ...
    def UpdateInstalledFilesInfo(self, fileList: Set(str), xapDeviceRelativePaths: Set(str)) -> None: ...


class RemoteFileInfo:
    @property
    def CreationTime(self) -> DateTime: ...
    @property
    def FileAttribute(self) -> FileAttributes: ...
    @property
    def LastAccessTime(self) -> DateTime: ...
    @property
    def LastWriteTime(self) -> DateTime: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Name(self) -> str: ...
    def IsDirectory(self) -> bool: ...
    @CreationTime.setter
    def CreationTime(self, value: DateTime) -> None: ...
    @FileAttribute.setter
    def FileAttribute(self, value: FileAttributes) -> None: ...
    @LastAccessTime.setter
    def LastAccessTime(self, value: DateTime) -> None: ...
    @LastWriteTime.setter
    def LastWriteTime(self, value: DateTime) -> None: ...
    @Length.setter
    def Length(self, value: Int64) -> None: ...


class RemoteIsolatedStorageException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...


class RemoteIsolatedStorageFile:
    def CreateDirectory(self, targetDeviceDirPath: str) -> None: ...
    def DeleteDirectory(self, targetDeviceDirPath: str) -> None: ...
    def DeleteFile(self, targetDeviceFilePath: str) -> None: ...
    def DirectoryExists(self, targetDeviceDirPath: str) -> bool: ...
    def FileExists(self, targetDeviceFilePath: str) -> bool: ...
    def GetDirectoryListing(self, searchPattern: str) -> List: ...
    def ReceiveFile(self, sourceDeviceFilePath: str, targetDesktopFilePath: str, createNew: bool) -> None: ...
    def SendFile(self, sourceDesktopFilePath: str, targetDeviceFilePath: str, createNew: bool) -> None: ...


class RemoteProcess:
    def Close(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetExitCode(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetId(self) -> Int64: ...
    def HasExited(self) -> bool: ...
    def Kill(self) -> None: ...
    def ToString(self) -> str: ...


class SecureStoreException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...


class SmartDeviceException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, hresult: int): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def ErrorCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class SystemInfo:
    @property
    def ACLineStatus(self) -> Byte: ...
    @property
    def AvailPageFile(self) -> int: ...
    @property
    def AvailPhys(self) -> int: ...
    @property
    def AvailVirtual(self) -> int: ...
    @property
    def BackupBatteryFlag(self) -> Byte: ...
    @property
    def BackupBatteryFullLifetime(self) -> int: ...
    @property
    def BackupBatteryLifePercent(self) -> Byte: ...
    @property
    def BackupBatteryLifetime(self) -> int: ...
    @property
    def BatteryFlag(self) -> Byte: ...
    @property
    def BatteryFullLifetime(self) -> int: ...
    @property
    def BatteryLifePercent(self) -> Byte: ...
    @property
    def BatteryLifetime(self) -> int: ...
    @property
    def CurrentTime(self) -> DateTime: ...
    @property
    def InstructionSet(self) -> InstructionSetType: ...
    @property
    def NumberOfProcessors(self) -> int: ...
    @property
    def OSBuildNo(self) -> int: ...
    @property
    def OSMajor(self) -> int: ...
    @property
    def OSMinor(self) -> int: ...
    @property
    def PageSize(self) -> int: ...
    @property
    def ProcessorArchitecture(self) -> ProcessorArchitectureType: ...
    @property
    def SystemDefaultLocaleId(self) -> int: ...
    @property
    def TotalPageFile(self) -> int: ...
    @property
    def TotalPhys(self) -> int: ...
    @property
    def TotalVirtual(self) -> int: ...
    @ACLineStatus.setter
    def ACLineStatus(self, value: Byte) -> None: ...
    @AvailPageFile.setter
    def AvailPageFile(self, value: int) -> None: ...
    @AvailPhys.setter
    def AvailPhys(self, value: int) -> None: ...
    @AvailVirtual.setter
    def AvailVirtual(self, value: int) -> None: ...
    @BackupBatteryFlag.setter
    def BackupBatteryFlag(self, value: Byte) -> None: ...
    @BackupBatteryFullLifetime.setter
    def BackupBatteryFullLifetime(self, value: int) -> None: ...
    @BackupBatteryLifePercent.setter
    def BackupBatteryLifePercent(self, value: Byte) -> None: ...
    @BackupBatteryLifetime.setter
    def BackupBatteryLifetime(self, value: int) -> None: ...
    @BatteryFlag.setter
    def BatteryFlag(self, value: Byte) -> None: ...
    @BatteryFullLifetime.setter
    def BatteryFullLifetime(self, value: int) -> None: ...
    @BatteryLifePercent.setter
    def BatteryLifePercent(self, value: Byte) -> None: ...
    @BatteryLifetime.setter
    def BatteryLifetime(self, value: int) -> None: ...
    @CurrentTime.setter
    def CurrentTime(self, value: DateTime) -> None: ...
    @InstructionSet.setter
    def InstructionSet(self, value: InstructionSetType) -> None: ...
    @NumberOfProcessors.setter
    def NumberOfProcessors(self, value: int) -> None: ...
    @OSBuildNo.setter
    def OSBuildNo(self, value: int) -> None: ...
    @OSMajor.setter
    def OSMajor(self, value: int) -> None: ...
    @OSMinor.setter
    def OSMinor(self, value: int) -> None: ...
    @PageSize.setter
    def PageSize(self, value: int) -> None: ...
    @ProcessorArchitecture.setter
    def ProcessorArchitecture(self, value: ProcessorArchitectureType) -> None: ...
    @SystemDefaultLocaleId.setter
    def SystemDefaultLocaleId(self, value: int) -> None: ...
    @TotalPageFile.setter
    def TotalPageFile(self, value: int) -> None: ...
    @TotalPhys.setter
    def TotalPhys(self, value: int) -> None: ...
    @TotalVirtual.setter
    def TotalVirtual(self, value: int) -> None: ...


class UapVersionInfo:
    @property
    def DeviceClass(self) -> str: ...
    @property
    def Platform(self) -> str: ...
    @property
    def UapVersion(self) -> Version: ...
