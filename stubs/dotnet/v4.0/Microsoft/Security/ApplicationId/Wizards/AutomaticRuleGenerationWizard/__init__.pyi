from typing import Tuple, Set, Iterable, List


class AdministratorPreferences(WizardPage):
    def __init__(self, wizForm: WizardForm): ...
    @property
    def RuleWizard(self) -> RuleGenerationWizard: ...
    @property
    def WorkerThread(self) -> BackgroundWorker: ...
    def IsPathSafe(self, path: str) -> bool: ...
    def OnActivate(self) -> bool: ...
    def OnActivated(self) -> None: ...
    def OnDeactivate(self) -> bool: ...


class BinaryView:
    def __init__(self, items: List, appX: bool, useInstalledAppX: bool, iconList: ImageList): ...


class BrowseDSObjectsDialog:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, computerName: str): ...
    def Dispose(self) -> None: ...
    def GetSelectedAdsPaths(self) -> Set(str): ...
    def GetSelectedNames(self) -> Set(str): ...
    def GetSelectedObjectSids(self) -> Set(Set(Byte)): ...
    def GetSelectedUpnNames(self) -> Set(str): ...
    def ShowDialog(self, owner: IWin32Window, pickerType: PickerTypes, multipleSelect: bool) -> DialogResult: ...
    def ShowPickComputerDialog(self, owner: IWin32Window, multipleSelect: bool) -> DialogResult: ...
    def ShowPickUserDialog(self, owner: IWin32Window, multipleSelect: bool) -> DialogResult: ...


class DirectoryChooser(WizardPage):
    def __init__(self, wizForm: WizardForm): ...
    @property
    def InstallationFolder(self) -> str: ...
    def OnActivated(self) -> None: ...
    def OnDeactivate(self) -> bool: ...
    @InstallationFolder.setter
    def InstallationFolder(self, value: str) -> None: ...


class DynamicSearchableListViewControl:
    def __init__(self): ...
    def AddColumn(self, column: str) -> None: ...
    def AddColumns(self, columns: List) -> None: ...
    def AddListViewItem(self, item: ListViewItem) -> None: ...
    @overload
    def AddRow(self, row: List) -> ListViewItem: ...
    @overload
    def AddRow(self, row: Set(str)) -> ListViewItem: ...
    def Clear(self) -> None: ...
    @property
    def CheckedElements(self) -> List: ...
    @property
    def CheckedItems(self) -> List: ...
    @property
    def ControlHeight(self) -> int: ...
    @property
    def ControlWidth(self) -> int: ...
    @property
    def DefaultFocusControl(self) -> Control: ...
    @property
    def ExplainText(self) -> str: ...
    @property
    def ListView(self) -> ListView: ...
    @property
    def Logo(self) -> Image: ...
    @property
    def SearchText(self) -> str: ...
    @property
    def SearchTextAccessibleName(self) -> str: ...
    @property
    def ShowCheckBoxes(self) -> bool: ...
    @property
    def SmallImageList(self) -> ImageList: ...
    def SearchSubstringInListView(listviewItem: List, searchString: str) -> List: ...
    @ColumnSize.setter
    def ColumnSize(self, value: ColumnHeaderAutoResizeStyle) -> None: ...
    @ControlHeight.setter
    def ControlHeight(self, value: int) -> None: ...
    @ControlWidth.setter
    def ControlWidth(self, value: int) -> None: ...
    @ExplainText.setter
    def ExplainText(self, value: str) -> None: ...
    @Logo.setter
    def Logo(self, value: Image) -> None: ...
    @SearchText.setter
    def SearchText(self, value: str) -> None: ...
    @SearchTextAccessibleName.setter
    def SearchTextAccessibleName(self, value: str) -> None: ...
    @ShowCheckBoxes.setter
    def ShowCheckBoxes(self, value: bool) -> None: ...
    @SmallImageList.setter
    def SmallImageList(self, value: ImageList) -> None: ...
    def SetColumnWidth(self, index: int, width: int) -> None: ...


class ErroneousDirectories:
    def __init__(self, rgenWiz: RuleGenerationWizard): ...


class ListViewColumnSorter:
    def __init__(self): ...
    def Compare(self, x: Object, y: Object) -> int: ...
    @property
    def Order(self) -> SortOrder: ...
    @property
    def SortColumn(self) -> int: ...
    @Order.setter
    def Order(self, value: SortOrder) -> None: ...
    @SortColumn.setter
    def SortColumn(self, value: int) -> None: ...


class PickerTypes:
    Computers = 1
    Users = 2
    Groups = 4
    WellKnownAccounts = 8


class ProgressReporter:
    def __init__(self, adminPreferences: AdministratorPreferences): ...
    @property
    def Cancelled(self) -> bool: ...
    @Cancelled.setter
    def Cancelled(self, value: bool) -> None: ...


class ReviewRules(WizardPage):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, wizForm: WizardForm): ...
    @property
    def FinalGeneratedResult(self) -> RuleGenerationResult: ...
    @property
    def NumHashFiles(self) -> int: ...
    @property
    def NumHashRules(self) -> int: ...
    @property
    def NumPathFiles(self) -> int: ...
    @property
    def NumPathRules(self) -> int: ...
    @property
    def NumPublisherFiles(self) -> int: ...
    @property
    def NumPublisherRules(self) -> int: ...
    @property
    def TotalFiles(self) -> int: ...
    @property
    def TotalRules(self) -> int: ...
    def OnActivate(self) -> bool: ...
    def OnActivated(self) -> None: ...


class RuleGenerationWizard(WizardForm):
    def __init__(self): ...
    @property
    def Filter(self) -> str: ...
    @property
    def RuleBucket(self) -> int: ...
    @property
    def Rules(self) -> ICollection: ...
    @property
    def UseInstalledAppx(self) -> bool: ...
    def OnFinish(self) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @RuleBucket.setter
    def RuleBucket(self, value: int) -> None: ...
    @UseInstalledAppx.setter
    def UseInstalledAppx(self, value: bool) -> None: ...


class RuleView:
    def __init__(self, rules: ICollection, appX: bool): ...
    @property
    def Rules(self) -> ICollection: ...
    def PopulateRuleView(self) -> None: ...
    @Rules.setter
    def Rules(self, value: ICollection) -> None: ...


class UserSelectionTracker:
    def __init__(self, lvItem: ListViewItem): ...
    @property
    def Dirty(self) -> bool: ...
    @property
    def Item(self) -> ListViewItem: ...
    @Dirty.setter
    def Dirty(self, value: bool) -> None: ...
    @Item.setter
    def Item(self, value: ListViewItem) -> None: ...
