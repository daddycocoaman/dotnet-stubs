from typing import Tuple, Set, Iterable, List


class AppLockerPolicyDecision:
    @property
    def FilePath(self) -> str: ...
    @property
    def MatchingRule(self) -> str: ...
    @property
    def PolicyDecision(self) -> PolicyDecision: ...


class AppXPackageCollection:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...


class AppXPackageInfo:
    def __init__(self, publisherName: str, packageName: str, packageVersion: FileVersion, displayName: str, publisherDisplayName: str, iconPath: str): ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IconPath(self) -> str: ...
    @property
    def PackageName(self) -> str: ...
    @property
    def PackageVersion(self) -> FileVersion: ...
    @property
    def PublisherDisplayName(self) -> str: ...
    @property
    def PublisherName(self) -> str: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @IconPath.setter
    def IconPath(self, value: str) -> None: ...
    @PackageName.setter
    def PackageName(self, value: str) -> None: ...
    @PackageVersion.setter
    def PackageVersion(self, value: FileVersion) -> None: ...
    @PublisherDisplayName.setter
    def PublisherDisplayName(self, value: str) -> None: ...
    @PublisherName.setter
    def PublisherName(self, value: str) -> None: ...


class CompileRuleException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, ruleName: str, innerException: Exception): ...


class CreateFileHashException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, filePath: str, innerException: Exception): ...


class CreateFilePublisherException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, filePath: str, innerException: Exception): ...


class DecodeFilePublisherInformationException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, publisherInformation: str, innerException: Exception): ...


class EncodeFilePublisherInformationException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, publisherInformation: str, innerException: Exception): ...


class FileDoesNotExistException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, filePath: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class FileManager:
    def DecodeFilePublisherInformation(publisherInformation: str) -> str: ...
    def EncodeFilePublisherInformation(publisherInformation: str, ignoreWildCharacters: bool) -> str: ...
    def GetFileExtensions(fileType: AppLockerFileType) -> ICollection: ...
    def GetFileHash(filePath: str) -> FileHash: ...
    @overload
    def GetFileInformation(filePath: str) -> FileInformation: ...
    @overload
    def GetFileInformation(filePath: str, collectPublisherInformation: bool, collectHashInformation: bool) -> FileInformation: ...
    @overload
    def GetFilePublisher(filePath: str) -> FilePublisher: ...
    @overload
    def GetFilePublisher(filePath: str, isAppX: bool) -> FilePublisher: ...
    def GetFileRuleCollection(fileType: AppLockerFileType) -> str: ...
    @overload
    def GetFileType(filePath: str) -> AppLockerFileType: ...
    @overload
    def GetFileType(fileInformation: FileInformation) -> AppLockerFileType: ...
    @overload
    def IsFileTypeSupported(fileInformation: FileInformation) -> bool: ...
    @overload
    def IsFileTypeSupported(filePath: str) -> bool: ...
    def NormalizeFilePath(filePath: str) -> str: ...
    def SearchFiles(directory: str, filesTypes: ICollection, recurse: bool) -> Tuple[ICollection, ICollection]: ...
    @overload
    def VerifyFileTypeSupported(fileInformation: FileInformation) -> None: ...
    @overload
    def VerifyFileTypeSupported(filePath: str) -> None: ...


class FrameworkPackageException(CreateFilePublisherException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, filePath: str, innerException: Exception): ...


class GetDomainPolicyException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, ldapPath: str, innerException: Exception): ...


class GetEffectivePolicyException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class GetFileExtensionsException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class GetFileRuleCollectionException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class GetFileTypeException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, filePath: str, innerException: Exception): ...


class GetLocalPolicyException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class GetPublisherDisplayName:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, fileInformation: FileInformation, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> str: ...
    def Invoke(self, fileInformation: FileInformation) -> str: ...


class MissingFileInformationException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, filePath: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class NormalizeFilePathException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, filePath: str, innerException: Exception): ...


class NoRuleTypeWasSpecifiedException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class PolicyDecision:
    Allowed = 0
    AllowedByDefault = 1
    Denied = 2
    DeniedByDefault = 3


class PolicyManagementException:
    pass


class PolicyManager:
    @overload
    def GeneratePolicy(settings: RuleGenerationSettings, files: ICollection) -> AppLockerPolicy: ...
    @overload
    def GeneratePolicy(settings: RuleGenerationSettings, files: ICollection, serviceEnforcementMode: ServiceEnforcementMode, allowWindowsMode: SystemAppAllowMode) -> Tuple[AppLockerPolicy, ICollection]: ...
    def GetDomainPolicy(ldapPath: str) -> AppLockerPolicy: ...
    def GetEffectivePolicy() -> AppLockerPolicy: ...
    def GetLocalPolicy() -> AppLockerPolicy: ...
    def GetPolicy(ldapPath: str) -> AppLockerPolicy: ...
    def IsFileAllowed(policy: AppLockerPolicy, filePath: str, userSid: SecurityIdentifier) -> AppLockerPolicyDecision: ...
    def IsPackageAllowed(policy: AppLockerPolicy, fileInformation: FileInformation, userSid: SecurityIdentifier) -> AppLockerPolicyDecision: ...
    def MergePolicies(policies: ICollection) -> AppLockerPolicy: ...
    def SetDomainPolicy(policy: AppLockerPolicy, ldapPath: str) -> None: ...
    def SetLocalPolicy(policy: AppLockerPolicy) -> None: ...
    def SetPolicy(policy: AppLockerPolicy, ldapPath: str) -> None: ...


class RuleDoesNotExistException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, ruleName: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class RuleGenerationResult:
    @property
    def FileAppXMap(self) -> Dictionary: ...
    @property
    def Files(self) -> ICollection: ...
    @property
    def IgnoredFiles(self) -> ICollection: ...
    @property
    def Rules(self) -> ICollection: ...
    def GetFilesByRule(self, rule: AppLockerRule) -> ICollection: ...
    def GetRuleByFile(self, fileInformation: FileInformation) -> AppLockerRule: ...


class RuleGenerationSettings:
    def __init__(self): ...
    def AddRuleType(self, ruleType: RuleType) -> None: ...
    @property
    def GetPublisherDisplayName(self) -> GetPublisherDisplayName: ...
    @property
    def GroupName(self) -> str: ...
    @property
    def IgnoreMissingFileInformation(self) -> bool: ...
    @property
    def Optimize(self) -> bool: ...
    @property
    def RuleTypes(self) -> ICollection: ...
    @property
    def UserOrGroupSid(self) -> SecurityIdentifier: ...
    @GetPublisherDisplayName.setter
    def GetPublisherDisplayName(self, value: GetPublisherDisplayName) -> None: ...
    @GroupName.setter
    def GroupName(self, value: str) -> None: ...
    @IgnoreMissingFileInformation.setter
    def IgnoreMissingFileInformation(self, value: bool) -> None: ...
    @Optimize.setter
    def Optimize(self, value: bool) -> None: ...
    @UserOrGroupSid.setter
    def UserOrGroupSid(self, value: SecurityIdentifier) -> None: ...
    def SetRuleTypes(self, ruleTypes: ICollection) -> None: ...


class RuleGenerator:
    def IsFileHashRuleApplicable(fileInformation: FileInformation) -> bool: ...
    def IsFilePathRuleApplicable(fileInformation: FileInformation) -> bool: ...
    def IsFilePublisherRuleApplicable(fileInformation: FileInformation) -> bool: ...


class RuleManager:
    def CompileRule(rule: AppLockerRule) -> str: ...
    @overload
    def GenerateRules(settings: RuleGenerationSettings, files: ICollection) -> RuleGenerationResult: ...
    @overload
    def GenerateRules(settings: RuleGenerationSettings, fileInformationMap: Dictionary) -> RuleGenerationResult: ...
    @overload
    def GenerateRules(settings: RuleGenerationSettings, files: ICollection, excludedFiles: ICollection) -> RuleGenerationResult: ...


class RuleType:
    Publisher = 0
    Path = 1
    Hash = 2


class SetDomainPolicyException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, ldapPath: str, innerException: Exception): ...


class SetLocalPolicyException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class TestFileAllowedException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, filePath: str, innerException: Exception): ...


class UnsupportedFileTypeException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, filePath: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
