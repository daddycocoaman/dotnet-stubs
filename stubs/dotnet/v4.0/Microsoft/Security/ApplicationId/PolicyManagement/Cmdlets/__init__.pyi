from typing import Tuple, Set, Iterable, List


class AppLockerEventInformation:
    def __init__(self, fileInformation: FileInformation, policyDecision: PolicyDecision): ...
    @overload
    def Equals(self, other: AppLockerEventInformation) -> bool: ...
    @property
    def Counter(self) -> int: ...
    @property
    def FileHash(self) -> FileHash: ...
    @property
    def FilePath(self) -> FilePath: ...
    @property
    def FilePublisher(self) -> FilePublisher: ...
    @property
    def PolicyDecision(self) -> PolicyDecision: ...
    def GetHashCode(self) -> int: ...
    @Counter.setter
    def Counter(self, value: int) -> None: ...
    @PolicyDecision.setter
    def PolicyDecision(self, value: PolicyDecision) -> None: ...


class AppLockerEventType:
    Allowed = 0
    Denied = 1
    Audited = 2


class CmdletException:
    pass


class DirectoryDoesNotExistException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class FileDoesNotExistException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class GetAppLockerFileInformationCmdlet:
    def __init__(self): ...
    @property
    def Directory(self) -> str: ...
    @property
    def EventLog(self) -> SwitchParameter: ...
    @property
    def EventType(self) -> List: ...
    @property
    def FileType(self) -> List: ...
    @property
    def LogPath(self) -> str: ...
    @property
    def Packages(self) -> List: ...
    @property
    def Path(self) -> List: ...
    @property
    def Recurse(self) -> SwitchParameter: ...
    @property
    def Statistics(self) -> SwitchParameter: ...
    @Directory.setter
    def Directory(self, value: str) -> None: ...
    @EventLog.setter
    def EventLog(self, value: SwitchParameter) -> None: ...
    @EventType.setter
    def EventType(self, value: List) -> None: ...
    @FileType.setter
    def FileType(self, value: List) -> None: ...
    @LogPath.setter
    def LogPath(self, value: str) -> None: ...
    @Packages.setter
    def Packages(self, value: List) -> None: ...
    @Path.setter
    def Path(self, value: List) -> None: ...
    @Recurse.setter
    def Recurse(self, value: SwitchParameter) -> None: ...
    @Statistics.setter
    def Statistics(self, value: SwitchParameter) -> None: ...


class GetAppLockerPolicyCmdlet:
    def __init__(self): ...
    @property
    def Domain(self) -> SwitchParameter: ...
    @property
    def Effective(self) -> SwitchParameter: ...
    @property
    def Ldap(self) -> str: ...
    @property
    def Local(self) -> SwitchParameter: ...
    @property
    def Xml(self) -> SwitchParameter: ...
    @Domain.setter
    def Domain(self, value: SwitchParameter) -> None: ...
    @Effective.setter
    def Effective(self, value: SwitchParameter) -> None: ...
    @Ldap.setter
    def Ldap(self, value: str) -> None: ...
    @Local.setter
    def Local(self, value: SwitchParameter) -> None: ...
    @Xml.setter
    def Xml(self, value: SwitchParameter) -> None: ...


class NewAppLockerPolicyCmdlet:
    def __init__(self): ...
    @property
    def AllowWindows(self) -> SwitchParameter: ...
    @property
    def FileInformation(self) -> List: ...
    @property
    def IgnoreMissingFileInformation(self) -> SwitchParameter: ...
    @property
    def Optimize(self) -> SwitchParameter: ...
    @property
    def RuleNamePrefix(self) -> str: ...
    @property
    def RuleType(self) -> List: ...
    @property
    def ServiceEnforcement(self) -> ServiceEnforcementMode: ...
    @property
    def User(self) -> str: ...
    @property
    def Xml(self) -> SwitchParameter: ...
    @AllowWindows.setter
    def AllowWindows(self, value: SwitchParameter) -> None: ...
    @FileInformation.setter
    def FileInformation(self, value: List) -> None: ...
    @IgnoreMissingFileInformation.setter
    def IgnoreMissingFileInformation(self, value: SwitchParameter) -> None: ...
    @Optimize.setter
    def Optimize(self, value: SwitchParameter) -> None: ...
    @RuleNamePrefix.setter
    def RuleNamePrefix(self, value: str) -> None: ...
    @RuleType.setter
    def RuleType(self, value: List) -> None: ...
    @ServiceEnforcement.setter
    def ServiceEnforcement(self, value: ServiceEnforcementMode) -> None: ...
    @User.setter
    def User(self, value: str) -> None: ...
    @Xml.setter
    def Xml(self, value: SwitchParameter) -> None: ...


class OpeningEventLogException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, logPath: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ParsingEventLogException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parseEvent: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ParsingFilePublisherInformationException(PolicyManagementException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, publisherInformation: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ResolvingDirectoryException(CmdletException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, path: str, innerException: Exception): ...


class ResolvingFileException(CmdletException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, path: str, innerException: Exception): ...


class ResolvingPathException(CmdletException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ResolvingUserException(CmdletException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, user: str, innerException: Exception): ...


class SetAppLockerPolicyCmdlet:
    def __init__(self): ...
    @property
    def Ldap(self) -> str: ...
    @property
    def Merge(self) -> SwitchParameter: ...
    @property
    def PolicyObject(self) -> AppLockerPolicy: ...
    @property
    def XmlPolicy(self) -> str: ...
    @Ldap.setter
    def Ldap(self, value: str) -> None: ...
    @Merge.setter
    def Merge(self, value: SwitchParameter) -> None: ...
    @PolicyObject.setter
    def PolicyObject(self, value: AppLockerPolicy) -> None: ...
    @XmlPolicy.setter
    def XmlPolicy(self, value: str) -> None: ...


class TestAppLockerPolicyCmdlet:
    def __init__(self): ...
    @property
    def Filter(self) -> List: ...
    @property
    def Packages(self) -> List: ...
    @property
    def Path(self) -> List: ...
    @property
    def PolicyObject(self) -> AppLockerPolicy: ...
    @property
    def User(self) -> str: ...
    @property
    def XmlPolicy(self) -> str: ...
    @Filter.setter
    def Filter(self, value: List) -> None: ...
    @Packages.setter
    def Packages(self, value: List) -> None: ...
    @Path.setter
    def Path(self, value: List) -> None: ...
    @PolicyObject.setter
    def PolicyObject(self, value: AppLockerPolicy) -> None: ...
    @User.setter
    def User(self, value: str) -> None: ...
    @XmlPolicy.setter
    def XmlPolicy(self, value: str) -> None: ...
