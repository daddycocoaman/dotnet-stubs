from typing import Tuple, Set, Iterable, List


class Document:
    def __init__(self): ...
    def CreateNode(self, nodeName: str) -> Node: ...
    @property
    def RootNode(self) -> Node: ...
    @property
    def Xml(self) -> str: ...
    def Load(self, filePath: str) -> None: ...
    def LoadXml(self, xml: str) -> None: ...
    def Save(self, filePath: str) -> None: ...
    @RootNode.setter
    def RootNode(self, value: Node) -> None: ...
    def Validate(xml: str, xsdFilePath: str, stopOnFirstError: bool) -> SchemaValidationResult: ...


class Node:
    @overload
    def CreateAttribute(self, name: str, value: bool) -> None: ...
    @overload
    def CreateAttribute(self, name: str, value: Int64) -> None: ...
    @overload
    def CreateAttribute(self, name: str, value: float) -> None: ...
    @overload
    def CreateAttribute(self, name: str, value: Guid) -> None: ...
    @overload
    def CreateAttribute(self, name: str, value: str) -> None: ...
    def CreateChild(self, nodeName: str) -> Node: ...
    @property
    def Childs(self) -> NodeCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> Node: ...
    @property
    def Xml(self) -> str: ...
    def GetSpecificChild(self, name: str) -> Node: ...
    def GetSpecificChilds(self, name: str) -> NodeCollection: ...
    def HasAttribute(self, name: str) -> bool: ...
    def HasSpecificChild(self, name: str) -> bool: ...
    def ParseBooleanAttribute(self, name: str) -> bool: ...
    def ParseBooleanContent(self) -> bool: ...
    def ParseDecimalNumberAttribute(self, name: str) -> float: ...
    def ParseDecimalNumberContent(self) -> float: ...
    def ParseGuidAttribute(self, name: str) -> Guid: ...
    def ParseGuidContent(self) -> Guid: ...
    def ParseNumberAttribute(self, name: str) -> Int64: ...
    def ParseNumberContent(self) -> Int64: ...
    def ParseStringAttribute(self, name: str) -> str: ...
    def ParseStringContent(self) -> str: ...
    def QueryNode(self, xmlPath: str) -> Node: ...
    def QueryNodes(self, xmlPath: str) -> NodeCollection: ...
    @overload
    def SetContent(self, value: str) -> None: ...
    @overload
    def SetContent(self, value: Guid) -> None: ...
    @overload
    def SetContent(self, value: float) -> None: ...
    @overload
    def SetContent(self, value: Int64) -> None: ...
    @overload
    def SetContent(self, value: bool) -> None: ...


class NodeCollection:
    def __init__(self): ...
    def Add(self, node: Node) -> None: ...
    def Find(self, name: str) -> NodeCollection: ...
    def FindFirst(self, name: str) -> Node: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SchemaValidationResult:
    @overload
    def __init__(self, xmlValid: bool): ...
    @overload
    def __init__(self, xmlValid: bool, errorMessages: ICollection): ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def ErrorMessages(self) -> ICollection: ...
    @property
    def XmlValid(self) -> bool: ...


class XmlAttributeDoesNotExistException(XmlHelperException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class XmlHelperException:
    pass


class XmlNodeDoesNotExistException(XmlHelperException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
