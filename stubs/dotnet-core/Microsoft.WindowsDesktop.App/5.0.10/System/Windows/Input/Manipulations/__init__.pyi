from typing import Tuple, Set, Iterable, List


class InertiaExpansionBehavior2D(InertiaParameters2D):
    def __init__(self): ...
    @property
    def DesiredDeceleration(self) -> Single: ...
    @property
    def DesiredExpansionX(self) -> Single: ...
    @property
    def DesiredExpansionY(self) -> Single: ...
    @property
    def InitialRadius(self) -> Single: ...
    @property
    def InitialVelocityX(self) -> Single: ...
    @property
    def InitialVelocityY(self) -> Single: ...
    @DesiredDeceleration.setter
    def DesiredDeceleration(self, value: Single) -> None: ...
    @DesiredExpansionX.setter
    def DesiredExpansionX(self, value: Single) -> None: ...
    @DesiredExpansionY.setter
    def DesiredExpansionY(self, value: Single) -> None: ...
    @InitialRadius.setter
    def InitialRadius(self, value: Single) -> None: ...
    @InitialVelocityX.setter
    def InitialVelocityX(self, value: Single) -> None: ...
    @InitialVelocityY.setter
    def InitialVelocityY(self, value: Single) -> None: ...


class InertiaParameters2D(Object):
    pass


class InertiaProcessor2D(Object):
    def __init__(self): ...
    def add_Completed(self, value: EventHandler) -> None: ...
    def add_Delta(self, value: EventHandler) -> None: ...
    def Complete(self, timestamp: Int64) -> None: ...
    @property
    def ExpansionBehavior(self) -> InertiaExpansionBehavior2D: ...
    @property
    def InitialOriginX(self) -> Single: ...
    @property
    def InitialOriginY(self) -> Single: ...
    @property
    def IsRunning(self) -> bool: ...
    @property
    def RotationBehavior(self) -> InertiaRotationBehavior2D: ...
    @property
    def TranslationBehavior(self) -> InertiaTranslationBehavior2D: ...
    def Process(self, timestamp: Int64) -> bool: ...
    def remove_Completed(self, value: EventHandler) -> None: ...
    def remove_Delta(self, value: EventHandler) -> None: ...
    @ExpansionBehavior.setter
    def ExpansionBehavior(self, value: InertiaExpansionBehavior2D) -> None: ...
    @InitialOriginX.setter
    def InitialOriginX(self, value: Single) -> None: ...
    @InitialOriginY.setter
    def InitialOriginY(self, value: Single) -> None: ...
    @RotationBehavior.setter
    def RotationBehavior(self, value: InertiaRotationBehavior2D) -> None: ...
    @TranslationBehavior.setter
    def TranslationBehavior(self, value: InertiaTranslationBehavior2D) -> None: ...
    def SetParameters(self, parameters: InertiaParameters2D) -> None: ...


class InertiaRotationBehavior2D(InertiaParameters2D):
    def __init__(self): ...
    @property
    def DesiredDeceleration(self) -> Single: ...
    @property
    def DesiredRotation(self) -> Single: ...
    @property
    def InitialVelocity(self) -> Single: ...
    @DesiredDeceleration.setter
    def DesiredDeceleration(self, value: Single) -> None: ...
    @DesiredRotation.setter
    def DesiredRotation(self, value: Single) -> None: ...
    @InitialVelocity.setter
    def InitialVelocity(self, value: Single) -> None: ...


class InertiaTranslationBehavior2D(InertiaParameters2D):
    def __init__(self): ...
    @property
    def DesiredDeceleration(self) -> Single: ...
    @property
    def DesiredDisplacement(self) -> Single: ...
    @property
    def InitialVelocityX(self) -> Single: ...
    @property
    def InitialVelocityY(self) -> Single: ...
    @DesiredDeceleration.setter
    def DesiredDeceleration(self, value: Single) -> None: ...
    @DesiredDisplacement.setter
    def DesiredDisplacement(self, value: Single) -> None: ...
    @InitialVelocityX.setter
    def InitialVelocityX(self, value: Single) -> None: ...
    @InitialVelocityY.setter
    def InitialVelocityY(self, value: Single) -> None: ...


class Manipulation2DCompletedEventArgs(EventArgs):
    @property
    def OriginX(self) -> Single: ...
    @property
    def OriginY(self) -> Single: ...
    @property
    def Total(self) -> ManipulationDelta2D: ...
    @property
    def Velocities(self) -> ManipulationVelocities2D: ...


class Manipulation2DDeltaEventArgs(EventArgs):
    @property
    def Cumulative(self) -> ManipulationDelta2D: ...
    @property
    def Delta(self) -> ManipulationDelta2D: ...
    @property
    def OriginX(self) -> Single: ...
    @property
    def OriginY(self) -> Single: ...
    @property
    def Velocities(self) -> ManipulationVelocities2D: ...


class Manipulation2DStartedEventArgs(EventArgs):
    @property
    def OriginX(self) -> Single: ...
    @property
    def OriginY(self) -> Single: ...


class ManipulationDelta2D(Object):
    @property
    def ExpansionX(self) -> Single: ...
    @property
    def ExpansionY(self) -> Single: ...
    @property
    def Rotation(self) -> Single: ...
    @property
    def ScaleX(self) -> Single: ...
    @property
    def ScaleY(self) -> Single: ...
    @property
    def TranslationX(self) -> Single: ...
    @property
    def TranslationY(self) -> Single: ...


class ManipulationParameters2D(Object):
    pass


class ManipulationPivot2D(ManipulationParameters2D):
    def __init__(self): ...
    @property
    def Radius(self) -> Single: ...
    @property
    def X(self) -> Single: ...
    @property
    def Y(self) -> Single: ...
    @Radius.setter
    def Radius(self, value: Single) -> None: ...
    @X.setter
    def X(self, value: Single) -> None: ...
    @Y.setter
    def Y(self, value: Single) -> None: ...


class ManipulationProcessor2D(Object):
    @overload
    def __init__(self, supportedManipulations: Manipulations2D): ...
    @overload
    def __init__(self, supportedManipulations: Manipulations2D, pivot: ManipulationPivot2D): ...
    def add_Completed(self, value: EventHandler) -> None: ...
    def add_Delta(self, value: EventHandler) -> None: ...
    def add_Started(self, value: EventHandler) -> None: ...
    def CompleteManipulation(self, timestamp: Int64) -> None: ...
    @property
    def MinimumScaleRotateRadius(self) -> Single: ...
    @property
    def Pivot(self) -> ManipulationPivot2D: ...
    @property
    def SupportedManipulations(self) -> Manipulations2D: ...
    def ProcessManipulators(self, timestamp: Int64, manipulators: Iterable[Manipulator2D]) -> None: ...
    def remove_Completed(self, value: EventHandler) -> None: ...
    def remove_Delta(self, value: EventHandler) -> None: ...
    def remove_Started(self, value: EventHandler) -> None: ...
    @MinimumScaleRotateRadius.setter
    def MinimumScaleRotateRadius(self, value: Single) -> None: ...
    @Pivot.setter
    def Pivot(self, value: ManipulationPivot2D) -> None: ...
    @SupportedManipulations.setter
    def SupportedManipulations(self, value: Manipulations2D) -> None: ...
    def SetParameters(self, parameters: ManipulationParameters2D) -> None: ...


class Manipulations2D:
    #None = 0
    TranslateX = 1
    TranslateY = 2
    Translate = 3
    Scale = 4
    Rotate = 8
    All = 15


class ManipulationVelocities2D(Object):
    @property
    def AngularVelocity(self) -> Single: ...
    @property
    def ExpansionVelocityX(self) -> Single: ...
    @property
    def ExpansionVelocityY(self) -> Single: ...
    @property
    def LinearVelocityX(self) -> Single: ...
    @property
    def LinearVelocityY(self) -> Single: ...


class Manipulator2D(ValueType):
    def __init__(self, id: int, x: Single, y: Single): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Id(self) -> int: ...
    @property
    def X(self) -> Single: ...
    @property
    def Y(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(manipulator1: Manipulator2D, manipulator2: Manipulator2D) -> bool: ...
    def op_Inequality(manipulator1: Manipulator2D, manipulator2: Manipulator2D) -> bool: ...
    @Id.setter
    def Id(self, value: int) -> None: ...
    @X.setter
    def X(self, value: Single) -> None: ...
    @Y.setter
    def Y(self, value: Single) -> None: ...
