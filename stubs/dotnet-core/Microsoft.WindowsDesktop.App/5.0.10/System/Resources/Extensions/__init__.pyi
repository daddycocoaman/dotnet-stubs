from typing import Tuple, Set, Iterable, List


class DeserializingResourceReader(Object):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetEnumerator(self) -> IDictionaryEnumerator: ...


class PreserializedResourceWriter(Object):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    def AddActivatorResource(self, name: str, value: Stream, typeName: str, closeAfterWrite: bool) -> None: ...
    def AddBinaryFormattedResource(self, name: str, value: Set(Byte), typeName: str) -> None: ...
    @overload
    def AddResource(self, name: str, value: str) -> None: ...
    @overload
    def AddResource(self, name: str, value: Object) -> None: ...
    @overload
    def AddResource(self, name: str, value: Set(Byte)) -> None: ...
    @overload
    def AddResource(self, name: str, value: Stream, closeAfterWrite: bool) -> None: ...
    @overload
    def AddResource(self, name: str, value: str, typeName: str) -> None: ...
    def AddTypeConverterResource(self, name: str, value: Set(Byte), typeName: str) -> None: ...
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    def Generate(self) -> None: ...
