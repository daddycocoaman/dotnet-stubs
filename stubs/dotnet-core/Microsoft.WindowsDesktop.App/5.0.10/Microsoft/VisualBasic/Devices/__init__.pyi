from typing import Tuple, Set, Iterable, List


class Audio:
    def __init__(self): ...
    @overload
    def Play(self, location: str) -> None: ...
    @overload
    def Play(self, location: str, playMode: AudioPlayMode) -> None: ...
    @overload
    def Play(self, data: Set(Byte), playMode: AudioPlayMode) -> None: ...
    @overload
    def Play(self, stream: Stream, playMode: AudioPlayMode) -> None: ...
    def PlaySystemSound(self, systemSound: SystemSound) -> None: ...
    def Stop(self) -> None: ...


class Clock:
    def __init__(self): ...
    @property
    def GmtTime(self) -> DateTime: ...
    @property
    def LocalTime(self) -> DateTime: ...
    @property
    def TickCount(self) -> int: ...


class Computer(ServerComputer):
    def __init__(self): ...
    @property
    def Audio(self) -> Audio: ...
    @property
    def Clipboard(self) -> ClipboardProxy: ...
    @property
    def Keyboard(self) -> Keyboard: ...
    @property
    def Mouse(self) -> Mouse: ...
    @property
    def Screen(self) -> Screen: ...


class ComputerInfo:
    def __init__(self): ...
    @property
    def AvailablePhysicalMemory(self) -> UInt64: ...
    @property
    def AvailableVirtualMemory(self) -> UInt64: ...
    @property
    def InstalledUICulture(self) -> CultureInfo: ...
    @property
    def OSFullName(self) -> str: ...
    @property
    def OSPlatform(self) -> str: ...
    @property
    def OSVersion(self) -> str: ...
    @property
    def TotalPhysicalMemory(self) -> UInt64: ...
    @property
    def TotalVirtualMemory(self) -> UInt64: ...


class Keyboard:
    def __init__(self): ...
    @property
    def AltKeyDown(self) -> bool: ...
    @property
    def CapsLock(self) -> bool: ...
    @property
    def CtrlKeyDown(self) -> bool: ...
    @property
    def NumLock(self) -> bool: ...
    @property
    def ScrollLock(self) -> bool: ...
    @property
    def ShiftKeyDown(self) -> bool: ...
    @overload
    def SendKeys(self, keys: str) -> None: ...
    @overload
    def SendKeys(self, keys: str, wait: bool) -> None: ...


class Mouse:
    def __init__(self): ...
    @property
    def ButtonsSwapped(self) -> bool: ...
    @property
    def WheelExists(self) -> bool: ...
    @property
    def WheelScrollLines(self) -> int: ...


class Network:
    def __init__(self): ...
    def add_NetworkAvailabilityChanged(self, handler: NetworkAvailableEventHandler) -> None: ...
    @overload
    def DownloadFile(self, address: Uri, destinationFileName: str) -> None: ...
    @overload
    def DownloadFile(self, address: str, destinationFileName: str) -> None: ...
    @overload
    def DownloadFile(self, address: Uri, destinationFileName: str, userName: str, password: str) -> None: ...
    @overload
    def DownloadFile(self, address: str, destinationFileName: str, userName: str, password: str) -> None: ...
    @overload
    def DownloadFile(self, address: Uri, destinationFileName: str, networkCredentials: ICredentials, showUI: bool, connectionTimeout: int, overwrite: bool) -> None: ...
    @overload
    def DownloadFile(self, address: str, destinationFileName: str, userName: str, password: str, showUI: bool, connectionTimeout: int, overwrite: bool) -> None: ...
    @overload
    def DownloadFile(self, address: Uri, destinationFileName: str, userName: str, password: str, showUI: bool, connectionTimeout: int, overwrite: bool) -> None: ...
    @overload
    def DownloadFile(self, address: Uri, destinationFileName: str, networkCredentials: ICredentials, showUI: bool, connectionTimeout: int, overwrite: bool, onUserCancel: UICancelOption) -> None: ...
    @overload
    def DownloadFile(self, address: str, destinationFileName: str, userName: str, password: str, showUI: bool, connectionTimeout: int, overwrite: bool, onUserCancel: UICancelOption) -> None: ...
    @overload
    def DownloadFile(self, address: Uri, destinationFileName: str, userName: str, password: str, showUI: bool, connectionTimeout: int, overwrite: bool, onUserCancel: UICancelOption) -> None: ...
    @property
    def IsAvailable(self) -> bool: ...
    @overload
    def Ping(self, address: Uri) -> bool: ...
    @overload
    def Ping(self, hostNameOrAddress: str) -> bool: ...
    @overload
    def Ping(self, hostNameOrAddress: str, timeout: int) -> bool: ...
    @overload
    def Ping(self, address: Uri, timeout: int) -> bool: ...
    def remove_NetworkAvailabilityChanged(self, handler: NetworkAvailableEventHandler) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: str) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: Uri) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: str, userName: str, password: str) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: Uri, userName: str, password: str) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: Uri, networkCredentials: ICredentials, showUI: bool, connectionTimeout: int) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: str, userName: str, password: str, showUI: bool, connectionTimeout: int) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: Uri, userName: str, password: str, showUI: bool, connectionTimeout: int) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: Uri, networkCredentials: ICredentials, showUI: bool, connectionTimeout: int, onUserCancel: UICancelOption) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: str, userName: str, password: str, showUI: bool, connectionTimeout: int, onUserCancel: UICancelOption) -> None: ...
    @overload
    def UploadFile(self, sourceFileName: str, address: Uri, userName: str, password: str, showUI: bool, connectionTimeout: int, onUserCancel: UICancelOption) -> None: ...


class NetworkAvailableEventArgs:
    def __init__(self, networkAvailable: bool): ...
    @property
    def IsNetworkAvailable(self) -> bool: ...


class NetworkAvailableEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: NetworkAvailableEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: NetworkAvailableEventArgs) -> None: ...


class ServerComputer:
    def __init__(self): ...
    @property
    def Clock(self) -> Clock: ...
    @property
    def FileSystem(self) -> FileSystemProxy: ...
    @property
    def Info(self) -> ComputerInfo: ...
    @property
    def Name(self) -> str: ...
    @property
    def Network(self) -> Network: ...
    @property
    def Registry(self) -> RegistryProxy: ...
