__all__ = ['Automation','VisualStyles']
from typing import Tuple, Set, Iterable, List


class FileDialogCustomPlace(Object):
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, knownFolderGuid: Guid): ...
    @property
    def KnownFolderGuid(self) -> Guid: ...
    @property
    def Path(self) -> str: ...
    @KnownFolderGuid.setter
    def KnownFolderGuid(self, value: Guid) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class FileDialogCustomPlacesCollection:
    def __init__(self): ...
    @overload
    def Add(self, path: str) -> None: ...
    @overload
    def Add(self, knownFolderGuid: Guid) -> None: ...


class HighDpiMode:
    DpiUnaware = 0
    SystemAware = 1
    PerMonitor = 2
    PerMonitorV2 = 3
    DpiUnawareGdiScaled = 4


class Message(ValueType):
    def Create(hWnd: IntPtr, msg: int, wparam: IntPtr, lparam: IntPtr) -> Message: ...
    def Equals(self, o: Object) -> bool: ...
    @property
    def HWnd(self) -> IntPtr: ...
    @property
    def LParam(self) -> IntPtr: ...
    @property
    def Msg(self) -> int: ...
    @property
    def Result(self) -> IntPtr: ...
    @property
    def WParam(self) -> IntPtr: ...
    def GetHashCode(self) -> int: ...
    def GetLParam(self, cls: Type) -> Object: ...
    def op_Equality(a: Message, b: Message) -> bool: ...
    def op_Inequality(a: Message, b: Message) -> bool: ...
    @HWnd.setter
    def HWnd(self, value: IntPtr) -> None: ...
    @LParam.setter
    def LParam(self, value: IntPtr) -> None: ...
    @Msg.setter
    def Msg(self, value: int) -> None: ...
    @Result.setter
    def Result(self, value: IntPtr) -> None: ...
    @WParam.setter
    def WParam(self, value: IntPtr) -> None: ...
    def ToString(self) -> str: ...


class Padding(ValueType):
    @overload
    def __init__(self, all: int): ...
    @overload
    def __init__(self, left: int, top: int, right: int, bottom: int): ...
    def Add(p1: Padding, p2: Padding) -> Padding: ...
    def Equals(self, other: Object) -> bool: ...
    @property
    def All(self) -> int: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Horizontal(self) -> int: ...
    @property
    def Left(self) -> int: ...
    @property
    def Right(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Top(self) -> int: ...
    @property
    def Vertical(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Addition(p1: Padding, p2: Padding) -> Padding: ...
    def op_Equality(p1: Padding, p2: Padding) -> bool: ...
    def op_Inequality(p1: Padding, p2: Padding) -> bool: ...
    def op_Subtraction(p1: Padding, p2: Padding) -> Padding: ...
    @All.setter
    def All(self, value: int) -> None: ...
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Right.setter
    def Right(self, value: int) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    def Subtract(p1: Padding, p2: Padding) -> Padding: ...
    def ToString(self) -> str: ...


class PaddingConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> Object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class ScreenOrientation:
    Angle0 = 0
    Angle90 = 1
    Angle180 = 2
    Angle270 = 3
