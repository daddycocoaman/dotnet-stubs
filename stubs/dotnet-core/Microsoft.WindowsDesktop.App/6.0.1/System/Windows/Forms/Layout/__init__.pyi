from typing import Tuple, Set, Iterable, List


class ArrangedElementCollection(Object):
    def CopyTo(self, array: Array, index: int) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetHashCode(self) -> int: ...


class LayoutEngine(Object):
    def InitLayout(self, child: Object, specified: BoundsSpecified) -> None: ...
    def Layout(self, container: Object, layoutEventArgs: LayoutEventArgs) -> bool: ...


class TableLayoutSettingsTypeConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
