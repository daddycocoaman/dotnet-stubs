from typing import Tuple, Set, Iterable, List


class EventWaitHandleAcl(Object):
    def Create(initialState: bool, mode: EventResetMode, name: str, eventSecurity: EventWaitHandleSecurity) -> Tuple[EventWaitHandle, bool]: ...
    def OpenExisting(name: str, rights: EventWaitHandleRights) -> EventWaitHandle: ...
    def TryOpenExisting(name: str, rights: EventWaitHandleRights) -> Tuple[bool, EventWaitHandle]: ...


class MutexAcl(Object):
    def Create(initiallyOwned: bool, name: str, mutexSecurity: MutexSecurity) -> Tuple[Mutex, bool]: ...
    def OpenExisting(name: str, rights: MutexRights) -> Mutex: ...
    def TryOpenExisting(name: str, rights: MutexRights) -> Tuple[bool, Mutex]: ...


class SemaphoreAcl(Object):
    def Create(initialCount: int, maximumCount: int, name: str, semaphoreSecurity: SemaphoreSecurity) -> Tuple[Semaphore, bool]: ...
    def OpenExisting(name: str, rights: SemaphoreRights) -> Semaphore: ...
    def TryOpenExisting(name: str, rights: SemaphoreRights) -> Tuple[bool, Semaphore]: ...


class ThreadingAclExtensions(Object):
    @overload
    def GetAccessControl(handle: EventWaitHandle) -> EventWaitHandleSecurity: ...
    @overload
    def GetAccessControl(mutex: Mutex) -> MutexSecurity: ...
    @overload
    def GetAccessControl(semaphore: Semaphore) -> SemaphoreSecurity: ...
    @overload
    def SetAccessControl(handle: EventWaitHandle, eventSecurity: EventWaitHandleSecurity) -> None: ...
    @overload
    def SetAccessControl(mutex: Mutex, mutexSecurity: MutexSecurity) -> None: ...
    @overload
    def SetAccessControl(semaphore: Semaphore, semaphoreSecurity: SemaphoreSecurity) -> None: ...
