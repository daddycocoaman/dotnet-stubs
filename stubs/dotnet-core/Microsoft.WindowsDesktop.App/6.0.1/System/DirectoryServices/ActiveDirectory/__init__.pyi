from typing import Tuple, Set, Iterable, List


class ActiveDirectoryInterSiteTransport(Object):
    def Dispose(self) -> None: ...
    def FindByTransportType(context: DirectoryContext, transport: ActiveDirectoryTransportType) -> ActiveDirectoryInterSiteTransport: ...
    @property
    def BridgeAllSiteLinks(self) -> bool: ...
    @property
    def IgnoreReplicationSchedule(self) -> bool: ...
    @property
    def SiteLinkBridges(self) -> ReadOnlySiteLinkBridgeCollection: ...
    @property
    def SiteLinks(self) -> ReadOnlySiteLinkCollection: ...
    @property
    def TransportType(self) -> ActiveDirectoryTransportType: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def Save(self) -> None: ...
    @BridgeAllSiteLinks.setter
    def BridgeAllSiteLinks(self, value: bool) -> None: ...
    @IgnoreReplicationSchedule.setter
    def IgnoreReplicationSchedule(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class ActiveDirectoryObjectExistsException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class ActiveDirectoryObjectNotFoundException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, message: str, type: Type, name: str): ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...


class ActiveDirectoryOperationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, errorCode: int): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, message: str, inner: Exception, errorCode: int): ...
    @property
    def ErrorCode(self) -> int: ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...


class ActiveDirectoryPartition(Object):
    def Dispose(self) -> None: ...
    @property
    def Name(self) -> str: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def ToString(self) -> str: ...


class ActiveDirectoryReplicationMetadata(DictionaryBase):
    def Contains(self, attributeName: str) -> bool: ...
    @overload
    def CopyTo(self, array: Set(AttributeMetadata), index: int) -> None: ...
    @property
    def AttributeNames(self) -> ReadOnlyStringCollection: ...
    @property
    def Item(self, name: str) -> AttributeMetadata: ...
    @property
    def Values(self) -> AttributeMetadataCollection: ...


class ActiveDirectoryRole:
    SchemaRole = 0
    NamingRole = 1
    PdcRole = 2
    RidRole = 3
    InfrastructureRole = 4


class ActiveDirectoryRoleCollection(ReadOnlyCollectionBase):
    def Contains(self, role: ActiveDirectoryRole) -> bool: ...
    def CopyTo(self, roles: Set(ActiveDirectoryRole), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectoryRole: ...
    def IndexOf(self, role: ActiveDirectoryRole) -> int: ...


class ActiveDirectorySchedule(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, schedule: ActiveDirectorySchedule): ...
    @property
    def RawSchedule(self) -> Boolean[,,]: ...
    def ResetSchedule(self) -> None: ...
    @RawSchedule.setter
    def RawSchedule(self, value: Boolean[,,]) -> None: ...
    def SetDailySchedule(self, fromHour: HourOfDay, fromMinute: MinuteOfHour, toHour: HourOfDay, toMinute: MinuteOfHour) -> None: ...
    @overload
    def SetSchedule(self, day: DayOfWeek, fromHour: HourOfDay, fromMinute: MinuteOfHour, toHour: HourOfDay, toMinute: MinuteOfHour) -> None: ...
    @overload
    def SetSchedule(self, days: Set(DayOfWeek), fromHour: HourOfDay, fromMinute: MinuteOfHour, toHour: HourOfDay, toMinute: MinuteOfHour) -> None: ...


class ActiveDirectorySchema(ActiveDirectoryPartition):
    @overload
    def FindAllClasses(self) -> ReadOnlyActiveDirectorySchemaClassCollection: ...
    @overload
    def FindAllClasses(self, type: SchemaClassType) -> ReadOnlyActiveDirectorySchemaClassCollection: ...
    def FindAllDefunctClasses(self) -> ReadOnlyActiveDirectorySchemaClassCollection: ...
    def FindAllDefunctProperties(self) -> ReadOnlyActiveDirectorySchemaPropertyCollection: ...
    @overload
    def FindAllProperties(self) -> ReadOnlyActiveDirectorySchemaPropertyCollection: ...
    @overload
    def FindAllProperties(self, type: PropertyTypes) -> ReadOnlyActiveDirectorySchemaPropertyCollection: ...
    def FindClass(self, ldapDisplayName: str) -> ActiveDirectorySchemaClass: ...
    def FindDefunctClass(self, commonName: str) -> ActiveDirectorySchemaClass: ...
    def FindDefunctProperty(self, commonName: str) -> ActiveDirectorySchemaProperty: ...
    def FindProperty(self, ldapDisplayName: str) -> ActiveDirectorySchemaProperty: ...
    @property
    def SchemaRoleOwner(self) -> DirectoryServer: ...
    def GetCurrentSchema() -> ActiveDirectorySchema: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def GetSchema(context: DirectoryContext) -> ActiveDirectorySchema: ...
    def RefreshSchema(self) -> None: ...


class ActiveDirectorySchemaClass(Object):
    def __init__(self, context: DirectoryContext, ldapDisplayName: str): ...
    def Dispose(self) -> None: ...
    def FindByName(context: DirectoryContext, ldapDisplayName: str) -> ActiveDirectorySchemaClass: ...
    @property
    def AuxiliaryClasses(self) -> ActiveDirectorySchemaClassCollection: ...
    @property
    def CommonName(self) -> str: ...
    @property
    def DefaultObjectSecurityDescriptor(self) -> ActiveDirectorySecurity: ...
    @property
    def Description(self) -> str: ...
    @property
    def IsDefunct(self) -> bool: ...
    @property
    def MandatoryProperties(self) -> ActiveDirectorySchemaPropertyCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Oid(self) -> str: ...
    @property
    def OptionalProperties(self) -> ActiveDirectorySchemaPropertyCollection: ...
    @property
    def PossibleInferiors(self) -> ReadOnlyActiveDirectorySchemaClassCollection: ...
    @property
    def PossibleSuperiors(self) -> ActiveDirectorySchemaClassCollection: ...
    @property
    def SchemaGuid(self) -> Guid: ...
    @property
    def SubClassOf(self) -> ActiveDirectorySchemaClass: ...
    @property
    def Type(self) -> SchemaClassType: ...
    def GetAllProperties(self) -> ReadOnlyActiveDirectorySchemaPropertyCollection: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def Save(self) -> None: ...
    @CommonName.setter
    def CommonName(self, value: str) -> None: ...
    @DefaultObjectSecurityDescriptor.setter
    def DefaultObjectSecurityDescriptor(self, value: ActiveDirectorySecurity) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @IsDefunct.setter
    def IsDefunct(self, value: bool) -> None: ...
    @Oid.setter
    def Oid(self, value: str) -> None: ...
    @SchemaGuid.setter
    def SchemaGuid(self, value: Guid) -> None: ...
    @SubClassOf.setter
    def SubClassOf(self, value: ActiveDirectorySchemaClass) -> None: ...
    @Type.setter
    def Type(self, value: SchemaClassType) -> None: ...
    def ToString(self) -> str: ...


class ActiveDirectorySchemaClassCollection(CollectionBase):
    def Add(self, schemaClass: ActiveDirectorySchemaClass) -> int: ...
    @overload
    def AddRange(self, schemaClasses: Set(ActiveDirectorySchemaClass)) -> None: ...
    @overload
    def AddRange(self, schemaClasses: ActiveDirectorySchemaClassCollection) -> None: ...
    @overload
    def AddRange(self, schemaClasses: ReadOnlyActiveDirectorySchemaClassCollection) -> None: ...
    def Contains(self, schemaClass: ActiveDirectorySchemaClass) -> bool: ...
    def CopyTo(self, schemaClasses: Set(ActiveDirectorySchemaClass), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectorySchemaClass: ...
    def IndexOf(self, schemaClass: ActiveDirectorySchemaClass) -> int: ...
    def Insert(self, index: int, schemaClass: ActiveDirectorySchemaClass) -> None: ...
    def Remove(self, schemaClass: ActiveDirectorySchemaClass) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ActiveDirectorySchemaClass) -> None: ...


class ActiveDirectorySchemaProperty(Object):
    def __init__(self, context: DirectoryContext, ldapDisplayName: str): ...
    def Dispose(self) -> None: ...
    def FindByName(context: DirectoryContext, ldapDisplayName: str) -> ActiveDirectorySchemaProperty: ...
    @property
    def CommonName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def IsDefunct(self) -> bool: ...
    @property
    def IsInAnr(self) -> bool: ...
    @property
    def IsIndexed(self) -> bool: ...
    @property
    def IsIndexedOverContainer(self) -> bool: ...
    @property
    def IsInGlobalCatalog(self) -> bool: ...
    @property
    def IsOnTombstonedObject(self) -> bool: ...
    @property
    def IsSingleValued(self) -> bool: ...
    @property
    def IsTupleIndexed(self) -> bool: ...
    @property
    def Link(self) -> ActiveDirectorySchemaProperty: ...
    @property
    def LinkId(self) -> Nullable: ...
    @property
    def Name(self) -> str: ...
    @property
    def Oid(self) -> str: ...
    @property
    def RangeLower(self) -> Nullable: ...
    @property
    def RangeUpper(self) -> Nullable: ...
    @property
    def SchemaGuid(self) -> Guid: ...
    @property
    def Syntax(self) -> ActiveDirectorySyntax: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def Save(self) -> None: ...
    @CommonName.setter
    def CommonName(self, value: str) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @IsDefunct.setter
    def IsDefunct(self, value: bool) -> None: ...
    @IsInAnr.setter
    def IsInAnr(self, value: bool) -> None: ...
    @IsIndexed.setter
    def IsIndexed(self, value: bool) -> None: ...
    @IsIndexedOverContainer.setter
    def IsIndexedOverContainer(self, value: bool) -> None: ...
    @IsInGlobalCatalog.setter
    def IsInGlobalCatalog(self, value: bool) -> None: ...
    @IsOnTombstonedObject.setter
    def IsOnTombstonedObject(self, value: bool) -> None: ...
    @IsSingleValued.setter
    def IsSingleValued(self, value: bool) -> None: ...
    @IsTupleIndexed.setter
    def IsTupleIndexed(self, value: bool) -> None: ...
    @LinkId.setter
    def LinkId(self, value: Nullable) -> None: ...
    @Oid.setter
    def Oid(self, value: str) -> None: ...
    @RangeLower.setter
    def RangeLower(self, value: Nullable) -> None: ...
    @RangeUpper.setter
    def RangeUpper(self, value: Nullable) -> None: ...
    @SchemaGuid.setter
    def SchemaGuid(self, value: Guid) -> None: ...
    @Syntax.setter
    def Syntax(self, value: ActiveDirectorySyntax) -> None: ...
    def ToString(self) -> str: ...


class ActiveDirectorySchemaPropertyCollection(CollectionBase):
    def Add(self, schemaProperty: ActiveDirectorySchemaProperty) -> int: ...
    @overload
    def AddRange(self, properties: Set(ActiveDirectorySchemaProperty)) -> None: ...
    @overload
    def AddRange(self, properties: ActiveDirectorySchemaPropertyCollection) -> None: ...
    @overload
    def AddRange(self, properties: ReadOnlyActiveDirectorySchemaPropertyCollection) -> None: ...
    def Contains(self, schemaProperty: ActiveDirectorySchemaProperty) -> bool: ...
    def CopyTo(self, properties: Set(ActiveDirectorySchemaProperty), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectorySchemaProperty: ...
    def IndexOf(self, schemaProperty: ActiveDirectorySchemaProperty) -> int: ...
    def Insert(self, index: int, schemaProperty: ActiveDirectorySchemaProperty) -> None: ...
    def Remove(self, schemaProperty: ActiveDirectorySchemaProperty) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ActiveDirectorySchemaProperty) -> None: ...


class ActiveDirectoryServerDownException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, message: str, errorCode: int, name: str): ...
    @overload
    def __init__(self, message: str, inner: Exception, errorCode: int, name: str): ...
    @property
    def ErrorCode(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...


class ActiveDirectorySite(Object):
    def __init__(self, context: DirectoryContext, siteName: str): ...
    def Delete(self) -> None: ...
    def Dispose(self) -> None: ...
    def FindByName(context: DirectoryContext, siteName: str) -> ActiveDirectorySite: ...
    @property
    def AdjacentSites(self) -> ReadOnlySiteCollection: ...
    @property
    def BridgeheadServers(self) -> ReadOnlyDirectoryServerCollection: ...
    @property
    def Domains(self) -> DomainCollection: ...
    @property
    def InterSiteTopologyGenerator(self) -> DirectoryServer: ...
    @property
    def IntraSiteReplicationSchedule(self) -> ActiveDirectorySchedule: ...
    @property
    def Location(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Options(self) -> ActiveDirectorySiteOptions: ...
    @property
    def PreferredRpcBridgeheadServers(self) -> DirectoryServerCollection: ...
    @property
    def PreferredSmtpBridgeheadServers(self) -> DirectoryServerCollection: ...
    @property
    def Servers(self) -> ReadOnlyDirectoryServerCollection: ...
    @property
    def SiteLinks(self) -> ReadOnlySiteLinkCollection: ...
    @property
    def Subnets(self) -> ActiveDirectorySubnetCollection: ...
    def GetComputerSite() -> ActiveDirectorySite: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def Save(self) -> None: ...
    @InterSiteTopologyGenerator.setter
    def InterSiteTopologyGenerator(self, value: DirectoryServer) -> None: ...
    @IntraSiteReplicationSchedule.setter
    def IntraSiteReplicationSchedule(self, value: ActiveDirectorySchedule) -> None: ...
    @Location.setter
    def Location(self, value: str) -> None: ...
    @Options.setter
    def Options(self, value: ActiveDirectorySiteOptions) -> None: ...
    def ToString(self) -> str: ...


class ActiveDirectorySiteCollection(CollectionBase):
    def Add(self, site: ActiveDirectorySite) -> int: ...
    @overload
    def AddRange(self, sites: Set(ActiveDirectorySite)) -> None: ...
    @overload
    def AddRange(self, sites: ActiveDirectorySiteCollection) -> None: ...
    def Contains(self, site: ActiveDirectorySite) -> bool: ...
    def CopyTo(self, array: Set(ActiveDirectorySite), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectorySite: ...
    def IndexOf(self, site: ActiveDirectorySite) -> int: ...
    def Insert(self, index: int, site: ActiveDirectorySite) -> None: ...
    def Remove(self, site: ActiveDirectorySite) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ActiveDirectorySite) -> None: ...


class ActiveDirectorySiteLink(Object):
    @overload
    def __init__(self, context: DirectoryContext, siteLinkName: str): ...
    @overload
    def __init__(self, context: DirectoryContext, siteLinkName: str, transport: ActiveDirectoryTransportType): ...
    @overload
    def __init__(self, context: DirectoryContext, siteLinkName: str, transport: ActiveDirectoryTransportType, schedule: ActiveDirectorySchedule): ...
    def Delete(self) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def FindByName(context: DirectoryContext, siteLinkName: str) -> ActiveDirectorySiteLink: ...
    @overload
    def FindByName(context: DirectoryContext, siteLinkName: str, transport: ActiveDirectoryTransportType) -> ActiveDirectorySiteLink: ...
    @property
    def Cost(self) -> int: ...
    @property
    def DataCompressionEnabled(self) -> bool: ...
    @property
    def InterSiteReplicationSchedule(self) -> ActiveDirectorySchedule: ...
    @property
    def Name(self) -> str: ...
    @property
    def NotificationEnabled(self) -> bool: ...
    @property
    def ReciprocalReplicationEnabled(self) -> bool: ...
    @property
    def ReplicationInterval(self) -> TimeSpan: ...
    @property
    def Sites(self) -> ActiveDirectorySiteCollection: ...
    @property
    def TransportType(self) -> ActiveDirectoryTransportType: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def Save(self) -> None: ...
    @Cost.setter
    def Cost(self, value: int) -> None: ...
    @DataCompressionEnabled.setter
    def DataCompressionEnabled(self, value: bool) -> None: ...
    @InterSiteReplicationSchedule.setter
    def InterSiteReplicationSchedule(self, value: ActiveDirectorySchedule) -> None: ...
    @NotificationEnabled.setter
    def NotificationEnabled(self, value: bool) -> None: ...
    @ReciprocalReplicationEnabled.setter
    def ReciprocalReplicationEnabled(self, value: bool) -> None: ...
    @ReplicationInterval.setter
    def ReplicationInterval(self, value: TimeSpan) -> None: ...
    def ToString(self) -> str: ...


class ActiveDirectorySiteLinkBridge(Object):
    @overload
    def __init__(self, context: DirectoryContext, bridgeName: str): ...
    @overload
    def __init__(self, context: DirectoryContext, bridgeName: str, transport: ActiveDirectoryTransportType): ...
    def Delete(self) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def FindByName(context: DirectoryContext, bridgeName: str) -> ActiveDirectorySiteLinkBridge: ...
    @overload
    def FindByName(context: DirectoryContext, bridgeName: str, transport: ActiveDirectoryTransportType) -> ActiveDirectorySiteLinkBridge: ...
    @property
    def Name(self) -> str: ...
    @property
    def SiteLinks(self) -> ActiveDirectorySiteLinkCollection: ...
    @property
    def TransportType(self) -> ActiveDirectoryTransportType: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def Save(self) -> None: ...
    def ToString(self) -> str: ...


class ActiveDirectorySiteLinkCollection(CollectionBase):
    def Add(self, link: ActiveDirectorySiteLink) -> int: ...
    @overload
    def AddRange(self, links: Set(ActiveDirectorySiteLink)) -> None: ...
    @overload
    def AddRange(self, links: ActiveDirectorySiteLinkCollection) -> None: ...
    def Contains(self, link: ActiveDirectorySiteLink) -> bool: ...
    def CopyTo(self, array: Set(ActiveDirectorySiteLink), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectorySiteLink: ...
    def IndexOf(self, link: ActiveDirectorySiteLink) -> int: ...
    def Insert(self, index: int, link: ActiveDirectorySiteLink) -> None: ...
    def Remove(self, link: ActiveDirectorySiteLink) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ActiveDirectorySiteLink) -> None: ...


class ActiveDirectorySiteOptions:
    #None = 0
    AutoTopologyDisabled = 1
    TopologyCleanupDisabled = 2
    AutoMinimumHopDisabled = 4
    StaleServerDetectDisabled = 8
    AutoInterSiteTopologyDisabled = 16
    GroupMembershipCachingEnabled = 32
    ForceKccWindows2003Behavior = 64
    UseWindows2000IstgElection = 128
    RandomBridgeHeaderServerSelectionDisabled = 256
    UseHashingForReplicationSchedule = 512
    RedundantServerTopologyEnabled = 1024


class ActiveDirectorySubnet(Object):
    @overload
    def __init__(self, context: DirectoryContext, subnetName: str): ...
    @overload
    def __init__(self, context: DirectoryContext, subnetName: str, siteName: str): ...
    def Delete(self) -> None: ...
    def Dispose(self) -> None: ...
    def FindByName(context: DirectoryContext, subnetName: str) -> ActiveDirectorySubnet: ...
    @property
    def Location(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Site(self) -> ActiveDirectorySite: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def Save(self) -> None: ...
    @Location.setter
    def Location(self, value: str) -> None: ...
    @Site.setter
    def Site(self, value: ActiveDirectorySite) -> None: ...
    def ToString(self) -> str: ...


class ActiveDirectorySubnetCollection(CollectionBase):
    def Add(self, subnet: ActiveDirectorySubnet) -> int: ...
    @overload
    def AddRange(self, subnets: Set(ActiveDirectorySubnet)) -> None: ...
    @overload
    def AddRange(self, subnets: ActiveDirectorySubnetCollection) -> None: ...
    def Contains(self, subnet: ActiveDirectorySubnet) -> bool: ...
    def CopyTo(self, array: Set(ActiveDirectorySubnet), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectorySubnet: ...
    def IndexOf(self, subnet: ActiveDirectorySubnet) -> int: ...
    def Insert(self, index: int, subnet: ActiveDirectorySubnet) -> None: ...
    def Remove(self, subnet: ActiveDirectorySubnet) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ActiveDirectorySubnet) -> None: ...


class ActiveDirectorySyntax:
    CaseExactString = 0
    CaseIgnoreString = 1
    NumericString = 2
    DirectoryString = 3
    OctetString = 4
    SecurityDescriptor = 5
    Int = 6
    Int64 = 7
    Bool = 8
    Oid = 9
    GeneralizedTime = 10
    UtcTime = 11
    DN = 12
    DNWithBinary = 13
    DNWithString = 14
    Enumeration = 15
    IA5String = 16
    PrintableString = 17
    Sid = 18
    AccessPointDN = 19
    ORName = 20
    PresentationAddress = 21
    ReplicaLink = 22


class ActiveDirectoryTransportType:
    Rpc = 0
    Smtp = 1


class AdamInstance(DirectoryServer):
    def CheckReplicationConsistency(self) -> None: ...
    def FindAll(context: DirectoryContext, partitionName: str) -> AdamInstanceCollection: ...
    def FindOne(context: DirectoryContext, partitionName: str) -> AdamInstance: ...
    @property
    def ConfigurationSet(self) -> ConfigurationSet: ...
    @property
    def DefaultPartition(self) -> str: ...
    @property
    def HostName(self) -> str: ...
    @property
    def InboundConnections(self) -> ReplicationConnectionCollection: ...
    @property
    def IPAddress(self) -> str: ...
    @property
    def LdapPort(self) -> int: ...
    @property
    def OutboundConnections(self) -> ReplicationConnectionCollection: ...
    @property
    def Roles(self) -> AdamRoleCollection: ...
    @property
    def SiteName(self) -> str: ...
    @property
    def SslPort(self) -> int: ...
    @property
    def SyncFromAllServersCallback(self) -> SyncUpdateCallback: ...
    def GetAdamInstance(context: DirectoryContext) -> AdamInstance: ...
    def GetAllReplicationNeighbors(self) -> ReplicationNeighborCollection: ...
    def GetReplicationConnectionFailures(self) -> ReplicationFailureCollection: ...
    def GetReplicationCursors(self, partition: str) -> ReplicationCursorCollection: ...
    def GetReplicationMetadata(self, objectPath: str) -> ActiveDirectoryReplicationMetadata: ...
    def GetReplicationNeighbors(self, partition: str) -> ReplicationNeighborCollection: ...
    def GetReplicationOperationInformation(self) -> ReplicationOperationInformation: ...
    def Save(self) -> None: ...
    def SeizeRoleOwnership(self, role: AdamRole) -> None: ...
    @DefaultPartition.setter
    def DefaultPartition(self, value: str) -> None: ...
    @SyncFromAllServersCallback.setter
    def SyncFromAllServersCallback(self, value: SyncUpdateCallback) -> None: ...
    def SyncReplicaFromAllServers(self, partition: str, options: SyncFromAllServersOptions) -> None: ...
    def SyncReplicaFromServer(self, partition: str, sourceServer: str) -> None: ...
    def TransferRoleOwnership(self, role: AdamRole) -> None: ...
    def TriggerSyncReplicaFromNeighbors(self, partition: str) -> None: ...


class AdamInstanceCollection(ReadOnlyCollectionBase):
    def Contains(self, adamInstance: AdamInstance) -> bool: ...
    def CopyTo(self, adamInstances: Set(AdamInstance), index: int) -> None: ...
    @property
    def Item(self, index: int) -> AdamInstance: ...
    def IndexOf(self, adamInstance: AdamInstance) -> int: ...


class AdamRole:
    SchemaRole = 0
    NamingRole = 1


class AdamRoleCollection(ReadOnlyCollectionBase):
    def Contains(self, role: AdamRole) -> bool: ...
    def CopyTo(self, roles: Set(AdamRole), index: int) -> None: ...
    @property
    def Item(self, index: int) -> AdamRole: ...
    def IndexOf(self, role: AdamRole) -> int: ...


class ApplicationPartition(ActiveDirectoryPartition):
    @overload
    def __init__(self, context: DirectoryContext, distinguishedName: str): ...
    @overload
    def __init__(self, context: DirectoryContext, distinguishedName: str, objectClass: str): ...
    def Delete(self) -> None: ...
    @overload
    def FindAllDirectoryServers(self) -> ReadOnlyDirectoryServerCollection: ...
    @overload
    def FindAllDirectoryServers(self, siteName: str) -> ReadOnlyDirectoryServerCollection: ...
    @overload
    def FindAllDiscoverableDirectoryServers(self) -> ReadOnlyDirectoryServerCollection: ...
    @overload
    def FindAllDiscoverableDirectoryServers(self, siteName: str) -> ReadOnlyDirectoryServerCollection: ...
    def FindByName(context: DirectoryContext, distinguishedName: str) -> ApplicationPartition: ...
    @overload
    def FindDirectoryServer(self) -> DirectoryServer: ...
    @overload
    def FindDirectoryServer(self, siteName: str) -> DirectoryServer: ...
    @overload
    def FindDirectoryServer(self, forceRediscovery: bool) -> DirectoryServer: ...
    @overload
    def FindDirectoryServer(self, siteName: str, forceRediscovery: bool) -> DirectoryServer: ...
    @property
    def DirectoryServers(self) -> DirectoryServerCollection: ...
    @property
    def SecurityReferenceDomain(self) -> str: ...
    def GetApplicationPartition(context: DirectoryContext) -> ApplicationPartition: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def Save(self) -> None: ...
    @SecurityReferenceDomain.setter
    def SecurityReferenceDomain(self, value: str) -> None: ...


class ApplicationPartitionCollection(ReadOnlyCollectionBase):
    def Contains(self, applicationPartition: ApplicationPartition) -> bool: ...
    def CopyTo(self, applicationPartitions: Set(ApplicationPartition), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ApplicationPartition: ...
    def IndexOf(self, applicationPartition: ApplicationPartition) -> int: ...


class AttributeMetadata(Object):
    @property
    def LastOriginatingChangeTime(self) -> DateTime: ...
    @property
    def LastOriginatingInvocationId(self) -> Guid: ...
    @property
    def LocalChangeUsn(self) -> Int64: ...
    @property
    def Name(self) -> str: ...
    @property
    def OriginatingChangeUsn(self) -> Int64: ...
    @property
    def OriginatingServer(self) -> str: ...
    @property
    def Version(self) -> int: ...


class AttributeMetadataCollection(ReadOnlyCollectionBase):
    def Contains(self, metadata: AttributeMetadata) -> bool: ...
    def CopyTo(self, metadata: Set(AttributeMetadata), index: int) -> None: ...
    @property
    def Item(self, index: int) -> AttributeMetadata: ...
    def IndexOf(self, metadata: AttributeMetadata) -> int: ...


class ConfigurationSet(Object):
    def Dispose(self) -> None: ...
    @overload
    def FindAdamInstance(self) -> AdamInstance: ...
    @overload
    def FindAdamInstance(self, partitionName: str) -> AdamInstance: ...
    @overload
    def FindAdamInstance(self, partitionName: str, siteName: str) -> AdamInstance: ...
    @overload
    def FindAllAdamInstances(self) -> AdamInstanceCollection: ...
    @overload
    def FindAllAdamInstances(self, partitionName: str) -> AdamInstanceCollection: ...
    @overload
    def FindAllAdamInstances(self, partitionName: str, siteName: str) -> AdamInstanceCollection: ...
    @property
    def AdamInstances(self) -> AdamInstanceCollection: ...
    @property
    def ApplicationPartitions(self) -> ApplicationPartitionCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamingRoleOwner(self) -> AdamInstance: ...
    @property
    def Schema(self) -> ActiveDirectorySchema: ...
    @property
    def SchemaRoleOwner(self) -> AdamInstance: ...
    @property
    def Sites(self) -> ReadOnlySiteCollection: ...
    def GetConfigurationSet(context: DirectoryContext) -> ConfigurationSet: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def GetSecurityLevel(self) -> ReplicationSecurityLevel: ...
    def SetSecurityLevel(self, securityLevel: ReplicationSecurityLevel) -> None: ...
    def ToString(self) -> str: ...


class DirectoryContext(Object):
    @overload
    def __init__(self, contextType: DirectoryContextType): ...
    @overload
    def __init__(self, contextType: DirectoryContextType, name: str): ...
    @overload
    def __init__(self, contextType: DirectoryContextType, username: str, password: str): ...
    @overload
    def __init__(self, contextType: DirectoryContextType, name: str, username: str, password: str): ...
    @property
    def ContextType(self) -> DirectoryContextType: ...
    @property
    def Name(self) -> str: ...
    @property
    def UserName(self) -> str: ...


class DirectoryContextType:
    Domain = 0
    Forest = 1
    DirectoryServer = 2
    ConfigurationSet = 3
    ApplicationPartition = 4


class DirectoryServer(Object):
    def CheckReplicationConsistency(self) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def InboundConnections(self) -> ReplicationConnectionCollection: ...
    @property
    def IPAddress(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def OutboundConnections(self) -> ReplicationConnectionCollection: ...
    @property
    def Partitions(self) -> ReadOnlyStringCollection: ...
    @property
    def SiteName(self) -> str: ...
    @property
    def SyncFromAllServersCallback(self) -> SyncUpdateCallback: ...
    def GetAllReplicationNeighbors(self) -> ReplicationNeighborCollection: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def GetReplicationConnectionFailures(self) -> ReplicationFailureCollection: ...
    def GetReplicationCursors(self, partition: str) -> ReplicationCursorCollection: ...
    def GetReplicationMetadata(self, objectPath: str) -> ActiveDirectoryReplicationMetadata: ...
    def GetReplicationNeighbors(self, partition: str) -> ReplicationNeighborCollection: ...
    def GetReplicationOperationInformation(self) -> ReplicationOperationInformation: ...
    def MoveToAnotherSite(self, siteName: str) -> None: ...
    @SyncFromAllServersCallback.setter
    def SyncFromAllServersCallback(self, value: SyncUpdateCallback) -> None: ...
    def SyncReplicaFromAllServers(self, partition: str, options: SyncFromAllServersOptions) -> None: ...
    def SyncReplicaFromServer(self, partition: str, sourceServer: str) -> None: ...
    def ToString(self) -> str: ...
    def TriggerSyncReplicaFromNeighbors(self, partition: str) -> None: ...


class DirectoryServerCollection(CollectionBase):
    def Add(self, server: DirectoryServer) -> int: ...
    def AddRange(self, servers: Set(DirectoryServer)) -> None: ...
    def Contains(self, server: DirectoryServer) -> bool: ...
    def CopyTo(self, array: Set(DirectoryServer), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DirectoryServer: ...
    def IndexOf(self, server: DirectoryServer) -> int: ...
    def Insert(self, index: int, server: DirectoryServer) -> None: ...
    def Remove(self, server: DirectoryServer) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DirectoryServer) -> None: ...


class Domain(ActiveDirectoryPartition):
    def CreateLocalSideOfTrustRelationship(self, targetDomainName: str, direction: TrustDirection, trustPassword: str) -> None: ...
    def CreateTrustRelationship(self, targetDomain: Domain, direction: TrustDirection) -> None: ...
    def DeleteLocalSideOfTrustRelationship(self, targetDomainName: str) -> None: ...
    def DeleteTrustRelationship(self, targetDomain: Domain) -> None: ...
    @overload
    def FindAllDiscoverableDomainControllers(self) -> DomainControllerCollection: ...
    @overload
    def FindAllDiscoverableDomainControllers(self, siteName: str) -> DomainControllerCollection: ...
    @overload
    def FindAllDomainControllers(self) -> DomainControllerCollection: ...
    @overload
    def FindAllDomainControllers(self, siteName: str) -> DomainControllerCollection: ...
    @overload
    def FindDomainController(self) -> DomainController: ...
    @overload
    def FindDomainController(self, siteName: str) -> DomainController: ...
    @overload
    def FindDomainController(self, flag: LocatorOptions) -> DomainController: ...
    @overload
    def FindDomainController(self, siteName: str, flag: LocatorOptions) -> DomainController: ...
    @property
    def Children(self) -> DomainCollection: ...
    @property
    def DomainControllers(self) -> DomainControllerCollection: ...
    @property
    def DomainMode(self) -> DomainMode: ...
    @property
    def DomainModeLevel(self) -> int: ...
    @property
    def Forest(self) -> Forest: ...
    @property
    def InfrastructureRoleOwner(self) -> DomainController: ...
    @property
    def Parent(self) -> Domain: ...
    @property
    def PdcRoleOwner(self) -> DomainController: ...
    @property
    def RidRoleOwner(self) -> DomainController: ...
    def GetAllTrustRelationships(self) -> TrustRelationshipInformationCollection: ...
    def GetComputerDomain() -> Domain: ...
    def GetCurrentDomain() -> Domain: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def GetDomain(context: DirectoryContext) -> Domain: ...
    def GetSelectiveAuthenticationStatus(self, targetDomainName: str) -> bool: ...
    def GetSidFilteringStatus(self, targetDomainName: str) -> bool: ...
    def GetTrustRelationship(self, targetDomainName: str) -> TrustRelationshipInformation: ...
    def RaiseDomainFunctionality(self, domainMode: DomainMode) -> None: ...
    def RaiseDomainFunctionalityLevel(self, domainMode: int) -> None: ...
    def RepairTrustRelationship(self, targetDomain: Domain) -> None: ...
    def SetSelectiveAuthenticationStatus(self, targetDomainName: str, enable: bool) -> None: ...
    def SetSidFilteringStatus(self, targetDomainName: str, enable: bool) -> None: ...
    @overload
    def UpdateLocalSideOfTrustRelationship(self, targetDomainName: str, newTrustPassword: str) -> None: ...
    @overload
    def UpdateLocalSideOfTrustRelationship(self, targetDomainName: str, newTrustDirection: TrustDirection, newTrustPassword: str) -> None: ...
    def UpdateTrustRelationship(self, targetDomain: Domain, newTrustDirection: TrustDirection) -> None: ...
    def VerifyOutboundTrustRelationship(self, targetDomainName: str) -> None: ...
    def VerifyTrustRelationship(self, targetDomain: Domain, direction: TrustDirection) -> None: ...


class DomainCollection(ReadOnlyCollectionBase):
    def Contains(self, domain: Domain) -> bool: ...
    def CopyTo(self, domains: Set(Domain), index: int) -> None: ...
    @property
    def Item(self, index: int) -> Domain: ...
    def IndexOf(self, domain: Domain) -> int: ...


class DomainCollisionOptions:
    #None = 0
    SidDisabledByAdmin = 1
    SidDisabledByConflict = 2
    NetBiosNameDisabledByAdmin = 4
    NetBiosNameDisabledByConflict = 8


class DomainController(DirectoryServer):
    def CheckReplicationConsistency(self) -> None: ...
    def EnableGlobalCatalog(self) -> GlobalCatalog: ...
    @overload
    def FindAll(context: DirectoryContext) -> DomainControllerCollection: ...
    @overload
    def FindAll(context: DirectoryContext, siteName: str) -> DomainControllerCollection: ...
    @overload
    def FindOne(context: DirectoryContext) -> DomainController: ...
    @overload
    def FindOne(context: DirectoryContext, siteName: str) -> DomainController: ...
    @overload
    def FindOne(context: DirectoryContext, flag: LocatorOptions) -> DomainController: ...
    @overload
    def FindOne(context: DirectoryContext, siteName: str, flag: LocatorOptions) -> DomainController: ...
    @property
    def CurrentTime(self) -> DateTime: ...
    @property
    def Domain(self) -> Domain: ...
    @property
    def Forest(self) -> Forest: ...
    @property
    def HighestCommittedUsn(self) -> Int64: ...
    @property
    def InboundConnections(self) -> ReplicationConnectionCollection: ...
    @property
    def IPAddress(self) -> str: ...
    @property
    def OSVersion(self) -> str: ...
    @property
    def OutboundConnections(self) -> ReplicationConnectionCollection: ...
    @property
    def Roles(self) -> ActiveDirectoryRoleCollection: ...
    @property
    def SiteName(self) -> str: ...
    @property
    def SyncFromAllServersCallback(self) -> SyncUpdateCallback: ...
    def GetAllReplicationNeighbors(self) -> ReplicationNeighborCollection: ...
    def GetDirectorySearcher(self) -> DirectorySearcher: ...
    def GetDomainController(context: DirectoryContext) -> DomainController: ...
    def GetReplicationConnectionFailures(self) -> ReplicationFailureCollection: ...
    def GetReplicationCursors(self, partition: str) -> ReplicationCursorCollection: ...
    def GetReplicationMetadata(self, objectPath: str) -> ActiveDirectoryReplicationMetadata: ...
    def GetReplicationNeighbors(self, partition: str) -> ReplicationNeighborCollection: ...
    def GetReplicationOperationInformation(self) -> ReplicationOperationInformation: ...
    def IsGlobalCatalog(self) -> bool: ...
    def SeizeRoleOwnership(self, role: ActiveDirectoryRole) -> None: ...
    @SyncFromAllServersCallback.setter
    def SyncFromAllServersCallback(self, value: SyncUpdateCallback) -> None: ...
    def SyncReplicaFromAllServers(self, partition: str, options: SyncFromAllServersOptions) -> None: ...
    def SyncReplicaFromServer(self, partition: str, sourceServer: str) -> None: ...
    def TransferRoleOwnership(self, role: ActiveDirectoryRole) -> None: ...
    def TriggerSyncReplicaFromNeighbors(self, partition: str) -> None: ...


class DomainControllerCollection(ReadOnlyCollectionBase):
    def Contains(self, domainController: DomainController) -> bool: ...
    def CopyTo(self, domainControllers: Set(DomainController), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DomainController: ...
    def IndexOf(self, domainController: DomainController) -> int: ...


class DomainMode:
    Windows2000MixedDomain = 0
    Windows2000NativeDomain = 1
    Windows2003InterimDomain = 2
    Windows2003Domain = 3
    Windows2008Domain = 4
    Windows2008R2Domain = 5
    Windows8Domain = 6
    Windows2012R2Domain = 7
    Unknown = -1


class Forest(Object):
    def CreateLocalSideOfTrustRelationship(self, targetForestName: str, direction: TrustDirection, trustPassword: str) -> None: ...
    def CreateTrustRelationship(self, targetForest: Forest, direction: TrustDirection) -> None: ...
    def DeleteLocalSideOfTrustRelationship(self, targetForestName: str) -> None: ...
    def DeleteTrustRelationship(self, targetForest: Forest) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def FindAllDiscoverableGlobalCatalogs(self) -> GlobalCatalogCollection: ...
    @overload
    def FindAllDiscoverableGlobalCatalogs(self, siteName: str) -> GlobalCatalogCollection: ...
    @overload
    def FindAllGlobalCatalogs(self) -> GlobalCatalogCollection: ...
    @overload
    def FindAllGlobalCatalogs(self, siteName: str) -> GlobalCatalogCollection: ...
    @overload
    def FindGlobalCatalog(self) -> GlobalCatalog: ...
    @overload
    def FindGlobalCatalog(self, flag: LocatorOptions) -> GlobalCatalog: ...
    @overload
    def FindGlobalCatalog(self, siteName: str) -> GlobalCatalog: ...
    @overload
    def FindGlobalCatalog(self, siteName: str, flag: LocatorOptions) -> GlobalCatalog: ...
    @property
    def ApplicationPartitions(self) -> ApplicationPartitionCollection: ...
    @property
    def Domains(self) -> DomainCollection: ...
    @property
    def ForestMode(self) -> ForestMode: ...
    @property
    def ForestModeLevel(self) -> int: ...
    @property
    def GlobalCatalogs(self) -> GlobalCatalogCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamingRoleOwner(self) -> DomainController: ...
    @property
    def RootDomain(self) -> Domain: ...
    @property
    def Schema(self) -> ActiveDirectorySchema: ...
    @property
    def SchemaRoleOwner(self) -> DomainController: ...
    @property
    def Sites(self) -> ReadOnlySiteCollection: ...
    def GetAllTrustRelationships(self) -> TrustRelationshipInformationCollection: ...
    def GetCurrentForest() -> Forest: ...
    def GetForest(context: DirectoryContext) -> Forest: ...
    def GetSelectiveAuthenticationStatus(self, targetForestName: str) -> bool: ...
    def GetSidFilteringStatus(self, targetForestName: str) -> bool: ...
    def GetTrustRelationship(self, targetForestName: str) -> ForestTrustRelationshipInformation: ...
    def RaiseForestFunctionality(self, forestMode: ForestMode) -> None: ...
    def RaiseForestFunctionalityLevel(self, forestMode: int) -> None: ...
    def RepairTrustRelationship(self, targetForest: Forest) -> None: ...
    def SetSelectiveAuthenticationStatus(self, targetForestName: str, enable: bool) -> None: ...
    def SetSidFilteringStatus(self, targetForestName: str, enable: bool) -> None: ...
    def ToString(self) -> str: ...
    @overload
    def UpdateLocalSideOfTrustRelationship(self, targetForestName: str, newTrustPassword: str) -> None: ...
    @overload
    def UpdateLocalSideOfTrustRelationship(self, targetForestName: str, newTrustDirection: TrustDirection, newTrustPassword: str) -> None: ...
    def UpdateTrustRelationship(self, targetForest: Forest, newTrustDirection: TrustDirection) -> None: ...
    def VerifyOutboundTrustRelationship(self, targetForestName: str) -> None: ...
    def VerifyTrustRelationship(self, targetForest: Forest, direction: TrustDirection) -> None: ...


class ForestMode:
    Windows2000Forest = 0
    Windows2003InterimForest = 1
    Windows2003Forest = 2
    Windows2008Forest = 3
    Windows2008R2Forest = 4
    Windows8Forest = 5
    Windows2012R2Forest = 6
    Unknown = -1


class ForestTrustCollisionException(ActiveDirectoryOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, message: str, inner: Exception, collisions: ForestTrustRelationshipCollisionCollection): ...
    @property
    def Collisions(self) -> ForestTrustRelationshipCollisionCollection: ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...


class ForestTrustCollisionType:
    TopLevelName = 0
    Domain = 1
    Other = 2


class ForestTrustDomainInfoCollection(ReadOnlyCollectionBase):
    def Contains(self, information: ForestTrustDomainInformation) -> bool: ...
    def CopyTo(self, array: Set(ForestTrustDomainInformation), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ForestTrustDomainInformation: ...
    def IndexOf(self, information: ForestTrustDomainInformation) -> int: ...


class ForestTrustDomainInformation(Object):
    @property
    def DnsName(self) -> str: ...
    @property
    def DomainSid(self) -> str: ...
    @property
    def NetBiosName(self) -> str: ...
    @property
    def Status(self) -> ForestTrustDomainStatus: ...
    @Status.setter
    def Status(self, value: ForestTrustDomainStatus) -> None: ...


class ForestTrustDomainStatus:
    Enabled = 0
    SidAdminDisabled = 1
    SidConflictDisabled = 2
    NetBiosNameAdminDisabled = 4
    NetBiosNameConflictDisabled = 8


class ForestTrustRelationshipCollision(Object):
    @property
    def CollisionRecord(self) -> str: ...
    @property
    def CollisionType(self) -> ForestTrustCollisionType: ...
    @property
    def DomainCollisionOption(self) -> DomainCollisionOptions: ...
    @property
    def TopLevelNameCollisionOption(self) -> TopLevelNameCollisionOptions: ...


class ForestTrustRelationshipCollisionCollection(ReadOnlyCollectionBase):
    def Contains(self, collision: ForestTrustRelationshipCollision) -> bool: ...
    def CopyTo(self, array: Set(ForestTrustRelationshipCollision), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ForestTrustRelationshipCollision: ...
    def IndexOf(self, collision: ForestTrustRelationshipCollision) -> int: ...


class ForestTrustRelationshipInformation(TrustRelationshipInformation):
    @property
    def ExcludedTopLevelNames(self) -> StringCollection: ...
    @property
    def TopLevelNames(self) -> TopLevelNameCollection: ...
    @property
    def TrustedDomainInformation(self) -> ForestTrustDomainInfoCollection: ...
    def Save(self) -> None: ...


class GlobalCatalog(DomainController):
    def DisableGlobalCatalog(self) -> DomainController: ...
    def EnableGlobalCatalog(self) -> GlobalCatalog: ...
    @overload
    def FindAll(context: DirectoryContext) -> GlobalCatalogCollection: ...
    @overload
    def FindAll(context: DirectoryContext, siteName: str) -> GlobalCatalogCollection: ...
    def FindAllProperties(self) -> ReadOnlyActiveDirectorySchemaPropertyCollection: ...
    @overload
    def FindOne(context: DirectoryContext) -> GlobalCatalog: ...
    @overload
    def FindOne(context: DirectoryContext, flag: LocatorOptions) -> GlobalCatalog: ...
    @overload
    def FindOne(context: DirectoryContext, siteName: str) -> GlobalCatalog: ...
    @overload
    def FindOne(context: DirectoryContext, siteName: str, flag: LocatorOptions) -> GlobalCatalog: ...
    def GetDirectorySearcher(self) -> DirectorySearcher: ...
    def GetGlobalCatalog(context: DirectoryContext) -> GlobalCatalog: ...
    def IsGlobalCatalog(self) -> bool: ...


class GlobalCatalogCollection(ReadOnlyCollectionBase):
    def Contains(self, globalCatalog: GlobalCatalog) -> bool: ...
    def CopyTo(self, globalCatalogs: Set(GlobalCatalog), index: int) -> None: ...
    @property
    def Item(self, index: int) -> GlobalCatalog: ...
    def IndexOf(self, globalCatalog: GlobalCatalog) -> int: ...


class HourOfDay:
    Zero = 0
    One = 1
    Two = 2
    Three = 3
    Four = 4
    Five = 5
    Six = 6
    Seven = 7
    Eight = 8
    Nine = 9
    Ten = 10
    Eleven = 11
    Twelve = 12
    Thirteen = 13
    Fourteen = 14
    Fifteen = 15
    Sixteen = 16
    Seventeen = 17
    Eighteen = 18
    Nineteen = 19
    Twenty = 20
    TwentyOne = 21
    TwentyTwo = 22
    TwentyThree = 23


class LocatorOptions:
    ForceRediscovery = 1
    KdcRequired = 1024
    TimeServerRequired = 2048
    WriteableRequired = 4096
    AvoidSelf = 16384


class MinuteOfHour:
    Zero = 0
    Fifteen = 15
    Thirty = 30
    FortyFive = 45


class NotificationStatus:
    NoNotification = 0
    IntraSiteOnly = 1
    NotificationAlways = 2


class PropertyTypes:
    Indexed = 2
    InGlobalCatalog = 4


class ReadOnlyActiveDirectorySchemaClassCollection(ReadOnlyCollectionBase):
    def Contains(self, schemaClass: ActiveDirectorySchemaClass) -> bool: ...
    def CopyTo(self, classes: Set(ActiveDirectorySchemaClass), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectorySchemaClass: ...
    def IndexOf(self, schemaClass: ActiveDirectorySchemaClass) -> int: ...


class ReadOnlyActiveDirectorySchemaPropertyCollection(ReadOnlyCollectionBase):
    def Contains(self, schemaProperty: ActiveDirectorySchemaProperty) -> bool: ...
    def CopyTo(self, properties: Set(ActiveDirectorySchemaProperty), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectorySchemaProperty: ...
    def IndexOf(self, schemaProperty: ActiveDirectorySchemaProperty) -> int: ...


class ReadOnlyDirectoryServerCollection(ReadOnlyCollectionBase):
    def Contains(self, directoryServer: DirectoryServer) -> bool: ...
    def CopyTo(self, directoryServers: Set(DirectoryServer), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DirectoryServer: ...
    def IndexOf(self, directoryServer: DirectoryServer) -> int: ...


class ReadOnlySiteCollection(ReadOnlyCollectionBase):
    def Contains(self, site: ActiveDirectorySite) -> bool: ...
    def CopyTo(self, sites: Set(ActiveDirectorySite), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectorySite: ...
    def IndexOf(self, site: ActiveDirectorySite) -> int: ...


class ReadOnlySiteLinkBridgeCollection(ReadOnlyCollectionBase):
    def Contains(self, bridge: ActiveDirectorySiteLinkBridge) -> bool: ...
    def CopyTo(self, bridges: Set(ActiveDirectorySiteLinkBridge), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectorySiteLinkBridge: ...
    def IndexOf(self, bridge: ActiveDirectorySiteLinkBridge) -> int: ...


class ReadOnlySiteLinkCollection(ReadOnlyCollectionBase):
    def Contains(self, link: ActiveDirectorySiteLink) -> bool: ...
    def CopyTo(self, links: Set(ActiveDirectorySiteLink), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ActiveDirectorySiteLink: ...
    def IndexOf(self, link: ActiveDirectorySiteLink) -> int: ...


class ReadOnlyStringCollection(ReadOnlyCollectionBase):
    def Contains(self, value: str) -> bool: ...
    def CopyTo(self, values: Set(str), index: int) -> None: ...
    @property
    def Item(self, index: int) -> str: ...
    def IndexOf(self, value: str) -> int: ...


class ReplicationConnection(Object):
    @overload
    def __init__(self, context: DirectoryContext, name: str, sourceServer: DirectoryServer): ...
    @overload
    def __init__(self, context: DirectoryContext, name: str, sourceServer: DirectoryServer, schedule: ActiveDirectorySchedule): ...
    @overload
    def __init__(self, context: DirectoryContext, name: str, sourceServer: DirectoryServer, transport: ActiveDirectoryTransportType): ...
    @overload
    def __init__(self, context: DirectoryContext, name: str, sourceServer: DirectoryServer, schedule: ActiveDirectorySchedule, transport: ActiveDirectoryTransportType): ...
    def Delete(self) -> None: ...
    def Dispose(self) -> None: ...
    def FindByName(context: DirectoryContext, name: str) -> ReplicationConnection: ...
    @property
    def ChangeNotificationStatus(self) -> NotificationStatus: ...
    @property
    def DataCompressionEnabled(self) -> bool: ...
    @property
    def DestinationServer(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def GeneratedByKcc(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReciprocalReplicationEnabled(self) -> bool: ...
    @property
    def ReplicationSchedule(self) -> ActiveDirectorySchedule: ...
    @property
    def ReplicationScheduleOwnedByUser(self) -> bool: ...
    @property
    def ReplicationSpan(self) -> ReplicationSpan: ...
    @property
    def SourceServer(self) -> str: ...
    @property
    def TransportType(self) -> ActiveDirectoryTransportType: ...
    def GetDirectoryEntry(self) -> DirectoryEntry: ...
    def Save(self) -> None: ...
    @ChangeNotificationStatus.setter
    def ChangeNotificationStatus(self, value: NotificationStatus) -> None: ...
    @DataCompressionEnabled.setter
    def DataCompressionEnabled(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @GeneratedByKcc.setter
    def GeneratedByKcc(self, value: bool) -> None: ...
    @ReciprocalReplicationEnabled.setter
    def ReciprocalReplicationEnabled(self, value: bool) -> None: ...
    @ReplicationSchedule.setter
    def ReplicationSchedule(self, value: ActiveDirectorySchedule) -> None: ...
    @ReplicationScheduleOwnedByUser.setter
    def ReplicationScheduleOwnedByUser(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class ReplicationConnectionCollection(ReadOnlyCollectionBase):
    def Contains(self, connection: ReplicationConnection) -> bool: ...
    def CopyTo(self, connections: Set(ReplicationConnection), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ReplicationConnection: ...
    def IndexOf(self, connection: ReplicationConnection) -> int: ...


class ReplicationCursor(Object):
    @property
    def LastSuccessfulSyncTime(self) -> DateTime: ...
    @property
    def PartitionName(self) -> str: ...
    @property
    def SourceInvocationId(self) -> Guid: ...
    @property
    def SourceServer(self) -> str: ...
    @property
    def UpToDatenessUsn(self) -> Int64: ...


class ReplicationCursorCollection(ReadOnlyCollectionBase):
    def Contains(self, cursor: ReplicationCursor) -> bool: ...
    def CopyTo(self, values: Set(ReplicationCursor), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ReplicationCursor: ...
    def IndexOf(self, cursor: ReplicationCursor) -> int: ...


class ReplicationFailure(Object):
    @property
    def ConsecutiveFailureCount(self) -> int: ...
    @property
    def FirstFailureTime(self) -> DateTime: ...
    @property
    def LastErrorCode(self) -> int: ...
    @property
    def LastErrorMessage(self) -> str: ...
    @property
    def SourceServer(self) -> str: ...


class ReplicationFailureCollection(ReadOnlyCollectionBase):
    def Contains(self, failure: ReplicationFailure) -> bool: ...
    def CopyTo(self, failures: Set(ReplicationFailure), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ReplicationFailure: ...
    def IndexOf(self, failure: ReplicationFailure) -> int: ...


class ReplicationNeighbor(Object):
    @property
    def ConsecutiveFailureCount(self) -> int: ...
    @property
    def LastAttemptedSync(self) -> DateTime: ...
    @property
    def LastSuccessfulSync(self) -> DateTime: ...
    @property
    def LastSyncMessage(self) -> str: ...
    @property
    def LastSyncResult(self) -> int: ...
    @property
    def PartitionName(self) -> str: ...
    @property
    def ReplicationNeighborOption(self) -> ReplicationNeighborOptions: ...
    @property
    def SourceInvocationId(self) -> Guid: ...
    @property
    def SourceServer(self) -> str: ...
    @property
    def TransportType(self) -> ActiveDirectoryTransportType: ...
    @property
    def UsnAttributeFilter(self) -> Int64: ...
    @property
    def UsnLastObjectChangeSynced(self) -> Int64: ...


class ReplicationNeighborCollection(ReadOnlyCollectionBase):
    def Contains(self, neighbor: ReplicationNeighbor) -> bool: ...
    def CopyTo(self, neighbors: Set(ReplicationNeighbor), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ReplicationNeighbor: ...
    def IndexOf(self, neighbor: ReplicationNeighbor) -> int: ...


class ReplicationNeighborOptions:
    Writeable = 16
    SyncOnStartup = 32
    ScheduledSync = 64
    UseInterSiteTransport = 128
    TwoWaySync = 512
    ReturnObjectParent = 2048
    FullSyncInProgress = 65536
    FullSyncNextPacket = 131072
    NeverSynced = 2097152
    Preempted = 16777216
    IgnoreChangeNotifications = 67108864
    DisableScheduledSync = 134217728
    CompressChanges = 268435456
    NoChangeNotifications = 536870912
    PartialAttributeSet = 1073741824


class ReplicationOperation(Object):
    @property
    def OperationNumber(self) -> int: ...
    @property
    def OperationType(self) -> ReplicationOperationType: ...
    @property
    def PartitionName(self) -> str: ...
    @property
    def Priority(self) -> int: ...
    @property
    def SourceServer(self) -> str: ...
    @property
    def TimeEnqueued(self) -> DateTime: ...


class ReplicationOperationCollection(ReadOnlyCollectionBase):
    def Contains(self, operation: ReplicationOperation) -> bool: ...
    def CopyTo(self, operations: Set(ReplicationOperation), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ReplicationOperation: ...
    def IndexOf(self, operation: ReplicationOperation) -> int: ...


class ReplicationOperationInformation(Object):
    def __init__(self): ...
    @property
    def CurrentOperation(self) -> ReplicationOperation: ...
    @property
    def OperationStartTime(self) -> DateTime: ...
    @property
    def PendingOperations(self) -> ReplicationOperationCollection: ...


class ReplicationOperationType:
    Sync = 0
    Add = 1
    Delete = 2
    Modify = 3
    UpdateReference = 4


class ReplicationSecurityLevel:
    NegotiatePassThrough = 0
    Negotiate = 1
    MutualAuthentication = 2


class ReplicationSpan:
    IntraSite = 0
    InterSite = 1


class SchemaClassType:
    Type88 = 0
    Structural = 1
    Abstract = 2
    Auxiliary = 3


class SyncFromAllServersErrorCategory:
    ErrorContactingServer = 0
    ErrorReplicating = 1
    ServerUnreachable = 2


class SyncFromAllServersErrorInformation(Object):
    @property
    def ErrorCategory(self) -> SyncFromAllServersErrorCategory: ...
    @property
    def ErrorCode(self) -> int: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def SourceServer(self) -> str: ...
    @property
    def TargetServer(self) -> str: ...


class SyncFromAllServersEvent:
    Error = 0
    SyncStarted = 1
    SyncCompleted = 2
    Finished = 3


class SyncFromAllServersOperationException(ActiveDirectoryOperationException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, message: str, inner: Exception, errors: Set(SyncFromAllServersErrorInformation)): ...
    @property
    def ErrorInformation(self) -> Set(SyncFromAllServersErrorInformation): ...
    def GetObjectData(self, serializationInfo: SerializationInfo, streamingContext: StreamingContext) -> None: ...


class SyncFromAllServersOptions:
    #None = 0
    AbortIfServerUnavailable = 1
    SyncAdjacentServerOnly = 2
    CheckServerAlivenessOnly = 8
    SkipInitialCheck = 16
    PushChangeOutward = 32
    CrossSite = 64


class SyncUpdateCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, eventType: SyncFromAllServersEvent, targetServer: str, sourceServer: str, exception: SyncFromAllServersOperationException, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    def Invoke(self, eventType: SyncFromAllServersEvent, targetServer: str, sourceServer: str, exception: SyncFromAllServersOperationException) -> bool: ...


class TopLevelName(Object):
    @property
    def Name(self) -> str: ...
    @property
    def Status(self) -> TopLevelNameStatus: ...
    @Status.setter
    def Status(self, value: TopLevelNameStatus) -> None: ...


class TopLevelNameCollection(ReadOnlyCollectionBase):
    def Contains(self, name: TopLevelName) -> bool: ...
    def CopyTo(self, names: Set(TopLevelName), index: int) -> None: ...
    @property
    def Item(self, index: int) -> TopLevelName: ...
    def IndexOf(self, name: TopLevelName) -> int: ...


class TopLevelNameCollisionOptions:
    #None = 0
    NewlyCreated = 1
    DisabledByAdmin = 2
    DisabledByConflict = 4


class TopLevelNameStatus:
    Enabled = 0
    NewlyCreated = 1
    AdminDisabled = 2
    ConflictDisabled = 4


class TrustDirection:
    Inbound = 1
    Outbound = 2
    Bidirectional = 3


class TrustRelationshipInformation(Object):
    @property
    def SourceName(self) -> str: ...
    @property
    def TargetName(self) -> str: ...
    @property
    def TrustDirection(self) -> TrustDirection: ...
    @property
    def TrustType(self) -> TrustType: ...


class TrustRelationshipInformationCollection(ReadOnlyCollectionBase):
    def Contains(self, information: TrustRelationshipInformation) -> bool: ...
    def CopyTo(self, array: Set(TrustRelationshipInformation), index: int) -> None: ...
    @property
    def Item(self, index: int) -> TrustRelationshipInformation: ...
    def IndexOf(self, information: TrustRelationshipInformation) -> int: ...


class TrustType:
    TreeRoot = 0
    ParentChild = 1
    CrossLink = 2
    External = 3
    Forest = 4
    Kerberos = 5
    Unknown = 6
