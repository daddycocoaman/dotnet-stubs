__all__ = ['Design','Drawing2D','Imaging','Printing','Text']
from typing import Tuple, Set, Iterable, List


class Bitmap(Image):
    @overload
    def __init__(self, filename: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, original: Image): ...
    @overload
    def __init__(self, filename: str, useIcm: bool): ...
    @overload
    def __init__(self, type: Type, resource: str): ...
    @overload
    def __init__(self, width: int, height: int): ...
    @overload
    def __init__(self, original: Image, newSize: Size): ...
    @overload
    def __init__(self, stream: Stream, useIcm: bool): ...
    @overload
    def __init__(self, width: int, height: int, g: Graphics): ...
    @overload
    def __init__(self, width: int, height: int, format: PixelFormat): ...
    @overload
    def __init__(self, original: Image, width: int, height: int): ...
    @overload
    def __init__(self, width: int, height: int, stride: int, format: PixelFormat, scan0: IntPtr): ...
    @overload
    def Clone(self, rect: RectangleF, format: PixelFormat) -> Bitmap: ...
    @overload
    def Clone(self, rect: Rectangle, format: PixelFormat) -> Bitmap: ...
    def FromHicon(hicon: IntPtr) -> Bitmap: ...
    def FromResource(hinstance: IntPtr, bitmapName: str) -> Bitmap: ...
    @overload
    def GetHbitmap(self) -> IntPtr: ...
    @overload
    def GetHbitmap(self, background: Color) -> IntPtr: ...
    def GetHicon(self) -> IntPtr: ...
    def GetPixel(self, x: int, y: int) -> Color: ...
    @overload
    def LockBits(self, rect: Rectangle, flags: ImageLockMode, format: PixelFormat) -> BitmapData: ...
    @overload
    def LockBits(self, rect: Rectangle, flags: ImageLockMode, format: PixelFormat, bitmapData: BitmapData) -> BitmapData: ...
    @overload
    def MakeTransparent(self) -> None: ...
    @overload
    def MakeTransparent(self, transparentColor: Color) -> None: ...
    def SetPixel(self, x: int, y: int, color: Color) -> None: ...
    def SetResolution(self, xDpi: Single, yDpi: Single) -> None: ...
    def UnlockBits(self, bitmapdata: BitmapData) -> None: ...


class BitmapSuffixInSameAssemblyAttribute(Attribute):
    def __init__(self): ...


class BitmapSuffixInSatelliteAssemblyAttribute(Attribute):
    def __init__(self): ...


class Brush(MarshalByRefObject):
    def Clone(self) -> Object: ...
    def Dispose(self) -> None: ...


class Brushes(Object):
    @property
    def AliceBlue() -> Brush: ...
    @property
    def AntiqueWhite() -> Brush: ...
    @property
    def Aqua() -> Brush: ...
    @property
    def Aquamarine() -> Brush: ...
    @property
    def Azure() -> Brush: ...
    @property
    def Beige() -> Brush: ...
    @property
    def Bisque() -> Brush: ...
    @property
    def Black() -> Brush: ...
    @property
    def BlanchedAlmond() -> Brush: ...
    @property
    def Blue() -> Brush: ...
    @property
    def BlueViolet() -> Brush: ...
    @property
    def Brown() -> Brush: ...
    @property
    def BurlyWood() -> Brush: ...
    @property
    def CadetBlue() -> Brush: ...
    @property
    def Chartreuse() -> Brush: ...
    @property
    def Chocolate() -> Brush: ...
    @property
    def Coral() -> Brush: ...
    @property
    def CornflowerBlue() -> Brush: ...
    @property
    def Cornsilk() -> Brush: ...
    @property
    def Crimson() -> Brush: ...
    @property
    def Cyan() -> Brush: ...
    @property
    def DarkBlue() -> Brush: ...
    @property
    def DarkCyan() -> Brush: ...
    @property
    def DarkGoldenrod() -> Brush: ...
    @property
    def DarkGray() -> Brush: ...
    @property
    def DarkGreen() -> Brush: ...
    @property
    def DarkKhaki() -> Brush: ...
    @property
    def DarkMagenta() -> Brush: ...
    @property
    def DarkOliveGreen() -> Brush: ...
    @property
    def DarkOrange() -> Brush: ...
    @property
    def DarkOrchid() -> Brush: ...
    @property
    def DarkRed() -> Brush: ...
    @property
    def DarkSalmon() -> Brush: ...
    @property
    def DarkSeaGreen() -> Brush: ...
    @property
    def DarkSlateBlue() -> Brush: ...
    @property
    def DarkSlateGray() -> Brush: ...
    @property
    def DarkTurquoise() -> Brush: ...
    @property
    def DarkViolet() -> Brush: ...
    @property
    def DeepPink() -> Brush: ...
    @property
    def DeepSkyBlue() -> Brush: ...
    @property
    def DimGray() -> Brush: ...
    @property
    def DodgerBlue() -> Brush: ...
    @property
    def Firebrick() -> Brush: ...
    @property
    def FloralWhite() -> Brush: ...
    @property
    def ForestGreen() -> Brush: ...
    @property
    def Fuchsia() -> Brush: ...
    @property
    def Gainsboro() -> Brush: ...
    @property
    def GhostWhite() -> Brush: ...
    @property
    def Gold() -> Brush: ...
    @property
    def Goldenrod() -> Brush: ...
    @property
    def Gray() -> Brush: ...
    @property
    def Green() -> Brush: ...
    @property
    def GreenYellow() -> Brush: ...
    @property
    def Honeydew() -> Brush: ...
    @property
    def HotPink() -> Brush: ...
    @property
    def IndianRed() -> Brush: ...
    @property
    def Indigo() -> Brush: ...
    @property
    def Ivory() -> Brush: ...
    @property
    def Khaki() -> Brush: ...
    @property
    def Lavender() -> Brush: ...
    @property
    def LavenderBlush() -> Brush: ...
    @property
    def LawnGreen() -> Brush: ...
    @property
    def LemonChiffon() -> Brush: ...
    @property
    def LightBlue() -> Brush: ...
    @property
    def LightCoral() -> Brush: ...
    @property
    def LightCyan() -> Brush: ...
    @property
    def LightGoldenrodYellow() -> Brush: ...
    @property
    def LightGray() -> Brush: ...
    @property
    def LightGreen() -> Brush: ...
    @property
    def LightPink() -> Brush: ...
    @property
    def LightSalmon() -> Brush: ...
    @property
    def LightSeaGreen() -> Brush: ...
    @property
    def LightSkyBlue() -> Brush: ...
    @property
    def LightSlateGray() -> Brush: ...
    @property
    def LightSteelBlue() -> Brush: ...
    @property
    def LightYellow() -> Brush: ...
    @property
    def Lime() -> Brush: ...
    @property
    def LimeGreen() -> Brush: ...
    @property
    def Linen() -> Brush: ...
    @property
    def Magenta() -> Brush: ...
    @property
    def Maroon() -> Brush: ...
    @property
    def MediumAquamarine() -> Brush: ...
    @property
    def MediumBlue() -> Brush: ...
    @property
    def MediumOrchid() -> Brush: ...
    @property
    def MediumPurple() -> Brush: ...
    @property
    def MediumSeaGreen() -> Brush: ...
    @property
    def MediumSlateBlue() -> Brush: ...
    @property
    def MediumSpringGreen() -> Brush: ...
    @property
    def MediumTurquoise() -> Brush: ...
    @property
    def MediumVioletRed() -> Brush: ...
    @property
    def MidnightBlue() -> Brush: ...
    @property
    def MintCream() -> Brush: ...
    @property
    def MistyRose() -> Brush: ...
    @property
    def Moccasin() -> Brush: ...
    @property
    def NavajoWhite() -> Brush: ...
    @property
    def Navy() -> Brush: ...
    @property
    def OldLace() -> Brush: ...
    @property
    def Olive() -> Brush: ...
    @property
    def OliveDrab() -> Brush: ...
    @property
    def Orange() -> Brush: ...
    @property
    def OrangeRed() -> Brush: ...
    @property
    def Orchid() -> Brush: ...
    @property
    def PaleGoldenrod() -> Brush: ...
    @property
    def PaleGreen() -> Brush: ...
    @property
    def PaleTurquoise() -> Brush: ...
    @property
    def PaleVioletRed() -> Brush: ...
    @property
    def PapayaWhip() -> Brush: ...
    @property
    def PeachPuff() -> Brush: ...
    @property
    def Peru() -> Brush: ...
    @property
    def Pink() -> Brush: ...
    @property
    def Plum() -> Brush: ...
    @property
    def PowderBlue() -> Brush: ...
    @property
    def Purple() -> Brush: ...
    @property
    def Red() -> Brush: ...
    @property
    def RosyBrown() -> Brush: ...
    @property
    def RoyalBlue() -> Brush: ...
    @property
    def SaddleBrown() -> Brush: ...
    @property
    def Salmon() -> Brush: ...
    @property
    def SandyBrown() -> Brush: ...
    @property
    def SeaGreen() -> Brush: ...
    @property
    def SeaShell() -> Brush: ...
    @property
    def Sienna() -> Brush: ...
    @property
    def Silver() -> Brush: ...
    @property
    def SkyBlue() -> Brush: ...
    @property
    def SlateBlue() -> Brush: ...
    @property
    def SlateGray() -> Brush: ...
    @property
    def Snow() -> Brush: ...
    @property
    def SpringGreen() -> Brush: ...
    @property
    def SteelBlue() -> Brush: ...
    @property
    def Tan() -> Brush: ...
    @property
    def Teal() -> Brush: ...
    @property
    def Thistle() -> Brush: ...
    @property
    def Tomato() -> Brush: ...
    @property
    def Transparent() -> Brush: ...
    @property
    def Turquoise() -> Brush: ...
    @property
    def Violet() -> Brush: ...
    @property
    def Wheat() -> Brush: ...
    @property
    def White() -> Brush: ...
    @property
    def WhiteSmoke() -> Brush: ...
    @property
    def Yellow() -> Brush: ...
    @property
    def YellowGreen() -> Brush: ...


class BufferedGraphics(Object):
    def Dispose(self) -> None: ...
    @property
    def Graphics(self) -> Graphics: ...
    @overload
    def Render(self) -> None: ...
    @overload
    def Render(self, targetDC: IntPtr) -> None: ...
    @overload
    def Render(self, target: Graphics) -> None: ...


class BufferedGraphicsContext(Object):
    def __init__(self): ...
    @overload
    def Allocate(self, targetGraphics: Graphics, targetRectangle: Rectangle) -> BufferedGraphics: ...
    @overload
    def Allocate(self, targetDC: IntPtr, targetRectangle: Rectangle) -> BufferedGraphics: ...
    def Dispose(self) -> None: ...
    @property
    def MaximumBuffer(self) -> Size: ...
    def Invalidate(self) -> None: ...
    @MaximumBuffer.setter
    def MaximumBuffer(self, value: Size) -> None: ...


class BufferedGraphicsManager(Object):
    @property
    def Current() -> BufferedGraphicsContext: ...


class CharacterRange(ValueType):
    def __init__(self, First: int, Length: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def First(self) -> int: ...
    @property
    def Length(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(cr1: CharacterRange, cr2: CharacterRange) -> bool: ...
    def op_Inequality(cr1: CharacterRange, cr2: CharacterRange) -> bool: ...
    @First.setter
    def First(self, value: int) -> None: ...
    @Length.setter
    def Length(self, value: int) -> None: ...


class ContentAlignment:
    TopLeft = 1
    TopCenter = 2
    TopRight = 4
    MiddleLeft = 16
    MiddleCenter = 32
    MiddleRight = 64
    BottomLeft = 256
    BottomCenter = 512
    BottomRight = 1024


class CopyPixelOperation:
    Blackness = 66
    NotSourceErase = 1114278
    NotSourceCopy = 3342344
    SourceErase = 4457256
    DestinationInvert = 5570569
    PatInvert = 5898313
    SourceInvert = 6684742
    SourceAnd = 8913094
    MergePaint = 12255782
    MergeCopy = 12583114
    SourceCopy = 13369376
    SourcePaint = 15597702
    PatCopy = 15728673
    PatPaint = 16452105
    Whiteness = 16711778
    CaptureBlt = 1073741824
    NoMirrorBitmap = -2147483648


class DrawImageAbort(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, callbackdata: IntPtr, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    def Invoke(self, callbackdata: IntPtr) -> bool: ...


class EnumerateMetafileProc(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, recordType: EmfPlusRecordType, flags: int, dataSize: int, data: IntPtr, callbackData: PlayRecordCallback, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    def Invoke(self, recordType: EmfPlusRecordType, flags: int, dataSize: int, data: IntPtr, callbackData: PlayRecordCallback) -> bool: ...


class Font(MarshalByRefObject):
    @overload
    def __init__(self, prototype: Font, newStyle: FontStyle): ...
    @overload
    def __init__(self, family: FontFamily, emSize: Single): ...
    @overload
    def __init__(self, familyName: str, emSize: Single): ...
    @overload
    def __init__(self, family: FontFamily, emSize: Single, style: FontStyle): ...
    @overload
    def __init__(self, family: FontFamily, emSize: Single, unit: GraphicsUnit): ...
    @overload
    def __init__(self, familyName: str, emSize: Single, style: FontStyle): ...
    @overload
    def __init__(self, familyName: str, emSize: Single, unit: GraphicsUnit): ...
    @overload
    def __init__(self, family: FontFamily, emSize: Single, style: FontStyle, unit: GraphicsUnit): ...
    @overload
    def __init__(self, familyName: str, emSize: Single, style: FontStyle, unit: GraphicsUnit): ...
    @overload
    def __init__(self, family: FontFamily, emSize: Single, style: FontStyle, unit: GraphicsUnit, gdiCharSet: Byte): ...
    @overload
    def __init__(self, familyName: str, emSize: Single, style: FontStyle, unit: GraphicsUnit, gdiCharSet: Byte): ...
    @overload
    def __init__(self, family: FontFamily, emSize: Single, style: FontStyle, unit: GraphicsUnit, gdiCharSet: Byte, gdiVerticalFont: bool): ...
    @overload
    def __init__(self, familyName: str, emSize: Single, style: FontStyle, unit: GraphicsUnit, gdiCharSet: Byte, gdiVerticalFont: bool): ...
    def Clone(self) -> Object: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def FromHdc(hdc: IntPtr) -> Font: ...
    def FromHfont(hfont: IntPtr) -> Font: ...
    @overload
    def FromLogFont(lf: Object) -> Font: ...
    @overload
    def FromLogFont(lf: Object, hdc: IntPtr) -> Font: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def FontFamily(self) -> FontFamily: ...
    @property
    def GdiCharSet(self) -> Byte: ...
    @property
    def GdiVerticalFont(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsSystemFont(self) -> bool: ...
    @property
    def Italic(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def OriginalFontName(self) -> str: ...
    @property
    def Size(self) -> Single: ...
    @property
    def SizeInPoints(self) -> Single: ...
    @property
    def Strikeout(self) -> bool: ...
    @property
    def Style(self) -> FontStyle: ...
    @property
    def SystemFontName(self) -> str: ...
    @property
    def Underline(self) -> bool: ...
    @property
    def Unit(self) -> GraphicsUnit: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetHeight(self) -> Single: ...
    @overload
    def GetHeight(self, graphics: Graphics) -> Single: ...
    @overload
    def GetHeight(self, dpi: Single) -> Single: ...
    def ToHfont(self) -> IntPtr: ...
    @overload
    def ToLogFont(self, logFont: Object) -> None: ...
    @overload
    def ToLogFont(self, logFont: Object, graphics: Graphics) -> None: ...
    def ToString(self) -> str: ...


class FontConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> Object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class FontFamily(MarshalByRefObject):
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, genericFamily: GenericFontFamilies): ...
    @overload
    def __init__(self, name: str, fontCollection: FontCollection): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Families() -> Set(FontFamily): ...
    @property
    def GenericMonospace() -> FontFamily: ...
    @property
    def GenericSansSerif() -> FontFamily: ...
    @property
    def GenericSerif() -> FontFamily: ...
    @property
    def Name(self) -> str: ...
    def GetCellAscent(self, style: FontStyle) -> int: ...
    def GetCellDescent(self, style: FontStyle) -> int: ...
    def GetEmHeight(self, style: FontStyle) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetLineSpacing(self, style: FontStyle) -> int: ...
    def GetName(self, language: int) -> str: ...
    def IsStyleAvailable(self, style: FontStyle) -> bool: ...
    def ToString(self) -> str: ...


class FontNameConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class FontStyle:
    Regular = 0
    Bold = 1
    Italic = 2
    Underline = 4
    Strikeout = 8


class FontUnitConverter(EnumConverter):
    def __init__(self): ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...


class GetThumbnailImageAbort(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    def Invoke(self) -> bool: ...


class Graphics(MarshalByRefObject):
    def AddMetafileComment(self, data: Set(Byte)) -> None: ...
    @overload
    def BeginContainer(self) -> GraphicsContainer: ...
    @overload
    def BeginContainer(self, dstrect: RectangleF, srcrect: RectangleF, unit: GraphicsUnit) -> GraphicsContainer: ...
    @overload
    def BeginContainer(self, dstrect: Rectangle, srcrect: Rectangle, unit: GraphicsUnit) -> GraphicsContainer: ...
    def Clear(self, color: Color) -> None: ...
    @overload
    def CopyFromScreen(self, upperLeftSource: Point, upperLeftDestination: Point, blockRegionSize: Size) -> None: ...
    @overload
    def CopyFromScreen(self, upperLeftSource: Point, upperLeftDestination: Point, blockRegionSize: Size, copyPixelOperation: CopyPixelOperation) -> None: ...
    @overload
    def CopyFromScreen(self, sourceX: int, sourceY: int, destinationX: int, destinationY: int, blockRegionSize: Size) -> None: ...
    @overload
    def CopyFromScreen(self, sourceX: int, sourceY: int, destinationX: int, destinationY: int, blockRegionSize: Size, copyPixelOperation: CopyPixelOperation) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, rect: RectangleF, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, rect: Rectangle, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, x: int, y: int, width: int, height: int, startAngle: int, sweepAngle: int) -> None: ...
    @overload
    def DrawBezier(self, pen: Pen, pt1: Point, pt2: Point, pt3: Point, pt4: Point) -> None: ...
    @overload
    def DrawBezier(self, pen: Pen, pt1: PointF, pt2: PointF, pt3: PointF, pt4: PointF) -> None: ...
    @overload
    def DrawBezier(self, pen: Pen, x1: Single, y1: Single, x2: Single, y2: Single, x3: Single, y3: Single, x4: Single, y4: Single) -> None: ...
    @overload
    def DrawBeziers(self, pen: Pen, points: Set(PointF)) -> None: ...
    @overload
    def DrawBeziers(self, pen: Pen, points: Set(Point)) -> None: ...
    @overload
    def DrawClosedCurve(self, pen: Pen, points: Set(PointF)) -> None: ...
    @overload
    def DrawClosedCurve(self, pen: Pen, points: Set(Point)) -> None: ...
    @overload
    def DrawClosedCurve(self, pen: Pen, points: Set(PointF), tension: Single, fillmode: FillMode) -> None: ...
    @overload
    def DrawClosedCurve(self, pen: Pen, points: Set(Point), tension: Single, fillmode: FillMode) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: Set(Point)) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: Set(PointF)) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: Set(PointF), tension: Single) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: Set(Point), tension: Single) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: Set(PointF), offset: int, numberOfSegments: int) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: Set(Point), offset: int, numberOfSegments: int, tension: Single) -> None: ...
    @overload
    def DrawCurve(self, pen: Pen, points: Set(PointF), offset: int, numberOfSegments: int, tension: Single) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, rect: Rectangle) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, rect: RectangleF) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def DrawIcon(self, icon: Icon, targetRect: Rectangle) -> None: ...
    @overload
    def DrawIcon(self, icon: Icon, x: int, y: int) -> None: ...
    def DrawIconUnstretched(self, icon: Icon, targetRect: Rectangle) -> None: ...
    @overload
    def DrawImage(self, image: Image, rect: RectangleF) -> None: ...
    @overload
    def DrawImage(self, image: Image, point: PointF) -> None: ...
    @overload
    def DrawImage(self, image: Image, rect: Rectangle) -> None: ...
    @overload
    def DrawImage(self, image: Image, point: Point) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: Set(Point)) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: Set(PointF)) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: int, y: int) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: Single, y: Single) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: Set(Point), srcRect: Rectangle, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: Set(PointF), srcRect: RectangleF, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcRect: Rectangle, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: RectangleF, srcRect: RectangleF, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: Set(Point), srcRect: Rectangle, srcUnit: GraphicsUnit, imageAttr: ImageAttributes) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: Set(PointF), srcRect: RectangleF, srcUnit: GraphicsUnit, imageAttr: ImageAttributes) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: int, y: int, srcRect: Rectangle, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: Single, y: Single, srcRect: RectangleF, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: Set(PointF), srcRect: RectangleF, srcUnit: GraphicsUnit, imageAttr: ImageAttributes, callback: DrawImageAbort) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: Set(Point), srcRect: Rectangle, srcUnit: GraphicsUnit, imageAttr: ImageAttributes, callback: DrawImageAbort) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: int, srcY: int, srcWidth: int, srcHeight: int, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: Single, srcY: Single, srcWidth: Single, srcHeight: Single, srcUnit: GraphicsUnit) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: Set(Point), srcRect: Rectangle, srcUnit: GraphicsUnit, imageAttr: ImageAttributes, callback: DrawImageAbort, callbackData: int) -> None: ...
    @overload
    def DrawImage(self, image: Image, destPoints: Set(PointF), srcRect: RectangleF, srcUnit: GraphicsUnit, imageAttr: ImageAttributes, callback: DrawImageAbort, callbackData: int) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: Single, srcY: Single, srcWidth: Single, srcHeight: Single, srcUnit: GraphicsUnit, imageAttrs: ImageAttributes) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: int, srcY: int, srcWidth: int, srcHeight: int, srcUnit: GraphicsUnit, imageAttr: ImageAttributes) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: Single, srcY: Single, srcWidth: Single, srcHeight: Single, srcUnit: GraphicsUnit, imageAttrs: ImageAttributes, callback: DrawImageAbort) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: int, srcY: int, srcWidth: int, srcHeight: int, srcUnit: GraphicsUnit, imageAttr: ImageAttributes, callback: DrawImageAbort) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: int, srcY: int, srcWidth: int, srcHeight: int, srcUnit: GraphicsUnit, imageAttrs: ImageAttributes, callback: DrawImageAbort, callbackData: IntPtr) -> None: ...
    @overload
    def DrawImage(self, image: Image, destRect: Rectangle, srcX: Single, srcY: Single, srcWidth: Single, srcHeight: Single, srcUnit: GraphicsUnit, imageAttrs: ImageAttributes, callback: DrawImageAbort, callbackData: IntPtr) -> None: ...
    @overload
    def DrawImageUnscaled(self, image: Image, point: Point) -> None: ...
    @overload
    def DrawImageUnscaled(self, image: Image, rect: Rectangle) -> None: ...
    @overload
    def DrawImageUnscaled(self, image: Image, x: int, y: int) -> None: ...
    @overload
    def DrawImageUnscaled(self, image: Image, x: int, y: int, width: int, height: int) -> None: ...
    def DrawImageUnscaledAndClipped(self, image: Image, rect: Rectangle) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, pt1: Point, pt2: Point) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, pt1: PointF, pt2: PointF) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, x1: Single, y1: Single, x2: Single, y2: Single) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, x1: int, y1: int, x2: int, y2: int) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: Set(PointF)) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: Set(Point)) -> None: ...
    def DrawPath(self, pen: Pen, path: GraphicsPath) -> None: ...
    @overload
    def DrawPie(self, pen: Pen, rect: Rectangle, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def DrawPie(self, pen: Pen, rect: RectangleF, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def DrawPie(self, pen: Pen, x: int, y: int, width: int, height: int, startAngle: int, sweepAngle: int) -> None: ...
    @overload
    def DrawPie(self, pen: Pen, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def DrawPolygon(self, pen: Pen, points: Set(Point)) -> None: ...
    @overload
    def DrawPolygon(self, pen: Pen, points: Set(PointF)) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, rect: Rectangle) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def DrawRectangles(self, pen: Pen, rects: Set(RectangleF)) -> None: ...
    @overload
    def DrawRectangles(self, pen: Pen, rects: Set(Rectangle)) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, layoutRectangle: RectangleF) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, point: PointF) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, layoutRectangle: RectangleF, format: StringFormat) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, point: PointF, format: StringFormat) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, x: Single, y: Single) -> None: ...
    @overload
    def DrawString(self, s: str, font: Font, brush: Brush, x: Single, y: Single, format: StringFormat) -> None: ...
    def EndContainer(self, container: GraphicsContainer) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: RectangleF, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: Point, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(Point), callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(PointF), callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: PointF, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: Rectangle, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: Rectangle, callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(PointF), callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(Point), callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: RectangleF, callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: Point, callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: PointF, callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(Point), callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: PointF, callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: Point, callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: RectangleF, callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(PointF), srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: Rectangle, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(Point), srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: PointF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(PointF), callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: Point, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: Rectangle, callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: RectangleF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: PointF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: Point, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: RectangleF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(Point), srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: Rectangle, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(PointF), srcRect: RectangleF, srcUnit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: Point, srcRect: Rectangle, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: RectangleF, srcRect: RectangleF, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(PointF), srcRect: RectangleF, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoints: Set(Point), srcRect: Rectangle, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destRect: Rectangle, srcRect: Rectangle, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def EnumerateMetafile(self, metafile: Metafile, destPoint: PointF, srcRect: RectangleF, unit: GraphicsUnit, callback: EnumerateMetafileProc, callbackData: IntPtr, imageAttr: ImageAttributes) -> None: ...
    @overload
    def ExcludeClip(self, region: Region) -> None: ...
    @overload
    def ExcludeClip(self, rect: Rectangle) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: Set(PointF)) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: Set(Point)) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: Set(Point), fillmode: FillMode) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: Set(PointF), fillmode: FillMode) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: Set(Point), fillmode: FillMode, tension: Single) -> None: ...
    @overload
    def FillClosedCurve(self, brush: Brush, points: Set(PointF), fillmode: FillMode, tension: Single) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, rect: Rectangle) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, rect: RectangleF) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, x: Single, y: Single, width: Single, height: Single) -> None: ...
    def FillPath(self, brush: Brush, path: GraphicsPath) -> None: ...
    @overload
    def FillPie(self, brush: Brush, rect: Rectangle, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def FillPie(self, brush: Brush, x: int, y: int, width: int, height: int, startAngle: int, sweepAngle: int) -> None: ...
    @overload
    def FillPie(self, brush: Brush, x: Single, y: Single, width: Single, height: Single, startAngle: Single, sweepAngle: Single) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: Set(PointF)) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: Set(Point)) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: Set(PointF), fillMode: FillMode) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: Set(Point), fillMode: FillMode) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, rect: Rectangle) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, rect: RectangleF) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, x: Single, y: Single, width: Single, height: Single) -> None: ...
    @overload
    def FillRectangles(self, brush: Brush, rects: Set(Rectangle)) -> None: ...
    @overload
    def FillRectangles(self, brush: Brush, rects: Set(RectangleF)) -> None: ...
    def FillRegion(self, brush: Brush, region: Region) -> None: ...
    @overload
    def Flush(self) -> None: ...
    @overload
    def Flush(self, intention: FlushIntention) -> None: ...
    @overload
    def FromHdc(hdc: IntPtr) -> Graphics: ...
    @overload
    def FromHdc(hdc: IntPtr, hdevice: IntPtr) -> Graphics: ...
    def FromHdcInternal(hdc: IntPtr) -> Graphics: ...
    def FromHwnd(hwnd: IntPtr) -> Graphics: ...
    def FromHwndInternal(hwnd: IntPtr) -> Graphics: ...
    def FromImage(image: Image) -> Graphics: ...
    @property
    def Clip(self) -> Region: ...
    @property
    def ClipBounds(self) -> RectangleF: ...
    @property
    def CompositingMode(self) -> CompositingMode: ...
    @property
    def CompositingQuality(self) -> CompositingQuality: ...
    @property
    def DpiX(self) -> Single: ...
    @property
    def DpiY(self) -> Single: ...
    @property
    def InterpolationMode(self) -> InterpolationMode: ...
    @property
    def IsClipEmpty(self) -> bool: ...
    @property
    def IsVisibleClipEmpty(self) -> bool: ...
    @property
    def PageScale(self) -> Single: ...
    @property
    def PageUnit(self) -> GraphicsUnit: ...
    @property
    def PixelOffsetMode(self) -> PixelOffsetMode: ...
    @property
    def RenderingOrigin(self) -> Point: ...
    @property
    def SmoothingMode(self) -> SmoothingMode: ...
    @property
    def TextContrast(self) -> int: ...
    @property
    def TextRenderingHint(self) -> TextRenderingHint: ...
    @property
    def Transform(self) -> Matrix: ...
    @property
    def TransformElements(self) -> Matrix3x2: ...
    @property
    def VisibleClipBounds(self) -> RectangleF: ...
    @overload
    def GetContextInfo(self) -> Tuple[PointF]: ...
    @overload
    def GetContextInfo(self) -> Tuple[PointF, Region]: ...
    def GetHalftonePalette() -> IntPtr: ...
    def GetHdc(self) -> IntPtr: ...
    def GetNearestColor(self, color: Color) -> Color: ...
    @overload
    def IntersectClip(self, region: Region) -> None: ...
    @overload
    def IntersectClip(self, rect: RectangleF) -> None: ...
    @overload
    def IntersectClip(self, rect: Rectangle) -> None: ...
    @overload
    def IsVisible(self, point: PointF) -> bool: ...
    @overload
    def IsVisible(self, point: Point) -> bool: ...
    @overload
    def IsVisible(self, rect: RectangleF) -> bool: ...
    @overload
    def IsVisible(self, rect: Rectangle) -> bool: ...
    @overload
    def IsVisible(self, x: Single, y: Single) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int) -> bool: ...
    @overload
    def IsVisible(self, x: Single, y: Single, width: Single, height: Single) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int, width: int, height: int) -> bool: ...
    def MeasureCharacterRanges(self, text: str, font: Font, layoutRect: RectangleF, stringFormat: StringFormat) -> Set(Region): ...
    @overload
    def MeasureString(self, text: str, font: Font) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, width: int) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, layoutArea: SizeF) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, origin: PointF, stringFormat: StringFormat) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, width: int, format: StringFormat) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, layoutArea: SizeF, stringFormat: StringFormat) -> SizeF: ...
    @overload
    def MeasureString(self, text: str, font: Font, layoutArea: SizeF, stringFormat: StringFormat) -> Tuple[SizeF, int, int]: ...
    @overload
    def MultiplyTransform(self, matrix: Matrix) -> None: ...
    @overload
    def MultiplyTransform(self, matrix: Matrix, order: MatrixOrder) -> None: ...
    @overload
    def ReleaseHdc(self) -> None: ...
    @overload
    def ReleaseHdc(self, hdc: IntPtr) -> None: ...
    def ReleaseHdcInternal(self, hdc: IntPtr) -> None: ...
    def ResetClip(self) -> None: ...
    def ResetTransform(self) -> None: ...
    def Restore(self, gstate: GraphicsState) -> None: ...
    @overload
    def RotateTransform(self, angle: Single) -> None: ...
    @overload
    def RotateTransform(self, angle: Single, order: MatrixOrder) -> None: ...
    def Save(self) -> GraphicsState: ...
    @overload
    def ScaleTransform(self, sx: Single, sy: Single) -> None: ...
    @overload
    def ScaleTransform(self, sx: Single, sy: Single, order: MatrixOrder) -> None: ...
    @Clip.setter
    def Clip(self, value: Region) -> None: ...
    @CompositingMode.setter
    def CompositingMode(self, value: CompositingMode) -> None: ...
    @CompositingQuality.setter
    def CompositingQuality(self, value: CompositingQuality) -> None: ...
    @InterpolationMode.setter
    def InterpolationMode(self, value: InterpolationMode) -> None: ...
    @PageScale.setter
    def PageScale(self, value: Single) -> None: ...
    @PageUnit.setter
    def PageUnit(self, value: GraphicsUnit) -> None: ...
    @PixelOffsetMode.setter
    def PixelOffsetMode(self, value: PixelOffsetMode) -> None: ...
    @RenderingOrigin.setter
    def RenderingOrigin(self, value: Point) -> None: ...
    @SmoothingMode.setter
    def SmoothingMode(self, value: SmoothingMode) -> None: ...
    @TextContrast.setter
    def TextContrast(self, value: int) -> None: ...
    @TextRenderingHint.setter
    def TextRenderingHint(self, value: TextRenderingHint) -> None: ...
    @Transform.setter
    def Transform(self, value: Matrix) -> None: ...
    @TransformElements.setter
    def TransformElements(self, value: Matrix3x2) -> None: ...
    @overload
    def SetClip(self, g: Graphics) -> None: ...
    @overload
    def SetClip(self, rect: Rectangle) -> None: ...
    @overload
    def SetClip(self, rect: RectangleF) -> None: ...
    @overload
    def SetClip(self, path: GraphicsPath) -> None: ...
    @overload
    def SetClip(self, rect: Rectangle, combineMode: CombineMode) -> None: ...
    @overload
    def SetClip(self, rect: RectangleF, combineMode: CombineMode) -> None: ...
    @overload
    def SetClip(self, path: GraphicsPath, combineMode: CombineMode) -> None: ...
    @overload
    def SetClip(self, region: Region, combineMode: CombineMode) -> None: ...
    @overload
    def SetClip(self, g: Graphics, combineMode: CombineMode) -> None: ...
    @overload
    def TransformPoints(self, destSpace: CoordinateSpace, srcSpace: CoordinateSpace, pts: Set(Point)) -> None: ...
    @overload
    def TransformPoints(self, destSpace: CoordinateSpace, srcSpace: CoordinateSpace, pts: Set(PointF)) -> None: ...
    @overload
    def TranslateClip(self, dx: Single, dy: Single) -> None: ...
    @overload
    def TranslateClip(self, dx: int, dy: int) -> None: ...
    @overload
    def TranslateTransform(self, dx: Single, dy: Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: Single, dy: Single, order: MatrixOrder) -> None: ...


class GraphicsUnit:
    World = 0
    Display = 1
    Pixel = 2
    Point = 3
    Inch = 4
    Document = 5
    Millimeter = 6


class Icon(MarshalByRefObject):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, fileName: str, size: Size): ...
    @overload
    def __init__(self, original: Icon, size: Size): ...
    @overload
    def __init__(self, type: Type, resource: str): ...
    @overload
    def __init__(self, stream: Stream, size: Size): ...
    @overload
    def __init__(self, fileName: str, width: int, height: int): ...
    @overload
    def __init__(self, original: Icon, width: int, height: int): ...
    @overload
    def __init__(self, stream: Stream, width: int, height: int): ...
    def Clone(self) -> Object: ...
    def Dispose(self) -> None: ...
    def ExtractAssociatedIcon(filePath: str) -> Icon: ...
    def FromHandle(handle: IntPtr) -> Icon: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def Height(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Width(self) -> int: ...
    def Save(self, outputStream: Stream) -> None: ...
    def ToBitmap(self) -> Bitmap: ...
    def ToString(self) -> str: ...


class IconConverter(ExpandableObjectConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class IDeviceContext:
    def GetHdc(self) -> IntPtr: ...
    def ReleaseHdc(self) -> None: ...


class Image(MarshalByRefObject):
    def Clone(self) -> Object: ...
    def Dispose(self) -> None: ...
    @overload
    def FromFile(filename: str) -> Image: ...
    @overload
    def FromFile(filename: str, useEmbeddedColorManagement: bool) -> Image: ...
    @overload
    def FromHbitmap(hbitmap: IntPtr) -> Bitmap: ...
    @overload
    def FromHbitmap(hbitmap: IntPtr, hpalette: IntPtr) -> Bitmap: ...
    @overload
    def FromStream(stream: Stream) -> Image: ...
    @overload
    def FromStream(stream: Stream, useEmbeddedColorManagement: bool) -> Image: ...
    @overload
    def FromStream(stream: Stream, useEmbeddedColorManagement: bool, validateImageData: bool) -> Image: ...
    @property
    def Flags(self) -> int: ...
    @property
    def FrameDimensionsList(self) -> Set(Guid): ...
    @property
    def Height(self) -> int: ...
    @property
    def HorizontalResolution(self) -> Single: ...
    @property
    def Palette(self) -> ColorPalette: ...
    @property
    def PhysicalDimension(self) -> SizeF: ...
    @property
    def PixelFormat(self) -> PixelFormat: ...
    @property
    def PropertyIdList(self) -> Set(int): ...
    @property
    def PropertyItems(self) -> Set(PropertyItem): ...
    @property
    def RawFormat(self) -> ImageFormat: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def VerticalResolution(self) -> Single: ...
    @property
    def Width(self) -> int: ...
    def GetBounds(self, pageUnit: GraphicsUnit) -> Tuple[RectangleF, GraphicsUnit]: ...
    def GetEncoderParameterList(self, encoder: Guid) -> EncoderParameters: ...
    def GetFrameCount(self, dimension: FrameDimension) -> int: ...
    def GetPixelFormatSize(pixfmt: PixelFormat) -> int: ...
    def GetPropertyItem(self, propid: int) -> PropertyItem: ...
    def GetThumbnailImage(self, thumbWidth: int, thumbHeight: int, callback: GetThumbnailImageAbort, callbackData: IntPtr) -> Image: ...
    def IsAlphaPixelFormat(pixfmt: PixelFormat) -> bool: ...
    def IsCanonicalPixelFormat(pixfmt: PixelFormat) -> bool: ...
    def IsExtendedPixelFormat(pixfmt: PixelFormat) -> bool: ...
    def RemovePropertyItem(self, propid: int) -> None: ...
    def RotateFlip(self, rotateFlipType: RotateFlipType) -> None: ...
    @overload
    def Save(self, filename: str) -> None: ...
    @overload
    def Save(self, filename: str, format: ImageFormat) -> None: ...
    @overload
    def Save(self, stream: Stream, format: ImageFormat) -> None: ...
    @overload
    def Save(self, filename: str, encoder: ImageCodecInfo, encoderParams: EncoderParameters) -> None: ...
    @overload
    def Save(self, stream: Stream, encoder: ImageCodecInfo, encoderParams: EncoderParameters) -> None: ...
    @overload
    def SaveAdd(self, encoderParams: EncoderParameters) -> None: ...
    @overload
    def SaveAdd(self, image: Image, encoderParams: EncoderParameters) -> None: ...
    def SelectActiveFrame(self, dimension: FrameDimension, frameIndex: int) -> int: ...
    @Palette.setter
    def Palette(self, value: ColorPalette) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    def SetPropertyItem(self, propitem: PropertyItem) -> None: ...


class ImageAnimator(Object):
    def Animate(image: Image, onFrameChangedHandler: EventHandler) -> None: ...
    def CanAnimate(image: Image) -> bool: ...
    def StopAnimate(image: Image, onFrameChangedHandler: EventHandler) -> None: ...
    @overload
    def UpdateFrames() -> None: ...
    @overload
    def UpdateFrames(image: Image) -> None: ...


class ImageConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class ImageFormatConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class Pen(MarshalByRefObject):
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, brush: Brush): ...
    @overload
    def __init__(self, color: Color, width: Single): ...
    @overload
    def __init__(self, brush: Brush, width: Single): ...
    def Clone(self) -> Object: ...
    def Dispose(self) -> None: ...
    @property
    def Alignment(self) -> PenAlignment: ...
    @property
    def Brush(self) -> Brush: ...
    @property
    def Color(self) -> Color: ...
    @property
    def CompoundArray(self) -> Set(Single): ...
    @property
    def CustomEndCap(self) -> CustomLineCap: ...
    @property
    def CustomStartCap(self) -> CustomLineCap: ...
    @property
    def DashCap(self) -> DashCap: ...
    @property
    def DashOffset(self) -> Single: ...
    @property
    def DashPattern(self) -> Set(Single): ...
    @property
    def DashStyle(self) -> DashStyle: ...
    @property
    def EndCap(self) -> LineCap: ...
    @property
    def LineJoin(self) -> LineJoin: ...
    @property
    def MiterLimit(self) -> Single: ...
    @property
    def PenType(self) -> PenType: ...
    @property
    def StartCap(self) -> LineCap: ...
    @property
    def Transform(self) -> Matrix: ...
    @property
    def Width(self) -> Single: ...
    @overload
    def MultiplyTransform(self, matrix: Matrix) -> None: ...
    @overload
    def MultiplyTransform(self, matrix: Matrix, order: MatrixOrder) -> None: ...
    def ResetTransform(self) -> None: ...
    @overload
    def RotateTransform(self, angle: Single) -> None: ...
    @overload
    def RotateTransform(self, angle: Single, order: MatrixOrder) -> None: ...
    @overload
    def ScaleTransform(self, sx: Single, sy: Single) -> None: ...
    @overload
    def ScaleTransform(self, sx: Single, sy: Single, order: MatrixOrder) -> None: ...
    @Alignment.setter
    def Alignment(self, value: PenAlignment) -> None: ...
    @Brush.setter
    def Brush(self, value: Brush) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @CompoundArray.setter
    def CompoundArray(self, value: Set(Single)) -> None: ...
    @CustomEndCap.setter
    def CustomEndCap(self, value: CustomLineCap) -> None: ...
    @CustomStartCap.setter
    def CustomStartCap(self, value: CustomLineCap) -> None: ...
    @DashCap.setter
    def DashCap(self, value: DashCap) -> None: ...
    @DashOffset.setter
    def DashOffset(self, value: Single) -> None: ...
    @DashPattern.setter
    def DashPattern(self, value: Set(Single)) -> None: ...
    @DashStyle.setter
    def DashStyle(self, value: DashStyle) -> None: ...
    @EndCap.setter
    def EndCap(self, value: LineCap) -> None: ...
    @LineJoin.setter
    def LineJoin(self, value: LineJoin) -> None: ...
    @MiterLimit.setter
    def MiterLimit(self, value: Single) -> None: ...
    @StartCap.setter
    def StartCap(self, value: LineCap) -> None: ...
    @Transform.setter
    def Transform(self, value: Matrix) -> None: ...
    @Width.setter
    def Width(self, value: Single) -> None: ...
    def SetLineCap(self, startCap: LineCap, endCap: LineCap, dashCap: DashCap) -> None: ...
    @overload
    def TranslateTransform(self, dx: Single, dy: Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: Single, dy: Single, order: MatrixOrder) -> None: ...


class Pens(Object):
    @property
    def AliceBlue() -> Pen: ...
    @property
    def AntiqueWhite() -> Pen: ...
    @property
    def Aqua() -> Pen: ...
    @property
    def Aquamarine() -> Pen: ...
    @property
    def Azure() -> Pen: ...
    @property
    def Beige() -> Pen: ...
    @property
    def Bisque() -> Pen: ...
    @property
    def Black() -> Pen: ...
    @property
    def BlanchedAlmond() -> Pen: ...
    @property
    def Blue() -> Pen: ...
    @property
    def BlueViolet() -> Pen: ...
    @property
    def Brown() -> Pen: ...
    @property
    def BurlyWood() -> Pen: ...
    @property
    def CadetBlue() -> Pen: ...
    @property
    def Chartreuse() -> Pen: ...
    @property
    def Chocolate() -> Pen: ...
    @property
    def Coral() -> Pen: ...
    @property
    def CornflowerBlue() -> Pen: ...
    @property
    def Cornsilk() -> Pen: ...
    @property
    def Crimson() -> Pen: ...
    @property
    def Cyan() -> Pen: ...
    @property
    def DarkBlue() -> Pen: ...
    @property
    def DarkCyan() -> Pen: ...
    @property
    def DarkGoldenrod() -> Pen: ...
    @property
    def DarkGray() -> Pen: ...
    @property
    def DarkGreen() -> Pen: ...
    @property
    def DarkKhaki() -> Pen: ...
    @property
    def DarkMagenta() -> Pen: ...
    @property
    def DarkOliveGreen() -> Pen: ...
    @property
    def DarkOrange() -> Pen: ...
    @property
    def DarkOrchid() -> Pen: ...
    @property
    def DarkRed() -> Pen: ...
    @property
    def DarkSalmon() -> Pen: ...
    @property
    def DarkSeaGreen() -> Pen: ...
    @property
    def DarkSlateBlue() -> Pen: ...
    @property
    def DarkSlateGray() -> Pen: ...
    @property
    def DarkTurquoise() -> Pen: ...
    @property
    def DarkViolet() -> Pen: ...
    @property
    def DeepPink() -> Pen: ...
    @property
    def DeepSkyBlue() -> Pen: ...
    @property
    def DimGray() -> Pen: ...
    @property
    def DodgerBlue() -> Pen: ...
    @property
    def Firebrick() -> Pen: ...
    @property
    def FloralWhite() -> Pen: ...
    @property
    def ForestGreen() -> Pen: ...
    @property
    def Fuchsia() -> Pen: ...
    @property
    def Gainsboro() -> Pen: ...
    @property
    def GhostWhite() -> Pen: ...
    @property
    def Gold() -> Pen: ...
    @property
    def Goldenrod() -> Pen: ...
    @property
    def Gray() -> Pen: ...
    @property
    def Green() -> Pen: ...
    @property
    def GreenYellow() -> Pen: ...
    @property
    def Honeydew() -> Pen: ...
    @property
    def HotPink() -> Pen: ...
    @property
    def IndianRed() -> Pen: ...
    @property
    def Indigo() -> Pen: ...
    @property
    def Ivory() -> Pen: ...
    @property
    def Khaki() -> Pen: ...
    @property
    def Lavender() -> Pen: ...
    @property
    def LavenderBlush() -> Pen: ...
    @property
    def LawnGreen() -> Pen: ...
    @property
    def LemonChiffon() -> Pen: ...
    @property
    def LightBlue() -> Pen: ...
    @property
    def LightCoral() -> Pen: ...
    @property
    def LightCyan() -> Pen: ...
    @property
    def LightGoldenrodYellow() -> Pen: ...
    @property
    def LightGray() -> Pen: ...
    @property
    def LightGreen() -> Pen: ...
    @property
    def LightPink() -> Pen: ...
    @property
    def LightSalmon() -> Pen: ...
    @property
    def LightSeaGreen() -> Pen: ...
    @property
    def LightSkyBlue() -> Pen: ...
    @property
    def LightSlateGray() -> Pen: ...
    @property
    def LightSteelBlue() -> Pen: ...
    @property
    def LightYellow() -> Pen: ...
    @property
    def Lime() -> Pen: ...
    @property
    def LimeGreen() -> Pen: ...
    @property
    def Linen() -> Pen: ...
    @property
    def Magenta() -> Pen: ...
    @property
    def Maroon() -> Pen: ...
    @property
    def MediumAquamarine() -> Pen: ...
    @property
    def MediumBlue() -> Pen: ...
    @property
    def MediumOrchid() -> Pen: ...
    @property
    def MediumPurple() -> Pen: ...
    @property
    def MediumSeaGreen() -> Pen: ...
    @property
    def MediumSlateBlue() -> Pen: ...
    @property
    def MediumSpringGreen() -> Pen: ...
    @property
    def MediumTurquoise() -> Pen: ...
    @property
    def MediumVioletRed() -> Pen: ...
    @property
    def MidnightBlue() -> Pen: ...
    @property
    def MintCream() -> Pen: ...
    @property
    def MistyRose() -> Pen: ...
    @property
    def Moccasin() -> Pen: ...
    @property
    def NavajoWhite() -> Pen: ...
    @property
    def Navy() -> Pen: ...
    @property
    def OldLace() -> Pen: ...
    @property
    def Olive() -> Pen: ...
    @property
    def OliveDrab() -> Pen: ...
    @property
    def Orange() -> Pen: ...
    @property
    def OrangeRed() -> Pen: ...
    @property
    def Orchid() -> Pen: ...
    @property
    def PaleGoldenrod() -> Pen: ...
    @property
    def PaleGreen() -> Pen: ...
    @property
    def PaleTurquoise() -> Pen: ...
    @property
    def PaleVioletRed() -> Pen: ...
    @property
    def PapayaWhip() -> Pen: ...
    @property
    def PeachPuff() -> Pen: ...
    @property
    def Peru() -> Pen: ...
    @property
    def Pink() -> Pen: ...
    @property
    def Plum() -> Pen: ...
    @property
    def PowderBlue() -> Pen: ...
    @property
    def Purple() -> Pen: ...
    @property
    def Red() -> Pen: ...
    @property
    def RosyBrown() -> Pen: ...
    @property
    def RoyalBlue() -> Pen: ...
    @property
    def SaddleBrown() -> Pen: ...
    @property
    def Salmon() -> Pen: ...
    @property
    def SandyBrown() -> Pen: ...
    @property
    def SeaGreen() -> Pen: ...
    @property
    def SeaShell() -> Pen: ...
    @property
    def Sienna() -> Pen: ...
    @property
    def Silver() -> Pen: ...
    @property
    def SkyBlue() -> Pen: ...
    @property
    def SlateBlue() -> Pen: ...
    @property
    def SlateGray() -> Pen: ...
    @property
    def Snow() -> Pen: ...
    @property
    def SpringGreen() -> Pen: ...
    @property
    def SteelBlue() -> Pen: ...
    @property
    def Tan() -> Pen: ...
    @property
    def Teal() -> Pen: ...
    @property
    def Thistle() -> Pen: ...
    @property
    def Tomato() -> Pen: ...
    @property
    def Transparent() -> Pen: ...
    @property
    def Turquoise() -> Pen: ...
    @property
    def Violet() -> Pen: ...
    @property
    def Wheat() -> Pen: ...
    @property
    def White() -> Pen: ...
    @property
    def WhiteSmoke() -> Pen: ...
    @property
    def Yellow() -> Pen: ...
    @property
    def YellowGreen() -> Pen: ...


class Region(MarshalByRefObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rect: RectangleF): ...
    @overload
    def __init__(self, rect: Rectangle): ...
    @overload
    def __init__(self, path: GraphicsPath): ...
    @overload
    def __init__(self, rgnData: RegionData): ...
    def Clone(self) -> Region: ...
    @overload
    def Complement(self, region: Region) -> None: ...
    @overload
    def Complement(self, path: GraphicsPath) -> None: ...
    @overload
    def Complement(self, rect: Rectangle) -> None: ...
    @overload
    def Complement(self, rect: RectangleF) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, region: Region, g: Graphics) -> bool: ...
    @overload
    def Exclude(self, region: Region) -> None: ...
    @overload
    def Exclude(self, path: GraphicsPath) -> None: ...
    @overload
    def Exclude(self, rect: Rectangle) -> None: ...
    @overload
    def Exclude(self, rect: RectangleF) -> None: ...
    def FromHrgn(hrgn: IntPtr) -> Region: ...
    def GetBounds(self, g: Graphics) -> RectangleF: ...
    def GetHrgn(self, g: Graphics) -> IntPtr: ...
    def GetRegionData(self) -> RegionData: ...
    def GetRegionScans(self, matrix: Matrix) -> Set(RectangleF): ...
    @overload
    def Intersect(self, region: Region) -> None: ...
    @overload
    def Intersect(self, path: GraphicsPath) -> None: ...
    @overload
    def Intersect(self, rect: Rectangle) -> None: ...
    @overload
    def Intersect(self, rect: RectangleF) -> None: ...
    def IsEmpty(self, g: Graphics) -> bool: ...
    def IsInfinite(self, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, rect: Rectangle) -> bool: ...
    @overload
    def IsVisible(self, point: Point) -> bool: ...
    @overload
    def IsVisible(self, rect: RectangleF) -> bool: ...
    @overload
    def IsVisible(self, point: PointF) -> bool: ...
    @overload
    def IsVisible(self, x: Single, y: Single) -> bool: ...
    @overload
    def IsVisible(self, point: PointF, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, point: Point, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, rect: Rectangle, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, rect: RectangleF, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: Single, y: Single, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int, width: int, height: int) -> bool: ...
    @overload
    def IsVisible(self, x: Single, y: Single, width: Single, height: Single) -> bool: ...
    @overload
    def IsVisible(self, x: Single, y: Single, width: Single, height: Single, g: Graphics) -> bool: ...
    @overload
    def IsVisible(self, x: int, y: int, width: int, height: int, g: Graphics) -> bool: ...
    def MakeEmpty(self) -> None: ...
    def MakeInfinite(self) -> None: ...
    def ReleaseHrgn(self, regionHandle: IntPtr) -> None: ...
    def Transform(self, matrix: Matrix) -> None: ...
    @overload
    def Translate(self, dx: int, dy: int) -> None: ...
    @overload
    def Translate(self, dx: Single, dy: Single) -> None: ...
    @overload
    def Union(self, region: Region) -> None: ...
    @overload
    def Union(self, rect: RectangleF) -> None: ...
    @overload
    def Union(self, rect: Rectangle) -> None: ...
    @overload
    def Union(self, path: GraphicsPath) -> None: ...
    @overload
    def Xor(self, region: Region) -> None: ...
    @overload
    def Xor(self, path: GraphicsPath) -> None: ...
    @overload
    def Xor(self, rect: RectangleF) -> None: ...
    @overload
    def Xor(self, rect: Rectangle) -> None: ...


class RotateFlipType:
    Rotate180FlipXY = 0
    RotateNoneFlipNone = 0
    Rotate90FlipNone = 1
    Rotate270FlipXY = 1
    Rotate180FlipNone = 2
    RotateNoneFlipXY = 2
    Rotate270FlipNone = 3
    Rotate90FlipXY = 3
    RotateNoneFlipX = 4
    Rotate180FlipY = 4
    Rotate90FlipX = 5
    Rotate270FlipY = 5
    Rotate180FlipX = 6
    RotateNoneFlipY = 6
    Rotate270FlipX = 7
    Rotate90FlipY = 7


class SolidBrush(Brush):
    def __init__(self, color: Color): ...
    def Clone(self) -> Object: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...


class StringAlignment:
    Near = 0
    Center = 1
    Far = 2


class StringDigitSubstitute:
    User = 0
    #None = 1
    National = 2
    Traditional = 3


class StringFormat(MarshalByRefObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, options: StringFormatFlags): ...
    @overload
    def __init__(self, format: StringFormat): ...
    @overload
    def __init__(self, options: StringFormatFlags, language: int): ...
    def Clone(self) -> Object: ...
    def Dispose(self) -> None: ...
    @property
    def Alignment(self) -> StringAlignment: ...
    @property
    def DigitSubstitutionLanguage(self) -> int: ...
    @property
    def DigitSubstitutionMethod(self) -> StringDigitSubstitute: ...
    @property
    def FormatFlags(self) -> StringFormatFlags: ...
    @property
    def GenericDefault() -> StringFormat: ...
    @property
    def GenericTypographic() -> StringFormat: ...
    @property
    def HotkeyPrefix(self) -> HotkeyPrefix: ...
    @property
    def LineAlignment(self) -> StringAlignment: ...
    @property
    def Trimming(self) -> StringTrimming: ...
    def GetTabStops(self) -> Tuple[Set(Single), Single]: ...
    @Alignment.setter
    def Alignment(self, value: StringAlignment) -> None: ...
    @FormatFlags.setter
    def FormatFlags(self, value: StringFormatFlags) -> None: ...
    @HotkeyPrefix.setter
    def HotkeyPrefix(self, value: HotkeyPrefix) -> None: ...
    @LineAlignment.setter
    def LineAlignment(self, value: StringAlignment) -> None: ...
    @Trimming.setter
    def Trimming(self, value: StringTrimming) -> None: ...
    def SetDigitSubstitution(self, language: int, substitute: StringDigitSubstitute) -> None: ...
    def SetMeasurableCharacterRanges(self, ranges: Set(CharacterRange)) -> None: ...
    def SetTabStops(self, firstTabOffset: Single, tabStops: Set(Single)) -> None: ...
    def ToString(self) -> str: ...


class StringFormatFlags:
    DirectionRightToLeft = 1
    DirectionVertical = 2
    FitBlackBox = 4
    DisplayFormatControl = 32
    NoFontFallback = 1024
    MeasureTrailingSpaces = 2048
    NoWrap = 4096
    LineLimit = 8192
    NoClip = 16384


class StringTrimming:
    #None = 0
    Character = 1
    Word = 2
    EllipsisCharacter = 3
    EllipsisWord = 4
    EllipsisPath = 5


class StringUnit:
    World = 0
    Display = 1
    Pixel = 2
    Point = 3
    Inch = 4
    Document = 5
    Millimeter = 6
    Em = 32


class SystemBrushes(Object):
    def FromSystemColor(c: Color) -> Brush: ...
    @property
    def ActiveBorder() -> Brush: ...
    @property
    def ActiveCaption() -> Brush: ...
    @property
    def ActiveCaptionText() -> Brush: ...
    @property
    def AppWorkspace() -> Brush: ...
    @property
    def ButtonFace() -> Brush: ...
    @property
    def ButtonHighlight() -> Brush: ...
    @property
    def ButtonShadow() -> Brush: ...
    @property
    def Control() -> Brush: ...
    @property
    def ControlDark() -> Brush: ...
    @property
    def ControlDarkDark() -> Brush: ...
    @property
    def ControlLight() -> Brush: ...
    @property
    def ControlLightLight() -> Brush: ...
    @property
    def ControlText() -> Brush: ...
    @property
    def Desktop() -> Brush: ...
    @property
    def GradientActiveCaption() -> Brush: ...
    @property
    def GradientInactiveCaption() -> Brush: ...
    @property
    def GrayText() -> Brush: ...
    @property
    def Highlight() -> Brush: ...
    @property
    def HighlightText() -> Brush: ...
    @property
    def HotTrack() -> Brush: ...
    @property
    def InactiveBorder() -> Brush: ...
    @property
    def InactiveCaption() -> Brush: ...
    @property
    def InactiveCaptionText() -> Brush: ...
    @property
    def Info() -> Brush: ...
    @property
    def InfoText() -> Brush: ...
    @property
    def Menu() -> Brush: ...
    @property
    def MenuBar() -> Brush: ...
    @property
    def MenuHighlight() -> Brush: ...
    @property
    def MenuText() -> Brush: ...
    @property
    def ScrollBar() -> Brush: ...
    @property
    def Window() -> Brush: ...
    @property
    def WindowFrame() -> Brush: ...
    @property
    def WindowText() -> Brush: ...


class SystemFonts(Object):
    @property
    def CaptionFont() -> Font: ...
    @property
    def DefaultFont() -> Font: ...
    @property
    def DialogFont() -> Font: ...
    @property
    def IconTitleFont() -> Font: ...
    @property
    def MenuFont() -> Font: ...
    @property
    def MessageBoxFont() -> Font: ...
    @property
    def SmallCaptionFont() -> Font: ...
    @property
    def StatusFont() -> Font: ...
    def GetFontByName(systemFontName: str) -> Font: ...


class SystemIcons(Object):
    @property
    def Application() -> Icon: ...
    @property
    def Asterisk() -> Icon: ...
    @property
    def Error() -> Icon: ...
    @property
    def Exclamation() -> Icon: ...
    @property
    def Hand() -> Icon: ...
    @property
    def Information() -> Icon: ...
    @property
    def Question() -> Icon: ...
    @property
    def Shield() -> Icon: ...
    @property
    def Warning() -> Icon: ...
    @property
    def WinLogo() -> Icon: ...


class SystemPens(Object):
    def FromSystemColor(c: Color) -> Pen: ...
    @property
    def ActiveBorder() -> Pen: ...
    @property
    def ActiveCaption() -> Pen: ...
    @property
    def ActiveCaptionText() -> Pen: ...
    @property
    def AppWorkspace() -> Pen: ...
    @property
    def ButtonFace() -> Pen: ...
    @property
    def ButtonHighlight() -> Pen: ...
    @property
    def ButtonShadow() -> Pen: ...
    @property
    def Control() -> Pen: ...
    @property
    def ControlDark() -> Pen: ...
    @property
    def ControlDarkDark() -> Pen: ...
    @property
    def ControlLight() -> Pen: ...
    @property
    def ControlLightLight() -> Pen: ...
    @property
    def ControlText() -> Pen: ...
    @property
    def Desktop() -> Pen: ...
    @property
    def GradientActiveCaption() -> Pen: ...
    @property
    def GradientInactiveCaption() -> Pen: ...
    @property
    def GrayText() -> Pen: ...
    @property
    def Highlight() -> Pen: ...
    @property
    def HighlightText() -> Pen: ...
    @property
    def HotTrack() -> Pen: ...
    @property
    def InactiveBorder() -> Pen: ...
    @property
    def InactiveCaption() -> Pen: ...
    @property
    def InactiveCaptionText() -> Pen: ...
    @property
    def Info() -> Pen: ...
    @property
    def InfoText() -> Pen: ...
    @property
    def Menu() -> Pen: ...
    @property
    def MenuBar() -> Pen: ...
    @property
    def MenuHighlight() -> Pen: ...
    @property
    def MenuText() -> Pen: ...
    @property
    def ScrollBar() -> Pen: ...
    @property
    def Window() -> Pen: ...
    @property
    def WindowFrame() -> Pen: ...
    @property
    def WindowText() -> Pen: ...


class TextureBrush(Brush):
    @overload
    def __init__(self, bitmap: Image): ...
    @overload
    def __init__(self, image: Image, wrapMode: WrapMode): ...
    @overload
    def __init__(self, image: Image, dstRect: RectangleF): ...
    @overload
    def __init__(self, image: Image, dstRect: Rectangle): ...
    @overload
    def __init__(self, image: Image, wrapMode: WrapMode, dstRect: RectangleF): ...
    @overload
    def __init__(self, image: Image, wrapMode: WrapMode, dstRect: Rectangle): ...
    @overload
    def __init__(self, image: Image, dstRect: RectangleF, imageAttr: ImageAttributes): ...
    @overload
    def __init__(self, image: Image, dstRect: Rectangle, imageAttr: ImageAttributes): ...
    def Clone(self) -> Object: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Transform(self) -> Matrix: ...
    @property
    def WrapMode(self) -> WrapMode: ...
    @overload
    def MultiplyTransform(self, matrix: Matrix) -> None: ...
    @overload
    def MultiplyTransform(self, matrix: Matrix, order: MatrixOrder) -> None: ...
    def ResetTransform(self) -> None: ...
    @overload
    def RotateTransform(self, angle: Single) -> None: ...
    @overload
    def RotateTransform(self, angle: Single, order: MatrixOrder) -> None: ...
    @overload
    def ScaleTransform(self, sx: Single, sy: Single) -> None: ...
    @overload
    def ScaleTransform(self, sx: Single, sy: Single, order: MatrixOrder) -> None: ...
    @Transform.setter
    def Transform(self, value: Matrix) -> None: ...
    @WrapMode.setter
    def WrapMode(self, value: WrapMode) -> None: ...
    @overload
    def TranslateTransform(self, dx: Single, dy: Single) -> None: ...
    @overload
    def TranslateTransform(self, dx: Single, dy: Single, order: MatrixOrder) -> None: ...


class ToolboxBitmapAttribute(Attribute):
    @overload
    def __init__(self, imageFile: str): ...
    @overload
    def __init__(self, t: Type): ...
    @overload
    def __init__(self, t: Type, name: str): ...
    def Equals(self, value: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetImage(self, component: Object) -> Image: ...
    @overload
    def GetImage(self, type: Type) -> Image: ...
    @overload
    def GetImage(self, component: Object, large: bool) -> Image: ...
    @overload
    def GetImage(self, type: Type, large: bool) -> Image: ...
    @overload
    def GetImage(self, type: Type, imgName: str, large: bool) -> Image: ...
    def GetImageFromResource(t: Type, imageName: str, large: bool) -> Image: ...
