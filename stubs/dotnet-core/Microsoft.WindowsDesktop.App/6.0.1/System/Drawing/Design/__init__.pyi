from typing import Tuple, Set, Iterable, List


class IPropertyValueUIService:
    def add_PropertyUIValueItemsChanged(self, value: EventHandler) -> None: ...
    def AddPropertyValueUIHandler(self, newHandler: PropertyValueUIHandler) -> None: ...
    def GetPropertyUIValueItems(self, context: ITypeDescriptorContext, propDesc: PropertyDescriptor) -> Set(PropertyValueUIItem): ...
    def NotifyPropertyValueUIItemsChanged(self) -> None: ...
    def remove_PropertyUIValueItemsChanged(self, value: EventHandler) -> None: ...
    def RemovePropertyValueUIHandler(self, newHandler: PropertyValueUIHandler) -> None: ...


class PaintValueEventArgs(EventArgs):
    def __init__(self, context: ITypeDescriptorContext, value: Object, graphics: Graphics, bounds: Rectangle): ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Context(self) -> ITypeDescriptorContext: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Value(self) -> Object: ...


class PropertyValueUIHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, context: ITypeDescriptorContext, propDesc: PropertyDescriptor, valueUIItemList: ArrayList, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, context: ITypeDescriptorContext, propDesc: PropertyDescriptor, valueUIItemList: ArrayList) -> None: ...


class PropertyValueUIItem(Object):
    def __init__(self, uiItemImage: Image, handler: PropertyValueUIItemInvokeHandler, tooltip: str): ...
    @property
    def Image(self) -> Image: ...
    @property
    def InvokeHandler(self) -> PropertyValueUIItemInvokeHandler: ...
    @property
    def ToolTip(self) -> str: ...
    def Reset(self) -> None: ...


class PropertyValueUIItemInvokeHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, context: ITypeDescriptorContext, descriptor: PropertyDescriptor, invokedItem: PropertyValueUIItem, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, context: ITypeDescriptorContext, descriptor: PropertyDescriptor, invokedItem: PropertyValueUIItem) -> None: ...


class UITypeEditor(Object):
    def __init__(self): ...
    @overload
    def EditValue(self, provider: IServiceProvider, value: Object) -> Object: ...
    @overload
    def EditValue(self, context: ITypeDescriptorContext, provider: IServiceProvider, value: Object) -> Object: ...
    @property
    def IsDropDownResizable(self) -> bool: ...
    @overload
    def GetEditStyle(self) -> UITypeEditorEditStyle: ...
    @overload
    def GetEditStyle(self, context: ITypeDescriptorContext) -> UITypeEditorEditStyle: ...
    @overload
    def GetPaintValueSupported(self) -> bool: ...
    @overload
    def GetPaintValueSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def PaintValue(self, e: PaintValueEventArgs) -> None: ...
    @overload
    def PaintValue(self, value: Object, canvas: Graphics, rectangle: Rectangle) -> None: ...


class UITypeEditorEditStyle:
    #None = 1
    Modal = 2
    DropDown = 3
