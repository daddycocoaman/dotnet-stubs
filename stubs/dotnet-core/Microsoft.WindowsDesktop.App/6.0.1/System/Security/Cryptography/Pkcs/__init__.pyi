from typing import Tuple, Set, Iterable, List


class AlgorithmIdentifier(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, oid: Oid): ...
    @overload
    def __init__(self, oid: Oid, keyLength: int): ...
    @property
    def KeyLength(self) -> int: ...
    @property
    def Oid(self) -> Oid: ...
    @property
    def Parameters(self) -> Set(Byte): ...
    @KeyLength.setter
    def KeyLength(self, value: int) -> None: ...
    @Oid.setter
    def Oid(self, value: Oid) -> None: ...
    @Parameters.setter
    def Parameters(self, value: Set(Byte)) -> None: ...


class CmsRecipient(Object):
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @overload
    def __init__(self, certificate: X509Certificate2, rsaEncryptionPadding: RSAEncryptionPadding): ...
    @overload
    def __init__(self, recipientIdentifierType: SubjectIdentifierType, certificate: X509Certificate2): ...
    @overload
    def __init__(self, recipientIdentifierType: SubjectIdentifierType, certificate: X509Certificate2, rsaEncryptionPadding: RSAEncryptionPadding): ...
    @property
    def Certificate(self) -> X509Certificate2: ...
    @property
    def RecipientIdentifierType(self) -> SubjectIdentifierType: ...
    @property
    def RSAEncryptionPadding(self) -> RSAEncryptionPadding: ...


class CmsRecipientCollection(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, recipient: CmsRecipient): ...
    @overload
    def __init__(self, recipientIdentifierType: SubjectIdentifierType, certificates: X509Certificate2Collection): ...
    def Add(self, recipient: CmsRecipient) -> int: ...
    @overload
    def CopyTo(self, array: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: Set(CmsRecipient), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, index: int) -> CmsRecipient: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> CmsRecipientEnumerator: ...
    def Remove(self, recipient: CmsRecipient) -> None: ...


class CmsRecipientEnumerator(Object):
    @property
    def Current(self) -> CmsRecipient: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class CmsSigner(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType): ...
    @overload
    def __init__(self, certificate: X509Certificate2): ...
    @overload
    def __init__(self, parameters: CspParameters): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType, certificate: X509Certificate2): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType, certificate: X509Certificate2, privateKey: AsymmetricAlgorithm): ...
    @property
    def Certificate(self) -> X509Certificate2: ...
    @property
    def Certificates(self) -> X509Certificate2Collection: ...
    @property
    def DigestAlgorithm(self) -> Oid: ...
    @property
    def IncludeOption(self) -> X509IncludeOption: ...
    @property
    def PrivateKey(self) -> AsymmetricAlgorithm: ...
    @property
    def SignedAttributes(self) -> CryptographicAttributeObjectCollection: ...
    @property
    def SignerIdentifierType(self) -> SubjectIdentifierType: ...
    @property
    def UnsignedAttributes(self) -> CryptographicAttributeObjectCollection: ...
    @Certificate.setter
    def Certificate(self, value: X509Certificate2) -> None: ...
    @DigestAlgorithm.setter
    def DigestAlgorithm(self, value: Oid) -> None: ...
    @IncludeOption.setter
    def IncludeOption(self, value: X509IncludeOption) -> None: ...
    @PrivateKey.setter
    def PrivateKey(self, value: AsymmetricAlgorithm) -> None: ...
    @SignerIdentifierType.setter
    def SignerIdentifierType(self, value: SubjectIdentifierType) -> None: ...


class ContentInfo(Object):
    @overload
    def __init__(self, content: Set(Byte)): ...
    @overload
    def __init__(self, contentType: Oid, content: Set(Byte)): ...
    @property
    def Content(self) -> Set(Byte): ...
    @property
    def ContentType(self) -> Oid: ...
    @overload
    def GetContentType(encodedMessage: Set(Byte)) -> Oid: ...
    @overload
    def GetContentType(encodedMessage: ReadOnlySpan) -> Oid: ...


class EnvelopedCms(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, contentInfo: ContentInfo): ...
    @overload
    def __init__(self, contentInfo: ContentInfo, encryptionAlgorithm: AlgorithmIdentifier): ...
    @overload
    def Decode(self, encodedMessage: Set(Byte)) -> None: ...
    @overload
    def Decode(self, encodedMessage: ReadOnlySpan) -> None: ...
    @overload
    def Decrypt(self) -> None: ...
    @overload
    def Decrypt(self, recipientInfo: RecipientInfo) -> None: ...
    @overload
    def Decrypt(self, extraStore: X509Certificate2Collection) -> None: ...
    @overload
    def Decrypt(self, recipientInfo: RecipientInfo, extraStore: X509Certificate2Collection) -> None: ...
    @overload
    def Decrypt(self, recipientInfo: RecipientInfo, privateKey: AsymmetricAlgorithm) -> None: ...
    def Encode(self) -> Set(Byte): ...
    @overload
    def Encrypt(self, recipient: CmsRecipient) -> None: ...
    @overload
    def Encrypt(self, recipients: CmsRecipientCollection) -> None: ...
    @property
    def Certificates(self) -> X509Certificate2Collection: ...
    @property
    def ContentEncryptionAlgorithm(self) -> AlgorithmIdentifier: ...
    @property
    def ContentInfo(self) -> ContentInfo: ...
    @property
    def RecipientInfos(self) -> RecipientInfoCollection: ...
    @property
    def UnprotectedAttributes(self) -> CryptographicAttributeObjectCollection: ...
    @property
    def Version(self) -> int: ...


class KeyAgreeRecipientInfo(RecipientInfo):
    @property
    def Date(self) -> DateTime: ...
    @property
    def EncryptedKey(self) -> Set(Byte): ...
    @property
    def KeyEncryptionAlgorithm(self) -> AlgorithmIdentifier: ...
    @property
    def OriginatorIdentifierOrKey(self) -> SubjectIdentifierOrKey: ...
    @property
    def OtherKeyAttribute(self) -> CryptographicAttributeObject: ...
    @property
    def RecipientIdentifier(self) -> SubjectIdentifier: ...
    @property
    def Version(self) -> int: ...


class KeyTransRecipientInfo(RecipientInfo):
    @property
    def EncryptedKey(self) -> Set(Byte): ...
    @property
    def KeyEncryptionAlgorithm(self) -> AlgorithmIdentifier: ...
    @property
    def RecipientIdentifier(self) -> SubjectIdentifier: ...
    @property
    def Version(self) -> int: ...


class Pkcs12Builder(Object):
    def __init__(self): ...
    @overload
    def AddSafeContentsEncrypted(self, safeContents: Pkcs12SafeContents, passwordBytes: Set(Byte), pbeParameters: PbeParameters) -> None: ...
    @overload
    def AddSafeContentsEncrypted(self, safeContents: Pkcs12SafeContents, passwordBytes: ReadOnlySpan, pbeParameters: PbeParameters) -> None: ...
    @overload
    def AddSafeContentsEncrypted(self, safeContents: Pkcs12SafeContents, password: str, pbeParameters: PbeParameters) -> None: ...
    @overload
    def AddSafeContentsEncrypted(self, safeContents: Pkcs12SafeContents, password: ReadOnlySpan, pbeParameters: PbeParameters) -> None: ...
    def AddSafeContentsUnencrypted(self, safeContents: Pkcs12SafeContents) -> None: ...
    def Encode(self) -> Set(Byte): ...
    @property
    def IsSealed(self) -> bool: ...
    @overload
    def SealWithMac(self, password: str, hashAlgorithm: HashAlgorithmName, iterationCount: int) -> None: ...
    @overload
    def SealWithMac(self, password: ReadOnlySpan, hashAlgorithm: HashAlgorithmName, iterationCount: int) -> None: ...
    def SealWithoutIntegrity(self) -> None: ...
    def TryEncode(self, destination: Span) -> Tuple[bool, int]: ...


class Pkcs12CertBag(Pkcs12SafeBag):
    def __init__(self, certificateType: Oid, encodedCertificate: ReadOnlyMemory): ...
    @property
    def EncodedCertificate(self) -> ReadOnlyMemory: ...
    @property
    def IsX509Certificate(self) -> bool: ...
    def GetCertificate(self) -> X509Certificate2: ...
    def GetCertificateType(self) -> Oid: ...


class Pkcs12ConfidentialityMode:
    Unknown = 0
    #None = 1
    Password = 2
    PublicKey = 3


class Pkcs12Info(Object):
    def Decode(encodedBytes: ReadOnlyMemory, skipCopy: bool) -> Tuple[Pkcs12Info, int]: ...
    @property
    def AuthenticatedSafe(self) -> ReadOnlyCollection: ...
    @property
    def IntegrityMode(self) -> Pkcs12IntegrityMode: ...
    @overload
    def VerifyMac(self, password: str) -> bool: ...
    @overload
    def VerifyMac(self, password: ReadOnlySpan) -> bool: ...


class Pkcs12IntegrityMode:
    Unknown = 0
    #None = 1
    Password = 2
    PublicKey = 3


class Pkcs12KeyBag(Pkcs12SafeBag):
    def __init__(self, pkcs8PrivateKey: ReadOnlyMemory, skipCopy: bool): ...
    @property
    def Pkcs8PrivateKey(self) -> ReadOnlyMemory: ...


class Pkcs12SafeBag(Object):
    def Encode(self) -> Set(Byte): ...
    @property
    def Attributes(self) -> CryptographicAttributeObjectCollection: ...
    @property
    def EncodedBagValue(self) -> ReadOnlyMemory: ...
    def GetBagId(self) -> Oid: ...
    def TryEncode(self, destination: Span) -> Tuple[bool, int]: ...


class Pkcs12SafeContents(Object):
    def __init__(self): ...
    def AddCertificate(self, certificate: X509Certificate2) -> Pkcs12CertBag: ...
    def AddKeyUnencrypted(self, key: AsymmetricAlgorithm) -> Pkcs12KeyBag: ...
    def AddNestedContents(self, safeContents: Pkcs12SafeContents) -> Pkcs12SafeContentsBag: ...
    def AddSafeBag(self, safeBag: Pkcs12SafeBag) -> None: ...
    def AddSecret(self, secretType: Oid, secretValue: ReadOnlyMemory) -> Pkcs12SecretBag: ...
    @overload
    def AddShroudedKey(self, key: AsymmetricAlgorithm, password: ReadOnlySpan, pbeParameters: PbeParameters) -> Pkcs12ShroudedKeyBag: ...
    @overload
    def AddShroudedKey(self, key: AsymmetricAlgorithm, passwordBytes: Set(Byte), pbeParameters: PbeParameters) -> Pkcs12ShroudedKeyBag: ...
    @overload
    def AddShroudedKey(self, key: AsymmetricAlgorithm, passwordBytes: ReadOnlySpan, pbeParameters: PbeParameters) -> Pkcs12ShroudedKeyBag: ...
    @overload
    def AddShroudedKey(self, key: AsymmetricAlgorithm, password: str, pbeParameters: PbeParameters) -> Pkcs12ShroudedKeyBag: ...
    @overload
    def Decrypt(self, password: ReadOnlySpan) -> None: ...
    @overload
    def Decrypt(self, passwordBytes: Set(Byte)) -> None: ...
    @overload
    def Decrypt(self, passwordBytes: ReadOnlySpan) -> None: ...
    @overload
    def Decrypt(self, password: str) -> None: ...
    @property
    def ConfidentialityMode(self) -> Pkcs12ConfidentialityMode: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def GetBags(self) -> Iterable[Pkcs12SafeBag]: ...


class Pkcs12SafeContentsBag(Pkcs12SafeBag):
    @property
    def SafeContents(self) -> Pkcs12SafeContents: ...


class Pkcs12SecretBag(Pkcs12SafeBag):
    @property
    def SecretValue(self) -> ReadOnlyMemory: ...
    def GetSecretType(self) -> Oid: ...


class Pkcs12ShroudedKeyBag(Pkcs12SafeBag):
    def __init__(self, encryptedPkcs8PrivateKey: ReadOnlyMemory, skipCopy: bool): ...
    @property
    def EncryptedPkcs8PrivateKey(self) -> ReadOnlyMemory: ...


class Pkcs8PrivateKeyInfo(Object):
    def __init__(self, algorithmId: Oid, algorithmParameters: Nullable, privateKey: ReadOnlyMemory, skipCopies: bool): ...
    def Create(privateKey: AsymmetricAlgorithm) -> Pkcs8PrivateKeyInfo: ...
    def Decode(source: ReadOnlyMemory, skipCopy: bool) -> Tuple[Pkcs8PrivateKeyInfo, int]: ...
    @overload
    def DecryptAndDecode(passwordBytes: ReadOnlySpan, source: ReadOnlyMemory) -> Tuple[Pkcs8PrivateKeyInfo, int]: ...
    @overload
    def DecryptAndDecode(password: ReadOnlySpan, source: ReadOnlyMemory) -> Tuple[Pkcs8PrivateKeyInfo, int]: ...
    def Encode(self) -> Set(Byte): ...
    @overload
    def Encrypt(self, passwordBytes: ReadOnlySpan, pbeParameters: PbeParameters) -> Set(Byte): ...
    @overload
    def Encrypt(self, password: ReadOnlySpan, pbeParameters: PbeParameters) -> Set(Byte): ...
    @property
    def AlgorithmId(self) -> Oid: ...
    @property
    def AlgorithmParameters(self) -> Nullable: ...
    @property
    def Attributes(self) -> CryptographicAttributeObjectCollection: ...
    @property
    def PrivateKeyBytes(self) -> ReadOnlyMemory: ...
    def TryEncode(self, destination: Span) -> Tuple[bool, int]: ...
    @overload
    def TryEncrypt(self, password: ReadOnlySpan, pbeParameters: PbeParameters, destination: Span) -> Tuple[bool, int]: ...
    @overload
    def TryEncrypt(self, passwordBytes: ReadOnlySpan, pbeParameters: PbeParameters, destination: Span) -> Tuple[bool, int]: ...


class Pkcs9AttributeObject(AsnEncodedData):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, asnEncodedData: AsnEncodedData): ...
    @overload
    def __init__(self, oid: str, encodedData: Set(Byte)): ...
    @overload
    def __init__(self, oid: Oid, encodedData: Set(Byte)): ...
    def CopyFrom(self, asnEncodedData: AsnEncodedData) -> None: ...
    @property
    def Oid(self) -> Oid: ...


class Pkcs9ContentType(Pkcs9AttributeObject):
    def __init__(self): ...
    def CopyFrom(self, asnEncodedData: AsnEncodedData) -> None: ...
    @property
    def ContentType(self) -> Oid: ...


class Pkcs9DocumentDescription(Pkcs9AttributeObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, documentDescription: str): ...
    @overload
    def __init__(self, encodedDocumentDescription: Set(Byte)): ...
    def CopyFrom(self, asnEncodedData: AsnEncodedData) -> None: ...
    @property
    def DocumentDescription(self) -> str: ...


class Pkcs9DocumentName(Pkcs9AttributeObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, documentName: str): ...
    @overload
    def __init__(self, encodedDocumentName: Set(Byte)): ...
    def CopyFrom(self, asnEncodedData: AsnEncodedData) -> None: ...
    @property
    def DocumentName(self) -> str: ...


class Pkcs9LocalKeyId(Pkcs9AttributeObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keyId: Set(Byte)): ...
    @overload
    def __init__(self, keyId: ReadOnlySpan): ...
    def CopyFrom(self, asnEncodedData: AsnEncodedData) -> None: ...
    @property
    def KeyId(self) -> ReadOnlyMemory: ...


class Pkcs9MessageDigest(Pkcs9AttributeObject):
    def __init__(self): ...
    def CopyFrom(self, asnEncodedData: AsnEncodedData) -> None: ...
    @property
    def MessageDigest(self) -> Set(Byte): ...


class Pkcs9SigningTime(Pkcs9AttributeObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, signingTime: DateTime): ...
    @overload
    def __init__(self, encodedSigningTime: Set(Byte)): ...
    def CopyFrom(self, asnEncodedData: AsnEncodedData) -> None: ...
    @property
    def SigningTime(self) -> DateTime: ...


class PublicKeyInfo(Object):
    @property
    def Algorithm(self) -> AlgorithmIdentifier: ...
    @property
    def KeyValue(self) -> Set(Byte): ...


class RecipientInfo(Object):
    @property
    def EncryptedKey(self) -> Set(Byte): ...
    @property
    def KeyEncryptionAlgorithm(self) -> AlgorithmIdentifier: ...
    @property
    def RecipientIdentifier(self) -> SubjectIdentifier: ...
    @property
    def Type(self) -> RecipientInfoType: ...
    @property
    def Version(self) -> int: ...


class RecipientInfoCollection(Object):
    @overload
    def CopyTo(self, array: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: Set(RecipientInfo), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, index: int) -> RecipientInfo: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> RecipientInfoEnumerator: ...


class RecipientInfoEnumerator(Object):
    @property
    def Current(self) -> RecipientInfo: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class RecipientInfoType:
    Unknown = 0
    KeyTransport = 1
    KeyAgreement = 2


class Rfc3161TimestampRequest(Object):
    def CreateFromData(data: ReadOnlySpan, hashAlgorithm: HashAlgorithmName, requestedPolicyId: Oid, nonce: Nullable, requestSignerCertificates: bool, extensions: X509ExtensionCollection) -> Rfc3161TimestampRequest: ...
    @overload
    def CreateFromHash(hash: ReadOnlyMemory, hashAlgorithmId: Oid, requestedPolicyId: Oid, nonce: Nullable, requestSignerCertificates: bool, extensions: X509ExtensionCollection) -> Rfc3161TimestampRequest: ...
    @overload
    def CreateFromHash(hash: ReadOnlyMemory, hashAlgorithm: HashAlgorithmName, requestedPolicyId: Oid, nonce: Nullable, requestSignerCertificates: bool, extensions: X509ExtensionCollection) -> Rfc3161TimestampRequest: ...
    def CreateFromSignerInfo(signerInfo: SignerInfo, hashAlgorithm: HashAlgorithmName, requestedPolicyId: Oid, nonce: Nullable, requestSignerCertificates: bool, extensions: X509ExtensionCollection) -> Rfc3161TimestampRequest: ...
    def Encode(self) -> Set(Byte): ...
    @property
    def HasExtensions(self) -> bool: ...
    @property
    def HashAlgorithmId(self) -> Oid: ...
    @property
    def RequestedPolicyId(self) -> Oid: ...
    @property
    def RequestSignerCertificate(self) -> bool: ...
    @property
    def Version(self) -> int: ...
    def GetExtensions(self) -> X509ExtensionCollection: ...
    def GetMessageHash(self) -> ReadOnlyMemory: ...
    def GetNonce(self) -> Nullable: ...
    def ProcessResponse(self, responseBytes: ReadOnlyMemory) -> Tuple[Rfc3161TimestampToken, int]: ...
    def TryDecode(encodedBytes: ReadOnlyMemory) -> Tuple[bool, Rfc3161TimestampRequest, int]: ...
    def TryEncode(self, destination: Span) -> Tuple[bool, int]: ...


class Rfc3161TimestampToken(Object):
    def AsSignedCms(self) -> SignedCms: ...
    @property
    def TokenInfo(self) -> Rfc3161TimestampTokenInfo: ...
    def TryDecode(encodedBytes: ReadOnlyMemory) -> Tuple[bool, Rfc3161TimestampToken, int]: ...
    def VerifySignatureForData(self, data: ReadOnlySpan, extraCandidates: X509Certificate2Collection) -> Tuple[bool, X509Certificate2]: ...
    @overload
    def VerifySignatureForHash(self, hash: ReadOnlySpan, hashAlgorithm: HashAlgorithmName, extraCandidates: X509Certificate2Collection) -> Tuple[bool, X509Certificate2]: ...
    @overload
    def VerifySignatureForHash(self, hash: ReadOnlySpan, hashAlgorithmId: Oid, extraCandidates: X509Certificate2Collection) -> Tuple[bool, X509Certificate2]: ...
    def VerifySignatureForSignerInfo(self, signerInfo: SignerInfo, extraCandidates: X509Certificate2Collection) -> Tuple[bool, X509Certificate2]: ...


class Rfc3161TimestampTokenInfo(Object):
    def __init__(self, policyId: Oid, hashAlgorithmId: Oid, messageHash: ReadOnlyMemory, serialNumber: ReadOnlyMemory, timestamp: DateTimeOffset, accuracyInMicroseconds: Nullable, isOrdering: bool, nonce: Nullable, timestampAuthorityName: Nullable, extensions: X509ExtensionCollection): ...
    def Encode(self) -> Set(Byte): ...
    @property
    def AccuracyInMicroseconds(self) -> Nullable: ...
    @property
    def HasExtensions(self) -> bool: ...
    @property
    def HashAlgorithmId(self) -> Oid: ...
    @property
    def IsOrdering(self) -> bool: ...
    @property
    def PolicyId(self) -> Oid: ...
    @property
    def Timestamp(self) -> DateTimeOffset: ...
    @property
    def Version(self) -> int: ...
    def GetExtensions(self) -> X509ExtensionCollection: ...
    def GetMessageHash(self) -> ReadOnlyMemory: ...
    def GetNonce(self) -> Nullable: ...
    def GetSerialNumber(self) -> ReadOnlyMemory: ...
    def GetTimestampAuthorityName(self) -> Nullable: ...
    def TryDecode(encodedBytes: ReadOnlyMemory) -> Tuple[bool, Rfc3161TimestampTokenInfo, int]: ...
    def TryEncode(self, destination: Span) -> Tuple[bool, int]: ...


class SignedCms(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType): ...
    @overload
    def __init__(self, contentInfo: ContentInfo): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType, contentInfo: ContentInfo): ...
    @overload
    def __init__(self, contentInfo: ContentInfo, detached: bool): ...
    @overload
    def __init__(self, signerIdentifierType: SubjectIdentifierType, contentInfo: ContentInfo, detached: bool): ...
    def AddCertificate(self, certificate: X509Certificate2) -> None: ...
    def CheckHash(self) -> None: ...
    @overload
    def CheckSignature(self, verifySignatureOnly: bool) -> None: ...
    @overload
    def CheckSignature(self, extraStore: X509Certificate2Collection, verifySignatureOnly: bool) -> None: ...
    @overload
    def ComputeSignature(self) -> None: ...
    @overload
    def ComputeSignature(self, signer: CmsSigner) -> None: ...
    @overload
    def ComputeSignature(self, signer: CmsSigner, silent: bool) -> None: ...
    @overload
    def Decode(self, encodedMessage: Set(Byte)) -> None: ...
    @overload
    def Decode(self, encodedMessage: ReadOnlySpan) -> None: ...
    def Encode(self) -> Set(Byte): ...
    @property
    def Certificates(self) -> X509Certificate2Collection: ...
    @property
    def ContentInfo(self) -> ContentInfo: ...
    @property
    def Detached(self) -> bool: ...
    @property
    def SignerInfos(self) -> SignerInfoCollection: ...
    @property
    def Version(self) -> int: ...
    def RemoveCertificate(self, certificate: X509Certificate2) -> None: ...
    @overload
    def RemoveSignature(self, index: int) -> None: ...
    @overload
    def RemoveSignature(self, signerInfo: SignerInfo) -> None: ...


class SignerInfo(Object):
    def AddUnsignedAttribute(self, unsignedAttribute: AsnEncodedData) -> None: ...
    def CheckHash(self) -> None: ...
    @overload
    def CheckSignature(self, verifySignatureOnly: bool) -> None: ...
    @overload
    def CheckSignature(self, extraStore: X509Certificate2Collection, verifySignatureOnly: bool) -> None: ...
    def ComputeCounterSignature(self, signer: CmsSigner) -> None: ...
    @property
    def Certificate(self) -> X509Certificate2: ...
    @property
    def CounterSignerInfos(self) -> SignerInfoCollection: ...
    @property
    def DigestAlgorithm(self) -> Oid: ...
    @property
    def SignatureAlgorithm(self) -> Oid: ...
    @property
    def SignedAttributes(self) -> CryptographicAttributeObjectCollection: ...
    @property
    def SignerIdentifier(self) -> SubjectIdentifier: ...
    @property
    def UnsignedAttributes(self) -> CryptographicAttributeObjectCollection: ...
    @property
    def Version(self) -> int: ...
    def GetSignature(self) -> Set(Byte): ...
    @overload
    def RemoveCounterSignature(self, index: int) -> None: ...
    @overload
    def RemoveCounterSignature(self, counterSignerInfo: SignerInfo) -> None: ...
    def RemoveUnsignedAttribute(self, unsignedAttribute: AsnEncodedData) -> None: ...


class SignerInfoCollection(Object):
    @overload
    def CopyTo(self, array: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: Set(SignerInfo), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, index: int) -> SignerInfo: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> SignerInfoEnumerator: ...


class SignerInfoEnumerator(Object):
    @property
    def Current(self) -> SignerInfo: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class SubjectIdentifier(Object):
    @property
    def Type(self) -> SubjectIdentifierType: ...
    @property
    def Value(self) -> Object: ...
    def MatchesCertificate(self, certificate: X509Certificate2) -> bool: ...


class SubjectIdentifierOrKey(Object):
    @property
    def Type(self) -> SubjectIdentifierOrKeyType: ...
    @property
    def Value(self) -> Object: ...


class SubjectIdentifierOrKeyType:
    Unknown = 0
    IssuerAndSerialNumber = 1
    SubjectKeyIdentifier = 2
    PublicKeyInfo = 3


class SubjectIdentifierType:
    Unknown = 0
    IssuerAndSerialNumber = 1
    SubjectKeyIdentifier = 2
    NoSignature = 3
