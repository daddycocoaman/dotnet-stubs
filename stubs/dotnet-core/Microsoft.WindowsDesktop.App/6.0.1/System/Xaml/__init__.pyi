__all__ = ['Schema']
from typing import Tuple, Set, Iterable, List


class AmbientPropertyValue(Object):
    def __init__(self, property: XamlMember, value: Object): ...
    @property
    def RetrievedProperty(self) -> XamlMember: ...
    @property
    def Value(self) -> Object: ...


class AttachableMemberIdentifier(Object):
    def __init__(self, declaringType: Type, memberName: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: AttachableMemberIdentifier) -> bool: ...
    @property
    def DeclaringType(self) -> Type: ...
    @property
    def MemberName(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: AttachableMemberIdentifier, right: AttachableMemberIdentifier) -> bool: ...
    def op_Inequality(left: AttachableMemberIdentifier, right: AttachableMemberIdentifier) -> bool: ...
    def ToString(self) -> str: ...


class AttachablePropertyServices(Object):
    def CopyPropertiesTo(instance: Object, array: Set(KeyValuePair), index: int) -> None: ...
    def GetAttachedPropertyCount(instance: Object) -> int: ...
    def RemoveProperty(instance: Object, name: AttachableMemberIdentifier) -> bool: ...
    def SetProperty(instance: Object, name: AttachableMemberIdentifier, value: Object) -> None: ...
    @overload
    def TryGetProperty(instance: Object, name: AttachableMemberIdentifier) -> Tuple[bool, Object]: ...
    @overload
    def TryGetProperty(instance: Object, name: AttachableMemberIdentifier) -> Tuple[bool, T]: ...


class IAmbientProvider:
    @overload
    def GetAllAmbientValues(self, types: Set(XamlType)) -> Iterable[Object]: ...
    @overload
    def GetAllAmbientValues(self, ceilingTypes: Iterable[XamlType], properties: Set(XamlMember)) -> Iterable[AmbientPropertyValue]: ...
    @overload
    def GetAllAmbientValues(self, ceilingTypes: Iterable[XamlType], searchLiveStackOnly: bool, types: Iterable[XamlType], properties: Set(XamlMember)) -> Iterable[AmbientPropertyValue]: ...
    @overload
    def GetFirstAmbientValue(self, types: Set(XamlType)) -> Object: ...
    @overload
    def GetFirstAmbientValue(self, ceilingTypes: Iterable[XamlType], properties: Set(XamlMember)) -> AmbientPropertyValue: ...


class IAttachedPropertyStore:
    def CopyPropertiesTo(self, array: Set(KeyValuePair), index: int) -> None: ...
    @property
    def PropertyCount(self) -> int: ...
    def RemoveProperty(self, attachableMemberIdentifier: AttachableMemberIdentifier) -> bool: ...
    def SetProperty(self, attachableMemberIdentifier: AttachableMemberIdentifier, value: Object) -> None: ...
    def TryGetProperty(self, attachableMemberIdentifier: AttachableMemberIdentifier) -> Tuple[bool, Object]: ...


class IDestinationTypeProvider:
    def GetDestinationType(self) -> Type: ...


class INamespacePrefixLookup:
    def LookupPrefix(self, ns: str) -> str: ...


class IRootObjectProvider:
    @property
    def RootObject(self) -> Object: ...


class IXamlIndexingReader:
    @property
    def Count(self) -> int: ...
    @property
    def CurrentIndex(self) -> int: ...
    @CurrentIndex.setter
    def CurrentIndex(self, value: int) -> None: ...


class IXamlLineInfo:
    @property
    def HasLineInfo(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...


class IXamlLineInfoConsumer:
    @property
    def ShouldProvideLineInfo(self) -> bool: ...
    def SetLineInfo(self, lineNumber: int, linePosition: int) -> None: ...


class IXamlNameProvider:
    def GetName(self, value: Object) -> str: ...


class IXamlNameResolver:
    def add_OnNameScopeInitializationComplete(self, value: EventHandler) -> None: ...
    @property
    def IsFixupTokenAvailable(self) -> bool: ...
    def GetAllNamesAndValuesInScope(self) -> Iterable[KeyValuePair]: ...
    @overload
    def GetFixupToken(self, names: Iterable[str]) -> Object: ...
    @overload
    def GetFixupToken(self, names: Iterable[str], canAssignDirectly: bool) -> Object: ...
    def remove_OnNameScopeInitializationComplete(self, value: EventHandler) -> None: ...
    @overload
    def Resolve(self, name: str) -> Object: ...
    @overload
    def Resolve(self, name: str) -> Tuple[Object, bool]: ...


class IXamlNamespaceResolver:
    def GetNamespace(self, prefix: str) -> str: ...
    def GetNamespacePrefixes(self) -> Iterable[NamespaceDeclaration]: ...


class IXamlObjectWriterFactory:
    def GetParentSettings(self) -> XamlObjectWriterSettings: ...
    def GetXamlObjectWriter(self, settings: XamlObjectWriterSettings) -> XamlObjectWriter: ...


class IXamlSchemaContextProvider:
    @property
    def SchemaContext(self) -> XamlSchemaContext: ...


class NamespaceDeclaration(Object):
    def __init__(self, ns: str, prefix: str): ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Prefix(self) -> str: ...


class XamlBackgroundReader(XamlReader):
    def __init__(self, wrappedReader: XamlReader): ...
    @property
    def HasLineInfo(self) -> bool: ...
    @property
    def IsEof(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def Member(self) -> XamlMember: ...
    @property
    def Namespace(self) -> NamespaceDeclaration: ...
    @property
    def NodeType(self) -> XamlNodeType: ...
    @property
    def SchemaContext(self) -> XamlSchemaContext: ...
    @property
    def Type(self) -> XamlType: ...
    @property
    def Value(self) -> Object: ...
    def Read(self) -> bool: ...
    @overload
    def StartThread(self) -> None: ...
    @overload
    def StartThread(self, threadName: str) -> None: ...


class XamlDeferringLoader(Object):
    def Load(self, xamlReader: XamlReader, serviceProvider: IServiceProvider) -> Object: ...
    def Save(self, value: Object, serviceProvider: IServiceProvider) -> XamlReader: ...


class XamlDirective(XamlMember):
    @overload
    def __init__(self, xamlNamespace: str, name: str): ...
    @overload
    def __init__(self, xamlNamespaces: Iterable[str], name: str, xamlType: XamlType, typeConverter: XamlValueConverter, allowedLocation: AllowedMemberLocations): ...
    @property
    def AllowedLocation(self) -> AllowedMemberLocations: ...
    def GetHashCode(self) -> int: ...
    def GetXamlNamespaces(self) -> List[str]: ...
    def ToString(self) -> str: ...


class XamlDuplicateMemberException(XamlException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, member: XamlMember, type: XamlType): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def DuplicateMember(self) -> XamlMember: ...
    @property
    def ParentType(self) -> XamlType: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @DuplicateMember.setter
    def DuplicateMember(self, value: XamlMember) -> None: ...
    @ParentType.setter
    def ParentType(self, value: XamlType) -> None: ...


class XamlException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception, lineNumber: int, linePosition: int): ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def Message(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class XamlInternalException(XamlException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class XamlLanguage(Object):
    @property
    def AllDirectives() -> ReadOnlyCollection: ...
    @property
    def AllTypes() -> ReadOnlyCollection: ...
    @property
    def Arguments() -> XamlDirective: ...
    @property
    def Array() -> XamlType: ...
    @property
    def AsyncRecords() -> XamlDirective: ...
    @property
    def Base() -> XamlDirective: ...
    @property
    def Boolean() -> XamlType: ...
    @property
    def Byte() -> XamlType: ...
    @property
    def Char() -> XamlType: ...
    @property
    def Class() -> XamlDirective: ...
    @property
    def ClassAttributes() -> XamlDirective: ...
    @property
    def ClassModifier() -> XamlDirective: ...
    @property
    def Code() -> XamlDirective: ...
    @property
    def ConnectionId() -> XamlDirective: ...
    @property
    def Decimal() -> XamlType: ...
    @property
    def Double() -> XamlType: ...
    @property
    def FactoryMethod() -> XamlDirective: ...
    @property
    def FieldModifier() -> XamlDirective: ...
    @property
    def Initialization() -> XamlDirective: ...
    @property
    def Int16() -> XamlType: ...
    @property
    def Int32() -> XamlType: ...
    @property
    def Int64() -> XamlType: ...
    @property
    def Items() -> XamlDirective: ...
    @property
    def Key() -> XamlDirective: ...
    @property
    def Lang() -> XamlDirective: ...
    @property
    def Member() -> XamlType: ...
    @property
    def Members() -> XamlDirective: ...
    @property
    def Name() -> XamlDirective: ...
    @property
    def Null() -> XamlType: ...
    @property
    def Object() -> XamlType: ...
    @property
    def PositionalParameters() -> XamlDirective: ...
    @property
    def Property() -> XamlType: ...
    @property
    def Reference() -> XamlType: ...
    @property
    def Shared() -> XamlDirective: ...
    @property
    def Single() -> XamlType: ...
    @property
    def Space() -> XamlDirective: ...
    @property
    def Static() -> XamlType: ...
    @property
    def String() -> XamlType: ...
    @property
    def Subclass() -> XamlDirective: ...
    @property
    def SynchronousMode() -> XamlDirective: ...
    @property
    def TimeSpan() -> XamlType: ...
    @property
    def Type() -> XamlType: ...
    @property
    def TypeArguments() -> XamlDirective: ...
    @property
    def Uid() -> XamlDirective: ...
    @property
    def UnknownContent() -> XamlDirective: ...
    @property
    def Uri() -> XamlType: ...
    @property
    def XamlNamespaces() -> List[str]: ...
    @property
    def XData() -> XamlType: ...
    @property
    def XmlNamespaces() -> List[str]: ...


class XamlMember(Object):
    @overload
    def __init__(self, propertyInfo: PropertyInfo, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, eventInfo: EventInfo, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, name: str, declaringType: XamlType, isAttachable: bool): ...
    @overload
    def __init__(self, propertyInfo: PropertyInfo, schemaContext: XamlSchemaContext, invoker: XamlMemberInvoker): ...
    @overload
    def __init__(self, eventInfo: EventInfo, schemaContext: XamlSchemaContext, invoker: XamlMemberInvoker): ...
    @overload
    def __init__(self, attachableEventName: str, adder: MethodInfo, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, attachablePropertyName: str, getter: MethodInfo, setter: MethodInfo, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, attachableEventName: str, adder: MethodInfo, schemaContext: XamlSchemaContext, invoker: XamlMemberInvoker): ...
    @overload
    def __init__(self, attachablePropertyName: str, getter: MethodInfo, setter: MethodInfo, schemaContext: XamlSchemaContext, invoker: XamlMemberInvoker): ...
    @overload
    def Equals(self, other: XamlMember) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DeclaringType(self) -> XamlType: ...
    @property
    def DeferringLoader(self) -> XamlValueConverter: ...
    @property
    def DependsOn(self) -> List[XamlMember]: ...
    @property
    def Invoker(self) -> XamlMemberInvoker: ...
    @property
    def IsAmbient(self) -> bool: ...
    @property
    def IsAttachable(self) -> bool: ...
    @property
    def IsDirective(self) -> bool: ...
    @property
    def IsEvent(self) -> bool: ...
    @property
    def IsNameValid(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsReadPublic(self) -> bool: ...
    @property
    def IsUnknown(self) -> bool: ...
    @property
    def IsWriteOnly(self) -> bool: ...
    @property
    def IsWritePublic(self) -> bool: ...
    @property
    def MarkupExtensionBracketCharacters(self) -> IReadOnlyDictionary: ...
    @property
    def Name(self) -> str: ...
    @property
    def PreferredXamlNamespace(self) -> str: ...
    @property
    def SerializationVisibility(self) -> DesignerSerializationVisibility: ...
    @property
    def TargetType(self) -> XamlType: ...
    @property
    def Type(self) -> XamlType: ...
    @property
    def TypeConverter(self) -> XamlValueConverter: ...
    @property
    def UnderlyingMember(self) -> MemberInfo: ...
    @property
    def ValueSerializer(self) -> XamlValueConverter: ...
    def GetHashCode(self) -> int: ...
    def GetXamlNamespaces(self) -> List[str]: ...
    def op_Equality(xamlMember1: XamlMember, xamlMember2: XamlMember) -> bool: ...
    def op_Inequality(xamlMember1: XamlMember, xamlMember2: XamlMember) -> bool: ...
    def ToString(self) -> str: ...


class XamlNodeList(Object):
    @overload
    def __init__(self, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, schemaContext: XamlSchemaContext, size: int): ...
    def Clear(self) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Writer(self) -> XamlWriter: ...
    def GetReader(self) -> XamlReader: ...


class XamlNodeQueue(Object):
    def __init__(self, schemaContext: XamlSchemaContext): ...
    @property
    def Count(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Reader(self) -> XamlReader: ...
    @property
    def Writer(self) -> XamlWriter: ...


class XamlNodeType:
    #None = 0
    StartObject = 1
    GetObject = 2
    EndObject = 3
    StartMember = 4
    EndMember = 5
    Value = 6
    NamespaceDeclaration = 7


class XamlObjectEventArgs(EventArgs):
    def __init__(self, instance: Object): ...
    @property
    def ElementLineNumber(self) -> int: ...
    @property
    def ElementLinePosition(self) -> int: ...
    @property
    def Instance(self) -> Object: ...
    @property
    def SourceBamlUri(self) -> Uri: ...


class XamlObjectReader(XamlReader):
    @overload
    def __init__(self, instance: Object): ...
    @overload
    def __init__(self, instance: Object, settings: XamlObjectReaderSettings): ...
    @overload
    def __init__(self, instance: Object, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, instance: Object, schemaContext: XamlSchemaContext, settings: XamlObjectReaderSettings): ...
    @property
    def Instance(self) -> Object: ...
    @property
    def IsEof(self) -> bool: ...
    @property
    def Member(self) -> XamlMember: ...
    @property
    def Namespace(self) -> NamespaceDeclaration: ...
    @property
    def NodeType(self) -> XamlNodeType: ...
    @property
    def SchemaContext(self) -> XamlSchemaContext: ...
    @property
    def Type(self) -> XamlType: ...
    @property
    def Value(self) -> Object: ...
    def Read(self) -> bool: ...


class XamlObjectReaderException(XamlException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class XamlObjectReaderSettings(XamlReaderSettings):
    def __init__(self): ...
    @property
    def RequireExplicitContentVisibility(self) -> bool: ...
    @RequireExplicitContentVisibility.setter
    def RequireExplicitContentVisibility(self, value: bool) -> None: ...


class XamlObjectWriter(XamlWriter):
    @overload
    def __init__(self, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, schemaContext: XamlSchemaContext, settings: XamlObjectWriterSettings): ...
    def Clear(self) -> None: ...
    @property
    def Result(self) -> Object: ...
    @property
    def RootNameScope(self) -> INameScope: ...
    @property
    def SchemaContext(self) -> XamlSchemaContext: ...
    @property
    def ShouldProvideLineInfo(self) -> bool: ...
    def SetLineInfo(self, lineNumber: int, linePosition: int) -> None: ...
    def WriteEndMember(self) -> None: ...
    def WriteEndObject(self) -> None: ...
    def WriteGetObject(self) -> None: ...
    def WriteNamespace(self, namespaceDeclaration: NamespaceDeclaration) -> None: ...
    def WriteStartMember(self, property: XamlMember) -> None: ...
    def WriteStartObject(self, xamlType: XamlType) -> None: ...
    def WriteValue(self, value: Object) -> None: ...


class XamlObjectWriterException(XamlException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class XamlObjectWriterSettings(XamlWriterSettings):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, settings: XamlObjectWriterSettings): ...
    @property
    def AccessLevel(self) -> XamlAccessLevel: ...
    @property
    def AfterBeginInitHandler(self) -> EventHandler: ...
    @property
    def AfterEndInitHandler(self) -> EventHandler: ...
    @property
    def AfterPropertiesHandler(self) -> EventHandler: ...
    @property
    def BeforePropertiesHandler(self) -> EventHandler: ...
    @property
    def ExternalNameScope(self) -> INameScope: ...
    @property
    def IgnoreCanConvert(self) -> bool: ...
    @property
    def PreferUnconvertedDictionaryKeys(self) -> bool: ...
    @property
    def RegisterNamesOnExternalNamescope(self) -> bool: ...
    @property
    def RootObjectInstance(self) -> Object: ...
    @property
    def SkipDuplicatePropertyCheck(self) -> bool: ...
    @property
    def SkipProvideValueOnRoot(self) -> bool: ...
    @property
    def SourceBamlUri(self) -> Uri: ...
    @property
    def XamlSetValueHandler(self) -> EventHandler: ...
    @AccessLevel.setter
    def AccessLevel(self, value: XamlAccessLevel) -> None: ...
    @AfterBeginInitHandler.setter
    def AfterBeginInitHandler(self, value: EventHandler) -> None: ...
    @AfterEndInitHandler.setter
    def AfterEndInitHandler(self, value: EventHandler) -> None: ...
    @AfterPropertiesHandler.setter
    def AfterPropertiesHandler(self, value: EventHandler) -> None: ...
    @BeforePropertiesHandler.setter
    def BeforePropertiesHandler(self, value: EventHandler) -> None: ...
    @ExternalNameScope.setter
    def ExternalNameScope(self, value: INameScope) -> None: ...
    @IgnoreCanConvert.setter
    def IgnoreCanConvert(self, value: bool) -> None: ...
    @PreferUnconvertedDictionaryKeys.setter
    def PreferUnconvertedDictionaryKeys(self, value: bool) -> None: ...
    @RegisterNamesOnExternalNamescope.setter
    def RegisterNamesOnExternalNamescope(self, value: bool) -> None: ...
    @RootObjectInstance.setter
    def RootObjectInstance(self, value: Object) -> None: ...
    @SkipDuplicatePropertyCheck.setter
    def SkipDuplicatePropertyCheck(self, value: bool) -> None: ...
    @SkipProvideValueOnRoot.setter
    def SkipProvideValueOnRoot(self, value: bool) -> None: ...
    @SourceBamlUri.setter
    def SourceBamlUri(self, value: Uri) -> None: ...
    @XamlSetValueHandler.setter
    def XamlSetValueHandler(self, value: EventHandler) -> None: ...


class XamlParseException(XamlException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class XamlReader(Object):
    def Close(self) -> None: ...
    @property
    def IsEof(self) -> bool: ...
    @property
    def Member(self) -> XamlMember: ...
    @property
    def Namespace(self) -> NamespaceDeclaration: ...
    @property
    def NodeType(self) -> XamlNodeType: ...
    @property
    def SchemaContext(self) -> XamlSchemaContext: ...
    @property
    def Type(self) -> XamlType: ...
    @property
    def Value(self) -> Object: ...
    def Read(self) -> bool: ...
    def ReadSubtree(self) -> XamlReader: ...
    def Skip(self) -> None: ...


class XamlReaderSettings(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, settings: XamlReaderSettings): ...
    @property
    def AllowProtectedMembersOnRoot(self) -> bool: ...
    @property
    def BaseUri(self) -> Uri: ...
    @property
    def IgnoreUidsOnPropertyElements(self) -> bool: ...
    @property
    def LocalAssembly(self) -> Assembly: ...
    @property
    def ProvideLineInfo(self) -> bool: ...
    @property
    def ValuesMustBeString(self) -> bool: ...
    @AllowProtectedMembersOnRoot.setter
    def AllowProtectedMembersOnRoot(self, value: bool) -> None: ...
    @BaseUri.setter
    def BaseUri(self, value: Uri) -> None: ...
    @IgnoreUidsOnPropertyElements.setter
    def IgnoreUidsOnPropertyElements(self, value: bool) -> None: ...
    @LocalAssembly.setter
    def LocalAssembly(self, value: Assembly) -> None: ...
    @ProvideLineInfo.setter
    def ProvideLineInfo(self, value: bool) -> None: ...
    @ValuesMustBeString.setter
    def ValuesMustBeString(self, value: bool) -> None: ...


class XamlSchemaContext(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, settings: XamlSchemaContextSettings): ...
    @overload
    def __init__(self, referenceAssemblies: Iterable[Assembly]): ...
    @overload
    def __init__(self, referenceAssemblies: Iterable[Assembly], settings: XamlSchemaContextSettings): ...
    @property
    def FullyQualifyAssemblyNamesInClrNamespaces(self) -> bool: ...
    @property
    def ReferenceAssemblies(self) -> List[Assembly]: ...
    @property
    def SupportMarkupExtensionsWithDuplicateArity(self) -> bool: ...
    def GetAllXamlNamespaces(self) -> Iterable[str]: ...
    def GetAllXamlTypes(self, xamlNamespace: str) -> ICollection: ...
    def GetPreferredPrefix(self, xmlns: str) -> str: ...
    def GetXamlDirective(self, xamlNamespace: str, name: str) -> XamlDirective: ...
    @overload
    def GetXamlType(self, xamlTypeName: XamlTypeName) -> XamlType: ...
    @overload
    def GetXamlType(self, type: Type) -> XamlType: ...
    def TryGetCompatibleXamlNamespace(self, xamlNamespace: str) -> Tuple[bool, str]: ...


class XamlSchemaContextSettings(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, settings: XamlSchemaContextSettings): ...
    @property
    def FullyQualifyAssemblyNamesInClrNamespaces(self) -> bool: ...
    @property
    def SupportMarkupExtensionsWithDuplicateArity(self) -> bool: ...
    @FullyQualifyAssemblyNamesInClrNamespaces.setter
    def FullyQualifyAssemblyNamesInClrNamespaces(self, value: bool) -> None: ...
    @SupportMarkupExtensionsWithDuplicateArity.setter
    def SupportMarkupExtensionsWithDuplicateArity(self, value: bool) -> None: ...


class XamlSchemaException(XamlException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class XamlServices(Object):
    @overload
    def Load(fileName: str) -> Object: ...
    @overload
    def Load(stream: Stream) -> Object: ...
    @overload
    def Load(textReader: TextReader) -> Object: ...
    @overload
    def Load(xmlReader: XmlReader) -> Object: ...
    @overload
    def Load(xamlReader: XamlReader) -> Object: ...
    def Parse(xaml: str) -> Object: ...
    @overload
    def Save(instance: Object) -> str: ...
    @overload
    def Save(fileName: str, instance: Object) -> None: ...
    @overload
    def Save(stream: Stream, instance: Object) -> None: ...
    @overload
    def Save(writer: TextWriter, instance: Object) -> None: ...
    @overload
    def Save(writer: XmlWriter, instance: Object) -> None: ...
    @overload
    def Save(writer: XamlWriter, instance: Object) -> None: ...
    @overload
    def Transform(xamlReader: XamlReader, xamlWriter: XamlWriter) -> None: ...
    @overload
    def Transform(xamlReader: XamlReader, xamlWriter: XamlWriter, closeWriter: bool) -> None: ...


class XamlType(Object):
    @overload
    def __init__(self, underlyingType: Type, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, underlyingType: Type, schemaContext: XamlSchemaContext, invoker: XamlTypeInvoker): ...
    @overload
    def __init__(self, unknownTypeNamespace: str, unknownTypeName: str, typeArguments: List[XamlType], schemaContext: XamlSchemaContext): ...
    def CanAssignTo(self, xamlType: XamlType) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: XamlType) -> bool: ...
    @property
    def AllowedContentTypes(self) -> List[XamlType]: ...
    @property
    def BaseType(self) -> XamlType: ...
    @property
    def ConstructionRequiresArguments(self) -> bool: ...
    @property
    def ContentProperty(self) -> XamlMember: ...
    @property
    def ContentWrappers(self) -> List[XamlType]: ...
    @property
    def DeferringLoader(self) -> XamlValueConverter: ...
    @property
    def Invoker(self) -> XamlTypeInvoker: ...
    @property
    def IsAmbient(self) -> bool: ...
    @property
    def IsArray(self) -> bool: ...
    @property
    def IsCollection(self) -> bool: ...
    @property
    def IsConstructible(self) -> bool: ...
    @property
    def IsDictionary(self) -> bool: ...
    @property
    def IsGeneric(self) -> bool: ...
    @property
    def IsMarkupExtension(self) -> bool: ...
    @property
    def IsNameScope(self) -> bool: ...
    @property
    def IsNameValid(self) -> bool: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def IsUnknown(self) -> bool: ...
    @property
    def IsUsableDuringInitialization(self) -> bool: ...
    @property
    def IsWhitespaceSignificantCollection(self) -> bool: ...
    @property
    def IsXData(self) -> bool: ...
    @property
    def ItemType(self) -> XamlType: ...
    @property
    def KeyType(self) -> XamlType: ...
    @property
    def MarkupExtensionReturnType(self) -> XamlType: ...
    @property
    def Name(self) -> str: ...
    @property
    def PreferredXamlNamespace(self) -> str: ...
    @property
    def SchemaContext(self) -> XamlSchemaContext: ...
    @property
    def TrimSurroundingWhitespace(self) -> bool: ...
    @property
    def TypeArguments(self) -> List[XamlType]: ...
    @property
    def TypeConverter(self) -> XamlValueConverter: ...
    @property
    def UnderlyingType(self) -> Type: ...
    @property
    def ValueSerializer(self) -> XamlValueConverter: ...
    def GetAliasedProperty(self, directive: XamlDirective) -> XamlMember: ...
    def GetAllAttachableMembers(self) -> ICollection: ...
    def GetAllMembers(self) -> ICollection: ...
    def GetAttachableMember(self, name: str) -> XamlMember: ...
    def GetHashCode(self) -> int: ...
    def GetMember(self, name: str) -> XamlMember: ...
    def GetPositionalParameters(self, parameterCount: int) -> List[XamlType]: ...
    def GetXamlNamespaces(self) -> List[str]: ...
    def op_Equality(xamlType1: XamlType, xamlType2: XamlType) -> bool: ...
    def op_Inequality(xamlType1: XamlType, xamlType2: XamlType) -> bool: ...
    def ToString(self) -> str: ...


class XamlWriter(Object):
    def Close(self) -> None: ...
    @property
    def SchemaContext(self) -> XamlSchemaContext: ...
    def WriteEndMember(self) -> None: ...
    def WriteEndObject(self) -> None: ...
    def WriteGetObject(self) -> None: ...
    def WriteNamespace(self, namespaceDeclaration: NamespaceDeclaration) -> None: ...
    def WriteNode(self, reader: XamlReader) -> None: ...
    def WriteStartMember(self, xamlMember: XamlMember) -> None: ...
    def WriteStartObject(self, type: XamlType) -> None: ...
    def WriteValue(self, value: Object) -> None: ...


class XamlWriterSettings(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, settings: XamlWriterSettings): ...


class XamlXmlReader(XamlReader):
    @overload
    def __init__(self, xmlReader: XmlReader): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, textReader: TextReader): ...
    @overload
    def __init__(self, xmlReader: XmlReader, settings: XamlXmlReaderSettings): ...
    @overload
    def __init__(self, xmlReader: XmlReader, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, fileName: str, settings: XamlXmlReaderSettings): ...
    @overload
    def __init__(self, fileName: str, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, stream: Stream, settings: XamlXmlReaderSettings): ...
    @overload
    def __init__(self, stream: Stream, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, textReader: TextReader, settings: XamlXmlReaderSettings): ...
    @overload
    def __init__(self, textReader: TextReader, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, xmlReader: XmlReader, schemaContext: XamlSchemaContext, settings: XamlXmlReaderSettings): ...
    @overload
    def __init__(self, fileName: str, schemaContext: XamlSchemaContext, settings: XamlXmlReaderSettings): ...
    @overload
    def __init__(self, stream: Stream, schemaContext: XamlSchemaContext, settings: XamlXmlReaderSettings): ...
    @overload
    def __init__(self, textReader: TextReader, schemaContext: XamlSchemaContext, settings: XamlXmlReaderSettings): ...
    @property
    def HasLineInfo(self) -> bool: ...
    @property
    def IsEof(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def Member(self) -> XamlMember: ...
    @property
    def Namespace(self) -> NamespaceDeclaration: ...
    @property
    def NodeType(self) -> XamlNodeType: ...
    @property
    def SchemaContext(self) -> XamlSchemaContext: ...
    @property
    def Type(self) -> XamlType: ...
    @property
    def Value(self) -> Object: ...
    def Read(self) -> bool: ...


class XamlXmlReaderSettings(XamlReaderSettings):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, settings: XamlXmlReaderSettings): ...
    @property
    def CloseInput(self) -> bool: ...
    @property
    def SkipXmlCompatibilityProcessing(self) -> bool: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpacePreserve(self) -> bool: ...
    @CloseInput.setter
    def CloseInput(self, value: bool) -> None: ...
    @SkipXmlCompatibilityProcessing.setter
    def SkipXmlCompatibilityProcessing(self, value: bool) -> None: ...
    @XmlLang.setter
    def XmlLang(self, value: str) -> None: ...
    @XmlSpacePreserve.setter
    def XmlSpacePreserve(self, value: bool) -> None: ...


class XamlXmlWriter(XamlWriter):
    @overload
    def __init__(self, stream: Stream, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, textWriter: TextWriter, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, xmlWriter: XmlWriter, schemaContext: XamlSchemaContext): ...
    @overload
    def __init__(self, stream: Stream, schemaContext: XamlSchemaContext, settings: XamlXmlWriterSettings): ...
    @overload
    def __init__(self, textWriter: TextWriter, schemaContext: XamlSchemaContext, settings: XamlXmlWriterSettings): ...
    @overload
    def __init__(self, xmlWriter: XmlWriter, schemaContext: XamlSchemaContext, settings: XamlXmlWriterSettings): ...
    def Flush(self) -> None: ...
    @property
    def SchemaContext(self) -> XamlSchemaContext: ...
    @property
    def Settings(self) -> XamlXmlWriterSettings: ...
    def WriteEndMember(self) -> None: ...
    def WriteEndObject(self) -> None: ...
    def WriteGetObject(self) -> None: ...
    def WriteNamespace(self, namespaceDeclaration: NamespaceDeclaration) -> None: ...
    def WriteStartMember(self, property: XamlMember) -> None: ...
    def WriteStartObject(self, type: XamlType) -> None: ...
    def WriteValue(self, value: Object) -> None: ...


class XamlXmlWriterException(XamlException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class XamlXmlWriterSettings(XamlWriterSettings):
    def __init__(self): ...
    def Copy(self) -> XamlXmlWriterSettings: ...
    @property
    def AssumeValidInput(self) -> bool: ...
    @property
    def CloseOutput(self) -> bool: ...
    @AssumeValidInput.setter
    def AssumeValidInput(self, value: bool) -> None: ...
    @CloseOutput.setter
    def CloseOutput(self, value: bool) -> None: ...
