from typing import Tuple, Set, Iterable, List


class ApplicationBase:
    def __init__(self): ...
    def ChangeCulture(self, cultureName: str) -> None: ...
    def ChangeUICulture(self, cultureName: str) -> None: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def Info(self) -> AssemblyInfo: ...
    @property
    def Log(self) -> Log: ...
    @property
    def UICulture(self) -> CultureInfo: ...
    def GetEnvironmentVariable(self, name: str) -> str: ...


class ApplyApplicationDefaultsEventArgs:
    @property
    def Font(self) -> Font: ...
    @property
    def HighDpiMode(self) -> HighDpiMode: ...
    @property
    def MinimumSplashScreenDisplayTime(self) -> int: ...
    @Font.setter
    def Font(self, AutoPropertyValue: Font) -> None: ...
    @HighDpiMode.setter
    def HighDpiMode(self, AutoPropertyValue: HighDpiMode) -> None: ...
    @MinimumSplashScreenDisplayTime.setter
    def MinimumSplashScreenDisplayTime(self, AutoPropertyValue: int) -> None: ...


class ApplyApplicationDefaultsEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ApplyApplicationDefaultsEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ApplyApplicationDefaultsEventArgs) -> None: ...


class AssemblyInfo:
    def __init__(self, currentAssembly: Assembly): ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def DirectoryPath(self) -> str: ...
    @property
    def LoadedAssemblies(self) -> ReadOnlyCollection: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Trademark(self) -> str: ...
    @property
    def Version(self) -> Version: ...
    @property
    def WorkingSet(self) -> Int64: ...


class AuthenticationMode:
    Windows = 0
    ApplicationDefined = 1


class CantStartSingleInstanceException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class ConsoleApplicationBase(ApplicationBase):
    def __init__(self): ...
    @property
    def CommandLineArgs(self) -> ReadOnlyCollection: ...


class NoStartupFormException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class ShutdownEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EventArgs) -> None: ...


class ShutdownMode:
    AfterMainFormCloses = 0
    AfterAllFormsClose = 1


class StartupEventArgs:
    def __init__(self, args: ReadOnlyCollection): ...
    @property
    def CommandLine(self) -> ReadOnlyCollection: ...


class StartupEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: StartupEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: StartupEventArgs) -> None: ...


class StartupNextInstanceEventArgs:
    def __init__(self, args: ReadOnlyCollection, bringToForegroundFlag: bool): ...
    @property
    def BringToForeground(self) -> bool: ...
    @property
    def CommandLine(self) -> ReadOnlyCollection: ...
    @BringToForeground.setter
    def BringToForeground(self, AutoPropertyValue: bool) -> None: ...


class StartupNextInstanceEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: StartupNextInstanceEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: StartupNextInstanceEventArgs) -> None: ...


class UnhandledExceptionEventArgs:
    def __init__(self, exitApplication: bool, exception: Exception): ...
    @property
    def ExitApplication(self) -> bool: ...
    @ExitApplication.setter
    def ExitApplication(self, AutoPropertyValue: bool) -> None: ...


class UnhandledExceptionEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: UnhandledExceptionEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: UnhandledExceptionEventArgs) -> None: ...


class User:
    def __init__(self): ...
    @property
    def CurrentPrincipal(self) -> IPrincipal: ...
    @property
    def IsAuthenticated(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    def IsInRole(self, role: str) -> bool: ...
    @CurrentPrincipal.setter
    def CurrentPrincipal(self, value: IPrincipal) -> None: ...


class WindowsFormsApplicationBase(ConsoleApplicationBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, authenticationMode: AuthenticationMode): ...
    def add_ApplyApplicationDefaults(self, obj: ApplyApplicationDefaultsEventHandler) -> None: ...
    def add_NetworkAvailabilityChanged(self, value: NetworkAvailableEventHandler) -> None: ...
    def add_Shutdown(self, obj: ShutdownEventHandler) -> None: ...
    def add_Startup(self, obj: StartupEventHandler) -> None: ...
    def add_StartupNextInstance(self, obj: StartupNextInstanceEventHandler) -> None: ...
    def add_UnhandledException(self, value: UnhandledExceptionEventHandler) -> None: ...
    def DoEvents(self) -> None: ...
    @property
    def ApplicationContext(self) -> ApplicationContext: ...
    @property
    def MinimumSplashScreenDisplayTime(self) -> int: ...
    @property
    def OpenForms(self) -> FormCollection: ...
    @property
    def SaveMySettingsOnExit(self) -> bool: ...
    @property
    def SplashScreen(self) -> Form: ...
    def remove_ApplyApplicationDefaults(self, obj: ApplyApplicationDefaultsEventHandler) -> None: ...
    def remove_NetworkAvailabilityChanged(self, value: NetworkAvailableEventHandler) -> None: ...
    def remove_Shutdown(self, obj: ShutdownEventHandler) -> None: ...
    def remove_Startup(self, obj: StartupEventHandler) -> None: ...
    def remove_StartupNextInstance(self, obj: StartupNextInstanceEventHandler) -> None: ...
    def remove_UnhandledException(self, value: UnhandledExceptionEventHandler) -> None: ...
    def Run(self, commandLine: Set(str)) -> None: ...
    @MinimumSplashScreenDisplayTime.setter
    def MinimumSplashScreenDisplayTime(self, value: int) -> None: ...
    @SaveMySettingsOnExit.setter
    def SaveMySettingsOnExit(self, value: bool) -> None: ...
    @SplashScreen.setter
    def SplashScreen(self, value: Form) -> None: ...
