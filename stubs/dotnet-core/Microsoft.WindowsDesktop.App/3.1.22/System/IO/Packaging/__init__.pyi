from typing import Tuple, Set, Iterable, List


class CompressionOption:
    Normal = 0
    Maximum = 1
    Fast = 2
    SuperFast = 3
    NotCompressed = -1


class EncryptionOption:
    #None = 0
    RightsManagement = 1


class Package(Object):
    def Close(self) -> None: ...
    @overload
    def CreatePart(self, partUri: Uri, contentType: str) -> PackagePart: ...
    @overload
    def CreatePart(self, partUri: Uri, contentType: str, compressionOption: CompressionOption) -> PackagePart: ...
    @overload
    def CreateRelationship(self, targetUri: Uri, targetMode: TargetMode, relationshipType: str) -> PackageRelationship: ...
    @overload
    def CreateRelationship(self, targetUri: Uri, targetMode: TargetMode, relationshipType: str, id: str) -> PackageRelationship: ...
    def DeletePart(self, partUri: Uri) -> None: ...
    def DeleteRelationship(self, id: str) -> None: ...
    def Flush(self) -> None: ...
    @property
    def FileOpenAccess(self) -> FileAccess: ...
    @property
    def PackageProperties(self) -> PackageProperties: ...
    def GetPart(self, partUri: Uri) -> PackagePart: ...
    def GetParts(self) -> PackagePartCollection: ...
    def GetRelationship(self, id: str) -> PackageRelationship: ...
    def GetRelationships(self) -> PackageRelationshipCollection: ...
    def GetRelationshipsByType(self, relationshipType: str) -> PackageRelationshipCollection: ...
    @overload
    def Open(path: str) -> Package: ...
    @overload
    def Open(stream: Stream) -> Package: ...
    @overload
    def Open(stream: Stream, packageMode: FileMode) -> Package: ...
    @overload
    def Open(path: str, packageMode: FileMode) -> Package: ...
    @overload
    def Open(path: str, packageMode: FileMode, packageAccess: FileAccess) -> Package: ...
    @overload
    def Open(stream: Stream, packageMode: FileMode, packageAccess: FileAccess) -> Package: ...
    @overload
    def Open(path: str, packageMode: FileMode, packageAccess: FileAccess, packageShare: FileShare) -> Package: ...
    def PartExists(self, partUri: Uri) -> bool: ...
    def RelationshipExists(self, id: str) -> bool: ...


class PackagePart(Object):
    @overload
    def CreateRelationship(self, targetUri: Uri, targetMode: TargetMode, relationshipType: str) -> PackageRelationship: ...
    @overload
    def CreateRelationship(self, targetUri: Uri, targetMode: TargetMode, relationshipType: str, id: str) -> PackageRelationship: ...
    def DeleteRelationship(self, id: str) -> None: ...
    @property
    def CompressionOption(self) -> CompressionOption: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Package(self) -> Package: ...
    @property
    def Uri(self) -> Uri: ...
    def GetRelationship(self, id: str) -> PackageRelationship: ...
    def GetRelationships(self) -> PackageRelationshipCollection: ...
    def GetRelationshipsByType(self, relationshipType: str) -> PackageRelationshipCollection: ...
    @overload
    def GetStream(self) -> Stream: ...
    @overload
    def GetStream(self, mode: FileMode) -> Stream: ...
    @overload
    def GetStream(self, mode: FileMode, access: FileAccess) -> Stream: ...
    def RelationshipExists(self, id: str) -> bool: ...


class PackagePartCollection(Object):
    def GetEnumerator(self) -> IEnumerator: ...


class PackageProperties(Object):
    def Dispose(self) -> None: ...
    @property
    def Category(self) -> str: ...
    @property
    def ContentStatus(self) -> str: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Created(self) -> Nullable: ...
    @property
    def Creator(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Identifier(self) -> str: ...
    @property
    def Keywords(self) -> str: ...
    @property
    def Language(self) -> str: ...
    @property
    def LastModifiedBy(self) -> str: ...
    @property
    def LastPrinted(self) -> Nullable: ...
    @property
    def Modified(self) -> Nullable: ...
    @property
    def Revision(self) -> str: ...
    @property
    def Subject(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Category.setter
    def Category(self, value: str) -> None: ...
    @ContentStatus.setter
    def ContentStatus(self, value: str) -> None: ...
    @ContentType.setter
    def ContentType(self, value: str) -> None: ...
    @Created.setter
    def Created(self, value: Nullable) -> None: ...
    @Creator.setter
    def Creator(self, value: str) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Identifier.setter
    def Identifier(self, value: str) -> None: ...
    @Keywords.setter
    def Keywords(self, value: str) -> None: ...
    @Language.setter
    def Language(self, value: str) -> None: ...
    @LastModifiedBy.setter
    def LastModifiedBy(self, value: str) -> None: ...
    @LastPrinted.setter
    def LastPrinted(self, value: Nullable) -> None: ...
    @Modified.setter
    def Modified(self, value: Nullable) -> None: ...
    @Revision.setter
    def Revision(self, value: str) -> None: ...
    @Subject.setter
    def Subject(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...


class PackageRelationship(Object):
    @property
    def Id(self) -> str: ...
    @property
    def Package(self) -> Package: ...
    @property
    def RelationshipType(self) -> str: ...
    @property
    def SourceUri(self) -> Uri: ...
    @property
    def TargetMode(self) -> TargetMode: ...
    @property
    def TargetUri(self) -> Uri: ...


class PackageRelationshipCollection(Object):
    def GetEnumerator(self) -> IEnumerator: ...


class PackageRelationshipSelector(Object):
    def __init__(self, sourceUri: Uri, selectorType: PackageRelationshipSelectorType, selectionCriteria: str): ...
    @property
    def SelectionCriteria(self) -> str: ...
    @property
    def SelectorType(self) -> PackageRelationshipSelectorType: ...
    @property
    def SourceUri(self) -> Uri: ...
    def Select(self, package: Package) -> List: ...


class PackageRelationshipSelectorType:
    Id = 0
    Type = 1


class PackUriHelper(Object):
    def ComparePackUri(firstPackUri: Uri, secondPackUri: Uri) -> int: ...
    def ComparePartUri(firstPartUri: Uri, secondPartUri: Uri) -> int: ...
    @overload
    def Create(packageUri: Uri) -> Uri: ...
    @overload
    def Create(packageUri: Uri, partUri: Uri) -> Uri: ...
    @overload
    def Create(packageUri: Uri, partUri: Uri, fragment: str) -> Uri: ...
    def CreatePartUri(partUri: Uri) -> Uri: ...
    def GetNormalizedPartUri(partUri: Uri) -> Uri: ...
    def GetPackageUri(packUri: Uri) -> Uri: ...
    def GetPartUri(packUri: Uri) -> Uri: ...
    def GetRelationshipPartUri(partUri: Uri) -> Uri: ...
    def GetRelativeUri(sourcePartUri: Uri, targetPartUri: Uri) -> Uri: ...
    def GetSourcePartUriFromRelationshipPartUri(relationshipPartUri: Uri) -> Uri: ...
    def IsRelationshipPartUri(partUri: Uri) -> bool: ...
    def ResolvePartUri(sourcePartUri: Uri, targetUri: Uri) -> Uri: ...


class TargetMode:
    Internal = 0
    External = 1


class ZipPackage(Package):
    pass


class ZipPackagePart(PackagePart):
    pass
