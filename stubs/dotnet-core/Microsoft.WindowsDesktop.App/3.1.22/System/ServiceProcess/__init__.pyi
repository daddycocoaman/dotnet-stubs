from typing import Tuple, Set, Iterable, List


class ServiceControllerPermission(ResourcePermissionBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, state: PermissionState): ...
    @overload
    def __init__(self, permissionAccessEntries: Set(ServiceControllerPermissionEntry)): ...
    @overload
    def __init__(self, permissionAccess: ServiceControllerPermissionAccess, machineName: str, serviceName: str): ...
    @property
    def PermissionEntries(self) -> ServiceControllerPermissionEntryCollection: ...


class ServiceControllerPermissionAccess:
    #None = 0
    Browse = 2
    Control = 6


class ServiceControllerPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def PermissionAccess(self) -> ServiceControllerPermissionAccess: ...
    @property
    def ServiceName(self) -> str: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...
    @PermissionAccess.setter
    def PermissionAccess(self, value: ServiceControllerPermissionAccess) -> None: ...
    @ServiceName.setter
    def ServiceName(self, value: str) -> None: ...


class ServiceControllerPermissionEntry(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, permissionAccess: ServiceControllerPermissionAccess, machineName: str, serviceName: str): ...
    @property
    def MachineName(self) -> str: ...
    @property
    def PermissionAccess(self) -> ServiceControllerPermissionAccess: ...
    @property
    def ServiceName(self) -> str: ...


class ServiceControllerPermissionEntryCollection(CollectionBase):
    def Add(self, value: ServiceControllerPermissionEntry) -> int: ...
    @overload
    def AddRange(self, value: Set(ServiceControllerPermissionEntry)) -> None: ...
    @overload
    def AddRange(self, value: ServiceControllerPermissionEntryCollection) -> None: ...
    def Contains(self, value: ServiceControllerPermissionEntry) -> bool: ...
    def CopyTo(self, array: Set(ServiceControllerPermissionEntry), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ServiceControllerPermissionEntry: ...
    def IndexOf(self, value: ServiceControllerPermissionEntry) -> int: ...
    def Insert(self, index: int, value: ServiceControllerPermissionEntry) -> None: ...
    def Remove(self, value: ServiceControllerPermissionEntry) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ServiceControllerPermissionEntry) -> None: ...
