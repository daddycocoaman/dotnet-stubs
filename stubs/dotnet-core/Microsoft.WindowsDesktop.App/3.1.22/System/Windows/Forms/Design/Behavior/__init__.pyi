from typing import Tuple, Set, Iterable, List


class Adorner(Object):
    def __init__(self): ...
    @property
    def BehaviorService(self) -> BehaviorService: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Glyphs(self) -> GlyphCollection: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rectangle: Rectangle) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @BehaviorService.setter
    def BehaviorService(self, value: BehaviorService) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...


class Behavior(Object):
    def FindCommand(self, commandId: CommandID) -> MenuCommand: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DisableAllCommands(self) -> bool: ...
    def OnDragDrop(self, g: Glyph, e: DragEventArgs) -> None: ...
    def OnDragEnter(self, g: Glyph, e: DragEventArgs) -> None: ...
    def OnDragLeave(self, g: Glyph, e: EventArgs) -> None: ...
    def OnDragOver(self, g: Glyph, e: DragEventArgs) -> None: ...
    def OnGiveFeedback(self, g: Glyph, e: GiveFeedbackEventArgs) -> None: ...
    def OnLoseCapture(self, g: Glyph, e: EventArgs) -> None: ...
    def OnMouseDoubleClick(self, g: Glyph, button: MouseButtons, mouseLoc: Point) -> bool: ...
    def OnMouseDown(self, g: Glyph, button: MouseButtons, mouseLoc: Point) -> bool: ...
    def OnMouseEnter(self, g: Glyph) -> bool: ...
    def OnMouseHover(self, g: Glyph, mouseLoc: Point) -> bool: ...
    def OnMouseLeave(self, g: Glyph) -> bool: ...
    def OnMouseMove(self, g: Glyph, button: MouseButtons, mouseLoc: Point) -> bool: ...
    def OnMouseUp(self, g: Glyph, button: MouseButtons) -> bool: ...
    def OnQueryContinueDrag(self, g: Glyph, e: QueryContinueDragEventArgs) -> None: ...


class BehaviorDragDropEventArgs(EventArgs):
    def __init__(self, dragComponents: ICollection): ...
    @property
    def DragComponents(self) -> ICollection: ...


class BehaviorDragDropEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: BehaviorDragDropEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: BehaviorDragDropEventArgs) -> None: ...


class BehaviorService(Object):
    def add_BeginDrag(self, value: BehaviorDragDropEventHandler) -> None: ...
    def add_EndDrag(self, value: BehaviorDragDropEventHandler) -> None: ...
    def add_Synchronize(self, value: EventHandler) -> None: ...
    def AdornerWindowPointToScreen(self, p: Point) -> Point: ...
    def AdornerWindowToScreen(self) -> Point: ...
    def ControlRectInAdornerWindow(self, c: Control) -> Rectangle: ...
    def ControlToAdornerWindow(self, c: Control) -> Point: ...
    def Dispose(self) -> None: ...
    @property
    def Adorners(self) -> BehaviorServiceAdornerCollection: ...
    @property
    def AdornerWindowGraphics(self) -> Graphics: ...
    @property
    def CurrentBehavior(self) -> Behavior: ...
    def GetNextBehavior(self, behavior: Behavior) -> Behavior: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, r: Region) -> None: ...
    def MapAdornerWindowPoint(self, handle: IntPtr, pt: Point) -> Point: ...
    def PopBehavior(self, behavior: Behavior) -> Behavior: ...
    def PushBehavior(self, behavior: Behavior) -> None: ...
    def PushCaptureBehavior(self, behavior: Behavior) -> None: ...
    def remove_BeginDrag(self, value: BehaviorDragDropEventHandler) -> None: ...
    def remove_EndDrag(self, value: BehaviorDragDropEventHandler) -> None: ...
    def remove_Synchronize(self, value: EventHandler) -> None: ...
    def ScreenToAdornerWindow(self, p: Point) -> Point: ...
    def SyncSelection(self) -> None: ...


class BehaviorServiceAdornerCollection(CollectionBase):
    @overload
    def __init__(self, behaviorService: BehaviorService): ...
    @overload
    def __init__(self, value: BehaviorServiceAdornerCollection): ...
    @overload
    def __init__(self, value: Set(Adorner)): ...
    def Add(self, value: Adorner) -> int: ...
    @overload
    def AddRange(self, value: Set(Adorner)) -> None: ...
    @overload
    def AddRange(self, value: BehaviorServiceAdornerCollection) -> None: ...
    def Contains(self, value: Adorner) -> bool: ...
    def CopyTo(self, array: Set(Adorner), index: int) -> None: ...
    @property
    def Item(self, index: int) -> Adorner: ...
    @overload
    def GetEnumerator(self) -> BehaviorServiceAdornerCollectionEnumerator: ...
    def IndexOf(self, value: Adorner) -> int: ...
    def Insert(self, index: int, value: Adorner) -> None: ...
    def Remove(self, value: Adorner) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Adorner) -> None: ...


class BehaviorServiceAdornerCollectionEnumerator(Object):
    def __init__(self, mappings: BehaviorServiceAdornerCollection): ...
    @property
    def Current(self) -> Adorner: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class ComponentGlyph(Glyph):
    @overload
    def __init__(self, relatedComponent: IComponent): ...
    @overload
    def __init__(self, relatedComponent: IComponent, behavior: Behavior): ...
    @property
    def RelatedComponent(self) -> IComponent: ...
    def GetHitTest(self, p: Point) -> Cursor: ...
    def Paint(self, pe: PaintEventArgs) -> None: ...


class ControlBodyGlyph(ComponentGlyph):
    @overload
    def __init__(self, bounds: Rectangle, cursor: Cursor, relatedComponent: IComponent, designer: ControlDesigner): ...
    @overload
    def __init__(self, bounds: Rectangle, cursor: Cursor, relatedComponent: IComponent, behavior: Behavior): ...
    @property
    def Bounds(self) -> Rectangle: ...
    def GetHitTest(self, p: Point) -> Cursor: ...


class Glyph(Object):
    @property
    def Behavior(self) -> Behavior: ...
    @property
    def Bounds(self) -> Rectangle: ...
    def GetHitTest(self, p: Point) -> Cursor: ...
    def Paint(self, pe: PaintEventArgs) -> None: ...


class GlyphCollection(CollectionBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: GlyphCollection): ...
    @overload
    def __init__(self, value: Set(Glyph)): ...
    def Add(self, value: Glyph) -> int: ...
    @overload
    def AddRange(self, value: Set(Glyph)) -> None: ...
    @overload
    def AddRange(self, value: GlyphCollection) -> None: ...
    def Contains(self, value: Glyph) -> bool: ...
    def CopyTo(self, array: Set(Glyph), index: int) -> None: ...
    @property
    def Item(self, index: int) -> Glyph: ...
    def IndexOf(self, value: Glyph) -> int: ...
    def Insert(self, index: int, value: Glyph) -> None: ...
    def Remove(self, value: Glyph) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Glyph) -> None: ...


class GlyphSelectionType:
    NotSelected = 0
    Selected = 1
    SelectedPrimary = 2


class SnapLine(Object):
    @overload
    def __init__(self, type: SnapLineType, offset: int): ...
    @overload
    def __init__(self, type: SnapLineType, offset: int, filter: str): ...
    @overload
    def __init__(self, type: SnapLineType, offset: int, priority: SnapLinePriority): ...
    @overload
    def __init__(self, type: SnapLineType, offset: int, filter: str, priority: SnapLinePriority): ...
    def AdjustOffset(self, adjustment: int) -> None: ...
    @property
    def Filter(self) -> str: ...
    @property
    def IsHorizontal(self) -> bool: ...
    @property
    def IsVertical(self) -> bool: ...
    @property
    def Offset(self) -> int: ...
    @property
    def Priority(self) -> SnapLinePriority: ...
    @property
    def SnapLineType(self) -> SnapLineType: ...
    def ShouldSnap(line1: SnapLine, line2: SnapLine) -> bool: ...
    def ToString(self) -> str: ...


class SnapLinePriority:
    Low = 1
    Medium = 2
    High = 3
    Always = 4


class SnapLineType:
    Top = 0
    Bottom = 1
    Left = 2
    Right = 3
    Horizontal = 4
    Vertical = 5
    Baseline = 6
