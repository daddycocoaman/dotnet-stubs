__all__ = ['Automation','Design','Layout','PropertyGridInternal','VisualStyles']
from typing import Tuple, Set, Iterable, List


class AccessibleEvents:
    SystemSound = 1
    SystemAlert = 2
    SystemForeground = 3
    SystemMenuStart = 4
    SystemMenuEnd = 5
    SystemMenuPopupStart = 6
    SystemMenuPopupEnd = 7
    SystemCaptureStart = 8
    SystemCaptureEnd = 9
    SystemMoveSizeStart = 10
    SystemMoveSizeEnd = 11
    SystemContextHelpStart = 12
    SystemContextHelpEnd = 13
    SystemDragDropStart = 14
    SystemDragDropEnd = 15
    SystemDialogStart = 16
    SystemDialogEnd = 17
    SystemScrollingStart = 18
    SystemScrollingEnd = 19
    SystemSwitchStart = 20
    SystemSwitchEnd = 21
    SystemMinimizeStart = 22
    SystemMinimizeEnd = 23
    Create = 32768
    Destroy = 32769
    Show = 32770
    Hide = 32771
    Reorder = 32772
    Focus = 32773
    Selection = 32774
    SelectionAdd = 32775
    SelectionRemove = 32776
    SelectionWithin = 32777
    StateChange = 32778
    LocationChange = 32779
    NameChange = 32780
    DescriptionChange = 32781
    ValueChange = 32782
    ParentChange = 32783
    HelpChange = 32784
    DefaultActionChange = 32785
    AcceleratorChange = 32786


class AccessibleNavigation:
    Up = 1
    Down = 2
    Left = 3
    Right = 4
    Next = 5
    Previous = 6
    FirstChild = 7
    LastChild = 8


class AccessibleObject(StandardOleMarshalObject):
    def __init__(self): ...
    def DoDefaultAction(self) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Help(self) -> str: ...
    @property
    def KeyboardShortcut(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> AccessibleObject: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...
    @property
    def Value(self) -> str: ...
    def GetChild(self, index: int) -> AccessibleObject: ...
    def GetChildCount(self) -> int: ...
    def GetFocused(self) -> AccessibleObject: ...
    def GetHelpTopic(self) -> Tuple[int, str]: ...
    def GetSelected(self) -> AccessibleObject: ...
    def HitTest(self, x: int, y: int) -> AccessibleObject: ...
    def Navigate(self, navdir: AccessibleNavigation) -> AccessibleObject: ...
    def RaiseAutomationNotification(self, notificationKind: AutomationNotificationKind, notificationProcessing: AutomationNotificationProcessing, notificationText: str) -> bool: ...
    def RaiseLiveRegionChanged(self) -> bool: ...
    def Select(self, flags: AccessibleSelection) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class AccessibleRole:
    #None = 0
    TitleBar = 1
    MenuBar = 2
    ScrollBar = 3
    Grip = 4
    Sound = 5
    Cursor = 6
    Caret = 7
    Alert = 8
    Window = 9
    Client = 10
    MenuPopup = 11
    MenuItem = 12
    ToolTip = 13
    Application = 14
    Document = 15
    Pane = 16
    Chart = 17
    Dialog = 18
    Border = 19
    Grouping = 20
    Separator = 21
    ToolBar = 22
    StatusBar = 23
    Table = 24
    ColumnHeader = 25
    RowHeader = 26
    Column = 27
    Row = 28
    Cell = 29
    Link = 30
    HelpBalloon = 31
    Character = 32
    List = 33
    ListItem = 34
    Outline = 35
    OutlineItem = 36
    PageTab = 37
    PropertyPage = 38
    Indicator = 39
    Graphic = 40
    StaticText = 41
    Text = 42
    PushButton = 43
    CheckButton = 44
    RadioButton = 45
    ComboBox = 46
    DropList = 47
    ProgressBar = 48
    Dial = 49
    HotkeyField = 50
    Slider = 51
    SpinButton = 52
    Diagram = 53
    Animation = 54
    Equation = 55
    ButtonDropDown = 56
    ButtonMenu = 57
    ButtonDropDownGrid = 58
    WhiteSpace = 59
    PageTabList = 60
    Clock = 61
    SplitButton = 62
    IpAddress = 63
    OutlineButton = 64
    Default = -1


class AccessibleSelection:
    #None = 0
    TakeFocus = 1
    TakeSelection = 2
    ExtendSelection = 4
    AddSelection = 8
    RemoveSelection = 16


class AccessibleStates:
    #None = 0
    Unavailable = 1
    Selected = 2
    Focused = 4
    Pressed = 8
    Checked = 16
    Indeterminate = 32
    Mixed = 32
    ReadOnly = 64
    HotTracked = 128
    Default = 256
    Expanded = 512
    Collapsed = 1024
    Busy = 2048
    Floating = 4096
    Marqueed = 8192
    Animated = 16384
    Invisible = 32768
    Offscreen = 65536
    Sizeable = 131072
    Moveable = 262144
    SelfVoicing = 524288
    Focusable = 1048576
    Selectable = 2097152
    Linked = 4194304
    Traversed = 8388608
    MultiSelectable = 16777216
    ExtSelectable = 33554432
    AlertLow = 67108864
    AlertMedium = 134217728
    AlertHigh = 268435456
    Protected = 536870912
    Valid = 1073741823
    HasPopup = 1073741824


class ActiveXInvokeKind:
    MethodInvoke = 0
    PropertyGet = 1
    PropertySet = 2


class AmbientProperties(Object):
    def __init__(self): ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...


class AnchorStyles:
    #None = 0
    Top = 1
    Bottom = 2
    Left = 4
    Right = 8


class Appearance:
    Normal = 0
    Button = 1


class Application(Object):
    def add_ApplicationExit(value: EventHandler) -> None: ...
    def add_EnterThreadModal(value: EventHandler) -> None: ...
    def add_Idle(value: EventHandler) -> None: ...
    def add_LeaveThreadModal(value: EventHandler) -> None: ...
    def add_ThreadException(value: ThreadExceptionEventHandler) -> None: ...
    def add_ThreadExit(value: EventHandler) -> None: ...
    def AddMessageFilter(value: IMessageFilter) -> None: ...
    def DoEvents() -> None: ...
    def EnableVisualStyles() -> None: ...
    @overload
    def Exit() -> None: ...
    @overload
    def Exit(e: CancelEventArgs) -> None: ...
    def ExitThread() -> None: ...
    def FilterMessage(message: Message) -> Tuple[bool, Message]: ...
    @property
    def AllowQuit() -> bool: ...
    @property
    def CommonAppDataPath() -> str: ...
    @property
    def CommonAppDataRegistry() -> RegistryKey: ...
    @property
    def CompanyName() -> str: ...
    @property
    def CurrentCulture() -> CultureInfo: ...
    @property
    def CurrentInputLanguage() -> InputLanguage: ...
    @property
    def ExecutablePath() -> str: ...
    @property
    def HighDpiMode() -> HighDpiMode: ...
    @property
    def LocalUserAppDataPath() -> str: ...
    @property
    def MessageLoop() -> bool: ...
    @property
    def OpenForms() -> FormCollection: ...
    @property
    def ProductName() -> str: ...
    @property
    def ProductVersion() -> str: ...
    @property
    def RenderWithVisualStyles() -> bool: ...
    @property
    def SafeTopLevelCaptionFormat() -> str: ...
    @property
    def StartupPath() -> str: ...
    @property
    def UserAppDataPath() -> str: ...
    @property
    def UserAppDataRegistry() -> RegistryKey: ...
    @property
    def UseVisualStyles() -> bool: ...
    @property
    def UseWaitCursor() -> bool: ...
    @property
    def VisualStyleState() -> VisualStyleState: ...
    def OleRequired() -> ApartmentState: ...
    def OnThreadException(t: Exception) -> None: ...
    def RaiseIdle(e: EventArgs) -> None: ...
    def RegisterMessageLoop(callback: MessageLoopCallback) -> None: ...
    def remove_ApplicationExit(value: EventHandler) -> None: ...
    def remove_EnterThreadModal(value: EventHandler) -> None: ...
    def remove_Idle(value: EventHandler) -> None: ...
    def remove_LeaveThreadModal(value: EventHandler) -> None: ...
    def remove_ThreadException(value: ThreadExceptionEventHandler) -> None: ...
    def remove_ThreadExit(value: EventHandler) -> None: ...
    def RemoveMessageFilter(value: IMessageFilter) -> None: ...
    def Restart() -> None: ...
    @overload
    def Run() -> None: ...
    @overload
    def Run(mainForm: Form) -> None: ...
    @overload
    def Run(context: ApplicationContext) -> None: ...
    @CurrentCulture.setter
    def CurrentCulture(value: CultureInfo) -> None: ...
    @CurrentInputLanguage.setter
    def CurrentInputLanguage(value: InputLanguage) -> None: ...
    @SafeTopLevelCaptionFormat.setter
    def SafeTopLevelCaptionFormat(value: str) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(value: bool) -> None: ...
    @VisualStyleState.setter
    def VisualStyleState(value: VisualStyleState) -> None: ...
    def SetCompatibleTextRenderingDefault(defaultValue: bool) -> None: ...
    def SetHighDpiMode(highDpiMode: HighDpiMode) -> bool: ...
    def SetSuspendState(state: PowerState, force: bool, disableWakeEvent: bool) -> bool: ...
    @overload
    def SetUnhandledExceptionMode(mode: UnhandledExceptionMode) -> None: ...
    @overload
    def SetUnhandledExceptionMode(mode: UnhandledExceptionMode, threadScope: bool) -> None: ...
    def UnregisterMessageLoop() -> None: ...


class ApplicationContext(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, mainForm: Form): ...
    def add_ThreadExit(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    def ExitThread(self) -> None: ...
    @property
    def MainForm(self) -> Form: ...
    @property
    def Tag(self) -> Object: ...
    def remove_ThreadExit(self, value: EventHandler) -> None: ...
    @MainForm.setter
    def MainForm(self, value: Form) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...


class ArrangeDirection:
    Left = 0
    Right = 0
    Down = 4
    Up = 4


class ArrangeStartingPosition:
    BottomLeft = 0
    BottomRight = 1
    TopLeft = 2
    TopRight = 3
    Hide = 8


class ArrowDirection:
    Left = 0
    Up = 1
    Right = 16
    Down = 17


class AutoCompleteMode:
    #None = 0
    Suggest = 1
    Append = 2
    SuggestAppend = 3


class AutoCompleteSource:
    FileSystem = 1
    HistoryList = 2
    RecentlyUsedList = 4
    AllUrl = 6
    AllSystemSources = 7
    FileSystemDirectories = 32
    CustomSource = 64
    #None = 128
    ListItems = 256


class AutoCompleteStringCollection(Object):
    def __init__(self): ...
    def add_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    def Add(self, value: str) -> int: ...
    def AddRange(self, value: Set(str)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, value: str) -> bool: ...
    def CopyTo(self, array: Set(str), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, index: int) -> str: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: str) -> int: ...
    def Insert(self, index: int, value: str) -> None: ...
    def remove_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    def Remove(self, value: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: str) -> None: ...


class AutoScaleMode:
    #None = 0
    Font = 1
    Dpi = 2
    Inherit = 3


class AutoSizeMode:
    GrowAndShrink = 0
    GrowOnly = 1


class AutoValidate:
    Disable = 0
    EnablePreventFocusChange = 1
    EnableAllowFocusChange = 2
    Inherit = -1


class AxComponentEditor(WindowsFormsComponentEditor):
    def __init__(self): ...
    @overload
    def EditComponent(self, context: ITypeDescriptorContext, obj: Object, parent: IWin32Window) -> bool: ...


class AxHost(Control):
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def BeginInit(self) -> None: ...
    def DoVerb(self, verb: int) -> None: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def ContainingControl(self) -> ContainerControl: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def EditMode(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def HasAboutBox(self) -> bool: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def OcxState(self) -> State: ...
    @property
    def RightToLeft(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    def GetOcx(self) -> Object: ...
    def HasPropertyPages(self) -> bool: ...
    def InvokeEditMode(self) -> None: ...
    def MakeDirty(self) -> None: ...
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @ContainingControl.setter
    def ContainingControl(self, value: ContainerControl) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @OcxState.setter
    def OcxState(self, value: State) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: bool) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    def ShowAboutBox(self) -> None: ...
    @overload
    def ShowPropertyPages(self) -> None: ...
    @overload
    def ShowPropertyPages(self, control: Control) -> None: ...


class BaseCollection(MarshalByRefObject):
    def __init__(self): ...
    def CopyTo(self, ar: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...


class BatteryChargeStatus:
    High = 1
    Low = 2
    Critical = 4
    Charging = 8
    NoSystemBattery = 128
    Unknown = 255


class Binding(Object):
    @overload
    def __init__(self, propertyName: str, dataSource: Object, dataMember: str): ...
    @overload
    def __init__(self, propertyName: str, dataSource: Object, dataMember: str, formattingEnabled: bool): ...
    @overload
    def __init__(self, propertyName: str, dataSource: Object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode): ...
    @overload
    def __init__(self, propertyName: str, dataSource: Object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode, nullValue: Object): ...
    @overload
    def __init__(self, propertyName: str, dataSource: Object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode, nullValue: Object, formatString: str): ...
    @overload
    def __init__(self, propertyName: str, dataSource: Object, dataMember: str, formattingEnabled: bool, dataSourceUpdateMode: DataSourceUpdateMode, nullValue: Object, formatString: str, formatInfo: IFormatProvider): ...
    def add_BindingComplete(self, value: BindingCompleteEventHandler) -> None: ...
    def add_Format(self, value: ConvertEventHandler) -> None: ...
    def add_Parse(self, value: ConvertEventHandler) -> None: ...
    @property
    def BindableComponent(self) -> IBindableComponent: ...
    @property
    def BindingManagerBase(self) -> BindingManagerBase: ...
    @property
    def BindingMemberInfo(self) -> BindingMemberInfo: ...
    @property
    def Control(self) -> Control: ...
    @property
    def ControlUpdateMode(self) -> ControlUpdateMode: ...
    @property
    def DataSource(self) -> Object: ...
    @property
    def DataSourceNullValue(self) -> Object: ...
    @property
    def DataSourceUpdateMode(self) -> DataSourceUpdateMode: ...
    @property
    def FormatInfo(self) -> IFormatProvider: ...
    @property
    def FormatString(self) -> str: ...
    @property
    def FormattingEnabled(self) -> bool: ...
    @property
    def IsBinding(self) -> bool: ...
    @property
    def NullValue(self) -> Object: ...
    @property
    def PropertyName(self) -> str: ...
    def ReadValue(self) -> None: ...
    def remove_BindingComplete(self, value: BindingCompleteEventHandler) -> None: ...
    def remove_Format(self, value: ConvertEventHandler) -> None: ...
    def remove_Parse(self, value: ConvertEventHandler) -> None: ...
    @ControlUpdateMode.setter
    def ControlUpdateMode(self, value: ControlUpdateMode) -> None: ...
    @DataSourceNullValue.setter
    def DataSourceNullValue(self, value: Object) -> None: ...
    @DataSourceUpdateMode.setter
    def DataSourceUpdateMode(self, value: DataSourceUpdateMode) -> None: ...
    @FormatInfo.setter
    def FormatInfo(self, value: IFormatProvider) -> None: ...
    @FormatString.setter
    def FormatString(self, value: str) -> None: ...
    @FormattingEnabled.setter
    def FormattingEnabled(self, value: bool) -> None: ...
    @NullValue.setter
    def NullValue(self, value: Object) -> None: ...
    def WriteValue(self) -> None: ...


class BindingCompleteContext:
    ControlUpdate = 0
    DataSourceUpdate = 1


class BindingCompleteEventArgs(CancelEventArgs):
    @overload
    def __init__(self, binding: Binding, state: BindingCompleteState, context: BindingCompleteContext): ...
    @overload
    def __init__(self, binding: Binding, state: BindingCompleteState, context: BindingCompleteContext, errorText: str): ...
    @overload
    def __init__(self, binding: Binding, state: BindingCompleteState, context: BindingCompleteContext, errorText: str, exception: Exception): ...
    @overload
    def __init__(self, binding: Binding, state: BindingCompleteState, context: BindingCompleteContext, errorText: str, exception: Exception, cancel: bool): ...
    @property
    def Binding(self) -> Binding: ...
    @property
    def BindingCompleteContext(self) -> BindingCompleteContext: ...
    @property
    def BindingCompleteState(self) -> BindingCompleteState: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def Exception(self) -> Exception: ...


class BindingCompleteEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: BindingCompleteEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: BindingCompleteEventArgs) -> None: ...


class BindingCompleteState:
    Success = 0
    DataError = 1
    Exception = 2


class BindingContext(Object):
    def __init__(self): ...
    def add_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Contains(self, dataSource: Object) -> bool: ...
    @overload
    def Contains(self, dataSource: Object, dataMember: str) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, dataSource: Object) -> BindingManagerBase: ...
    @property
    def Item(self, dataSource: Object, dataMember: str) -> BindingManagerBase: ...
    def remove_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    def UpdateBinding(newBindingContext: BindingContext, binding: Binding) -> None: ...


class BindingManagerBase(Object):
    def __init__(self): ...
    def add_BindingComplete(self, value: BindingCompleteEventHandler) -> None: ...
    def add_CurrentChanged(self, value: EventHandler) -> None: ...
    def add_CurrentItemChanged(self, value: EventHandler) -> None: ...
    def add_DataError(self, value: BindingManagerDataErrorEventHandler) -> None: ...
    def add_PositionChanged(self, value: EventHandler) -> None: ...
    def AddNew(self) -> None: ...
    def CancelCurrentEdit(self) -> None: ...
    def EndCurrentEdit(self) -> None: ...
    @property
    def Bindings(self) -> BindingsCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def Current(self) -> Object: ...
    @property
    def IsBindingSuspended(self) -> bool: ...
    @property
    def Position(self) -> int: ...
    def GetItemProperties(self) -> PropertyDescriptorCollection: ...
    def remove_BindingComplete(self, value: BindingCompleteEventHandler) -> None: ...
    def remove_CurrentChanged(self, value: EventHandler) -> None: ...
    def remove_CurrentItemChanged(self, value: EventHandler) -> None: ...
    def remove_DataError(self, value: BindingManagerDataErrorEventHandler) -> None: ...
    def remove_PositionChanged(self, value: EventHandler) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def ResumeBinding(self) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...
    def SuspendBinding(self) -> None: ...


class BindingManagerDataErrorEventArgs(EventArgs):
    def __init__(self, exception: Exception): ...
    @property
    def Exception(self) -> Exception: ...


class BindingManagerDataErrorEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: BindingManagerDataErrorEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: BindingManagerDataErrorEventArgs) -> None: ...


class BindingMemberInfo(ValueType):
    def __init__(self, dataMember: str): ...
    def Equals(self, otherObject: Object) -> bool: ...
    @property
    def BindingField(self) -> str: ...
    @property
    def BindingMember(self) -> str: ...
    @property
    def BindingPath(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(a: BindingMemberInfo, b: BindingMemberInfo) -> bool: ...
    def op_Inequality(a: BindingMemberInfo, b: BindingMemberInfo) -> bool: ...


class BindingNavigator(ToolStrip):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, bindingSource: BindingSource): ...
    @overload
    def __init__(self, container: IContainer): ...
    @overload
    def __init__(self, addStandardItems: bool): ...
    def add_RefreshItems(self, value: EventHandler) -> None: ...
    def AddStandardItems(self) -> None: ...
    def BeginInit(self) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def AddNewItem(self) -> ToolStripItem: ...
    @property
    def BindingSource(self) -> BindingSource: ...
    @property
    def CountItem(self) -> ToolStripItem: ...
    @property
    def CountItemFormat(self) -> str: ...
    @property
    def DeleteItem(self) -> ToolStripItem: ...
    @property
    def MoveFirstItem(self) -> ToolStripItem: ...
    @property
    def MoveLastItem(self) -> ToolStripItem: ...
    @property
    def MoveNextItem(self) -> ToolStripItem: ...
    @property
    def MovePreviousItem(self) -> ToolStripItem: ...
    @property
    def PositionItem(self) -> ToolStripItem: ...
    def remove_RefreshItems(self, value: EventHandler) -> None: ...
    @AddNewItem.setter
    def AddNewItem(self, value: ToolStripItem) -> None: ...
    @BindingSource.setter
    def BindingSource(self, value: BindingSource) -> None: ...
    @CountItem.setter
    def CountItem(self, value: ToolStripItem) -> None: ...
    @CountItemFormat.setter
    def CountItemFormat(self, value: str) -> None: ...
    @DeleteItem.setter
    def DeleteItem(self, value: ToolStripItem) -> None: ...
    @MoveFirstItem.setter
    def MoveFirstItem(self, value: ToolStripItem) -> None: ...
    @MoveLastItem.setter
    def MoveLastItem(self, value: ToolStripItem) -> None: ...
    @MoveNextItem.setter
    def MoveNextItem(self, value: ToolStripItem) -> None: ...
    @MovePreviousItem.setter
    def MovePreviousItem(self, value: ToolStripItem) -> None: ...
    @PositionItem.setter
    def PositionItem(self, value: ToolStripItem) -> None: ...
    def Validate(self) -> bool: ...


class BindingsCollection(BaseCollection):
    def add_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    def add_CollectionChanging(self, value: CollectionChangeEventHandler) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> Binding: ...
    def remove_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    def remove_CollectionChanging(self, value: CollectionChangeEventHandler) -> None: ...


class BindingSource(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: IContainer): ...
    @overload
    def __init__(self, dataSource: Object, dataMember: str): ...
    def add_AddingNew(self, value: AddingNewEventHandler) -> None: ...
    def add_BindingComplete(self, value: BindingCompleteEventHandler) -> None: ...
    def add_CurrentChanged(self, value: EventHandler) -> None: ...
    def add_CurrentItemChanged(self, value: EventHandler) -> None: ...
    def add_DataError(self, value: BindingManagerDataErrorEventHandler) -> None: ...
    def add_DataMemberChanged(self, value: EventHandler) -> None: ...
    def add_DataSourceChanged(self, value: EventHandler) -> None: ...
    def add_ListChanged(self, value: ListChangedEventHandler) -> None: ...
    def add_PositionChanged(self, value: EventHandler) -> None: ...
    def Add(self, value: Object) -> int: ...
    def AddNew(self) -> Object: ...
    @overload
    def ApplySort(self, sorts: ListSortDescriptionCollection) -> None: ...
    @overload
    def ApplySort(self, property: PropertyDescriptor, sort: ListSortDirection) -> None: ...
    def CancelEdit(self) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, value: Object) -> bool: ...
    def CopyTo(self, arr: Array, index: int) -> None: ...
    def EndEdit(self) -> None: ...
    @overload
    def Find(self, prop: PropertyDescriptor, key: Object) -> int: ...
    @overload
    def Find(self, propertyName: str, key: Object) -> int: ...
    @property
    def AllowEdit(self) -> bool: ...
    @property
    def AllowNew(self) -> bool: ...
    @property
    def AllowRemove(self) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrencyManager(self) -> CurrencyManager: ...
    @property
    def Current(self) -> Object: ...
    @property
    def DataMember(self) -> str: ...
    @property
    def DataSource(self) -> Object: ...
    @property
    def Filter(self) -> str: ...
    @property
    def IsBindingSuspended(self) -> bool: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSorted(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, index: int) -> Object: ...
    @property
    def List(self) -> IList: ...
    @property
    def Position(self) -> int: ...
    @property
    def RaiseListChangedEvents(self) -> bool: ...
    @property
    def Sort(self) -> str: ...
    @property
    def SortDescriptions(self) -> ListSortDescriptionCollection: ...
    @property
    def SortDirection(self) -> ListSortDirection: ...
    @property
    def SortProperty(self) -> PropertyDescriptor: ...
    @property
    def SupportsAdvancedSorting(self) -> bool: ...
    @property
    def SupportsChangeNotification(self) -> bool: ...
    @property
    def SupportsFiltering(self) -> bool: ...
    @property
    def SupportsSearching(self) -> bool: ...
    @property
    def SupportsSorting(self) -> bool: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetItemProperties(self, listAccessors: Set(PropertyDescriptor)) -> PropertyDescriptorCollection: ...
    def GetListName(self, listAccessors: Set(PropertyDescriptor)) -> str: ...
    def GetRelatedCurrencyManager(self, dataMember: str) -> CurrencyManager: ...
    def IndexOf(self, value: Object) -> int: ...
    def Insert(self, index: int, value: Object) -> None: ...
    def MoveFirst(self) -> None: ...
    def MoveLast(self) -> None: ...
    def MoveNext(self) -> None: ...
    def MovePrevious(self) -> None: ...
    def remove_AddingNew(self, value: AddingNewEventHandler) -> None: ...
    def remove_BindingComplete(self, value: BindingCompleteEventHandler) -> None: ...
    def remove_CurrentChanged(self, value: EventHandler) -> None: ...
    def remove_CurrentItemChanged(self, value: EventHandler) -> None: ...
    def remove_DataError(self, value: BindingManagerDataErrorEventHandler) -> None: ...
    def remove_DataMemberChanged(self, value: EventHandler) -> None: ...
    def remove_DataSourceChanged(self, value: EventHandler) -> None: ...
    def remove_ListChanged(self, value: ListChangedEventHandler) -> None: ...
    def remove_PositionChanged(self, value: EventHandler) -> None: ...
    def Remove(self, value: Object) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveCurrent(self) -> None: ...
    def RemoveFilter(self) -> None: ...
    def RemoveSort(self) -> None: ...
    def ResetAllowNew(self) -> None: ...
    def ResetBindings(self, metadataChanged: bool) -> None: ...
    def ResetCurrentItem(self) -> None: ...
    def ResetItem(self, itemIndex: int) -> None: ...
    def ResumeBinding(self) -> None: ...
    @AllowNew.setter
    def AllowNew(self, value: bool) -> None: ...
    @DataMember.setter
    def DataMember(self, value: str) -> None: ...
    @DataSource.setter
    def DataSource(self, value: Object) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...
    @RaiseListChangedEvents.setter
    def RaiseListChangedEvents(self, value: bool) -> None: ...
    @Sort.setter
    def Sort(self, value: str) -> None: ...
    def SuspendBinding(self) -> None: ...


class BootMode:
    Normal = 0
    FailSafe = 1
    FailSafeWithNetwork = 2


class Border3DSide:
    Left = 1
    Top = 2
    Right = 4
    Bottom = 8
    Middle = 2048
    All = 2063


class Border3DStyle:
    RaisedOuter = 1
    SunkenOuter = 2
    RaisedInner = 4
    Raised = 5
    Etched = 6
    SunkenInner = 8
    Bump = 9
    Sunken = 10
    Adjust = 8192
    Flat = 16394


class BorderStyle:
    #None = 0
    FixedSingle = 1
    Fixed3D = 2


class BoundsSpecified:
    #None = 0
    X = 1
    Y = 2
    Location = 3
    Width = 4
    Height = 8
    Size = 12
    All = 15


class Button(ButtonBase):
    def __init__(self): ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def DialogResult(self) -> DialogResult: ...
    def NotifyDefault(self, value: bool) -> None: ...
    def PerformClick(self) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    def ToString(self) -> str: ...


class ButtonBase(Control):
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoEllipsis(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def FlatAppearance(self) -> FlatButtonAppearance: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def Image(self) -> Image: ...
    @property
    def ImageAlign(self) -> ContentAlignment: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> ContentAlignment: ...
    @property
    def TextImageRelation(self) -> TextImageRelation: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @property
    def UseMnemonic(self) -> bool: ...
    @property
    def UseVisualStyleBackColor(self) -> bool: ...
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @AutoEllipsis.setter
    def AutoEllipsis(self, value: bool) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @ImageAlign.setter
    def ImageAlign(self, value: ContentAlignment) -> None: ...
    @ImageIndex.setter
    def ImageIndex(self, value: int) -> None: ...
    @ImageKey.setter
    def ImageKey(self, value: str) -> None: ...
    @ImageList.setter
    def ImageList(self, value: ImageList) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: ContentAlignment) -> None: ...
    @TextImageRelation.setter
    def TextImageRelation(self, value: TextImageRelation) -> None: ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: bool) -> None: ...
    @UseMnemonic.setter
    def UseMnemonic(self, value: bool) -> None: ...
    @UseVisualStyleBackColor.setter
    def UseVisualStyleBackColor(self, value: bool) -> None: ...


class ButtonBaseAccessibleObject:
    def __init__(self, owner: Control): ...
    def DoDefaultAction(self) -> None: ...
    @property
    def State(self) -> AccessibleStates: ...


class ButtonBorderStyle:
    #None = 0
    Dotted = 1
    Dashed = 2
    Solid = 3
    Inset = 4
    Outset = 5


class ButtonRenderer(Object):
    @overload
    def DrawButton(g: Graphics, bounds: Rectangle, state: PushButtonState) -> None: ...
    @overload
    def DrawButton(g: Graphics, bounds: Rectangle, focused: bool, state: PushButtonState) -> None: ...
    @overload
    def DrawButton(g: Graphics, bounds: Rectangle, buttonText: str, font: Font, focused: bool, state: PushButtonState) -> None: ...
    @overload
    def DrawButton(g: Graphics, bounds: Rectangle, image: Image, imageBounds: Rectangle, focused: bool, state: PushButtonState) -> None: ...
    @overload
    def DrawButton(g: Graphics, bounds: Rectangle, buttonText: str, font: Font, flags: TextFormatFlags, focused: bool, state: PushButtonState) -> None: ...
    @overload
    def DrawButton(g: Graphics, bounds: Rectangle, buttonText: str, font: Font, image: Image, imageBounds: Rectangle, focused: bool, state: PushButtonState) -> None: ...
    @overload
    def DrawButton(g: Graphics, bounds: Rectangle, buttonText: str, font: Font, flags: TextFormatFlags, image: Image, imageBounds: Rectangle, focused: bool, state: PushButtonState) -> None: ...
    def DrawParentBackground(g: Graphics, bounds: Rectangle, childControl: Control) -> None: ...
    @property
    def RenderMatchingApplicationState() -> bool: ...
    def IsBackgroundPartiallyTransparent(state: PushButtonState) -> bool: ...
    @RenderMatchingApplicationState.setter
    def RenderMatchingApplicationState(value: bool) -> None: ...


class ButtonState:
    Normal = 0
    Inactive = 256
    Pushed = 512
    Checked = 1024
    Flat = 16384
    All = 18176


class CacheVirtualItemsEventArgs(EventArgs):
    def __init__(self, startIndex: int, endIndex: int): ...
    @property
    def EndIndex(self) -> int: ...
    @property
    def StartIndex(self) -> int: ...


class CacheVirtualItemsEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: CacheVirtualItemsEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: CacheVirtualItemsEventArgs) -> None: ...


class CaptionButton:
    Close = 0
    Minimize = 1
    Maximize = 2
    Restore = 3
    Help = 4


class CharacterCasing:
    Normal = 0
    Upper = 1
    Lower = 2


class CheckBox(ButtonBase):
    def __init__(self): ...
    def add_AppearanceChanged(self, value: EventHandler) -> None: ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    def add_CheckStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @property
    def Appearance(self) -> Appearance: ...
    @property
    def AutoCheck(self) -> bool: ...
    @property
    def CheckAlign(self) -> ContentAlignment: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def CheckState(self) -> CheckState: ...
    @property
    def TextAlign(self) -> ContentAlignment: ...
    @property
    def ThreeState(self) -> bool: ...
    def remove_AppearanceChanged(self, value: EventHandler) -> None: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    def remove_CheckStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @Appearance.setter
    def Appearance(self, value: Appearance) -> None: ...
    @AutoCheck.setter
    def AutoCheck(self, value: bool) -> None: ...
    @CheckAlign.setter
    def CheckAlign(self, value: ContentAlignment) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...
    @CheckState.setter
    def CheckState(self, value: CheckState) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: ContentAlignment) -> None: ...
    @ThreeState.setter
    def ThreeState(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class CheckBoxAccessibleObject:
    def __init__(self, owner: Control): ...
    def DoDefaultAction(self) -> None: ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...


class CheckBoxRenderer(Object):
    @overload
    def DrawCheckBox(g: Graphics, glyphLocation: Point, state: CheckBoxState) -> None: ...
    @overload
    def DrawCheckBox(g: Graphics, glyphLocation: Point, textBounds: Rectangle, checkBoxText: str, font: Font, focused: bool, state: CheckBoxState) -> None: ...
    @overload
    def DrawCheckBox(g: Graphics, glyphLocation: Point, textBounds: Rectangle, checkBoxText: str, font: Font, flags: TextFormatFlags, focused: bool, state: CheckBoxState) -> None: ...
    @overload
    def DrawCheckBox(g: Graphics, glyphLocation: Point, textBounds: Rectangle, checkBoxText: str, font: Font, image: Image, imageBounds: Rectangle, focused: bool, state: CheckBoxState) -> None: ...
    @overload
    def DrawCheckBox(g: Graphics, glyphLocation: Point, textBounds: Rectangle, checkBoxText: str, font: Font, flags: TextFormatFlags, image: Image, imageBounds: Rectangle, focused: bool, state: CheckBoxState) -> None: ...
    def DrawParentBackground(g: Graphics, bounds: Rectangle, childControl: Control) -> None: ...
    @property
    def RenderMatchingApplicationState() -> bool: ...
    def GetGlyphSize(g: Graphics, state: CheckBoxState) -> Size: ...
    def IsBackgroundPartiallyTransparent(state: CheckBoxState) -> bool: ...
    @RenderMatchingApplicationState.setter
    def RenderMatchingApplicationState(value: bool) -> None: ...


class CheckedIndexCollection(Object):
    def Contains(self, index: int) -> bool: ...
    def CopyTo(self, dest: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, index: int) -> int: ...


class CheckedIndexCollection(Object):
    def __init__(self, owner: ListView): ...
    def Contains(self, checkedIndex: int) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, checkedIndex: int) -> int: ...


class CheckedItemCollection(Object):
    def Contains(self, item: Object) -> bool: ...
    def CopyTo(self, dest: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, item: Object) -> int: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...


class CheckedListBox(ListBox):
    def __init__(self): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataSourceChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DisplayMemberChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DrawItem(self, value: DrawItemEventHandler) -> None: ...
    def add_ItemCheck(self, value: ItemCheckEventHandler) -> None: ...
    @overload
    def add_MeasureItem(self, value: MeasureItemEventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_ValueMemberChanged(self, value: EventHandler) -> None: ...
    @property
    def CheckedIndices(self) -> CheckedIndexCollection: ...
    @property
    def CheckedItems(self) -> CheckedItemCollection: ...
    @property
    def CheckOnClick(self) -> bool: ...
    @property
    def DataSource(self) -> Object: ...
    @property
    def DisplayMember(self) -> str: ...
    @property
    def DrawMode(self) -> DrawMode: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def SelectionMode(self) -> SelectionMode: ...
    @property
    def ThreeDCheckBoxes(self) -> bool: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @property
    def ValueMember(self) -> str: ...
    def GetItemChecked(self, index: int) -> bool: ...
    def GetItemCheckState(self, index: int) -> CheckState: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataSourceChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DisplayMemberChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DrawItem(self, value: DrawItemEventHandler) -> None: ...
    def remove_ItemCheck(self, value: ItemCheckEventHandler) -> None: ...
    @overload
    def remove_MeasureItem(self, value: MeasureItemEventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_ValueMemberChanged(self, value: EventHandler) -> None: ...
    @CheckOnClick.setter
    def CheckOnClick(self, value: bool) -> None: ...
    @DataSource.setter
    def DataSource(self, value: Object) -> None: ...
    @DisplayMember.setter
    def DisplayMember(self, value: str) -> None: ...
    @DrawMode.setter
    def DrawMode(self, value: DrawMode) -> None: ...
    @ItemHeight.setter
    def ItemHeight(self, value: int) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @SelectionMode.setter
    def SelectionMode(self, value: SelectionMode) -> None: ...
    @ThreeDCheckBoxes.setter
    def ThreeDCheckBoxes(self, value: bool) -> None: ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: bool) -> None: ...
    @ValueMember.setter
    def ValueMember(self, value: str) -> None: ...
    def SetItemChecked(self, index: int, value: bool) -> None: ...
    def SetItemCheckState(self, index: int, value: CheckState) -> None: ...


class CheckedListViewItemCollection(Object):
    def __init__(self, owner: ListView): ...
    def Contains(self, item: ListViewItem) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    def CopyTo(self, dest: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> ListViewItem: ...
    @property
    def Item(self, key: str) -> ListViewItem: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, item: ListViewItem) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...


class CheckState:
    Unchecked = 0
    Checked = 1
    Indeterminate = 2


class ChildAccessibleObject(AccessibleObject):
    def __init__(self, owner: ComboBox, handle: IntPtr): ...
    @property
    def Name(self) -> str: ...


class Clipboard(Object):
    def Clear() -> None: ...
    def ContainsAudio() -> bool: ...
    def ContainsData(format: str) -> bool: ...
    def ContainsFileDropList() -> bool: ...
    def ContainsImage() -> bool: ...
    @overload
    def ContainsText() -> bool: ...
    @overload
    def ContainsText(format: TextDataFormat) -> bool: ...
    def GetAudioStream() -> Stream: ...
    def GetData(format: str) -> Object: ...
    def GetDataObject() -> IDataObject: ...
    def GetFileDropList() -> StringCollection: ...
    def GetImage() -> Image: ...
    @overload
    def GetText() -> str: ...
    @overload
    def GetText(format: TextDataFormat) -> str: ...
    @overload
    def SetAudio(audioBytes: Set(Byte)) -> None: ...
    @overload
    def SetAudio(audioStream: Stream) -> None: ...
    def SetData(format: str, data: Object) -> None: ...
    @overload
    def SetDataObject(data: Object) -> None: ...
    @overload
    def SetDataObject(data: Object, copy: bool) -> None: ...
    @overload
    def SetDataObject(data: Object, copy: bool, retryTimes: int, retryDelay: int) -> None: ...
    def SetFileDropList(filePaths: StringCollection) -> None: ...
    def SetImage(image: Image) -> None: ...
    @overload
    def SetText(text: str) -> None: ...
    @overload
    def SetText(text: str, format: TextDataFormat) -> None: ...


class CloseReason:
    #None = 0
    WindowsShutDown = 1
    MdiFormClosing = 2
    UserClosing = 3
    TaskManagerClosing = 4
    FormOwnerClosing = 5
    ApplicationExitCall = 6


class ClsidAttribute(Attribute):
    def __init__(self, clsid: str): ...
    @property
    def Value(self) -> str: ...


class ColorDepth:
    Depth4Bit = 4
    Depth8Bit = 8
    Depth16Bit = 16
    Depth24Bit = 24
    Depth32Bit = 32


class ColorDialog(CommonDialog):
    def __init__(self): ...
    @property
    def AllowFullOpen(self) -> bool: ...
    @property
    def AnyColor(self) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def CustomColors(self) -> Set(int): ...
    @property
    def FullOpen(self) -> bool: ...
    @property
    def ShowHelp(self) -> bool: ...
    @property
    def SolidColorOnly(self) -> bool: ...
    def Reset(self) -> None: ...
    @AllowFullOpen.setter
    def AllowFullOpen(self, value: bool) -> None: ...
    @AnyColor.setter
    def AnyColor(self, value: bool) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @CustomColors.setter
    def CustomColors(self, value: Set(int)) -> None: ...
    @FullOpen.setter
    def FullOpen(self, value: bool) -> None: ...
    @ShowHelp.setter
    def ShowHelp(self, value: bool) -> None: ...
    @SolidColorOnly.setter
    def SolidColorOnly(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class ColumnClickEventArgs(EventArgs):
    def __init__(self, column: int): ...
    @property
    def Column(self) -> int: ...


class ColumnClickEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ColumnClickEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ColumnClickEventArgs) -> None: ...


class ColumnHeader(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, imageIndex: int): ...
    @overload
    def __init__(self, imageKey: str): ...
    def AutoResize(self, headerAutoResize: ColumnHeaderAutoResizeStyle) -> None: ...
    def Clone(self) -> Object: ...
    @property
    def DisplayIndex(self) -> int: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def Index(self) -> int: ...
    @property
    def ListView(self) -> ListView: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> HorizontalAlignment: ...
    @property
    def Width(self) -> int: ...
    @DisplayIndex.setter
    def DisplayIndex(self, value: int) -> None: ...
    @ImageIndex.setter
    def ImageIndex(self, value: int) -> None: ...
    @ImageKey.setter
    def ImageKey(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: HorizontalAlignment) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class ColumnHeaderAutoResizeStyle:
    #None = 0
    HeaderSize = 1
    ColumnContent = 2


class ColumnHeaderCollection(Object):
    def __init__(self, owner: ListView): ...
    @overload
    def Add(self, value: ColumnHeader) -> int: ...
    @overload
    def Add(self, text: str) -> ColumnHeader: ...
    @overload
    def Add(self, text: str, width: int) -> ColumnHeader: ...
    @overload
    def Add(self, key: str, text: str) -> ColumnHeader: ...
    @overload
    def Add(self, text: str, width: int, textAlign: HorizontalAlignment) -> ColumnHeader: ...
    @overload
    def Add(self, key: str, text: str, width: int) -> ColumnHeader: ...
    @overload
    def Add(self, key: str, text: str, width: int, textAlign: HorizontalAlignment, imageKey: str) -> ColumnHeader: ...
    @overload
    def Add(self, key: str, text: str, width: int, textAlign: HorizontalAlignment, imageIndex: int) -> ColumnHeader: ...
    def AddRange(self, values: Set(ColumnHeader)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, value: ColumnHeader) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> ColumnHeader: ...
    @property
    def Item(self, key: str) -> ColumnHeader: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: ColumnHeader) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Insert(self, index: int, value: ColumnHeader) -> None: ...
    @overload
    def Insert(self, index: int, text: str) -> None: ...
    @overload
    def Insert(self, index: int, text: str, width: int) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str, width: int) -> None: ...
    @overload
    def Insert(self, index: int, text: str, width: int, textAlign: HorizontalAlignment) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str, width: int, textAlign: HorizontalAlignment, imageKey: str) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str, width: int, textAlign: HorizontalAlignment, imageIndex: int) -> None: ...
    def Remove(self, column: ColumnHeader) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveByKey(self, key: str) -> None: ...


class ColumnHeaderConverter(ExpandableObjectConverter):
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class ColumnHeaderStyle:
    #None = 0
    Nonclickable = 1
    Clickable = 2


class ColumnReorderedEventArgs(CancelEventArgs):
    def __init__(self, oldDisplayIndex: int, newDisplayIndex: int, header: ColumnHeader): ...
    @property
    def Header(self) -> ColumnHeader: ...
    @property
    def NewDisplayIndex(self) -> int: ...
    @property
    def OldDisplayIndex(self) -> int: ...


class ColumnReorderedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ColumnReorderedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ColumnReorderedEventArgs) -> None: ...


class ColumnStyle(TableLayoutStyle):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sizeType: SizeType): ...
    @overload
    def __init__(self, sizeType: SizeType, width: Single): ...
    @property
    def Width(self) -> Single: ...
    @Width.setter
    def Width(self, value: Single) -> None: ...


class ColumnWidthChangedEventArgs(EventArgs):
    def __init__(self, columnIndex: int): ...
    @property
    def ColumnIndex(self) -> int: ...


class ColumnWidthChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ColumnWidthChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ColumnWidthChangedEventArgs) -> None: ...


class ColumnWidthChangingEventArgs(CancelEventArgs):
    @overload
    def __init__(self, columnIndex: int, newWidth: int): ...
    @overload
    def __init__(self, columnIndex: int, newWidth: int, cancel: bool): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def NewWidth(self) -> int: ...
    @NewWidth.setter
    def NewWidth(self, value: int) -> None: ...


class ColumnWidthChangingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ColumnWidthChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ColumnWidthChangingEventArgs) -> None: ...


class ComboBox(ListControl):
    def __init__(self): ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    def add_DrawItem(self, value: DrawItemEventHandler) -> None: ...
    def add_DropDown(self, value: EventHandler) -> None: ...
    def add_DropDownClosed(self, value: EventHandler) -> None: ...
    def add_DropDownStyleChanged(self, value: EventHandler) -> None: ...
    def add_MeasureItem(self, value: MeasureItemEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def add_SelectionChangeCommitted(self, value: EventHandler) -> None: ...
    def add_TextUpdate(self, value: EventHandler) -> None: ...
    def BeginUpdate(self) -> None: ...
    def EndUpdate(self) -> None: ...
    @overload
    def FindString(self, s: str) -> int: ...
    @overload
    def FindString(self, s: str, startIndex: int) -> int: ...
    @overload
    def FindStringExact(self, s: str) -> int: ...
    @overload
    def FindStringExact(self, s: str, startIndex: int) -> int: ...
    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection: ...
    @property
    def AutoCompleteMode(self) -> AutoCompleteMode: ...
    @property
    def AutoCompleteSource(self) -> AutoCompleteSource: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def DataSource(self) -> Object: ...
    @property
    def DrawMode(self) -> DrawMode: ...
    @property
    def DropDownHeight(self) -> int: ...
    @property
    def DropDownStyle(self) -> ComboBoxStyle: ...
    @property
    def DropDownWidth(self) -> int: ...
    @property
    def DroppedDown(self) -> bool: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def IntegralHeight(self) -> bool: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def MaxDropDownItems(self) -> int: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedItem(self) -> Object: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SelectionLength(self) -> int: ...
    @property
    def SelectionStart(self) -> int: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    def GetItemHeight(self, index: int) -> int: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    def remove_DrawItem(self, value: DrawItemEventHandler) -> None: ...
    def remove_DropDown(self, value: EventHandler) -> None: ...
    def remove_DropDownClosed(self, value: EventHandler) -> None: ...
    def remove_DropDownStyleChanged(self, value: EventHandler) -> None: ...
    def remove_MeasureItem(self, value: MeasureItemEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def remove_SelectionChangeCommitted(self, value: EventHandler) -> None: ...
    def remove_TextUpdate(self, value: EventHandler) -> None: ...
    def ResetText(self) -> None: ...
    @overload
    def Select(self, start: int, length: int) -> None: ...
    def SelectAll(self) -> None: ...
    @AutoCompleteCustomSource.setter
    def AutoCompleteCustomSource(self, value: AutoCompleteStringCollection) -> None: ...
    @AutoCompleteMode.setter
    def AutoCompleteMode(self, value: AutoCompleteMode) -> None: ...
    @AutoCompleteSource.setter
    def AutoCompleteSource(self, value: AutoCompleteSource) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @DataSource.setter
    def DataSource(self, value: Object) -> None: ...
    @DrawMode.setter
    def DrawMode(self, value: DrawMode) -> None: ...
    @DropDownHeight.setter
    def DropDownHeight(self, value: int) -> None: ...
    @DropDownStyle.setter
    def DropDownStyle(self, value: ComboBoxStyle) -> None: ...
    @DropDownWidth.setter
    def DropDownWidth(self, value: int) -> None: ...
    @DroppedDown.setter
    def DroppedDown(self, value: bool) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @IntegralHeight.setter
    def IntegralHeight(self, value: bool) -> None: ...
    @ItemHeight.setter
    def ItemHeight(self, value: int) -> None: ...
    @MaxDropDownItems.setter
    def MaxDropDownItems(self, value: int) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedItem.setter
    def SelectedItem(self, value: Object) -> None: ...
    @SelectedText.setter
    def SelectedText(self, value: str) -> None: ...
    @SelectionLength.setter
    def SelectionLength(self, value: int) -> None: ...
    @SelectionStart.setter
    def SelectionStart(self, value: int) -> None: ...
    @Sorted.setter
    def Sorted(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ComboBoxRenderer(Object):
    def DrawDropDownButton(g: Graphics, bounds: Rectangle, state: ComboBoxState) -> None: ...
    @overload
    def DrawTextBox(g: Graphics, bounds: Rectangle, state: ComboBoxState) -> None: ...
    @overload
    def DrawTextBox(g: Graphics, bounds: Rectangle, comboBoxText: str, font: Font, state: ComboBoxState) -> None: ...
    @overload
    def DrawTextBox(g: Graphics, bounds: Rectangle, comboBoxText: str, font: Font, textBounds: Rectangle, state: ComboBoxState) -> None: ...
    @overload
    def DrawTextBox(g: Graphics, bounds: Rectangle, comboBoxText: str, font: Font, flags: TextFormatFlags, state: ComboBoxState) -> None: ...
    @overload
    def DrawTextBox(g: Graphics, bounds: Rectangle, comboBoxText: str, font: Font, textBounds: Rectangle, flags: TextFormatFlags, state: ComboBoxState) -> None: ...
    @property
    def IsSupported() -> bool: ...


class ComboBoxStyle:
    Simple = 0
    DropDown = 1
    DropDownList = 2


class CommonDialog(Component):
    def __init__(self): ...
    def add_HelpRequest(self, value: EventHandler) -> None: ...
    @property
    def Tag(self) -> Object: ...
    def remove_HelpRequest(self, value: EventHandler) -> None: ...
    def Reset(self) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...


class ConnectionPointCookie(Object):
    def __init__(self, source: Object, sink: Object, eventInterface: Type): ...
    def Disconnect(self) -> None: ...


class ContainerControl(ScrollableControl):
    def __init__(self): ...
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @property
    def ActiveControl(self) -> Control: ...
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @property
    def ParentForm(self) -> Form: ...
    def PerformAutoScale(self) -> None: ...
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: SizeF) -> None: ...
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: AutoScaleMode) -> None: ...
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class ContentsResizedEventArgs(EventArgs):
    def __init__(self, newRectangle: Rectangle): ...
    @property
    def NewRectangle(self) -> Rectangle: ...


class ContentsResizedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ContentsResizedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ContentsResizedEventArgs) -> None: ...


class ContextMenuStrip(ToolStripDropDownMenu):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: IContainer): ...
    @property
    def SourceControl(self) -> Control: ...


class Control(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, parent: Control, text: str): ...
    @overload
    def __init__(self, text: str, left: int, top: int, width: int, height: int): ...
    @overload
    def __init__(self, parent: Control, text: str, left: int, top: int, width: int, height: int): ...
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    def add_Click(self, value: EventHandler) -> None: ...
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    def add_DockChanged(self, value: EventHandler) -> None: ...
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    def add_DragLeave(self, value: EventHandler) -> None: ...
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    def add_Enter(self, value: EventHandler) -> None: ...
    def add_FontChanged(self, value: EventHandler) -> None: ...
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    def add_GotFocus(self, value: EventHandler) -> None: ...
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    def add_Leave(self, value: EventHandler) -> None: ...
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    def add_LostFocus(self, value: EventHandler) -> None: ...
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    def add_MouseHover(self, value: EventHandler) -> None: ...
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    def add_Move(self, value: EventHandler) -> None: ...
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    def add_Resize(self, value: EventHandler) -> None: ...
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def add_Validated(self, value: EventHandler) -> None: ...
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Set(Object)) -> IAsyncResult: ...
    def BringToFront(self) -> None: ...
    def Contains(self, ctl: Control) -> bool: ...
    def CreateControl(self) -> None: ...
    def CreateGraphics(self) -> Graphics: ...
    def DoDragDrop(self, data: Object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    def EndInvoke(self, asyncResult: IAsyncResult) -> Object: ...
    def FindForm(self) -> Form: ...
    def Focus(self) -> bool: ...
    def FromChildHandle(handle: IntPtr) -> Control: ...
    def FromHandle(handle: IntPtr) -> Control: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScrollOffset(self) -> Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Capture(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def CheckForIllegalCrossThreadCalls() -> bool: ...
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def ContainsFocus(self) -> bool: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Created(self) -> bool: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def DefaultBackColor() -> Color: ...
    @property
    def DefaultFont() -> Font: ...
    @property
    def DefaultForeColor() -> Color: ...
    @property
    def DeviceDpi(self) -> int: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def Disposing(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @property
    def IsAccessible(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsHandleCreated(self) -> bool: ...
    @property
    def IsMirrored(self) -> bool: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def ModifierKeys() -> Keys: ...
    @property
    def MouseButtons() -> MouseButtons: ...
    @property
    def MousePosition() -> Point: ...
    @property
    def Name(self) -> str: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def PreferredSize(self) -> Size: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RecreatingHandle(self) -> bool: ...
    @property
    def Region(self) -> Region: ...
    @property
    def Right(self) -> int: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Size(self) -> Size: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def Top(self) -> int: ...
    @property
    def TopLevelControl(self) -> Control: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    def GetContainerControl(self) -> IContainerControl: ...
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    def Hide(self) -> None: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> Object: ...
    @overload
    def Invoke(self, method: Delegate, args: Set(Object)) -> Object: ...
    def IsKeyLocked(keyVal: Keys) -> bool: ...
    def IsMnemonic(charCode: Char, text: str) -> bool: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    def PointToClient(self, p: Point) -> Point: ...
    def PointToScreen(self, p: Point) -> Point: ...
    def PreProcessControlMessage(self, msg: Message) -> Tuple[PreProcessControlState, Message]: ...
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    def Refresh(self) -> None: ...
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    def remove_Enter(self, value: EventHandler) -> None: ...
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    def remove_Leave(self, value: EventHandler) -> None: ...
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    def remove_Move(self, value: EventHandler) -> None: ...
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    def remove_Resize(self, value: EventHandler) -> None: ...
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def remove_Validated(self, value: EventHandler) -> None: ...
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    def ResetBackColor(self) -> None: ...
    def ResetBindings(self) -> None: ...
    def ResetCursor(self) -> None: ...
    def ResetFont(self) -> None: ...
    def ResetForeColor(self) -> None: ...
    def ResetImeMode(self) -> None: ...
    def ResetRightToLeft(self) -> None: ...
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    def Scale(self, factor: SizeF) -> None: ...
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> Tuple[Bitmap]: ...
    def Select(self) -> None: ...
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    def SendToBack(self) -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @CheckForIllegalCrossThreadCalls.setter
    def CheckForIllegalCrossThreadCalls(value: bool) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    def Show(self) -> None: ...
    def SuspendLayout(self) -> None: ...
    def Update(self) -> None: ...


class ControlAccessibleObject(AccessibleObject):
    def __init__(self, ownerControl: Control): ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def Help(self) -> str: ...
    @property
    def KeyboardShortcut(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> Control: ...
    @property
    def Parent(self) -> AccessibleObject: ...
    @property
    def Role(self) -> AccessibleRole: ...
    def GetHelpTopic(self) -> Tuple[int, str]: ...
    @overload
    def NotifyClients(self, accEvent: AccessibleEvents) -> None: ...
    @overload
    def NotifyClients(self, accEvent: AccessibleEvents, childID: int) -> None: ...
    @overload
    def NotifyClients(self, accEvent: AccessibleEvents, objectID: int, childID: int) -> None: ...
    def RaiseLiveRegionChanged(self) -> bool: ...
    @Handle.setter
    def Handle(self, value: IntPtr) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ControlBindingsCollection(BindingsCollection):
    def __init__(self, control: IBindableComponent): ...
    @overload
    def Add(self, binding: Binding) -> None: ...
    @overload
    def Add(self, propertyName: str, dataSource: Object, dataMember: str) -> Binding: ...
    @overload
    def Add(self, propertyName: str, dataSource: Object, dataMember: str, formattingEnabled: bool) -> Binding: ...
    @overload
    def Add(self, propertyName: str, dataSource: Object, dataMember: str, formattingEnabled: bool, updateMode: DataSourceUpdateMode) -> Binding: ...
    @overload
    def Add(self, propertyName: str, dataSource: Object, dataMember: str, formattingEnabled: bool, updateMode: DataSourceUpdateMode, nullValue: Object) -> Binding: ...
    @overload
    def Add(self, propertyName: str, dataSource: Object, dataMember: str, formattingEnabled: bool, updateMode: DataSourceUpdateMode, nullValue: Object, formatString: str) -> Binding: ...
    @overload
    def Add(self, propertyName: str, dataSource: Object, dataMember: str, formattingEnabled: bool, updateMode: DataSourceUpdateMode, nullValue: Object, formatString: str, formatInfo: IFormatProvider) -> Binding: ...
    def Clear(self) -> None: ...
    @property
    def BindableComponent(self) -> IBindableComponent: ...
    @property
    def Control(self) -> Control: ...
    @property
    def DefaultDataSourceUpdateMode(self) -> DataSourceUpdateMode: ...
    @property
    def Item(self, propertyName: str) -> Binding: ...
    def Remove(self, binding: Binding) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @DefaultDataSourceUpdateMode.setter
    def DefaultDataSourceUpdateMode(self, value: DataSourceUpdateMode) -> None: ...


class ControlCollection(ArrangedElementCollection):
    def __init__(self, owner: Control): ...
    def Add(self, value: Control) -> None: ...
    def AddRange(self, controls: Set(Control)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, control: Control) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    def Find(self, key: str, searchAllChildren: bool) -> Set(Control): ...
    @property
    def Item(self, key: str) -> Control: ...
    @property
    def Item(self, index: int) -> Control: ...
    @property
    def Owner(self) -> Control: ...
    @overload
    def GetChildIndex(self, child: Control) -> int: ...
    @overload
    def GetChildIndex(self, child: Control, throwException: bool) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, control: Control) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...
    def Remove(self, value: Control) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveByKey(self, key: str) -> None: ...
    def SetChildIndex(self, child: Control, newIndex: int) -> None: ...


class ControlCollection:
    def __init__(self, owner: Form): ...
    def Add(self, value: Control) -> None: ...
    def Remove(self, value: Control) -> None: ...


class ControlCollection:
    def __init__(self, owner: MdiClient): ...
    def Add(self, value: Control) -> None: ...
    def Remove(self, value: Control) -> None: ...


class ControlCollection:
    def __init__(self, owner: TabControl): ...
    def Add(self, value: Control) -> None: ...
    def Remove(self, value: Control) -> None: ...


class ControlEventArgs(EventArgs):
    def __init__(self, control: Control): ...
    @property
    def Control(self) -> Control: ...


class ControlEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ControlEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ControlEventArgs) -> None: ...


class ControlPaint(Object):
    def CreateHBitmap16Bit(bitmap: Bitmap, background: Color) -> IntPtr: ...
    def CreateHBitmapColorMask(bitmap: Bitmap, monochromeMask: IntPtr) -> IntPtr: ...
    def CreateHBitmapTransparencyMask(bitmap: Bitmap) -> IntPtr: ...
    @overload
    def Dark(baseColor: Color) -> Color: ...
    @overload
    def Dark(baseColor: Color, percOfDarkDark: Single) -> Color: ...
    def DarkDark(baseColor: Color) -> Color: ...
    @overload
    def DrawBorder(graphics: Graphics, bounds: Rectangle, color: Color, style: ButtonBorderStyle) -> None: ...
    @overload
    def DrawBorder(graphics: Graphics, bounds: Rectangle, leftColor: Color, leftWidth: int, leftStyle: ButtonBorderStyle, topColor: Color, topWidth: int, topStyle: ButtonBorderStyle, rightColor: Color, rightWidth: int, rightStyle: ButtonBorderStyle, bottomColor: Color, bottomWidth: int, bottomStyle: ButtonBorderStyle) -> None: ...
    @overload
    def DrawBorder3D(graphics: Graphics, rectangle: Rectangle) -> None: ...
    @overload
    def DrawBorder3D(graphics: Graphics, rectangle: Rectangle, style: Border3DStyle) -> None: ...
    @overload
    def DrawBorder3D(graphics: Graphics, rectangle: Rectangle, style: Border3DStyle, sides: Border3DSide) -> None: ...
    @overload
    def DrawBorder3D(graphics: Graphics, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def DrawBorder3D(graphics: Graphics, x: int, y: int, width: int, height: int, style: Border3DStyle) -> None: ...
    @overload
    def DrawBorder3D(graphics: Graphics, x: int, y: int, width: int, height: int, style: Border3DStyle, sides: Border3DSide) -> None: ...
    @overload
    def DrawButton(graphics: Graphics, rectangle: Rectangle, state: ButtonState) -> None: ...
    @overload
    def DrawButton(graphics: Graphics, x: int, y: int, width: int, height: int, state: ButtonState) -> None: ...
    @overload
    def DrawCaptionButton(graphics: Graphics, rectangle: Rectangle, button: CaptionButton, state: ButtonState) -> None: ...
    @overload
    def DrawCaptionButton(graphics: Graphics, x: int, y: int, width: int, height: int, button: CaptionButton, state: ButtonState) -> None: ...
    @overload
    def DrawCheckBox(graphics: Graphics, rectangle: Rectangle, state: ButtonState) -> None: ...
    @overload
    def DrawCheckBox(graphics: Graphics, x: int, y: int, width: int, height: int, state: ButtonState) -> None: ...
    @overload
    def DrawComboButton(graphics: Graphics, rectangle: Rectangle, state: ButtonState) -> None: ...
    @overload
    def DrawComboButton(graphics: Graphics, x: int, y: int, width: int, height: int, state: ButtonState) -> None: ...
    def DrawContainerGrabHandle(graphics: Graphics, bounds: Rectangle) -> None: ...
    @overload
    def DrawFocusRectangle(graphics: Graphics, rectangle: Rectangle) -> None: ...
    @overload
    def DrawFocusRectangle(graphics: Graphics, rectangle: Rectangle, foreColor: Color, backColor: Color) -> None: ...
    def DrawGrabHandle(graphics: Graphics, rectangle: Rectangle, primary: bool, enabled: bool) -> None: ...
    def DrawGrid(graphics: Graphics, area: Rectangle, pixelsBetweenDots: Size, backColor: Color) -> None: ...
    def DrawImageDisabled(graphics: Graphics, image: Image, x: int, y: int, background: Color) -> None: ...
    def DrawLockedFrame(graphics: Graphics, rectangle: Rectangle, primary: bool) -> None: ...
    @overload
    def DrawMenuGlyph(graphics: Graphics, rectangle: Rectangle, glyph: MenuGlyph) -> None: ...
    @overload
    def DrawMenuGlyph(graphics: Graphics, rectangle: Rectangle, glyph: MenuGlyph, foreColor: Color, backColor: Color) -> None: ...
    @overload
    def DrawMenuGlyph(graphics: Graphics, x: int, y: int, width: int, height: int, glyph: MenuGlyph) -> None: ...
    @overload
    def DrawMenuGlyph(graphics: Graphics, x: int, y: int, width: int, height: int, glyph: MenuGlyph, foreColor: Color, backColor: Color) -> None: ...
    @overload
    def DrawMixedCheckBox(graphics: Graphics, rectangle: Rectangle, state: ButtonState) -> None: ...
    @overload
    def DrawMixedCheckBox(graphics: Graphics, x: int, y: int, width: int, height: int, state: ButtonState) -> None: ...
    @overload
    def DrawRadioButton(graphics: Graphics, rectangle: Rectangle, state: ButtonState) -> None: ...
    @overload
    def DrawRadioButton(graphics: Graphics, x: int, y: int, width: int, height: int, state: ButtonState) -> None: ...
    def DrawReversibleFrame(rectangle: Rectangle, backColor: Color, style: FrameStyle) -> None: ...
    def DrawReversibleLine(start: Point, end: Point, backColor: Color) -> None: ...
    @overload
    def DrawScrollButton(graphics: Graphics, rectangle: Rectangle, button: ScrollButton, state: ButtonState) -> None: ...
    @overload
    def DrawScrollButton(graphics: Graphics, x: int, y: int, width: int, height: int, button: ScrollButton, state: ButtonState) -> None: ...
    def DrawSelectionFrame(graphics: Graphics, active: bool, outsideRect: Rectangle, insideRect: Rectangle, backColor: Color) -> None: ...
    @overload
    def DrawSizeGrip(graphics: Graphics, backColor: Color, bounds: Rectangle) -> None: ...
    @overload
    def DrawSizeGrip(graphics: Graphics, backColor: Color, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def DrawStringDisabled(graphics: Graphics, s: str, font: Font, color: Color, layoutRectangle: RectangleF, format: StringFormat) -> None: ...
    @overload
    def DrawStringDisabled(dc: IDeviceContext, s: str, font: Font, color: Color, layoutRectangle: Rectangle, format: TextFormatFlags) -> None: ...
    def DrawVisualStyleBorder(graphics: Graphics, bounds: Rectangle) -> None: ...
    def FillReversibleRectangle(rectangle: Rectangle, backColor: Color) -> None: ...
    @property
    def ContrastControlDark() -> Color: ...
    @overload
    def Light(baseColor: Color) -> Color: ...
    @overload
    def Light(baseColor: Color, percOfLightLight: Single) -> Color: ...
    def LightLight(baseColor: Color) -> Color: ...


class ControlStyles:
    ContainerControl = 1
    UserPaint = 2
    Opaque = 4
    ResizeRedraw = 16
    FixedWidth = 32
    FixedHeight = 64
    StandardClick = 256
    Selectable = 512
    UserMouse = 1024
    SupportsTransparentBackColor = 2048
    StandardDoubleClick = 4096
    AllPaintingInWmPaint = 8192
    CacheText = 16384
    EnableNotifyMessage = 32768
    DoubleBuffer = 65536
    OptimizedDoubleBuffer = 131072
    UseTextForAccessibility = 262144


class ControlUpdateMode:
    OnPropertyChanged = 0
    Never = 1


class ConvertEventArgs(EventArgs):
    def __init__(self, value: Object, desiredType: Type): ...
    @property
    def DesiredType(self) -> Type: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class ConvertEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ConvertEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ConvertEventArgs) -> None: ...


class CreateParams(Object):
    def __init__(self): ...
    @property
    def Caption(self) -> str: ...
    @property
    def ClassName(self) -> str: ...
    @property
    def ClassStyle(self) -> int: ...
    @property
    def ExStyle(self) -> int: ...
    @property
    def Height(self) -> int: ...
    @property
    def Param(self) -> Object: ...
    @property
    def Parent(self) -> IntPtr: ...
    @property
    def Style(self) -> int: ...
    @property
    def Width(self) -> int: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @Caption.setter
    def Caption(self, value: str) -> None: ...
    @ClassName.setter
    def ClassName(self, value: str) -> None: ...
    @ClassStyle.setter
    def ClassStyle(self, value: int) -> None: ...
    @ExStyle.setter
    def ExStyle(self, value: int) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Param.setter
    def Param(self, value: Object) -> None: ...
    @Parent.setter
    def Parent(self, value: IntPtr) -> None: ...
    @Style.setter
    def Style(self, value: int) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @X.setter
    def X(self, value: int) -> None: ...
    @Y.setter
    def Y(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class CurrencyManager(BindingManagerBase):
    def add_ItemChanged(self, value: ItemChangedEventHandler) -> None: ...
    def add_ListChanged(self, value: ListChangedEventHandler) -> None: ...
    def add_MetaDataChanged(self, value: EventHandler) -> None: ...
    def AddNew(self) -> None: ...
    def CancelCurrentEdit(self) -> None: ...
    def EndCurrentEdit(self) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Current(self) -> Object: ...
    @property
    def List(self) -> IList: ...
    @property
    def Position(self) -> int: ...
    def GetItemProperties(self) -> PropertyDescriptorCollection: ...
    def Refresh(self) -> None: ...
    def remove_ItemChanged(self, value: ItemChangedEventHandler) -> None: ...
    def remove_ListChanged(self, value: ListChangedEventHandler) -> None: ...
    def remove_MetaDataChanged(self, value: EventHandler) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def ResumeBinding(self) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...
    def SuspendBinding(self) -> None: ...


class Cursor(Object):
    @overload
    def __init__(self, handle: IntPtr): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, type: Type, resource: str): ...
    def CopyHandle(self) -> IntPtr: ...
    def Dispose(self) -> None: ...
    def Draw(self, g: Graphics, targetRect: Rectangle) -> None: ...
    def DrawStretched(self, g: Graphics, targetRect: Rectangle) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Clip() -> Rectangle: ...
    @property
    def Current() -> Cursor: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HotSpot(self) -> Point: ...
    @property
    def Position() -> Point: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Tag(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def Hide() -> None: ...
    def op_Equality(left: Cursor, right: Cursor) -> bool: ...
    def op_Inequality(left: Cursor, right: Cursor) -> bool: ...
    @Clip.setter
    def Clip(value: Rectangle) -> None: ...
    @Current.setter
    def Current(value: Cursor) -> None: ...
    @Position.setter
    def Position(value: Point) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    def Show() -> None: ...
    def ToString(self) -> str: ...


class CursorConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class Cursors(Object):
    @property
    def AppStarting() -> Cursor: ...
    @property
    def Arrow() -> Cursor: ...
    @property
    def Cross() -> Cursor: ...
    @property
    def Default() -> Cursor: ...
    @property
    def Hand() -> Cursor: ...
    @property
    def Help() -> Cursor: ...
    @property
    def HSplit() -> Cursor: ...
    @property
    def IBeam() -> Cursor: ...
    @property
    def No() -> Cursor: ...
    @property
    def NoMove2D() -> Cursor: ...
    @property
    def NoMoveHoriz() -> Cursor: ...
    @property
    def NoMoveVert() -> Cursor: ...
    @property
    def PanEast() -> Cursor: ...
    @property
    def PanNE() -> Cursor: ...
    @property
    def PanNorth() -> Cursor: ...
    @property
    def PanNW() -> Cursor: ...
    @property
    def PanSE() -> Cursor: ...
    @property
    def PanSouth() -> Cursor: ...
    @property
    def PanSW() -> Cursor: ...
    @property
    def PanWest() -> Cursor: ...
    @property
    def SizeAll() -> Cursor: ...
    @property
    def SizeNESW() -> Cursor: ...
    @property
    def SizeNS() -> Cursor: ...
    @property
    def SizeNWSE() -> Cursor: ...
    @property
    def SizeWE() -> Cursor: ...
    @property
    def UpArrow() -> Cursor: ...
    @property
    def VSplit() -> Cursor: ...
    @property
    def WaitCursor() -> Cursor: ...


class DataFormats(Object):
    @overload
    def GetFormat(format: str) -> Format: ...
    @overload
    def GetFormat(id: int) -> Format: ...


class DataGridView(Control):
    def __init__(self): ...
    def add_AllowUserToAddRowsChanged(self, value: EventHandler) -> None: ...
    def add_AllowUserToDeleteRowsChanged(self, value: EventHandler) -> None: ...
    def add_AllowUserToOrderColumnsChanged(self, value: EventHandler) -> None: ...
    def add_AllowUserToResizeColumnsChanged(self, value: EventHandler) -> None: ...
    def add_AllowUserToResizeRowsChanged(self, value: EventHandler) -> None: ...
    def add_AlternatingRowsDefaultCellStyleChanged(self, value: EventHandler) -> None: ...
    def add_AutoGenerateColumnsChanged(self, value: EventHandler) -> None: ...
    def add_AutoSizeColumnModeChanged(self, value: DataGridViewAutoSizeColumnModeEventHandler) -> None: ...
    def add_AutoSizeColumnsModeChanged(self, value: DataGridViewAutoSizeColumnsModeEventHandler) -> None: ...
    def add_AutoSizeRowsModeChanged(self, value: DataGridViewAutoSizeModeEventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    def add_BackgroundColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def add_BorderStyleChanged(self, value: EventHandler) -> None: ...
    def add_CancelRowEdit(self, value: QuestionEventHandler) -> None: ...
    def add_CellBeginEdit(self, value: DataGridViewCellCancelEventHandler) -> None: ...
    def add_CellBorderStyleChanged(self, value: EventHandler) -> None: ...
    def add_CellClick(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellContentClick(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellContentDoubleClick(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellContextMenuStripChanged(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellContextMenuStripNeeded(self, value: DataGridViewCellContextMenuStripNeededEventHandler) -> None: ...
    def add_CellDoubleClick(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellEndEdit(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellEnter(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellErrorTextChanged(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellErrorTextNeeded(self, value: DataGridViewCellErrorTextNeededEventHandler) -> None: ...
    def add_CellFormatting(self, value: DataGridViewCellFormattingEventHandler) -> None: ...
    def add_CellLeave(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellMouseClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def add_CellMouseDoubleClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def add_CellMouseDown(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def add_CellMouseEnter(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellMouseLeave(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellMouseMove(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def add_CellMouseUp(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def add_CellPainting(self, value: DataGridViewCellPaintingEventHandler) -> None: ...
    def add_CellParsing(self, value: DataGridViewCellParsingEventHandler) -> None: ...
    def add_CellStateChanged(self, value: DataGridViewCellStateChangedEventHandler) -> None: ...
    def add_CellStyleChanged(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellStyleContentChanged(self, value: DataGridViewCellStyleContentChangedEventHandler) -> None: ...
    def add_CellToolTipTextChanged(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellToolTipTextNeeded(self, value: DataGridViewCellToolTipTextNeededEventHandler) -> None: ...
    def add_CellValidated(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellValidating(self, value: DataGridViewCellValidatingEventHandler) -> None: ...
    def add_CellValueChanged(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_CellValueNeeded(self, value: DataGridViewCellValueEventHandler) -> None: ...
    def add_CellValuePushed(self, value: DataGridViewCellValueEventHandler) -> None: ...
    def add_ColumnAdded(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnContextMenuStripChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnDataPropertyNameChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnDefaultCellStyleChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnDisplayIndexChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnDividerDoubleClick(self, value: DataGridViewColumnDividerDoubleClickEventHandler) -> None: ...
    def add_ColumnDividerWidthChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnHeaderCellChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnHeaderMouseClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def add_ColumnHeaderMouseDoubleClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def add_ColumnHeadersBorderStyleChanged(self, value: EventHandler) -> None: ...
    def add_ColumnHeadersDefaultCellStyleChanged(self, value: EventHandler) -> None: ...
    def add_ColumnHeadersHeightChanged(self, value: EventHandler) -> None: ...
    def add_ColumnHeadersHeightSizeModeChanged(self, value: DataGridViewAutoSizeModeEventHandler) -> None: ...
    def add_ColumnMinimumWidthChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnNameChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnRemoved(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnSortModeChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnStateChanged(self, value: DataGridViewColumnStateChangedEventHandler) -> None: ...
    def add_ColumnToolTipTextChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_ColumnWidthChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def add_CurrentCellChanged(self, value: EventHandler) -> None: ...
    def add_CurrentCellDirtyStateChanged(self, value: EventHandler) -> None: ...
    def add_DataBindingComplete(self, value: DataGridViewBindingCompleteEventHandler) -> None: ...
    def add_DataError(self, value: DataGridViewDataErrorEventHandler) -> None: ...
    def add_DataMemberChanged(self, value: EventHandler) -> None: ...
    def add_DataSourceChanged(self, value: EventHandler) -> None: ...
    def add_DefaultCellStyleChanged(self, value: EventHandler) -> None: ...
    def add_DefaultValuesNeeded(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_EditingControlShowing(self, value: DataGridViewEditingControlShowingEventHandler) -> None: ...
    def add_EditModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    def add_GridColorChanged(self, value: EventHandler) -> None: ...
    def add_MultiSelectChanged(self, value: EventHandler) -> None: ...
    def add_NewRowNeeded(self, value: DataGridViewRowEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    def add_ReadOnlyChanged(self, value: EventHandler) -> None: ...
    def add_RowContextMenuStripChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_RowContextMenuStripNeeded(self, value: DataGridViewRowContextMenuStripNeededEventHandler) -> None: ...
    def add_RowDefaultCellStyleChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_RowDirtyStateNeeded(self, value: QuestionEventHandler) -> None: ...
    def add_RowDividerDoubleClick(self, value: DataGridViewRowDividerDoubleClickEventHandler) -> None: ...
    def add_RowDividerHeightChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_RowEnter(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_RowErrorTextChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_RowErrorTextNeeded(self, value: DataGridViewRowErrorTextNeededEventHandler) -> None: ...
    def add_RowHeaderCellChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_RowHeaderMouseClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def add_RowHeaderMouseDoubleClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def add_RowHeadersBorderStyleChanged(self, value: EventHandler) -> None: ...
    def add_RowHeadersDefaultCellStyleChanged(self, value: EventHandler) -> None: ...
    def add_RowHeadersWidthChanged(self, value: EventHandler) -> None: ...
    def add_RowHeadersWidthSizeModeChanged(self, value: DataGridViewAutoSizeModeEventHandler) -> None: ...
    def add_RowHeightChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_RowHeightInfoNeeded(self, value: DataGridViewRowHeightInfoNeededEventHandler) -> None: ...
    def add_RowHeightInfoPushed(self, value: DataGridViewRowHeightInfoPushedEventHandler) -> None: ...
    def add_RowLeave(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_RowMinimumHeightChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_RowPostPaint(self, value: DataGridViewRowPostPaintEventHandler) -> None: ...
    def add_RowPrePaint(self, value: DataGridViewRowPrePaintEventHandler) -> None: ...
    def add_RowsAdded(self, value: DataGridViewRowsAddedEventHandler) -> None: ...
    def add_RowsDefaultCellStyleChanged(self, value: EventHandler) -> None: ...
    def add_RowsRemoved(self, value: DataGridViewRowsRemovedEventHandler) -> None: ...
    def add_RowStateChanged(self, value: DataGridViewRowStateChangedEventHandler) -> None: ...
    def add_RowUnshared(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_RowValidated(self, value: DataGridViewCellEventHandler) -> None: ...
    def add_RowValidating(self, value: DataGridViewCellCancelEventHandler) -> None: ...
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    def add_SortCompare(self, value: DataGridViewSortCompareEventHandler) -> None: ...
    def add_Sorted(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def add_UserAddedRow(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_UserDeletedRow(self, value: DataGridViewRowEventHandler) -> None: ...
    def add_UserDeletingRow(self, value: DataGridViewRowCancelEventHandler) -> None: ...
    def AdjustColumnHeaderBorderStyle(self, dataGridViewAdvancedBorderStyleInput: DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder: DataGridViewAdvancedBorderStyle, isFirstDisplayedColumn: bool, isLastVisibleColumn: bool) -> DataGridViewAdvancedBorderStyle: ...
    def AreAllCellsSelected(self, includeInvisibleCells: bool) -> bool: ...
    @overload
    def AutoResizeColumn(self, columnIndex: int) -> None: ...
    @overload
    def AutoResizeColumn(self, columnIndex: int, autoSizeColumnMode: DataGridViewAutoSizeColumnMode) -> None: ...
    @overload
    def AutoResizeColumnHeadersHeight(self) -> None: ...
    @overload
    def AutoResizeColumnHeadersHeight(self, columnIndex: int) -> None: ...
    @overload
    def AutoResizeColumns(self) -> None: ...
    @overload
    def AutoResizeColumns(self, autoSizeColumnsMode: DataGridViewAutoSizeColumnsMode) -> None: ...
    @overload
    def AutoResizeRow(self, rowIndex: int) -> None: ...
    @overload
    def AutoResizeRow(self, rowIndex: int, autoSizeRowMode: DataGridViewAutoSizeRowMode) -> None: ...
    @overload
    def AutoResizeRowHeadersWidth(self, rowHeadersWidthSizeMode: DataGridViewRowHeadersWidthSizeMode) -> None: ...
    @overload
    def AutoResizeRowHeadersWidth(self, rowIndex: int, rowHeadersWidthSizeMode: DataGridViewRowHeadersWidthSizeMode) -> None: ...
    @overload
    def AutoResizeRows(self) -> None: ...
    @overload
    def AutoResizeRows(self, autoSizeRowsMode: DataGridViewAutoSizeRowsMode) -> None: ...
    def BeginEdit(self, selectAll: bool) -> bool: ...
    def CancelEdit(self) -> bool: ...
    def ClearSelection(self) -> None: ...
    def CommitEdit(self, context: DataGridViewDataErrorContexts) -> bool: ...
    def DisplayedColumnCount(self, includePartialColumns: bool) -> int: ...
    def DisplayedRowCount(self, includePartialRow: bool) -> int: ...
    @overload
    def EndEdit(self) -> bool: ...
    @overload
    def EndEdit(self, context: DataGridViewDataErrorContexts) -> bool: ...
    @property
    def AdjustedTopLeftHeaderBorderStyle(self) -> DataGridViewAdvancedBorderStyle: ...
    @property
    def AdvancedCellBorderStyle(self) -> DataGridViewAdvancedBorderStyle: ...
    @property
    def AdvancedColumnHeadersBorderStyle(self) -> DataGridViewAdvancedBorderStyle: ...
    @property
    def AdvancedRowHeadersBorderStyle(self) -> DataGridViewAdvancedBorderStyle: ...
    @property
    def AllowUserToAddRows(self) -> bool: ...
    @property
    def AllowUserToDeleteRows(self) -> bool: ...
    @property
    def AllowUserToOrderColumns(self) -> bool: ...
    @property
    def AllowUserToResizeColumns(self) -> bool: ...
    @property
    def AllowUserToResizeRows(self) -> bool: ...
    @property
    def AlternatingRowsDefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def AutoGenerateColumns(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeColumnsMode(self) -> DataGridViewAutoSizeColumnsMode: ...
    @property
    def AutoSizeRowsMode(self) -> DataGridViewAutoSizeRowsMode: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CellBorderStyle(self) -> DataGridViewCellBorderStyle: ...
    @property
    def ClipboardCopyMode(self) -> DataGridViewClipboardCopyMode: ...
    @property
    def ColumnCount(self) -> int: ...
    @property
    def ColumnHeadersBorderStyle(self) -> DataGridViewHeaderBorderStyle: ...
    @property
    def ColumnHeadersDefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def ColumnHeadersHeight(self) -> int: ...
    @property
    def ColumnHeadersHeightSizeMode(self) -> DataGridViewColumnHeadersHeightSizeMode: ...
    @property
    def ColumnHeadersVisible(self) -> bool: ...
    @property
    def Columns(self) -> DataGridViewColumnCollection: ...
    @property
    def CurrentCell(self) -> DataGridViewCell: ...
    @property
    def CurrentCellAddress(self) -> Point: ...
    @property
    def CurrentRow(self) -> DataGridViewRow: ...
    @property
    def DataMember(self) -> str: ...
    @property
    def DataSource(self) -> Object: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def EditingControl(self) -> Control: ...
    @property
    def EditingPanel(self) -> Panel: ...
    @property
    def EditMode(self) -> DataGridViewEditMode: ...
    @property
    def EnableHeadersVisualStyles(self) -> bool: ...
    @property
    def FirstDisplayedCell(self) -> DataGridViewCell: ...
    @property
    def FirstDisplayedScrollingColumnHiddenWidth(self) -> int: ...
    @property
    def FirstDisplayedScrollingColumnIndex(self) -> int: ...
    @property
    def FirstDisplayedScrollingRowIndex(self) -> int: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def GridColor(self) -> Color: ...
    @property
    def HorizontalScrollingOffset(self) -> int: ...
    @property
    def IsCurrentCellDirty(self) -> bool: ...
    @property
    def IsCurrentCellInEditMode(self) -> bool: ...
    @property
    def IsCurrentRowDirty(self) -> bool: ...
    @property
    def Item(self, columnIndex: int, rowIndex: int) -> DataGridViewCell: ...
    @property
    def Item(self, columnName: str, rowIndex: int) -> DataGridViewCell: ...
    @property
    def MultiSelect(self) -> bool: ...
    @property
    def NewRowIndex(self) -> int: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def RowHeadersBorderStyle(self) -> DataGridViewHeaderBorderStyle: ...
    @property
    def RowHeadersDefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def RowHeadersVisible(self) -> bool: ...
    @property
    def RowHeadersWidth(self) -> int: ...
    @property
    def RowHeadersWidthSizeMode(self) -> DataGridViewRowHeadersWidthSizeMode: ...
    @property
    def Rows(self) -> DataGridViewRowCollection: ...
    @property
    def RowsDefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def RowTemplate(self) -> DataGridViewRow: ...
    @property
    def ScrollBars(self) -> ScrollBars: ...
    @property
    def SelectedCells(self) -> DataGridViewSelectedCellCollection: ...
    @property
    def SelectedColumns(self) -> DataGridViewSelectedColumnCollection: ...
    @property
    def SelectedRows(self) -> DataGridViewSelectedRowCollection: ...
    @property
    def SelectionMode(self) -> DataGridViewSelectionMode: ...
    @property
    def ShowCellErrors(self) -> bool: ...
    @property
    def ShowCellToolTips(self) -> bool: ...
    @property
    def ShowEditingIcon(self) -> bool: ...
    @property
    def ShowRowErrors(self) -> bool: ...
    @property
    def SortedColumn(self) -> DataGridViewColumn: ...
    @property
    def SortOrder(self) -> SortOrder: ...
    @property
    def StandardTab(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TopLeftHeaderCell(self) -> DataGridViewHeaderCell: ...
    @property
    def UserSetCursor(self) -> Cursor: ...
    @property
    def VerticalScrollingOffset(self) -> int: ...
    @property
    def VirtualMode(self) -> bool: ...
    def GetCellCount(self, includeFilter: DataGridViewElementStates) -> int: ...
    def GetCellDisplayRectangle(self, columnIndex: int, rowIndex: int, cutOverflow: bool) -> Rectangle: ...
    def GetClipboardContent(self) -> DataObject: ...
    def GetColumnDisplayRectangle(self, columnIndex: int, cutOverflow: bool) -> Rectangle: ...
    def GetRowDisplayRectangle(self, rowIndex: int, cutOverflow: bool) -> Rectangle: ...
    def HitTest(self, x: int, y: int) -> HitTestInfo: ...
    @overload
    def InvalidateCell(self, dataGridViewCell: DataGridViewCell) -> None: ...
    @overload
    def InvalidateCell(self, columnIndex: int, rowIndex: int) -> None: ...
    def InvalidateColumn(self, columnIndex: int) -> None: ...
    def InvalidateRow(self, rowIndex: int) -> None: ...
    def NotifyCurrentCellDirty(self, dirty: bool) -> None: ...
    def RefreshEdit(self) -> bool: ...
    def remove_AllowUserToAddRowsChanged(self, value: EventHandler) -> None: ...
    def remove_AllowUserToDeleteRowsChanged(self, value: EventHandler) -> None: ...
    def remove_AllowUserToOrderColumnsChanged(self, value: EventHandler) -> None: ...
    def remove_AllowUserToResizeColumnsChanged(self, value: EventHandler) -> None: ...
    def remove_AllowUserToResizeRowsChanged(self, value: EventHandler) -> None: ...
    def remove_AlternatingRowsDefaultCellStyleChanged(self, value: EventHandler) -> None: ...
    def remove_AutoGenerateColumnsChanged(self, value: EventHandler) -> None: ...
    def remove_AutoSizeColumnModeChanged(self, value: DataGridViewAutoSizeColumnModeEventHandler) -> None: ...
    def remove_AutoSizeColumnsModeChanged(self, value: DataGridViewAutoSizeColumnsModeEventHandler) -> None: ...
    def remove_AutoSizeRowsModeChanged(self, value: DataGridViewAutoSizeModeEventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    def remove_BackgroundColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_BorderStyleChanged(self, value: EventHandler) -> None: ...
    def remove_CancelRowEdit(self, value: QuestionEventHandler) -> None: ...
    def remove_CellBeginEdit(self, value: DataGridViewCellCancelEventHandler) -> None: ...
    def remove_CellBorderStyleChanged(self, value: EventHandler) -> None: ...
    def remove_CellClick(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellContentClick(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellContentDoubleClick(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellContextMenuStripChanged(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellContextMenuStripNeeded(self, value: DataGridViewCellContextMenuStripNeededEventHandler) -> None: ...
    def remove_CellDoubleClick(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellEndEdit(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellEnter(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellErrorTextChanged(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellErrorTextNeeded(self, value: DataGridViewCellErrorTextNeededEventHandler) -> None: ...
    def remove_CellFormatting(self, value: DataGridViewCellFormattingEventHandler) -> None: ...
    def remove_CellLeave(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellMouseClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def remove_CellMouseDoubleClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def remove_CellMouseDown(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def remove_CellMouseEnter(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellMouseLeave(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellMouseMove(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def remove_CellMouseUp(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def remove_CellPainting(self, value: DataGridViewCellPaintingEventHandler) -> None: ...
    def remove_CellParsing(self, value: DataGridViewCellParsingEventHandler) -> None: ...
    def remove_CellStateChanged(self, value: DataGridViewCellStateChangedEventHandler) -> None: ...
    def remove_CellStyleChanged(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellStyleContentChanged(self, value: DataGridViewCellStyleContentChangedEventHandler) -> None: ...
    def remove_CellToolTipTextChanged(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellToolTipTextNeeded(self, value: DataGridViewCellToolTipTextNeededEventHandler) -> None: ...
    def remove_CellValidated(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellValidating(self, value: DataGridViewCellValidatingEventHandler) -> None: ...
    def remove_CellValueChanged(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_CellValueNeeded(self, value: DataGridViewCellValueEventHandler) -> None: ...
    def remove_CellValuePushed(self, value: DataGridViewCellValueEventHandler) -> None: ...
    def remove_ColumnAdded(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnContextMenuStripChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnDataPropertyNameChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnDefaultCellStyleChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnDisplayIndexChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnDividerDoubleClick(self, value: DataGridViewColumnDividerDoubleClickEventHandler) -> None: ...
    def remove_ColumnDividerWidthChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnHeaderCellChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnHeaderMouseClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def remove_ColumnHeaderMouseDoubleClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def remove_ColumnHeadersBorderStyleChanged(self, value: EventHandler) -> None: ...
    def remove_ColumnHeadersDefaultCellStyleChanged(self, value: EventHandler) -> None: ...
    def remove_ColumnHeadersHeightChanged(self, value: EventHandler) -> None: ...
    def remove_ColumnHeadersHeightSizeModeChanged(self, value: DataGridViewAutoSizeModeEventHandler) -> None: ...
    def remove_ColumnMinimumWidthChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnNameChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnRemoved(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnSortModeChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnStateChanged(self, value: DataGridViewColumnStateChangedEventHandler) -> None: ...
    def remove_ColumnToolTipTextChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_ColumnWidthChanged(self, value: DataGridViewColumnEventHandler) -> None: ...
    def remove_CurrentCellChanged(self, value: EventHandler) -> None: ...
    def remove_CurrentCellDirtyStateChanged(self, value: EventHandler) -> None: ...
    def remove_DataBindingComplete(self, value: DataGridViewBindingCompleteEventHandler) -> None: ...
    def remove_DataError(self, value: DataGridViewDataErrorEventHandler) -> None: ...
    def remove_DataMemberChanged(self, value: EventHandler) -> None: ...
    def remove_DataSourceChanged(self, value: EventHandler) -> None: ...
    def remove_DefaultCellStyleChanged(self, value: EventHandler) -> None: ...
    def remove_DefaultValuesNeeded(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_EditingControlShowing(self, value: DataGridViewEditingControlShowingEventHandler) -> None: ...
    def remove_EditModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    def remove_GridColorChanged(self, value: EventHandler) -> None: ...
    def remove_MultiSelectChanged(self, value: EventHandler) -> None: ...
    def remove_NewRowNeeded(self, value: DataGridViewRowEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    def remove_ReadOnlyChanged(self, value: EventHandler) -> None: ...
    def remove_RowContextMenuStripChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_RowContextMenuStripNeeded(self, value: DataGridViewRowContextMenuStripNeededEventHandler) -> None: ...
    def remove_RowDefaultCellStyleChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_RowDirtyStateNeeded(self, value: QuestionEventHandler) -> None: ...
    def remove_RowDividerDoubleClick(self, value: DataGridViewRowDividerDoubleClickEventHandler) -> None: ...
    def remove_RowDividerHeightChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_RowEnter(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_RowErrorTextChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_RowErrorTextNeeded(self, value: DataGridViewRowErrorTextNeededEventHandler) -> None: ...
    def remove_RowHeaderCellChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_RowHeaderMouseClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def remove_RowHeaderMouseDoubleClick(self, value: DataGridViewCellMouseEventHandler) -> None: ...
    def remove_RowHeadersBorderStyleChanged(self, value: EventHandler) -> None: ...
    def remove_RowHeadersDefaultCellStyleChanged(self, value: EventHandler) -> None: ...
    def remove_RowHeadersWidthChanged(self, value: EventHandler) -> None: ...
    def remove_RowHeadersWidthSizeModeChanged(self, value: DataGridViewAutoSizeModeEventHandler) -> None: ...
    def remove_RowHeightChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_RowHeightInfoNeeded(self, value: DataGridViewRowHeightInfoNeededEventHandler) -> None: ...
    def remove_RowHeightInfoPushed(self, value: DataGridViewRowHeightInfoPushedEventHandler) -> None: ...
    def remove_RowLeave(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_RowMinimumHeightChanged(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_RowPostPaint(self, value: DataGridViewRowPostPaintEventHandler) -> None: ...
    def remove_RowPrePaint(self, value: DataGridViewRowPrePaintEventHandler) -> None: ...
    def remove_RowsAdded(self, value: DataGridViewRowsAddedEventHandler) -> None: ...
    def remove_RowsDefaultCellStyleChanged(self, value: EventHandler) -> None: ...
    def remove_RowsRemoved(self, value: DataGridViewRowsRemovedEventHandler) -> None: ...
    def remove_RowStateChanged(self, value: DataGridViewRowStateChangedEventHandler) -> None: ...
    def remove_RowUnshared(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_RowValidated(self, value: DataGridViewCellEventHandler) -> None: ...
    def remove_RowValidating(self, value: DataGridViewCellCancelEventHandler) -> None: ...
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    def remove_SortCompare(self, value: DataGridViewSortCompareEventHandler) -> None: ...
    def remove_Sorted(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def remove_UserAddedRow(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_UserDeletedRow(self, value: DataGridViewRowEventHandler) -> None: ...
    def remove_UserDeletingRow(self, value: DataGridViewRowCancelEventHandler) -> None: ...
    def ResetText(self) -> None: ...
    def SelectAll(self) -> None: ...
    @AllowUserToAddRows.setter
    def AllowUserToAddRows(self, value: bool) -> None: ...
    @AllowUserToDeleteRows.setter
    def AllowUserToDeleteRows(self, value: bool) -> None: ...
    @AllowUserToOrderColumns.setter
    def AllowUserToOrderColumns(self, value: bool) -> None: ...
    @AllowUserToResizeColumns.setter
    def AllowUserToResizeColumns(self, value: bool) -> None: ...
    @AllowUserToResizeRows.setter
    def AllowUserToResizeRows(self, value: bool) -> None: ...
    @AlternatingRowsDefaultCellStyle.setter
    def AlternatingRowsDefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @AutoGenerateColumns.setter
    def AutoGenerateColumns(self, value: bool) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeColumnsMode.setter
    def AutoSizeColumnsMode(self, value: DataGridViewAutoSizeColumnsMode) -> None: ...
    @AutoSizeRowsMode.setter
    def AutoSizeRowsMode(self, value: DataGridViewAutoSizeRowsMode) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @CellBorderStyle.setter
    def CellBorderStyle(self, value: DataGridViewCellBorderStyle) -> None: ...
    @ClipboardCopyMode.setter
    def ClipboardCopyMode(self, value: DataGridViewClipboardCopyMode) -> None: ...
    @ColumnCount.setter
    def ColumnCount(self, value: int) -> None: ...
    @ColumnHeadersBorderStyle.setter
    def ColumnHeadersBorderStyle(self, value: DataGridViewHeaderBorderStyle) -> None: ...
    @ColumnHeadersDefaultCellStyle.setter
    def ColumnHeadersDefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @ColumnHeadersHeight.setter
    def ColumnHeadersHeight(self, value: int) -> None: ...
    @ColumnHeadersHeightSizeMode.setter
    def ColumnHeadersHeightSizeMode(self, value: DataGridViewColumnHeadersHeightSizeMode) -> None: ...
    @ColumnHeadersVisible.setter
    def ColumnHeadersVisible(self, value: bool) -> None: ...
    @CurrentCell.setter
    def CurrentCell(self, value: DataGridViewCell) -> None: ...
    @DataMember.setter
    def DataMember(self, value: str) -> None: ...
    @DataSource.setter
    def DataSource(self, value: Object) -> None: ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @EditMode.setter
    def EditMode(self, value: DataGridViewEditMode) -> None: ...
    @EnableHeadersVisualStyles.setter
    def EnableHeadersVisualStyles(self, value: bool) -> None: ...
    @FirstDisplayedCell.setter
    def FirstDisplayedCell(self, value: DataGridViewCell) -> None: ...
    @FirstDisplayedScrollingColumnIndex.setter
    def FirstDisplayedScrollingColumnIndex(self, value: int) -> None: ...
    @FirstDisplayedScrollingRowIndex.setter
    def FirstDisplayedScrollingRowIndex(self, value: int) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @GridColor.setter
    def GridColor(self, value: Color) -> None: ...
    @HorizontalScrollingOffset.setter
    def HorizontalScrollingOffset(self, value: int) -> None: ...
    @Item.setter
    def Item(self, columnName: str, rowIndex: int, value: DataGridViewCell) -> None: ...
    @Item.setter
    def Item(self, columnIndex: int, rowIndex: int, value: DataGridViewCell) -> None: ...
    @MultiSelect.setter
    def MultiSelect(self, value: bool) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @RowCount.setter
    def RowCount(self, value: int) -> None: ...
    @RowHeadersBorderStyle.setter
    def RowHeadersBorderStyle(self, value: DataGridViewHeaderBorderStyle) -> None: ...
    @RowHeadersDefaultCellStyle.setter
    def RowHeadersDefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @RowHeadersVisible.setter
    def RowHeadersVisible(self, value: bool) -> None: ...
    @RowHeadersWidth.setter
    def RowHeadersWidth(self, value: int) -> None: ...
    @RowHeadersWidthSizeMode.setter
    def RowHeadersWidthSizeMode(self, value: DataGridViewRowHeadersWidthSizeMode) -> None: ...
    @RowsDefaultCellStyle.setter
    def RowsDefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @RowTemplate.setter
    def RowTemplate(self, value: DataGridViewRow) -> None: ...
    @ScrollBars.setter
    def ScrollBars(self, value: ScrollBars) -> None: ...
    @SelectionMode.setter
    def SelectionMode(self, value: DataGridViewSelectionMode) -> None: ...
    @ShowCellErrors.setter
    def ShowCellErrors(self, value: bool) -> None: ...
    @ShowCellToolTips.setter
    def ShowCellToolTips(self, value: bool) -> None: ...
    @ShowEditingIcon.setter
    def ShowEditingIcon(self, value: bool) -> None: ...
    @ShowRowErrors.setter
    def ShowRowErrors(self, value: bool) -> None: ...
    @StandardTab.setter
    def StandardTab(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TopLeftHeaderCell.setter
    def TopLeftHeaderCell(self, value: DataGridViewHeaderCell) -> None: ...
    @VirtualMode.setter
    def VirtualMode(self, value: bool) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, dataGridViewColumn: DataGridViewColumn, direction: ListSortDirection) -> None: ...
    def UpdateCellErrorText(self, columnIndex: int, rowIndex: int) -> None: ...
    def UpdateCellValue(self, columnIndex: int, rowIndex: int) -> None: ...
    @overload
    def UpdateRowErrorText(self, rowIndex: int) -> None: ...
    @overload
    def UpdateRowErrorText(self, rowIndexStart: int, rowIndexEnd: int) -> None: ...
    def UpdateRowHeightInfo(self, rowIndex: int, updateToEnd: bool) -> None: ...


class DataGridViewAdvancedBorderStyle(Object):
    def __init__(self): ...
    def Equals(self, other: Object) -> bool: ...
    @property
    def All(self) -> DataGridViewAdvancedCellBorderStyle: ...
    @property
    def Bottom(self) -> DataGridViewAdvancedCellBorderStyle: ...
    @property
    def Left(self) -> DataGridViewAdvancedCellBorderStyle: ...
    @property
    def Right(self) -> DataGridViewAdvancedCellBorderStyle: ...
    @property
    def Top(self) -> DataGridViewAdvancedCellBorderStyle: ...
    def GetHashCode(self) -> int: ...
    @All.setter
    def All(self, value: DataGridViewAdvancedCellBorderStyle) -> None: ...
    @Bottom.setter
    def Bottom(self, value: DataGridViewAdvancedCellBorderStyle) -> None: ...
    @Left.setter
    def Left(self, value: DataGridViewAdvancedCellBorderStyle) -> None: ...
    @Right.setter
    def Right(self, value: DataGridViewAdvancedCellBorderStyle) -> None: ...
    @Top.setter
    def Top(self, value: DataGridViewAdvancedCellBorderStyle) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewAdvancedCellBorderStyle:
    NotSet = 0
    #None = 1
    Single = 2
    Inset = 3
    InsetDouble = 4
    Outset = 5
    OutsetDouble = 6
    OutsetPartial = 7


class DataGridViewAutoSizeColumnMode:
    NotSet = 0
    #None = 1
    ColumnHeader = 2
    AllCellsExceptHeader = 4
    AllCells = 6
    DisplayedCellsExceptHeader = 8
    DisplayedCells = 10
    Fill = 16


class DataGridViewAutoSizeColumnModeEventArgs(EventArgs):
    def __init__(self, dataGridViewColumn: DataGridViewColumn, previousMode: DataGridViewAutoSizeColumnMode): ...
    @property
    def Column(self) -> DataGridViewColumn: ...
    @property
    def PreviousMode(self) -> DataGridViewAutoSizeColumnMode: ...


class DataGridViewAutoSizeColumnModeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewAutoSizeColumnModeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewAutoSizeColumnModeEventArgs) -> None: ...


class DataGridViewAutoSizeColumnsMode:
    #None = 1
    ColumnHeader = 2
    AllCellsExceptHeader = 4
    AllCells = 6
    DisplayedCellsExceptHeader = 8
    DisplayedCells = 10
    Fill = 16


class DataGridViewAutoSizeColumnsModeEventArgs(EventArgs):
    def __init__(self, previousModes: Set(DataGridViewAutoSizeColumnMode)): ...
    @property
    def PreviousModes(self) -> Set(DataGridViewAutoSizeColumnMode): ...


class DataGridViewAutoSizeColumnsModeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewAutoSizeColumnsModeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewAutoSizeColumnsModeEventArgs) -> None: ...


class DataGridViewAutoSizeModeEventArgs(EventArgs):
    def __init__(self, previousModeAutoSized: bool): ...
    @property
    def PreviousModeAutoSized(self) -> bool: ...


class DataGridViewAutoSizeModeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewAutoSizeModeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewAutoSizeModeEventArgs) -> None: ...


class DataGridViewAutoSizeRowMode:
    RowHeader = 1
    AllCellsExceptHeader = 2
    AllCells = 3


class DataGridViewAutoSizeRowsMode:
    #None = 0
    AllHeaders = 5
    AllCellsExceptHeaders = 6
    AllCells = 7
    DisplayedHeaders = 9
    DisplayedCellsExceptHeaders = 10
    DisplayedCells = 11


class DataGridViewBand(DataGridViewElement):
    def Clone(self) -> Object: ...
    def Dispose(self) -> None: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def DefaultHeaderCellType(self) -> Type: ...
    @property
    def Displayed(self) -> bool: ...
    @property
    def Frozen(self) -> bool: ...
    @property
    def HasDefaultCellStyle(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def InheritedStyle(self) -> DataGridViewCellStyle: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Resizable(self) -> DataGridViewTriState: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Visible(self) -> bool: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @DefaultHeaderCellType.setter
    def DefaultHeaderCellType(self, value: Type) -> None: ...
    @Frozen.setter
    def Frozen(self, value: bool) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Resizable.setter
    def Resizable(self, value: DataGridViewTriState) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewBindingCompleteEventArgs(EventArgs):
    def __init__(self, listChangedType: ListChangedType): ...
    @property
    def ListChangedType(self) -> ListChangedType: ...


class DataGridViewBindingCompleteEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewBindingCompleteEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewBindingCompleteEventArgs) -> None: ...


class DataGridViewButtonCell(DataGridViewCell):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    @property
    def EditType(self) -> Type: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def FormattedValueType(self) -> Type: ...
    @property
    def UseColumnTextForButtonValue(self) -> bool: ...
    @property
    def ValueType(self) -> Type: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @UseColumnTextForButtonValue.setter
    def UseColumnTextForButtonValue(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewButtonColumn(DataGridViewColumn):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def Text(self) -> str: ...
    @property
    def UseColumnTextForButtonValue(self) -> bool: ...
    @CellTemplate.setter
    def CellTemplate(self, value: DataGridViewCell) -> None: ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @UseColumnTextForButtonValue.setter
    def UseColumnTextForButtonValue(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewCell(DataGridViewElement):
    def AdjustCellBorderStyle(self, dataGridViewAdvancedBorderStyleInput: DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder: DataGridViewAdvancedBorderStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) -> DataGridViewAdvancedBorderStyle: ...
    def Clone(self) -> Object: ...
    def DetachEditingControl(self) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def ContentBounds(self) -> Rectangle: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DefaultNewRowValue(self) -> Object: ...
    @property
    def Displayed(self) -> bool: ...
    @property
    def EditedFormattedValue(self) -> Object: ...
    @property
    def EditType(self) -> Type: ...
    @property
    def ErrorIconBounds(self) -> Rectangle: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def FormattedValue(self) -> Object: ...
    @property
    def FormattedValueType(self) -> Type: ...
    @property
    def Frozen(self) -> bool: ...
    @property
    def HasStyle(self) -> bool: ...
    @property
    def InheritedState(self) -> DataGridViewElementStates: ...
    @property
    def InheritedStyle(self) -> DataGridViewCellStyle: ...
    @property
    def IsInEditMode(self) -> bool: ...
    @property
    def OwningColumn(self) -> DataGridViewColumn: ...
    @property
    def OwningRow(self) -> DataGridViewRow: ...
    @property
    def PreferredSize(self) -> Size: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Style(self) -> DataGridViewCellStyle: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @property
    def ValueType(self) -> Type: ...
    @property
    def Visible(self) -> bool: ...
    def GetContentBounds(self, rowIndex: int) -> Rectangle: ...
    def GetEditedFormattedValue(self, rowIndex: int, context: DataGridViewDataErrorContexts) -> Object: ...
    def GetInheritedContextMenuStrip(self, rowIndex: int) -> ContextMenuStrip: ...
    def GetInheritedState(self, rowIndex: int) -> DataGridViewElementStates: ...
    def GetInheritedStyle(self, inheritedCellStyle: DataGridViewCellStyle, rowIndex: int, includeColors: bool) -> DataGridViewCellStyle: ...
    def InitializeEditingControl(self, rowIndex: int, initialFormattedValue: Object, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    def KeyEntersEditMode(self, e: KeyEventArgs) -> bool: ...
    @overload
    def MeasureTextHeight(graphics: Graphics, text: str, font: Font, maxWidth: int, flags: TextFormatFlags) -> int: ...
    @overload
    def MeasureTextHeight(graphics: Graphics, text: str, font: Font, maxWidth: int, flags: TextFormatFlags) -> Tuple[int, bool]: ...
    def MeasureTextPreferredSize(graphics: Graphics, text: str, font: Font, maxRatio: Single, flags: TextFormatFlags) -> Size: ...
    def MeasureTextSize(graphics: Graphics, text: str, font: Font, flags: TextFormatFlags) -> Size: ...
    def MeasureTextWidth(graphics: Graphics, text: str, font: Font, maxHeight: int, flags: TextFormatFlags) -> int: ...
    def ParseFormattedValue(self, formattedValue: Object, cellStyle: DataGridViewCellStyle, formattedValueTypeConverter: TypeConverter, valueTypeConverter: TypeConverter) -> Object: ...
    def PositionEditingControl(self, setLocation: bool, setSize: bool, cellBounds: Rectangle, cellClip: Rectangle, cellStyle: DataGridViewCellStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) -> None: ...
    def PositionEditingPanel(self, cellBounds: Rectangle, cellClip: Rectangle, cellStyle: DataGridViewCellStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) -> Rectangle: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @ErrorText.setter
    def ErrorText(self, value: str) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @Style.setter
    def Style(self, value: DataGridViewCellStyle) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @ToolTipText.setter
    def ToolTipText(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...
    @ValueType.setter
    def ValueType(self, value: Type) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewCellBorderStyle:
    Custom = 0
    Single = 1
    Raised = 2
    Sunken = 3
    #None = 4
    SingleVertical = 5
    RaisedVertical = 6
    SunkenVertical = 7
    SingleHorizontal = 8
    RaisedHorizontal = 9
    SunkenHorizontal = 10


class DataGridViewCellCancelEventArgs(CancelEventArgs):
    def __init__(self, columnIndex: int, rowIndex: int): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...


class DataGridViewCellCancelEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellCancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellCancelEventArgs) -> None: ...


class DataGridViewCellCollection(BaseCollection):
    def __init__(self, dataGridViewRow: DataGridViewRow): ...
    def add_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    def Add(self, dataGridViewCell: DataGridViewCell) -> int: ...
    def AddRange(self, dataGridViewCells: Set(DataGridViewCell)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, dataGridViewCell: DataGridViewCell) -> bool: ...
    @overload
    def CopyTo(self, array: Set(DataGridViewCell), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DataGridViewCell: ...
    @property
    def Item(self, columnName: str) -> DataGridViewCell: ...
    def IndexOf(self, dataGridViewCell: DataGridViewCell) -> int: ...
    def Insert(self, index: int, dataGridViewCell: DataGridViewCell) -> None: ...
    def remove_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    def Remove(self, cell: DataGridViewCell) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, columnName: str, value: DataGridViewCell) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DataGridViewCell) -> None: ...


class DataGridViewCellContextMenuStripNeededEventArgs(DataGridViewCellEventArgs):
    def __init__(self, columnIndex: int, rowIndex: int): ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...


class DataGridViewCellContextMenuStripNeededEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellContextMenuStripNeededEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellContextMenuStripNeededEventArgs) -> None: ...


class DataGridViewCellErrorTextNeededEventArgs(DataGridViewCellEventArgs):
    @property
    def ErrorText(self) -> str: ...
    @ErrorText.setter
    def ErrorText(self, value: str) -> None: ...


class DataGridViewCellErrorTextNeededEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellErrorTextNeededEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellErrorTextNeededEventArgs) -> None: ...


class DataGridViewCellEventArgs(EventArgs):
    def __init__(self, columnIndex: int, rowIndex: int): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...


class DataGridViewCellEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellEventArgs) -> None: ...


class DataGridViewCellFormattingEventArgs(ConvertEventArgs):
    def __init__(self, columnIndex: int, rowIndex: int, value: Object, desiredType: Type, cellStyle: DataGridViewCellStyle): ...
    @property
    def CellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def FormattingApplied(self) -> bool: ...
    @property
    def RowIndex(self) -> int: ...
    @CellStyle.setter
    def CellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @FormattingApplied.setter
    def FormattingApplied(self, value: bool) -> None: ...


class DataGridViewCellFormattingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellFormattingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellFormattingEventArgs) -> None: ...


class DataGridViewCellMouseEventArgs(MouseEventArgs):
    def __init__(self, columnIndex: int, rowIndex: int, localX: int, localY: int, e: MouseEventArgs): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...


class DataGridViewCellMouseEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellMouseEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellMouseEventArgs) -> None: ...


class DataGridViewCellPaintingEventArgs(HandledEventArgs):
    def __init__(self, dataGridView: DataGridView, graphics: Graphics, clipBounds: Rectangle, cellBounds: Rectangle, rowIndex: int, columnIndex: int, cellState: DataGridViewElementStates, value: Object, formattedValue: Object, errorText: str, cellStyle: DataGridViewCellStyle, advancedBorderStyle: DataGridViewAdvancedBorderStyle, paintParts: DataGridViewPaintParts): ...
    @property
    def AdvancedBorderStyle(self) -> DataGridViewAdvancedBorderStyle: ...
    @property
    def CellBounds(self) -> Rectangle: ...
    @property
    def CellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def ClipBounds(self) -> Rectangle: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def FormattedValue(self) -> Object: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def PaintParts(self) -> DataGridViewPaintParts: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def State(self) -> DataGridViewElementStates: ...
    @property
    def Value(self) -> Object: ...
    def Paint(self, clipBounds: Rectangle, paintParts: DataGridViewPaintParts) -> None: ...
    def PaintBackground(self, clipBounds: Rectangle, cellsPaintSelectionBackground: bool) -> None: ...
    def PaintContent(self, clipBounds: Rectangle) -> None: ...


class DataGridViewCellPaintingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellPaintingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellPaintingEventArgs) -> None: ...


class DataGridViewCellParsingEventArgs(ConvertEventArgs):
    def __init__(self, rowIndex: int, columnIndex: int, value: Object, desiredType: Type, inheritedCellStyle: DataGridViewCellStyle): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def InheritedCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def ParsingApplied(self) -> bool: ...
    @property
    def RowIndex(self) -> int: ...
    @InheritedCellStyle.setter
    def InheritedCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @ParsingApplied.setter
    def ParsingApplied(self, value: bool) -> None: ...


class DataGridViewCellParsingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellParsingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellParsingEventArgs) -> None: ...


class DataGridViewCellStateChangedEventArgs(EventArgs):
    def __init__(self, dataGridViewCell: DataGridViewCell, stateChanged: DataGridViewElementStates): ...
    @property
    def Cell(self) -> DataGridViewCell: ...
    @property
    def StateChanged(self) -> DataGridViewElementStates: ...


class DataGridViewCellStateChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellStateChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellStateChangedEventArgs) -> None: ...


class DataGridViewCellStyle(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dataGridViewCellStyle: DataGridViewCellStyle): ...
    def ApplyStyle(self, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    def Clone(self) -> DataGridViewCellStyle: ...
    def Equals(self, o: Object) -> bool: ...
    @property
    def Alignment(self) -> DataGridViewContentAlignment: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def DataSourceNullValue(self) -> Object: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Format(self) -> str: ...
    @property
    def FormatProvider(self) -> IFormatProvider: ...
    @property
    def IsDataSourceNullValueDefault(self) -> bool: ...
    @property
    def IsFormatProviderDefault(self) -> bool: ...
    @property
    def IsNullValueDefault(self) -> bool: ...
    @property
    def NullValue(self) -> Object: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def SelectionBackColor(self) -> Color: ...
    @property
    def SelectionForeColor(self) -> Color: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def WrapMode(self) -> DataGridViewTriState: ...
    def GetHashCode(self) -> int: ...
    @Alignment.setter
    def Alignment(self, value: DataGridViewContentAlignment) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @DataSourceNullValue.setter
    def DataSourceNullValue(self, value: Object) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Format.setter
    def Format(self, value: str) -> None: ...
    @FormatProvider.setter
    def FormatProvider(self, value: IFormatProvider) -> None: ...
    @NullValue.setter
    def NullValue(self, value: Object) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @SelectionBackColor.setter
    def SelectionBackColor(self, value: Color) -> None: ...
    @SelectionForeColor.setter
    def SelectionForeColor(self, value: Color) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @WrapMode.setter
    def WrapMode(self, value: DataGridViewTriState) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewCellStyleContentChangedEventArgs(EventArgs):
    @property
    def CellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def CellStyleScope(self) -> DataGridViewCellStyleScopes: ...


class DataGridViewCellStyleContentChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellStyleContentChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellStyleContentChangedEventArgs) -> None: ...


class DataGridViewCellStyleConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class DataGridViewCellStyleScopes:
    #None = 0
    Cell = 1
    Column = 2
    Row = 4
    DataGridView = 8
    ColumnHeaders = 16
    RowHeaders = 32
    Rows = 64
    AlternatingRows = 128


class DataGridViewCellToolTipTextNeededEventArgs(DataGridViewCellEventArgs):
    @property
    def ToolTipText(self) -> str: ...
    @ToolTipText.setter
    def ToolTipText(self, value: str) -> None: ...


class DataGridViewCellToolTipTextNeededEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellToolTipTextNeededEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellToolTipTextNeededEventArgs) -> None: ...


class DataGridViewCellValidatingEventArgs(CancelEventArgs):
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def FormattedValue(self) -> Object: ...
    @property
    def RowIndex(self) -> int: ...


class DataGridViewCellValidatingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellValidatingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellValidatingEventArgs) -> None: ...


class DataGridViewCellValueEventArgs(EventArgs):
    def __init__(self, columnIndex: int, rowIndex: int): ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class DataGridViewCellValueEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewCellValueEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewCellValueEventArgs) -> None: ...


class DataGridViewCheckBoxCell(DataGridViewCell):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, threeState: bool): ...
    def Clone(self) -> Object: ...
    @property
    def EditingCellFormattedValue(self) -> Object: ...
    @property
    def EditingCellValueChanged(self) -> bool: ...
    @property
    def EditType(self) -> Type: ...
    @property
    def FalseValue(self) -> Object: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def FormattedValueType(self) -> Type: ...
    @property
    def IndeterminateValue(self) -> Object: ...
    @property
    def ThreeState(self) -> bool: ...
    @property
    def TrueValue(self) -> Object: ...
    @property
    def ValueType(self) -> Type: ...
    def GetEditingCellFormattedValue(self, context: DataGridViewDataErrorContexts) -> Object: ...
    def ParseFormattedValue(self, formattedValue: Object, cellStyle: DataGridViewCellStyle, formattedValueTypeConverter: TypeConverter, valueTypeConverter: TypeConverter) -> Object: ...
    def PrepareEditingCellForEdit(self, selectAll: bool) -> None: ...
    @EditingCellFormattedValue.setter
    def EditingCellFormattedValue(self, value: Object) -> None: ...
    @EditingCellValueChanged.setter
    def EditingCellValueChanged(self, value: bool) -> None: ...
    @FalseValue.setter
    def FalseValue(self, value: Object) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @IndeterminateValue.setter
    def IndeterminateValue(self, value: Object) -> None: ...
    @ThreeState.setter
    def ThreeState(self, value: bool) -> None: ...
    @TrueValue.setter
    def TrueValue(self, value: Object) -> None: ...
    @ValueType.setter
    def ValueType(self, value: Type) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewCheckBoxColumn(DataGridViewColumn):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, threeState: bool): ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def FalseValue(self) -> Object: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def IndeterminateValue(self) -> Object: ...
    @property
    def ThreeState(self) -> bool: ...
    @property
    def TrueValue(self) -> Object: ...
    @CellTemplate.setter
    def CellTemplate(self, value: DataGridViewCell) -> None: ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @FalseValue.setter
    def FalseValue(self, value: Object) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @IndeterminateValue.setter
    def IndeterminateValue(self, value: Object) -> None: ...
    @ThreeState.setter
    def ThreeState(self, value: bool) -> None: ...
    @TrueValue.setter
    def TrueValue(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewClipboardCopyMode:
    Disable = 0
    EnableWithAutoHeaderText = 1
    EnableWithoutHeaderText = 2
    EnableAlwaysIncludeHeaderText = 3


class DataGridViewColumn(DataGridViewBand):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cellTemplate: DataGridViewCell): ...
    def add_Disposed(self, value: EventHandler) -> None: ...
    def Clone(self) -> Object: ...
    @property
    def AutoSizeMode(self) -> DataGridViewAutoSizeColumnMode: ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def CellType(self) -> Type: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DataPropertyName(self) -> str: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def DisplayIndex(self) -> int: ...
    @property
    def DividerWidth(self) -> int: ...
    @property
    def FillWeight(self) -> Single: ...
    @property
    def Frozen(self) -> bool: ...
    @property
    def HeaderCell(self) -> DataGridViewColumnHeaderCell: ...
    @property
    def HeaderText(self) -> str: ...
    @property
    def InheritedAutoSizeMode(self) -> DataGridViewAutoSizeColumnMode: ...
    @property
    def InheritedStyle(self) -> DataGridViewCellStyle: ...
    @property
    def IsDataBound(self) -> bool: ...
    @property
    def MinimumWidth(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Resizable(self) -> DataGridViewTriState: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def SortMode(self) -> DataGridViewColumnSortMode: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def ValueType(self) -> Type: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    def GetPreferredWidth(self, autoSizeColumnMode: DataGridViewAutoSizeColumnMode, fixedHeight: bool) -> int: ...
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: DataGridViewAutoSizeColumnMode) -> None: ...
    @CellTemplate.setter
    def CellTemplate(self, value: DataGridViewCell) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @DataPropertyName.setter
    def DataPropertyName(self, value: str) -> None: ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @DisplayIndex.setter
    def DisplayIndex(self, value: int) -> None: ...
    @DividerWidth.setter
    def DividerWidth(self, value: int) -> None: ...
    @FillWeight.setter
    def FillWeight(self, value: Single) -> None: ...
    @Frozen.setter
    def Frozen(self, value: bool) -> None: ...
    @HeaderCell.setter
    def HeaderCell(self, value: DataGridViewColumnHeaderCell) -> None: ...
    @HeaderText.setter
    def HeaderText(self, value: str) -> None: ...
    @MinimumWidth.setter
    def MinimumWidth(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Resizable.setter
    def Resizable(self, value: DataGridViewTriState) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @SortMode.setter
    def SortMode(self, value: DataGridViewColumnSortMode) -> None: ...
    @ToolTipText.setter
    def ToolTipText(self, value: str) -> None: ...
    @ValueType.setter
    def ValueType(self, value: Type) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewColumnCollection(BaseCollection):
    def __init__(self, dataGridView: DataGridView): ...
    def add_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Add(self, dataGridViewColumn: DataGridViewColumn) -> int: ...
    @overload
    def Add(self, columnName: str, headerText: str) -> int: ...
    def AddRange(self, dataGridViewColumns: Set(DataGridViewColumn)) -> None: ...
    def Clear(self) -> None: ...
    @overload
    def Contains(self, dataGridViewColumn: DataGridViewColumn) -> bool: ...
    @overload
    def Contains(self, columnName: str) -> bool: ...
    @overload
    def CopyTo(self, array: Set(DataGridViewColumn), index: int) -> None: ...
    @property
    def Item(self, columnName: str) -> DataGridViewColumn: ...
    @property
    def Item(self, index: int) -> DataGridViewColumn: ...
    def GetColumnCount(self, includeFilter: DataGridViewElementStates) -> int: ...
    def GetColumnsWidth(self, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetFirstColumn(self, includeFilter: DataGridViewElementStates) -> DataGridViewColumn: ...
    @overload
    def GetFirstColumn(self, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn: ...
    def GetLastColumn(self, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn: ...
    def GetNextColumn(self, dataGridViewColumnStart: DataGridViewColumn, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn: ...
    def GetPreviousColumn(self, dataGridViewColumnStart: DataGridViewColumn, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> DataGridViewColumn: ...
    def IndexOf(self, dataGridViewColumn: DataGridViewColumn) -> int: ...
    def Insert(self, columnIndex: int, dataGridViewColumn: DataGridViewColumn) -> None: ...
    def remove_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Remove(self, dataGridViewColumn: DataGridViewColumn) -> None: ...
    @overload
    def Remove(self, columnName: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class DataGridViewColumnDesignTimeVisibleAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, visible: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class DataGridViewColumnDividerDoubleClickEventArgs(HandledMouseEventArgs):
    def __init__(self, columnIndex: int, e: HandledMouseEventArgs): ...
    @property
    def ColumnIndex(self) -> int: ...


class DataGridViewColumnDividerDoubleClickEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewColumnDividerDoubleClickEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewColumnDividerDoubleClickEventArgs) -> None: ...


class DataGridViewColumnEventArgs(EventArgs):
    def __init__(self, dataGridViewColumn: DataGridViewColumn): ...
    @property
    def Column(self) -> DataGridViewColumn: ...


class DataGridViewColumnEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewColumnEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewColumnEventArgs) -> None: ...


class DataGridViewColumnHeaderCell(DataGridViewHeaderCell):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    @property
    def SortGlyphDirection(self) -> SortOrder: ...
    def GetInheritedContextMenuStrip(self, rowIndex: int) -> ContextMenuStrip: ...
    def GetInheritedStyle(self, inheritedCellStyle: DataGridViewCellStyle, rowIndex: int, includeColors: bool) -> DataGridViewCellStyle: ...
    @SortGlyphDirection.setter
    def SortGlyphDirection(self, value: SortOrder) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewColumnHeadersHeightSizeMode:
    EnableResizing = 0
    DisableResizing = 1
    AutoSize = 2


class DataGridViewColumnSortMode:
    NotSortable = 0
    Automatic = 1
    Programmatic = 2


class DataGridViewColumnStateChangedEventArgs(EventArgs):
    def __init__(self, dataGridViewColumn: DataGridViewColumn, stateChanged: DataGridViewElementStates): ...
    @property
    def Column(self) -> DataGridViewColumn: ...
    @property
    def StateChanged(self) -> DataGridViewElementStates: ...


class DataGridViewColumnStateChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewColumnStateChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewColumnStateChangedEventArgs) -> None: ...


class DataGridViewComboBoxCell(DataGridViewCell):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    def DetachEditingControl(self) -> None: ...
    @property
    def AutoComplete(self) -> bool: ...
    @property
    def DataSource(self) -> Object: ...
    @property
    def DisplayMember(self) -> str: ...
    @property
    def DisplayStyle(self) -> DataGridViewComboBoxDisplayStyle: ...
    @property
    def DisplayStyleForCurrentCellOnly(self) -> bool: ...
    @property
    def DropDownWidth(self) -> int: ...
    @property
    def EditType(self) -> Type: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def FormattedValueType(self) -> Type: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def MaxDropDownItems(self) -> int: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def ValueMember(self) -> str: ...
    @property
    def ValueType(self) -> Type: ...
    def InitializeEditingControl(self, rowIndex: int, initialFormattedValue: Object, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    def KeyEntersEditMode(self, e: KeyEventArgs) -> bool: ...
    def ParseFormattedValue(self, formattedValue: Object, cellStyle: DataGridViewCellStyle, formattedValueTypeConverter: TypeConverter, valueTypeConverter: TypeConverter) -> Object: ...
    @AutoComplete.setter
    def AutoComplete(self, value: bool) -> None: ...
    @DataSource.setter
    def DataSource(self, value: Object) -> None: ...
    @DisplayMember.setter
    def DisplayMember(self, value: str) -> None: ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: DataGridViewComboBoxDisplayStyle) -> None: ...
    @DisplayStyleForCurrentCellOnly.setter
    def DisplayStyleForCurrentCellOnly(self, value: bool) -> None: ...
    @DropDownWidth.setter
    def DropDownWidth(self, value: int) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @MaxDropDownItems.setter
    def MaxDropDownItems(self, value: int) -> None: ...
    @Sorted.setter
    def Sorted(self, value: bool) -> None: ...
    @ValueMember.setter
    def ValueMember(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewComboBoxColumn(DataGridViewColumn):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    @property
    def AutoComplete(self) -> bool: ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def DataSource(self) -> Object: ...
    @property
    def DisplayMember(self) -> str: ...
    @property
    def DisplayStyle(self) -> DataGridViewComboBoxDisplayStyle: ...
    @property
    def DisplayStyleForCurrentCellOnly(self) -> bool: ...
    @property
    def DropDownWidth(self) -> int: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def MaxDropDownItems(self) -> int: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def ValueMember(self) -> str: ...
    @AutoComplete.setter
    def AutoComplete(self, value: bool) -> None: ...
    @CellTemplate.setter
    def CellTemplate(self, value: DataGridViewCell) -> None: ...
    @DataSource.setter
    def DataSource(self, value: Object) -> None: ...
    @DisplayMember.setter
    def DisplayMember(self, value: str) -> None: ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: DataGridViewComboBoxDisplayStyle) -> None: ...
    @DisplayStyleForCurrentCellOnly.setter
    def DisplayStyleForCurrentCellOnly(self, value: bool) -> None: ...
    @DropDownWidth.setter
    def DropDownWidth(self, value: int) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @MaxDropDownItems.setter
    def MaxDropDownItems(self, value: int) -> None: ...
    @Sorted.setter
    def Sorted(self, value: bool) -> None: ...
    @ValueMember.setter
    def ValueMember(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewComboBoxDisplayStyle:
    ComboBox = 0
    DropDownButton = 1
    Nothing = 2


class DataGridViewComboBoxEditingControl(ComboBox):
    def __init__(self): ...
    def ApplyCellStyleToEditingControl(self, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    def EditingControlWantsInputKey(self, keyData: Keys, dataGridViewWantsInputKey: bool) -> bool: ...
    @property
    def EditingControlDataGridView(self) -> DataGridView: ...
    @property
    def EditingControlFormattedValue(self) -> Object: ...
    @property
    def EditingControlRowIndex(self) -> int: ...
    @property
    def EditingControlValueChanged(self) -> bool: ...
    @property
    def EditingPanelCursor(self) -> Cursor: ...
    @property
    def RepositionEditingControlOnValueChange(self) -> bool: ...
    def GetEditingControlFormattedValue(self, context: DataGridViewDataErrorContexts) -> Object: ...
    def PrepareEditingControlForEdit(self, selectAll: bool) -> None: ...
    @EditingControlDataGridView.setter
    def EditingControlDataGridView(self, value: DataGridView) -> None: ...
    @EditingControlFormattedValue.setter
    def EditingControlFormattedValue(self, value: Object) -> None: ...
    @EditingControlRowIndex.setter
    def EditingControlRowIndex(self, value: int) -> None: ...
    @EditingControlValueChanged.setter
    def EditingControlValueChanged(self, value: bool) -> None: ...


class DataGridViewContentAlignment:
    NotSet = 0
    TopLeft = 1
    TopCenter = 2
    TopRight = 4
    MiddleLeft = 16
    MiddleCenter = 32
    MiddleRight = 64
    BottomLeft = 256
    BottomCenter = 512
    BottomRight = 1024


class DataGridViewControlCollection:
    def __init__(self, owner: DataGridView): ...
    def Clear(self) -> None: ...
    @overload
    def CopyTo(self, array: Set(Control), index: int) -> None: ...
    def Insert(self, index: int, value: Control) -> None: ...
    def Remove(self, value: Control) -> None: ...


class DataGridViewDataErrorContexts:
    Formatting = 1
    Display = 2
    PreferredSize = 4
    RowDeletion = 8
    Parsing = 256
    Commit = 512
    InitialValueRestoration = 1024
    LeaveControl = 2048
    CurrentCellChange = 4096
    Scroll = 8192
    ClipboardContent = 16384


class DataGridViewDataErrorEventArgs(DataGridViewCellCancelEventArgs):
    def __init__(self, exception: Exception, columnIndex: int, rowIndex: int, context: DataGridViewDataErrorContexts): ...
    @property
    def Context(self) -> DataGridViewDataErrorContexts: ...
    @property
    def Exception(self) -> Exception: ...
    @property
    def ThrowException(self) -> bool: ...
    @ThrowException.setter
    def ThrowException(self, value: bool) -> None: ...


class DataGridViewDataErrorEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewDataErrorEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewDataErrorEventArgs) -> None: ...


class DataGridViewEditingControlShowingEventArgs(EventArgs):
    def __init__(self, control: Control, cellStyle: DataGridViewCellStyle): ...
    @property
    def CellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def Control(self) -> Control: ...
    @CellStyle.setter
    def CellStyle(self, value: DataGridViewCellStyle) -> None: ...


class DataGridViewEditingControlShowingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewEditingControlShowingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewEditingControlShowingEventArgs) -> None: ...


class DataGridViewEditMode:
    EditOnEnter = 0
    EditOnKeystroke = 1
    EditOnKeystrokeOrF2 = 2
    EditOnF2 = 3
    EditProgrammatically = 4


class DataGridViewElement(Object):
    def __init__(self): ...
    @property
    def DataGridView(self) -> DataGridView: ...
    @property
    def State(self) -> DataGridViewElementStates: ...


class DataGridViewElementStates:
    #None = 0
    Displayed = 1
    Frozen = 2
    ReadOnly = 4
    Resizable = 8
    ResizableSet = 16
    Selected = 32
    Visible = 64


class DataGridViewHeaderBorderStyle:
    Custom = 0
    Single = 1
    Raised = 2
    Sunken = 3
    #None = 4


class DataGridViewHeaderCell(DataGridViewCell):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    @property
    def Displayed(self) -> bool: ...
    @property
    def FormattedValueType(self) -> Type: ...
    @property
    def Frozen(self) -> bool: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def ValueType(self) -> Type: ...
    @property
    def Visible(self) -> bool: ...
    def GetInheritedContextMenuStrip(self, rowIndex: int) -> ContextMenuStrip: ...
    def GetInheritedState(self, rowIndex: int) -> DataGridViewElementStates: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @ValueType.setter
    def ValueType(self, value: Type) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewHitTestType:
    #None = 0
    Cell = 1
    ColumnHeader = 2
    RowHeader = 3
    TopLeftHeader = 4
    HorizontalScrollBar = 5
    VerticalScrollBar = 6


class DataGridViewImageCell(DataGridViewCell):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, valueIsIcon: bool): ...
    def Clone(self) -> Object: ...
    @property
    def DefaultNewRowValue(self) -> Object: ...
    @property
    def Description(self) -> str: ...
    @property
    def EditType(self) -> Type: ...
    @property
    def FormattedValueType(self) -> Type: ...
    @property
    def ImageLayout(self) -> DataGridViewImageCellLayout: ...
    @property
    def ValueIsIcon(self) -> bool: ...
    @property
    def ValueType(self) -> Type: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @ImageLayout.setter
    def ImageLayout(self, value: DataGridViewImageCellLayout) -> None: ...
    @ValueIsIcon.setter
    def ValueIsIcon(self, value: bool) -> None: ...
    @ValueType.setter
    def ValueType(self, value: Type) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewImageCellLayout:
    NotSet = 0
    Normal = 1
    Stretch = 2
    Zoom = 3


class DataGridViewImageColumn(DataGridViewColumn):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, valuesAreIcons: bool): ...
    def Clone(self) -> Object: ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def Image(self) -> Image: ...
    @property
    def ImageLayout(self) -> DataGridViewImageCellLayout: ...
    @property
    def ValuesAreIcons(self) -> bool: ...
    @CellTemplate.setter
    def CellTemplate(self, value: DataGridViewCell) -> None: ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @ImageLayout.setter
    def ImageLayout(self, value: DataGridViewImageCellLayout) -> None: ...
    @ValuesAreIcons.setter
    def ValuesAreIcons(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewLinkCell(DataGridViewCell):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    @property
    def ActiveLinkColor(self) -> Color: ...
    @property
    def EditType(self) -> Type: ...
    @property
    def FormattedValueType(self) -> Type: ...
    @property
    def LinkBehavior(self) -> LinkBehavior: ...
    @property
    def LinkColor(self) -> Color: ...
    @property
    def LinkVisited(self) -> bool: ...
    @property
    def TrackVisitedState(self) -> bool: ...
    @property
    def UseColumnTextForLinkValue(self) -> bool: ...
    @property
    def ValueType(self) -> Type: ...
    @property
    def VisitedLinkColor(self) -> Color: ...
    @ActiveLinkColor.setter
    def ActiveLinkColor(self, value: Color) -> None: ...
    @LinkBehavior.setter
    def LinkBehavior(self, value: LinkBehavior) -> None: ...
    @LinkColor.setter
    def LinkColor(self, value: Color) -> None: ...
    @LinkVisited.setter
    def LinkVisited(self, value: bool) -> None: ...
    @TrackVisitedState.setter
    def TrackVisitedState(self, value: bool) -> None: ...
    @UseColumnTextForLinkValue.setter
    def UseColumnTextForLinkValue(self, value: bool) -> None: ...
    @VisitedLinkColor.setter
    def VisitedLinkColor(self, value: Color) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewLinkColumn(DataGridViewColumn):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    @property
    def ActiveLinkColor(self) -> Color: ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def LinkBehavior(self) -> LinkBehavior: ...
    @property
    def LinkColor(self) -> Color: ...
    @property
    def Text(self) -> str: ...
    @property
    def TrackVisitedState(self) -> bool: ...
    @property
    def UseColumnTextForLinkValue(self) -> bool: ...
    @property
    def VisitedLinkColor(self) -> Color: ...
    @ActiveLinkColor.setter
    def ActiveLinkColor(self, value: Color) -> None: ...
    @CellTemplate.setter
    def CellTemplate(self, value: DataGridViewCell) -> None: ...
    @LinkBehavior.setter
    def LinkBehavior(self, value: LinkBehavior) -> None: ...
    @LinkColor.setter
    def LinkColor(self, value: Color) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TrackVisitedState.setter
    def TrackVisitedState(self, value: bool) -> None: ...
    @UseColumnTextForLinkValue.setter
    def UseColumnTextForLinkValue(self, value: bool) -> None: ...
    @VisitedLinkColor.setter
    def VisitedLinkColor(self, value: Color) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewPaintParts:
    #None = 0
    Background = 1
    Border = 2
    ContentBackground = 4
    ContentForeground = 8
    ErrorIcon = 16
    Focus = 32
    SelectionBackground = 64
    All = 127


class DataGridViewRow(DataGridViewBand):
    def __init__(self): ...
    def AdjustRowHeaderBorderStyle(self, dataGridViewAdvancedBorderStyleInput: DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder: DataGridViewAdvancedBorderStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedRow: bool, isLastVisibleRow: bool) -> DataGridViewAdvancedBorderStyle: ...
    def Clone(self) -> Object: ...
    @overload
    def CreateCells(self, dataGridView: DataGridView) -> None: ...
    @overload
    def CreateCells(self, dataGridView: DataGridView, values: Set(Object)) -> None: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def Cells(self) -> DataGridViewCellCollection: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DataBoundItem(self) -> Object: ...
    @property
    def DefaultCellStyle(self) -> DataGridViewCellStyle: ...
    @property
    def Displayed(self) -> bool: ...
    @property
    def DividerHeight(self) -> int: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def Frozen(self) -> bool: ...
    @property
    def HeaderCell(self) -> DataGridViewRowHeaderCell: ...
    @property
    def Height(self) -> int: ...
    @property
    def InheritedStyle(self) -> DataGridViewCellStyle: ...
    @property
    def IsNewRow(self) -> bool: ...
    @property
    def MinimumHeight(self) -> int: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Resizable(self) -> DataGridViewTriState: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def State(self) -> DataGridViewElementStates: ...
    @property
    def Visible(self) -> bool: ...
    def GetContextMenuStrip(self, rowIndex: int) -> ContextMenuStrip: ...
    def GetErrorText(self, rowIndex: int) -> str: ...
    def GetPreferredHeight(self, rowIndex: int, autoSizeRowMode: DataGridViewAutoSizeRowMode, fixedWidth: bool) -> int: ...
    def GetState(self, rowIndex: int) -> DataGridViewElementStates: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @DefaultCellStyle.setter
    def DefaultCellStyle(self, value: DataGridViewCellStyle) -> None: ...
    @DividerHeight.setter
    def DividerHeight(self, value: int) -> None: ...
    @ErrorText.setter
    def ErrorText(self, value: str) -> None: ...
    @Frozen.setter
    def Frozen(self, value: bool) -> None: ...
    @HeaderCell.setter
    def HeaderCell(self, value: DataGridViewRowHeaderCell) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @MinimumHeight.setter
    def MinimumHeight(self, value: int) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Resizable.setter
    def Resizable(self, value: DataGridViewTriState) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    def SetValues(self, values: Set(Object)) -> bool: ...
    def ToString(self) -> str: ...


class DataGridViewRowCancelEventArgs(CancelEventArgs):
    def __init__(self, dataGridViewRow: DataGridViewRow): ...
    @property
    def Row(self) -> DataGridViewRow: ...
    @Row.setter
    def Row(self, value: DataGridViewRow) -> None: ...


class DataGridViewRowCancelEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowCancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowCancelEventArgs) -> None: ...


class DataGridViewRowCollection(Object):
    def __init__(self, dataGridView: DataGridView): ...
    @overload
    def Add(self) -> int: ...
    def add_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Add(self, values: Set(Object)) -> int: ...
    @overload
    def Add(self, dataGridViewRow: DataGridViewRow) -> int: ...
    @overload
    def Add(self, count: int) -> int: ...
    def AddCopies(self, indexSource: int, count: int) -> int: ...
    def AddCopy(self, indexSource: int) -> int: ...
    def AddRange(self, dataGridViewRows: Set(DataGridViewRow)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, dataGridViewRow: DataGridViewRow) -> bool: ...
    def CopyTo(self, array: Set(DataGridViewRow), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> DataGridViewRow: ...
    @overload
    def GetFirstRow(self, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetFirstRow(self, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> int: ...
    def GetLastRow(self, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetNextRow(self, indexStart: int, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetNextRow(self, indexStart: int, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetPreviousRow(self, indexStart: int, includeFilter: DataGridViewElementStates) -> int: ...
    @overload
    def GetPreviousRow(self, indexStart: int, includeFilter: DataGridViewElementStates, excludeFilter: DataGridViewElementStates) -> int: ...
    def GetRowCount(self, includeFilter: DataGridViewElementStates) -> int: ...
    def GetRowsHeight(self, includeFilter: DataGridViewElementStates) -> int: ...
    def GetRowState(self, rowIndex: int) -> DataGridViewElementStates: ...
    def IndexOf(self, dataGridViewRow: DataGridViewRow) -> int: ...
    @overload
    def Insert(self, rowIndex: int, count: int) -> None: ...
    @overload
    def Insert(self, rowIndex: int, values: Set(Object)) -> None: ...
    @overload
    def Insert(self, rowIndex: int, dataGridViewRow: DataGridViewRow) -> None: ...
    def InsertCopies(self, indexSource: int, indexDestination: int, count: int) -> None: ...
    def InsertCopy(self, indexSource: int, indexDestination: int) -> None: ...
    def InsertRange(self, rowIndex: int, dataGridViewRows: Set(DataGridViewRow)) -> None: ...
    def remove_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    def Remove(self, dataGridViewRow: DataGridViewRow) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def SharedRow(self, rowIndex: int) -> DataGridViewRow: ...


class DataGridViewRowContextMenuStripNeededEventArgs(EventArgs):
    def __init__(self, rowIndex: int): ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def RowIndex(self) -> int: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...


class DataGridViewRowContextMenuStripNeededEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowContextMenuStripNeededEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowContextMenuStripNeededEventArgs) -> None: ...


class DataGridViewRowDividerDoubleClickEventArgs(HandledMouseEventArgs):
    def __init__(self, rowIndex: int, e: HandledMouseEventArgs): ...
    @property
    def RowIndex(self) -> int: ...


class DataGridViewRowDividerDoubleClickEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowDividerDoubleClickEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowDividerDoubleClickEventArgs) -> None: ...


class DataGridViewRowErrorTextNeededEventArgs(EventArgs):
    @property
    def ErrorText(self) -> str: ...
    @property
    def RowIndex(self) -> int: ...
    @ErrorText.setter
    def ErrorText(self, value: str) -> None: ...


class DataGridViewRowErrorTextNeededEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowErrorTextNeededEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowErrorTextNeededEventArgs) -> None: ...


class DataGridViewRowEventArgs(EventArgs):
    def __init__(self, dataGridViewRow: DataGridViewRow): ...
    @property
    def Row(self) -> DataGridViewRow: ...


class DataGridViewRowEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowEventArgs) -> None: ...


class DataGridViewRowHeaderCell(DataGridViewHeaderCell):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    def GetInheritedContextMenuStrip(self, rowIndex: int) -> ContextMenuStrip: ...
    def GetInheritedStyle(self, inheritedCellStyle: DataGridViewCellStyle, rowIndex: int, includeColors: bool) -> DataGridViewCellStyle: ...
    def ToString(self) -> str: ...


class DataGridViewRowHeadersWidthSizeMode:
    EnableResizing = 0
    DisableResizing = 1
    AutoSizeToAllHeaders = 2
    AutoSizeToDisplayedHeaders = 3
    AutoSizeToFirstHeader = 4


class DataGridViewRowHeightInfoNeededEventArgs(EventArgs):
    @property
    def Height(self) -> int: ...
    @property
    def MinimumHeight(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @MinimumHeight.setter
    def MinimumHeight(self, value: int) -> None: ...


class DataGridViewRowHeightInfoNeededEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowHeightInfoNeededEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowHeightInfoNeededEventArgs) -> None: ...


class DataGridViewRowHeightInfoPushedEventArgs(HandledEventArgs):
    @property
    def Height(self) -> int: ...
    @property
    def MinimumHeight(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...


class DataGridViewRowHeightInfoPushedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowHeightInfoPushedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowHeightInfoPushedEventArgs) -> None: ...


class DataGridViewRowPostPaintEventArgs(EventArgs):
    def __init__(self, dataGridView: DataGridView, graphics: Graphics, clipBounds: Rectangle, rowBounds: Rectangle, rowIndex: int, rowState: DataGridViewElementStates, errorText: str, inheritedRowStyle: DataGridViewCellStyle, isFirstDisplayedRow: bool, isLastVisibleRow: bool): ...
    def DrawFocus(self, bounds: Rectangle, cellsPaintSelectionBackground: bool) -> None: ...
    @property
    def ClipBounds(self) -> Rectangle: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def InheritedRowStyle(self) -> DataGridViewCellStyle: ...
    @property
    def IsFirstDisplayedRow(self) -> bool: ...
    @property
    def IsLastVisibleRow(self) -> bool: ...
    @property
    def RowBounds(self) -> Rectangle: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def State(self) -> DataGridViewElementStates: ...
    def PaintCells(self, clipBounds: Rectangle, paintParts: DataGridViewPaintParts) -> None: ...
    def PaintCellsBackground(self, clipBounds: Rectangle, cellsPaintSelectionBackground: bool) -> None: ...
    def PaintCellsContent(self, clipBounds: Rectangle) -> None: ...
    @overload
    def PaintHeader(self, paintSelectionBackground: bool) -> None: ...
    @overload
    def PaintHeader(self, paintParts: DataGridViewPaintParts) -> None: ...
    @ClipBounds.setter
    def ClipBounds(self, value: Rectangle) -> None: ...


class DataGridViewRowPostPaintEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowPostPaintEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowPostPaintEventArgs) -> None: ...


class DataGridViewRowPrePaintEventArgs(HandledEventArgs):
    def __init__(self, dataGridView: DataGridView, graphics: Graphics, clipBounds: Rectangle, rowBounds: Rectangle, rowIndex: int, rowState: DataGridViewElementStates, errorText: str, inheritedRowStyle: DataGridViewCellStyle, isFirstDisplayedRow: bool, isLastVisibleRow: bool): ...
    def DrawFocus(self, bounds: Rectangle, cellsPaintSelectionBackground: bool) -> None: ...
    @property
    def ClipBounds(self) -> Rectangle: ...
    @property
    def ErrorText(self) -> str: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def InheritedRowStyle(self) -> DataGridViewCellStyle: ...
    @property
    def IsFirstDisplayedRow(self) -> bool: ...
    @property
    def IsLastVisibleRow(self) -> bool: ...
    @property
    def PaintParts(self) -> DataGridViewPaintParts: ...
    @property
    def RowBounds(self) -> Rectangle: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def State(self) -> DataGridViewElementStates: ...
    def PaintCells(self, clipBounds: Rectangle, paintParts: DataGridViewPaintParts) -> None: ...
    def PaintCellsBackground(self, clipBounds: Rectangle, cellsPaintSelectionBackground: bool) -> None: ...
    def PaintCellsContent(self, clipBounds: Rectangle) -> None: ...
    @overload
    def PaintHeader(self, paintSelectionBackground: bool) -> None: ...
    @overload
    def PaintHeader(self, paintParts: DataGridViewPaintParts) -> None: ...
    @ClipBounds.setter
    def ClipBounds(self, value: Rectangle) -> None: ...
    @PaintParts.setter
    def PaintParts(self, value: DataGridViewPaintParts) -> None: ...


class DataGridViewRowPrePaintEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowPrePaintEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowPrePaintEventArgs) -> None: ...


class DataGridViewRowsAddedEventArgs(EventArgs):
    def __init__(self, rowIndex: int, rowCount: int): ...
    @property
    def RowCount(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...


class DataGridViewRowsAddedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowsAddedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowsAddedEventArgs) -> None: ...


class DataGridViewRowsRemovedEventArgs(EventArgs):
    def __init__(self, rowIndex: int, rowCount: int): ...
    @property
    def RowCount(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...


class DataGridViewRowsRemovedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowsRemovedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowsRemovedEventArgs) -> None: ...


class DataGridViewRowStateChangedEventArgs(EventArgs):
    def __init__(self, dataGridViewRow: DataGridViewRow, stateChanged: DataGridViewElementStates): ...
    @property
    def Row(self) -> DataGridViewRow: ...
    @property
    def StateChanged(self) -> DataGridViewElementStates: ...


class DataGridViewRowStateChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewRowStateChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewRowStateChangedEventArgs) -> None: ...


class DataGridViewSelectedCellCollection(BaseCollection):
    def Clear(self) -> None: ...
    def Contains(self, dataGridViewCell: DataGridViewCell) -> bool: ...
    @overload
    def CopyTo(self, array: Set(DataGridViewCell), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DataGridViewCell: ...
    def Insert(self, index: int, dataGridViewCell: DataGridViewCell) -> None: ...


class DataGridViewSelectedColumnCollection(BaseCollection):
    def Clear(self) -> None: ...
    def Contains(self, dataGridViewColumn: DataGridViewColumn) -> bool: ...
    @overload
    def CopyTo(self, array: Set(DataGridViewColumn), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DataGridViewColumn: ...
    def Insert(self, index: int, dataGridViewColumn: DataGridViewColumn) -> None: ...


class DataGridViewSelectedRowCollection(BaseCollection):
    def Clear(self) -> None: ...
    def Contains(self, dataGridViewRow: DataGridViewRow) -> bool: ...
    @overload
    def CopyTo(self, array: Set(DataGridViewRow), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DataGridViewRow: ...
    def Insert(self, index: int, dataGridViewRow: DataGridViewRow) -> None: ...


class DataGridViewSelectionMode:
    CellSelect = 0
    FullRowSelect = 1
    FullColumnSelect = 2
    RowHeaderSelect = 3
    ColumnHeaderSelect = 4


class DataGridViewSortCompareEventArgs(HandledEventArgs):
    def __init__(self, dataGridViewColumn: DataGridViewColumn, cellValue1: Object, cellValue2: Object, rowIndex1: int, rowIndex2: int): ...
    @property
    def CellValue1(self) -> Object: ...
    @property
    def CellValue2(self) -> Object: ...
    @property
    def Column(self) -> DataGridViewColumn: ...
    @property
    def RowIndex1(self) -> int: ...
    @property
    def RowIndex2(self) -> int: ...
    @property
    def SortResult(self) -> int: ...
    @SortResult.setter
    def SortResult(self, value: int) -> None: ...


class DataGridViewSortCompareEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataGridViewSortCompareEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataGridViewSortCompareEventArgs) -> None: ...


class DataGridViewTextBoxCell(DataGridViewCell):
    def __init__(self): ...
    def Clone(self) -> Object: ...
    def DetachEditingControl(self) -> None: ...
    @property
    def FormattedValueType(self) -> Type: ...
    @property
    def MaxInputLength(self) -> int: ...
    @property
    def ValueType(self) -> Type: ...
    def InitializeEditingControl(self, rowIndex: int, initialFormattedValue: Object, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    def KeyEntersEditMode(self, e: KeyEventArgs) -> bool: ...
    def PositionEditingControl(self, setLocation: bool, setSize: bool, cellBounds: Rectangle, cellClip: Rectangle, cellStyle: DataGridViewCellStyle, singleVerticalBorderAdded: bool, singleHorizontalBorderAdded: bool, isFirstDisplayedColumn: bool, isFirstDisplayedRow: bool) -> None: ...
    @MaxInputLength.setter
    def MaxInputLength(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewTextBoxColumn(DataGridViewColumn):
    def __init__(self): ...
    @property
    def CellTemplate(self) -> DataGridViewCell: ...
    @property
    def MaxInputLength(self) -> int: ...
    @property
    def SortMode(self) -> DataGridViewColumnSortMode: ...
    @CellTemplate.setter
    def CellTemplate(self, value: DataGridViewCell) -> None: ...
    @MaxInputLength.setter
    def MaxInputLength(self, value: int) -> None: ...
    @SortMode.setter
    def SortMode(self, value: DataGridViewColumnSortMode) -> None: ...
    def ToString(self) -> str: ...


class DataGridViewTextBoxEditingControl(TextBox):
    def __init__(self): ...
    def ApplyCellStyleToEditingControl(self, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    def EditingControlWantsInputKey(self, keyData: Keys, dataGridViewWantsInputKey: bool) -> bool: ...
    @property
    def EditingControlDataGridView(self) -> DataGridView: ...
    @property
    def EditingControlFormattedValue(self) -> Object: ...
    @property
    def EditingControlRowIndex(self) -> int: ...
    @property
    def EditingControlValueChanged(self) -> bool: ...
    @property
    def EditingPanelCursor(self) -> Cursor: ...
    @property
    def RepositionEditingControlOnValueChange(self) -> bool: ...
    def GetEditingControlFormattedValue(self, context: DataGridViewDataErrorContexts) -> Object: ...
    def PrepareEditingControlForEdit(self, selectAll: bool) -> None: ...
    @EditingControlDataGridView.setter
    def EditingControlDataGridView(self, value: DataGridView) -> None: ...
    @EditingControlFormattedValue.setter
    def EditingControlFormattedValue(self, value: Object) -> None: ...
    @EditingControlRowIndex.setter
    def EditingControlRowIndex(self, value: int) -> None: ...
    @EditingControlValueChanged.setter
    def EditingControlValueChanged(self, value: bool) -> None: ...


class DataGridViewTopLeftHeaderCell(DataGridViewColumnHeaderCell):
    def __init__(self): ...
    def ToString(self) -> str: ...


class DataGridViewTriState:
    NotSet = 0
    True = 1
    False = 2


class DataObject(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, data: Object): ...
    @overload
    def __init__(self, format: str, data: Object): ...
    def ContainsAudio(self) -> bool: ...
    def ContainsFileDropList(self) -> bool: ...
    def ContainsImage(self) -> bool: ...
    @overload
    def ContainsText(self) -> bool: ...
    @overload
    def ContainsText(self, format: TextDataFormat) -> bool: ...
    def GetAudioStream(self) -> Stream: ...
    @overload
    def GetData(self, format: str) -> Object: ...
    @overload
    def GetData(self, format: Type) -> Object: ...
    @overload
    def GetData(self, format: str, autoConvert: bool) -> Object: ...
    @overload
    def GetDataPresent(self, format: Type) -> bool: ...
    @overload
    def GetDataPresent(self, format: str) -> bool: ...
    @overload
    def GetDataPresent(self, format: str, autoConvert: bool) -> bool: ...
    def GetFileDropList(self) -> StringCollection: ...
    @overload
    def GetFormats(self) -> Set(str): ...
    @overload
    def GetFormats(self, autoConvert: bool) -> Set(str): ...
    def GetImage(self) -> Image: ...
    @overload
    def GetText(self) -> str: ...
    @overload
    def GetText(self, format: TextDataFormat) -> str: ...
    @overload
    def SetAudio(self, audioBytes: Set(Byte)) -> None: ...
    @overload
    def SetAudio(self, audioStream: Stream) -> None: ...
    @overload
    def SetData(self, data: Object) -> None: ...
    @overload
    def SetData(self, format: str, data: Object) -> None: ...
    @overload
    def SetData(self, format: Type, data: Object) -> None: ...
    @overload
    def SetData(self, format: str, autoConvert: bool, data: Object) -> None: ...
    def SetFileDropList(self, filePaths: StringCollection) -> None: ...
    def SetImage(self, image: Image) -> None: ...
    @overload
    def SetText(self, textData: str) -> None: ...
    @overload
    def SetText(self, textData: str, format: TextDataFormat) -> None: ...


class DataSourceUpdateMode:
    OnValidation = 0
    OnPropertyChanged = 1
    Never = 2


class DateBoldEventArgs(EventArgs):
    @property
    def DaysToBold(self) -> Set(int): ...
    @property
    def Size(self) -> int: ...
    @property
    def StartDate(self) -> DateTime: ...
    @DaysToBold.setter
    def DaysToBold(self, value: Set(int)) -> None: ...


class DateBoldEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DateBoldEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DateBoldEventArgs) -> None: ...


class DateRangeEventArgs(EventArgs):
    def __init__(self, start: DateTime, end: DateTime): ...
    @property
    def End(self) -> DateTime: ...
    @property
    def Start(self) -> DateTime: ...


class DateRangeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DateRangeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DateRangeEventArgs) -> None: ...


class DateTimePicker(Control):
    def __init__(self): ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    def add_CloseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    def add_DropDown(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    def add_FormatChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def CalendarFont(self) -> Font: ...
    @property
    def CalendarForeColor(self) -> Color: ...
    @property
    def CalendarMonthBackground(self) -> Color: ...
    @property
    def CalendarTitleBackColor(self) -> Color: ...
    @property
    def CalendarTitleForeColor(self) -> Color: ...
    @property
    def CalendarTrailingForeColor(self) -> Color: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def CustomFormat(self) -> str: ...
    @property
    def DropDownAlign(self) -> LeftRightAlignment: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Format(self) -> DateTimePickerFormat: ...
    @property
    def MaxDate(self) -> DateTime: ...
    @property
    def MaximumDateTime() -> DateTime: ...
    @property
    def MinDate(self) -> DateTime: ...
    @property
    def MinimumDateTime() -> DateTime: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowCheckBox(self) -> bool: ...
    @property
    def ShowUpDown(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def Value(self) -> DateTime: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_CloseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    def remove_DropDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    def remove_FormatChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @CalendarFont.setter
    def CalendarFont(self, value: Font) -> None: ...
    @CalendarForeColor.setter
    def CalendarForeColor(self, value: Color) -> None: ...
    @CalendarMonthBackground.setter
    def CalendarMonthBackground(self, value: Color) -> None: ...
    @CalendarTitleBackColor.setter
    def CalendarTitleBackColor(self, value: Color) -> None: ...
    @CalendarTitleForeColor.setter
    def CalendarTitleForeColor(self, value: Color) -> None: ...
    @CalendarTrailingForeColor.setter
    def CalendarTrailingForeColor(self, value: Color) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...
    @CustomFormat.setter
    def CustomFormat(self, value: str) -> None: ...
    @DropDownAlign.setter
    def DropDownAlign(self, value: LeftRightAlignment) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Format.setter
    def Format(self, value: DateTimePickerFormat) -> None: ...
    @MaxDate.setter
    def MaxDate(self, value: DateTime) -> None: ...
    @MinDate.setter
    def MinDate(self, value: DateTime) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @ShowCheckBox.setter
    def ShowCheckBox(self, value: bool) -> None: ...
    @ShowUpDown.setter
    def ShowUpDown(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: DateTime) -> None: ...
    def ToString(self) -> str: ...


class DateTimePickerAccessibleObject:
    def __init__(self, owner: DateTimePicker): ...
    @property
    def KeyboardShortcut(self) -> str: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...
    @property
    def Value(self) -> str: ...


class DateTimePickerFormat:
    Long = 1
    Short = 2
    Time = 4
    Custom = 8


class Day:
    Monday = 0
    Tuesday = 1
    Wednesday = 2
    Thursday = 3
    Friday = 4
    Saturday = 5
    Sunday = 6
    Default = 7


class DialogResult:
    #None = 0
    OK = 1
    Cancel = 2
    Abort = 3
    Retry = 4
    Ignore = 5
    Yes = 6
    No = 7


class DockingAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dockingBehavior: DockingBehavior): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DockingBehavior(self) -> DockingBehavior: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class DockingBehavior:
    Never = 0
    Ask = 1
    AutoDock = 2


class DockPaddingEdges(Object):
    def Equals(self, other: Object) -> bool: ...
    @property
    def All(self) -> int: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Left(self) -> int: ...
    @property
    def Right(self) -> int: ...
    @property
    def Top(self) -> int: ...
    def GetHashCode(self) -> int: ...
    @All.setter
    def All(self, value: int) -> None: ...
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Right.setter
    def Right(self, value: int) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class DockPaddingEdgesConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class DockStyle:
    #None = 0
    Top = 1
    Bottom = 2
    Left = 3
    Right = 4
    Fill = 5


class DomainItemAccessibleObject(AccessibleObject):
    def __init__(self, name: str, parent: AccessibleObject): ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> AccessibleObject: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...
    @property
    def Value(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class DomainUpDown(UpDownBase):
    def __init__(self): ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    def add_SelectedItemChanged(self, value: EventHandler) -> None: ...
    def DownButton(self) -> None: ...
    @property
    def Items(self) -> DomainUpDownItemCollection: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedItem(self) -> Object: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def Wrap(self) -> bool: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedItemChanged(self, value: EventHandler) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedItem.setter
    def SelectedItem(self, value: Object) -> None: ...
    @Sorted.setter
    def Sorted(self, value: bool) -> None: ...
    @Wrap.setter
    def Wrap(self, value: bool) -> None: ...
    def ToString(self) -> str: ...
    def UpButton(self) -> None: ...


class DomainUpDownAccessibleObject:
    def __init__(self, owner: Control): ...
    @property
    def Name(self) -> str: ...
    @property
    def Role(self) -> AccessibleRole: ...
    def GetChild(self, index: int) -> AccessibleObject: ...
    def GetChildCount(self) -> int: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class DomainUpDownItemCollection(ArrayList):
    def Add(self, item: Object) -> int: ...
    @property
    def Item(self, index: int) -> Object: ...
    def Insert(self, index: int, item: Object) -> None: ...
    def Remove(self, item: Object) -> None: ...
    def RemoveAt(self, item: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...


class DpiChangedEventArgs(CancelEventArgs):
    @property
    def DeviceDpiNew(self) -> int: ...
    @property
    def DeviceDpiOld(self) -> int: ...
    @property
    def SuggestedRectangle(self) -> Rectangle: ...
    def ToString(self) -> str: ...


class DpiChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DpiChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DpiChangedEventArgs) -> None: ...


class DragAction:
    Continue = 0
    Drop = 1
    Cancel = 2


class DragDropEffects:
    #None = 0
    Copy = 1
    Move = 2
    Link = 4
    Scroll = -2147483648
    All = -2147483645


class DragEventArgs(EventArgs):
    def __init__(self, data: IDataObject, keyState: int, x: int, y: int, allowedEffect: DragDropEffects, effect: DragDropEffects): ...
    @property
    def AllowedEffect(self) -> DragDropEffects: ...
    @property
    def Data(self) -> IDataObject: ...
    @property
    def Effect(self) -> DragDropEffects: ...
    @property
    def KeyState(self) -> int: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @Effect.setter
    def Effect(self, value: DragDropEffects) -> None: ...


class DragEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DragEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DragEventArgs) -> None: ...


class DrawItemEventArgs(EventArgs):
    @overload
    def __init__(self, graphics: Graphics, font: Font, rect: Rectangle, index: int, state: DrawItemState): ...
    @overload
    def __init__(self, graphics: Graphics, font: Font, rect: Rectangle, index: int, state: DrawItemState, foreColor: Color, backColor: Color): ...
    def DrawBackground(self) -> None: ...
    def DrawFocusRectangle(self) -> None: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Index(self) -> int: ...
    @property
    def State(self) -> DrawItemState: ...


class DrawItemEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DrawItemEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DrawItemEventArgs) -> None: ...


class DrawItemState:
    #None = 0
    Selected = 1
    Grayed = 2
    Disabled = 4
    Checked = 8
    Focus = 16
    Default = 32
    HotLight = 64
    Inactive = 128
    NoAccelerator = 256
    NoFocusRect = 512
    ComboBoxEdit = 4096


class DrawListViewColumnHeaderEventArgs(EventArgs):
    def __init__(self, graphics: Graphics, bounds: Rectangle, columnIndex: int, header: ColumnHeader, state: ListViewItemStates, foreColor: Color, backColor: Color, font: Font): ...
    def DrawBackground(self) -> None: ...
    @overload
    def DrawText(self) -> None: ...
    @overload
    def DrawText(self, flags: TextFormatFlags) -> None: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def DrawDefault(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Header(self) -> ColumnHeader: ...
    @property
    def State(self) -> ListViewItemStates: ...
    @DrawDefault.setter
    def DrawDefault(self, value: bool) -> None: ...


class DrawListViewColumnHeaderEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DrawListViewColumnHeaderEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DrawListViewColumnHeaderEventArgs) -> None: ...


class DrawListViewItemEventArgs(EventArgs):
    def __init__(self, graphics: Graphics, item: ListViewItem, bounds: Rectangle, itemIndex: int, state: ListViewItemStates): ...
    def DrawBackground(self) -> None: ...
    def DrawFocusRectangle(self) -> None: ...
    @overload
    def DrawText(self) -> None: ...
    @overload
    def DrawText(self, flags: TextFormatFlags) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def DrawDefault(self) -> bool: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def ItemIndex(self) -> int: ...
    @property
    def State(self) -> ListViewItemStates: ...
    @DrawDefault.setter
    def DrawDefault(self, value: bool) -> None: ...


class DrawListViewItemEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DrawListViewItemEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DrawListViewItemEventArgs) -> None: ...


class DrawListViewSubItemEventArgs(EventArgs):
    def __init__(self, graphics: Graphics, bounds: Rectangle, item: ListViewItem, subItem: ListViewSubItem, itemIndex: int, columnIndex: int, header: ColumnHeader, itemState: ListViewItemStates): ...
    def DrawBackground(self) -> None: ...
    def DrawFocusRectangle(self, bounds: Rectangle) -> None: ...
    @overload
    def DrawText(self) -> None: ...
    @overload
    def DrawText(self, flags: TextFormatFlags) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def DrawDefault(self) -> bool: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Header(self) -> ColumnHeader: ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def ItemIndex(self) -> int: ...
    @property
    def ItemState(self) -> ListViewItemStates: ...
    @property
    def SubItem(self) -> ListViewSubItem: ...
    @DrawDefault.setter
    def DrawDefault(self, value: bool) -> None: ...


class DrawListViewSubItemEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DrawListViewSubItemEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DrawListViewSubItemEventArgs) -> None: ...


class DrawMode:
    Normal = 0
    OwnerDrawFixed = 1
    OwnerDrawVariable = 2


class DrawToolTipEventArgs(EventArgs):
    def __init__(self, graphics: Graphics, associatedWindow: IWin32Window, associatedControl: Control, bounds: Rectangle, toolTipText: str, backColor: Color, foreColor: Color, font: Font): ...
    def DrawBackground(self) -> None: ...
    def DrawBorder(self) -> None: ...
    @overload
    def DrawText(self) -> None: ...
    @overload
    def DrawText(self, flags: TextFormatFlags) -> None: ...
    @property
    def AssociatedControl(self) -> Control: ...
    @property
    def AssociatedWindow(self) -> IWin32Window: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Font(self) -> Font: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def ToolTipText(self) -> str: ...


class DrawToolTipEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DrawToolTipEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DrawToolTipEventArgs) -> None: ...


class DrawTreeNodeEventArgs(EventArgs):
    def __init__(self, graphics: Graphics, node: TreeNode, bounds: Rectangle, state: TreeNodeStates): ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def DrawDefault(self) -> bool: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Node(self) -> TreeNode: ...
    @property
    def State(self) -> TreeNodeStates: ...
    @DrawDefault.setter
    def DrawDefault(self, value: bool) -> None: ...


class DrawTreeNodeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DrawTreeNodeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DrawTreeNodeEventArgs) -> None: ...


class ErrorBlinkStyle:
    BlinkIfDifferentError = 0
    AlwaysBlink = 1
    NeverBlink = 2


class ErrorIconAlignment:
    TopLeft = 0
    TopRight = 1
    MiddleLeft = 2
    MiddleRight = 3
    BottomLeft = 4
    BottomRight = 5


class ErrorProvider(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parentControl: ContainerControl): ...
    @overload
    def __init__(self, container: IContainer): ...
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    def BindToDataAndErrors(self, newDataSource: Object, newDataMember: str) -> None: ...
    def CanExtend(self, extendee: Object) -> bool: ...
    def Clear(self) -> None: ...
    @property
    def BlinkRate(self) -> int: ...
    @property
    def BlinkStyle(self) -> ErrorBlinkStyle: ...
    @property
    def ContainerControl(self) -> ContainerControl: ...
    @property
    def DataMember(self) -> str: ...
    @property
    def DataSource(self) -> Object: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def RightToLeft(self) -> bool: ...
    @property
    def Tag(self) -> Object: ...
    def GetError(self, control: Control) -> str: ...
    def GetIconAlignment(self, control: Control) -> ErrorIconAlignment: ...
    def GetIconPadding(self, control: Control) -> int: ...
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @BlinkRate.setter
    def BlinkRate(self, value: int) -> None: ...
    @BlinkStyle.setter
    def BlinkStyle(self, value: ErrorBlinkStyle) -> None: ...
    @ContainerControl.setter
    def ContainerControl(self, value: ContainerControl) -> None: ...
    @DataMember.setter
    def DataMember(self, value: str) -> None: ...
    @DataSource.setter
    def DataSource(self, value: Object) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: bool) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    def SetError(self, control: Control, value: str) -> None: ...
    def SetIconAlignment(self, control: Control, value: ErrorIconAlignment) -> None: ...
    def SetIconPadding(self, control: Control, padding: int) -> None: ...
    def UpdateBinding(self) -> None: ...


class FeatureSupport(Object):
    @overload
    def GetVersionPresent(self, feature: Object) -> Version: ...
    @overload
    def GetVersionPresent(featureClassName: str, featureConstName: str) -> Version: ...
    @overload
    def IsPresent(self, feature: Object) -> bool: ...
    @overload
    def IsPresent(featureClassName: str, featureConstName: str) -> bool: ...
    @overload
    def IsPresent(self, feature: Object, minimumVersion: Version) -> bool: ...
    @overload
    def IsPresent(featureClassName: str, featureConstName: str, minimumVersion: Version) -> bool: ...


class FileDialog(CommonDialog):
    def add_FileOk(self, value: CancelEventHandler) -> None: ...
    @property
    def AddExtension(self) -> bool: ...
    @property
    def AutoUpgradeEnabled(self) -> bool: ...
    @property
    def CheckFileExists(self) -> bool: ...
    @property
    def CheckPathExists(self) -> bool: ...
    @property
    def CustomPlaces(self) -> FileDialogCustomPlacesCollection: ...
    @property
    def DefaultExt(self) -> str: ...
    @property
    def DereferenceLinks(self) -> bool: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FileNames(self) -> Set(str): ...
    @property
    def Filter(self) -> str: ...
    @property
    def FilterIndex(self) -> int: ...
    @property
    def InitialDirectory(self) -> str: ...
    @property
    def RestoreDirectory(self) -> bool: ...
    @property
    def ShowHelp(self) -> bool: ...
    @property
    def SupportMultiDottedExtensions(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def ValidateNames(self) -> bool: ...
    def remove_FileOk(self, value: CancelEventHandler) -> None: ...
    def Reset(self) -> None: ...
    @AddExtension.setter
    def AddExtension(self, value: bool) -> None: ...
    @AutoUpgradeEnabled.setter
    def AutoUpgradeEnabled(self, value: bool) -> None: ...
    @CheckFileExists.setter
    def CheckFileExists(self, value: bool) -> None: ...
    @CheckPathExists.setter
    def CheckPathExists(self, value: bool) -> None: ...
    @DefaultExt.setter
    def DefaultExt(self, value: str) -> None: ...
    @DereferenceLinks.setter
    def DereferenceLinks(self, value: bool) -> None: ...
    @FileName.setter
    def FileName(self, value: str) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @FilterIndex.setter
    def FilterIndex(self, value: int) -> None: ...
    @InitialDirectory.setter
    def InitialDirectory(self, value: str) -> None: ...
    @RestoreDirectory.setter
    def RestoreDirectory(self, value: bool) -> None: ...
    @ShowHelp.setter
    def ShowHelp(self, value: bool) -> None: ...
    @SupportMultiDottedExtensions.setter
    def SupportMultiDottedExtensions(self, value: bool) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @ValidateNames.setter
    def ValidateNames(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class FileDialogCustomPlace(Object):
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, knownFolderGuid: Guid): ...
    @property
    def KnownFolderGuid(self) -> Guid: ...
    @property
    def Path(self) -> str: ...
    @KnownFolderGuid.setter
    def KnownFolderGuid(self, value: Guid) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class FileDialogCustomPlacesCollection:
    def __init__(self): ...
    @overload
    def Add(self, path: str) -> None: ...
    @overload
    def Add(self, knownFolderGuid: Guid) -> None: ...


class FixedPanel:
    #None = 0
    Panel1 = 1
    Panel2 = 2


class FlatButtonAppearance(Object):
    @property
    def BorderColor(self) -> Color: ...
    @property
    def BorderSize(self) -> int: ...
    @property
    def CheckedBackColor(self) -> Color: ...
    @property
    def MouseDownBackColor(self) -> Color: ...
    @property
    def MouseOverBackColor(self) -> Color: ...
    @BorderColor.setter
    def BorderColor(self, value: Color) -> None: ...
    @BorderSize.setter
    def BorderSize(self, value: int) -> None: ...
    @CheckedBackColor.setter
    def CheckedBackColor(self, value: Color) -> None: ...
    @MouseDownBackColor.setter
    def MouseDownBackColor(self, value: Color) -> None: ...
    @MouseOverBackColor.setter
    def MouseOverBackColor(self, value: Color) -> None: ...


class FlatStyle:
    Flat = 0
    Popup = 1
    Standard = 2
    System = 3


class FlowDirection:
    LeftToRight = 0
    TopDown = 1
    RightToLeft = 2
    BottomUp = 3


class FlowLayoutPanel(Panel):
    def __init__(self): ...
    @property
    def FlowDirection(self) -> FlowDirection: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def WrapContents(self) -> bool: ...
    def GetFlowBreak(self, control: Control) -> bool: ...
    @FlowDirection.setter
    def FlowDirection(self, value: FlowDirection) -> None: ...
    @WrapContents.setter
    def WrapContents(self, value: bool) -> None: ...
    def SetFlowBreak(self, control: Control, value: bool) -> None: ...


class FlowLayoutSettings(LayoutSettings):
    @property
    def FlowDirection(self) -> FlowDirection: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def WrapContents(self) -> bool: ...
    def GetFlowBreak(self, child: Object) -> bool: ...
    @FlowDirection.setter
    def FlowDirection(self, value: FlowDirection) -> None: ...
    @WrapContents.setter
    def WrapContents(self, value: bool) -> None: ...
    def SetFlowBreak(self, child: Object, value: bool) -> None: ...


class FolderBrowserDialog(CommonDialog):
    def __init__(self): ...
    @overload
    def add_HelpRequest(self, value: EventHandler) -> None: ...
    @property
    def AutoUpgradeEnabled(self) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def RootFolder(self) -> SpecialFolder: ...
    @property
    def SelectedPath(self) -> str: ...
    @property
    def ShowNewFolderButton(self) -> bool: ...
    @property
    def UseDescriptionForTitle(self) -> bool: ...
    @overload
    def remove_HelpRequest(self, value: EventHandler) -> None: ...
    def Reset(self) -> None: ...
    @AutoUpgradeEnabled.setter
    def AutoUpgradeEnabled(self, value: bool) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @RootFolder.setter
    def RootFolder(self, value: SpecialFolder) -> None: ...
    @SelectedPath.setter
    def SelectedPath(self, value: str) -> None: ...
    @ShowNewFolderButton.setter
    def ShowNewFolderButton(self, value: bool) -> None: ...
    @UseDescriptionForTitle.setter
    def UseDescriptionForTitle(self, value: bool) -> None: ...


class FontDialog(CommonDialog):
    def __init__(self): ...
    def add_Apply(self, value: EventHandler) -> None: ...
    @property
    def AllowScriptChange(self) -> bool: ...
    @property
    def AllowSimulations(self) -> bool: ...
    @property
    def AllowVectorFonts(self) -> bool: ...
    @property
    def AllowVerticalFonts(self) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def FixedPitchOnly(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def FontMustExist(self) -> bool: ...
    @property
    def MaxSize(self) -> int: ...
    @property
    def MinSize(self) -> int: ...
    @property
    def ScriptsOnly(self) -> bool: ...
    @property
    def ShowApply(self) -> bool: ...
    @property
    def ShowColor(self) -> bool: ...
    @property
    def ShowEffects(self) -> bool: ...
    @property
    def ShowHelp(self) -> bool: ...
    def remove_Apply(self, value: EventHandler) -> None: ...
    def Reset(self) -> None: ...
    @AllowScriptChange.setter
    def AllowScriptChange(self, value: bool) -> None: ...
    @AllowSimulations.setter
    def AllowSimulations(self, value: bool) -> None: ...
    @AllowVectorFonts.setter
    def AllowVectorFonts(self, value: bool) -> None: ...
    @AllowVerticalFonts.setter
    def AllowVerticalFonts(self, value: bool) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @FixedPitchOnly.setter
    def FixedPitchOnly(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @FontMustExist.setter
    def FontMustExist(self, value: bool) -> None: ...
    @MaxSize.setter
    def MaxSize(self, value: int) -> None: ...
    @MinSize.setter
    def MinSize(self, value: int) -> None: ...
    @ScriptsOnly.setter
    def ScriptsOnly(self, value: bool) -> None: ...
    @ShowApply.setter
    def ShowApply(self, value: bool) -> None: ...
    @ShowColor.setter
    def ShowColor(self, value: bool) -> None: ...
    @ShowEffects.setter
    def ShowEffects(self, value: bool) -> None: ...
    @ShowHelp.setter
    def ShowHelp(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class Form(ContainerControl):
    def __init__(self): ...
    def Activate(self) -> None: ...
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    def add_Closed(self, value: EventHandler) -> None: ...
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    def add_Deactivate(self, value: EventHandler) -> None: ...
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    def add_MenuStart(self, value: EventHandler) -> None: ...
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    def Close(self) -> None: ...
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @property
    def ActiveForm() -> Form: ...
    @property
    def ActiveMdiChild(self) -> Form: ...
    @property
    def AllowTransparency(self) -> bool: ...
    @property
    def AutoScale(self) -> bool: ...
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def CancelButton(self) -> IButtonControl: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def ControlBox(self) -> bool: ...
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @property
    def DesktopLocation(self) -> Point: ...
    @property
    def DialogResult(self) -> DialogResult: ...
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @property
    def HelpButton(self) -> bool: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def IsMdiChild(self) -> bool: ...
    @property
    def IsMdiContainer(self) -> bool: ...
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @property
    def KeyPreview(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximizeBox(self) -> bool: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MdiChildren(self) -> Set(Form): ...
    @property
    def MdiParent(self) -> Form: ...
    @property
    def MinimizeBox(self) -> bool: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Modal(self) -> bool: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OwnedForms(self) -> Set(Form): ...
    @property
    def Owner(self) -> Form: ...
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowIcon(self) -> bool: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopMost(self) -> bool: ...
    @property
    def TransparencyKey(self) -> Color: ...
    @property
    def WindowState(self) -> FormWindowState: ...
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    def remove_Closed(self, value: EventHandler) -> None: ...
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @DesktopBounds.setter
    def DesktopBounds(self, value: Rectangle) -> None: ...
    @DesktopLocation.setter
    def DesktopLocation(self, value: Point) -> None: ...
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: MenuStrip) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MdiParent.setter
    def MdiParent(self, value: Form) -> None: ...
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Owner.setter
    def Owner(self, value: Form) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @ShowIcon.setter
    def ShowIcon(self, value: bool) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    def ToString(self) -> str: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class Format(Object):
    def __init__(self, name: str, id: int): ...
    @property
    def Id(self) -> int: ...
    @property
    def Name(self) -> str: ...


class FormBorderStyle:
    #None = 0
    FixedSingle = 1
    Fixed3D = 2
    FixedDialog = 3
    Sizable = 4
    FixedToolWindow = 5
    SizableToolWindow = 6


class FormClosedEventArgs(EventArgs):
    def __init__(self, closeReason: CloseReason): ...
    @property
    def CloseReason(self) -> CloseReason: ...


class FormClosedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: FormClosedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: FormClosedEventArgs) -> None: ...


class FormClosingEventArgs(CancelEventArgs):
    def __init__(self, closeReason: CloseReason, cancel: bool): ...
    @property
    def CloseReason(self) -> CloseReason: ...


class FormClosingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: FormClosingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: FormClosingEventArgs) -> None: ...


class FormCollection(ReadOnlyCollectionBase):
    def __init__(self): ...
    @property
    def Item(self, name: str) -> Form: ...
    @property
    def Item(self, index: int) -> Form: ...


class FormStartPosition:
    Manual = 0
    CenterScreen = 1
    WindowsDefaultLocation = 2
    WindowsDefaultBounds = 3
    CenterParent = 4


class FormWindowState:
    Normal = 0
    Minimized = 1
    Maximized = 2


class FrameStyle:
    Dashed = 0
    Thick = 1


class GetChildAtPointSkip:
    #None = 0
    Invisible = 1
    Disabled = 2
    Transparent = 4


class GiveFeedbackEventArgs(EventArgs):
    def __init__(self, effect: DragDropEffects, useDefaultCursors: bool): ...
    @property
    def Effect(self) -> DragDropEffects: ...
    @property
    def UseDefaultCursors(self) -> bool: ...
    @UseDefaultCursors.setter
    def UseDefaultCursors(self, value: bool) -> None: ...


class GiveFeedbackEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GiveFeedbackEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GiveFeedbackEventArgs) -> None: ...


class GridItem(Object):
    @property
    def Expandable(self) -> bool: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def GridItems(self) -> GridItemCollection: ...
    @property
    def GridItemType(self) -> GridItemType: ...
    @property
    def Label(self) -> str: ...
    @property
    def Parent(self) -> GridItem: ...
    @property
    def PropertyDescriptor(self) -> PropertyDescriptor: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Value(self) -> Object: ...
    def Select(self) -> bool: ...
    @Expanded.setter
    def Expanded(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...


class GridItemCollection(Object):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> GridItem: ...
    @property
    def Item(self, label: str) -> GridItem: ...
    def GetEnumerator(self) -> IEnumerator: ...


class GridItemType:
    Property = 0
    Category = 1
    ArrayValue = 2
    Root = 3


class GroupBox(Control):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class GroupBoxRenderer(Object):
    @overload
    def DrawGroupBox(g: Graphics, bounds: Rectangle, state: GroupBoxState) -> None: ...
    @overload
    def DrawGroupBox(g: Graphics, bounds: Rectangle, groupBoxText: str, font: Font, state: GroupBoxState) -> None: ...
    @overload
    def DrawGroupBox(g: Graphics, bounds: Rectangle, groupBoxText: str, font: Font, textColor: Color, state: GroupBoxState) -> None: ...
    @overload
    def DrawGroupBox(g: Graphics, bounds: Rectangle, groupBoxText: str, font: Font, flags: TextFormatFlags, state: GroupBoxState) -> None: ...
    @overload
    def DrawGroupBox(g: Graphics, bounds: Rectangle, groupBoxText: str, font: Font, textColor: Color, flags: TextFormatFlags, state: GroupBoxState) -> None: ...
    def DrawParentBackground(g: Graphics, bounds: Rectangle, childControl: Control) -> None: ...
    @property
    def RenderMatchingApplicationState() -> bool: ...
    def IsBackgroundPartiallyTransparent(state: GroupBoxState) -> bool: ...
    @RenderMatchingApplicationState.setter
    def RenderMatchingApplicationState(value: bool) -> None: ...


class HandledMouseEventArgs(MouseEventArgs):
    @overload
    def __init__(self, button: MouseButtons, clicks: int, x: int, y: int, delta: int): ...
    @overload
    def __init__(self, button: MouseButtons, clicks: int, x: int, y: int, delta: int, defaultHandledValue: bool): ...
    @property
    def Handled(self) -> bool: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class Help(Object):
    @overload
    def ShowHelp(parent: Control, url: str) -> None: ...
    @overload
    def ShowHelp(parent: Control, url: str, navigator: HelpNavigator) -> None: ...
    @overload
    def ShowHelp(parent: Control, url: str, keyword: str) -> None: ...
    @overload
    def ShowHelp(parent: Control, url: str, command: HelpNavigator, parameter: Object) -> None: ...
    def ShowHelpIndex(parent: Control, url: str) -> None: ...
    def ShowPopup(parent: Control, caption: str, location: Point) -> None: ...


class HelpEventArgs(EventArgs):
    def __init__(self, mousePos: Point): ...
    @property
    def Handled(self) -> bool: ...
    @property
    def MousePos(self) -> Point: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class HelpEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, hlpevent: HelpEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, hlpevent: HelpEventArgs) -> None: ...


class HelpNavigator:
    Topic = -2147483647
    TableOfContents = -2147483646
    Index = -2147483645
    Find = -2147483644
    AssociateIndex = -2147483643
    KeywordIndex = -2147483642
    TopicId = -2147483641


class HelpProvider(Component):
    def __init__(self): ...
    def CanExtend(self, target: Object) -> bool: ...
    @property
    def HelpNamespace(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    def GetHelpKeyword(self, ctl: Control) -> str: ...
    def GetHelpNavigator(self, ctl: Control) -> HelpNavigator: ...
    def GetHelpString(self, ctl: Control) -> str: ...
    def GetShowHelp(self, ctl: Control) -> bool: ...
    def ResetShowHelp(self, ctl: Control) -> None: ...
    @HelpNamespace.setter
    def HelpNamespace(self, value: str) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    def SetHelpKeyword(self, ctl: Control, keyword: str) -> None: ...
    def SetHelpNavigator(self, ctl: Control, navigator: HelpNavigator) -> None: ...
    def SetHelpString(self, ctl: Control, helpString: str) -> None: ...
    def SetShowHelp(self, ctl: Control, value: bool) -> None: ...
    def ToString(self) -> str: ...


class HighDpiMode:
    DpiUnaware = 0
    SystemAware = 1
    PerMonitor = 2
    PerMonitorV2 = 3
    DpiUnawareGdiScaled = 4


class HitArea:
    Nowhere = 0
    TitleBackground = 1
    TitleMonth = 2
    TitleYear = 3
    NextMonthButton = 4
    PrevMonthButton = 5
    CalendarBackground = 6
    Date = 7
    NextMonthDate = 8
    PrevMonthDate = 9
    DayOfWeek = 10
    WeekNumbers = 11
    TodayLink = 12


class HitTestInfo(Object):
    def Equals(self, value: Object) -> bool: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def ColumnX(self) -> int: ...
    @property
    def RowIndex(self) -> int: ...
    @property
    def RowY(self) -> int: ...
    @property
    def Type(self) -> DataGridViewHitTestType: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class HitTestInfo(Object):
    @property
    def HitArea(self) -> HitArea: ...
    @property
    def Point(self) -> Point: ...
    @property
    def Time(self) -> DateTime: ...


class HorizontalAlignment:
    Left = 0
    Right = 1
    Center = 2


class HScrollBar(ScrollBar):
    def __init__(self): ...


class HScrollProperties(ScrollProperties):
    def __init__(self, container: ScrollableControl): ...


class HtmlDocument(Object):
    def add_Click(self, value: HtmlElementEventHandler) -> None: ...
    def add_ContextMenuShowing(self, value: HtmlElementEventHandler) -> None: ...
    def add_Focusing(self, value: HtmlElementEventHandler) -> None: ...
    def add_LosingFocus(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseDown(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseLeave(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseMove(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseOver(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseUp(self, value: HtmlElementEventHandler) -> None: ...
    def add_Stop(self, value: HtmlElementEventHandler) -> None: ...
    def AttachEventHandler(self, eventName: str, eventHandler: EventHandler) -> None: ...
    def CreateElement(self, elementTag: str) -> HtmlElement: ...
    def DetachEventHandler(self, eventName: str, eventHandler: EventHandler) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def ExecCommand(self, command: str, showUI: bool, value: Object) -> None: ...
    def Focus(self) -> None: ...
    @property
    def ActiveElement(self) -> HtmlElement: ...
    @property
    def ActiveLinkColor(self) -> Color: ...
    @property
    def All(self) -> HtmlElementCollection: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def Body(self) -> HtmlElement: ...
    @property
    def Cookie(self) -> str: ...
    @property
    def DefaultEncoding(self) -> str: ...
    @property
    def Domain(self) -> str: ...
    @property
    def DomDocument(self) -> Object: ...
    @property
    def Encoding(self) -> str: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Forms(self) -> HtmlElementCollection: ...
    @property
    def Images(self) -> HtmlElementCollection: ...
    @property
    def LinkColor(self) -> Color: ...
    @property
    def Links(self) -> HtmlElementCollection: ...
    @property
    def RightToLeft(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def Url(self) -> Uri: ...
    @property
    def VisitedLinkColor(self) -> Color: ...
    @property
    def Window(self) -> HtmlWindow: ...
    def GetElementById(self, id: str) -> HtmlElement: ...
    def GetElementFromPoint(self, point: Point) -> HtmlElement: ...
    def GetElementsByTagName(self, tagName: str) -> HtmlElementCollection: ...
    def GetHashCode(self) -> int: ...
    @overload
    def InvokeScript(self, scriptName: str) -> Object: ...
    @overload
    def InvokeScript(self, scriptName: str, args: Set(Object)) -> Object: ...
    def op_Equality(left: HtmlDocument, right: HtmlDocument) -> bool: ...
    def op_Inequality(left: HtmlDocument, right: HtmlDocument) -> bool: ...
    def OpenNew(self, replaceInHistory: bool) -> HtmlDocument: ...
    def remove_Click(self, value: HtmlElementEventHandler) -> None: ...
    def remove_ContextMenuShowing(self, value: HtmlElementEventHandler) -> None: ...
    def remove_Focusing(self, value: HtmlElementEventHandler) -> None: ...
    def remove_LosingFocus(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseDown(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseLeave(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseMove(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseOver(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseUp(self, value: HtmlElementEventHandler) -> None: ...
    def remove_Stop(self, value: HtmlElementEventHandler) -> None: ...
    @ActiveLinkColor.setter
    def ActiveLinkColor(self, value: Color) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @Cookie.setter
    def Cookie(self, value: str) -> None: ...
    @Domain.setter
    def Domain(self, value: str) -> None: ...
    @Encoding.setter
    def Encoding(self, value: str) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @LinkColor.setter
    def LinkColor(self, value: Color) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: bool) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @VisitedLinkColor.setter
    def VisitedLinkColor(self, value: Color) -> None: ...
    def Write(self, text: str) -> None: ...


class HtmlElement(Object):
    def add_Click(self, value: HtmlElementEventHandler) -> None: ...
    def add_DoubleClick(self, value: HtmlElementEventHandler) -> None: ...
    def add_Drag(self, value: HtmlElementEventHandler) -> None: ...
    def add_DragEnd(self, value: HtmlElementEventHandler) -> None: ...
    def add_DragLeave(self, value: HtmlElementEventHandler) -> None: ...
    def add_DragOver(self, value: HtmlElementEventHandler) -> None: ...
    def add_Focusing(self, value: HtmlElementEventHandler) -> None: ...
    def add_GotFocus(self, value: HtmlElementEventHandler) -> None: ...
    def add_KeyDown(self, value: HtmlElementEventHandler) -> None: ...
    def add_KeyPress(self, value: HtmlElementEventHandler) -> None: ...
    def add_KeyUp(self, value: HtmlElementEventHandler) -> None: ...
    def add_LosingFocus(self, value: HtmlElementEventHandler) -> None: ...
    def add_LostFocus(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseDown(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseEnter(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseLeave(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseMove(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseOver(self, value: HtmlElementEventHandler) -> None: ...
    def add_MouseUp(self, value: HtmlElementEventHandler) -> None: ...
    def AppendChild(self, newElement: HtmlElement) -> HtmlElement: ...
    def AttachEventHandler(self, eventName: str, eventHandler: EventHandler) -> None: ...
    def DetachEventHandler(self, eventName: str, eventHandler: EventHandler) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def All(self) -> HtmlElementCollection: ...
    @property
    def CanHaveChildren(self) -> bool: ...
    @property
    def Children(self) -> HtmlElementCollection: ...
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @property
    def Document(self) -> HtmlDocument: ...
    @property
    def DomElement(self) -> Object: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FirstChild(self) -> HtmlElement: ...
    @property
    def Id(self) -> str: ...
    @property
    def InnerHtml(self) -> str: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NextSibling(self) -> HtmlElement: ...
    @property
    def OffsetParent(self) -> HtmlElement: ...
    @property
    def OffsetRectangle(self) -> Rectangle: ...
    @property
    def OuterHtml(self) -> str: ...
    @property
    def OuterText(self) -> str: ...
    @property
    def Parent(self) -> HtmlElement: ...
    @property
    def ScrollLeft(self) -> int: ...
    @property
    def ScrollRectangle(self) -> Rectangle: ...
    @property
    def ScrollTop(self) -> int: ...
    @property
    def Style(self) -> str: ...
    @property
    def TabIndex(self) -> Int16: ...
    @property
    def TagName(self) -> str: ...
    def GetAttribute(self, attributeName: str) -> str: ...
    def GetElementsByTagName(self, tagName: str) -> HtmlElementCollection: ...
    def GetHashCode(self) -> int: ...
    def InsertAdjacentElement(self, orient: HtmlElementInsertionOrientation, newElement: HtmlElement) -> HtmlElement: ...
    @overload
    def InvokeMember(self, methodName: str) -> Object: ...
    @overload
    def InvokeMember(self, methodName: str, parameter: Set(Object)) -> Object: ...
    def op_Equality(left: HtmlElement, right: HtmlElement) -> bool: ...
    def op_Inequality(left: HtmlElement, right: HtmlElement) -> bool: ...
    def RaiseEvent(self, eventName: str) -> None: ...
    def remove_Click(self, value: HtmlElementEventHandler) -> None: ...
    def remove_DoubleClick(self, value: HtmlElementEventHandler) -> None: ...
    def remove_Drag(self, value: HtmlElementEventHandler) -> None: ...
    def remove_DragEnd(self, value: HtmlElementEventHandler) -> None: ...
    def remove_DragLeave(self, value: HtmlElementEventHandler) -> None: ...
    def remove_DragOver(self, value: HtmlElementEventHandler) -> None: ...
    def remove_Focusing(self, value: HtmlElementEventHandler) -> None: ...
    def remove_GotFocus(self, value: HtmlElementEventHandler) -> None: ...
    def remove_KeyDown(self, value: HtmlElementEventHandler) -> None: ...
    def remove_KeyPress(self, value: HtmlElementEventHandler) -> None: ...
    def remove_KeyUp(self, value: HtmlElementEventHandler) -> None: ...
    def remove_LosingFocus(self, value: HtmlElementEventHandler) -> None: ...
    def remove_LostFocus(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseDown(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseEnter(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseLeave(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseMove(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseOver(self, value: HtmlElementEventHandler) -> None: ...
    def remove_MouseUp(self, value: HtmlElementEventHandler) -> None: ...
    def RemoveFocus(self) -> None: ...
    def ScrollIntoView(self, alignWithTop: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...
    @InnerHtml.setter
    def InnerHtml(self, value: str) -> None: ...
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @OuterHtml.setter
    def OuterHtml(self, value: str) -> None: ...
    @OuterText.setter
    def OuterText(self, value: str) -> None: ...
    @ScrollLeft.setter
    def ScrollLeft(self, value: int) -> None: ...
    @ScrollTop.setter
    def ScrollTop(self, value: int) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: Int16) -> None: ...
    def SetAttribute(self, attributeName: str, value: str) -> None: ...


class HtmlElementCollection(Object):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> HtmlElement: ...
    @property
    def Item(self, elementId: str) -> HtmlElement: ...
    def GetElementsByName(self, name: str) -> HtmlElementCollection: ...
    def GetEnumerator(self) -> IEnumerator: ...


class HtmlElementErrorEventArgs(EventArgs):
    @property
    def Description(self) -> str: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def Url(self) -> Uri: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class HtmlElementErrorEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: HtmlElementErrorEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: HtmlElementErrorEventArgs) -> None: ...


class HtmlElementEventArgs(EventArgs):
    @property
    def AltKeyPressed(self) -> bool: ...
    @property
    def BubbleEvent(self) -> bool: ...
    @property
    def ClientMousePosition(self) -> Point: ...
    @property
    def CtrlKeyPressed(self) -> bool: ...
    @property
    def EventType(self) -> str: ...
    @property
    def FromElement(self) -> HtmlElement: ...
    @property
    def KeyPressedCode(self) -> int: ...
    @property
    def MouseButtonsPressed(self) -> MouseButtons: ...
    @property
    def MousePosition(self) -> Point: ...
    @property
    def OffsetMousePosition(self) -> Point: ...
    @property
    def ReturnValue(self) -> bool: ...
    @property
    def ShiftKeyPressed(self) -> bool: ...
    @property
    def ToElement(self) -> HtmlElement: ...
    @BubbleEvent.setter
    def BubbleEvent(self, value: bool) -> None: ...
    @ReturnValue.setter
    def ReturnValue(self, value: bool) -> None: ...


class HtmlElementEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: HtmlElementEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: HtmlElementEventArgs) -> None: ...


class HtmlElementInsertionOrientation:
    BeforeBegin = 0
    AfterBegin = 1
    BeforeEnd = 2
    AfterEnd = 3


class HtmlHistory(Object):
    def Back(self, numberBack: int) -> None: ...
    def Dispose(self) -> None: ...
    def Forward(self, numberForward: int) -> None: ...
    @property
    def DomHistory(self) -> Object: ...
    @property
    def Length(self) -> int: ...
    @overload
    def Go(self, url: Uri) -> None: ...
    @overload
    def Go(self, urlString: str) -> None: ...
    @overload
    def Go(self, relativePosition: int) -> None: ...


class HtmlWindow(Object):
    def add_Error(self, value: HtmlElementErrorEventHandler) -> None: ...
    def add_GotFocus(self, value: HtmlElementEventHandler) -> None: ...
    def add_Load(self, value: HtmlElementEventHandler) -> None: ...
    def add_LostFocus(self, value: HtmlElementEventHandler) -> None: ...
    def add_Resize(self, value: HtmlElementEventHandler) -> None: ...
    def add_Scroll(self, value: HtmlElementEventHandler) -> None: ...
    def add_Unload(self, value: HtmlElementEventHandler) -> None: ...
    def Alert(self, message: str) -> None: ...
    def AttachEventHandler(self, eventName: str, eventHandler: EventHandler) -> None: ...
    def Close(self) -> None: ...
    def Confirm(self, message: str) -> bool: ...
    def DetachEventHandler(self, eventName: str, eventHandler: EventHandler) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def Document(self) -> HtmlDocument: ...
    @property
    def DomWindow(self) -> Object: ...
    @property
    def Frames(self) -> HtmlWindowCollection: ...
    @property
    def History(self) -> HtmlHistory: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Opener(self) -> HtmlWindow: ...
    @property
    def Parent(self) -> HtmlWindow: ...
    @property
    def Position(self) -> Point: ...
    @property
    def Size(self) -> Size: ...
    @property
    def StatusBarText(self) -> str: ...
    @property
    def Url(self) -> Uri: ...
    @property
    def WindowFrameElement(self) -> HtmlElement: ...
    def GetHashCode(self) -> int: ...
    @overload
    def MoveTo(self, point: Point) -> None: ...
    @overload
    def MoveTo(self, x: int, y: int) -> None: ...
    @overload
    def Navigate(self, urlString: str) -> None: ...
    @overload
    def Navigate(self, url: Uri) -> None: ...
    def op_Equality(left: HtmlWindow, right: HtmlWindow) -> bool: ...
    def op_Inequality(left: HtmlWindow, right: HtmlWindow) -> bool: ...
    @overload
    def Open(self, url: Uri, target: str, windowOptions: str, replaceEntry: bool) -> HtmlWindow: ...
    @overload
    def Open(self, urlString: str, target: str, windowOptions: str, replaceEntry: bool) -> HtmlWindow: ...
    @overload
    def OpenNew(self, url: Uri, windowOptions: str) -> HtmlWindow: ...
    @overload
    def OpenNew(self, urlString: str, windowOptions: str) -> HtmlWindow: ...
    def Prompt(self, message: str, defaultInputValue: str) -> str: ...
    def remove_Error(self, value: HtmlElementErrorEventHandler) -> None: ...
    def remove_GotFocus(self, value: HtmlElementEventHandler) -> None: ...
    def remove_Load(self, value: HtmlElementEventHandler) -> None: ...
    def remove_LostFocus(self, value: HtmlElementEventHandler) -> None: ...
    def remove_Resize(self, value: HtmlElementEventHandler) -> None: ...
    def remove_Scroll(self, value: HtmlElementEventHandler) -> None: ...
    def remove_Unload(self, value: HtmlElementEventHandler) -> None: ...
    def RemoveFocus(self) -> None: ...
    @overload
    def ResizeTo(self, size: Size) -> None: ...
    @overload
    def ResizeTo(self, width: int, height: int) -> None: ...
    @overload
    def ScrollTo(self, point: Point) -> None: ...
    @overload
    def ScrollTo(self, x: int, y: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @StatusBarText.setter
    def StatusBarText(self, value: str) -> None: ...


class HtmlWindowCollection(Object):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> HtmlWindow: ...
    @property
    def Item(self, windowId: str) -> HtmlWindow: ...
    def GetEnumerator(self) -> IEnumerator: ...


class IBindableComponent:
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...


class IButtonControl:
    @property
    def DialogResult(self) -> DialogResult: ...
    def NotifyDefault(self, value: bool) -> None: ...
    def PerformClick(self) -> None: ...
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...


class ICommandExecutor:
    def Execute(self) -> None: ...


class IComponentEditorPageSite:
    def GetControl(self) -> Control: ...
    def SetDirty(self) -> None: ...


class IContainerControl:
    def ActivateControl(self, active: Control) -> bool: ...
    @property
    def ActiveControl(self) -> Control: ...
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...


class ICurrencyManagerProvider:
    @property
    def CurrencyManager(self) -> CurrencyManager: ...
    def GetRelatedCurrencyManager(self, dataMember: str) -> CurrencyManager: ...


class IDataGridColumnStyleEditingNotificationService:
    def ColumnStartedEditing(self, editingControl: Control) -> None: ...


class IDataGridViewEditingCell:
    @property
    def EditingCellFormattedValue(self) -> Object: ...
    @property
    def EditingCellValueChanged(self) -> bool: ...
    def GetEditingCellFormattedValue(self, context: DataGridViewDataErrorContexts) -> Object: ...
    def PrepareEditingCellForEdit(self, selectAll: bool) -> None: ...
    @EditingCellFormattedValue.setter
    def EditingCellFormattedValue(self, value: Object) -> None: ...
    @EditingCellValueChanged.setter
    def EditingCellValueChanged(self, value: bool) -> None: ...


class IDataGridViewEditingControl:
    def ApplyCellStyleToEditingControl(self, dataGridViewCellStyle: DataGridViewCellStyle) -> None: ...
    def EditingControlWantsInputKey(self, keyData: Keys, dataGridViewWantsInputKey: bool) -> bool: ...
    @property
    def EditingControlDataGridView(self) -> DataGridView: ...
    @property
    def EditingControlFormattedValue(self) -> Object: ...
    @property
    def EditingControlRowIndex(self) -> int: ...
    @property
    def EditingControlValueChanged(self) -> bool: ...
    @property
    def EditingPanelCursor(self) -> Cursor: ...
    @property
    def RepositionEditingControlOnValueChange(self) -> bool: ...
    def GetEditingControlFormattedValue(self, context: DataGridViewDataErrorContexts) -> Object: ...
    def PrepareEditingControlForEdit(self, selectAll: bool) -> None: ...
    @EditingControlDataGridView.setter
    def EditingControlDataGridView(self, value: DataGridView) -> None: ...
    @EditingControlFormattedValue.setter
    def EditingControlFormattedValue(self, value: Object) -> None: ...
    @EditingControlRowIndex.setter
    def EditingControlRowIndex(self, value: int) -> None: ...
    @EditingControlValueChanged.setter
    def EditingControlValueChanged(self, value: bool) -> None: ...


class IDataObject:
    @overload
    def GetData(self, format: str) -> Object: ...
    @overload
    def GetData(self, format: Type) -> Object: ...
    @overload
    def GetData(self, format: str, autoConvert: bool) -> Object: ...
    @overload
    def GetDataPresent(self, format: str) -> bool: ...
    @overload
    def GetDataPresent(self, format: Type) -> bool: ...
    @overload
    def GetDataPresent(self, format: str, autoConvert: bool) -> bool: ...
    @overload
    def GetFormats(self) -> Set(str): ...
    @overload
    def GetFormats(self, autoConvert: bool) -> Set(str): ...
    @overload
    def SetData(self, data: Object) -> None: ...
    @overload
    def SetData(self, format: str, data: Object) -> None: ...
    @overload
    def SetData(self, format: Type, data: Object) -> None: ...
    @overload
    def SetData(self, format: str, autoConvert: bool, data: Object) -> None: ...


class IDropTarget:
    def OnDragDrop(self, e: DragEventArgs) -> None: ...
    def OnDragEnter(self, e: DragEventArgs) -> None: ...
    def OnDragLeave(self, e: EventArgs) -> None: ...
    def OnDragOver(self, e: DragEventArgs) -> None: ...


class IFeatureSupport:
    def GetVersionPresent(self, feature: Object) -> Version: ...
    @overload
    def IsPresent(self, feature: Object) -> bool: ...
    @overload
    def IsPresent(self, feature: Object, minimumVersion: Version) -> bool: ...


class IFileReaderService:
    def OpenFileFromSource(self, relativePath: str) -> Stream: ...


class ImageCollection(Object):
    @overload
    def Add(self, value: Icon) -> None: ...
    @overload
    def Add(self, value: Image) -> None: ...
    @overload
    def Add(self, key: str, image: Image) -> None: ...
    @overload
    def Add(self, key: str, icon: Icon) -> None: ...
    @overload
    def Add(self, value: Image, transparentColor: Color) -> int: ...
    def AddRange(self, images: Set(Image)) -> None: ...
    def AddStrip(self, value: Image) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, image: Image) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Empty(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> Image: ...
    @property
    def Item(self, key: str) -> Image: ...
    @property
    def Keys(self) -> StringCollection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, image: Image) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...
    def Remove(self, image: Image) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Image) -> None: ...
    def SetKeyName(self, index: int, name: str) -> None: ...


class ImageIndexConverter(Int32Converter):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class ImageKeyConverter(StringConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class ImageLayout:
    #None = 0
    Tile = 1
    Center = 2
    Stretch = 3
    Zoom = 4


class ImageList(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: IContainer): ...
    def add_RecreateHandle(self, value: EventHandler) -> None: ...
    @overload
    def Draw(self, g: Graphics, pt: Point, index: int) -> None: ...
    @overload
    def Draw(self, g: Graphics, x: int, y: int, index: int) -> None: ...
    @overload
    def Draw(self, g: Graphics, x: int, y: int, width: int, height: int, index: int) -> None: ...
    @property
    def ColorDepth(self) -> ColorDepth: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HandleCreated(self) -> bool: ...
    @property
    def Images(self) -> ImageCollection: ...
    @property
    def ImageSize(self) -> Size: ...
    @property
    def ImageStream(self) -> ImageListStreamer: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TransparentColor(self) -> Color: ...
    def remove_RecreateHandle(self, value: EventHandler) -> None: ...
    @ColorDepth.setter
    def ColorDepth(self, value: ColorDepth) -> None: ...
    @ImageSize.setter
    def ImageSize(self, value: Size) -> None: ...
    @ImageStream.setter
    def ImageStream(self, value: ImageListStreamer) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @TransparentColor.setter
    def TransparentColor(self, value: Color) -> None: ...
    def ToString(self) -> str: ...


class ImageListStreamer(Object):
    def Dispose(self) -> None: ...
    def GetObjectData(self, si: SerializationInfo, context: StreamingContext) -> None: ...


class ImeContext(Object):
    def Disable(handle: IntPtr) -> None: ...
    def Enable(handle: IntPtr) -> None: ...
    def GetImeMode(handle: IntPtr) -> ImeMode: ...
    def IsOpen(handle: IntPtr) -> bool: ...
    def SetImeStatus(imeMode: ImeMode, handle: IntPtr) -> None: ...
    def SetOpenStatus(open: bool, handle: IntPtr) -> None: ...


class ImeMode:
    NoControl = 0
    On = 1
    Off = 2
    Disable = 3
    Hiragana = 4
    Katakana = 5
    KatakanaHalf = 6
    AlphaFull = 7
    Alpha = 8
    HangulFull = 9
    Hangul = 10
    Close = 11
    OnHalf = 12
    Inherit = -1


class ImeModeConversion(ValueType):
    @property
    def ImeModeConversionBits() -> Dictionary: ...
    @property
    def IsCurrentConversionTableSupported() -> bool: ...


class IMessageFilter:
    def PreFilterMessage(self, m: Message) -> Tuple[bool, Message]: ...


class InputLanguage(Object):
    def Equals(self, value: Object) -> bool: ...
    def FromCulture(culture: CultureInfo) -> InputLanguage: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def CurrentInputLanguage() -> InputLanguage: ...
    @property
    def DefaultInputLanguage() -> InputLanguage: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def InstalledInputLanguages() -> InputLanguageCollection: ...
    @property
    def LayoutName(self) -> str: ...
    def GetHashCode(self) -> int: ...
    @CurrentInputLanguage.setter
    def CurrentInputLanguage(value: InputLanguage) -> None: ...


class InputLanguageChangedEventArgs(EventArgs):
    @overload
    def __init__(self, culture: CultureInfo, charSet: Byte): ...
    @overload
    def __init__(self, inputLanguage: InputLanguage, charSet: Byte): ...
    @property
    def CharSet(self) -> Byte: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def InputLanguage(self) -> InputLanguage: ...


class InputLanguageChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: InputLanguageChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: InputLanguageChangedEventArgs) -> None: ...


class InputLanguageChangingEventArgs(CancelEventArgs):
    @overload
    def __init__(self, culture: CultureInfo, sysCharSet: bool): ...
    @overload
    def __init__(self, inputLanguage: InputLanguage, sysCharSet: bool): ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def InputLanguage(self) -> InputLanguage: ...
    @property
    def SysCharSet(self) -> bool: ...


class InputLanguageChangingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: InputLanguageChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: InputLanguageChangingEventArgs) -> None: ...


class InputLanguageCollection(ReadOnlyCollectionBase):
    def Contains(self, value: InputLanguage) -> bool: ...
    def CopyTo(self, array: Set(InputLanguage), index: int) -> None: ...
    @property
    def Item(self, index: int) -> InputLanguage: ...
    def IndexOf(self, value: InputLanguage) -> int: ...


class InsertKeyMode:
    Default = 0
    Insert = 1
    Overwrite = 2


class IntegerCollection(Object):
    def __init__(self, owner: ListBox): ...
    def Add(self, item: int) -> int: ...
    @overload
    def AddRange(self, items: Set(int)) -> None: ...
    @overload
    def AddRange(self, value: IntegerCollection) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, item: int) -> bool: ...
    def CopyTo(self, destination: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> int: ...
    def IndexOf(self, item: int) -> int: ...
    def Remove(self, item: int) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: int) -> None: ...


class InvalidActiveXStateException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, kind: ActiveXInvokeKind): ...
    def ToString(self) -> str: ...


class InvalidateEventArgs(EventArgs):
    def __init__(self, invalidRect: Rectangle): ...
    @property
    def InvalidRect(self) -> Rectangle: ...


class InvalidateEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: InvalidateEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: InvalidateEventArgs) -> None: ...


class ItemActivation:
    Standard = 0
    OneClick = 1
    TwoClick = 2


class ItemBoundsPortion:
    Entire = 0
    Icon = 1
    Label = 2
    ItemOnly = 3


class ItemChangedEventArgs(EventArgs):
    @property
    def Index(self) -> int: ...


class ItemChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ItemChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ItemChangedEventArgs) -> None: ...


class ItemCheckedEventArgs(EventArgs):
    def __init__(self, item: ListViewItem): ...
    @property
    def Item(self) -> ListViewItem: ...


class ItemCheckedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ItemCheckedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ItemCheckedEventArgs) -> None: ...


class ItemCheckEventArgs(EventArgs):
    def __init__(self, index: int, newCheckValue: CheckState, currentValue: CheckState): ...
    @property
    def CurrentValue(self) -> CheckState: ...
    @property
    def Index(self) -> int: ...
    @property
    def NewValue(self) -> CheckState: ...
    @NewValue.setter
    def NewValue(self, value: CheckState) -> None: ...


class ItemCheckEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ItemCheckEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ItemCheckEventArgs) -> None: ...


class ItemDragEventArgs(EventArgs):
    @overload
    def __init__(self, button: MouseButtons): ...
    @overload
    def __init__(self, button: MouseButtons, item: Object): ...
    @property
    def Button(self) -> MouseButtons: ...
    @property
    def Item(self) -> Object: ...


class ItemDragEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ItemDragEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ItemDragEventArgs) -> None: ...


class IWin32Window:
    @property
    def Handle(self) -> IntPtr: ...


class IWindowTarget:
    def OnHandleChange(self, newHandle: IntPtr) -> None: ...
    def OnMessage(self, m: Message) -> Tuple[Message]: ...


class KeyEventArgs(EventArgs):
    def __init__(self, keyData: Keys): ...
    @property
    def Alt(self) -> bool: ...
    @property
    def Control(self) -> bool: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def KeyCode(self) -> Keys: ...
    @property
    def KeyData(self) -> Keys: ...
    @property
    def KeyValue(self) -> int: ...
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def Shift(self) -> bool: ...
    @property
    def SuppressKeyPress(self) -> bool: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...
    @SuppressKeyPress.setter
    def SuppressKeyPress(self, value: bool) -> None: ...


class KeyEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: KeyEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: KeyEventArgs) -> None: ...


class KeyPressEventArgs(EventArgs):
    def __init__(self, keyChar: Char): ...
    @property
    def Handled(self) -> bool: ...
    @property
    def KeyChar(self) -> Char: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...
    @KeyChar.setter
    def KeyChar(self, value: Char) -> None: ...


class KeyPressEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: KeyPressEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: KeyPressEventArgs) -> None: ...


class Keys:
    #None = 0
    LButton = 1
    RButton = 2
    Cancel = 3
    MButton = 4
    XButton1 = 5
    XButton2 = 6
    Back = 8
    Tab = 9
    LineFeed = 10
    Clear = 12
    Enter = 13
    Return = 13
    ShiftKey = 16
    ControlKey = 17
    Menu = 18
    Pause = 19
    CapsLock = 20
    Capital = 20
    HangulMode = 21
    HanguelMode = 21
    KanaMode = 21
    JunjaMode = 23
    FinalMode = 24
    KanjiMode = 25
    HanjaMode = 25
    Escape = 27
    IMEConvert = 28
    IMENonconvert = 29
    IMEAccept = 30
    IMEAceept = 30
    IMEModeChange = 31
    Space = 32
    Prior = 33
    PageUp = 33
    PageDown = 34
    Next = 34
    End = 35
    Home = 36
    Left = 37
    Up = 38
    Right = 39
    Down = 40
    Select = 41
    Print = 42
    Execute = 43
    Snapshot = 44
    PrintScreen = 44
    Insert = 45
    Delete = 46
    Help = 47
    D0 = 48
    D1 = 49
    D2 = 50
    D3 = 51
    D4 = 52
    D5 = 53
    D6 = 54
    D7 = 55
    D8 = 56
    D9 = 57
    A = 65
    B = 66
    C = 67
    D = 68
    E = 69
    F = 70
    G = 71
    H = 72
    I = 73
    J = 74
    K = 75
    L = 76
    M = 77
    N = 78
    O = 79
    P = 80
    Q = 81
    R = 82
    S = 83
    T = 84
    U = 85
    V = 86
    W = 87
    X = 88
    Y = 89
    Z = 90
    LWin = 91
    RWin = 92
    Apps = 93
    Sleep = 95
    NumPad0 = 96
    NumPad1 = 97
    NumPad2 = 98
    NumPad3 = 99
    NumPad4 = 100
    NumPad5 = 101
    NumPad6 = 102
    NumPad7 = 103
    NumPad8 = 104
    NumPad9 = 105
    Multiply = 106
    Add = 107
    Separator = 108
    Subtract = 109
    Decimal = 110
    Divide = 111
    F1 = 112
    F2 = 113
    F3 = 114
    F4 = 115
    F5 = 116
    F6 = 117
    F7 = 118
    F8 = 119
    F9 = 120
    F10 = 121
    F11 = 122
    F12 = 123
    F13 = 124
    F14 = 125
    F15 = 126
    F16 = 127
    F17 = 128
    F18 = 129
    F19 = 130
    F20 = 131
    F21 = 132
    F22 = 133
    F23 = 134
    F24 = 135
    NumLock = 144
    Scroll = 145
    LShiftKey = 160
    RShiftKey = 161
    LControlKey = 162
    RControlKey = 163
    LMenu = 164
    RMenu = 165
    BrowserBack = 166
    BrowserForward = 167
    BrowserRefresh = 168
    BrowserStop = 169
    BrowserSearch = 170
    BrowserFavorites = 171
    BrowserHome = 172
    VolumeMute = 173
    VolumeDown = 174
    VolumeUp = 175
    MediaNextTrack = 176
    MediaPreviousTrack = 177
    MediaStop = 178
    MediaPlayPause = 179
    LaunchMail = 180
    SelectMedia = 181
    LaunchApplication1 = 182
    LaunchApplication2 = 183
    OemSemicolon = 186
    Oem1 = 186
    Oemplus = 187
    Oemcomma = 188
    OemMinus = 189
    OemPeriod = 190
    Oem2 = 191
    OemQuestion = 191
    Oem3 = 192
    Oemtilde = 192
    Oem4 = 219
    OemOpenBrackets = 219
    OemPipe = 220
    Oem5 = 220
    OemCloseBrackets = 221
    Oem6 = 221
    OemQuotes = 222
    Oem7 = 222
    Oem8 = 223
    Oem102 = 226
    OemBackslash = 226
    ProcessKey = 229
    Packet = 231
    Attn = 246
    Crsel = 247
    Exsel = 248
    EraseEof = 249
    Play = 250
    Zoom = 251
    NoName = 252
    Pa1 = 253
    OemClear = 254
    KeyCode = 65535
    Shift = 65536
    Control = 131072
    Alt = 262144
    Modifiers = -65536


class KeysConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    def Compare(self, a: Object, b: Object) -> int: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class Label(Control):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    def add_TextAlignChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoEllipsis(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def Image(self) -> Image: ...
    @property
    def ImageAlign(self) -> ContentAlignment: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def LiveSetting(self) -> AutomationLiveSetting: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def PreferredWidth(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> ContentAlignment: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @property
    def UseMnemonic(self) -> bool: ...
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    def remove_TextAlignChanged(self, value: EventHandler) -> None: ...
    @AutoEllipsis.setter
    def AutoEllipsis(self, value: bool) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @ImageAlign.setter
    def ImageAlign(self, value: ContentAlignment) -> None: ...
    @ImageIndex.setter
    def ImageIndex(self, value: int) -> None: ...
    @ImageKey.setter
    def ImageKey(self, value: str) -> None: ...
    @ImageList.setter
    def ImageList(self, value: ImageList) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @LiveSetting.setter
    def LiveSetting(self, value: AutomationLiveSetting) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: ContentAlignment) -> None: ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: bool) -> None: ...
    @UseMnemonic.setter
    def UseMnemonic(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class LabelEditEventArgs(EventArgs):
    @overload
    def __init__(self, item: int): ...
    @overload
    def __init__(self, item: int, label: str): ...
    @property
    def CancelEdit(self) -> bool: ...
    @property
    def Item(self) -> int: ...
    @property
    def Label(self) -> str: ...
    @CancelEdit.setter
    def CancelEdit(self, value: bool) -> None: ...


class LabelEditEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: LabelEditEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: LabelEditEventArgs) -> None: ...


class LayoutEventArgs(EventArgs):
    @overload
    def __init__(self, affectedComponent: IComponent, affectedProperty: str): ...
    @overload
    def __init__(self, affectedControl: Control, affectedProperty: str): ...
    @property
    def AffectedComponent(self) -> IComponent: ...
    @property
    def AffectedControl(self) -> Control: ...
    @property
    def AffectedProperty(self) -> str: ...


class LayoutEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: LayoutEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: LayoutEventArgs) -> None: ...


class LayoutSettings(Object):
    @property
    def LayoutEngine(self) -> LayoutEngine: ...


class LeftRightAlignment:
    Left = 0
    Right = 1


class Link(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, start: int, length: int): ...
    @overload
    def __init__(self, start: int, length: int, linkData: Object): ...
    @property
    def Description(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def LinkData(self) -> Object: ...
    @property
    def Name(self) -> str: ...
    @property
    def Start(self) -> int: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Visited(self) -> bool: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Length.setter
    def Length(self, value: int) -> None: ...
    @LinkData.setter
    def LinkData(self, value: Object) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Start.setter
    def Start(self, value: int) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Visited.setter
    def Visited(self, value: bool) -> None: ...


class LinkArea(ValueType):
    def __init__(self, start: int, length: int): ...
    def Equals(self, o: Object) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Start(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(linkArea1: LinkArea, linkArea2: LinkArea) -> bool: ...
    def op_Inequality(linkArea1: LinkArea, linkArea2: LinkArea) -> bool: ...
    @Length.setter
    def Length(self, value: int) -> None: ...
    @Start.setter
    def Start(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class LinkAreaConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> Object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class LinkBehavior:
    SystemDefault = 0
    AlwaysUnderline = 1
    HoverUnderline = 2
    NeverUnderline = 3


class LinkClickedEventArgs(EventArgs):
    def __init__(self, linkText: str): ...
    @property
    def LinkText(self) -> str: ...


class LinkClickedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: LinkClickedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: LinkClickedEventArgs) -> None: ...


class LinkCollection(Object):
    def __init__(self, owner: LinkLabel): ...
    @overload
    def Add(self, value: Link) -> int: ...
    @overload
    def Add(self, start: int, length: int) -> Link: ...
    @overload
    def Add(self, start: int, length: int, linkData: Object) -> Link: ...
    def Clear(self) -> None: ...
    def Contains(self, link: Link) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> Link: ...
    @property
    def Item(self, key: str) -> Link: ...
    @property
    def LinksAdded(self) -> bool: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, link: Link) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...
    def Remove(self, value: Link) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Link) -> None: ...


class LinkConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class LinkLabel(Label):
    def __init__(self): ...
    def add_LinkClicked(self, value: LinkLabelLinkClickedEventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @property
    def ActiveLinkColor(self) -> Color: ...
    @property
    def DisabledLinkColor(self) -> Color: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def LinkArea(self) -> LinkArea: ...
    @property
    def LinkBehavior(self) -> LinkBehavior: ...
    @property
    def LinkColor(self) -> Color: ...
    @property
    def Links(self) -> LinkCollection: ...
    @property
    def LinkVisited(self) -> bool: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @property
    def VisitedLinkColor(self) -> Color: ...
    def remove_LinkClicked(self, value: LinkLabelLinkClickedEventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @ActiveLinkColor.setter
    def ActiveLinkColor(self, value: Color) -> None: ...
    @DisabledLinkColor.setter
    def DisabledLinkColor(self, value: Color) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @LinkArea.setter
    def LinkArea(self, value: LinkArea) -> None: ...
    @LinkBehavior.setter
    def LinkBehavior(self, value: LinkBehavior) -> None: ...
    @LinkColor.setter
    def LinkColor(self, value: Color) -> None: ...
    @LinkVisited.setter
    def LinkVisited(self, value: bool) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: bool) -> None: ...
    @VisitedLinkColor.setter
    def VisitedLinkColor(self, value: Color) -> None: ...


class LinkLabelLinkClickedEventArgs(EventArgs):
    @overload
    def __init__(self, link: Link): ...
    @overload
    def __init__(self, link: Link, button: MouseButtons): ...
    @property
    def Button(self) -> MouseButtons: ...
    @property
    def Link(self) -> Link: ...


class LinkLabelLinkClickedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: LinkLabelLinkClickedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: LinkLabelLinkClickedEventArgs) -> None: ...


class LinkState:
    Normal = 0
    Hover = 1
    Active = 2
    Visited = 4


class ListBindingConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> Object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...


class ListBindingHelper(Object):
    @overload
    def GetList(list: Object) -> Object: ...
    @overload
    def GetList(dataSource: Object, dataMember: str) -> Object: ...
    @overload
    def GetListItemProperties(list: Object) -> PropertyDescriptorCollection: ...
    @overload
    def GetListItemProperties(list: Object, listAccessors: Set(PropertyDescriptor)) -> PropertyDescriptorCollection: ...
    @overload
    def GetListItemProperties(dataSource: Object, dataMember: str, listAccessors: Set(PropertyDescriptor)) -> PropertyDescriptorCollection: ...
    @overload
    def GetListItemType(list: Object) -> Type: ...
    @overload
    def GetListItemType(dataSource: Object, dataMember: str) -> Type: ...
    def GetListName(list: Object, listAccessors: Set(PropertyDescriptor)) -> str: ...


class ListBox(ListControl):
    def __init__(self): ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    def add_DrawItem(self, value: DrawItemEventHandler) -> None: ...
    def add_MeasureItem(self, value: MeasureItemEventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def BeginUpdate(self) -> None: ...
    def ClearSelected(self) -> None: ...
    def EndUpdate(self) -> None: ...
    @overload
    def FindString(self, s: str) -> int: ...
    @overload
    def FindString(self, s: str, startIndex: int) -> int: ...
    @overload
    def FindStringExact(self, s: str) -> int: ...
    @overload
    def FindStringExact(self, s: str, startIndex: int) -> int: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def ColumnWidth(self) -> int: ...
    @property
    def CustomTabOffsets(self) -> IntegerCollection: ...
    @property
    def DrawMode(self) -> DrawMode: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def HorizontalExtent(self) -> int: ...
    @property
    def HorizontalScrollbar(self) -> bool: ...
    @property
    def IntegralHeight(self) -> bool: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def MultiColumn(self) -> bool: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def ScrollAlwaysVisible(self) -> bool: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndices(self) -> SelectedIndexCollection: ...
    @property
    def SelectedItem(self) -> Object: ...
    @property
    def SelectedItems(self) -> SelectedObjectCollection: ...
    @property
    def SelectionMode(self) -> SelectionMode: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TopIndex(self) -> int: ...
    @property
    def UseCustomTabOffsets(self) -> bool: ...
    @property
    def UseTabStops(self) -> bool: ...
    def GetItemHeight(self, index: int) -> int: ...
    def GetItemRectangle(self, index: int) -> Rectangle: ...
    def GetSelected(self, index: int) -> bool: ...
    @overload
    def IndexFromPoint(self, p: Point) -> int: ...
    @overload
    def IndexFromPoint(self, x: int, y: int) -> int: ...
    def Refresh(self) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_DrawItem(self, value: DrawItemEventHandler) -> None: ...
    def remove_MeasureItem(self, value: MeasureItemEventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def ResetBackColor(self) -> None: ...
    def ResetForeColor(self) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @ColumnWidth.setter
    def ColumnWidth(self, value: int) -> None: ...
    @DrawMode.setter
    def DrawMode(self, value: DrawMode) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @HorizontalExtent.setter
    def HorizontalExtent(self, value: int) -> None: ...
    @HorizontalScrollbar.setter
    def HorizontalScrollbar(self, value: bool) -> None: ...
    @IntegralHeight.setter
    def IntegralHeight(self, value: bool) -> None: ...
    @ItemHeight.setter
    def ItemHeight(self, value: int) -> None: ...
    @MultiColumn.setter
    def MultiColumn(self, value: bool) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @ScrollAlwaysVisible.setter
    def ScrollAlwaysVisible(self, value: bool) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedItem.setter
    def SelectedItem(self, value: Object) -> None: ...
    @SelectionMode.setter
    def SelectionMode(self, value: SelectionMode) -> None: ...
    @Sorted.setter
    def Sorted(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TopIndex.setter
    def TopIndex(self, value: int) -> None: ...
    @UseCustomTabOffsets.setter
    def UseCustomTabOffsets(self, value: bool) -> None: ...
    @UseTabStops.setter
    def UseTabStops(self, value: bool) -> None: ...
    def SetSelected(self, index: int, value: bool) -> None: ...
    def ToString(self) -> str: ...


class ListControl(Control):
    def add_DataSourceChanged(self, value: EventHandler) -> None: ...
    def add_DisplayMemberChanged(self, value: EventHandler) -> None: ...
    def add_Format(self, value: ListControlConvertEventHandler) -> None: ...
    def add_FormatInfoChanged(self, value: EventHandler) -> None: ...
    def add_FormatStringChanged(self, value: EventHandler) -> None: ...
    def add_FormattingEnabledChanged(self, value: EventHandler) -> None: ...
    def add_SelectedValueChanged(self, value: EventHandler) -> None: ...
    def add_ValueMemberChanged(self, value: EventHandler) -> None: ...
    @property
    def DataSource(self) -> Object: ...
    @property
    def DisplayMember(self) -> str: ...
    @property
    def FormatInfo(self) -> IFormatProvider: ...
    @property
    def FormatString(self) -> str: ...
    @property
    def FormattingEnabled(self) -> bool: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedValue(self) -> Object: ...
    @property
    def ValueMember(self) -> str: ...
    def GetItemText(self, item: Object) -> str: ...
    def remove_DataSourceChanged(self, value: EventHandler) -> None: ...
    def remove_DisplayMemberChanged(self, value: EventHandler) -> None: ...
    def remove_Format(self, value: ListControlConvertEventHandler) -> None: ...
    def remove_FormatInfoChanged(self, value: EventHandler) -> None: ...
    def remove_FormatStringChanged(self, value: EventHandler) -> None: ...
    def remove_FormattingEnabledChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedValueChanged(self, value: EventHandler) -> None: ...
    def remove_ValueMemberChanged(self, value: EventHandler) -> None: ...
    @DataSource.setter
    def DataSource(self, value: Object) -> None: ...
    @DisplayMember.setter
    def DisplayMember(self, value: str) -> None: ...
    @FormatInfo.setter
    def FormatInfo(self, value: IFormatProvider) -> None: ...
    @FormatString.setter
    def FormatString(self, value: str) -> None: ...
    @FormattingEnabled.setter
    def FormattingEnabled(self, value: bool) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedValue.setter
    def SelectedValue(self, value: Object) -> None: ...
    @ValueMember.setter
    def ValueMember(self, value: str) -> None: ...


class ListControlConvertEventArgs(ConvertEventArgs):
    def __init__(self, value: Object, desiredType: Type, listItem: Object): ...
    @property
    def ListItem(self) -> Object: ...


class ListControlConvertEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ListControlConvertEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ListControlConvertEventArgs) -> None: ...


class ListView(Control):
    def __init__(self): ...
    def add_AfterLabelEdit(self, value: LabelEditEventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def add_BeforeLabelEdit(self, value: LabelEditEventHandler) -> None: ...
    def add_CacheVirtualItems(self, value: CacheVirtualItemsEventHandler) -> None: ...
    def add_ColumnClick(self, value: ColumnClickEventHandler) -> None: ...
    def add_ColumnReordered(self, value: ColumnReorderedEventHandler) -> None: ...
    def add_ColumnWidthChanged(self, value: ColumnWidthChangedEventHandler) -> None: ...
    def add_ColumnWidthChanging(self, value: ColumnWidthChangingEventHandler) -> None: ...
    def add_DrawColumnHeader(self, value: DrawListViewColumnHeaderEventHandler) -> None: ...
    def add_DrawItem(self, value: DrawListViewItemEventHandler) -> None: ...
    def add_DrawSubItem(self, value: DrawListViewSubItemEventHandler) -> None: ...
    def add_ItemActivate(self, value: EventHandler) -> None: ...
    def add_ItemCheck(self, value: ItemCheckEventHandler) -> None: ...
    def add_ItemChecked(self, value: ItemCheckedEventHandler) -> None: ...
    def add_ItemDrag(self, value: ItemDragEventHandler) -> None: ...
    def add_ItemMouseHover(self, value: ListViewItemMouseHoverEventHandler) -> None: ...
    def add_ItemSelectionChanged(self, value: ListViewItemSelectionChangedEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_RetrieveVirtualItem(self, value: RetrieveVirtualItemEventHandler) -> None: ...
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    def add_SearchForVirtualItem(self, value: SearchForVirtualItemEventHandler) -> None: ...
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def add_VirtualItemsSelectionRangeChanged(self, value: ListViewVirtualItemsSelectionRangeChangedEventHandler) -> None: ...
    @overload
    def ArrangeIcons(self) -> None: ...
    @overload
    def ArrangeIcons(self, value: ListViewAlignment) -> None: ...
    def AutoResizeColumn(self, columnIndex: int, headerAutoResize: ColumnHeaderAutoResizeStyle) -> None: ...
    def AutoResizeColumns(self, headerAutoResize: ColumnHeaderAutoResizeStyle) -> None: ...
    def BeginUpdate(self) -> None: ...
    def Clear(self) -> None: ...
    def EndUpdate(self) -> None: ...
    def EnsureVisible(self, index: int) -> None: ...
    @overload
    def FindItemWithText(self, text: str) -> ListViewItem: ...
    @overload
    def FindItemWithText(self, text: str, includeSubItemsInSearch: bool, startIndex: int) -> ListViewItem: ...
    @overload
    def FindItemWithText(self, text: str, includeSubItemsInSearch: bool, startIndex: int, isPrefixSearch: bool) -> ListViewItem: ...
    @overload
    def FindNearestItem(self, dir: SearchDirectionHint, point: Point) -> ListViewItem: ...
    @overload
    def FindNearestItem(self, searchDirection: SearchDirectionHint, x: int, y: int) -> ListViewItem: ...
    @property
    def Activation(self) -> ItemActivation: ...
    @property
    def Alignment(self) -> ListViewAlignment: ...
    @property
    def AllowColumnReorder(self) -> bool: ...
    @property
    def AutoArrange(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BackgroundImageTiled(self) -> bool: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CheckBoxes(self) -> bool: ...
    @property
    def CheckedIndices(self) -> CheckedIndexCollection: ...
    @property
    def CheckedItems(self) -> CheckedListViewItemCollection: ...
    @property
    def Columns(self) -> ColumnHeaderCollection: ...
    @property
    def FocusedItem(self) -> ListViewItem: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FullRowSelect(self) -> bool: ...
    @property
    def GridLines(self) -> bool: ...
    @property
    def Groups(self) -> ListViewGroupCollection: ...
    @property
    def HeaderStyle(self) -> ColumnHeaderStyle: ...
    @property
    def HideSelection(self) -> bool: ...
    @property
    def HotTracking(self) -> bool: ...
    @property
    def HoverSelection(self) -> bool: ...
    @property
    def InsertionMark(self) -> ListViewInsertionMark: ...
    @property
    def Items(self) -> ListViewItemCollection: ...
    @property
    def LabelEdit(self) -> bool: ...
    @property
    def LabelWrap(self) -> bool: ...
    @property
    def LargeImageList(self) -> ImageList: ...
    @property
    def ListViewItemSorter(self) -> IComparer: ...
    @property
    def MultiSelect(self) -> bool: ...
    @property
    def OwnerDraw(self) -> bool: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def Scrollable(self) -> bool: ...
    @property
    def SelectedIndices(self) -> SelectedIndexCollection: ...
    @property
    def SelectedItems(self) -> SelectedListViewItemCollection: ...
    @property
    def ShowGroups(self) -> bool: ...
    @property
    def ShowItemToolTips(self) -> bool: ...
    @property
    def SmallImageList(self) -> ImageList: ...
    @property
    def Sorting(self) -> SortOrder: ...
    @property
    def StateImageList(self) -> ImageList: ...
    @property
    def Text(self) -> str: ...
    @property
    def TileSize(self) -> Size: ...
    @property
    def TopItem(self) -> ListViewItem: ...
    @property
    def UseCompatibleStateImageBehavior(self) -> bool: ...
    @property
    def View(self) -> View: ...
    @property
    def VirtualListSize(self) -> int: ...
    @property
    def VirtualMode(self) -> bool: ...
    def GetItemAt(self, x: int, y: int) -> ListViewItem: ...
    @overload
    def GetItemRect(self, index: int) -> Rectangle: ...
    @overload
    def GetItemRect(self, index: int, portion: ItemBoundsPortion) -> Rectangle: ...
    @overload
    def HitTest(self, point: Point) -> ListViewHitTestInfo: ...
    @overload
    def HitTest(self, x: int, y: int) -> ListViewHitTestInfo: ...
    def RedrawItems(self, startIndex: int, endIndex: int, invalidateOnly: bool) -> None: ...
    def remove_AfterLabelEdit(self, value: LabelEditEventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_BeforeLabelEdit(self, value: LabelEditEventHandler) -> None: ...
    def remove_CacheVirtualItems(self, value: CacheVirtualItemsEventHandler) -> None: ...
    def remove_ColumnClick(self, value: ColumnClickEventHandler) -> None: ...
    def remove_ColumnReordered(self, value: ColumnReorderedEventHandler) -> None: ...
    def remove_ColumnWidthChanged(self, value: ColumnWidthChangedEventHandler) -> None: ...
    def remove_ColumnWidthChanging(self, value: ColumnWidthChangingEventHandler) -> None: ...
    def remove_DrawColumnHeader(self, value: DrawListViewColumnHeaderEventHandler) -> None: ...
    def remove_DrawItem(self, value: DrawListViewItemEventHandler) -> None: ...
    def remove_DrawSubItem(self, value: DrawListViewSubItemEventHandler) -> None: ...
    def remove_ItemActivate(self, value: EventHandler) -> None: ...
    def remove_ItemCheck(self, value: ItemCheckEventHandler) -> None: ...
    def remove_ItemChecked(self, value: ItemCheckedEventHandler) -> None: ...
    def remove_ItemDrag(self, value: ItemDragEventHandler) -> None: ...
    def remove_ItemMouseHover(self, value: ListViewItemMouseHoverEventHandler) -> None: ...
    def remove_ItemSelectionChanged(self, value: ListViewItemSelectionChangedEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_RetrieveVirtualItem(self, value: RetrieveVirtualItemEventHandler) -> None: ...
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_SearchForVirtualItem(self, value: SearchForVirtualItemEventHandler) -> None: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def remove_VirtualItemsSelectionRangeChanged(self, value: ListViewVirtualItemsSelectionRangeChangedEventHandler) -> None: ...
    @Activation.setter
    def Activation(self, value: ItemActivation) -> None: ...
    @Alignment.setter
    def Alignment(self, value: ListViewAlignment) -> None: ...
    @AllowColumnReorder.setter
    def AllowColumnReorder(self, value: bool) -> None: ...
    @AutoArrange.setter
    def AutoArrange(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BackgroundImageTiled.setter
    def BackgroundImageTiled(self, value: bool) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @CheckBoxes.setter
    def CheckBoxes(self, value: bool) -> None: ...
    @FocusedItem.setter
    def FocusedItem(self, value: ListViewItem) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @FullRowSelect.setter
    def FullRowSelect(self, value: bool) -> None: ...
    @GridLines.setter
    def GridLines(self, value: bool) -> None: ...
    @HeaderStyle.setter
    def HeaderStyle(self, value: ColumnHeaderStyle) -> None: ...
    @HideSelection.setter
    def HideSelection(self, value: bool) -> None: ...
    @HotTracking.setter
    def HotTracking(self, value: bool) -> None: ...
    @HoverSelection.setter
    def HoverSelection(self, value: bool) -> None: ...
    @LabelEdit.setter
    def LabelEdit(self, value: bool) -> None: ...
    @LabelWrap.setter
    def LabelWrap(self, value: bool) -> None: ...
    @LargeImageList.setter
    def LargeImageList(self, value: ImageList) -> None: ...
    @ListViewItemSorter.setter
    def ListViewItemSorter(self, value: IComparer) -> None: ...
    @MultiSelect.setter
    def MultiSelect(self, value: bool) -> None: ...
    @OwnerDraw.setter
    def OwnerDraw(self, value: bool) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @Scrollable.setter
    def Scrollable(self, value: bool) -> None: ...
    @ShowGroups.setter
    def ShowGroups(self, value: bool) -> None: ...
    @ShowItemToolTips.setter
    def ShowItemToolTips(self, value: bool) -> None: ...
    @SmallImageList.setter
    def SmallImageList(self, value: ImageList) -> None: ...
    @Sorting.setter
    def Sorting(self, value: SortOrder) -> None: ...
    @StateImageList.setter
    def StateImageList(self, value: ImageList) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TileSize.setter
    def TileSize(self, value: Size) -> None: ...
    @TopItem.setter
    def TopItem(self, value: ListViewItem) -> None: ...
    @UseCompatibleStateImageBehavior.setter
    def UseCompatibleStateImageBehavior(self, value: bool) -> None: ...
    @View.setter
    def View(self, value: View) -> None: ...
    @VirtualListSize.setter
    def VirtualListSize(self, value: int) -> None: ...
    @VirtualMode.setter
    def VirtualMode(self, value: bool) -> None: ...
    def Sort(self) -> None: ...
    def ToString(self) -> str: ...


class ListViewAlignment:
    Default = 0
    Left = 1
    Top = 2
    SnapToGrid = 5


class ListViewGroup(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, header: str): ...
    @overload
    def __init__(self, key: str, headerText: str): ...
    @overload
    def __init__(self, header: str, headerAlignment: HorizontalAlignment): ...
    @property
    def Header(self) -> str: ...
    @property
    def HeaderAlignment(self) -> HorizontalAlignment: ...
    @property
    def Items(self) -> ListViewItemCollection: ...
    @property
    def ListView(self) -> ListView: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @Header.setter
    def Header(self, value: str) -> None: ...
    @HeaderAlignment.setter
    def HeaderAlignment(self, value: HorizontalAlignment) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    def ToString(self) -> str: ...


class ListViewGroupCollection(Object):
    @overload
    def Add(self, group: ListViewGroup) -> int: ...
    @overload
    def Add(self, key: str, headerText: str) -> ListViewGroup: ...
    @overload
    def AddRange(self, groups: ListViewGroupCollection) -> None: ...
    @overload
    def AddRange(self, groups: Set(ListViewGroup)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, value: ListViewGroup) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, key: str) -> ListViewGroup: ...
    @property
    def Item(self, index: int) -> ListViewGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: ListViewGroup) -> int: ...
    def Insert(self, index: int, group: ListViewGroup) -> None: ...
    def Remove(self, group: ListViewGroup) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ListViewGroup) -> None: ...
    @Item.setter
    def Item(self, key: str, value: ListViewGroup) -> None: ...


class ListViewHitTestInfo(Object):
    def __init__(self, hitItem: ListViewItem, hitSubItem: ListViewSubItem, hitLocation: ListViewHitTestLocations): ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def Location(self) -> ListViewHitTestLocations: ...
    @property
    def SubItem(self) -> ListViewSubItem: ...


class ListViewHitTestLocations:
    #None = 1
    Image = 2
    Label = 4
    BelowClientArea = 16
    RightOfClientArea = 32
    LeftOfClientArea = 64
    AboveClientArea = 256
    StateImage = 512


class ListViewInsertionMark(Object):
    @property
    def AppearsAfterItem(self) -> bool: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Color(self) -> Color: ...
    @property
    def Index(self) -> int: ...
    def NearestIndex(self, pt: Point) -> int: ...
    @AppearsAfterItem.setter
    def AppearsAfterItem(self, value: bool) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...


class ListViewItem(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, items: Set(str)): ...
    @overload
    def __init__(self, group: ListViewGroup): ...
    @overload
    def __init__(self, subItems: Set(ListViewSubItem), imageKey: str): ...
    @overload
    def __init__(self, items: Set(str), imageKey: str): ...
    @overload
    def __init__(self, text: str, imageKey: str): ...
    @overload
    def __init__(self, text: str, group: ListViewGroup): ...
    @overload
    def __init__(self, items: Set(str), group: ListViewGroup): ...
    @overload
    def __init__(self, items: Set(str), imageIndex: int): ...
    @overload
    def __init__(self, text: str, imageIndex: int): ...
    @overload
    def __init__(self, subItems: Set(ListViewSubItem), imageIndex: int): ...
    @overload
    def __init__(self, text: str, imageIndex: int, group: ListViewGroup): ...
    @overload
    def __init__(self, items: Set(str), imageIndex: int, group: ListViewGroup): ...
    @overload
    def __init__(self, subItems: Set(ListViewSubItem), imageIndex: int, group: ListViewGroup): ...
    @overload
    def __init__(self, text: str, imageKey: str, group: ListViewGroup): ...
    @overload
    def __init__(self, items: Set(str), imageKey: str, group: ListViewGroup): ...
    @overload
    def __init__(self, subItems: Set(ListViewSubItem), imageKey: str, group: ListViewGroup): ...
    @overload
    def __init__(self, items: Set(str), imageIndex: int, foreColor: Color, backColor: Color, font: Font): ...
    @overload
    def __init__(self, items: Set(str), imageKey: str, foreColor: Color, backColor: Color, font: Font): ...
    @overload
    def __init__(self, items: Set(str), imageKey: str, foreColor: Color, backColor: Color, font: Font, group: ListViewGroup): ...
    @overload
    def __init__(self, items: Set(str), imageIndex: int, foreColor: Color, backColor: Color, font: Font, group: ListViewGroup): ...
    def BeginEdit(self) -> None: ...
    def Clone(self) -> Object: ...
    def EnsureVisible(self) -> None: ...
    def FindNearestItem(self, searchDirection: SearchDirectionHint) -> ListViewItem: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Group(self) -> ListViewGroup: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def IndentCount(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def ListView(self) -> ListView: ...
    @property
    def Name(self) -> str: ...
    @property
    def Position(self) -> Point: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def StateImageIndex(self) -> int: ...
    @property
    def SubItems(self) -> ListViewSubItemCollection: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def UseItemStyleForSubItems(self) -> bool: ...
    def GetBounds(self, portion: ItemBoundsPortion) -> Rectangle: ...
    def GetSubItemAt(self, x: int, y: int) -> ListViewSubItem: ...
    def Remove(self) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...
    @Focused.setter
    def Focused(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Group.setter
    def Group(self, value: ListViewGroup) -> None: ...
    @ImageIndex.setter
    def ImageIndex(self, value: int) -> None: ...
    @ImageKey.setter
    def ImageKey(self, value: str) -> None: ...
    @IndentCount.setter
    def IndentCount(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Position.setter
    def Position(self, value: Point) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @StateImageIndex.setter
    def StateImageIndex(self, value: int) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTipText.setter
    def ToolTipText(self, value: str) -> None: ...
    @UseItemStyleForSubItems.setter
    def UseItemStyleForSubItems(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class ListViewItemCollection(Object):
    def __init__(self, owner: ListView): ...
    @overload
    def Add(self, text: str) -> ListViewItem: ...
    @overload
    def Add(self, value: ListViewItem) -> ListViewItem: ...
    @overload
    def Add(self, text: str, imageIndex: int) -> ListViewItem: ...
    @overload
    def Add(self, text: str, imageKey: str) -> ListViewItem: ...
    @overload
    def Add(self, key: str, text: str, imageKey: str) -> ListViewItem: ...
    @overload
    def Add(self, key: str, text: str, imageIndex: int) -> ListViewItem: ...
    @overload
    def AddRange(self, items: Set(ListViewItem)) -> None: ...
    @overload
    def AddRange(self, items: ListViewItemCollection) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, item: ListViewItem) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    def CopyTo(self, dest: Array, index: int) -> None: ...
    def Find(self, key: str, searchAllSubItems: bool) -> Set(ListViewItem): ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> ListViewItem: ...
    @property
    def Item(self, key: str) -> ListViewItem: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, item: ListViewItem) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Insert(self, index: int, item: ListViewItem) -> ListViewItem: ...
    @overload
    def Insert(self, index: int, text: str) -> ListViewItem: ...
    @overload
    def Insert(self, index: int, text: str, imageKey: str) -> ListViewItem: ...
    @overload
    def Insert(self, index: int, text: str, imageIndex: int) -> ListViewItem: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageIndex: int) -> ListViewItem: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageKey: str) -> ListViewItem: ...
    def Remove(self, item: ListViewItem) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ListViewItem) -> None: ...


class ListViewItemConverter(ExpandableObjectConverter):
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class ListViewItemMouseHoverEventArgs(EventArgs):
    def __init__(self, item: ListViewItem): ...
    @property
    def Item(self) -> ListViewItem: ...


class ListViewItemMouseHoverEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ListViewItemMouseHoverEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ListViewItemMouseHoverEventArgs) -> None: ...


class ListViewItemSelectionChangedEventArgs(EventArgs):
    def __init__(self, item: ListViewItem, itemIndex: int, isSelected: bool): ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def ItemIndex(self) -> int: ...


class ListViewItemSelectionChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ListViewItemSelectionChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ListViewItemSelectionChangedEventArgs) -> None: ...


class ListViewItemStateImageIndexConverter(ImageIndexConverter):
    def __init__(self): ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...


class ListViewItemStates:
    Selected = 1
    Grayed = 2
    Checked = 8
    Focused = 16
    Default = 32
    Hot = 64
    Marked = 128
    Indeterminate = 256
    ShowKeyboardCues = 512


class ListViewSubItem(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, owner: ListViewItem, text: str): ...
    @overload
    def __init__(self, owner: ListViewItem, text: str, foreColor: Color, backColor: Color, font: Font): ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    def ResetStyle(self) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ListViewSubItemCollection(Object):
    def __init__(self, owner: ListViewItem): ...
    @overload
    def Add(self, item: ListViewSubItem) -> ListViewSubItem: ...
    @overload
    def Add(self, text: str) -> ListViewSubItem: ...
    @overload
    def Add(self, text: str, foreColor: Color, backColor: Color, font: Font) -> ListViewSubItem: ...
    @overload
    def AddRange(self, items: Set(ListViewSubItem)) -> None: ...
    @overload
    def AddRange(self, items: Set(str)) -> None: ...
    @overload
    def AddRange(self, items: Set(str), foreColor: Color, backColor: Color, font: Font) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, subItem: ListViewSubItem) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> ListViewSubItem: ...
    @property
    def Item(self, key: str) -> ListViewSubItem: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, subItem: ListViewSubItem) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...
    def Insert(self, index: int, item: ListViewSubItem) -> None: ...
    def Remove(self, item: ListViewSubItem) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ListViewSubItem) -> None: ...


class ListViewVirtualItemsSelectionRangeChangedEventArgs(EventArgs):
    def __init__(self, startIndex: int, endIndex: int, isSelected: bool): ...
    @property
    def EndIndex(self) -> int: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def StartIndex(self) -> int: ...


class ListViewVirtualItemsSelectionRangeChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ListViewVirtualItemsSelectionRangeChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ListViewVirtualItemsSelectionRangeChangedEventArgs) -> None: ...


class MaskedTextBox(TextBoxBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, mask: str): ...
    @overload
    def __init__(self, maskedTextProvider: MaskedTextProvider): ...
    @overload
    def add_AcceptsTabChanged(self, value: EventHandler) -> None: ...
    def add_IsOverwriteModeChanged(self, value: EventHandler) -> None: ...
    def add_MaskChanged(self, value: EventHandler) -> None: ...
    def add_MaskInputRejected(self, value: MaskInputRejectedEventHandler) -> None: ...
    @overload
    def add_MultilineChanged(self, value: EventHandler) -> None: ...
    def add_TextAlignChanged(self, value: EventHandler) -> None: ...
    def add_TypeValidationCompleted(self, value: TypeValidationEventHandler) -> None: ...
    @overload
    def ClearUndo(self) -> None: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def AllowPromptAsInput(self) -> bool: ...
    @property
    def AsciiOnly(self) -> bool: ...
    @property
    def BeepOnError(self) -> bool: ...
    @property
    def CanUndo(self) -> bool: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def CutCopyMaskFormat(self) -> MaskFormat: ...
    @property
    def FormatProvider(self) -> IFormatProvider: ...
    @property
    def HidePromptOnLeave(self) -> bool: ...
    @property
    def InsertKeyMode(self) -> InsertKeyMode: ...
    @property
    def IsOverwriteMode(self) -> bool: ...
    @property
    def Lines(self) -> Set(str): ...
    @property
    def Mask(self) -> str: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def MaskedTextProvider(self) -> MaskedTextProvider: ...
    @property
    def MaskFull(self) -> bool: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def PasswordChar(self) -> Char: ...
    @property
    def PromptChar(self) -> Char: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def RejectInputOnFirstFailure(self) -> bool: ...
    @property
    def ResetOnPrompt(self) -> bool: ...
    @property
    def ResetOnSpace(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SkipLiterals(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> HorizontalAlignment: ...
    @property
    def TextLength(self) -> int: ...
    @property
    def TextMaskFormat(self) -> MaskFormat: ...
    @property
    def UseSystemPasswordChar(self) -> bool: ...
    @property
    def ValidatingType(self) -> Type: ...
    @property
    def WordWrap(self) -> bool: ...
    def GetCharFromPosition(self, pt: Point) -> Char: ...
    def GetCharIndexFromPosition(self, pt: Point) -> int: ...
    @overload
    def GetFirstCharIndexFromLine(self, lineNumber: int) -> int: ...
    @overload
    def GetFirstCharIndexOfCurrentLine(self) -> int: ...
    def GetLineFromCharIndex(self, index: int) -> int: ...
    def GetPositionFromCharIndex(self, index: int) -> Point: ...
    @overload
    def remove_AcceptsTabChanged(self, value: EventHandler) -> None: ...
    def remove_IsOverwriteModeChanged(self, value: EventHandler) -> None: ...
    def remove_MaskChanged(self, value: EventHandler) -> None: ...
    def remove_MaskInputRejected(self, value: MaskInputRejectedEventHandler) -> None: ...
    @overload
    def remove_MultilineChanged(self, value: EventHandler) -> None: ...
    def remove_TextAlignChanged(self, value: EventHandler) -> None: ...
    def remove_TypeValidationCompleted(self, value: TypeValidationEventHandler) -> None: ...
    @overload
    def ScrollToCaret(self) -> None: ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: bool) -> None: ...
    @AllowPromptAsInput.setter
    def AllowPromptAsInput(self, value: bool) -> None: ...
    @AsciiOnly.setter
    def AsciiOnly(self, value: bool) -> None: ...
    @BeepOnError.setter
    def BeepOnError(self, value: bool) -> None: ...
    @Culture.setter
    def Culture(self, value: CultureInfo) -> None: ...
    @CutCopyMaskFormat.setter
    def CutCopyMaskFormat(self, value: MaskFormat) -> None: ...
    @FormatProvider.setter
    def FormatProvider(self, value: IFormatProvider) -> None: ...
    @HidePromptOnLeave.setter
    def HidePromptOnLeave(self, value: bool) -> None: ...
    @InsertKeyMode.setter
    def InsertKeyMode(self, value: InsertKeyMode) -> None: ...
    @Lines.setter
    def Lines(self, value: Set(str)) -> None: ...
    @Mask.setter
    def Mask(self, value: str) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @Multiline.setter
    def Multiline(self, value: bool) -> None: ...
    @PasswordChar.setter
    def PasswordChar(self, value: Char) -> None: ...
    @PromptChar.setter
    def PromptChar(self, value: Char) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @RejectInputOnFirstFailure.setter
    def RejectInputOnFirstFailure(self, value: bool) -> None: ...
    @ResetOnPrompt.setter
    def ResetOnPrompt(self, value: bool) -> None: ...
    @ResetOnSpace.setter
    def ResetOnSpace(self, value: bool) -> None: ...
    @SelectedText.setter
    def SelectedText(self, value: str) -> None: ...
    @SkipLiterals.setter
    def SkipLiterals(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: HorizontalAlignment) -> None: ...
    @TextMaskFormat.setter
    def TextMaskFormat(self, value: MaskFormat) -> None: ...
    @UseSystemPasswordChar.setter
    def UseSystemPasswordChar(self, value: bool) -> None: ...
    @ValidatingType.setter
    def ValidatingType(self, value: Type) -> None: ...
    @WordWrap.setter
    def WordWrap(self, value: bool) -> None: ...
    def ToString(self) -> str: ...
    @overload
    def Undo(self) -> None: ...
    def ValidateText(self) -> Object: ...


class MaskFormat:
    ExcludePromptAndLiterals = 0
    IncludePrompt = 1
    IncludeLiterals = 2
    IncludePromptAndLiterals = 3


class MaskInputRejectedEventArgs(EventArgs):
    def __init__(self, position: int, rejectionHint: MaskedTextResultHint): ...
    @property
    def Position(self) -> int: ...
    @property
    def RejectionHint(self) -> MaskedTextResultHint: ...


class MaskInputRejectedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: MaskInputRejectedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: MaskInputRejectedEventArgs) -> None: ...


class MdiClient(Control):
    def __init__(self): ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def MdiChildren(self) -> Set(Form): ...
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...


class MdiLayout:
    Cascade = 0
    TileHorizontal = 1
    TileVertical = 2
    ArrangeIcons = 3


class MeasureItemEventArgs(EventArgs):
    @overload
    def __init__(self, graphics: Graphics, index: int): ...
    @overload
    def __init__(self, graphics: Graphics, index: int, itemHeight: int): ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Index(self) -> int: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def ItemWidth(self) -> int: ...
    @ItemHeight.setter
    def ItemHeight(self, value: int) -> None: ...
    @ItemWidth.setter
    def ItemWidth(self, value: int) -> None: ...


class MeasureItemEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: MeasureItemEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: MeasureItemEventArgs) -> None: ...


class MenuGlyph:
    Arrow = 0
    Min = 0
    Checkmark = 1
    Bullet = 2
    Max = 2


class MenuMerge:
    Add = 0
    Replace = 1
    MergeItems = 2
    Remove = 3


class MenuStrip(ToolStrip):
    def __init__(self): ...
    def add_MenuActivate(self, value: EventHandler) -> None: ...
    def add_MenuDeactivate(self, value: EventHandler) -> None: ...
    @property
    def CanOverflow(self) -> bool: ...
    @property
    def GripStyle(self) -> ToolStripGripStyle: ...
    @property
    def MdiWindowListItem(self) -> ToolStripMenuItem: ...
    @property
    def ShowItemToolTips(self) -> bool: ...
    @property
    def Stretch(self) -> bool: ...
    def remove_MenuActivate(self, value: EventHandler) -> None: ...
    def remove_MenuDeactivate(self, value: EventHandler) -> None: ...
    @CanOverflow.setter
    def CanOverflow(self, value: bool) -> None: ...
    @GripStyle.setter
    def GripStyle(self, value: ToolStripGripStyle) -> None: ...
    @MdiWindowListItem.setter
    def MdiWindowListItem(self, value: ToolStripMenuItem) -> None: ...
    @ShowItemToolTips.setter
    def ShowItemToolTips(self, value: bool) -> None: ...
    @Stretch.setter
    def Stretch(self, value: bool) -> None: ...


class MergeAction:
    Append = 0
    Insert = 1
    Replace = 2
    Remove = 3
    MatchOnly = 4


class Message(ValueType):
    def Create(hWnd: IntPtr, msg: int, wparam: IntPtr, lparam: IntPtr) -> Message: ...
    def Equals(self, o: Object) -> bool: ...
    @property
    def HWnd(self) -> IntPtr: ...
    @property
    def LParam(self) -> IntPtr: ...
    @property
    def Msg(self) -> int: ...
    @property
    def Result(self) -> IntPtr: ...
    @property
    def WParam(self) -> IntPtr: ...
    def GetHashCode(self) -> int: ...
    def GetLParam(self, cls: Type) -> Object: ...
    def op_Equality(a: Message, b: Message) -> bool: ...
    def op_Inequality(a: Message, b: Message) -> bool: ...
    @HWnd.setter
    def HWnd(self, value: IntPtr) -> None: ...
    @LParam.setter
    def LParam(self, value: IntPtr) -> None: ...
    @Msg.setter
    def Msg(self, value: int) -> None: ...
    @Result.setter
    def Result(self, value: IntPtr) -> None: ...
    @WParam.setter
    def WParam(self, value: IntPtr) -> None: ...
    def ToString(self) -> str: ...


class MessageBox(Object):
    @overload
    def Show(text: str) -> DialogResult: ...
    @overload
    def Show(owner: IWin32Window, text: str) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str) -> DialogResult: ...
    @overload
    def Show(owner: IWin32Window, text: str, caption: str) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, buttons: MessageBoxButtons) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon) -> DialogResult: ...
    @overload
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon) -> DialogResult: ...
    @overload
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, displayHelpButton: bool) -> DialogResult: ...
    @overload
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, keyword: str) -> DialogResult: ...
    @overload
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator, param: Object) -> DialogResult: ...
    @overload
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, keyword: str) -> DialogResult: ...
    @overload
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator) -> DialogResult: ...
    @overload
    def Show(owner: IWin32Window, text: str, caption: str, buttons: MessageBoxButtons, icon: MessageBoxIcon, defaultButton: MessageBoxDefaultButton, options: MessageBoxOptions, helpFilePath: str, navigator: HelpNavigator, param: Object) -> DialogResult: ...


class MessageBoxButtons:
    OK = 0
    OKCancel = 1
    AbortRetryIgnore = 2
    YesNoCancel = 3
    YesNo = 4
    RetryCancel = 5


class MessageBoxDefaultButton:
    Button1 = 0
    Button2 = 256
    Button3 = 512


class MessageBoxIcon:
    #None = 0
    Hand = 16
    Error = 16
    Stop = 16
    Question = 32
    Exclamation = 48
    Warning = 48
    Asterisk = 64
    Information = 64


class MessageBoxOptions:
    DefaultDesktopOnly = 131072
    RightAlign = 524288
    RtlReading = 1048576
    ServiceNotification = 2097152


class MessageLoopCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    def Invoke(self) -> bool: ...


class MethodInvoker(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class MonthCalendar(Control):
    def __init__(self): ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    def add_DateChanged(self, value: DateRangeEventHandler) -> None: ...
    def add_DateSelected(self, value: DateRangeEventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def AddAnnuallyBoldedDate(self, date: DateTime) -> None: ...
    def AddBoldedDate(self, date: DateTime) -> None: ...
    def AddMonthlyBoldedDate(self, date: DateTime) -> None: ...
    @property
    def AnnuallyBoldedDates(self) -> Set(DateTime): ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BoldedDates(self) -> Set(DateTime): ...
    @property
    def CalendarDimensions(self) -> Size: ...
    @property
    def FirstDayOfWeek(self) -> Day: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def MaxDate(self) -> DateTime: ...
    @property
    def MaxSelectionCount(self) -> int: ...
    @property
    def MinDate(self) -> DateTime: ...
    @property
    def MonthlyBoldedDates(self) -> Set(DateTime): ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ScrollChange(self) -> int: ...
    @property
    def SelectionEnd(self) -> DateTime: ...
    @property
    def SelectionRange(self) -> SelectionRange: ...
    @property
    def SelectionStart(self) -> DateTime: ...
    @property
    def ShowToday(self) -> bool: ...
    @property
    def ShowTodayCircle(self) -> bool: ...
    @property
    def ShowWeekNumbers(self) -> bool: ...
    @property
    def SingleMonthSize(self) -> Size: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Text(self) -> str: ...
    @property
    def TitleBackColor(self) -> Color: ...
    @property
    def TitleForeColor(self) -> Color: ...
    @property
    def TodayDate(self) -> DateTime: ...
    @property
    def TodayDateSet(self) -> bool: ...
    @property
    def TrailingForeColor(self) -> Color: ...
    def GetDisplayRange(self, visible: bool) -> SelectionRange: ...
    @overload
    def HitTest(self, point: Point) -> HitTestInfo: ...
    @overload
    def HitTest(self, x: int, y: int) -> HitTestInfo: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_DateChanged(self, value: DateRangeEventHandler) -> None: ...
    def remove_DateSelected(self, value: DateRangeEventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def RemoveAllAnnuallyBoldedDates(self) -> None: ...
    def RemoveAllBoldedDates(self) -> None: ...
    def RemoveAllMonthlyBoldedDates(self) -> None: ...
    def RemoveAnnuallyBoldedDate(self, date: DateTime) -> None: ...
    def RemoveBoldedDate(self, date: DateTime) -> None: ...
    def RemoveMonthlyBoldedDate(self, date: DateTime) -> None: ...
    @AnnuallyBoldedDates.setter
    def AnnuallyBoldedDates(self, value: Set(DateTime)) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BoldedDates.setter
    def BoldedDates(self, value: Set(DateTime)) -> None: ...
    @CalendarDimensions.setter
    def CalendarDimensions(self, value: Size) -> None: ...
    @FirstDayOfWeek.setter
    def FirstDayOfWeek(self, value: Day) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @MaxDate.setter
    def MaxDate(self, value: DateTime) -> None: ...
    @MaxSelectionCount.setter
    def MaxSelectionCount(self, value: int) -> None: ...
    @MinDate.setter
    def MinDate(self, value: DateTime) -> None: ...
    @MonthlyBoldedDates.setter
    def MonthlyBoldedDates(self, value: Set(DateTime)) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @ScrollChange.setter
    def ScrollChange(self, value: int) -> None: ...
    @SelectionEnd.setter
    def SelectionEnd(self, value: DateTime) -> None: ...
    @SelectionRange.setter
    def SelectionRange(self, value: SelectionRange) -> None: ...
    @SelectionStart.setter
    def SelectionStart(self, value: DateTime) -> None: ...
    @ShowToday.setter
    def ShowToday(self, value: bool) -> None: ...
    @ShowTodayCircle.setter
    def ShowTodayCircle(self, value: bool) -> None: ...
    @ShowWeekNumbers.setter
    def ShowWeekNumbers(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TitleBackColor.setter
    def TitleBackColor(self, value: Color) -> None: ...
    @TitleForeColor.setter
    def TitleForeColor(self, value: Color) -> None: ...
    @TodayDate.setter
    def TodayDate(self, value: DateTime) -> None: ...
    @TrailingForeColor.setter
    def TrailingForeColor(self, value: Color) -> None: ...
    def SetCalendarDimensions(self, x: int, y: int) -> None: ...
    def SetDate(self, date: DateTime) -> None: ...
    def SetSelectionRange(self, date1: DateTime, date2: DateTime) -> None: ...
    def ToString(self) -> str: ...
    def UpdateBoldedDates(self) -> None: ...


class MouseButtons:
    #None = 0
    Left = 1048576
    Right = 2097152
    Middle = 4194304
    XButton1 = 8388608
    XButton2 = 16777216


class MouseEventArgs(EventArgs):
    def __init__(self, button: MouseButtons, clicks: int, x: int, y: int, delta: int): ...
    @property
    def Button(self) -> MouseButtons: ...
    @property
    def Clicks(self) -> int: ...
    @property
    def Delta(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...


class MouseEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: MouseEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: MouseEventArgs) -> None: ...


class NativeWindow(MarshalByRefObject):
    def __init__(self): ...
    def AssignHandle(self, handle: IntPtr) -> None: ...
    def CreateHandle(self, cp: CreateParams) -> None: ...
    def DefWndProc(self, m: Message) -> Tuple[Message]: ...
    def DestroyHandle(self) -> None: ...
    def FromHandle(handle: IntPtr) -> NativeWindow: ...
    @property
    def Handle(self) -> IntPtr: ...
    def ReleaseHandle(self) -> None: ...


class NavigateEventArgs(EventArgs):
    def __init__(self, isForward: bool): ...
    @property
    def Forward(self) -> bool: ...


class NavigateEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, ne: NavigateEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, ne: NavigateEventArgs) -> None: ...


class NodeLabelEditEventArgs(EventArgs):
    @overload
    def __init__(self, node: TreeNode): ...
    @overload
    def __init__(self, node: TreeNode, label: str): ...
    @property
    def CancelEdit(self) -> bool: ...
    @property
    def Label(self) -> str: ...
    @property
    def Node(self) -> TreeNode: ...
    @CancelEdit.setter
    def CancelEdit(self, value: bool) -> None: ...


class NodeLabelEditEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: NodeLabelEditEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: NodeLabelEditEventArgs) -> None: ...


class NotifyIcon(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: IContainer): ...
    def add_BalloonTipClicked(self, value: EventHandler) -> None: ...
    def add_BalloonTipClosed(self, value: EventHandler) -> None: ...
    def add_BalloonTipShown(self, value: EventHandler) -> None: ...
    def add_Click(self, value: EventHandler) -> None: ...
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @property
    def BalloonTipIcon(self) -> ToolTipIcon: ...
    @property
    def BalloonTipText(self) -> str: ...
    @property
    def BalloonTipTitle(self) -> str: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    def remove_BalloonTipClicked(self, value: EventHandler) -> None: ...
    def remove_BalloonTipClosed(self, value: EventHandler) -> None: ...
    def remove_BalloonTipShown(self, value: EventHandler) -> None: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @BalloonTipIcon.setter
    def BalloonTipIcon(self, value: ToolTipIcon) -> None: ...
    @BalloonTipText.setter
    def BalloonTipText(self, value: str) -> None: ...
    @BalloonTipTitle.setter
    def BalloonTipTitle(self, value: str) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @overload
    def ShowBalloonTip(self, timeout: int) -> None: ...
    @overload
    def ShowBalloonTip(self, timeout: int, tipTitle: str, tipText: str, tipIcon: ToolTipIcon) -> None: ...


class NumericUpDown(UpDownBase):
    def __init__(self): ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    def BeginInit(self) -> None: ...
    def DownButton(self) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def Accelerations(self) -> NumericUpDownAccelerationCollection: ...
    @property
    def DecimalPlaces(self) -> int: ...
    @property
    def Hexadecimal(self) -> bool: ...
    @property
    def Increment(self) -> Decimal: ...
    @property
    def Maximum(self) -> Decimal: ...
    @property
    def Minimum(self) -> Decimal: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Text(self) -> str: ...
    @property
    def ThousandsSeparator(self) -> bool: ...
    @property
    def Value(self) -> Decimal: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @DecimalPlaces.setter
    def DecimalPlaces(self, value: int) -> None: ...
    @Hexadecimal.setter
    def Hexadecimal(self, value: bool) -> None: ...
    @Increment.setter
    def Increment(self, value: Decimal) -> None: ...
    @Maximum.setter
    def Maximum(self, value: Decimal) -> None: ...
    @Minimum.setter
    def Minimum(self, value: Decimal) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ThousandsSeparator.setter
    def ThousandsSeparator(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Decimal) -> None: ...
    def ToString(self) -> str: ...
    def UpButton(self) -> None: ...


class NumericUpDownAcceleration(Object):
    def __init__(self, seconds: int, increment: Decimal): ...
    @property
    def Increment(self) -> Decimal: ...
    @property
    def Seconds(self) -> int: ...
    @Increment.setter
    def Increment(self, value: Decimal) -> None: ...
    @Seconds.setter
    def Seconds(self, value: int) -> None: ...


class NumericUpDownAccelerationCollection(MarshalByRefObject):
    def __init__(self): ...
    def Add(self, acceleration: NumericUpDownAcceleration) -> None: ...
    def AddRange(self, accelerations: Set(NumericUpDownAcceleration)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, acceleration: NumericUpDownAcceleration) -> bool: ...
    def CopyTo(self, array: Set(NumericUpDownAcceleration), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> NumericUpDownAcceleration: ...
    def Remove(self, acceleration: NumericUpDownAcceleration) -> bool: ...


class ObjectCollection(Object):
    def __init__(self, owner: DataGridViewComboBoxCell): ...
    def Add(self, item: Object) -> int: ...
    @overload
    def AddRange(self, items: Set(Object)) -> None: ...
    @overload
    def AddRange(self, value: ObjectCollection) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, value: Object) -> bool: ...
    def CopyTo(self, destination: Set(Object), arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: Object) -> int: ...
    def Insert(self, index: int, item: Object) -> None: ...
    def Remove(self, value: Object) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...


class ObjectCollection(Object):
    def __init__(self, owner: ComboBox): ...
    def Add(self, item: Object) -> int: ...
    def AddRange(self, items: Set(Object)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, value: Object) -> bool: ...
    def CopyTo(self, destination: Set(Object), arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: Object) -> int: ...
    def Insert(self, index: int, item: Object) -> None: ...
    def Remove(self, value: Object) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...


class ObjectCollection(Object):
    @overload
    def __init__(self, owner: ListBox): ...
    @overload
    def __init__(self, owner: ListBox, value: ObjectCollection): ...
    @overload
    def __init__(self, owner: ListBox, value: Set(Object)): ...
    def Add(self, item: Object) -> int: ...
    @overload
    def AddRange(self, value: ObjectCollection) -> None: ...
    @overload
    def AddRange(self, items: Set(Object)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, value: Object) -> bool: ...
    def CopyTo(self, destination: Set(Object), arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: Object) -> int: ...
    def Insert(self, index: int, item: Object) -> None: ...
    def Remove(self, value: Object) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...


class ObjectCollection:
    def __init__(self, owner: CheckedListBox): ...
    @overload
    def Add(self, item: Object, isChecked: bool) -> int: ...
    @overload
    def Add(self, item: Object, check: CheckState) -> int: ...


class OpacityConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class OpenFileDialog(FileDialog):
    def __init__(self): ...
    @property
    def CheckFileExists(self) -> bool: ...
    @property
    def Multiselect(self) -> bool: ...
    @property
    def ReadOnlyChecked(self) -> bool: ...
    @property
    def SafeFileName(self) -> str: ...
    @property
    def SafeFileNames(self) -> Set(str): ...
    @property
    def ShowReadOnly(self) -> bool: ...
    def OpenFile(self) -> Stream: ...
    def Reset(self) -> None: ...
    @CheckFileExists.setter
    def CheckFileExists(self, value: bool) -> None: ...
    @Multiselect.setter
    def Multiselect(self, value: bool) -> None: ...
    @ReadOnlyChecked.setter
    def ReadOnlyChecked(self, value: bool) -> None: ...
    @ShowReadOnly.setter
    def ShowReadOnly(self, value: bool) -> None: ...


class Orientation:
    Horizontal = 0
    Vertical = 1


class OSFeature(FeatureSupport):
    @property
    def Feature() -> OSFeature: ...
    def GetVersionPresent(self, feature: Object) -> Version: ...
    @overload
    def IsPresent(enumVal: SystemParameter) -> bool: ...


class OwnerDrawPropertyBag(MarshalByRefObject):
    def Copy(value: OwnerDrawPropertyBag) -> OwnerDrawPropertyBag: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    def IsEmpty(self) -> bool: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...


class Padding(ValueType):
    @overload
    def __init__(self, all: int): ...
    @overload
    def __init__(self, left: int, top: int, right: int, bottom: int): ...
    def Add(p1: Padding, p2: Padding) -> Padding: ...
    def Equals(self, other: Object) -> bool: ...
    @property
    def All(self) -> int: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Horizontal(self) -> int: ...
    @property
    def Left(self) -> int: ...
    @property
    def Right(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Top(self) -> int: ...
    @property
    def Vertical(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Addition(p1: Padding, p2: Padding) -> Padding: ...
    def op_Equality(p1: Padding, p2: Padding) -> bool: ...
    def op_Inequality(p1: Padding, p2: Padding) -> bool: ...
    def op_Subtraction(p1: Padding, p2: Padding) -> Padding: ...
    @All.setter
    def All(self, value: int) -> None: ...
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Right.setter
    def Right(self, value: int) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    def Subtract(p1: Padding, p2: Padding) -> Padding: ...
    def ToString(self) -> str: ...


class PaddingConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> Object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class PageSetupDialog(CommonDialog):
    def __init__(self): ...
    @property
    def AllowMargins(self) -> bool: ...
    @property
    def AllowOrientation(self) -> bool: ...
    @property
    def AllowPaper(self) -> bool: ...
    @property
    def AllowPrinter(self) -> bool: ...
    @property
    def Document(self) -> PrintDocument: ...
    @property
    def EnableMetric(self) -> bool: ...
    @property
    def MinMargins(self) -> Margins: ...
    @property
    def PageSettings(self) -> PageSettings: ...
    @property
    def PrinterSettings(self) -> PrinterSettings: ...
    @property
    def ShowHelp(self) -> bool: ...
    @property
    def ShowNetwork(self) -> bool: ...
    def Reset(self) -> None: ...
    @AllowMargins.setter
    def AllowMargins(self, value: bool) -> None: ...
    @AllowOrientation.setter
    def AllowOrientation(self, value: bool) -> None: ...
    @AllowPaper.setter
    def AllowPaper(self, value: bool) -> None: ...
    @AllowPrinter.setter
    def AllowPrinter(self, value: bool) -> None: ...
    @Document.setter
    def Document(self, value: PrintDocument) -> None: ...
    @EnableMetric.setter
    def EnableMetric(self, value: bool) -> None: ...
    @MinMargins.setter
    def MinMargins(self, value: Margins) -> None: ...
    @PageSettings.setter
    def PageSettings(self, value: PageSettings) -> None: ...
    @PrinterSettings.setter
    def PrinterSettings(self, value: PrinterSettings) -> None: ...
    @ShowHelp.setter
    def ShowHelp(self, value: bool) -> None: ...
    @ShowNetwork.setter
    def ShowNetwork(self, value: bool) -> None: ...


class PaintEventArgs(EventArgs):
    def __init__(self, graphics: Graphics, clipRect: Rectangle): ...
    def Dispose(self) -> None: ...
    @property
    def ClipRectangle(self) -> Rectangle: ...
    @property
    def Graphics(self) -> Graphics: ...


class PaintEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PaintEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PaintEventArgs) -> None: ...


class Panel(ScrollableControl):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class PictureBox(Control):
    def __init__(self): ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    def add_LoadCompleted(self, value: AsyncCompletedEventHandler) -> None: ...
    def add_LoadProgressChanged(self, value: ProgressChangedEventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    def add_SizeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def CancelAsync(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ErrorImage(self) -> Image: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Image(self) -> Image: ...
    @property
    def ImageLocation(self) -> str: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InitialImage(self) -> Image: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def SizeMode(self) -> PictureBoxSizeMode: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def WaitOnLoad(self) -> bool: ...
    @overload
    def Load(self) -> None: ...
    @overload
    def Load(self, url: str) -> None: ...
    @overload
    def LoadAsync(self) -> None: ...
    @overload
    def LoadAsync(self, url: str) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    def remove_LoadCompleted(self, value: AsyncCompletedEventHandler) -> None: ...
    def remove_LoadProgressChanged(self, value: ProgressChangedEventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    def remove_SizeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ErrorImage.setter
    def ErrorImage(self, value: Image) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @ImageLocation.setter
    def ImageLocation(self, value: str) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @InitialImage.setter
    def InitialImage(self, value: Image) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @SizeMode.setter
    def SizeMode(self, value: PictureBoxSizeMode) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @WaitOnLoad.setter
    def WaitOnLoad(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class PictureBoxSizeMode:
    Normal = 0
    StretchImage = 1
    AutoSize = 2
    CenterImage = 3
    Zoom = 4


class PopupEventArgs(CancelEventArgs):
    def __init__(self, associatedWindow: IWin32Window, associatedControl: Control, isBalloon: bool, size: Size): ...
    @property
    def AssociatedControl(self) -> Control: ...
    @property
    def AssociatedWindow(self) -> IWin32Window: ...
    @property
    def IsBalloon(self) -> bool: ...
    @property
    def ToolTipSize(self) -> Size: ...
    @ToolTipSize.setter
    def ToolTipSize(self, value: Size) -> None: ...


class PopupEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PopupEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PopupEventArgs) -> None: ...


class PowerLineStatus:
    Offline = 0
    Online = 1
    Unknown = 255


class PowerState:
    Suspend = 0
    Hibernate = 1


class PowerStatus(Object):
    @property
    def BatteryChargeStatus(self) -> BatteryChargeStatus: ...
    @property
    def BatteryFullLifetime(self) -> int: ...
    @property
    def BatteryLifePercent(self) -> Single: ...
    @property
    def BatteryLifeRemaining(self) -> int: ...
    @property
    def PowerLineStatus(self) -> PowerLineStatus: ...


class PreProcessControlState:
    MessageProcessed = 0
    MessageNeeded = 1
    MessageNotNeeded = 2


class PreviewKeyDownEventArgs(EventArgs):
    def __init__(self, keyData: Keys): ...
    @property
    def Alt(self) -> bool: ...
    @property
    def Control(self) -> bool: ...
    @property
    def IsInputKey(self) -> bool: ...
    @property
    def KeyCode(self) -> Keys: ...
    @property
    def KeyData(self) -> Keys: ...
    @property
    def KeyValue(self) -> int: ...
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def Shift(self) -> bool: ...
    @IsInputKey.setter
    def IsInputKey(self, value: bool) -> None: ...


class PreviewKeyDownEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PreviewKeyDownEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PreviewKeyDownEventArgs) -> None: ...


class PrintControllerWithStatusDialog(PrintController):
    @overload
    def __init__(self, underlyingController: PrintController): ...
    @overload
    def __init__(self, underlyingController: PrintController, dialogTitle: str): ...
    @property
    def IsPreview(self) -> bool: ...
    def OnEndPage(self, document: PrintDocument, e: PrintPageEventArgs) -> None: ...
    def OnEndPrint(self, document: PrintDocument, e: PrintEventArgs) -> None: ...
    def OnStartPage(self, document: PrintDocument, e: PrintPageEventArgs) -> Graphics: ...
    def OnStartPrint(self, document: PrintDocument, e: PrintEventArgs) -> None: ...


class PrintDialog(CommonDialog):
    def __init__(self): ...
    @property
    def AllowCurrentPage(self) -> bool: ...
    @property
    def AllowPrintToFile(self) -> bool: ...
    @property
    def AllowSelection(self) -> bool: ...
    @property
    def AllowSomePages(self) -> bool: ...
    @property
    def Document(self) -> PrintDocument: ...
    @property
    def PrinterSettings(self) -> PrinterSettings: ...
    @property
    def PrintToFile(self) -> bool: ...
    @property
    def ShowHelp(self) -> bool: ...
    @property
    def ShowNetwork(self) -> bool: ...
    @property
    def UseEXDialog(self) -> bool: ...
    def Reset(self) -> None: ...
    @AllowCurrentPage.setter
    def AllowCurrentPage(self, value: bool) -> None: ...
    @AllowPrintToFile.setter
    def AllowPrintToFile(self, value: bool) -> None: ...
    @AllowSelection.setter
    def AllowSelection(self, value: bool) -> None: ...
    @AllowSomePages.setter
    def AllowSomePages(self, value: bool) -> None: ...
    @Document.setter
    def Document(self, value: PrintDocument) -> None: ...
    @PrinterSettings.setter
    def PrinterSettings(self, value: PrinterSettings) -> None: ...
    @PrintToFile.setter
    def PrintToFile(self, value: bool) -> None: ...
    @ShowHelp.setter
    def ShowHelp(self, value: bool) -> None: ...
    @ShowNetwork.setter
    def ShowNetwork(self, value: bool) -> None: ...
    @UseEXDialog.setter
    def UseEXDialog(self, value: bool) -> None: ...


class PrintPreviewControl(Control):
    def __init__(self): ...
    def add_StartPageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoZoom(self) -> bool: ...
    @property
    def Columns(self) -> int: ...
    @property
    def Document(self) -> PrintDocument: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def Rows(self) -> int: ...
    @property
    def StartPage(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def UseAntiAlias(self) -> bool: ...
    @property
    def Zoom(self) -> float: ...
    def InvalidatePreview(self) -> None: ...
    def remove_StartPageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def ResetBackColor(self) -> None: ...
    def ResetForeColor(self) -> None: ...
    @AutoZoom.setter
    def AutoZoom(self, value: bool) -> None: ...
    @Columns.setter
    def Columns(self, value: int) -> None: ...
    @Document.setter
    def Document(self, value: PrintDocument) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @Rows.setter
    def Rows(self, value: int) -> None: ...
    @StartPage.setter
    def StartPage(self, value: int) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @UseAntiAlias.setter
    def UseAntiAlias(self, value: bool) -> None: ...
    @Zoom.setter
    def Zoom(self, value: float) -> None: ...


class PrintPreviewDialog(Form):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScale(self) -> bool: ...
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def CancelButton(self) -> IButtonControl: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def ControlBox(self) -> bool: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Document(self) -> PrintDocument: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @property
    def HelpButton(self) -> bool: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def IsMdiContainer(self) -> bool: ...
    @property
    def KeyPreview(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximizeBox(self) -> bool: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MinimizeBox(self) -> bool: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PrintPreviewControl(self) -> PrintPreviewControl: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def TopMost(self) -> bool: ...
    @property
    def TransparencyKey(self) -> Color: ...
    @property
    def UseAntiAlias(self) -> bool: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WindowState(self) -> FormWindowState: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Document.setter
    def Document(self, value: PrintDocument) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @UseAntiAlias.setter
    def UseAntiAlias(self, value: bool) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...


class ProfessionalColors(Object):
    @property
    def ButtonCheckedGradientBegin() -> Color: ...
    @property
    def ButtonCheckedGradientEnd() -> Color: ...
    @property
    def ButtonCheckedGradientMiddle() -> Color: ...
    @property
    def ButtonCheckedHighlight() -> Color: ...
    @property
    def ButtonCheckedHighlightBorder() -> Color: ...
    @property
    def ButtonPressedBorder() -> Color: ...
    @property
    def ButtonPressedGradientBegin() -> Color: ...
    @property
    def ButtonPressedGradientEnd() -> Color: ...
    @property
    def ButtonPressedGradientMiddle() -> Color: ...
    @property
    def ButtonPressedHighlight() -> Color: ...
    @property
    def ButtonPressedHighlightBorder() -> Color: ...
    @property
    def ButtonSelectedBorder() -> Color: ...
    @property
    def ButtonSelectedGradientBegin() -> Color: ...
    @property
    def ButtonSelectedGradientEnd() -> Color: ...
    @property
    def ButtonSelectedGradientMiddle() -> Color: ...
    @property
    def ButtonSelectedHighlight() -> Color: ...
    @property
    def ButtonSelectedHighlightBorder() -> Color: ...
    @property
    def CheckBackground() -> Color: ...
    @property
    def CheckPressedBackground() -> Color: ...
    @property
    def CheckSelectedBackground() -> Color: ...
    @property
    def GripDark() -> Color: ...
    @property
    def GripLight() -> Color: ...
    @property
    def ImageMarginGradientBegin() -> Color: ...
    @property
    def ImageMarginGradientEnd() -> Color: ...
    @property
    def ImageMarginGradientMiddle() -> Color: ...
    @property
    def ImageMarginRevealedGradientBegin() -> Color: ...
    @property
    def ImageMarginRevealedGradientEnd() -> Color: ...
    @property
    def ImageMarginRevealedGradientMiddle() -> Color: ...
    @property
    def MenuBorder() -> Color: ...
    @property
    def MenuItemBorder() -> Color: ...
    @property
    def MenuItemPressedGradientBegin() -> Color: ...
    @property
    def MenuItemPressedGradientEnd() -> Color: ...
    @property
    def MenuItemPressedGradientMiddle() -> Color: ...
    @property
    def MenuItemSelected() -> Color: ...
    @property
    def MenuItemSelectedGradientBegin() -> Color: ...
    @property
    def MenuItemSelectedGradientEnd() -> Color: ...
    @property
    def MenuStripGradientBegin() -> Color: ...
    @property
    def MenuStripGradientEnd() -> Color: ...
    @property
    def OverflowButtonGradientBegin() -> Color: ...
    @property
    def OverflowButtonGradientEnd() -> Color: ...
    @property
    def OverflowButtonGradientMiddle() -> Color: ...
    @property
    def RaftingContainerGradientBegin() -> Color: ...
    @property
    def RaftingContainerGradientEnd() -> Color: ...
    @property
    def SeparatorDark() -> Color: ...
    @property
    def SeparatorLight() -> Color: ...
    @property
    def StatusStripGradientBegin() -> Color: ...
    @property
    def StatusStripGradientEnd() -> Color: ...
    @property
    def ToolStripBorder() -> Color: ...
    @property
    def ToolStripContentPanelGradientBegin() -> Color: ...
    @property
    def ToolStripContentPanelGradientEnd() -> Color: ...
    @property
    def ToolStripDropDownBackground() -> Color: ...
    @property
    def ToolStripGradientBegin() -> Color: ...
    @property
    def ToolStripGradientEnd() -> Color: ...
    @property
    def ToolStripGradientMiddle() -> Color: ...
    @property
    def ToolStripPanelGradientBegin() -> Color: ...
    @property
    def ToolStripPanelGradientEnd() -> Color: ...


class ProfessionalColorTable(Object):
    def __init__(self): ...
    @property
    def ButtonCheckedGradientBegin(self) -> Color: ...
    @property
    def ButtonCheckedGradientEnd(self) -> Color: ...
    @property
    def ButtonCheckedGradientMiddle(self) -> Color: ...
    @property
    def ButtonCheckedHighlight(self) -> Color: ...
    @property
    def ButtonCheckedHighlightBorder(self) -> Color: ...
    @property
    def ButtonPressedBorder(self) -> Color: ...
    @property
    def ButtonPressedGradientBegin(self) -> Color: ...
    @property
    def ButtonPressedGradientEnd(self) -> Color: ...
    @property
    def ButtonPressedGradientMiddle(self) -> Color: ...
    @property
    def ButtonPressedHighlight(self) -> Color: ...
    @property
    def ButtonPressedHighlightBorder(self) -> Color: ...
    @property
    def ButtonSelectedBorder(self) -> Color: ...
    @property
    def ButtonSelectedGradientBegin(self) -> Color: ...
    @property
    def ButtonSelectedGradientEnd(self) -> Color: ...
    @property
    def ButtonSelectedGradientMiddle(self) -> Color: ...
    @property
    def ButtonSelectedHighlight(self) -> Color: ...
    @property
    def ButtonSelectedHighlightBorder(self) -> Color: ...
    @property
    def CheckBackground(self) -> Color: ...
    @property
    def CheckPressedBackground(self) -> Color: ...
    @property
    def CheckSelectedBackground(self) -> Color: ...
    @property
    def GripDark(self) -> Color: ...
    @property
    def GripLight(self) -> Color: ...
    @property
    def ImageMarginGradientBegin(self) -> Color: ...
    @property
    def ImageMarginGradientEnd(self) -> Color: ...
    @property
    def ImageMarginGradientMiddle(self) -> Color: ...
    @property
    def ImageMarginRevealedGradientBegin(self) -> Color: ...
    @property
    def ImageMarginRevealedGradientEnd(self) -> Color: ...
    @property
    def ImageMarginRevealedGradientMiddle(self) -> Color: ...
    @property
    def MenuBorder(self) -> Color: ...
    @property
    def MenuItemBorder(self) -> Color: ...
    @property
    def MenuItemPressedGradientBegin(self) -> Color: ...
    @property
    def MenuItemPressedGradientEnd(self) -> Color: ...
    @property
    def MenuItemPressedGradientMiddle(self) -> Color: ...
    @property
    def MenuItemSelected(self) -> Color: ...
    @property
    def MenuItemSelectedGradientBegin(self) -> Color: ...
    @property
    def MenuItemSelectedGradientEnd(self) -> Color: ...
    @property
    def MenuStripGradientBegin(self) -> Color: ...
    @property
    def MenuStripGradientEnd(self) -> Color: ...
    @property
    def OverflowButtonGradientBegin(self) -> Color: ...
    @property
    def OverflowButtonGradientEnd(self) -> Color: ...
    @property
    def OverflowButtonGradientMiddle(self) -> Color: ...
    @property
    def RaftingContainerGradientBegin(self) -> Color: ...
    @property
    def RaftingContainerGradientEnd(self) -> Color: ...
    @property
    def SeparatorDark(self) -> Color: ...
    @property
    def SeparatorLight(self) -> Color: ...
    @property
    def StatusStripGradientBegin(self) -> Color: ...
    @property
    def StatusStripGradientEnd(self) -> Color: ...
    @property
    def ToolStripBorder(self) -> Color: ...
    @property
    def ToolStripContentPanelGradientBegin(self) -> Color: ...
    @property
    def ToolStripContentPanelGradientEnd(self) -> Color: ...
    @property
    def ToolStripDropDownBackground(self) -> Color: ...
    @property
    def ToolStripGradientBegin(self) -> Color: ...
    @property
    def ToolStripGradientEnd(self) -> Color: ...
    @property
    def ToolStripGradientMiddle(self) -> Color: ...
    @property
    def ToolStripPanelGradientBegin(self) -> Color: ...
    @property
    def ToolStripPanelGradientEnd(self) -> Color: ...
    @property
    def UseSystemColors(self) -> bool: ...
    @UseSystemColors.setter
    def UseSystemColors(self, value: bool) -> None: ...


class ProgressBar(Control):
    def __init__(self): ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def MarqueeAnimationSpeed(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def Step(self) -> int: ...
    @property
    def Style(self) -> ProgressBarStyle: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def Value(self) -> int: ...
    def Increment(self, value: int) -> None: ...
    def PerformStep(self) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def ResetForeColor(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @MarqueeAnimationSpeed.setter
    def MarqueeAnimationSpeed(self, value: int) -> None: ...
    @Maximum.setter
    def Maximum(self, value: int) -> None: ...
    @Minimum.setter
    def Minimum(self, value: int) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @Step.setter
    def Step(self, value: int) -> None: ...
    @Style.setter
    def Style(self, value: ProgressBarStyle) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class ProgressBarRenderer(Object):
    def DrawHorizontalBar(g: Graphics, bounds: Rectangle) -> None: ...
    def DrawHorizontalChunks(g: Graphics, bounds: Rectangle) -> None: ...
    def DrawVerticalBar(g: Graphics, bounds: Rectangle) -> None: ...
    def DrawVerticalChunks(g: Graphics, bounds: Rectangle) -> None: ...
    @property
    def ChunkSpaceThickness() -> int: ...
    @property
    def ChunkThickness() -> int: ...
    @property
    def IsSupported() -> bool: ...


class ProgressBarStyle:
    Blocks = 0
    Continuous = 1
    Marquee = 2


class PropertyGrid(ContainerControl):
    def __init__(self): ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    def add_PropertySortChanged(self, value: EventHandler) -> None: ...
    def add_PropertyTabChanged(self, value: PropertyTabChangedEventHandler) -> None: ...
    def add_PropertyValueChanged(self, value: PropertyValueChangedEventHandler) -> None: ...
    def add_SelectedGridItemChanged(self, value: SelectedGridItemChangedEventHandler) -> None: ...
    def add_SelectedObjectsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def CollapseAllGridItems(self) -> None: ...
    def ExpandAllGridItems(self) -> None: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BrowsableAttributes(self) -> AttributeCollection: ...
    @property
    def CanShowCommands(self) -> bool: ...
    @property
    def CanShowVisualStyleGlyphs(self) -> bool: ...
    @property
    def CategoryForeColor(self) -> Color: ...
    @property
    def CategorySplitterColor(self) -> Color: ...
    @property
    def CommandsActiveLinkColor(self) -> Color: ...
    @property
    def CommandsBackColor(self) -> Color: ...
    @property
    def CommandsBorderColor(self) -> Color: ...
    @property
    def CommandsDisabledLinkColor(self) -> Color: ...
    @property
    def CommandsForeColor(self) -> Color: ...
    @property
    def CommandsLinkColor(self) -> Color: ...
    @property
    def CommandsVisible(self) -> bool: ...
    @property
    def CommandsVisibleIfAvailable(self) -> bool: ...
    @property
    def ContextMenuDefaultLocation(self) -> Point: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def DisabledItemForeColor(self) -> Color: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def HelpBackColor(self) -> Color: ...
    @property
    def HelpBorderColor(self) -> Color: ...
    @property
    def HelpForeColor(self) -> Color: ...
    @property
    def HelpVisible(self) -> bool: ...
    @property
    def LargeButtons(self) -> bool: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PropertySort(self) -> PropertySort: ...
    @property
    def PropertyTabs(self) -> PropertyTabCollection: ...
    @property
    def SelectedGridItem(self) -> GridItem: ...
    @property
    def SelectedItemWithFocusBackColor(self) -> Color: ...
    @property
    def SelectedItemWithFocusForeColor(self) -> Color: ...
    @property
    def SelectedObject(self) -> Object: ...
    @property
    def SelectedObjects(self) -> Set(Object): ...
    @property
    def SelectedTab(self) -> PropertyTab: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolbarVisible(self) -> bool: ...
    @property
    def UseCompatibleTextRendering(self) -> bool: ...
    @property
    def ViewBackColor(self) -> Color: ...
    @property
    def ViewBorderColor(self) -> Color: ...
    @property
    def ViewForeColor(self) -> Color: ...
    def Refresh(self) -> None: ...
    def RefreshTabs(self, tabScope: PropertyTabScope) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    def remove_PropertySortChanged(self, value: EventHandler) -> None: ...
    def remove_PropertyTabChanged(self, value: PropertyTabChangedEventHandler) -> None: ...
    def remove_PropertyValueChanged(self, value: PropertyValueChangedEventHandler) -> None: ...
    def remove_SelectedGridItemChanged(self, value: SelectedGridItemChangedEventHandler) -> None: ...
    def remove_SelectedObjectsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def ResetSelectedProperty(self) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BrowsableAttributes.setter
    def BrowsableAttributes(self, value: AttributeCollection) -> None: ...
    @CanShowVisualStyleGlyphs.setter
    def CanShowVisualStyleGlyphs(self, value: bool) -> None: ...
    @CategoryForeColor.setter
    def CategoryForeColor(self, value: Color) -> None: ...
    @CategorySplitterColor.setter
    def CategorySplitterColor(self, value: Color) -> None: ...
    @CommandsActiveLinkColor.setter
    def CommandsActiveLinkColor(self, value: Color) -> None: ...
    @CommandsBackColor.setter
    def CommandsBackColor(self, value: Color) -> None: ...
    @CommandsBorderColor.setter
    def CommandsBorderColor(self, value: Color) -> None: ...
    @CommandsDisabledLinkColor.setter
    def CommandsDisabledLinkColor(self, value: Color) -> None: ...
    @CommandsForeColor.setter
    def CommandsForeColor(self, value: Color) -> None: ...
    @CommandsLinkColor.setter
    def CommandsLinkColor(self, value: Color) -> None: ...
    @CommandsVisibleIfAvailable.setter
    def CommandsVisibleIfAvailable(self, value: bool) -> None: ...
    @DisabledItemForeColor.setter
    def DisabledItemForeColor(self, value: Color) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @HelpBackColor.setter
    def HelpBackColor(self, value: Color) -> None: ...
    @HelpBorderColor.setter
    def HelpBorderColor(self, value: Color) -> None: ...
    @HelpForeColor.setter
    def HelpForeColor(self, value: Color) -> None: ...
    @HelpVisible.setter
    def HelpVisible(self, value: bool) -> None: ...
    @LargeButtons.setter
    def LargeButtons(self, value: bool) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @PropertySort.setter
    def PropertySort(self, value: PropertySort) -> None: ...
    @SelectedGridItem.setter
    def SelectedGridItem(self, value: GridItem) -> None: ...
    @SelectedItemWithFocusBackColor.setter
    def SelectedItemWithFocusBackColor(self, value: Color) -> None: ...
    @SelectedItemWithFocusForeColor.setter
    def SelectedItemWithFocusForeColor(self, value: Color) -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: Object) -> None: ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: Set(Object)) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolbarVisible.setter
    def ToolbarVisible(self, value: bool) -> None: ...
    @UseCompatibleTextRendering.setter
    def UseCompatibleTextRendering(self, value: bool) -> None: ...
    @ViewBackColor.setter
    def ViewBackColor(self, value: Color) -> None: ...
    @ViewBorderColor.setter
    def ViewBorderColor(self, value: Color) -> None: ...
    @ViewForeColor.setter
    def ViewForeColor(self, value: Color) -> None: ...


class PropertyManager(BindingManagerBase):
    def __init__(self): ...
    def AddNew(self) -> None: ...
    def CancelCurrentEdit(self) -> None: ...
    def EndCurrentEdit(self) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Current(self) -> Object: ...
    @property
    def Position(self) -> int: ...
    def RemoveAt(self, index: int) -> None: ...
    def ResumeBinding(self) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...
    def SuspendBinding(self) -> None: ...


class PropertySort:
    NoSort = 0
    Alphabetical = 1
    Categorized = 2
    CategorizedAlphabetical = 3


class PropertyTabChangedEventArgs(EventArgs):
    def __init__(self, oldTab: PropertyTab, newTab: PropertyTab): ...
    @property
    def NewTab(self) -> PropertyTab: ...
    @property
    def OldTab(self) -> PropertyTab: ...


class PropertyTabChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, s: Object, e: PropertyTabChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, s: Object, e: PropertyTabChangedEventArgs) -> None: ...


class PropertyTabCollection(Object):
    @overload
    def AddTabType(self, propertyTabType: Type) -> None: ...
    @overload
    def AddTabType(self, propertyTabType: Type, tabScope: PropertyTabScope) -> None: ...
    def Clear(self, tabScope: PropertyTabScope) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> PropertyTab: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def RemoveTabType(self, propertyTabType: Type) -> None: ...


class PropertyValueChangedEventArgs(EventArgs):
    def __init__(self, changedItem: GridItem, oldValue: Object): ...
    @property
    def ChangedItem(self) -> GridItem: ...
    @property
    def OldValue(self) -> Object: ...


class PropertyValueChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, s: Object, e: PropertyValueChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, s: Object, e: PropertyValueChangedEventArgs) -> None: ...


class QueryAccessibilityHelpEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, helpNamespace: str, helpString: str, helpKeyword: str): ...
    @property
    def HelpKeyword(self) -> str: ...
    @property
    def HelpNamespace(self) -> str: ...
    @property
    def HelpString(self) -> str: ...
    @HelpKeyword.setter
    def HelpKeyword(self, value: str) -> None: ...
    @HelpNamespace.setter
    def HelpNamespace(self, value: str) -> None: ...
    @HelpString.setter
    def HelpString(self, value: str) -> None: ...


class QueryAccessibilityHelpEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: QueryAccessibilityHelpEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: QueryAccessibilityHelpEventArgs) -> None: ...


class QueryContinueDragEventArgs(EventArgs):
    def __init__(self, keyState: int, escapePressed: bool, action: DragAction): ...
    @property
    def Action(self) -> DragAction: ...
    @property
    def EscapePressed(self) -> bool: ...
    @property
    def KeyState(self) -> int: ...
    @Action.setter
    def Action(self, value: DragAction) -> None: ...


class QueryContinueDragEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: QueryContinueDragEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: QueryContinueDragEventArgs) -> None: ...


class QuestionEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, response: bool): ...
    @property
    def Response(self) -> bool: ...
    @Response.setter
    def Response(self, value: bool) -> None: ...


class QuestionEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: QuestionEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: QuestionEventArgs) -> None: ...


class RadioButton(ButtonBase):
    def __init__(self): ...
    def add_AppearanceChanged(self, value: EventHandler) -> None: ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @property
    def Appearance(self) -> Appearance: ...
    @property
    def AutoCheck(self) -> bool: ...
    @property
    def CheckAlign(self) -> ContentAlignment: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def TextAlign(self) -> ContentAlignment: ...
    def PerformClick(self) -> None: ...
    def remove_AppearanceChanged(self, value: EventHandler) -> None: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @Appearance.setter
    def Appearance(self, value: Appearance) -> None: ...
    @AutoCheck.setter
    def AutoCheck(self, value: bool) -> None: ...
    @CheckAlign.setter
    def CheckAlign(self, value: ContentAlignment) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: ContentAlignment) -> None: ...
    def ToString(self) -> str: ...


class RadioButtonAccessibleObject:
    def __init__(self, owner: RadioButton): ...
    def DoDefaultAction(self) -> None: ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...


class RadioButtonRenderer(Object):
    def DrawParentBackground(g: Graphics, bounds: Rectangle, childControl: Control) -> None: ...
    @overload
    def DrawRadioButton(g: Graphics, glyphLocation: Point, state: RadioButtonState) -> None: ...
    @overload
    def DrawRadioButton(g: Graphics, glyphLocation: Point, textBounds: Rectangle, radioButtonText: str, font: Font, focused: bool, state: RadioButtonState) -> None: ...
    @overload
    def DrawRadioButton(g: Graphics, glyphLocation: Point, textBounds: Rectangle, radioButtonText: str, font: Font, flags: TextFormatFlags, focused: bool, state: RadioButtonState) -> None: ...
    @overload
    def DrawRadioButton(g: Graphics, glyphLocation: Point, textBounds: Rectangle, radioButtonText: str, font: Font, image: Image, imageBounds: Rectangle, focused: bool, state: RadioButtonState) -> None: ...
    @overload
    def DrawRadioButton(g: Graphics, glyphLocation: Point, textBounds: Rectangle, radioButtonText: str, font: Font, flags: TextFormatFlags, image: Image, imageBounds: Rectangle, focused: bool, state: RadioButtonState) -> None: ...
    @property
    def RenderMatchingApplicationState() -> bool: ...
    def GetGlyphSize(g: Graphics, state: RadioButtonState) -> Size: ...
    def IsBackgroundPartiallyTransparent(state: RadioButtonState) -> bool: ...
    @RenderMatchingApplicationState.setter
    def RenderMatchingApplicationState(value: bool) -> None: ...


class RelatedImageListAttribute(Attribute):
    def __init__(self, relatedImageList: str): ...
    @property
    def RelatedImageList(self) -> str: ...


class RetrieveVirtualItemEventArgs(EventArgs):
    def __init__(self, itemIndex: int): ...
    @property
    def Item(self) -> ListViewItem: ...
    @property
    def ItemIndex(self) -> int: ...
    @Item.setter
    def Item(self, value: ListViewItem) -> None: ...


class RetrieveVirtualItemEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: RetrieveVirtualItemEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: RetrieveVirtualItemEventArgs) -> None: ...


class RichTextBox(TextBoxBase):
    def __init__(self): ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def add_ContentsResized(self, value: ContentsResizedEventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    def add_HScroll(self, value: EventHandler) -> None: ...
    def add_ImeChange(self, value: EventHandler) -> None: ...
    def add_LinkClicked(self, value: LinkClickedEventHandler) -> None: ...
    def add_Protected(self, value: EventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    def add_VScroll(self, value: EventHandler) -> None: ...
    def CanPaste(self, clipFormat: Format) -> bool: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def Find(self, characterSet: Set(Char)) -> int: ...
    @overload
    def Find(self, str: str) -> int: ...
    @overload
    def Find(self, characterSet: Set(Char), start: int) -> int: ...
    @overload
    def Find(self, str: str, options: RichTextBoxFinds) -> int: ...
    @overload
    def Find(self, str: str, start: int, options: RichTextBoxFinds) -> int: ...
    @overload
    def Find(self, characterSet: Set(Char), start: int, end: int) -> int: ...
    @overload
    def Find(self, str: str, start: int, end: int, options: RichTextBoxFinds) -> int: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoWordSelection(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BulletIndent(self) -> int: ...
    @property
    def CanRedo(self) -> bool: ...
    @property
    def DetectUrls(self) -> bool: ...
    @property
    def EnableAutoDragDrop(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def LanguageOption(self) -> RichTextBoxLanguageOptions: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def RedoActionName(self) -> str: ...
    @property
    def RichTextShortcutsEnabled(self) -> bool: ...
    @property
    def RightMargin(self) -> int: ...
    @property
    def Rtf(self) -> str: ...
    @property
    def ScrollBars(self) -> RichTextBoxScrollBars: ...
    @property
    def SelectedRtf(self) -> str: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SelectionAlignment(self) -> HorizontalAlignment: ...
    @property
    def SelectionBackColor(self) -> Color: ...
    @property
    def SelectionBullet(self) -> bool: ...
    @property
    def SelectionCharOffset(self) -> int: ...
    @property
    def SelectionColor(self) -> Color: ...
    @property
    def SelectionFont(self) -> Font: ...
    @property
    def SelectionHangingIndent(self) -> int: ...
    @property
    def SelectionIndent(self) -> int: ...
    @property
    def SelectionLength(self) -> int: ...
    @property
    def SelectionProtected(self) -> bool: ...
    @property
    def SelectionRightIndent(self) -> int: ...
    @property
    def SelectionTabs(self) -> Set(int): ...
    @property
    def SelectionType(self) -> RichTextBoxSelectionTypes: ...
    @property
    def ShowSelectionMargin(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextLength(self) -> int: ...
    @property
    def UndoActionName(self) -> str: ...
    @property
    def ZoomFactor(self) -> Single: ...
    def GetCharIndexFromPosition(self, pt: Point) -> int: ...
    def GetLineFromCharIndex(self, index: int) -> int: ...
    def GetPositionFromCharIndex(self, index: int) -> Point: ...
    @overload
    def LoadFile(self, path: str) -> None: ...
    @overload
    def LoadFile(self, path: str, fileType: RichTextBoxStreamType) -> None: ...
    @overload
    def LoadFile(self, data: Stream, fileType: RichTextBoxStreamType) -> None: ...
    @overload
    def Paste(self, clipFormat: Format) -> None: ...
    def Redo(self) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_ContentsResized(self, value: ContentsResizedEventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    def remove_HScroll(self, value: EventHandler) -> None: ...
    def remove_ImeChange(self, value: EventHandler) -> None: ...
    def remove_LinkClicked(self, value: LinkClickedEventHandler) -> None: ...
    def remove_Protected(self, value: EventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    def remove_VScroll(self, value: EventHandler) -> None: ...
    @overload
    def SaveFile(self, path: str) -> None: ...
    @overload
    def SaveFile(self, data: Stream, fileType: RichTextBoxStreamType) -> None: ...
    @overload
    def SaveFile(self, path: str, fileType: RichTextBoxStreamType) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoWordSelection.setter
    def AutoWordSelection(self, value: bool) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BulletIndent.setter
    def BulletIndent(self, value: int) -> None: ...
    @DetectUrls.setter
    def DetectUrls(self, value: bool) -> None: ...
    @EnableAutoDragDrop.setter
    def EnableAutoDragDrop(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @LanguageOption.setter
    def LanguageOption(self, value: RichTextBoxLanguageOptions) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @Multiline.setter
    def Multiline(self, value: bool) -> None: ...
    @RichTextShortcutsEnabled.setter
    def RichTextShortcutsEnabled(self, value: bool) -> None: ...
    @RightMargin.setter
    def RightMargin(self, value: int) -> None: ...
    @Rtf.setter
    def Rtf(self, value: str) -> None: ...
    @ScrollBars.setter
    def ScrollBars(self, value: RichTextBoxScrollBars) -> None: ...
    @SelectedRtf.setter
    def SelectedRtf(self, value: str) -> None: ...
    @SelectedText.setter
    def SelectedText(self, value: str) -> None: ...
    @SelectionAlignment.setter
    def SelectionAlignment(self, value: HorizontalAlignment) -> None: ...
    @SelectionBackColor.setter
    def SelectionBackColor(self, value: Color) -> None: ...
    @SelectionBullet.setter
    def SelectionBullet(self, value: bool) -> None: ...
    @SelectionCharOffset.setter
    def SelectionCharOffset(self, value: int) -> None: ...
    @SelectionColor.setter
    def SelectionColor(self, value: Color) -> None: ...
    @SelectionFont.setter
    def SelectionFont(self, value: Font) -> None: ...
    @SelectionHangingIndent.setter
    def SelectionHangingIndent(self, value: int) -> None: ...
    @SelectionIndent.setter
    def SelectionIndent(self, value: int) -> None: ...
    @SelectionLength.setter
    def SelectionLength(self, value: int) -> None: ...
    @SelectionProtected.setter
    def SelectionProtected(self, value: bool) -> None: ...
    @SelectionRightIndent.setter
    def SelectionRightIndent(self, value: int) -> None: ...
    @SelectionTabs.setter
    def SelectionTabs(self, value: Set(int)) -> None: ...
    @ShowSelectionMargin.setter
    def ShowSelectionMargin(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ZoomFactor.setter
    def ZoomFactor(self, value: Single) -> None: ...


class RichTextBoxFinds:
    #None = 0
    WholeWord = 2
    MatchCase = 4
    NoHighlight = 8
    Reverse = 16


class RichTextBoxLanguageOptions:
    AutoKeyboard = 1
    AutoFont = 2
    ImeCancelComplete = 4
    ImeAlwaysSendNotify = 8
    AutoFontSizeAdjust = 16
    UIFonts = 32
    DualFont = 128


class RichTextBoxScrollBars:
    #None = 0
    Horizontal = 1
    Vertical = 2
    Both = 3
    ForcedHorizontal = 17
    ForcedVertical = 18
    ForcedBoth = 19


class RichTextBoxSelectionAttribute:
    #None = 0
    All = 1
    Mixed = -1


class RichTextBoxSelectionTypes:
    Empty = 0
    Text = 1
    Object = 2
    MultiChar = 4
    MultiObject = 8


class RichTextBoxStreamType:
    RichText = 0
    PlainText = 1
    RichNoOleObjs = 2
    TextTextOleObjs = 3
    UnicodePlainText = 4


class RichTextBoxWordPunctuations:
    Level1 = 128
    Level2 = 256
    Custom = 512
    All = 896


class RightToLeft:
    No = 0
    Yes = 1
    Inherit = 2


class RowStyle(TableLayoutStyle):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sizeType: SizeType): ...
    @overload
    def __init__(self, sizeType: SizeType, height: Single): ...
    @property
    def Height(self) -> Single: ...
    @Height.setter
    def Height(self, value: Single) -> None: ...


class SaveFileDialog(FileDialog):
    def __init__(self): ...
    @property
    def CreatePrompt(self) -> bool: ...
    @property
    def OverwritePrompt(self) -> bool: ...
    def OpenFile(self) -> Stream: ...
    def Reset(self) -> None: ...
    @CreatePrompt.setter
    def CreatePrompt(self, value: bool) -> None: ...
    @OverwritePrompt.setter
    def OverwritePrompt(self, value: bool) -> None: ...


class Screen(Object):
    def Equals(self, obj: Object) -> bool: ...
    def FromControl(control: Control) -> Screen: ...
    def FromHandle(hwnd: IntPtr) -> Screen: ...
    def FromPoint(point: Point) -> Screen: ...
    def FromRectangle(rect: Rectangle) -> Screen: ...
    @property
    def AllScreens() -> Set(Screen): ...
    @property
    def BitsPerPixel(self) -> int: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def DeviceName(self) -> str: ...
    @property
    def Primary(self) -> bool: ...
    @property
    def PrimaryScreen() -> Screen: ...
    @property
    def WorkingArea(self) -> Rectangle: ...
    @overload
    def GetBounds(pt: Point) -> Rectangle: ...
    @overload
    def GetBounds(rect: Rectangle) -> Rectangle: ...
    @overload
    def GetBounds(ctl: Control) -> Rectangle: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetWorkingArea(pt: Point) -> Rectangle: ...
    @overload
    def GetWorkingArea(rect: Rectangle) -> Rectangle: ...
    @overload
    def GetWorkingArea(ctl: Control) -> Rectangle: ...
    def ToString(self) -> str: ...


class ScreenOrientation:
    Angle0 = 0
    Angle90 = 1
    Angle180 = 2
    Angle270 = 3


class ScrollableControl(Control):
    def __init__(self): ...
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoScrollPosition(self) -> Point: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...


class ScrollBar(Control):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def LargeChange(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def ScaleScrollBarForDpiChange(self) -> bool: ...
    @property
    def SmallChange(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def Value(self) -> int: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @LargeChange.setter
    def LargeChange(self, value: int) -> None: ...
    @Maximum.setter
    def Maximum(self, value: int) -> None: ...
    @Minimum.setter
    def Minimum(self, value: int) -> None: ...
    @ScaleScrollBarForDpiChange.setter
    def ScaleScrollBarForDpiChange(self, value: bool) -> None: ...
    @SmallChange.setter
    def SmallChange(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class ScrollBarRenderer(Object):
    def DrawArrowButton(g: Graphics, bounds: Rectangle, state: ScrollBarArrowButtonState) -> None: ...
    def DrawHorizontalThumb(g: Graphics, bounds: Rectangle, state: ScrollBarState) -> None: ...
    def DrawHorizontalThumbGrip(g: Graphics, bounds: Rectangle, state: ScrollBarState) -> None: ...
    def DrawLeftHorizontalTrack(g: Graphics, bounds: Rectangle, state: ScrollBarState) -> None: ...
    def DrawLowerVerticalTrack(g: Graphics, bounds: Rectangle, state: ScrollBarState) -> None: ...
    def DrawRightHorizontalTrack(g: Graphics, bounds: Rectangle, state: ScrollBarState) -> None: ...
    def DrawSizeBox(g: Graphics, bounds: Rectangle, state: ScrollBarSizeBoxState) -> None: ...
    def DrawUpperVerticalTrack(g: Graphics, bounds: Rectangle, state: ScrollBarState) -> None: ...
    def DrawVerticalThumb(g: Graphics, bounds: Rectangle, state: ScrollBarState) -> None: ...
    def DrawVerticalThumbGrip(g: Graphics, bounds: Rectangle, state: ScrollBarState) -> None: ...
    @property
    def IsSupported() -> bool: ...
    def GetSizeBoxSize(g: Graphics, state: ScrollBarState) -> Size: ...
    def GetThumbGripSize(g: Graphics, state: ScrollBarState) -> Size: ...


class ScrollBars:
    #None = 0
    Horizontal = 1
    Vertical = 2
    Both = 3


class ScrollButton:
    Min = 0
    Up = 0
    Down = 1
    Left = 2
    Right = 3
    Max = 3


class ScrollEventArgs(EventArgs):
    @overload
    def __init__(self, type: ScrollEventType, newValue: int): ...
    @overload
    def __init__(self, type: ScrollEventType, newValue: int, scroll: ScrollOrientation): ...
    @overload
    def __init__(self, type: ScrollEventType, oldValue: int, newValue: int): ...
    @overload
    def __init__(self, type: ScrollEventType, oldValue: int, newValue: int, scroll: ScrollOrientation): ...
    @property
    def NewValue(self) -> int: ...
    @property
    def OldValue(self) -> int: ...
    @property
    def ScrollOrientation(self) -> ScrollOrientation: ...
    @property
    def Type(self) -> ScrollEventType: ...
    @NewValue.setter
    def NewValue(self, value: int) -> None: ...


class ScrollEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ScrollEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ScrollEventArgs) -> None: ...


class ScrollEventType:
    SmallDecrement = 0
    SmallIncrement = 1
    LargeDecrement = 2
    LargeIncrement = 3
    ThumbPosition = 4
    ThumbTrack = 5
    First = 6
    Last = 7
    EndScroll = 8


class ScrollOrientation:
    HorizontalScroll = 0
    VerticalScroll = 1


class ScrollProperties(Object):
    @property
    def Enabled(self) -> bool: ...
    @property
    def LargeChange(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def SmallChange(self) -> int: ...
    @property
    def Value(self) -> int: ...
    @property
    def Visible(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @LargeChange.setter
    def LargeChange(self, value: int) -> None: ...
    @Maximum.setter
    def Maximum(self, value: int) -> None: ...
    @Minimum.setter
    def Minimum(self, value: int) -> None: ...
    @SmallChange.setter
    def SmallChange(self, value: int) -> None: ...
    @Value.setter
    def Value(self, value: int) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class SearchDirectionHint:
    Left = 37
    Up = 38
    Right = 39
    Down = 40


class SearchForVirtualItemEventArgs(EventArgs):
    def __init__(self, isTextSearch: bool, isPrefixSearch: bool, includeSubItemsInSearch: bool, text: str, startingPoint: Point, direction: SearchDirectionHint, startIndex: int): ...
    @property
    def Direction(self) -> SearchDirectionHint: ...
    @property
    def IncludeSubItemsInSearch(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsPrefixSearch(self) -> bool: ...
    @property
    def IsTextSearch(self) -> bool: ...
    @property
    def StartIndex(self) -> int: ...
    @property
    def StartingPoint(self) -> Point: ...
    @property
    def Text(self) -> str: ...
    @Index.setter
    def Index(self, value: int) -> None: ...


class SearchForVirtualItemEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: SearchForVirtualItemEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: SearchForVirtualItemEventArgs) -> None: ...


class SecurityIDType:
    User = 1
    Group = 2
    Domain = 3
    Alias = 4
    WellKnownGroup = 5
    DeletedAccount = 6
    Invalid = 7
    Unknown = 8
    Computer = 9


class SelectedGridItemChangedEventArgs(EventArgs):
    def __init__(self, oldSel: GridItem, newSel: GridItem): ...
    @property
    def NewSelection(self) -> GridItem: ...
    @property
    def OldSelection(self) -> GridItem: ...


class SelectedGridItemChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: SelectedGridItemChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: SelectedGridItemChangedEventArgs) -> None: ...


class SelectedIndexCollection(Object):
    def __init__(self, owner: ListView): ...
    def Add(self, itemIndex: int) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, selectedIndex: int) -> bool: ...
    def CopyTo(self, dest: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, selectedIndex: int) -> int: ...
    def Remove(self, itemIndex: int) -> None: ...


class SelectedIndexCollection(Object):
    def __init__(self, owner: ListBox): ...
    def Add(self, index: int) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, selectedIndex: int) -> bool: ...
    def CopyTo(self, destination: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, selectedIndex: int) -> int: ...
    def Remove(self, index: int) -> None: ...


class SelectedListViewItemCollection(Object):
    def __init__(self, owner: ListView): ...
    def Clear(self) -> None: ...
    def Contains(self, item: ListViewItem) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    def CopyTo(self, dest: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> ListViewItem: ...
    @property
    def Item(self, key: str) -> ListViewItem: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, item: ListViewItem) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...


class SelectedObjectCollection(Object):
    def __init__(self, owner: ListBox): ...
    def Add(self, value: Object) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, selectedObject: Object) -> bool: ...
    def CopyTo(self, destination: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, selectedObject: Object) -> int: ...
    def Remove(self, value: Object) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Object) -> None: ...


class SelectionMode:
    #None = 0
    One = 1
    MultiSimple = 2
    MultiExtended = 3


class SelectionRange(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, range: SelectionRange): ...
    @overload
    def __init__(self, lower: DateTime, upper: DateTime): ...
    @property
    def End(self) -> DateTime: ...
    @property
    def Start(self) -> DateTime: ...
    @End.setter
    def End(self, value: DateTime) -> None: ...
    @Start.setter
    def Start(self, value: DateTime) -> None: ...
    def ToString(self) -> str: ...


class SelectionRangeConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> Object: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...


class SendKeys(Object):
    def Flush() -> None: ...
    def Send(keys: str) -> None: ...
    def SendWait(keys: str) -> None: ...


class Shortcut:
    #None = 0
    Ins = 45
    Del = 46
    F1 = 112
    F2 = 113
    F3 = 114
    F4 = 115
    F5 = 116
    F6 = 117
    F7 = 118
    F8 = 119
    F9 = 120
    F10 = 121
    F11 = 122
    F12 = 123
    ShiftIns = 65581
    ShiftDel = 65582
    ShiftF1 = 65648
    ShiftF2 = 65649
    ShiftF3 = 65650
    ShiftF4 = 65651
    ShiftF5 = 65652
    ShiftF6 = 65653
    ShiftF7 = 65654
    ShiftF8 = 65655
    ShiftF9 = 65656
    ShiftF10 = 65657
    ShiftF11 = 65658
    ShiftF12 = 65659
    CtrlIns = 131117
    CtrlDel = 131118
    Ctrl0 = 131120
    Ctrl1 = 131121
    Ctrl2 = 131122
    Ctrl3 = 131123
    Ctrl4 = 131124
    Ctrl5 = 131125
    Ctrl6 = 131126
    Ctrl7 = 131127
    Ctrl8 = 131128
    Ctrl9 = 131129
    CtrlA = 131137
    CtrlB = 131138
    CtrlC = 131139
    CtrlD = 131140
    CtrlE = 131141
    CtrlF = 131142
    CtrlG = 131143
    CtrlH = 131144
    CtrlI = 131145
    CtrlJ = 131146
    CtrlK = 131147
    CtrlL = 131148
    CtrlM = 131149
    CtrlN = 131150
    CtrlO = 131151
    CtrlP = 131152
    CtrlQ = 131153
    CtrlR = 131154
    CtrlS = 131155
    CtrlT = 131156
    CtrlU = 131157
    CtrlV = 131158
    CtrlW = 131159
    CtrlX = 131160
    CtrlY = 131161
    CtrlZ = 131162
    CtrlF1 = 131184
    CtrlF2 = 131185
    CtrlF3 = 131186
    CtrlF4 = 131187
    CtrlF5 = 131188
    CtrlF6 = 131189
    CtrlF7 = 131190
    CtrlF8 = 131191
    CtrlF9 = 131192
    CtrlF10 = 131193
    CtrlF11 = 131194
    CtrlF12 = 131195
    CtrlShift0 = 196656
    CtrlShift1 = 196657
    CtrlShift2 = 196658
    CtrlShift3 = 196659
    CtrlShift4 = 196660
    CtrlShift5 = 196661
    CtrlShift6 = 196662
    CtrlShift7 = 196663
    CtrlShift8 = 196664
    CtrlShift9 = 196665
    CtrlShiftA = 196673
    CtrlShiftB = 196674
    CtrlShiftC = 196675
    CtrlShiftD = 196676
    CtrlShiftE = 196677
    CtrlShiftF = 196678
    CtrlShiftG = 196679
    CtrlShiftH = 196680
    CtrlShiftI = 196681
    CtrlShiftJ = 196682
    CtrlShiftK = 196683
    CtrlShiftL = 196684
    CtrlShiftM = 196685
    CtrlShiftN = 196686
    CtrlShiftO = 196687
    CtrlShiftP = 196688
    CtrlShiftQ = 196689
    CtrlShiftR = 196690
    CtrlShiftS = 196691
    CtrlShiftT = 196692
    CtrlShiftU = 196693
    CtrlShiftV = 196694
    CtrlShiftW = 196695
    CtrlShiftX = 196696
    CtrlShiftY = 196697
    CtrlShiftZ = 196698
    CtrlShiftF1 = 196720
    CtrlShiftF2 = 196721
    CtrlShiftF3 = 196722
    CtrlShiftF4 = 196723
    CtrlShiftF5 = 196724
    CtrlShiftF6 = 196725
    CtrlShiftF7 = 196726
    CtrlShiftF8 = 196727
    CtrlShiftF9 = 196728
    CtrlShiftF10 = 196729
    CtrlShiftF11 = 196730
    CtrlShiftF12 = 196731
    AltBksp = 262152
    AltLeftArrow = 262181
    AltUpArrow = 262182
    AltRightArrow = 262183
    AltDownArrow = 262184
    Alt0 = 262192
    Alt1 = 262193
    Alt2 = 262194
    Alt3 = 262195
    Alt4 = 262196
    Alt5 = 262197
    Alt6 = 262198
    Alt7 = 262199
    Alt8 = 262200
    Alt9 = 262201
    AltF1 = 262256
    AltF2 = 262257
    AltF3 = 262258
    AltF4 = 262259
    AltF5 = 262260
    AltF6 = 262261
    AltF7 = 262262
    AltF8 = 262263
    AltF9 = 262264
    AltF10 = 262265
    AltF11 = 262266
    AltF12 = 262267


class SizeGripStyle:
    Auto = 0
    Show = 1
    Hide = 2


class SizeType:
    AutoSize = 0
    Absolute = 1
    Percent = 2


class SortOrder:
    #None = 0
    Ascending = 1
    Descending = 2


class SplitContainer(ContainerControl):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    def add_SplitterMoved(self, value: SplitterEventHandler) -> None: ...
    def add_SplitterMoving(self, value: SplitterCancelEventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def BeginInit(self) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoScrollOffset(self) -> Point: ...
    @property
    def AutoScrollPosition(self) -> Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def FixedPanel(self) -> FixedPanel: ...
    @property
    def IsSplitterFixed(self) -> bool: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Panel1(self) -> SplitterPanel: ...
    @property
    def Panel1Collapsed(self) -> bool: ...
    @property
    def Panel1MinSize(self) -> int: ...
    @property
    def Panel2(self) -> SplitterPanel: ...
    @property
    def Panel2Collapsed(self) -> bool: ...
    @property
    def Panel2MinSize(self) -> int: ...
    @property
    def SplitterDistance(self) -> int: ...
    @property
    def SplitterIncrement(self) -> int: ...
    @property
    def SplitterRectangle(self) -> Rectangle: ...
    @property
    def SplitterWidth(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    def OnSplitterMoved(self, e: SplitterEventArgs) -> None: ...
    def OnSplitterMoving(self, e: SplitterCancelEventArgs) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    def remove_SplitterMoved(self, value: SplitterEventHandler) -> None: ...
    def remove_SplitterMoving(self, value: SplitterCancelEventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @FixedPanel.setter
    def FixedPanel(self, value: FixedPanel) -> None: ...
    @IsSplitterFixed.setter
    def IsSplitterFixed(self, value: bool) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Panel1Collapsed.setter
    def Panel1Collapsed(self, value: bool) -> None: ...
    @Panel1MinSize.setter
    def Panel1MinSize(self, value: int) -> None: ...
    @Panel2Collapsed.setter
    def Panel2Collapsed(self, value: bool) -> None: ...
    @Panel2MinSize.setter
    def Panel2MinSize(self, value: int) -> None: ...
    @SplitterDistance.setter
    def SplitterDistance(self, value: int) -> None: ...
    @SplitterIncrement.setter
    def SplitterIncrement(self, value: int) -> None: ...
    @SplitterWidth.setter
    def SplitterWidth(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class Splitter(Control):
    def __init__(self): ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    def add_SplitterMoved(self, value: SplitterEventHandler) -> None: ...
    def add_SplitterMoving(self, value: SplitterEventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def MinExtra(self) -> int: ...
    @property
    def MinSize(self) -> int: ...
    @property
    def SplitPosition(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    def remove_SplitterMoved(self, value: SplitterEventHandler) -> None: ...
    def remove_SplitterMoving(self, value: SplitterEventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @MinExtra.setter
    def MinExtra(self, value: int) -> None: ...
    @MinSize.setter
    def MinSize(self, value: int) -> None: ...
    @SplitPosition.setter
    def SplitPosition(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class SplitterCancelEventArgs(CancelEventArgs):
    def __init__(self, mouseCursorX: int, mouseCursorY: int, splitX: int, splitY: int): ...
    @property
    def MouseCursorX(self) -> int: ...
    @property
    def MouseCursorY(self) -> int: ...
    @property
    def SplitX(self) -> int: ...
    @property
    def SplitY(self) -> int: ...
    @SplitX.setter
    def SplitX(self, value: int) -> None: ...
    @SplitY.setter
    def SplitY(self, value: int) -> None: ...


class SplitterCancelEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: SplitterCancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: SplitterCancelEventArgs) -> None: ...


class SplitterEventArgs(EventArgs):
    def __init__(self, x: int, y: int, splitX: int, splitY: int): ...
    @property
    def SplitX(self) -> int: ...
    @property
    def SplitY(self) -> int: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @SplitX.setter
    def SplitX(self, value: int) -> None: ...
    @SplitY.setter
    def SplitY(self, value: int) -> None: ...


class SplitterEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: SplitterEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: SplitterEventArgs) -> None: ...


class SplitterPanel(Panel):
    def __init__(self, owner: SplitContainer): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Height(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def Size(self) -> Size: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...


class State(Object):
    def __init__(self, ms: Stream, storageType: int, manualUpdate: bool, licKey: str): ...


class StateConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class StatusBar(Control):
    def __init__(self): ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def add_DrawItem(self, value: StatusBarDrawItemEventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_PanelClick(self, value: StatusBarPanelClickEventHandler) -> None: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def Panels(self) -> StatusBarPanelCollection: ...
    @property
    def ShowPanels(self) -> bool: ...
    @property
    def SizingGrip(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_DrawItem(self, value: StatusBarDrawItemEventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_PanelClick(self, value: StatusBarPanelClickEventHandler) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @ShowPanels.setter
    def ShowPanels(self, value: bool) -> None: ...
    @SizingGrip.setter
    def SizingGrip(self, value: bool) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class StatusBarDrawItemEventArgs(DrawItemEventArgs):
    @overload
    def __init__(self, g: Graphics, font: Font, r: Rectangle, itemId: int, itemState: DrawItemState, panel: StatusBarPanel): ...
    @overload
    def __init__(self, g: Graphics, font: Font, r: Rectangle, itemId: int, itemState: DrawItemState, panel: StatusBarPanel, foreColor: Color, backColor: Color): ...
    @property
    def Panel(self) -> StatusBarPanel: ...


class StatusBarDrawItemEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, sbdevent: StatusBarDrawItemEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, sbdevent: StatusBarDrawItemEventArgs) -> None: ...


class StatusBarPanel(Component):
    def __init__(self): ...
    def BeginInit(self) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def Alignment(self) -> HorizontalAlignment: ...
    @property
    def AutoSize(self) -> StatusBarPanelAutoSize: ...
    @property
    def BorderStyle(self) -> StatusBarPanelBorderStyle: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def MinWidth(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> StatusBar: ...
    @property
    def Style(self) -> StatusBarPanelStyle: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def Width(self) -> int: ...
    @Alignment.setter
    def Alignment(self, value: HorizontalAlignment) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: StatusBarPanelAutoSize) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: StatusBarPanelBorderStyle) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @MinWidth.setter
    def MinWidth(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: StatusBarPanelStyle) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTipText.setter
    def ToolTipText(self, value: str) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class StatusBarPanelAutoSize:
    #None = 1
    Spring = 2
    Contents = 3


class StatusBarPanelBorderStyle:
    #None = 1
    Raised = 2
    Sunken = 3


class StatusBarPanelClickEventArgs(MouseEventArgs):
    def __init__(self, statusBarPanel: StatusBarPanel, button: MouseButtons, clicks: int, x: int, y: int): ...
    @property
    def StatusBarPanel(self) -> StatusBarPanel: ...


class StatusBarPanelClickEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: StatusBarPanelClickEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: StatusBarPanelClickEventArgs) -> None: ...


class StatusBarPanelCollection(Object):
    def __init__(self, owner: StatusBar): ...
    @overload
    def Add(self, text: str) -> StatusBarPanel: ...
    @overload
    def Add(self, value: StatusBarPanel) -> int: ...
    def AddRange(self, panels: Set(StatusBarPanel)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, panel: StatusBarPanel) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> StatusBarPanel: ...
    @property
    def Item(self, key: str) -> StatusBarPanel: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, panel: StatusBarPanel) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...
    def Insert(self, index: int, value: StatusBarPanel) -> None: ...
    def Remove(self, value: StatusBarPanel) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: StatusBarPanel) -> None: ...


class StatusBarPanelStyle:
    Text = 1
    OwnerDraw = 2


class StatusStrip(ToolStrip):
    def __init__(self): ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @property
    def CanOverflow(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def GripStyle(self) -> ToolStripGripStyle: ...
    @property
    def LayoutStyle(self) -> ToolStripLayoutStyle: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def ShowItemToolTips(self) -> bool: ...
    @property
    def SizeGripBounds(self) -> Rectangle: ...
    @property
    def SizingGrip(self) -> bool: ...
    @property
    def Stretch(self) -> bool: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @CanOverflow.setter
    def CanOverflow(self, value: bool) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @GripStyle.setter
    def GripStyle(self, value: ToolStripGripStyle) -> None: ...
    @LayoutStyle.setter
    def LayoutStyle(self, value: ToolStripLayoutStyle) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @ShowItemToolTips.setter
    def ShowItemToolTips(self, value: bool) -> None: ...
    @SizingGrip.setter
    def SizingGrip(self, value: bool) -> None: ...
    @Stretch.setter
    def Stretch(self, value: bool) -> None: ...


class StructFormat:
    Ansi = 1
    Unicode = 2
    Auto = 3


class SystemInformation(Object):
    @property
    def ActiveWindowTrackingDelay() -> int: ...
    @property
    def ArrangeDirection() -> ArrangeDirection: ...
    @property
    def ArrangeStartingPosition() -> ArrangeStartingPosition: ...
    @property
    def BootMode() -> BootMode: ...
    @property
    def Border3DSize() -> Size: ...
    @property
    def BorderMultiplierFactor() -> int: ...
    @property
    def BorderSize() -> Size: ...
    @property
    def CaptionButtonSize() -> Size: ...
    @property
    def CaptionHeight() -> int: ...
    @property
    def CaretBlinkTime() -> int: ...
    @property
    def CaretWidth() -> int: ...
    @property
    def ComputerName() -> str: ...
    @property
    def CursorSize() -> Size: ...
    @property
    def DbcsEnabled() -> bool: ...
    @property
    def DebugOS() -> bool: ...
    @property
    def DoubleClickSize() -> Size: ...
    @property
    def DoubleClickTime() -> int: ...
    @property
    def DragFullWindows() -> bool: ...
    @property
    def DragSize() -> Size: ...
    @property
    def FixedFrameBorderSize() -> Size: ...
    @property
    def FontSmoothingContrast() -> int: ...
    @property
    def FontSmoothingType() -> int: ...
    @property
    def FrameBorderSize() -> Size: ...
    @property
    def HighContrast() -> bool: ...
    @property
    def HorizontalFocusThickness() -> int: ...
    @property
    def HorizontalResizeBorderThickness() -> int: ...
    @property
    def HorizontalScrollBarArrowWidth() -> int: ...
    @property
    def HorizontalScrollBarHeight() -> int: ...
    @property
    def HorizontalScrollBarThumbWidth() -> int: ...
    @property
    def IconHorizontalSpacing() -> int: ...
    @property
    def IconSize() -> Size: ...
    @property
    def IconSpacingSize() -> Size: ...
    @property
    def IconVerticalSpacing() -> int: ...
    @property
    def IsActiveWindowTrackingEnabled() -> bool: ...
    @property
    def IsComboBoxAnimationEnabled() -> bool: ...
    @property
    def IsDropShadowEnabled() -> bool: ...
    @property
    def IsFlatMenuEnabled() -> bool: ...
    @property
    def IsFontSmoothingEnabled() -> bool: ...
    @property
    def IsHotTrackingEnabled() -> bool: ...
    @property
    def IsIconTitleWrappingEnabled() -> bool: ...
    @property
    def IsKeyboardPreferred() -> bool: ...
    @property
    def IsListBoxSmoothScrollingEnabled() -> bool: ...
    @property
    def IsMenuAnimationEnabled() -> bool: ...
    @property
    def IsMenuFadeEnabled() -> bool: ...
    @property
    def IsMinimizeRestoreAnimationEnabled() -> bool: ...
    @property
    def IsSelectionFadeEnabled() -> bool: ...
    @property
    def IsSnapToDefaultEnabled() -> bool: ...
    @property
    def IsTitleBarGradientEnabled() -> bool: ...
    @property
    def IsToolTipAnimationEnabled() -> bool: ...
    @property
    def KanjiWindowHeight() -> int: ...
    @property
    def KeyboardDelay() -> int: ...
    @property
    def KeyboardSpeed() -> int: ...
    @property
    def MaxWindowTrackSize() -> Size: ...
    @property
    def MenuAccessKeysUnderlined() -> bool: ...
    @property
    def MenuBarButtonSize() -> Size: ...
    @property
    def MenuButtonSize() -> Size: ...
    @property
    def MenuCheckSize() -> Size: ...
    @property
    def MenuFont() -> Font: ...
    @property
    def MenuHeight() -> int: ...
    @property
    def MenuShowDelay() -> int: ...
    @property
    def MidEastEnabled() -> bool: ...
    @property
    def MinimizedWindowSize() -> Size: ...
    @property
    def MinimizedWindowSpacingSize() -> Size: ...
    @property
    def MinimumWindowSize() -> Size: ...
    @property
    def MinWindowTrackSize() -> Size: ...
    @property
    def MonitorCount() -> int: ...
    @property
    def MonitorsSameDisplayFormat() -> bool: ...
    @property
    def MouseButtons() -> int: ...
    @property
    def MouseButtonsSwapped() -> bool: ...
    @property
    def MouseHoverSize() -> Size: ...
    @property
    def MouseHoverTime() -> int: ...
    @property
    def MousePresent() -> bool: ...
    @property
    def MouseSpeed() -> int: ...
    @property
    def MouseWheelPresent() -> bool: ...
    @property
    def MouseWheelScrollDelta() -> int: ...
    @property
    def MouseWheelScrollLines() -> int: ...
    @property
    def NativeMouseWheelSupport() -> bool: ...
    @property
    def Network() -> bool: ...
    @property
    def PenWindows() -> bool: ...
    @property
    def PopupMenuAlignment() -> LeftRightAlignment: ...
    @property
    def PowerStatus() -> PowerStatus: ...
    @property
    def PrimaryMonitorMaximizedWindowSize() -> Size: ...
    @property
    def PrimaryMonitorSize() -> Size: ...
    @property
    def RightAlignedMenus() -> bool: ...
    @property
    def ScreenOrientation() -> ScreenOrientation: ...
    @property
    def Secure() -> bool: ...
    @property
    def ShowSounds() -> bool: ...
    @property
    def SizingBorderWidth() -> int: ...
    @property
    def SmallCaptionButtonSize() -> Size: ...
    @property
    def SmallIconSize() -> Size: ...
    @property
    def TerminalServerSession() -> bool: ...
    @property
    def ToolWindowCaptionButtonSize() -> Size: ...
    @property
    def ToolWindowCaptionHeight() -> int: ...
    @property
    def UIEffectsEnabled() -> bool: ...
    @property
    def UserDomainName() -> str: ...
    @property
    def UserInteractive() -> bool: ...
    @property
    def UserName() -> str: ...
    @property
    def VerticalFocusThickness() -> int: ...
    @property
    def VerticalResizeBorderThickness() -> int: ...
    @property
    def VerticalScrollBarArrowHeight() -> int: ...
    @property
    def VerticalScrollBarThumbHeight() -> int: ...
    @property
    def VerticalScrollBarWidth() -> int: ...
    @property
    def VirtualScreen() -> Rectangle: ...
    @property
    def WorkingArea() -> Rectangle: ...
    def GetBorderSizeForDpi(dpi: int) -> Size: ...
    def GetHorizontalScrollBarArrowWidthForDpi(dpi: int) -> int: ...
    def GetHorizontalScrollBarHeightForDpi(dpi: int) -> int: ...
    def GetMenuFontForDpi(dpi: int) -> Font: ...
    def GetVerticalScrollBarWidthForDpi(dpi: int) -> int: ...
    def VerticalScrollBarArrowHeightForDpi(dpi: int) -> int: ...


class SystemParameter:
    DropShadow = 0
    FlatMenu = 1
    FontSmoothingContrastMetric = 2
    FontSmoothingTypeMetric = 3
    MenuFadeEnabled = 4
    SelectionFade = 5
    ToolTipAnimationMetric = 6
    UIEffects = 7
    CaretWidthMetric = 8
    VerticalFocusThicknessMetric = 9
    HorizontalFocusThicknessMetric = 10


class TabAlignment:
    Top = 0
    Bottom = 1
    Left = 2
    Right = 3


class TabAppearance:
    Normal = 0
    Buttons = 1
    FlatButtons = 2


class TabControl(Control):
    def __init__(self): ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def add_Deselected(self, value: TabControlEventHandler) -> None: ...
    def add_Deselecting(self, value: TabControlCancelEventHandler) -> None: ...
    def add_DrawItem(self, value: DrawItemEventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    def add_Selected(self, value: TabControlEventHandler) -> None: ...
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def add_Selecting(self, value: TabControlCancelEventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def DeselectTab(self, tabPage: TabPage) -> None: ...
    @overload
    def DeselectTab(self, index: int) -> None: ...
    @overload
    def DeselectTab(self, tabPageName: str) -> None: ...
    @property
    def Alignment(self) -> TabAlignment: ...
    @property
    def Appearance(self) -> TabAppearance: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def DrawMode(self) -> TabDrawMode: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def HotTrack(self) -> bool: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def ItemSize(self) -> Size: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def Padding(self) -> Point: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedTab(self) -> TabPage: ...
    @property
    def ShowToolTips(self) -> bool: ...
    @property
    def SizeMode(self) -> TabSizeMode: ...
    @property
    def TabCount(self) -> int: ...
    @property
    def TabPages(self) -> TabPageCollection: ...
    @property
    def Text(self) -> str: ...
    def GetControl(self, index: int) -> Control: ...
    def GetTabRect(self, index: int) -> Rectangle: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_Deselected(self, value: TabControlEventHandler) -> None: ...
    def remove_Deselecting(self, value: TabControlCancelEventHandler) -> None: ...
    def remove_DrawItem(self, value: DrawItemEventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_Selected(self, value: TabControlEventHandler) -> None: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def remove_Selecting(self, value: TabControlCancelEventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def SelectTab(self, tabPageName: str) -> None: ...
    @overload
    def SelectTab(self, index: int) -> None: ...
    @overload
    def SelectTab(self, tabPage: TabPage) -> None: ...
    @Alignment.setter
    def Alignment(self, value: TabAlignment) -> None: ...
    @Appearance.setter
    def Appearance(self, value: TabAppearance) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @DrawMode.setter
    def DrawMode(self, value: TabDrawMode) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @HotTrack.setter
    def HotTrack(self, value: bool) -> None: ...
    @ImageList.setter
    def ImageList(self, value: ImageList) -> None: ...
    @ItemSize.setter
    def ItemSize(self, value: Size) -> None: ...
    @Multiline.setter
    def Multiline(self, value: bool) -> None: ...
    @Padding.setter
    def Padding(self, value: Point) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedTab.setter
    def SelectedTab(self, value: TabPage) -> None: ...
    @ShowToolTips.setter
    def ShowToolTips(self, value: bool) -> None: ...
    @SizeMode.setter
    def SizeMode(self, value: TabSizeMode) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class TabControlAction:
    Selecting = 0
    Selected = 1
    Deselecting = 2
    Deselected = 3


class TabControlCancelEventArgs(CancelEventArgs):
    def __init__(self, tabPage: TabPage, tabPageIndex: int, cancel: bool, action: TabControlAction): ...
    @property
    def Action(self) -> TabControlAction: ...
    @property
    def TabPage(self) -> TabPage: ...
    @property
    def TabPageIndex(self) -> int: ...


class TabControlCancelEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TabControlCancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TabControlCancelEventArgs) -> None: ...


class TabControlEventArgs(EventArgs):
    def __init__(self, tabPage: TabPage, tabPageIndex: int, action: TabControlAction): ...
    @property
    def Action(self) -> TabControlAction: ...
    @property
    def TabPage(self) -> TabPage: ...
    @property
    def TabPageIndex(self) -> int: ...


class TabControlEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TabControlEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TabControlEventArgs) -> None: ...


class TabDrawMode:
    Normal = 0
    OwnerDrawFixed = 1


class TableLayoutCellPaintEventArgs(PaintEventArgs):
    def __init__(self, g: Graphics, clipRectangle: Rectangle, cellBounds: Rectangle, column: int, row: int): ...
    @property
    def CellBounds(self) -> Rectangle: ...
    @property
    def Column(self) -> int: ...
    @property
    def Row(self) -> int: ...


class TableLayoutCellPaintEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TableLayoutCellPaintEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TableLayoutCellPaintEventArgs) -> None: ...


class TableLayoutColumnStyleCollection(TableLayoutStyleCollection):
    @overload
    def Add(self, columnStyle: ColumnStyle) -> int: ...
    def Contains(self, columnStyle: ColumnStyle) -> bool: ...
    @property
    def Item(self, index: int) -> ColumnStyle: ...
    def IndexOf(self, columnStyle: ColumnStyle) -> int: ...
    def Insert(self, index: int, columnStyle: ColumnStyle) -> None: ...
    def Remove(self, columnStyle: ColumnStyle) -> None: ...
    @Item.setter
    def Item(self, index: int, value: ColumnStyle) -> None: ...


class TableLayoutControlCollection:
    def __init__(self, container: TableLayoutPanel): ...
    @overload
    def Add(self, control: Control, column: int, row: int) -> None: ...
    @property
    def Container(self) -> TableLayoutPanel: ...


class TableLayoutPanel(Panel):
    def __init__(self): ...
    def add_CellPaint(self, value: TableLayoutCellPaintEventHandler) -> None: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CellBorderStyle(self) -> TableLayoutPanelCellBorderStyle: ...
    @property
    def ColumnCount(self) -> int: ...
    @property
    def ColumnStyles(self) -> TableLayoutColumnStyleCollection: ...
    @property
    def Controls(self) -> TableLayoutControlCollection: ...
    @property
    def GrowStyle(self) -> TableLayoutPanelGrowStyle: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def LayoutSettings(self) -> TableLayoutSettings: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def RowStyles(self) -> TableLayoutRowStyleCollection: ...
    def GetCellPosition(self, control: Control) -> TableLayoutPanelCellPosition: ...
    def GetColumn(self, control: Control) -> int: ...
    def GetColumnSpan(self, control: Control) -> int: ...
    def GetColumnWidths(self) -> Set(int): ...
    def GetControlFromPosition(self, column: int, row: int) -> Control: ...
    def GetPositionFromControl(self, control: Control) -> TableLayoutPanelCellPosition: ...
    def GetRow(self, control: Control) -> int: ...
    def GetRowHeights(self) -> Set(int): ...
    def GetRowSpan(self, control: Control) -> int: ...
    def remove_CellPaint(self, value: TableLayoutCellPaintEventHandler) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @CellBorderStyle.setter
    def CellBorderStyle(self, value: TableLayoutPanelCellBorderStyle) -> None: ...
    @ColumnCount.setter
    def ColumnCount(self, value: int) -> None: ...
    @GrowStyle.setter
    def GrowStyle(self, value: TableLayoutPanelGrowStyle) -> None: ...
    @LayoutSettings.setter
    def LayoutSettings(self, value: TableLayoutSettings) -> None: ...
    @RowCount.setter
    def RowCount(self, value: int) -> None: ...
    def SetCellPosition(self, control: Control, position: TableLayoutPanelCellPosition) -> None: ...
    def SetColumn(self, control: Control, column: int) -> None: ...
    def SetColumnSpan(self, control: Control, value: int) -> None: ...
    def SetRow(self, control: Control, row: int) -> None: ...
    def SetRowSpan(self, control: Control, value: int) -> None: ...


class TableLayoutPanelCellBorderStyle:
    #None = 0
    Single = 1
    Inset = 2
    InsetDouble = 3
    Outset = 4
    OutsetDouble = 5
    OutsetPartial = 6


class TableLayoutPanelCellPosition(ValueType):
    def __init__(self, column: int, row: int): ...
    def Equals(self, other: Object) -> bool: ...
    @property
    def Column(self) -> int: ...
    @property
    def Row(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(p1: TableLayoutPanelCellPosition, p2: TableLayoutPanelCellPosition) -> bool: ...
    def op_Inequality(p1: TableLayoutPanelCellPosition, p2: TableLayoutPanelCellPosition) -> bool: ...
    @Column.setter
    def Column(self, value: int) -> None: ...
    @Row.setter
    def Row(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class TableLayoutPanelGrowStyle:
    FixedSize = 0
    AddRows = 1
    AddColumns = 2


class TableLayoutRowStyleCollection(TableLayoutStyleCollection):
    @overload
    def Add(self, rowStyle: RowStyle) -> int: ...
    def Contains(self, rowStyle: RowStyle) -> bool: ...
    @property
    def Item(self, index: int) -> RowStyle: ...
    def IndexOf(self, rowStyle: RowStyle) -> int: ...
    def Insert(self, index: int, rowStyle: RowStyle) -> None: ...
    def Remove(self, rowStyle: RowStyle) -> None: ...
    @Item.setter
    def Item(self, index: int, value: RowStyle) -> None: ...


class TableLayoutSettings(LayoutSettings):
    @property
    def ColumnCount(self) -> int: ...
    @property
    def ColumnStyles(self) -> TableLayoutColumnStyleCollection: ...
    @property
    def GrowStyle(self) -> TableLayoutPanelGrowStyle: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def RowStyles(self) -> TableLayoutRowStyleCollection: ...
    def GetCellPosition(self, control: Object) -> TableLayoutPanelCellPosition: ...
    def GetColumn(self, control: Object) -> int: ...
    def GetColumnSpan(self, control: Object) -> int: ...
    def GetRow(self, control: Object) -> int: ...
    def GetRowSpan(self, control: Object) -> int: ...
    @ColumnCount.setter
    def ColumnCount(self, value: int) -> None: ...
    @GrowStyle.setter
    def GrowStyle(self, value: TableLayoutPanelGrowStyle) -> None: ...
    @RowCount.setter
    def RowCount(self, value: int) -> None: ...
    def SetCellPosition(self, control: Object, cellPosition: TableLayoutPanelCellPosition) -> None: ...
    def SetColumn(self, control: Object, column: int) -> None: ...
    def SetColumnSpan(self, control: Object, value: int) -> None: ...
    def SetRow(self, control: Object, row: int) -> None: ...
    def SetRowSpan(self, control: Object, value: int) -> None: ...


class TableLayoutStyle(Object):
    @property
    def SizeType(self) -> SizeType: ...
    @SizeType.setter
    def SizeType(self, value: SizeType) -> None: ...


class TableLayoutStyleCollection(Object):
    def Add(self, style: TableLayoutStyle) -> int: ...
    def Clear(self) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> TableLayoutStyle: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: TableLayoutStyle) -> None: ...


class TabPage(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def PreferredSize(self) -> Size: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def UseVisualStyleBackColor(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    def GetTabPageOfComponent(comp: Object) -> TabPage: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ImageIndex.setter
    def ImageIndex(self, value: int) -> None: ...
    @ImageKey.setter
    def ImageKey(self, value: str) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTipText.setter
    def ToolTipText(self, value: str) -> None: ...
    @UseVisualStyleBackColor.setter
    def UseVisualStyleBackColor(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class TabPageCollection(Object):
    def __init__(self, owner: TabControl): ...
    @overload
    def Add(self, value: TabPage) -> None: ...
    @overload
    def Add(self, text: str) -> None: ...
    @overload
    def Add(self, key: str, text: str) -> None: ...
    @overload
    def Add(self, key: str, text: str, imageIndex: int) -> None: ...
    @overload
    def Add(self, key: str, text: str, imageKey: str) -> None: ...
    def AddRange(self, pages: Set(TabPage)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, page: TabPage) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> TabPage: ...
    @property
    def Item(self, key: str) -> TabPage: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, page: TabPage) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Insert(self, index: int, text: str) -> None: ...
    @overload
    def Insert(self, index: int, tabPage: TabPage) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageIndex: int) -> None: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageKey: str) -> None: ...
    def Remove(self, value: TabPage) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: TabPage) -> None: ...


class TabPageControlCollection:
    def __init__(self, owner: TabPage): ...
    def Add(self, value: Control) -> None: ...


class TabRenderer(Object):
    @overload
    def DrawTabItem(g: Graphics, bounds: Rectangle, state: TabItemState) -> None: ...
    @overload
    def DrawTabItem(g: Graphics, bounds: Rectangle, focused: bool, state: TabItemState) -> None: ...
    @overload
    def DrawTabItem(g: Graphics, bounds: Rectangle, tabItemText: str, font: Font, state: TabItemState) -> None: ...
    @overload
    def DrawTabItem(g: Graphics, bounds: Rectangle, tabItemText: str, font: Font, focused: bool, state: TabItemState) -> None: ...
    @overload
    def DrawTabItem(g: Graphics, bounds: Rectangle, image: Image, imageRectangle: Rectangle, focused: bool, state: TabItemState) -> None: ...
    @overload
    def DrawTabItem(g: Graphics, bounds: Rectangle, tabItemText: str, font: Font, flags: TextFormatFlags, focused: bool, state: TabItemState) -> None: ...
    @overload
    def DrawTabItem(g: Graphics, bounds: Rectangle, tabItemText: str, font: Font, image: Image, imageRectangle: Rectangle, focused: bool, state: TabItemState) -> None: ...
    @overload
    def DrawTabItem(g: Graphics, bounds: Rectangle, tabItemText: str, font: Font, flags: TextFormatFlags, image: Image, imageRectangle: Rectangle, focused: bool, state: TabItemState) -> None: ...
    def DrawTabPage(g: Graphics, bounds: Rectangle) -> None: ...
    @property
    def IsSupported() -> bool: ...


class TabSizeMode:
    Normal = 0
    FillToRight = 1
    Fixed = 2


class TextBox(TextBoxBase):
    def __init__(self): ...
    def add_TextAlignChanged(self, value: EventHandler) -> None: ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection: ...
    @property
    def AutoCompleteMode(self) -> AutoCompleteMode: ...
    @property
    def AutoCompleteSource(self) -> AutoCompleteSource: ...
    @property
    def CharacterCasing(self) -> CharacterCasing: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def PasswordChar(self) -> Char: ...
    @property
    def PlaceholderText(self) -> str: ...
    @property
    def ScrollBars(self) -> ScrollBars: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> HorizontalAlignment: ...
    @property
    def UseSystemPasswordChar(self) -> bool: ...
    @overload
    def Paste(self, text: str) -> None: ...
    def remove_TextAlignChanged(self, value: EventHandler) -> None: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: bool) -> None: ...
    @AutoCompleteCustomSource.setter
    def AutoCompleteCustomSource(self, value: AutoCompleteStringCollection) -> None: ...
    @AutoCompleteMode.setter
    def AutoCompleteMode(self, value: AutoCompleteMode) -> None: ...
    @AutoCompleteSource.setter
    def AutoCompleteSource(self, value: AutoCompleteSource) -> None: ...
    @CharacterCasing.setter
    def CharacterCasing(self, value: CharacterCasing) -> None: ...
    @Multiline.setter
    def Multiline(self, value: bool) -> None: ...
    @PasswordChar.setter
    def PasswordChar(self, value: Char) -> None: ...
    @PlaceholderText.setter
    def PlaceholderText(self, value: str) -> None: ...
    @ScrollBars.setter
    def ScrollBars(self, value: ScrollBars) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: HorizontalAlignment) -> None: ...
    @UseSystemPasswordChar.setter
    def UseSystemPasswordChar(self, value: bool) -> None: ...


class TextBoxBase(Control):
    def add_AcceptsTabChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def add_BorderStyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    def add_HideSelectionChanged(self, value: EventHandler) -> None: ...
    def add_ModifiedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    def add_MultilineChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_ReadOnlyChanged(self, value: EventHandler) -> None: ...
    def AppendText(self, text: str) -> None: ...
    def Clear(self) -> None: ...
    def ClearUndo(self) -> None: ...
    def Copy(self) -> None: ...
    def Cut(self) -> None: ...
    def DeselectAll(self) -> None: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CanUndo(self) -> bool: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def HideSelection(self) -> bool: ...
    @property
    def Lines(self) -> Set(str): ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SelectionLength(self) -> int: ...
    @property
    def SelectionStart(self) -> int: ...
    @property
    def ShortcutsEnabled(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextLength(self) -> int: ...
    @property
    def WordWrap(self) -> bool: ...
    def GetCharFromPosition(self, pt: Point) -> Char: ...
    def GetCharIndexFromPosition(self, pt: Point) -> int: ...
    def GetFirstCharIndexFromLine(self, lineNumber: int) -> int: ...
    def GetFirstCharIndexOfCurrentLine(self) -> int: ...
    def GetLineFromCharIndex(self, index: int) -> int: ...
    def GetPositionFromCharIndex(self, index: int) -> Point: ...
    def Paste(self) -> None: ...
    def remove_AcceptsTabChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_BorderStyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_HideSelectionChanged(self, value: EventHandler) -> None: ...
    def remove_ModifiedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    def remove_MultilineChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_ReadOnlyChanged(self, value: EventHandler) -> None: ...
    def ScrollToCaret(self) -> None: ...
    @overload
    def Select(self, start: int, length: int) -> None: ...
    def SelectAll(self) -> None: ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: bool) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @HideSelection.setter
    def HideSelection(self, value: bool) -> None: ...
    @Lines.setter
    def Lines(self, value: Set(str)) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @Modified.setter
    def Modified(self, value: bool) -> None: ...
    @Multiline.setter
    def Multiline(self, value: bool) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @SelectedText.setter
    def SelectedText(self, value: str) -> None: ...
    @SelectionLength.setter
    def SelectionLength(self, value: int) -> None: ...
    @SelectionStart.setter
    def SelectionStart(self, value: int) -> None: ...
    @ShortcutsEnabled.setter
    def ShortcutsEnabled(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @WordWrap.setter
    def WordWrap(self, value: bool) -> None: ...
    def ToString(self) -> str: ...
    def Undo(self) -> None: ...


class TextBoxRenderer(Object):
    @overload
    def DrawTextBox(g: Graphics, bounds: Rectangle, state: TextBoxState) -> None: ...
    @overload
    def DrawTextBox(g: Graphics, bounds: Rectangle, textBoxText: str, font: Font, state: TextBoxState) -> None: ...
    @overload
    def DrawTextBox(g: Graphics, bounds: Rectangle, textBoxText: str, font: Font, textBounds: Rectangle, state: TextBoxState) -> None: ...
    @overload
    def DrawTextBox(g: Graphics, bounds: Rectangle, textBoxText: str, font: Font, flags: TextFormatFlags, state: TextBoxState) -> None: ...
    @overload
    def DrawTextBox(g: Graphics, bounds: Rectangle, textBoxText: str, font: Font, textBounds: Rectangle, flags: TextFormatFlags, state: TextBoxState) -> None: ...
    @property
    def IsSupported() -> bool: ...


class TextDataFormat:
    Text = 0
    UnicodeText = 1
    Rtf = 2
    Html = 3
    CommaSeparatedValue = 4


class TextFormatFlags:
    GlyphOverhangPadding = 0
    Left = 0
    Default = 0
    Top = 0
    HorizontalCenter = 1
    Right = 2
    VerticalCenter = 4
    Bottom = 8
    WordBreak = 16
    SingleLine = 32
    ExpandTabs = 64
    NoClipping = 256
    ExternalLeading = 512
    NoPrefix = 2048
    Internal = 4096
    TextBoxControl = 8192
    PathEllipsis = 16384
    EndEllipsis = 32768
    ModifyString = 65536
    RightToLeft = 131072
    WordEllipsis = 262144
    NoFullWidthCharacterBreak = 524288
    HidePrefix = 1048576
    PrefixOnly = 2097152
    PreserveGraphicsClipping = 16777216
    PreserveGraphicsTranslateTransform = 33554432
    NoPadding = 268435456
    LeftAndRightPadding = 536870912


class TextImageRelation:
    Overlay = 0
    ImageAboveText = 1
    TextAboveImage = 2
    ImageBeforeText = 4
    TextBeforeImage = 8


class TextRenderer(Object):
    @overload
    def DrawText(dc: IDeviceContext, text: str, font: Font, pt: Point, foreColor: Color) -> None: ...
    @overload
    def DrawText(dc: IDeviceContext, text: str, font: Font, bounds: Rectangle, foreColor: Color) -> None: ...
    @overload
    def DrawText(dc: IDeviceContext, text: str, font: Font, pt: Point, foreColor: Color, backColor: Color) -> None: ...
    @overload
    def DrawText(dc: IDeviceContext, text: str, font: Font, pt: Point, foreColor: Color, flags: TextFormatFlags) -> None: ...
    @overload
    def DrawText(dc: IDeviceContext, text: str, font: Font, bounds: Rectangle, foreColor: Color, backColor: Color) -> None: ...
    @overload
    def DrawText(dc: IDeviceContext, text: str, font: Font, bounds: Rectangle, foreColor: Color, flags: TextFormatFlags) -> None: ...
    @overload
    def DrawText(dc: IDeviceContext, text: str, font: Font, pt: Point, foreColor: Color, backColor: Color, flags: TextFormatFlags) -> None: ...
    @overload
    def DrawText(dc: IDeviceContext, text: str, font: Font, bounds: Rectangle, foreColor: Color, backColor: Color, flags: TextFormatFlags) -> None: ...
    @overload
    def MeasureText(text: str, font: Font) -> Size: ...
    @overload
    def MeasureText(dc: IDeviceContext, text: str, font: Font) -> Size: ...
    @overload
    def MeasureText(text: str, font: Font, proposedSize: Size) -> Size: ...
    @overload
    def MeasureText(text: str, font: Font, proposedSize: Size, flags: TextFormatFlags) -> Size: ...
    @overload
    def MeasureText(dc: IDeviceContext, text: str, font: Font, proposedSize: Size) -> Size: ...
    @overload
    def MeasureText(dc: IDeviceContext, text: str, font: Font, proposedSize: Size, flags: TextFormatFlags) -> Size: ...


class ThreadExceptionDialog(Form):
    def __init__(self, t: Exception): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...


class TickStyle:
    #None = 0
    TopLeft = 1
    BottomRight = 2
    Both = 3


class Timer(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, container: IContainer): ...
    def add_Tick(self, value: EventHandler) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Interval(self) -> int: ...
    @property
    def Tag(self) -> Object: ...
    def remove_Tick(self, value: EventHandler) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Interval.setter
    def Interval(self, value: int) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...
    def ToString(self) -> str: ...


class ToolStrip(ScrollableControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Set(ToolStripItem)): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    def add_BeginDrag(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    def add_EndDrag(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    def add_ItemAdded(self, value: ToolStripItemEventHandler) -> None: ...
    def add_ItemClicked(self, value: ToolStripItemClickedEventHandler) -> None: ...
    def add_ItemRemoved(self, value: ToolStripItemEventHandler) -> None: ...
    def add_LayoutCompleted(self, value: EventHandler) -> None: ...
    def add_LayoutStyleChanged(self, value: EventHandler) -> None: ...
    def add_PaintGrip(self, value: PaintEventHandler) -> None: ...
    def add_RendererChanged(self, value: EventHandler) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AllowItemReorder(self) -> bool: ...
    @property
    def AllowMerge(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoScrollPosition(self) -> Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def CanOverflow(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DefaultDropDownDirection(self) -> ToolStripDropDownDirection: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def GripDisplayStyle(self) -> ToolStripGripDisplayStyle: ...
    @property
    def GripMargin(self) -> Padding: ...
    @property
    def GripRectangle(self) -> Rectangle: ...
    @property
    def GripStyle(self) -> ToolStripGripStyle: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def ImageScalingSize(self) -> Size: ...
    @property
    def IsCurrentlyDragging(self) -> bool: ...
    @property
    def IsDropDown(self) -> bool: ...
    @property
    def Items(self) -> ToolStripItemCollection: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def LayoutSettings(self) -> LayoutSettings: ...
    @property
    def LayoutStyle(self) -> ToolStripLayoutStyle: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def OverflowButton(self) -> ToolStripOverflowButton: ...
    @property
    def Renderer(self) -> ToolStripRenderer: ...
    @property
    def RenderMode(self) -> ToolStripRenderMode: ...
    @property
    def ShowItemToolTips(self) -> bool: ...
    @property
    def Stretch(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @overload
    def GetChildAtPoint(self, point: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetItemAt(self, point: Point) -> ToolStripItem: ...
    @overload
    def GetItemAt(self, x: int, y: int) -> ToolStripItem: ...
    def GetNextItem(self, start: ToolStripItem, direction: ArrowDirection) -> ToolStripItem: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    def remove_BeginDrag(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    def remove_EndDrag(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    def remove_ItemAdded(self, value: ToolStripItemEventHandler) -> None: ...
    def remove_ItemClicked(self, value: ToolStripItemClickedEventHandler) -> None: ...
    def remove_ItemRemoved(self, value: ToolStripItemEventHandler) -> None: ...
    def remove_LayoutCompleted(self, value: EventHandler) -> None: ...
    def remove_LayoutStyleChanged(self, value: EventHandler) -> None: ...
    def remove_PaintGrip(self, value: PaintEventHandler) -> None: ...
    def remove_RendererChanged(self, value: EventHandler) -> None: ...
    def ResetMinimumSize(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AllowItemReorder.setter
    def AllowItemReorder(self, value: bool) -> None: ...
    @AllowMerge.setter
    def AllowMerge(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @CanOverflow.setter
    def CanOverflow(self, value: bool) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DefaultDropDownDirection.setter
    def DefaultDropDownDirection(self, value: ToolStripDropDownDirection) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @GripMargin.setter
    def GripMargin(self, value: Padding) -> None: ...
    @GripStyle.setter
    def GripStyle(self, value: ToolStripGripStyle) -> None: ...
    @ImageList.setter
    def ImageList(self, value: ImageList) -> None: ...
    @ImageScalingSize.setter
    def ImageScalingSize(self, value: Size) -> None: ...
    @LayoutSettings.setter
    def LayoutSettings(self, value: LayoutSettings) -> None: ...
    @LayoutStyle.setter
    def LayoutStyle(self, value: ToolStripLayoutStyle) -> None: ...
    @Renderer.setter
    def Renderer(self, value: ToolStripRenderer) -> None: ...
    @RenderMode.setter
    def RenderMode(self, value: ToolStripRenderMode) -> None: ...
    @ShowItemToolTips.setter
    def ShowItemToolTips(self, value: bool) -> None: ...
    @Stretch.setter
    def Stretch(self, value: bool) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @TextDirection.setter
    def TextDirection(self, value: ToolStripTextDirection) -> None: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    def ToString(self) -> str: ...


class ToolStripAccessibleObject:
    def __init__(self, owner: ToolStrip): ...
    @property
    def Role(self) -> AccessibleRole: ...
    def GetChild(self, index: int) -> AccessibleObject: ...
    def GetChildCount(self) -> int: ...
    def HitTest(self, x: int, y: int) -> AccessibleObject: ...


class ToolStripArrowRenderEventArgs(EventArgs):
    def __init__(self, g: Graphics, toolStripItem: ToolStripItem, arrowRectangle: Rectangle, arrowColor: Color, arrowDirection: ArrowDirection): ...
    @property
    def ArrowColor(self) -> Color: ...
    @property
    def ArrowRectangle(self) -> Rectangle: ...
    @property
    def Direction(self) -> ArrowDirection: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Item(self) -> ToolStripItem: ...
    @ArrowColor.setter
    def ArrowColor(self, value: Color) -> None: ...
    @ArrowRectangle.setter
    def ArrowRectangle(self, value: Rectangle) -> None: ...
    @Direction.setter
    def Direction(self, value: ArrowDirection) -> None: ...


class ToolStripArrowRenderEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripArrowRenderEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripArrowRenderEventArgs) -> None: ...


class ToolStripButton(ToolStripItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler, name: str): ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    def add_CheckStateChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoToolTip(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def CheckOnClick(self) -> bool: ...
    @property
    def CheckState(self) -> CheckState: ...
    def GetPreferredSize(self, constrainingSize: Size) -> Size: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    def remove_CheckStateChanged(self, value: EventHandler) -> None: ...
    @AutoToolTip.setter
    def AutoToolTip(self, value: bool) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...
    @CheckOnClick.setter
    def CheckOnClick(self, value: bool) -> None: ...
    @CheckState.setter
    def CheckState(self, value: CheckState) -> None: ...


class ToolStripComboBox(ToolStripControlHost):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, c: Control): ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    def add_DropDown(self, value: EventHandler) -> None: ...
    def add_DropDownClosed(self, value: EventHandler) -> None: ...
    def add_DropDownStyleChanged(self, value: EventHandler) -> None: ...
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def add_TextUpdate(self, value: EventHandler) -> None: ...
    def BeginUpdate(self) -> None: ...
    def EndUpdate(self) -> None: ...
    @overload
    def FindString(self, s: str) -> int: ...
    @overload
    def FindString(self, s: str, startIndex: int) -> int: ...
    @overload
    def FindStringExact(self, s: str) -> int: ...
    @overload
    def FindStringExact(self, s: str, startIndex: int) -> int: ...
    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection: ...
    @property
    def AutoCompleteMode(self) -> AutoCompleteMode: ...
    @property
    def AutoCompleteSource(self) -> AutoCompleteSource: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def ComboBox(self) -> ComboBox: ...
    @property
    def DropDownHeight(self) -> int: ...
    @property
    def DropDownStyle(self) -> ComboBoxStyle: ...
    @property
    def DropDownWidth(self) -> int: ...
    @property
    def DroppedDown(self) -> bool: ...
    @property
    def FlatStyle(self) -> FlatStyle: ...
    @property
    def IntegralHeight(self) -> bool: ...
    @property
    def Items(self) -> ObjectCollection: ...
    @property
    def MaxDropDownItems(self) -> int: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedItem(self) -> Object: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SelectionLength(self) -> int: ...
    @property
    def SelectionStart(self) -> int: ...
    @property
    def Sorted(self) -> bool: ...
    def GetItemHeight(self, index: int) -> int: ...
    def GetPreferredSize(self, constrainingSize: Size) -> Size: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    def remove_DropDown(self, value: EventHandler) -> None: ...
    def remove_DropDownClosed(self, value: EventHandler) -> None: ...
    def remove_DropDownStyleChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def remove_TextUpdate(self, value: EventHandler) -> None: ...
    @overload
    def Select(self, start: int, length: int) -> None: ...
    def SelectAll(self) -> None: ...
    @AutoCompleteCustomSource.setter
    def AutoCompleteCustomSource(self, value: AutoCompleteStringCollection) -> None: ...
    @AutoCompleteMode.setter
    def AutoCompleteMode(self, value: AutoCompleteMode) -> None: ...
    @AutoCompleteSource.setter
    def AutoCompleteSource(self, value: AutoCompleteSource) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @DropDownHeight.setter
    def DropDownHeight(self, value: int) -> None: ...
    @DropDownStyle.setter
    def DropDownStyle(self, value: ComboBoxStyle) -> None: ...
    @DropDownWidth.setter
    def DropDownWidth(self, value: int) -> None: ...
    @DroppedDown.setter
    def DroppedDown(self, value: bool) -> None: ...
    @FlatStyle.setter
    def FlatStyle(self, value: FlatStyle) -> None: ...
    @IntegralHeight.setter
    def IntegralHeight(self, value: bool) -> None: ...
    @MaxDropDownItems.setter
    def MaxDropDownItems(self, value: int) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedItem.setter
    def SelectedItem(self, value: Object) -> None: ...
    @SelectedText.setter
    def SelectedText(self, value: str) -> None: ...
    @SelectionLength.setter
    def SelectionLength(self, value: int) -> None: ...
    @SelectionStart.setter
    def SelectionStart(self, value: int) -> None: ...
    @Sorted.setter
    def Sorted(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class ToolStripContainer(ContainerControl):
    def __init__(self): ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BottomToolStripPanel(self) -> ToolStripPanel: ...
    @property
    def BottomToolStripPanelVisible(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ContentPanel(self) -> ToolStripContentPanel: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def LeftToolStripPanel(self) -> ToolStripPanel: ...
    @property
    def LeftToolStripPanelVisible(self) -> bool: ...
    @property
    def RightToolStripPanel(self) -> ToolStripPanel: ...
    @property
    def RightToolStripPanelVisible(self) -> bool: ...
    @property
    def TopToolStripPanel(self) -> ToolStripPanel: ...
    @property
    def TopToolStripPanelVisible(self) -> bool: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BottomToolStripPanelVisible.setter
    def BottomToolStripPanelVisible(self, value: bool) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @LeftToolStripPanelVisible.setter
    def LeftToolStripPanelVisible(self, value: bool) -> None: ...
    @RightToolStripPanelVisible.setter
    def RightToolStripPanelVisible(self, value: bool) -> None: ...
    @TopToolStripPanelVisible.setter
    def TopToolStripPanelVisible(self, value: bool) -> None: ...


class ToolStripContentPanel(Panel):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    def add_RendererChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Name(self) -> str: ...
    @property
    def Renderer(self) -> ToolStripRenderer: ...
    @property
    def RenderMode(self) -> ToolStripRenderMode: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    def remove_RendererChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Renderer.setter
    def Renderer(self, value: ToolStripRenderer) -> None: ...
    @RenderMode.setter
    def RenderMode(self, value: ToolStripRenderMode) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...


class ToolStripContentPanelRenderEventArgs(EventArgs):
    def __init__(self, g: Graphics, contentPanel: ToolStripContentPanel): ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def ToolStripContentPanel(self) -> ToolStripContentPanel: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class ToolStripContentPanelRenderEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripContentPanelRenderEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripContentPanelRenderEventArgs) -> None: ...


class ToolStripControlHost(ToolStripItem):
    @overload
    def __init__(self, c: Control): ...
    @overload
    def __init__(self, c: Control, name: str): ...
    @overload
    def add_DisplayStyleChanged(self, value: EventHandler) -> None: ...
    def add_Enter(self, value: EventHandler) -> None: ...
    def add_GotFocus(self, value: EventHandler) -> None: ...
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    def add_Leave(self, value: EventHandler) -> None: ...
    def add_LostFocus(self, value: EventHandler) -> None: ...
    def add_Validated(self, value: EventHandler) -> None: ...
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    def Focus(self) -> None: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def Control(self) -> Control: ...
    @property
    def ControlAlign(self) -> ContentAlignment: ...
    @property
    def DisplayStyle(self) -> ToolStripItemDisplayStyle: ...
    @property
    def DoubleClickEnabled(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Image(self) -> Image: ...
    @property
    def ImageAlign(self) -> ContentAlignment: ...
    @property
    def ImageScaling(self) -> ToolStripItemImageScaling: ...
    @property
    def ImageTransparentColor(self) -> Color: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftAutoMirrorImage(self) -> bool: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> ContentAlignment: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def TextImageRelation(self) -> TextImageRelation: ...
    def GetPreferredSize(self, constrainingSize: Size) -> Size: ...
    @overload
    def remove_DisplayStyleChanged(self, value: EventHandler) -> None: ...
    def remove_Enter(self, value: EventHandler) -> None: ...
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    def remove_Leave(self, value: EventHandler) -> None: ...
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    def remove_Validated(self, value: EventHandler) -> None: ...
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    def ResetBackColor(self) -> None: ...
    def ResetForeColor(self) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ControlAlign.setter
    def ControlAlign(self, value: ContentAlignment) -> None: ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: ToolStripItemDisplayStyle) -> None: ...
    @DoubleClickEnabled.setter
    def DoubleClickEnabled(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @ImageAlign.setter
    def ImageAlign(self, value: ContentAlignment) -> None: ...
    @ImageScaling.setter
    def ImageScaling(self, value: ToolStripItemImageScaling) -> None: ...
    @ImageTransparentColor.setter
    def ImageTransparentColor(self, value: Color) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @RightToLeftAutoMirrorImage.setter
    def RightToLeftAutoMirrorImage(self, value: bool) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: ContentAlignment) -> None: ...
    @TextDirection.setter
    def TextDirection(self, value: ToolStripTextDirection) -> None: ...
    @TextImageRelation.setter
    def TextImageRelation(self, value: TextImageRelation) -> None: ...


class ToolStripDropDown(ToolStrip):
    def __init__(self): ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    def add_Closed(self, value: ToolStripDropDownClosedEventHandler) -> None: ...
    def add_Closing(self, value: ToolStripDropDownClosingEventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    def add_Opened(self, value: EventHandler) -> None: ...
    def add_Opening(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Close(self, reason: ToolStripDropDownCloseReason) -> None: ...
    @property
    def AllowItemReorder(self) -> bool: ...
    @property
    def AllowTransparency(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoClose(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def CanOverflow(self) -> bool: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DefaultDropDownDirection(self) -> ToolStripDropDownDirection: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DropShadowEnabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def GripDisplayStyle(self) -> ToolStripGripDisplayStyle: ...
    @property
    def GripMargin(self) -> Padding: ...
    @property
    def GripRectangle(self) -> Rectangle: ...
    @property
    def GripStyle(self) -> ToolStripGripStyle: ...
    @property
    def IsAutoGenerated(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OverflowButton(self) -> ToolStripOverflowButton: ...
    @property
    def OwnerItem(self) -> ToolStripItem: ...
    @property
    def Region(self) -> Region: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def Stretch(self) -> bool: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    def remove_Closed(self, value: ToolStripDropDownClosedEventHandler) -> None: ...
    def remove_Closing(self, value: ToolStripDropDownClosingEventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    def remove_Opened(self, value: EventHandler) -> None: ...
    def remove_Opening(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @AllowItemReorder.setter
    def AllowItemReorder(self, value: bool) -> None: ...
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoClose.setter
    def AutoClose(self, value: bool) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @CanOverflow.setter
    def CanOverflow(self, value: bool) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @DefaultDropDownDirection.setter
    def DefaultDropDownDirection(self, value: ToolStripDropDownDirection) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @DropShadowEnabled.setter
    def DropShadowEnabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @GripMargin.setter
    def GripMargin(self, value: Padding) -> None: ...
    @GripStyle.setter
    def GripStyle(self, value: ToolStripGripStyle) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @OwnerItem.setter
    def OwnerItem(self, value: ToolStripItem) -> None: ...
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @Stretch.setter
    def Stretch(self, value: bool) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TextDirection.setter
    def TextDirection(self, value: ToolStripTextDirection) -> None: ...
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, screenLocation: Point) -> None: ...
    @overload
    def Show(self, x: int, y: int) -> None: ...
    @overload
    def Show(self, position: Point, direction: ToolStripDropDownDirection) -> None: ...
    @overload
    def Show(self, control: Control, position: Point) -> None: ...
    @overload
    def Show(self, control: Control, position: Point, direction: ToolStripDropDownDirection) -> None: ...
    @overload
    def Show(self, control: Control, x: int, y: int) -> None: ...


class ToolStripDropDownAccessibleObject:
    def __init__(self, owner: ToolStripDropDown): ...
    @property
    def Name(self) -> str: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class ToolStripDropDownButton(ToolStripDropDownItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler): ...
    @overload
    def __init__(self, text: str, image: Image, dropDownItems: Set(ToolStripItem)): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler, name: str): ...
    @property
    def AutoToolTip(self) -> bool: ...
    @property
    def ShowDropDownArrow(self) -> bool: ...
    @AutoToolTip.setter
    def AutoToolTip(self, value: bool) -> None: ...
    @ShowDropDownArrow.setter
    def ShowDropDownArrow(self, value: bool) -> None: ...


class ToolStripDropDownClosedEventArgs(EventArgs):
    def __init__(self, reason: ToolStripDropDownCloseReason): ...
    @property
    def CloseReason(self) -> ToolStripDropDownCloseReason: ...


class ToolStripDropDownClosedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripDropDownClosedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripDropDownClosedEventArgs) -> None: ...


class ToolStripDropDownCloseReason:
    AppFocusChange = 0
    AppClicked = 1
    ItemClicked = 2
    Keyboard = 3
    CloseCalled = 4


class ToolStripDropDownClosingEventArgs(CancelEventArgs):
    def __init__(self, reason: ToolStripDropDownCloseReason): ...
    @property
    def CloseReason(self) -> ToolStripDropDownCloseReason: ...


class ToolStripDropDownClosingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripDropDownClosingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripDropDownClosingEventArgs) -> None: ...


class ToolStripDropDownDirection:
    AboveLeft = 0
    AboveRight = 1
    BelowLeft = 2
    BelowRight = 3
    Left = 4
    Right = 5
    Default = 7


class ToolStripDropDownItem(ToolStripItem):
    def add_DropDownClosed(self, value: EventHandler) -> None: ...
    def add_DropDownItemClicked(self, value: ToolStripItemClickedEventHandler) -> None: ...
    def add_DropDownOpened(self, value: EventHandler) -> None: ...
    def add_DropDownOpening(self, value: EventHandler) -> None: ...
    @property
    def DropDown(self) -> ToolStripDropDown: ...
    @property
    def DropDownDirection(self) -> ToolStripDropDownDirection: ...
    @property
    def DropDownItems(self) -> ToolStripItemCollection: ...
    @property
    def HasDropDown(self) -> bool: ...
    @property
    def HasDropDownItems(self) -> bool: ...
    @property
    def Pressed(self) -> bool: ...
    def HideDropDown(self) -> None: ...
    def remove_DropDownClosed(self, value: EventHandler) -> None: ...
    def remove_DropDownItemClicked(self, value: ToolStripItemClickedEventHandler) -> None: ...
    def remove_DropDownOpened(self, value: EventHandler) -> None: ...
    def remove_DropDownOpening(self, value: EventHandler) -> None: ...
    @DropDown.setter
    def DropDown(self, value: ToolStripDropDown) -> None: ...
    @DropDownDirection.setter
    def DropDownDirection(self, value: ToolStripDropDownDirection) -> None: ...
    def ShowDropDown(self) -> None: ...


class ToolStripDropDownItemAccessibleObject:
    def __init__(self, item: ToolStripDropDownItem): ...
    def DoDefaultAction(self) -> None: ...
    @property
    def Role(self) -> AccessibleRole: ...
    def GetChild(self, index: int) -> AccessibleObject: ...
    def GetChildCount(self) -> int: ...


class ToolStripDropDownMenu(ToolStripDropDown):
    def __init__(self): ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def LayoutStyle(self) -> ToolStripLayoutStyle: ...
    @property
    def ShowCheckMargin(self) -> bool: ...
    @property
    def ShowImageMargin(self) -> bool: ...
    @LayoutStyle.setter
    def LayoutStyle(self, value: ToolStripLayoutStyle) -> None: ...
    @ShowCheckMargin.setter
    def ShowCheckMargin(self, value: bool) -> None: ...
    @ShowImageMargin.setter
    def ShowImageMargin(self, value: bool) -> None: ...


class ToolStripGripDisplayStyle:
    Horizontal = 0
    Vertical = 1


class ToolStripGripRenderEventArgs(ToolStripRenderEventArgs):
    def __init__(self, g: Graphics, toolStrip: ToolStrip): ...
    @property
    def GripBounds(self) -> Rectangle: ...
    @property
    def GripDisplayStyle(self) -> ToolStripGripDisplayStyle: ...
    @property
    def GripStyle(self) -> ToolStripGripStyle: ...


class ToolStripGripRenderEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripGripRenderEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripGripRenderEventArgs) -> None: ...


class ToolStripGripStyle:
    Hidden = 0
    Visible = 1


class ToolStripHostedControlAccessibleObject:
    def __init__(self, toolStripHostedControl: Control, toolStripControlHost: ToolStripControlHost): ...


class ToolStripItem(Component):
    def add_AvailableChanged(self, value: EventHandler) -> None: ...
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    def add_Click(self, value: EventHandler) -> None: ...
    def add_DisplayStyleChanged(self, value: EventHandler) -> None: ...
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    def add_DragLeave(self, value: EventHandler) -> None: ...
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    def add_MouseHover(self, value: EventHandler) -> None: ...
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    def add_OwnerChanged(self, value: EventHandler) -> None: ...
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    def DoDragDrop(self, data: Object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def Alignment(self) -> ToolStripItemAlignment: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoToolTip(self) -> bool: ...
    @property
    def Available(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def ContentRectangle(self) -> Rectangle: ...
    @property
    def DisplayStyle(self) -> ToolStripItemDisplayStyle: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DoubleClickEnabled(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Height(self) -> int: ...
    @property
    def Image(self) -> Image: ...
    @property
    def ImageAlign(self) -> ContentAlignment: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageScaling(self) -> ToolStripItemImageScaling: ...
    @property
    def ImageTransparentColor(self) -> Color: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsOnDropDown(self) -> bool: ...
    @property
    def IsOnOverflow(self) -> bool: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MergeAction(self) -> MergeAction: ...
    @property
    def MergeIndex(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Overflow(self) -> ToolStripItemOverflow: ...
    @property
    def Owner(self) -> ToolStrip: ...
    @property
    def OwnerItem(self) -> ToolStripItem: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Placement(self) -> ToolStripItemPlacement: ...
    @property
    def Pressed(self) -> bool: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftAutoMirrorImage(self) -> bool: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> ContentAlignment: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def TextImageRelation(self) -> TextImageRelation: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    def GetCurrentParent(self) -> ToolStrip: ...
    def GetPreferredSize(self, constrainingSize: Size) -> Size: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, r: Rectangle) -> None: ...
    def PerformClick(self) -> None: ...
    def remove_AvailableChanged(self, value: EventHandler) -> None: ...
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_DisplayStyleChanged(self, value: EventHandler) -> None: ...
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    def remove_OwnerChanged(self, value: EventHandler) -> None: ...
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    def ResetBackColor(self) -> None: ...
    def ResetDisplayStyle(self) -> None: ...
    def ResetFont(self) -> None: ...
    def ResetForeColor(self) -> None: ...
    def ResetImage(self) -> None: ...
    def ResetMargin(self) -> None: ...
    def ResetPadding(self) -> None: ...
    def ResetRightToLeft(self) -> None: ...
    def ResetTextDirection(self) -> None: ...
    def Select(self) -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @Alignment.setter
    def Alignment(self, value: ToolStripItemAlignment) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoToolTip.setter
    def AutoToolTip(self, value: bool) -> None: ...
    @Available.setter
    def Available(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: ToolStripItemDisplayStyle) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @DoubleClickEnabled.setter
    def DoubleClickEnabled(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @ImageAlign.setter
    def ImageAlign(self, value: ContentAlignment) -> None: ...
    @ImageIndex.setter
    def ImageIndex(self, value: int) -> None: ...
    @ImageKey.setter
    def ImageKey(self, value: str) -> None: ...
    @ImageScaling.setter
    def ImageScaling(self, value: ToolStripItemImageScaling) -> None: ...
    @ImageTransparentColor.setter
    def ImageTransparentColor(self, value: Color) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MergeAction.setter
    def MergeAction(self, value: MergeAction) -> None: ...
    @MergeIndex.setter
    def MergeIndex(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Overflow.setter
    def Overflow(self, value: ToolStripItemOverflow) -> None: ...
    @Owner.setter
    def Owner(self, value: ToolStrip) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @RightToLeftAutoMirrorImage.setter
    def RightToLeftAutoMirrorImage(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: ContentAlignment) -> None: ...
    @TextDirection.setter
    def TextDirection(self, value: ToolStripTextDirection) -> None: ...
    @TextImageRelation.setter
    def TextImageRelation(self, value: TextImageRelation) -> None: ...
    @ToolTipText.setter
    def ToolTipText(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def ToString(self) -> str: ...


class ToolStripItemAccessibleObject(AccessibleObject):
    def __init__(self, ownerItem: ToolStripItem): ...
    def AddState(self, state: AccessibleStates) -> None: ...
    def DoDefaultAction(self) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def DefaultAction(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Help(self) -> str: ...
    @property
    def KeyboardShortcut(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> AccessibleObject: ...
    @property
    def Role(self) -> AccessibleRole: ...
    @property
    def State(self) -> AccessibleStates: ...
    def GetHelpTopic(self) -> Tuple[int, str]: ...
    def Navigate(self, navigationDirection: AccessibleNavigation) -> AccessibleObject: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ToolStripItemAlignment:
    Left = 0
    Right = 1


class ToolStripItemClickedEventArgs(EventArgs):
    def __init__(self, clickedItem: ToolStripItem): ...
    @property
    def ClickedItem(self) -> ToolStripItem: ...


class ToolStripItemClickedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripItemClickedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripItemClickedEventArgs) -> None: ...


class ToolStripItemCollection(ArrangedElementCollection):
    def __init__(self, owner: ToolStrip, value: Set(ToolStripItem)): ...
    @overload
    def Add(self, text: str) -> ToolStripItem: ...
    @overload
    def Add(self, image: Image) -> ToolStripItem: ...
    @overload
    def Add(self, value: ToolStripItem) -> int: ...
    @overload
    def Add(self, text: str, image: Image) -> ToolStripItem: ...
    @overload
    def Add(self, text: str, image: Image, onClick: EventHandler) -> ToolStripItem: ...
    @overload
    def AddRange(self, toolStripItems: Set(ToolStripItem)) -> None: ...
    @overload
    def AddRange(self, toolStripItems: ToolStripItemCollection) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, value: ToolStripItem) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def CopyTo(self, array: Set(ToolStripItem), index: int) -> None: ...
    def Find(self, key: str, searchAllChildren: bool) -> Set(ToolStripItem): ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: int) -> ToolStripItem: ...
    @property
    def Item(self, key: str) -> ToolStripItem: ...
    def IndexOf(self, value: ToolStripItem) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...
    def Insert(self, index: int, value: ToolStripItem) -> None: ...
    def Remove(self, value: ToolStripItem) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveByKey(self, key: str) -> None: ...


class ToolStripItemDisplayStyle:
    #None = 0
    Text = 1
    Image = 2
    ImageAndText = 3


class ToolStripItemEventArgs(EventArgs):
    def __init__(self, item: ToolStripItem): ...
    @property
    def Item(self) -> ToolStripItem: ...


class ToolStripItemEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripItemEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripItemEventArgs) -> None: ...


class ToolStripItemImageRenderEventArgs(ToolStripItemRenderEventArgs):
    @overload
    def __init__(self, g: Graphics, item: ToolStripItem, imageRectangle: Rectangle): ...
    @overload
    def __init__(self, g: Graphics, item: ToolStripItem, image: Image, imageRectangle: Rectangle): ...
    @property
    def Image(self) -> Image: ...
    @property
    def ImageRectangle(self) -> Rectangle: ...


class ToolStripItemImageRenderEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripItemImageRenderEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripItemImageRenderEventArgs) -> None: ...


class ToolStripItemImageScaling:
    #None = 0
    SizeToFit = 1


class ToolStripItemOverflow:
    Never = 0
    Always = 1
    AsNeeded = 2


class ToolStripItemPlacement:
    Main = 0
    Overflow = 1
    #None = 2


class ToolStripItemRenderEventArgs(EventArgs):
    def __init__(self, g: Graphics, item: ToolStripItem): ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Item(self) -> ToolStripItem: ...
    @property
    def ToolStrip(self) -> ToolStrip: ...


class ToolStripItemRenderEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripItemRenderEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripItemRenderEventArgs) -> None: ...


class ToolStripItemTextRenderEventArgs(ToolStripItemRenderEventArgs):
    @overload
    def __init__(self, g: Graphics, item: ToolStripItem, text: str, textRectangle: Rectangle, textColor: Color, textFont: Font, format: TextFormatFlags): ...
    @overload
    def __init__(self, g: Graphics, item: ToolStripItem, text: str, textRectangle: Rectangle, textColor: Color, textFont: Font, textAlign: ContentAlignment): ...
    @property
    def Text(self) -> str: ...
    @property
    def TextColor(self) -> Color: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def TextFont(self) -> Font: ...
    @property
    def TextFormat(self) -> TextFormatFlags: ...
    @property
    def TextRectangle(self) -> Rectangle: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...
    @TextDirection.setter
    def TextDirection(self, value: ToolStripTextDirection) -> None: ...
    @TextFont.setter
    def TextFont(self, value: Font) -> None: ...
    @TextFormat.setter
    def TextFormat(self, value: TextFormatFlags) -> None: ...
    @TextRectangle.setter
    def TextRectangle(self, value: Rectangle) -> None: ...


class ToolStripItemTextRenderEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripItemTextRenderEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripItemTextRenderEventArgs) -> None: ...


class ToolStripLabel(ToolStripItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image, isLink: bool): ...
    @overload
    def __init__(self, text: str, image: Image, isLink: bool, onClick: EventHandler): ...
    @overload
    def __init__(self, text: str, image: Image, isLink: bool, onClick: EventHandler, name: str): ...
    @property
    def ActiveLinkColor(self) -> Color: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def IsLink(self) -> bool: ...
    @property
    def LinkBehavior(self) -> LinkBehavior: ...
    @property
    def LinkColor(self) -> Color: ...
    @property
    def LinkVisited(self) -> bool: ...
    @property
    def VisitedLinkColor(self) -> Color: ...
    @ActiveLinkColor.setter
    def ActiveLinkColor(self, value: Color) -> None: ...
    @IsLink.setter
    def IsLink(self, value: bool) -> None: ...
    @LinkBehavior.setter
    def LinkBehavior(self, value: LinkBehavior) -> None: ...
    @LinkColor.setter
    def LinkColor(self, value: Color) -> None: ...
    @LinkVisited.setter
    def LinkVisited(self, value: bool) -> None: ...
    @VisitedLinkColor.setter
    def VisitedLinkColor(self, value: Color) -> None: ...


class ToolStripLayoutStyle:
    StackWithOverflow = 0
    HorizontalStackWithOverflow = 1
    VerticalStackWithOverflow = 2
    Flow = 3
    Table = 4


class ToolStripManager(Object):
    def add_RendererChanged(value: EventHandler) -> None: ...
    def FindToolStrip(toolStripName: str) -> ToolStrip: ...
    @property
    def Renderer() -> ToolStripRenderer: ...
    @property
    def RenderMode() -> ToolStripManagerRenderMode: ...
    @property
    def VisualStylesEnabled() -> bool: ...
    def IsShortcutDefined(shortcut: Keys) -> bool: ...
    def IsValidShortcut(shortcut: Keys) -> bool: ...
    @overload
    def LoadSettings(targetForm: Form) -> None: ...
    @overload
    def LoadSettings(targetForm: Form, key: str) -> None: ...
    @overload
    def Merge(sourceToolStrip: ToolStrip, targetToolStrip: ToolStrip) -> bool: ...
    @overload
    def Merge(sourceToolStrip: ToolStrip, targetName: str) -> bool: ...
    def remove_RendererChanged(value: EventHandler) -> None: ...
    @overload
    def RevertMerge(targetToolStrip: ToolStrip) -> bool: ...
    @overload
    def RevertMerge(targetName: str) -> bool: ...
    @overload
    def RevertMerge(targetToolStrip: ToolStrip, sourceToolStrip: ToolStrip) -> bool: ...
    @overload
    def SaveSettings(sourceForm: Form) -> None: ...
    @overload
    def SaveSettings(sourceForm: Form, key: str) -> None: ...
    @Renderer.setter
    def Renderer(value: ToolStripRenderer) -> None: ...
    @RenderMode.setter
    def RenderMode(value: ToolStripManagerRenderMode) -> None: ...
    @VisualStylesEnabled.setter
    def VisualStylesEnabled(value: bool) -> None: ...


class ToolStripManagerRenderMode:
    Custom = 0
    System = 1
    Professional = 2


class ToolStripMenuItem(ToolStripDropDownItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler): ...
    @overload
    def __init__(self, text: str, image: Image, dropDownItems: Set(ToolStripItem)): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler, name: str): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler, shortcutKeys: Keys): ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    def add_CheckStateChanged(self, value: EventHandler) -> None: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def CheckOnClick(self) -> bool: ...
    @property
    def CheckState(self) -> CheckState: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def IsMdiWindowListEntry(self) -> bool: ...
    @property
    def Overflow(self) -> ToolStripItemOverflow: ...
    @property
    def ShortcutKeyDisplayString(self) -> str: ...
    @property
    def ShortcutKeys(self) -> Keys: ...
    @property
    def ShowShortcutKeys(self) -> bool: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    def remove_CheckStateChanged(self, value: EventHandler) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...
    @CheckOnClick.setter
    def CheckOnClick(self, value: bool) -> None: ...
    @CheckState.setter
    def CheckState(self, value: CheckState) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Overflow.setter
    def Overflow(self, value: ToolStripItemOverflow) -> None: ...
    @ShortcutKeyDisplayString.setter
    def ShortcutKeyDisplayString(self, value: str) -> None: ...
    @ShortcutKeys.setter
    def ShortcutKeys(self, value: Keys) -> None: ...
    @ShowShortcutKeys.setter
    def ShowShortcutKeys(self, value: bool) -> None: ...


class ToolStripOverflow(ToolStripDropDown):
    def __init__(self, parentItem: ToolStripItem): ...
    @property
    def Items(self) -> ToolStripItemCollection: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    def GetPreferredSize(self, constrainingSize: Size) -> Size: ...


class ToolStripOverflowButton(ToolStripDropDownButton):
    @property
    def HasDropDownItems(self) -> bool: ...
    @property
    def RightToLeftAutoMirrorImage(self) -> bool: ...
    def GetPreferredSize(self, constrainingSize: Size) -> Size: ...
    @RightToLeftAutoMirrorImage.setter
    def RightToLeftAutoMirrorImage(self, value: bool) -> None: ...


class ToolStripPanel(ContainerControl):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    def add_RendererChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def BeginInit(self) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Renderer(self) -> ToolStripRenderer: ...
    @property
    def RenderMode(self) -> ToolStripRenderMode: ...
    @property
    def RowMargin(self) -> Padding: ...
    @property
    def Rows(self) -> Set(ToolStripPanelRow): ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def Join(self, toolStripToDrag: ToolStrip) -> None: ...
    @overload
    def Join(self, toolStripToDrag: ToolStrip, row: int) -> None: ...
    @overload
    def Join(self, toolStripToDrag: ToolStrip, location: Point) -> None: ...
    @overload
    def Join(self, toolStripToDrag: ToolStrip, x: int, y: int) -> None: ...
    def PointToRow(self, clientLocation: Point) -> ToolStripPanelRow: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    def remove_RendererChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Locked.setter
    def Locked(self, value: bool) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @Renderer.setter
    def Renderer(self, value: ToolStripRenderer) -> None: ...
    @RenderMode.setter
    def RenderMode(self, value: ToolStripRenderMode) -> None: ...
    @RowMargin.setter
    def RowMargin(self, value: Padding) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class ToolStripPanelRenderEventArgs(EventArgs):
    def __init__(self, g: Graphics, toolStripPanel: ToolStripPanel): ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def ToolStripPanel(self) -> ToolStripPanel: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class ToolStripPanelRenderEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripPanelRenderEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripPanelRenderEventArgs) -> None: ...


class ToolStripPanelRow(Component):
    def __init__(self, parent: ToolStripPanel): ...
    def CanMove(self, toolStripToDrag: ToolStrip) -> bool: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Controls(self) -> Set(Control): ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def ToolStripPanel(self) -> ToolStripPanel: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...


class ToolStripPanelRowCollection(ArrangedElementCollection):
    @overload
    def __init__(self, owner: ToolStripPanel): ...
    @overload
    def __init__(self, owner: ToolStripPanel, value: Set(ToolStripPanelRow)): ...
    def Add(self, value: ToolStripPanelRow) -> int: ...
    @overload
    def AddRange(self, value: Set(ToolStripPanelRow)) -> None: ...
    @overload
    def AddRange(self, value: ToolStripPanelRowCollection) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, value: ToolStripPanelRow) -> bool: ...
    @overload
    def CopyTo(self, array: Set(ToolStripPanelRow), index: int) -> None: ...
    @property
    def Item(self, index: int) -> ToolStripPanelRow: ...
    def IndexOf(self, value: ToolStripPanelRow) -> int: ...
    def Insert(self, index: int, value: ToolStripPanelRow) -> None: ...
    def Remove(self, value: ToolStripPanelRow) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class ToolStripProfessionalRenderer(ToolStripRenderer):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, professionalColorTable: ProfessionalColorTable): ...
    @property
    def ColorTable(self) -> ProfessionalColorTable: ...
    @property
    def RoundedEdges(self) -> bool: ...
    @RoundedEdges.setter
    def RoundedEdges(self, value: bool) -> None: ...


class ToolStripProgressBar(ToolStripControlHost):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_OwnerChanged(self, value: EventHandler) -> None: ...
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def MarqueeAnimationSpeed(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def ProgressBar(self) -> ProgressBar: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def Step(self) -> int: ...
    @property
    def Style(self) -> ProgressBarStyle: ...
    @property
    def Text(self) -> str: ...
    @property
    def Value(self) -> int: ...
    def Increment(self, value: int) -> None: ...
    def PerformStep(self) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_OwnerChanged(self, value: EventHandler) -> None: ...
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @MarqueeAnimationSpeed.setter
    def MarqueeAnimationSpeed(self, value: int) -> None: ...
    @Maximum.setter
    def Maximum(self, value: int) -> None: ...
    @Minimum.setter
    def Minimum(self, value: int) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @Step.setter
    def Step(self, value: int) -> None: ...
    @Style.setter
    def Style(self, value: ProgressBarStyle) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: int) -> None: ...


class ToolStripRenderer(Object):
    def add_RenderArrow(self, value: ToolStripArrowRenderEventHandler) -> None: ...
    def add_RenderButtonBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def add_RenderDropDownButtonBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def add_RenderGrip(self, value: ToolStripGripRenderEventHandler) -> None: ...
    def add_RenderImageMargin(self, value: ToolStripRenderEventHandler) -> None: ...
    def add_RenderItemBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def add_RenderItemCheck(self, value: ToolStripItemImageRenderEventHandler) -> None: ...
    def add_RenderItemImage(self, value: ToolStripItemImageRenderEventHandler) -> None: ...
    def add_RenderItemText(self, value: ToolStripItemTextRenderEventHandler) -> None: ...
    def add_RenderLabelBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def add_RenderMenuItemBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def add_RenderOverflowButtonBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def add_RenderSeparator(self, value: ToolStripSeparatorRenderEventHandler) -> None: ...
    def add_RenderSplitButtonBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def add_RenderStatusStripSizingGrip(self, value: ToolStripRenderEventHandler) -> None: ...
    def add_RenderToolStripBackground(self, value: ToolStripRenderEventHandler) -> None: ...
    def add_RenderToolStripBorder(self, value: ToolStripRenderEventHandler) -> None: ...
    def add_RenderToolStripContentPanelBackground(self, value: ToolStripContentPanelRenderEventHandler) -> None: ...
    def add_RenderToolStripPanelBackground(self, value: ToolStripPanelRenderEventHandler) -> None: ...
    def add_RenderToolStripStatusLabelBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def CreateDisabledImage(normalImage: Image) -> Image: ...
    def DrawArrow(self, e: ToolStripArrowRenderEventArgs) -> None: ...
    def DrawButtonBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    def DrawDropDownButtonBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    def DrawGrip(self, e: ToolStripGripRenderEventArgs) -> None: ...
    def DrawImageMargin(self, e: ToolStripRenderEventArgs) -> None: ...
    def DrawItemBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    def DrawItemCheck(self, e: ToolStripItemImageRenderEventArgs) -> None: ...
    def DrawItemImage(self, e: ToolStripItemImageRenderEventArgs) -> None: ...
    def DrawItemText(self, e: ToolStripItemTextRenderEventArgs) -> None: ...
    def DrawLabelBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    def DrawMenuItemBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    def DrawOverflowButtonBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    def DrawSeparator(self, e: ToolStripSeparatorRenderEventArgs) -> None: ...
    def DrawSplitButton(self, e: ToolStripItemRenderEventArgs) -> None: ...
    def DrawStatusStripSizingGrip(self, e: ToolStripRenderEventArgs) -> None: ...
    def DrawToolStripBackground(self, e: ToolStripRenderEventArgs) -> None: ...
    def DrawToolStripBorder(self, e: ToolStripRenderEventArgs) -> None: ...
    def DrawToolStripContentPanelBackground(self, e: ToolStripContentPanelRenderEventArgs) -> None: ...
    def DrawToolStripPanelBackground(self, e: ToolStripPanelRenderEventArgs) -> None: ...
    def DrawToolStripStatusLabelBackground(self, e: ToolStripItemRenderEventArgs) -> None: ...
    def remove_RenderArrow(self, value: ToolStripArrowRenderEventHandler) -> None: ...
    def remove_RenderButtonBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def remove_RenderDropDownButtonBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def remove_RenderGrip(self, value: ToolStripGripRenderEventHandler) -> None: ...
    def remove_RenderImageMargin(self, value: ToolStripRenderEventHandler) -> None: ...
    def remove_RenderItemBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def remove_RenderItemCheck(self, value: ToolStripItemImageRenderEventHandler) -> None: ...
    def remove_RenderItemImage(self, value: ToolStripItemImageRenderEventHandler) -> None: ...
    def remove_RenderItemText(self, value: ToolStripItemTextRenderEventHandler) -> None: ...
    def remove_RenderLabelBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def remove_RenderMenuItemBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def remove_RenderOverflowButtonBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def remove_RenderSeparator(self, value: ToolStripSeparatorRenderEventHandler) -> None: ...
    def remove_RenderSplitButtonBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...
    def remove_RenderStatusStripSizingGrip(self, value: ToolStripRenderEventHandler) -> None: ...
    def remove_RenderToolStripBackground(self, value: ToolStripRenderEventHandler) -> None: ...
    def remove_RenderToolStripBorder(self, value: ToolStripRenderEventHandler) -> None: ...
    def remove_RenderToolStripContentPanelBackground(self, value: ToolStripContentPanelRenderEventHandler) -> None: ...
    def remove_RenderToolStripPanelBackground(self, value: ToolStripPanelRenderEventHandler) -> None: ...
    def remove_RenderToolStripStatusLabelBackground(self, value: ToolStripItemRenderEventHandler) -> None: ...


class ToolStripRenderEventArgs(EventArgs):
    @overload
    def __init__(self, g: Graphics, toolStrip: ToolStrip): ...
    @overload
    def __init__(self, g: Graphics, toolStrip: ToolStrip, affectedBounds: Rectangle, backColor: Color): ...
    @property
    def AffectedBounds(self) -> Rectangle: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def ConnectedArea(self) -> Rectangle: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def ToolStrip(self) -> ToolStrip: ...


class ToolStripRenderEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripRenderEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripRenderEventArgs) -> None: ...


class ToolStripRenderMode:
    Custom = 0
    System = 1
    Professional = 2
    ManagerRenderMode = 3


class ToolStripSeparator(ToolStripItem):
    def __init__(self): ...
    @overload
    def add_DisplayStyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoToolTip(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def DisplayStyle(self) -> ToolStripItemDisplayStyle: ...
    @property
    def DoubleClickEnabled(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def Image(self) -> Image: ...
    @property
    def ImageAlign(self) -> ContentAlignment: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageScaling(self) -> ToolStripItemImageScaling: ...
    @property
    def ImageTransparentColor(self) -> Color: ...
    @property
    def RightToLeftAutoMirrorImage(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> ContentAlignment: ...
    @property
    def TextDirection(self) -> ToolStripTextDirection: ...
    @property
    def TextImageRelation(self) -> TextImageRelation: ...
    @property
    def ToolTipText(self) -> str: ...
    def GetPreferredSize(self, constrainingSize: Size) -> Size: ...
    @overload
    def remove_DisplayStyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @AutoToolTip.setter
    def AutoToolTip(self, value: bool) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: ToolStripItemDisplayStyle) -> None: ...
    @DoubleClickEnabled.setter
    def DoubleClickEnabled(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @ImageAlign.setter
    def ImageAlign(self, value: ContentAlignment) -> None: ...
    @ImageIndex.setter
    def ImageIndex(self, value: int) -> None: ...
    @ImageKey.setter
    def ImageKey(self, value: str) -> None: ...
    @ImageScaling.setter
    def ImageScaling(self, value: ToolStripItemImageScaling) -> None: ...
    @ImageTransparentColor.setter
    def ImageTransparentColor(self, value: Color) -> None: ...
    @RightToLeftAutoMirrorImage.setter
    def RightToLeftAutoMirrorImage(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: ContentAlignment) -> None: ...
    @TextDirection.setter
    def TextDirection(self, value: ToolStripTextDirection) -> None: ...
    @TextImageRelation.setter
    def TextImageRelation(self, value: TextImageRelation) -> None: ...
    @ToolTipText.setter
    def ToolTipText(self, value: str) -> None: ...


class ToolStripSeparatorRenderEventArgs(ToolStripItemRenderEventArgs):
    def __init__(self, g: Graphics, separator: ToolStripSeparator, vertical: bool): ...
    @property
    def Vertical(self) -> bool: ...


class ToolStripSeparatorRenderEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ToolStripSeparatorRenderEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ToolStripSeparatorRenderEventArgs) -> None: ...


class ToolStripSplitButton(ToolStripDropDownItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler): ...
    @overload
    def __init__(self, text: str, image: Image, dropDownItems: Set(ToolStripItem)): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler, name: str): ...
    def add_ButtonClick(self, value: EventHandler) -> None: ...
    def add_ButtonDoubleClick(self, value: EventHandler) -> None: ...
    def add_DefaultItemChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoToolTip(self) -> bool: ...
    @property
    def ButtonBounds(self) -> Rectangle: ...
    @property
    def ButtonPressed(self) -> bool: ...
    @property
    def ButtonSelected(self) -> bool: ...
    @property
    def DefaultItem(self) -> ToolStripItem: ...
    @property
    def DropDownButtonBounds(self) -> Rectangle: ...
    @property
    def DropDownButtonPressed(self) -> bool: ...
    @property
    def DropDownButtonSelected(self) -> bool: ...
    @property
    def DropDownButtonWidth(self) -> int: ...
    @property
    def SplitterBounds(self) -> Rectangle: ...
    def GetPreferredSize(self, constrainingSize: Size) -> Size: ...
    def OnButtonDoubleClick(self, e: EventArgs) -> None: ...
    def PerformButtonClick(self) -> None: ...
    def remove_ButtonClick(self, value: EventHandler) -> None: ...
    def remove_ButtonDoubleClick(self, value: EventHandler) -> None: ...
    def remove_DefaultItemChanged(self, value: EventHandler) -> None: ...
    def ResetDropDownButtonWidth(self) -> None: ...
    @AutoToolTip.setter
    def AutoToolTip(self, value: bool) -> None: ...
    @DefaultItem.setter
    def DefaultItem(self, value: ToolStripItem) -> None: ...
    @DropDownButtonWidth.setter
    def DropDownButtonWidth(self, value: int) -> None: ...


class ToolStripSplitButtonAccessibleObject:
    def __init__(self, item: ToolStripSplitButton): ...
    def DoDefaultAction(self) -> None: ...


class ToolStripStatusLabel(ToolStripLabel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler): ...
    @overload
    def __init__(self, text: str, image: Image, onClick: EventHandler, name: str): ...
    @property
    def Alignment(self) -> ToolStripItemAlignment: ...
    @property
    def BorderSides(self) -> ToolStripStatusLabelBorderSides: ...
    @property
    def BorderStyle(self) -> Border3DStyle: ...
    @property
    def LiveSetting(self) -> AutomationLiveSetting: ...
    @property
    def Spring(self) -> bool: ...
    def GetPreferredSize(self, constrainingSize: Size) -> Size: ...
    @Alignment.setter
    def Alignment(self, value: ToolStripItemAlignment) -> None: ...
    @BorderSides.setter
    def BorderSides(self, value: ToolStripStatusLabelBorderSides) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: Border3DStyle) -> None: ...
    @LiveSetting.setter
    def LiveSetting(self, value: AutomationLiveSetting) -> None: ...
    @Spring.setter
    def Spring(self, value: bool) -> None: ...


class ToolStripStatusLabelBorderSides:
    #None = 0
    Left = 1
    Top = 2
    Right = 4
    Bottom = 8
    All = 15


class ToolStripSystemRenderer(ToolStripRenderer):
    def __init__(self): ...


class ToolStripTextBox(ToolStripControlHost):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, c: Control): ...
    def add_AcceptsTabChanged(self, value: EventHandler) -> None: ...
    def add_BorderStyleChanged(self, value: EventHandler) -> None: ...
    def add_HideSelectionChanged(self, value: EventHandler) -> None: ...
    def add_ModifiedChanged(self, value: EventHandler) -> None: ...
    def add_MultilineChanged(self, value: EventHandler) -> None: ...
    def add_ReadOnlyChanged(self, value: EventHandler) -> None: ...
    def add_TextBoxTextAlignChanged(self, value: EventHandler) -> None: ...
    def AppendText(self, text: str) -> None: ...
    def Clear(self) -> None: ...
    def ClearUndo(self) -> None: ...
    def Copy(self) -> None: ...
    def Cut(self) -> None: ...
    def DeselectAll(self) -> None: ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def AutoCompleteCustomSource(self) -> AutoCompleteStringCollection: ...
    @property
    def AutoCompleteMode(self) -> AutoCompleteMode: ...
    @property
    def AutoCompleteSource(self) -> AutoCompleteSource: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CanUndo(self) -> bool: ...
    @property
    def CharacterCasing(self) -> CharacterCasing: ...
    @property
    def HideSelection(self) -> bool: ...
    @property
    def Lines(self) -> Set(str): ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def Multiline(self) -> bool: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def SelectionLength(self) -> int: ...
    @property
    def SelectionStart(self) -> int: ...
    @property
    def ShortcutsEnabled(self) -> bool: ...
    @property
    def TextBox(self) -> TextBox: ...
    @property
    def TextBoxTextAlign(self) -> HorizontalAlignment: ...
    @property
    def TextLength(self) -> int: ...
    @property
    def WordWrap(self) -> bool: ...
    def GetCharFromPosition(self, pt: Point) -> Char: ...
    def GetCharIndexFromPosition(self, pt: Point) -> int: ...
    def GetFirstCharIndexFromLine(self, lineNumber: int) -> int: ...
    def GetFirstCharIndexOfCurrentLine(self) -> int: ...
    def GetLineFromCharIndex(self, index: int) -> int: ...
    def GetPositionFromCharIndex(self, index: int) -> Point: ...
    def GetPreferredSize(self, constrainingSize: Size) -> Size: ...
    def Paste(self) -> None: ...
    def remove_AcceptsTabChanged(self, value: EventHandler) -> None: ...
    def remove_BorderStyleChanged(self, value: EventHandler) -> None: ...
    def remove_HideSelectionChanged(self, value: EventHandler) -> None: ...
    def remove_ModifiedChanged(self, value: EventHandler) -> None: ...
    def remove_MultilineChanged(self, value: EventHandler) -> None: ...
    def remove_ReadOnlyChanged(self, value: EventHandler) -> None: ...
    def remove_TextBoxTextAlignChanged(self, value: EventHandler) -> None: ...
    def ScrollToCaret(self) -> None: ...
    @overload
    def Select(self, start: int, length: int) -> None: ...
    def SelectAll(self) -> None: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: bool) -> None: ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: bool) -> None: ...
    @AutoCompleteCustomSource.setter
    def AutoCompleteCustomSource(self, value: AutoCompleteStringCollection) -> None: ...
    @AutoCompleteMode.setter
    def AutoCompleteMode(self, value: AutoCompleteMode) -> None: ...
    @AutoCompleteSource.setter
    def AutoCompleteSource(self, value: AutoCompleteSource) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @CharacterCasing.setter
    def CharacterCasing(self, value: CharacterCasing) -> None: ...
    @HideSelection.setter
    def HideSelection(self, value: bool) -> None: ...
    @Lines.setter
    def Lines(self, value: Set(str)) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @Modified.setter
    def Modified(self, value: bool) -> None: ...
    @Multiline.setter
    def Multiline(self, value: bool) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @SelectedText.setter
    def SelectedText(self, value: str) -> None: ...
    @SelectionLength.setter
    def SelectionLength(self, value: int) -> None: ...
    @SelectionStart.setter
    def SelectionStart(self, value: int) -> None: ...
    @ShortcutsEnabled.setter
    def ShortcutsEnabled(self, value: bool) -> None: ...
    @TextBoxTextAlign.setter
    def TextBoxTextAlign(self, value: HorizontalAlignment) -> None: ...
    @WordWrap.setter
    def WordWrap(self, value: bool) -> None: ...
    def Undo(self) -> None: ...


class ToolStripTextDirection:
    Inherit = 0
    Horizontal = 1
    Vertical90 = 2
    Vertical270 = 3


class ToolTip(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cont: IContainer): ...
    def add_Draw(self, value: DrawToolTipEventHandler) -> None: ...
    def add_Popup(self, value: PopupEventHandler) -> None: ...
    def CanExtend(self, target: Object) -> bool: ...
    @property
    def Active(self) -> bool: ...
    @property
    def AutomaticDelay(self) -> int: ...
    @property
    def AutoPopDelay(self) -> int: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def InitialDelay(self) -> int: ...
    @property
    def IsBalloon(self) -> bool: ...
    @property
    def OwnerDraw(self) -> bool: ...
    @property
    def ReshowDelay(self) -> int: ...
    @property
    def ShowAlways(self) -> bool: ...
    @property
    def StripAmpersands(self) -> bool: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def ToolTipIcon(self) -> ToolTipIcon: ...
    @property
    def ToolTipTitle(self) -> str: ...
    @property
    def UseAnimation(self) -> bool: ...
    @property
    def UseFading(self) -> bool: ...
    def GetToolTip(self, control: Control) -> str: ...
    def Hide(self, win: IWin32Window) -> None: ...
    def remove_Draw(self, value: DrawToolTipEventHandler) -> None: ...
    def remove_Popup(self, value: PopupEventHandler) -> None: ...
    def RemoveAll(self) -> None: ...
    @Active.setter
    def Active(self, value: bool) -> None: ...
    @AutomaticDelay.setter
    def AutomaticDelay(self, value: int) -> None: ...
    @AutoPopDelay.setter
    def AutoPopDelay(self, value: int) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @InitialDelay.setter
    def InitialDelay(self, value: int) -> None: ...
    @IsBalloon.setter
    def IsBalloon(self, value: bool) -> None: ...
    @OwnerDraw.setter
    def OwnerDraw(self, value: bool) -> None: ...
    @ReshowDelay.setter
    def ReshowDelay(self, value: int) -> None: ...
    @ShowAlways.setter
    def ShowAlways(self, value: bool) -> None: ...
    @StripAmpersands.setter
    def StripAmpersands(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @ToolTipIcon.setter
    def ToolTipIcon(self, value: ToolTipIcon) -> None: ...
    @ToolTipTitle.setter
    def ToolTipTitle(self, value: str) -> None: ...
    @UseAnimation.setter
    def UseAnimation(self, value: bool) -> None: ...
    @UseFading.setter
    def UseFading(self, value: bool) -> None: ...
    def SetToolTip(self, control: Control, caption: str) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window, duration: int) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window, point: Point) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window, point: Point, duration: int) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window, x: int, y: int) -> None: ...
    @overload
    def Show(self, text: str, window: IWin32Window, x: int, y: int, duration: int) -> None: ...
    def ToString(self) -> str: ...


class ToolTipIcon:
    #None = 0
    Info = 1
    Warning = 2
    Error = 3


class TrackBar(Control):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    def add_Scroll(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    def BeginInit(self) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def LargeChange(self) -> int: ...
    @property
    def Maximum(self) -> int: ...
    @property
    def Minimum(self) -> int: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def SmallChange(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def TickFrequency(self) -> int: ...
    @property
    def TickStyle(self) -> TickStyle: ...
    @property
    def Value(self) -> int: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_Scroll(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @LargeChange.setter
    def LargeChange(self, value: int) -> None: ...
    @Maximum.setter
    def Maximum(self, value: int) -> None: ...
    @Minimum.setter
    def Minimum(self, value: int) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @SmallChange.setter
    def SmallChange(self, value: int) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TickFrequency.setter
    def TickFrequency(self, value: int) -> None: ...
    @TickStyle.setter
    def TickStyle(self, value: TickStyle) -> None: ...
    @Value.setter
    def Value(self, value: int) -> None: ...
    def SetRange(self, minValue: int, maxValue: int) -> None: ...
    def ToString(self) -> str: ...


class TrackBarRenderer(Object):
    def DrawBottomPointingThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) -> None: ...
    def DrawHorizontalThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) -> None: ...
    def DrawHorizontalTicks(g: Graphics, bounds: Rectangle, numTicks: int, edgeStyle: EdgeStyle) -> None: ...
    def DrawHorizontalTrack(g: Graphics, bounds: Rectangle) -> None: ...
    def DrawLeftPointingThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) -> None: ...
    def DrawRightPointingThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) -> None: ...
    def DrawTopPointingThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) -> None: ...
    def DrawVerticalThumb(g: Graphics, bounds: Rectangle, state: TrackBarThumbState) -> None: ...
    def DrawVerticalTicks(g: Graphics, bounds: Rectangle, numTicks: int, edgeStyle: EdgeStyle) -> None: ...
    def DrawVerticalTrack(g: Graphics, bounds: Rectangle) -> None: ...
    @property
    def IsSupported() -> bool: ...
    def GetBottomPointingThumbSize(g: Graphics, state: TrackBarThumbState) -> Size: ...
    def GetLeftPointingThumbSize(g: Graphics, state: TrackBarThumbState) -> Size: ...
    def GetRightPointingThumbSize(g: Graphics, state: TrackBarThumbState) -> Size: ...
    def GetTopPointingThumbSize(g: Graphics, state: TrackBarThumbState) -> Size: ...


class TreeNode(MarshalByRefObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, text: str, children: Set(TreeNode)): ...
    @overload
    def __init__(self, text: str, imageIndex: int, selectedImageIndex: int): ...
    @overload
    def __init__(self, text: str, imageIndex: int, selectedImageIndex: int, children: Set(TreeNode)): ...
    def BeginEdit(self) -> None: ...
    def Clone(self) -> Object: ...
    @overload
    def Collapse(self) -> None: ...
    @overload
    def Collapse(self, ignoreChildren: bool) -> None: ...
    def EndEdit(self, cancel: bool) -> None: ...
    def EnsureVisible(self) -> None: ...
    def Expand(self) -> None: ...
    def ExpandAll(self) -> None: ...
    def FromHandle(tree: TreeView, handle: IntPtr) -> TreeNode: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def FirstNode(self) -> TreeNode: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsEditing(self) -> bool: ...
    @property
    def IsExpanded(self) -> bool: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LastNode(self) -> TreeNode: ...
    @property
    def Level(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NextNode(self) -> TreeNode: ...
    @property
    def NextVisibleNode(self) -> TreeNode: ...
    @property
    def NodeFont(self) -> Font: ...
    @property
    def Nodes(self) -> TreeNodeCollection: ...
    @property
    def Parent(self) -> TreeNode: ...
    @property
    def PrevNode(self) -> TreeNode: ...
    @property
    def PrevVisibleNode(self) -> TreeNode: ...
    @property
    def SelectedImageIndex(self) -> int: ...
    @property
    def SelectedImageKey(self) -> str: ...
    @property
    def StateImageIndex(self) -> int: ...
    @property
    def StateImageKey(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTipText(self) -> str: ...
    @property
    def TreeView(self) -> TreeView: ...
    def GetNodeCount(self, includeSubTrees: bool) -> int: ...
    def Remove(self) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @ImageIndex.setter
    def ImageIndex(self, value: int) -> None: ...
    @ImageKey.setter
    def ImageKey(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @NodeFont.setter
    def NodeFont(self, value: Font) -> None: ...
    @SelectedImageIndex.setter
    def SelectedImageIndex(self, value: int) -> None: ...
    @SelectedImageKey.setter
    def SelectedImageKey(self, value: str) -> None: ...
    @StateImageIndex.setter
    def StateImageIndex(self, value: int) -> None: ...
    @StateImageKey.setter
    def StateImageKey(self, value: str) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTipText.setter
    def ToolTipText(self, value: str) -> None: ...
    def Toggle(self) -> None: ...
    def ToString(self) -> str: ...


class TreeNodeCollection(Object):
    @overload
    def Add(self, node: TreeNode) -> int: ...
    @overload
    def Add(self, text: str) -> TreeNode: ...
    @overload
    def Add(self, key: str, text: str) -> TreeNode: ...
    @overload
    def Add(self, key: str, text: str, imageKey: str) -> TreeNode: ...
    @overload
    def Add(self, key: str, text: str, imageIndex: int) -> TreeNode: ...
    @overload
    def Add(self, key: str, text: str, imageIndex: int, selectedImageIndex: int) -> TreeNode: ...
    @overload
    def Add(self, key: str, text: str, imageKey: str, selectedImageKey: str) -> TreeNode: ...
    def AddRange(self, nodes: Set(TreeNode)) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, node: TreeNode) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    def CopyTo(self, dest: Array, index: int) -> None: ...
    def Find(self, key: str, searchAllChildren: bool) -> Set(TreeNode): ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, key: str) -> TreeNode: ...
    @property
    def Item(self, index: int) -> TreeNode: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, node: TreeNode) -> int: ...
    def IndexOfKey(self, key: str) -> int: ...
    @overload
    def Insert(self, index: int, node: TreeNode) -> None: ...
    @overload
    def Insert(self, index: int, text: str) -> TreeNode: ...
    @overload
    def Insert(self, index: int, key: str, text: str) -> TreeNode: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageIndex: int) -> TreeNode: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageKey: str) -> TreeNode: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageIndex: int, selectedImageIndex: int) -> TreeNode: ...
    @overload
    def Insert(self, index: int, key: str, text: str, imageKey: str, selectedImageKey: str) -> TreeNode: ...
    def Remove(self, node: TreeNode) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveByKey(self, key: str) -> None: ...
    @Item.setter
    def Item(self, index: int, value: TreeNode) -> None: ...


class TreeNodeConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class TreeNodeMouseClickEventArgs(MouseEventArgs):
    def __init__(self, node: TreeNode, button: MouseButtons, clicks: int, x: int, y: int): ...
    @property
    def Node(self) -> TreeNode: ...


class TreeNodeMouseClickEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TreeNodeMouseClickEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TreeNodeMouseClickEventArgs) -> None: ...


class TreeNodeMouseHoverEventArgs(EventArgs):
    def __init__(self, node: TreeNode): ...
    @property
    def Node(self) -> TreeNode: ...


class TreeNodeMouseHoverEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TreeNodeMouseHoverEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TreeNodeMouseHoverEventArgs) -> None: ...


class TreeNodeStates:
    Selected = 1
    Grayed = 2
    Checked = 8
    Focused = 16
    Default = 32
    Hot = 64
    Marked = 128
    Indeterminate = 256
    ShowKeyboardCues = 512


class TreeView(Control):
    def __init__(self): ...
    def add_AfterCheck(self, value: TreeViewEventHandler) -> None: ...
    def add_AfterCollapse(self, value: TreeViewEventHandler) -> None: ...
    def add_AfterExpand(self, value: TreeViewEventHandler) -> None: ...
    def add_AfterLabelEdit(self, value: NodeLabelEditEventHandler) -> None: ...
    def add_AfterSelect(self, value: TreeViewEventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def add_BeforeCheck(self, value: TreeViewCancelEventHandler) -> None: ...
    def add_BeforeCollapse(self, value: TreeViewCancelEventHandler) -> None: ...
    def add_BeforeExpand(self, value: TreeViewCancelEventHandler) -> None: ...
    def add_BeforeLabelEdit(self, value: NodeLabelEditEventHandler) -> None: ...
    def add_BeforeSelect(self, value: TreeViewCancelEventHandler) -> None: ...
    def add_DrawNode(self, value: DrawTreeNodeEventHandler) -> None: ...
    def add_ItemDrag(self, value: ItemDragEventHandler) -> None: ...
    def add_NodeMouseClick(self, value: TreeNodeMouseClickEventHandler) -> None: ...
    def add_NodeMouseDoubleClick(self, value: TreeNodeMouseClickEventHandler) -> None: ...
    def add_NodeMouseHover(self, value: TreeNodeMouseHoverEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def BeginUpdate(self) -> None: ...
    def CollapseAll(self) -> None: ...
    def EndUpdate(self) -> None: ...
    def ExpandAll(self) -> None: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def CheckBoxes(self) -> bool: ...
    @property
    def DrawMode(self) -> TreeViewDrawMode: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FullRowSelect(self) -> bool: ...
    @property
    def HideSelection(self) -> bool: ...
    @property
    def HotTracking(self) -> bool: ...
    @property
    def ImageIndex(self) -> int: ...
    @property
    def ImageKey(self) -> str: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def Indent(self) -> int: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def LabelEdit(self) -> bool: ...
    @property
    def LineColor(self) -> Color: ...
    @property
    def Nodes(self) -> TreeNodeCollection: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PathSeparator(self) -> str: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def Scrollable(self) -> bool: ...
    @property
    def SelectedImageIndex(self) -> int: ...
    @property
    def SelectedImageKey(self) -> str: ...
    @property
    def SelectedNode(self) -> TreeNode: ...
    @property
    def ShowLines(self) -> bool: ...
    @property
    def ShowNodeToolTips(self) -> bool: ...
    @property
    def ShowPlusMinus(self) -> bool: ...
    @property
    def ShowRootLines(self) -> bool: ...
    @property
    def Sorted(self) -> bool: ...
    @property
    def StateImageList(self) -> ImageList: ...
    @property
    def Text(self) -> str: ...
    @property
    def TopNode(self) -> TreeNode: ...
    @property
    def TreeViewNodeSorter(self) -> IComparer: ...
    @property
    def VisibleCount(self) -> int: ...
    @overload
    def GetNodeAt(self, pt: Point) -> TreeNode: ...
    @overload
    def GetNodeAt(self, x: int, y: int) -> TreeNode: ...
    def GetNodeCount(self, includeSubTrees: bool) -> int: ...
    @overload
    def HitTest(self, pt: Point) -> TreeViewHitTestInfo: ...
    @overload
    def HitTest(self, x: int, y: int) -> TreeViewHitTestInfo: ...
    def remove_AfterCheck(self, value: TreeViewEventHandler) -> None: ...
    def remove_AfterCollapse(self, value: TreeViewEventHandler) -> None: ...
    def remove_AfterExpand(self, value: TreeViewEventHandler) -> None: ...
    def remove_AfterLabelEdit(self, value: NodeLabelEditEventHandler) -> None: ...
    def remove_AfterSelect(self, value: TreeViewEventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_BeforeCheck(self, value: TreeViewCancelEventHandler) -> None: ...
    def remove_BeforeCollapse(self, value: TreeViewCancelEventHandler) -> None: ...
    def remove_BeforeExpand(self, value: TreeViewCancelEventHandler) -> None: ...
    def remove_BeforeLabelEdit(self, value: NodeLabelEditEventHandler) -> None: ...
    def remove_BeforeSelect(self, value: TreeViewCancelEventHandler) -> None: ...
    def remove_DrawNode(self, value: DrawTreeNodeEventHandler) -> None: ...
    def remove_ItemDrag(self, value: ItemDragEventHandler) -> None: ...
    def remove_NodeMouseClick(self, value: TreeNodeMouseClickEventHandler) -> None: ...
    def remove_NodeMouseDoubleClick(self, value: TreeNodeMouseClickEventHandler) -> None: ...
    def remove_NodeMouseHover(self, value: TreeNodeMouseHoverEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @CheckBoxes.setter
    def CheckBoxes(self, value: bool) -> None: ...
    @DrawMode.setter
    def DrawMode(self, value: TreeViewDrawMode) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @FullRowSelect.setter
    def FullRowSelect(self, value: bool) -> None: ...
    @HideSelection.setter
    def HideSelection(self, value: bool) -> None: ...
    @HotTracking.setter
    def HotTracking(self, value: bool) -> None: ...
    @ImageIndex.setter
    def ImageIndex(self, value: int) -> None: ...
    @ImageKey.setter
    def ImageKey(self, value: str) -> None: ...
    @ImageList.setter
    def ImageList(self, value: ImageList) -> None: ...
    @Indent.setter
    def Indent(self, value: int) -> None: ...
    @ItemHeight.setter
    def ItemHeight(self, value: int) -> None: ...
    @LabelEdit.setter
    def LabelEdit(self, value: bool) -> None: ...
    @LineColor.setter
    def LineColor(self, value: Color) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @PathSeparator.setter
    def PathSeparator(self, value: str) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @Scrollable.setter
    def Scrollable(self, value: bool) -> None: ...
    @SelectedImageIndex.setter
    def SelectedImageIndex(self, value: int) -> None: ...
    @SelectedImageKey.setter
    def SelectedImageKey(self, value: str) -> None: ...
    @SelectedNode.setter
    def SelectedNode(self, value: TreeNode) -> None: ...
    @ShowLines.setter
    def ShowLines(self, value: bool) -> None: ...
    @ShowNodeToolTips.setter
    def ShowNodeToolTips(self, value: bool) -> None: ...
    @ShowPlusMinus.setter
    def ShowPlusMinus(self, value: bool) -> None: ...
    @ShowRootLines.setter
    def ShowRootLines(self, value: bool) -> None: ...
    @Sorted.setter
    def Sorted(self, value: bool) -> None: ...
    @StateImageList.setter
    def StateImageList(self, value: ImageList) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TopNode.setter
    def TopNode(self, value: TreeNode) -> None: ...
    @TreeViewNodeSorter.setter
    def TreeViewNodeSorter(self, value: IComparer) -> None: ...
    def Sort(self) -> None: ...
    def ToString(self) -> str: ...


class TreeViewAction:
    Unknown = 0
    ByKeyboard = 1
    ByMouse = 2
    Collapse = 3
    Expand = 4


class TreeViewCancelEventArgs(CancelEventArgs):
    def __init__(self, node: TreeNode, cancel: bool, action: TreeViewAction): ...
    @property
    def Action(self) -> TreeViewAction: ...
    @property
    def Node(self) -> TreeNode: ...


class TreeViewCancelEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TreeViewCancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TreeViewCancelEventArgs) -> None: ...


class TreeViewDrawMode:
    Normal = 0
    OwnerDrawText = 1
    OwnerDrawAll = 2


class TreeViewEventArgs(EventArgs):
    @overload
    def __init__(self, node: TreeNode): ...
    @overload
    def __init__(self, node: TreeNode, action: TreeViewAction): ...
    @property
    def Action(self) -> TreeViewAction: ...
    @property
    def Node(self) -> TreeNode: ...


class TreeViewEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TreeViewEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TreeViewEventArgs) -> None: ...


class TreeViewHitTestInfo(Object):
    def __init__(self, hitNode: TreeNode, hitLocation: TreeViewHitTestLocations): ...
    @property
    def Location(self) -> TreeViewHitTestLocations: ...
    @property
    def Node(self) -> TreeNode: ...


class TreeViewHitTestLocations:
    #None = 1
    Image = 2
    Label = 4
    Indent = 8
    PlusMinus = 16
    RightOfLabel = 32
    StateImage = 64
    AboveClientArea = 256
    BelowClientArea = 512
    RightOfClientArea = 1024
    LeftOfClientArea = 2048


class TreeViewImageIndexConverter(ImageIndexConverter):
    def __init__(self): ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...


class TreeViewImageKeyConverter(ImageKeyConverter):
    def __init__(self): ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class TypeLibraryTimeStampAttribute(Attribute):
    def __init__(self, timestamp: str): ...
    @property
    def Value(self) -> DateTime: ...


class TypeValidationEventArgs(EventArgs):
    def __init__(self, validatingType: Type, isValidInput: bool, returnValue: Object, message: str): ...
    @property
    def Cancel(self) -> bool: ...
    @property
    def IsValidInput(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def ReturnValue(self) -> Object: ...
    @property
    def ValidatingType(self) -> Type: ...
    @Cancel.setter
    def Cancel(self, value: bool) -> None: ...


class TypeValidationEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TypeValidationEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TypeValidationEventArgs) -> None: ...


class UICues:
    #None = 0
    ShowFocus = 1
    ShowKeyboard = 2
    Shown = 3
    ChangeFocus = 4
    ChangeKeyboard = 8
    Changed = 12


class UICuesEventArgs(EventArgs):
    def __init__(self, uicues: UICues): ...
    @property
    def Changed(self) -> UICues: ...
    @property
    def ChangeFocus(self) -> bool: ...
    @property
    def ChangeKeyboard(self) -> bool: ...
    @property
    def ShowFocus(self) -> bool: ...
    @property
    def ShowKeyboard(self) -> bool: ...


class UICuesEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: UICuesEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: UICuesEventArgs) -> None: ...


class UnhandledExceptionMode:
    Automatic = 0
    ThrowException = 1
    CatchException = 2


class UpDownBase(ContainerControl):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    def DownButton(self) -> None: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def InterceptArrowKeys(self) -> bool: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def PreferredHeight(self) -> int: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> HorizontalAlignment: ...
    @property
    def UpDownAlign(self) -> LeftRightAlignment: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def Select(self, start: int, length: int) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @InterceptArrowKeys.setter
    def InterceptArrowKeys(self, value: bool) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: HorizontalAlignment) -> None: ...
    @UpDownAlign.setter
    def UpDownAlign(self, value: LeftRightAlignment) -> None: ...
    def UpButton(self) -> None: ...


class UpDownEventArgs(EventArgs):
    def __init__(self, buttonPushed: int): ...
    @property
    def ButtonID(self) -> int: ...


class UpDownEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, source: Object, e: UpDownEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, source: Object, e: UpDownEventArgs) -> None: ...


class UserControl(ContainerControl):
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @property
    def Text(self) -> str: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @BorderStyle.setter
    def BorderStyle(self, value: BorderStyle) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class ValidationConstraints:
    #None = 0
    Selectable = 1
    Enabled = 2
    Visible = 4
    TabStop = 8
    ImmediateChildren = 16


class View:
    LargeIcon = 0
    Details = 1
    SmallIcon = 2
    List = 3
    Tile = 4


class VScrollBar(ScrollBar):
    def __init__(self): ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...


class VScrollProperties(ScrollProperties):
    def __init__(self, container: ScrollableControl): ...


class WebBrowser(WebBrowserBase):
    def __init__(self): ...
    def add_CanGoBackChanged(self, value: EventHandler) -> None: ...
    def add_CanGoForwardChanged(self, value: EventHandler) -> None: ...
    def add_DocumentCompleted(self, value: WebBrowserDocumentCompletedEventHandler) -> None: ...
    def add_DocumentTitleChanged(self, value: EventHandler) -> None: ...
    def add_EncryptionLevelChanged(self, value: EventHandler) -> None: ...
    def add_FileDownload(self, value: EventHandler) -> None: ...
    def add_Navigated(self, value: WebBrowserNavigatedEventHandler) -> None: ...
    def add_Navigating(self, value: WebBrowserNavigatingEventHandler) -> None: ...
    def add_NewWindow(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    def add_ProgressChanged(self, value: WebBrowserProgressChangedEventHandler) -> None: ...
    def add_StatusTextChanged(self, value: EventHandler) -> None: ...
    @property
    def AllowNavigation(self) -> bool: ...
    @property
    def AllowWebBrowserDrop(self) -> bool: ...
    @property
    def CanGoBack(self) -> bool: ...
    @property
    def CanGoForward(self) -> bool: ...
    @property
    def Document(self) -> HtmlDocument: ...
    @property
    def DocumentStream(self) -> Stream: ...
    @property
    def DocumentText(self) -> str: ...
    @property
    def DocumentTitle(self) -> str: ...
    @property
    def DocumentType(self) -> str: ...
    @property
    def EncryptionLevel(self) -> WebBrowserEncryptionLevel: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def IsBusy(self) -> bool: ...
    @property
    def IsOffline(self) -> bool: ...
    @property
    def IsWebBrowserContextMenuEnabled(self) -> bool: ...
    @property
    def ObjectForScripting(self) -> Object: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def ReadyState(self) -> WebBrowserReadyState: ...
    @property
    def ScriptErrorsSuppressed(self) -> bool: ...
    @property
    def ScrollBarsEnabled(self) -> bool: ...
    @property
    def StatusText(self) -> str: ...
    @property
    def Url(self) -> Uri: ...
    @property
    def Version(self) -> Version: ...
    @property
    def WebBrowserShortcutsEnabled(self) -> bool: ...
    def GoBack(self) -> bool: ...
    def GoForward(self) -> bool: ...
    def GoHome(self) -> None: ...
    def GoSearch(self) -> None: ...
    @overload
    def Navigate(self, url: Uri) -> None: ...
    @overload
    def Navigate(self, urlString: str) -> None: ...
    @overload
    def Navigate(self, url: Uri, newWindow: bool) -> None: ...
    @overload
    def Navigate(self, urlString: str, newWindow: bool) -> None: ...
    @overload
    def Navigate(self, urlString: str, targetFrameName: str) -> None: ...
    @overload
    def Navigate(self, url: Uri, targetFrameName: str) -> None: ...
    @overload
    def Navigate(self, urlString: str, targetFrameName: str, postData: Set(Byte), additionalHeaders: str) -> None: ...
    @overload
    def Navigate(self, url: Uri, targetFrameName: str, postData: Set(Byte), additionalHeaders: str) -> None: ...
    def Print(self) -> None: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def Refresh(self, opt: WebBrowserRefreshOption) -> None: ...
    def remove_CanGoBackChanged(self, value: EventHandler) -> None: ...
    def remove_CanGoForwardChanged(self, value: EventHandler) -> None: ...
    def remove_DocumentCompleted(self, value: WebBrowserDocumentCompletedEventHandler) -> None: ...
    def remove_DocumentTitleChanged(self, value: EventHandler) -> None: ...
    def remove_EncryptionLevelChanged(self, value: EventHandler) -> None: ...
    def remove_FileDownload(self, value: EventHandler) -> None: ...
    def remove_Navigated(self, value: WebBrowserNavigatedEventHandler) -> None: ...
    def remove_Navigating(self, value: WebBrowserNavigatingEventHandler) -> None: ...
    def remove_NewWindow(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    def remove_ProgressChanged(self, value: WebBrowserProgressChangedEventHandler) -> None: ...
    def remove_StatusTextChanged(self, value: EventHandler) -> None: ...
    @AllowNavigation.setter
    def AllowNavigation(self, value: bool) -> None: ...
    @AllowWebBrowserDrop.setter
    def AllowWebBrowserDrop(self, value: bool) -> None: ...
    @DocumentStream.setter
    def DocumentStream(self, value: Stream) -> None: ...
    @DocumentText.setter
    def DocumentText(self, value: str) -> None: ...
    @IsWebBrowserContextMenuEnabled.setter
    def IsWebBrowserContextMenuEnabled(self, value: bool) -> None: ...
    @ObjectForScripting.setter
    def ObjectForScripting(self, value: Object) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @ScriptErrorsSuppressed.setter
    def ScriptErrorsSuppressed(self, value: bool) -> None: ...
    @ScrollBarsEnabled.setter
    def ScrollBarsEnabled(self, value: bool) -> None: ...
    @Url.setter
    def Url(self, value: Uri) -> None: ...
    @WebBrowserShortcutsEnabled.setter
    def WebBrowserShortcutsEnabled(self, value: bool) -> None: ...
    def ShowPageSetupDialog(self) -> None: ...
    def ShowPrintDialog(self) -> None: ...
    def ShowPrintPreviewDialog(self) -> None: ...
    def ShowPropertiesDialog(self) -> None: ...
    def ShowSaveAsDialog(self) -> None: ...
    def Stop(self) -> None: ...


class WebBrowserBase(Control):
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @property
    def ActiveXInstance(self) -> Object: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def Text(self) -> str: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...


class WebBrowserDocumentCompletedEventArgs(EventArgs):
    def __init__(self, url: Uri): ...
    @property
    def Url(self) -> Uri: ...


class WebBrowserDocumentCompletedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: WebBrowserDocumentCompletedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: WebBrowserDocumentCompletedEventArgs) -> None: ...


class WebBrowserEncryptionLevel:
    Insecure = 0
    Mixed = 1
    Unknown = 2
    Bit40 = 3
    Bit56 = 4
    Fortezza = 5
    Bit128 = 6


class WebBrowserNavigatedEventArgs(EventArgs):
    def __init__(self, url: Uri): ...
    @property
    def Url(self) -> Uri: ...


class WebBrowserNavigatedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: WebBrowserNavigatedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: WebBrowserNavigatedEventArgs) -> None: ...


class WebBrowserNavigatingEventArgs(CancelEventArgs):
    def __init__(self, url: Uri, targetFrameName: str): ...
    @property
    def TargetFrameName(self) -> str: ...
    @property
    def Url(self) -> Uri: ...


class WebBrowserNavigatingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: WebBrowserNavigatingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: WebBrowserNavigatingEventArgs) -> None: ...


class WebBrowserProgressChangedEventArgs(EventArgs):
    def __init__(self, currentProgress: Int64, maximumProgress: Int64): ...
    @property
    def CurrentProgress(self) -> Int64: ...
    @property
    def MaximumProgress(self) -> Int64: ...


class WebBrowserProgressChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: WebBrowserProgressChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: WebBrowserProgressChangedEventArgs) -> None: ...


class WebBrowserReadyState:
    Uninitialized = 0
    Loading = 1
    Loaded = 2
    Interactive = 3
    Complete = 4


class WebBrowserRefreshOption:
    Normal = 0
    IfExpired = 1
    Continue = 2
    Completely = 3


class WebBrowserSiteBase(Object):
    def Dispose(self) -> None: ...


class WindowsFormsSection(Object):
    def __init__(self): ...
    @property
    def JitDebugging(self) -> bool: ...
    @JitDebugging.setter
    def JitDebugging(self, value: bool) -> None: ...


class WindowsFormsSynchronizationContext(SynchronizationContext):
    def __init__(self): ...
    def CreateCopy(self) -> SynchronizationContext: ...
    def Dispose(self) -> None: ...
    @property
    def AutoInstall() -> bool: ...
    def Post(self, d: SendOrPostCallback, state: Object) -> None: ...
    def Send(self, d: SendOrPostCallback, state: Object) -> None: ...
    @AutoInstall.setter
    def AutoInstall(value: bool) -> None: ...
    def Uninstall() -> None: ...
