from typing import Tuple, Set, Iterable, List


class BasicDesignerLoader(DesignerLoader):
    def BeginLoad(self, host: IDesignerLoaderHost) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> None: ...
    @property
    def Loading(self) -> bool: ...


class CodeDomComponentSerializationService(ComponentSerializationService):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IServiceProvider): ...
    def CreateStore(self) -> SerializationStore: ...
    @overload
    def Deserialize(self, store: SerializationStore) -> ICollection: ...
    @overload
    def Deserialize(self, store: SerializationStore, container: IContainer) -> ICollection: ...
    @overload
    def DeserializeTo(self, store: SerializationStore, container: IContainer, validateRecycledTypes: bool, applyDefaults: bool) -> None: ...
    def LoadStore(self, stream: Stream) -> SerializationStore: ...
    def Serialize(self, store: SerializationStore, value: Object) -> None: ...
    def SerializeAbsolute(self, store: SerializationStore, value: Object) -> None: ...
    def SerializeMember(self, store: SerializationStore, owningObject: Object, member: MemberDescriptor) -> None: ...
    def SerializeMemberAbsolute(self, store: SerializationStore, owningObject: Object, member: MemberDescriptor) -> None: ...


class CodeDomDesignerLoader(BasicDesignerLoader):
    def Dispose(self) -> None: ...


class CodeDomLocalizationModel:
    #None = 0
    PropertyAssignment = 1
    PropertyReflection = 2


class CodeDomLocalizationProvider(Object):
    @overload
    def __init__(self, provider: IServiceProvider, model: CodeDomLocalizationModel): ...
    @overload
    def __init__(self, provider: IServiceProvider, model: CodeDomLocalizationModel, supportedCultures: Set(CultureInfo)): ...
    def Dispose(self) -> None: ...


class CodeDomSerializer(CodeDomSerializerBase):
    def __init__(self): ...
    def Deserialize(self, manager: IDesignerSerializationManager, codeObject: Object) -> Object: ...
    def GetTargetComponentName(self, statement: CodeStatement, expression: CodeExpression, targetType: Type) -> str: ...
    def Serialize(self, manager: IDesignerSerializationManager, value: Object) -> Object: ...
    def SerializeAbsolute(self, manager: IDesignerSerializationManager, value: Object) -> Object: ...
    def SerializeMember(self, manager: IDesignerSerializationManager, owningObject: Object, member: MemberDescriptor) -> CodeStatementCollection: ...
    def SerializeMemberAbsolute(self, manager: IDesignerSerializationManager, owningObject: Object, member: MemberDescriptor) -> CodeStatementCollection: ...


class CodeDomSerializerBase(Object):
    pass


class CodeDomSerializerException(SystemException):
    @overload
    def __init__(self, message: str, linePragma: CodeLinePragma): ...
    @overload
    def __init__(self, ex: Exception, linePragma: CodeLinePragma): ...
    @overload
    def __init__(self, message: str, manager: IDesignerSerializationManager): ...
    @overload
    def __init__(self, ex: Exception, manager: IDesignerSerializationManager): ...
    @property
    def LinePragma(self) -> CodeLinePragma: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class CollectionCodeDomSerializer(CodeDomSerializer):
    def __init__(self): ...
    def Serialize(self, manager: IDesignerSerializationManager, value: Object) -> Object: ...


class DesignerSerializationManager(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IServiceProvider): ...
    def add_SessionCreated(self, value: EventHandler) -> None: ...
    def add_SessionDisposed(self, value: EventHandler) -> None: ...
    def CreateSession(self) -> IDisposable: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def Errors(self) -> IList: ...
    @property
    def PreserveNames(self) -> bool: ...
    @property
    def PropertyProvider(self) -> Object: ...
    @property
    def RecycleInstances(self) -> bool: ...
    @property
    def ValidateRecycledTypes(self) -> bool: ...
    def GetRuntimeType(self, typeName: str) -> Type: ...
    def GetSerializer(self, objectType: Type, serializerType: Type) -> Object: ...
    def remove_SessionCreated(self, value: EventHandler) -> None: ...
    def remove_SessionDisposed(self, value: EventHandler) -> None: ...
    @Container.setter
    def Container(self, value: IContainer) -> None: ...
    @PreserveNames.setter
    def PreserveNames(self, value: bool) -> None: ...
    @PropertyProvider.setter
    def PropertyProvider(self, value: Object) -> None: ...
    @RecycleInstances.setter
    def RecycleInstances(self, value: bool) -> None: ...
    @ValidateRecycledTypes.setter
    def ValidateRecycledTypes(self, value: bool) -> None: ...


class ExpressionContext(Object):
    @overload
    def __init__(self, expression: CodeExpression, expressionType: Type, owner: Object): ...
    @overload
    def __init__(self, expression: CodeExpression, expressionType: Type, owner: Object, presetValue: Object): ...
    @property
    def Expression(self) -> CodeExpression: ...
    @property
    def ExpressionType(self) -> Type: ...
    @property
    def Owner(self) -> Object: ...
    @property
    def PresetValue(self) -> Object: ...


class ICodeDomDesignerReload:
    def ShouldReloadDesigner(self, newTree: CodeCompileUnit) -> bool: ...


class MemberCodeDomSerializer(CodeDomSerializerBase):
    def Serialize(self, manager: IDesignerSerializationManager, value: Object, descriptor: MemberDescriptor, statements: CodeStatementCollection) -> None: ...
    def ShouldSerialize(self, manager: IDesignerSerializationManager, value: Object, descriptor: MemberDescriptor) -> bool: ...


class ObjectStatementCollection(Object):
    def ContainsKey(self, statementOwner: Object) -> bool: ...
    @property
    def Item(self, statementOwner: Object) -> CodeStatementCollection: ...
    def GetEnumerator(self) -> IDictionaryEnumerator: ...
    @overload
    def Populate(self, statementOwners: ICollection) -> None: ...
    @overload
    def Populate(self, owner: Object) -> None: ...


class RootContext(Object):
    def __init__(self, expression: CodeExpression, value: Object): ...
    @property
    def Expression(self) -> CodeExpression: ...
    @property
    def Value(self) -> Object: ...


class SerializeAbsoluteContext(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, member: MemberDescriptor): ...
    @property
    def Member(self) -> MemberDescriptor: ...
    def ShouldSerialize(self, member: MemberDescriptor) -> bool: ...


class StatementContext(Object):
    def __init__(self): ...
    @property
    def StatementCollection(self) -> ObjectStatementCollection: ...


class TypeCodeDomSerializer(CodeDomSerializerBase):
    def __init__(self): ...
    def Deserialize(self, manager: IDesignerSerializationManager, declaration: CodeTypeDeclaration) -> Object: ...
    def Serialize(self, manager: IDesignerSerializationManager, root: Object, members: ICollection) -> CodeTypeDeclaration: ...
