from typing import Tuple, Set, Iterable, List


class AmbientAttribute(Attribute):
    def __init__(self): ...


class ArrayExtension(MarkupExtension):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, arrayType: Type): ...
    @overload
    def __init__(self, elements: Array): ...
    def AddChild(self, value: Object) -> None: ...
    def AddText(self, text: str) -> None: ...
    @property
    def Items(self) -> IList: ...
    @property
    def Type(self) -> Type: ...
    def ProvideValue(self, serviceProvider: IServiceProvider) -> Object: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...


class ConstructorArgumentAttribute(Attribute):
    def __init__(self, argumentName: str): ...
    @property
    def ArgumentName(self) -> str: ...


class ContentPropertyAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...


class ContentWrapperAttribute(Attribute):
    def __init__(self, contentWrapper: Type): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ContentWrapper(self) -> Type: ...
    @property
    def TypeId(self) -> Object: ...
    def GetHashCode(self) -> int: ...


class DateTimeValueSerializer(ValueSerializer):
    def __init__(self): ...
    def CanConvertFromString(self, value: str, context: IValueSerializerContext) -> bool: ...
    def CanConvertToString(self, value: Object, context: IValueSerializerContext) -> bool: ...
    def ConvertFromString(self, value: str, context: IValueSerializerContext) -> Object: ...
    def ConvertToString(self, value: Object, context: IValueSerializerContext) -> str: ...


class DependsOnAttribute(Attribute):
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeId(self) -> Object: ...


class DictionaryKeyPropertyAttribute(Attribute):
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...


class IComponentConnector:
    def Connect(self, connectionId: int, target: Object) -> None: ...
    def InitializeComponent(self) -> None: ...


class INameScope:
    def FindName(self, name: str) -> Object: ...
    def RegisterName(self, name: str, scopedElement: Object) -> None: ...
    def UnregisterName(self, name: str) -> None: ...


class INameScopeDictionary:
    pass


class IProvideValueTarget:
    @property
    def TargetObject(self) -> Object: ...
    @property
    def TargetProperty(self) -> Object: ...


class IQueryAmbient:
    def IsAmbientPropertyAvailable(self, propertyName: str) -> bool: ...


class IUriContext:
    @property
    def BaseUri(self) -> Uri: ...
    @BaseUri.setter
    def BaseUri(self, value: Uri) -> None: ...


class IValueSerializerContext:
    @overload
    def GetValueSerializerFor(self, type: Type) -> ValueSerializer: ...
    @overload
    def GetValueSerializerFor(self, descriptor: PropertyDescriptor) -> ValueSerializer: ...


class IXamlTypeResolver:
    def Resolve(self, qualifiedTypeName: str) -> Type: ...


class MarkupExtension(Object):
    def ProvideValue(self, serviceProvider: IServiceProvider) -> Object: ...


class MarkupExtensionBracketCharactersAttribute(Attribute):
    def __init__(self, openingBracket: Char, closingBracket: Char): ...
    @property
    def ClosingBracket(self) -> Char: ...
    @property
    def OpeningBracket(self) -> Char: ...


class MarkupExtensionReturnTypeAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, returnType: Type): ...
    @overload
    def __init__(self, returnType: Type, expressionType: Type): ...
    @property
    def ExpressionType(self) -> Type: ...
    @property
    def ReturnType(self) -> Type: ...


class MemberDefinition(Object):
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class NameReferenceConverter(TypeConverter):
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: Type) -> bool: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object, destinationType: Type) -> Object: ...


class NameScopePropertyAttribute(Attribute):
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, type: Type): ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Type: ...


class NullExtension(MarkupExtension):
    def __init__(self): ...
    def ProvideValue(self, serviceProvider: IServiceProvider) -> Object: ...


class PropertyDefinition(MemberDefinition):
    def __init__(self): ...
    @property
    def Attributes(self) -> List[Attribute]: ...
    @property
    def Modifier(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> XamlType: ...
    @Modifier.setter
    def Modifier(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: XamlType) -> None: ...


class Reference(MarkupExtension):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...
    def ProvideValue(self, serviceProvider: IServiceProvider) -> Object: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class RootNamespaceAttribute(Attribute):
    def __init__(self, nameSpace: str): ...
    @property
    def Namespace(self) -> str: ...


class RuntimeNamePropertyAttribute(Attribute):
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...


class StaticExtension(MarkupExtension):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, member: str): ...
    @property
    def Member(self) -> str: ...
    @property
    def MemberType(self) -> Type: ...
    def ProvideValue(self, serviceProvider: IServiceProvider) -> Object: ...
    @Member.setter
    def Member(self, value: str) -> None: ...
    @MemberType.setter
    def MemberType(self, value: Type) -> None: ...


class TrimSurroundingWhitespaceAttribute(Attribute):
    def __init__(self): ...


class TypeExtension(MarkupExtension):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, type: Type): ...
    @property
    def Type(self) -> Type: ...
    @property
    def TypeName(self) -> str: ...
    def ProvideValue(self, serviceProvider: IServiceProvider) -> Object: ...
    @Type.setter
    def Type(self, value: Type) -> None: ...
    @TypeName.setter
    def TypeName(self, value: str) -> None: ...


class UidPropertyAttribute(Attribute):
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...


class UsableDuringInitializationAttribute(Attribute):
    def __init__(self, usable: bool): ...
    @property
    def Usable(self) -> bool: ...


class ValueSerializer(Object):
    def CanConvertFromString(self, value: str, context: IValueSerializerContext) -> bool: ...
    def CanConvertToString(self, value: Object, context: IValueSerializerContext) -> bool: ...
    def ConvertFromString(self, value: str, context: IValueSerializerContext) -> Object: ...
    def ConvertToString(self, value: Object, context: IValueSerializerContext) -> str: ...
    @overload
    def GetSerializerFor(type: Type) -> ValueSerializer: ...
    @overload
    def GetSerializerFor(descriptor: PropertyDescriptor) -> ValueSerializer: ...
    @overload
    def GetSerializerFor(type: Type, context: IValueSerializerContext) -> ValueSerializer: ...
    @overload
    def GetSerializerFor(descriptor: PropertyDescriptor, context: IValueSerializerContext) -> ValueSerializer: ...
    def TypeReferences(self, value: Object, context: IValueSerializerContext) -> Iterable[Type]: ...


class WhitespaceSignificantCollectionAttribute(Attribute):
    def __init__(self): ...


class XamlDeferLoadAttribute(Attribute):
    @overload
    def __init__(self, loaderType: Type, contentType: Type): ...
    @overload
    def __init__(self, loaderType: str, contentType: str): ...
    @property
    def ContentType(self) -> Type: ...
    @property
    def ContentTypeName(self) -> str: ...
    @property
    def LoaderType(self) -> Type: ...
    @property
    def LoaderTypeName(self) -> str: ...


class XamlSetMarkupExtensionAttribute(Attribute):
    def __init__(self, xamlSetMarkupExtensionHandler: str): ...
    @property
    def XamlSetMarkupExtensionHandler(self) -> str: ...


class XamlSetMarkupExtensionEventArgs(XamlSetValueEventArgs):
    def __init__(self, member: XamlMember, value: MarkupExtension, serviceProvider: IServiceProvider): ...
    def CallBase(self) -> None: ...
    @property
    def MarkupExtension(self) -> MarkupExtension: ...
    @property
    def ServiceProvider(self) -> IServiceProvider: ...


class XamlSetTypeConverterAttribute(Attribute):
    def __init__(self, xamlSetTypeConverterHandler: str): ...
    @property
    def XamlSetTypeConverterHandler(self) -> str: ...


class XamlSetTypeConverterEventArgs(XamlSetValueEventArgs):
    def __init__(self, member: XamlMember, typeConverter: TypeConverter, value: Object, serviceProvider: ITypeDescriptorContext, cultureInfo: CultureInfo): ...
    def CallBase(self) -> None: ...
    @property
    def CultureInfo(self) -> CultureInfo: ...
    @property
    def ServiceProvider(self) -> ITypeDescriptorContext: ...
    @property
    def TypeConverter(self) -> TypeConverter: ...


class XamlSetValueEventArgs(EventArgs):
    def __init__(self, member: XamlMember, value: Object): ...
    def CallBase(self) -> None: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def Member(self) -> XamlMember: ...
    @property
    def Value(self) -> Object: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class XData(Object):
    def __init__(self): ...
    @property
    def Text(self) -> str: ...
    @property
    def XmlReader(self) -> Object: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @XmlReader.setter
    def XmlReader(self, value: Object) -> None: ...


class XmlLangPropertyAttribute(Attribute):
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...


class XmlnsCompatibleWithAttribute(Attribute):
    def __init__(self, oldNamespace: str, newNamespace: str): ...
    @property
    def NewNamespace(self) -> str: ...
    @property
    def OldNamespace(self) -> str: ...


class XmlnsDefinitionAttribute(Attribute):
    def __init__(self, xmlNamespace: str, clrNamespace: str): ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def ClrNamespace(self) -> str: ...
    @property
    def XmlNamespace(self) -> str: ...
    @AssemblyName.setter
    def AssemblyName(self, value: str) -> None: ...


class XmlnsPrefixAttribute(Attribute):
    def __init__(self, xmlNamespace: str, prefix: str): ...
    @property
    def Prefix(self) -> str: ...
    @property
    def XmlNamespace(self) -> str: ...
