from typing import Tuple, Set, Iterable, List


class ComponentEditorForm(Form):
    def __init__(self, component: Object, pageTypes: Set(Type)): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @overload
    def ShowForm(self) -> DialogResult: ...
    @overload
    def ShowForm(self, page: int) -> DialogResult: ...
    @overload
    def ShowForm(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def ShowForm(self, owner: IWin32Window, page: int) -> DialogResult: ...


class ComponentEditorPage(Panel):
    def __init__(self): ...
    def Activate(self) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    def ApplyChanges(self) -> None: ...
    def Deactivate(self) -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def CommitOnDeactivate(self) -> bool: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def Title(self) -> str: ...
    def GetControl(self) -> Control: ...
    def IsPageMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    def OnApplyComplete(self) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @CommitOnDeactivate.setter
    def CommitOnDeactivate(self, value: bool) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    def SetComponent(self, component: IComponent) -> None: ...
    def SetSite(self, site: IComponentEditorPageSite) -> None: ...
    def ShowHelp(self) -> None: ...
    def SupportsHelp(self) -> bool: ...


class EventsTab(PropertyTab):
    def __init__(self, sp: IServiceProvider): ...
    def CanExtend(self, extendee: Object) -> bool: ...
    @property
    def HelpKeyword(self) -> str: ...
    @property
    def TabName(self) -> str: ...
    def GetDefaultProperty(self, obj: Object) -> PropertyDescriptor: ...
    @overload
    def GetProperties(self, component: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, component: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...


class IUIService:
    def CanShowComponentEditor(self, component: Object) -> bool: ...
    @property
    def Styles(self) -> IDictionary: ...
    def GetDialogOwnerWindow(self) -> IWin32Window: ...
    def SetUIDirty(self) -> None: ...
    def ShowComponentEditor(self, component: Object, parent: IWin32Window) -> bool: ...
    def ShowDialog(self, form: Form) -> DialogResult: ...
    @overload
    def ShowError(self, message: str) -> None: ...
    @overload
    def ShowError(self, ex: Exception) -> None: ...
    @overload
    def ShowError(self, ex: Exception, message: str) -> None: ...
    @overload
    def ShowMessage(self, message: str) -> None: ...
    @overload
    def ShowMessage(self, message: str, caption: str) -> None: ...
    @overload
    def ShowMessage(self, message: str, caption: str, buttons: MessageBoxButtons) -> DialogResult: ...
    def ShowToolWindow(self, toolWindow: Guid) -> bool: ...


class IWindowsFormsEditorService:
    def CloseDropDown(self) -> None: ...
    def DropDownControl(self, control: Control) -> None: ...
    def ShowDialog(self, dialog: Form) -> DialogResult: ...


class PropertyTab(Object):
    def CanExtend(self, extendee: Object) -> bool: ...
    def Dispose(self) -> None: ...
    @property
    def Bitmap(self) -> Bitmap: ...
    @property
    def Components(self) -> Set(Object): ...
    @property
    def HelpKeyword(self) -> str: ...
    @property
    def TabName(self) -> str: ...
    def GetDefaultProperty(self, component: Object) -> PropertyDescriptor: ...
    @overload
    def GetProperties(self, component: Object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, component: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, component: Object, attributes: Set(Attribute)) -> PropertyDescriptorCollection: ...
    @Components.setter
    def Components(self, value: Set(Object)) -> None: ...


class ToolStripItemDesignerAvailability:
    #None = 0
    ToolStrip = 1
    MenuStrip = 2
    ContextMenuStrip = 4
    StatusStrip = 8
    All = 15


class ToolStripItemDesignerAvailabilityAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, visibility: ToolStripItemDesignerAvailability): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ItemAdditionVisibility(self) -> ToolStripItemDesignerAvailability: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class WindowsFormsComponentEditor(ComponentEditor):
    @overload
    def EditComponent(self, context: ITypeDescriptorContext, component: Object) -> bool: ...
    @overload
    def EditComponent(self, component: Object, owner: IWin32Window) -> bool: ...
    @overload
    def EditComponent(self, context: ITypeDescriptorContext, component: Object, owner: IWin32Window) -> bool: ...
