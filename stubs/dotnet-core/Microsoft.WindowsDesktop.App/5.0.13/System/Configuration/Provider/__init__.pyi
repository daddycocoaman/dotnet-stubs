from typing import Tuple, Set, Iterable, List


class ProviderBase(Object):
    @property
    def Description(self) -> str: ...
    @property
    def Name(self) -> str: ...
    def Initialize(self, name: str, config: NameValueCollection) -> None: ...


class ProviderCollection(Object):
    def __init__(self): ...
    def Add(self, provider: ProviderBase) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: Set(ProviderBase), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, name: str) -> ProviderBase: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, name: str) -> None: ...
    def SetReadOnly(self) -> None: ...


class ProviderException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
