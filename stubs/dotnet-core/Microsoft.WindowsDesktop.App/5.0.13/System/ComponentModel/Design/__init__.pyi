__all__ = ['Serialization']
from typing import Tuple, Set, Iterable, List


class ActiveDesignSurfaceChangedEventArgs(EventArgs):
    def __init__(self, oldSurface: DesignSurface, newSurface: DesignSurface): ...
    @property
    def NewSurface(self) -> DesignSurface: ...
    @property
    def OldSurface(self) -> DesignSurface: ...


class ActiveDesignSurfaceChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ActiveDesignSurfaceChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ActiveDesignSurfaceChangedEventArgs) -> None: ...


class ArrayEditor(CollectionEditor):
    def __init__(self, type: Type): ...


class BinaryEditor(UITypeEditor):
    def __init__(self): ...
    @overload
    def EditValue(self, context: ITypeDescriptorContext, provider: IServiceProvider, value: Object) -> Object: ...
    @overload
    def GetEditStyle(self, context: ITypeDescriptorContext) -> UITypeEditorEditStyle: ...


class ByteViewer(TableLayoutPanel):
    def __init__(self): ...
    def GetBytes(self) -> Set(Byte): ...
    def GetDisplayMode(self) -> DisplayMode: ...
    def SaveToFile(self, path: str) -> None: ...
    def SetBytes(self, bytes: Set(Byte)) -> None: ...
    def SetDisplayMode(self, mode: DisplayMode) -> None: ...
    def SetFile(self, path: str) -> None: ...
    def SetStartLine(self, line: int) -> None: ...


class CollectionEditor(UITypeEditor):
    def __init__(self, type: Type): ...
    @overload
    def EditValue(self, context: ITypeDescriptorContext, provider: IServiceProvider, value: Object) -> Object: ...
    @overload
    def GetEditStyle(self, context: ITypeDescriptorContext) -> UITypeEditorEditStyle: ...


class ComponentDesigner(Object):
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def DoDefaultAction(self) -> None: ...
    @property
    def ActionLists(self) -> DesignerActionListCollection: ...
    @property
    def AssociatedComponents(self) -> ICollection: ...
    @property
    def Component(self) -> IComponent: ...
    @property
    def Verbs(self) -> DesignerVerbCollection: ...
    def Initialize(self, component: IComponent) -> None: ...
    def InitializeExistingComponent(self, defaultValues: IDictionary) -> None: ...
    def InitializeNewComponent(self, defaultValues: IDictionary) -> None: ...


class DateTimeEditor(UITypeEditor):
    def __init__(self): ...
    @overload
    def EditValue(self, context: ITypeDescriptorContext, provider: IServiceProvider, value: Object) -> Object: ...
    @overload
    def GetEditStyle(self, context: ITypeDescriptorContext) -> UITypeEditorEditStyle: ...


class DesignerActionHeaderItem(DesignerActionTextItem):
    @overload
    def __init__(self, displayName: str): ...
    @overload
    def __init__(self, displayName: str, category: str): ...


class DesignerActionItem(Object):
    def __init__(self, displayName: str, category: str, description: str): ...
    @property
    def AllowAssociate(self) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Properties(self) -> IDictionary: ...
    @property
    def ShowInSourceView(self) -> bool: ...
    @AllowAssociate.setter
    def AllowAssociate(self, value: bool) -> None: ...
    @ShowInSourceView.setter
    def ShowInSourceView(self, value: bool) -> None: ...


class DesignerActionItemCollection(CollectionBase):
    def __init__(self): ...
    def Add(self, value: DesignerActionItem) -> int: ...
    def Contains(self, value: DesignerActionItem) -> bool: ...
    def CopyTo(self, array: Set(DesignerActionItem), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DesignerActionItem: ...
    def IndexOf(self, value: DesignerActionItem) -> int: ...
    def Insert(self, index: int, value: DesignerActionItem) -> None: ...
    def Remove(self, value: DesignerActionItem) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DesignerActionItem) -> None: ...


class DesignerActionList(Object):
    def __init__(self, component: IComponent): ...
    @property
    def AutoShow(self) -> bool: ...
    @property
    def Component(self) -> IComponent: ...
    def GetService(self, serviceType: Type) -> Object: ...
    def GetSortedActionItems(self) -> DesignerActionItemCollection: ...
    @AutoShow.setter
    def AutoShow(self, value: bool) -> None: ...


class DesignerActionListCollection(CollectionBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Set(DesignerActionList)): ...
    def Add(self, value: DesignerActionList) -> int: ...
    @overload
    def AddRange(self, value: Set(DesignerActionList)) -> None: ...
    @overload
    def AddRange(self, value: DesignerActionListCollection) -> None: ...
    def Contains(self, value: DesignerActionList) -> bool: ...
    def CopyTo(self, array: Set(DesignerActionList), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DesignerActionList: ...
    def IndexOf(self, value: DesignerActionList) -> int: ...
    def Insert(self, index: int, value: DesignerActionList) -> None: ...
    def Remove(self, value: DesignerActionList) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DesignerActionList) -> None: ...


class DesignerActionListsChangedEventArgs(EventArgs):
    def __init__(self, relatedObject: Object, changeType: DesignerActionListsChangedType, actionLists: DesignerActionListCollection): ...
    @property
    def ActionLists(self) -> DesignerActionListCollection: ...
    @property
    def ChangeType(self) -> DesignerActionListsChangedType: ...
    @property
    def RelatedObject(self) -> Object: ...


class DesignerActionListsChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DesignerActionListsChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DesignerActionListsChangedEventArgs) -> None: ...


class DesignerActionListsChangedType:
    ActionListsAdded = 0
    ActionListsRemoved = 1


class DesignerActionMethodItem(DesignerActionItem):
    @overload
    def __init__(self, actionList: DesignerActionList, memberName: str, displayName: str): ...
    @overload
    def __init__(self, actionList: DesignerActionList, memberName: str, displayName: str, includeAsDesignerVerb: bool): ...
    @overload
    def __init__(self, actionList: DesignerActionList, memberName: str, displayName: str, category: str): ...
    @overload
    def __init__(self, actionList: DesignerActionList, memberName: str, displayName: str, category: str, includeAsDesignerVerb: bool): ...
    @overload
    def __init__(self, actionList: DesignerActionList, memberName: str, displayName: str, category: str, description: str): ...
    @overload
    def __init__(self, actionList: DesignerActionList, memberName: str, displayName: str, category: str, description: str, includeAsDesignerVerb: bool): ...
    @property
    def IncludeAsDesignerVerb(self) -> bool: ...
    @property
    def MemberName(self) -> str: ...
    @property
    def RelatedComponent(self) -> IComponent: ...
    def Invoke(self) -> None: ...
    @RelatedComponent.setter
    def RelatedComponent(self, value: IComponent) -> None: ...


class DesignerActionPropertyItem(DesignerActionItem):
    @overload
    def __init__(self, memberName: str, displayName: str): ...
    @overload
    def __init__(self, memberName: str, displayName: str, category: str): ...
    @overload
    def __init__(self, memberName: str, displayName: str, category: str, description: str): ...
    @property
    def MemberName(self) -> str: ...
    @property
    def RelatedComponent(self) -> IComponent: ...
    @RelatedComponent.setter
    def RelatedComponent(self, value: IComponent) -> None: ...


class DesignerActionService(Object):
    def __init__(self, serviceProvider: IServiceProvider): ...
    def add_DesignerActionListsChanged(self, value: DesignerActionListsChangedEventHandler) -> None: ...
    @overload
    def Add(self, comp: IComponent, designerActionListCollection: DesignerActionListCollection) -> None: ...
    @overload
    def Add(self, comp: IComponent, actionList: DesignerActionList) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, comp: IComponent) -> bool: ...
    def Dispose(self) -> None: ...
    @overload
    def GetComponentActions(self, component: IComponent) -> DesignerActionListCollection: ...
    @overload
    def GetComponentActions(self, component: IComponent, type: ComponentActionsType) -> DesignerActionListCollection: ...
    def remove_DesignerActionListsChanged(self, value: DesignerActionListsChangedEventHandler) -> None: ...
    @overload
    def Remove(self, comp: IComponent) -> None: ...
    @overload
    def Remove(self, actionList: DesignerActionList) -> None: ...
    @overload
    def Remove(self, comp: IComponent, actionList: DesignerActionList) -> None: ...


class DesignerActionTextItem(DesignerActionItem):
    def __init__(self, displayName: str, category: str): ...


class DesignerActionUIService(Object):
    def add_DesignerActionUIStateChange(self, value: DesignerActionUIStateChangeEventHandler) -> None: ...
    def Dispose(self) -> None: ...
    def HideUI(self, component: IComponent) -> None: ...
    def Refresh(self, component: IComponent) -> None: ...
    def remove_DesignerActionUIStateChange(self, value: DesignerActionUIStateChangeEventHandler) -> None: ...
    def ShouldAutoShow(self, component: IComponent) -> bool: ...
    def ShowUI(self, component: IComponent) -> None: ...


class DesignerActionUIStateChangeEventArgs(EventArgs):
    def __init__(self, relatedObject: Object, changeType: DesignerActionUIStateChangeType): ...
    @property
    def ChangeType(self) -> DesignerActionUIStateChangeType: ...
    @property
    def RelatedObject(self) -> Object: ...


class DesignerActionUIStateChangeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DesignerActionUIStateChangeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DesignerActionUIStateChangeEventArgs) -> None: ...


class DesignerActionUIStateChangeType:
    Show = 0
    Hide = 1
    Refresh = 2


class DesignerCommandSet(Object):
    def __init__(self): ...
    @property
    def ActionLists(self) -> DesignerActionListCollection: ...
    @property
    def Verbs(self) -> DesignerVerbCollection: ...
    def GetCommands(self, name: str) -> ICollection: ...


class DesignSurface(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parentProvider: IServiceProvider): ...
    @overload
    def __init__(self, rootComponentType: Type): ...
    @overload
    def __init__(self, parentProvider: IServiceProvider, rootComponentType: Type): ...
    def add_Disposed(self, value: EventHandler) -> None: ...
    def add_Flushed(self, value: EventHandler) -> None: ...
    def add_Loaded(self, value: LoadedEventHandler) -> None: ...
    def add_Loading(self, value: EventHandler) -> None: ...
    def add_Unloaded(self, value: EventHandler) -> None: ...
    def add_Unloading(self, value: EventHandler) -> None: ...
    def add_ViewActivated(self, value: EventHandler) -> None: ...
    @overload
    def BeginLoad(self, rootComponentType: Type) -> None: ...
    @overload
    def BeginLoad(self, loader: DesignerLoader) -> None: ...
    @overload
    def CreateNestedContainer(self, owningComponent: IComponent) -> INestedContainer: ...
    @overload
    def CreateNestedContainer(self, owningComponent: IComponent, containerName: str) -> INestedContainer: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> None: ...
    @property
    def ComponentContainer(self) -> IContainer: ...
    @property
    def DtelLoading(self) -> bool: ...
    @property
    def IsLoaded(self) -> bool: ...
    @property
    def LoadErrors(self) -> ICollection: ...
    @property
    def View(self) -> Object: ...
    def GetService(self, serviceType: Type) -> Object: ...
    def remove_Disposed(self, value: EventHandler) -> None: ...
    def remove_Flushed(self, value: EventHandler) -> None: ...
    def remove_Loaded(self, value: LoadedEventHandler) -> None: ...
    def remove_Loading(self, value: EventHandler) -> None: ...
    def remove_Unloaded(self, value: EventHandler) -> None: ...
    def remove_Unloading(self, value: EventHandler) -> None: ...
    def remove_ViewActivated(self, value: EventHandler) -> None: ...
    @DtelLoading.setter
    def DtelLoading(self, value: bool) -> None: ...


class DesignSurfaceCollection(Object):
    def CopyTo(self, array: Set(DesignSurface), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> DesignSurface: ...
    def GetEnumerator(self) -> IEnumerator: ...


class DesignSurfaceEventArgs(EventArgs):
    def __init__(self, surface: DesignSurface): ...
    @property
    def Surface(self) -> DesignSurface: ...


class DesignSurfaceEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DesignSurfaceEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DesignSurfaceEventArgs) -> None: ...


class DesignSurfaceManager(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parentProvider: IServiceProvider): ...
    def add_ActiveDesignSurfaceChanged(self, value: ActiveDesignSurfaceChangedEventHandler) -> None: ...
    def add_DesignSurfaceCreated(self, value: DesignSurfaceEventHandler) -> None: ...
    def add_DesignSurfaceDisposed(self, value: DesignSurfaceEventHandler) -> None: ...
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def CreateDesignSurface(self) -> DesignSurface: ...
    @overload
    def CreateDesignSurface(self, parentProvider: IServiceProvider) -> DesignSurface: ...
    def Dispose(self) -> None: ...
    @property
    def ActiveDesignSurface(self) -> DesignSurface: ...
    @property
    def DesignSurfaces(self) -> DesignSurfaceCollection: ...
    def GetService(self, serviceType: Type) -> Object: ...
    def remove_ActiveDesignSurfaceChanged(self, value: ActiveDesignSurfaceChangedEventHandler) -> None: ...
    def remove_DesignSurfaceCreated(self, value: DesignSurfaceEventHandler) -> None: ...
    def remove_DesignSurfaceDisposed(self, value: DesignSurfaceEventHandler) -> None: ...
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    @ActiveDesignSurface.setter
    def ActiveDesignSurface(self, value: DesignSurface) -> None: ...


class DisplayMode:
    Hexdump = 1
    Ansi = 2
    Unicode = 3
    Auto = 4


class EventBindingService(Object):
    pass


class ExceptionCollection(Exception):
    def __init__(self, exceptions: ArrayList): ...
    @property
    def Exceptions(self) -> ArrayList: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class IMultitargetHelperService:
    def GetAssemblyQualifiedName(self, type: Type) -> str: ...


class InheritanceService(Object):
    def __init__(self): ...
    def AddInheritedComponents(self, component: IComponent, container: IContainer) -> None: ...
    def Dispose(self) -> None: ...
    def GetInheritanceAttribute(self, component: IComponent) -> InheritanceAttribute: ...


class LoadedEventArgs(EventArgs):
    def __init__(self, succeeded: bool, errors: ICollection): ...
    @property
    def Errors(self) -> ICollection: ...
    @property
    def HasSucceeded(self) -> bool: ...


class LoadedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: LoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: LoadedEventArgs) -> None: ...


class MenuCommandsChangedEventArgs(EventArgs):
    def __init__(self, changeType: MenuCommandsChangedType, command: MenuCommand): ...
    @property
    def ChangeType(self) -> MenuCommandsChangedType: ...
    @property
    def Command(self) -> MenuCommand: ...


class MenuCommandsChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: MenuCommandsChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: MenuCommandsChangedEventArgs) -> None: ...


class MenuCommandsChangedType:
    CommandAdded = 0
    CommandRemoved = 1
    CommandChanged = 2


class MenuCommandService(Object):
    def __init__(self, serviceProvider: IServiceProvider): ...
    def add_MenuCommandsChanged(self, value: MenuCommandsChangedEventHandler) -> None: ...
    def AddCommand(self, command: MenuCommand) -> None: ...
    def AddVerb(self, verb: DesignerVerb) -> None: ...
    def Dispose(self) -> None: ...
    def FindCommand(self, commandID: CommandID) -> MenuCommand: ...
    @property
    def Verbs(self) -> DesignerVerbCollection: ...
    @overload
    def GlobalInvoke(self, commandID: CommandID) -> bool: ...
    @overload
    def GlobalInvoke(self, commandId: CommandID, arg: Object) -> bool: ...
    def remove_MenuCommandsChanged(self, value: MenuCommandsChangedEventHandler) -> None: ...
    def RemoveCommand(self, command: MenuCommand) -> None: ...
    def RemoveVerb(self, verb: DesignerVerb) -> None: ...
    def ShowContextMenu(self, menuID: CommandID, x: int, y: int) -> None: ...


class MultilineStringEditor(UITypeEditor):
    def __init__(self): ...
    @overload
    def EditValue(self, context: ITypeDescriptorContext, provider: IServiceProvider, value: Object) -> Object: ...
    @overload
    def GetEditStyle(self, context: ITypeDescriptorContext) -> UITypeEditorEditStyle: ...
    @overload
    def GetPaintValueSupported(self, context: ITypeDescriptorContext) -> bool: ...


class ObjectSelectorEditor(UITypeEditor):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, subObjectSelector: bool): ...
    def ApplyTreeViewThemeStyles(treeView: TreeView) -> None: ...
    @overload
    def EditValue(self, context: ITypeDescriptorContext, provider: IServiceProvider, value: Object) -> Object: ...
    @overload
    def GetEditStyle(self, context: ITypeDescriptorContext) -> UITypeEditorEditStyle: ...
    def SetValue(self, value: Object) -> None: ...


class ProjectTargetFrameworkAttribute(Attribute):
    def __init__(self, targetFrameworkMoniker: str): ...
    @property
    def TargetFrameworkMoniker(self) -> str: ...


class Selector(TreeView):
    def __init__(self, editor: ObjectSelectorEditor): ...
    def AddNode(self, label: str, value: Object, parent: SelectorNode) -> SelectorNode: ...
    def Clear(self) -> None: ...
    def SetSelection(self, value: Object, nodes: TreeNodeCollection) -> bool: ...
    def Start(self, edSvc: IWindowsFormsEditorService, value: Object) -> None: ...
    def Stop(self) -> None: ...


class SelectorNode(TreeNode):
    def __init__(self, label: str, value: Object): ...


class UndoEngine(Object):
    def add_Undoing(self, value: EventHandler) -> None: ...
    def add_Undone(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def UndoInProgress(self) -> bool: ...
    def remove_Undoing(self, value: EventHandler) -> None: ...
    def remove_Undone(self, value: EventHandler) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
