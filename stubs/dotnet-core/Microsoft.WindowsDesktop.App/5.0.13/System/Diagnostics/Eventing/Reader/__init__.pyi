from typing import Tuple, Set, Iterable, List


class EventBookmark(Object):
    pass


class EventKeyword(Object):
    @property
    def DisplayName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Int64: ...


class EventLevel(Object):
    @property
    def DisplayName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> int: ...


class EventLogConfiguration(Object):
    @overload
    def __init__(self, logName: str): ...
    @overload
    def __init__(self, logName: str, session: EventLogSession): ...
    def Dispose(self) -> None: ...
    @property
    def IsClassicLog(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def LogFilePath(self) -> str: ...
    @property
    def LogIsolation(self) -> EventLogIsolation: ...
    @property
    def LogMode(self) -> EventLogMode: ...
    @property
    def LogName(self) -> str: ...
    @property
    def LogType(self) -> EventLogType: ...
    @property
    def MaximumSizeInBytes(self) -> Int64: ...
    @property
    def OwningProviderName(self) -> str: ...
    @property
    def ProviderBufferSize(self) -> Nullable: ...
    @property
    def ProviderControlGuid(self) -> Nullable: ...
    @property
    def ProviderKeywords(self) -> Nullable: ...
    @property
    def ProviderLatency(self) -> Nullable: ...
    @property
    def ProviderLevel(self) -> Nullable: ...
    @property
    def ProviderMaximumNumberOfBuffers(self) -> Nullable: ...
    @property
    def ProviderMinimumNumberOfBuffers(self) -> Nullable: ...
    @property
    def ProviderNames(self) -> Iterable[str]: ...
    @property
    def SecurityDescriptor(self) -> str: ...
    def SaveChanges(self) -> None: ...
    @IsEnabled.setter
    def IsEnabled(self, value: bool) -> None: ...
    @LogFilePath.setter
    def LogFilePath(self, value: str) -> None: ...
    @LogMode.setter
    def LogMode(self, value: EventLogMode) -> None: ...
    @MaximumSizeInBytes.setter
    def MaximumSizeInBytes(self, value: Int64) -> None: ...
    @ProviderKeywords.setter
    def ProviderKeywords(self, value: Nullable) -> None: ...
    @ProviderLevel.setter
    def ProviderLevel(self, value: Nullable) -> None: ...
    @SecurityDescriptor.setter
    def SecurityDescriptor(self, value: str) -> None: ...


class EventLogException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @property
    def Message(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class EventLogInformation(Object):
    @property
    def Attributes(self) -> Nullable: ...
    @property
    def CreationTime(self) -> Nullable: ...
    @property
    def FileSize(self) -> Nullable: ...
    @property
    def IsLogFull(self) -> Nullable: ...
    @property
    def LastAccessTime(self) -> Nullable: ...
    @property
    def LastWriteTime(self) -> Nullable: ...
    @property
    def OldestRecordNumber(self) -> Nullable: ...
    @property
    def RecordCount(self) -> Nullable: ...


class EventLogInvalidDataException(EventLogException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class EventLogIsolation:
    Application = 0
    System = 1
    Custom = 2


class EventLogLink(Object):
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsImported(self) -> bool: ...
    @property
    def LogName(self) -> str: ...


class EventLogMode:
    Circular = 0
    AutoBackup = 1
    Retain = 2


class EventLogNotFoundException(EventLogException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class EventLogPropertySelector(Object):
    def __init__(self, propertyQueries: Iterable[str]): ...
    def Dispose(self) -> None: ...


class EventLogProviderDisabledException(EventLogException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class EventLogQuery(Object):
    @overload
    def __init__(self, path: str, pathType: PathType): ...
    @overload
    def __init__(self, path: str, pathType: PathType, query: str): ...
    @property
    def ReverseDirection(self) -> bool: ...
    @property
    def Session(self) -> EventLogSession: ...
    @property
    def TolerateQueryErrors(self) -> bool: ...
    @ReverseDirection.setter
    def ReverseDirection(self, value: bool) -> None: ...
    @Session.setter
    def Session(self, value: EventLogSession) -> None: ...
    @TolerateQueryErrors.setter
    def TolerateQueryErrors(self, value: bool) -> None: ...


class EventLogReader(Object):
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, eventQuery: EventLogQuery): ...
    @overload
    def __init__(self, path: str, pathType: PathType): ...
    @overload
    def __init__(self, eventQuery: EventLogQuery, bookmark: EventBookmark): ...
    def CancelReading(self) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def BatchSize(self) -> int: ...
    @property
    def LogStatus(self) -> List[EventLogStatus]: ...
    @overload
    def ReadEvent(self) -> EventRecord: ...
    @overload
    def ReadEvent(self, timeout: TimeSpan) -> EventRecord: ...
    @overload
    def Seek(self, bookmark: EventBookmark) -> None: ...
    @overload
    def Seek(self, bookmark: EventBookmark, offset: Int64) -> None: ...
    @overload
    def Seek(self, origin: SeekOrigin, offset: Int64) -> None: ...
    @BatchSize.setter
    def BatchSize(self, value: int) -> None: ...


class EventLogReadingException(EventLogException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class EventLogRecord(EventRecord):
    @overload
    def FormatDescription(self) -> str: ...
    @overload
    def FormatDescription(self, values: Iterable[Object]) -> str: ...
    @property
    def ActivityId(self) -> Nullable: ...
    @property
    def Bookmark(self) -> EventBookmark: ...
    @property
    def ContainerLog(self) -> str: ...
    @property
    def Id(self) -> int: ...
    @property
    def Keywords(self) -> Nullable: ...
    @property
    def KeywordsDisplayNames(self) -> Iterable[str]: ...
    @property
    def Level(self) -> Nullable: ...
    @property
    def LevelDisplayName(self) -> str: ...
    @property
    def LogName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def MatchedQueryIds(self) -> Iterable[int]: ...
    @property
    def Opcode(self) -> Nullable: ...
    @property
    def OpcodeDisplayName(self) -> str: ...
    @property
    def ProcessId(self) -> Nullable: ...
    @property
    def Properties(self) -> List[EventProperty]: ...
    @property
    def ProviderId(self) -> Nullable: ...
    @property
    def ProviderName(self) -> str: ...
    @property
    def Qualifiers(self) -> Nullable: ...
    @property
    def RecordId(self) -> Nullable: ...
    @property
    def RelatedActivityId(self) -> Nullable: ...
    @property
    def Task(self) -> Nullable: ...
    @property
    def TaskDisplayName(self) -> str: ...
    @property
    def ThreadId(self) -> Nullable: ...
    @property
    def TimeCreated(self) -> Nullable: ...
    @property
    def UserId(self) -> SecurityIdentifier: ...
    @property
    def Version(self) -> Nullable: ...
    def GetPropertyValues(self, propertySelector: EventLogPropertySelector) -> List[Object]: ...
    def ToXml(self) -> str: ...


class EventLogSession(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, server: str): ...
    @overload
    def __init__(self, server: str, domain: str, user: str, password: SecureString, logOnType: SessionAuthentication): ...
    def CancelCurrentOperations(self) -> None: ...
    @overload
    def ClearLog(self, logName: str) -> None: ...
    @overload
    def ClearLog(self, logName: str, backupPath: str) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def ExportLog(self, path: str, pathType: PathType, query: str, targetFilePath: str) -> None: ...
    @overload
    def ExportLog(self, path: str, pathType: PathType, query: str, targetFilePath: str, tolerateQueryErrors: bool) -> None: ...
    @overload
    def ExportLogAndMessages(self, path: str, pathType: PathType, query: str, targetFilePath: str) -> None: ...
    @overload
    def ExportLogAndMessages(self, path: str, pathType: PathType, query: str, targetFilePath: str, tolerateQueryErrors: bool, targetCultureInfo: CultureInfo) -> None: ...
    @property
    def GlobalSession() -> EventLogSession: ...
    def GetLogInformation(self, logName: str, pathType: PathType) -> EventLogInformation: ...
    def GetLogNames(self) -> Iterable[str]: ...
    def GetProviderNames(self) -> Iterable[str]: ...


class EventLogStatus(Object):
    @property
    def LogName(self) -> str: ...
    @property
    def StatusCode(self) -> int: ...


class EventLogType:
    Administrative = 0
    Operational = 1
    Analytical = 2
    Debug = 3


class EventLogWatcher(Object):
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, eventQuery: EventLogQuery): ...
    @overload
    def __init__(self, eventQuery: EventLogQuery, bookmark: EventBookmark): ...
    @overload
    def __init__(self, eventQuery: EventLogQuery, bookmark: EventBookmark, readExistingEvents: bool): ...
    def add_EventRecordWritten(self, value: EventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    def remove_EventRecordWritten(self, value: EventHandler) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...


class EventMetadata(Object):
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Int64: ...
    @property
    def Keywords(self) -> Iterable[EventKeyword]: ...
    @property
    def Level(self) -> EventLevel: ...
    @property
    def LogLink(self) -> EventLogLink: ...
    @property
    def Opcode(self) -> EventOpcode: ...
    @property
    def Task(self) -> EventTask: ...
    @property
    def Template(self) -> str: ...
    @property
    def Version(self) -> Byte: ...


class EventOpcode(Object):
    @property
    def DisplayName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> int: ...


class EventProperty(Object):
    @property
    def Value(self) -> Object: ...


class EventRecord(Object):
    def Dispose(self) -> None: ...
    @overload
    def FormatDescription(self) -> str: ...
    @overload
    def FormatDescription(self, values: Iterable[Object]) -> str: ...
    @property
    def ActivityId(self) -> Nullable: ...
    @property
    def Bookmark(self) -> EventBookmark: ...
    @property
    def Id(self) -> int: ...
    @property
    def Keywords(self) -> Nullable: ...
    @property
    def KeywordsDisplayNames(self) -> Iterable[str]: ...
    @property
    def Level(self) -> Nullable: ...
    @property
    def LevelDisplayName(self) -> str: ...
    @property
    def LogName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def Opcode(self) -> Nullable: ...
    @property
    def OpcodeDisplayName(self) -> str: ...
    @property
    def ProcessId(self) -> Nullable: ...
    @property
    def Properties(self) -> List[EventProperty]: ...
    @property
    def ProviderId(self) -> Nullable: ...
    @property
    def ProviderName(self) -> str: ...
    @property
    def Qualifiers(self) -> Nullable: ...
    @property
    def RecordId(self) -> Nullable: ...
    @property
    def RelatedActivityId(self) -> Nullable: ...
    @property
    def Task(self) -> Nullable: ...
    @property
    def TaskDisplayName(self) -> str: ...
    @property
    def ThreadId(self) -> Nullable: ...
    @property
    def TimeCreated(self) -> Nullable: ...
    @property
    def UserId(self) -> SecurityIdentifier: ...
    @property
    def Version(self) -> Nullable: ...
    def ToXml(self) -> str: ...


class EventRecordWrittenEventArgs(EventArgs):
    @property
    def EventException(self) -> Exception: ...
    @property
    def EventRecord(self) -> EventRecord: ...


class EventTask(Object):
    @property
    def DisplayName(self) -> str: ...
    @property
    def EventGuid(self) -> Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> int: ...


class PathType:
    LogName = 1
    FilePath = 2


class ProviderMetadata(Object):
    @overload
    def __init__(self, providerName: str): ...
    @overload
    def __init__(self, providerName: str, session: EventLogSession, targetCultureInfo: CultureInfo): ...
    def Dispose(self) -> None: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Events(self) -> Iterable[EventMetadata]: ...
    @property
    def HelpLink(self) -> Uri: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def Keywords(self) -> List[EventKeyword]: ...
    @property
    def Levels(self) -> List[EventLevel]: ...
    @property
    def LogLinks(self) -> List[EventLogLink]: ...
    @property
    def MessageFilePath(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Opcodes(self) -> List[EventOpcode]: ...
    @property
    def ParameterFilePath(self) -> str: ...
    @property
    def ResourceFilePath(self) -> str: ...
    @property
    def Tasks(self) -> List[EventTask]: ...


class SessionAuthentication:
    Default = 0
    Negotiate = 1
    Kerberos = 2
    Ntlm = 3


class StandardEventKeywords:
    #None = 0
    ResponseTime = 281474976710656
    WdiContext = 562949953421312
    WdiDiagnostic = 1125899906842624
    Sqm = 2251799813685248
    CorrelationHint = 4503599627370496
    AuditFailure = 4503599627370496
    AuditSuccess = 9007199254740992
    CorrelationHint2 = 18014398509481984
    EventLogClassic = 36028797018963968


class StandardEventLevel:
    LogAlways = 0
    Critical = 1
    Error = 2
    Warning = 3
    Informational = 4
    Verbose = 5


class StandardEventOpcode:
    Info = 0
    Start = 1
    Stop = 2
    DataCollectionStart = 3
    DataCollectionStop = 4
    Extension = 5
    Reply = 6
    Resume = 7
    Suspend = 8
    Send = 9
    Receive = 240


class StandardEventTask:
    #None = 0
