__all__ = ['Abstractions','Internal']
from typing import Tuple, Set, Iterable, List


class FilePatternMatch:
    def __init__(self, path: str, stem: str): ...
    @overload
    def Equals(self, other: FilePatternMatch) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Path(self) -> str: ...
    @property
    def Stem(self) -> str: ...
    def GetHashCode(self) -> int: ...


class InMemoryDirectoryInfo(DirectoryInfoBase):
    def __init__(self, rootDir: str, files: Iterable[str]): ...
    def EnumerateFileSystemInfos(self) -> Iterable[FileSystemInfoBase]: ...
    @property
    def FullName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParentDirectory(self) -> DirectoryInfoBase: ...
    def GetDirectory(self, path: str) -> DirectoryInfoBase: ...
    def GetFile(self, path: str) -> FileInfoBase: ...


class Matcher:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, comparisonType: StringComparison): ...
    def AddExclude(self, pattern: str) -> Matcher: ...
    def AddInclude(self, pattern: str) -> Matcher: ...
    def Execute(self, directoryInfo: DirectoryInfoBase) -> PatternMatchingResult: ...


class MatcherExtensions:
    def AddExcludePatterns(matcher: Matcher, excludePatternsGroups: Iterable[str]) -> None: ...
    def AddIncludePatterns(matcher: Matcher, includePatternsGroups: Iterable[str]) -> None: ...
    def GetResultsInFullPath(matcher: Matcher, directoryPath: str) -> Iterable[str]: ...
    @overload
    def Match(matcher: Matcher, file: str) -> PatternMatchingResult: ...
    @overload
    def Match(matcher: Matcher, files: Iterable[str]) -> PatternMatchingResult: ...
    @overload
    def Match(matcher: Matcher, rootDir: str, file: str) -> PatternMatchingResult: ...
    @overload
    def Match(matcher: Matcher, rootDir: str, files: Iterable[str]) -> PatternMatchingResult: ...


class PatternMatchingResult:
    @overload
    def __init__(self, files: Iterable[FilePatternMatch]): ...
    @overload
    def __init__(self, files: Iterable[FilePatternMatch], hasMatches: bool): ...
    @property
    def Files(self) -> Iterable[FilePatternMatch]: ...
    @property
    def HasMatches(self) -> bool: ...
    @Files.setter
    def Files(self, value: Iterable[FilePatternMatch]) -> None: ...
