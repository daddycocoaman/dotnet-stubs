from typing import Tuple, Set, Iterable, List


class ConsoleFormatter:
    @property
    def Name(self) -> str: ...
    def Write(self, logEntry: LogEntry, scopeProvider: IExternalScopeProvider, textWriter: TextWriter) -> Tuple[LogEntry]: ...


class ConsoleFormatterNames:
    pass


class ConsoleFormatterOptions:
    def __init__(self): ...
    @property
    def IncludeScopes(self) -> bool: ...
    @property
    def TimestampFormat(self) -> str: ...
    @property
    def UseUtcTimestamp(self) -> bool: ...
    @IncludeScopes.setter
    def IncludeScopes(self, value: bool) -> None: ...
    @TimestampFormat.setter
    def TimestampFormat(self, value: str) -> None: ...
    @UseUtcTimestamp.setter
    def UseUtcTimestamp(self, value: bool) -> None: ...


class ConsoleLoggerOptions:
    def __init__(self): ...
    @property
    def DisableColors(self) -> bool: ...
    @property
    def Format(self) -> ConsoleLoggerFormat: ...
    @property
    def FormatterName(self) -> str: ...
    @property
    def IncludeScopes(self) -> bool: ...
    @property
    def LogToStandardErrorThreshold(self) -> LogLevel: ...
    @property
    def TimestampFormat(self) -> str: ...
    @property
    def UseUtcTimestamp(self) -> bool: ...
    @DisableColors.setter
    def DisableColors(self, value: bool) -> None: ...
    @Format.setter
    def Format(self, value: ConsoleLoggerFormat) -> None: ...
    @FormatterName.setter
    def FormatterName(self, value: str) -> None: ...
    @IncludeScopes.setter
    def IncludeScopes(self, value: bool) -> None: ...
    @LogToStandardErrorThreshold.setter
    def LogToStandardErrorThreshold(self, value: LogLevel) -> None: ...
    @TimestampFormat.setter
    def TimestampFormat(self, value: str) -> None: ...
    @UseUtcTimestamp.setter
    def UseUtcTimestamp(self, value: bool) -> None: ...


class ConsoleLoggerProvider:
    @overload
    def __init__(self, options: IOptionsMonitor): ...
    @overload
    def __init__(self, options: IOptionsMonitor, formatters: Iterable[ConsoleFormatter]): ...
    def CreateLogger(self, name: str) -> ILogger: ...
    def Dispose(self) -> None: ...
    def SetScopeProvider(self, scopeProvider: IExternalScopeProvider) -> None: ...


class JsonConsoleFormatterOptions(ConsoleFormatterOptions):
    def __init__(self): ...
    @property
    def JsonWriterOptions(self) -> JsonWriterOptions: ...
    @JsonWriterOptions.setter
    def JsonWriterOptions(self, value: JsonWriterOptions) -> None: ...


class LoggerColorBehavior:
    Default = 0
    Enabled = 1
    Disabled = 2


class SimpleConsoleFormatterOptions(ConsoleFormatterOptions):
    def __init__(self): ...
    @property
    def ColorBehavior(self) -> LoggerColorBehavior: ...
    @property
    def SingleLine(self) -> bool: ...
    @ColorBehavior.setter
    def ColorBehavior(self, value: LoggerColorBehavior) -> None: ...
    @SingleLine.setter
    def SingleLine(self, value: bool) -> None: ...
