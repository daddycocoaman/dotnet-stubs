from typing import Tuple, Set, Iterable, List


class ServiceCollectionDescriptorExtensions:
    @overload
    def Add(collection: IServiceCollection, descriptor: ServiceDescriptor) -> IServiceCollection: ...
    @overload
    def Add(collection: IServiceCollection, descriptors: Iterable[ServiceDescriptor]) -> IServiceCollection: ...
    @overload
    def RemoveAll(collection: IServiceCollection) -> IServiceCollection: ...
    @overload
    def RemoveAll(collection: IServiceCollection, serviceType: Type) -> IServiceCollection: ...
    def Replace(collection: IServiceCollection, descriptor: ServiceDescriptor) -> IServiceCollection: ...
    @overload
    def TryAdd(collection: IServiceCollection, descriptors: Iterable[ServiceDescriptor]) -> None: ...
    @overload
    def TryAdd(collection: IServiceCollection, descriptor: ServiceDescriptor) -> None: ...
    @overload
    def TryAddEnumerable(services: IServiceCollection, descriptor: ServiceDescriptor) -> None: ...
    @overload
    def TryAddEnumerable(services: IServiceCollection, descriptors: Iterable[ServiceDescriptor]) -> None: ...
    @overload
    def TryAddScoped(collection: IServiceCollection) -> None: ...
    @overload
    def TryAddScoped(collection: IServiceCollection) -> None: ...
    @overload
    def TryAddScoped(collection: IServiceCollection, service: Type) -> None: ...
    @overload
    def TryAddScoped(services: IServiceCollection, implementationFactory: Func) -> None: ...
    @overload
    def TryAddScoped(collection: IServiceCollection, service: Type, implementationFactory: Func) -> None: ...
    @overload
    def TryAddScoped(collection: IServiceCollection, service: Type, implementationType: Type) -> None: ...
    @overload
    def TryAddSingleton(collection: IServiceCollection) -> None: ...
    @overload
    def TryAddSingleton(collection: IServiceCollection) -> None: ...
    @overload
    def TryAddSingleton(collection: IServiceCollection, service: Type) -> None: ...
    @overload
    def TryAddSingleton(collection: IServiceCollection, instance: TService) -> None: ...
    @overload
    def TryAddSingleton(services: IServiceCollection, implementationFactory: Func) -> None: ...
    @overload
    def TryAddSingleton(collection: IServiceCollection, service: Type, implementationType: Type) -> None: ...
    @overload
    def TryAddSingleton(collection: IServiceCollection, service: Type, implementationFactory: Func) -> None: ...
    @overload
    def TryAddTransient(collection: IServiceCollection) -> None: ...
    @overload
    def TryAddTransient(collection: IServiceCollection) -> None: ...
    @overload
    def TryAddTransient(services: IServiceCollection, implementationFactory: Func) -> None: ...
    @overload
    def TryAddTransient(collection: IServiceCollection, service: Type) -> None: ...
    @overload
    def TryAddTransient(collection: IServiceCollection, service: Type, implementationFactory: Func) -> None: ...
    @overload
    def TryAddTransient(collection: IServiceCollection, service: Type, implementationType: Type) -> None: ...
