from typing import Tuple, Set, Iterable, List


class ApplicationLifetime:
    def __init__(self, logger: ILogger): ...
    @property
    def ApplicationStarted(self) -> CancellationToken: ...
    @property
    def ApplicationStopped(self) -> CancellationToken: ...
    @property
    def ApplicationStopping(self) -> CancellationToken: ...
    def NotifyStarted(self) -> None: ...
    def NotifyStopped(self) -> None: ...
    def StopApplication(self) -> None: ...


class ConsoleLifetime:
    @overload
    def __init__(self, options: IOptions, environment: IHostEnvironment, applicationLifetime: IHostApplicationLifetime, hostOptions: IOptions): ...
    @overload
    def __init__(self, options: IOptions, environment: IHostEnvironment, applicationLifetime: IHostApplicationLifetime, hostOptions: IOptions, loggerFactory: ILoggerFactory): ...
    def Dispose(self) -> None: ...
    def StopAsync(self, cancellationToken: CancellationToken) -> Task: ...
    def WaitForStartAsync(self, cancellationToken: CancellationToken) -> Task: ...


class HostingEnvironment:
    def __init__(self): ...
    @property
    def ApplicationName(self) -> str: ...
    @property
    def ContentRootFileProvider(self) -> IFileProvider: ...
    @property
    def ContentRootPath(self) -> str: ...
    @property
    def EnvironmentName(self) -> str: ...
    @ApplicationName.setter
    def ApplicationName(self, value: str) -> None: ...
    @ContentRootFileProvider.setter
    def ContentRootFileProvider(self, value: IFileProvider) -> None: ...
    @ContentRootPath.setter
    def ContentRootPath(self, value: str) -> None: ...
    @EnvironmentName.setter
    def EnvironmentName(self, value: str) -> None: ...
