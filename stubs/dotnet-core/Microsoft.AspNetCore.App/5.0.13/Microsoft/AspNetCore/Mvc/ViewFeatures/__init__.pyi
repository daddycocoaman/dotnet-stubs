__all__ = ['Buffers','Infrastructure']
from typing import Tuple, Set, Iterable, List


class AntiforgeryExtensions:
    def GetHtml(antiforgery: IAntiforgery, httpContext: HttpContext) -> IHtmlContent: ...


class AttributeDictionary:
    def __init__(self): ...
    @overload
    def Add(self, item: KeyValuePair) -> None: ...
    @overload
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, item: KeyValuePair) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    def CopyTo(self, array: Set(KeyValuePair), arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, key: str) -> str: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Values(self) -> ICollection: ...
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def Remove(self, item: KeyValuePair) -> bool: ...
    @overload
    def Remove(self, key: str) -> bool: ...
    @Item.setter
    def Item(self, key: str, value: str) -> None: ...
    def TryGetValue(self, key: str) -> Tuple[bool, str]: ...


class CookieTempDataProvider:
    def __init__(self, dataProtectionProvider: IDataProtectionProvider, loggerFactory: ILoggerFactory, options: IOptions, tempDataSerializer: TempDataSerializer): ...
    def LoadTempData(self, context: HttpContext) -> IDictionary: ...
    def SaveTempData(self, context: HttpContext, values: IDictionary) -> None: ...


class DefaultHtmlGenerator:
    def __init__(self, antiforgery: IAntiforgery, optionsAccessor: IOptions, metadataProvider: IModelMetadataProvider, urlHelperFactory: IUrlHelperFactory, htmlEncoder: HtmlEncoder, validationAttributeProvider: ValidationHtmlAttributeProvider): ...
    @overload
    def Encode(self, value: str) -> str: ...
    @overload
    def Encode(self, value: Object) -> str: ...
    def FormatValue(self, value: Object, format: str) -> str: ...
    def GenerateActionLink(self, viewContext: ViewContext, linkText: str, actionName: str, controllerName: str, protocol: str, hostname: str, fragment: str, routeValues: Object, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateAntiforgery(self, viewContext: ViewContext) -> IHtmlContent: ...
    def GenerateCheckBox(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, isChecked: Nullable, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateForm(self, viewContext: ViewContext, actionName: str, controllerName: str, routeValues: Object, method: str, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateGroupsAndOptions(self, optionLabel: str, selectList: Iterable[SelectListItem]) -> IHtmlContent: ...
    def GenerateHidden(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, value: Object, useViewData: bool, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateHiddenForCheckbox(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str) -> TagBuilder: ...
    def GenerateLabel(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, labelText: str, htmlAttributes: Object) -> TagBuilder: ...
    def GeneratePageForm(self, viewContext: ViewContext, pageName: str, pageHandler: str, routeValues: Object, fragment: str, method: str, htmlAttributes: Object) -> TagBuilder: ...
    def GeneratePageLink(self, viewContext: ViewContext, linkText: str, pageName: str, pageHandler: str, protocol: str, hostname: str, fragment: str, routeValues: Object, htmlAttributes: Object) -> TagBuilder: ...
    def GeneratePassword(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, value: Object, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateRadioButton(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, value: Object, isChecked: Nullable, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateRouteForm(self, viewContext: ViewContext, routeName: str, routeValues: Object, method: str, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateRouteLink(self, viewContext: ViewContext, linkText: str, routeName: str, protocol: str, hostName: str, fragment: str, routeValues: Object, htmlAttributes: Object) -> TagBuilder: ...
    @overload
    def GenerateSelect(self, viewContext: ViewContext, modelExplorer: ModelExplorer, optionLabel: str, expression: str, selectList: Iterable[SelectListItem], allowMultiple: bool, htmlAttributes: Object) -> TagBuilder: ...
    @overload
    def GenerateSelect(self, viewContext: ViewContext, modelExplorer: ModelExplorer, optionLabel: str, expression: str, selectList: Iterable[SelectListItem], currentValues: ICollection, allowMultiple: bool, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateTextArea(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, rows: int, columns: int, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateTextBox(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, value: Object, format: str, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateValidationMessage(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, message: str, tag: str, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateValidationSummary(self, viewContext: ViewContext, excludePropertyErrors: bool, message: str, headerTag: str, htmlAttributes: Object) -> TagBuilder: ...
    @property
    def IdAttributeDotReplacement(self) -> str: ...
    def GetCurrentValues(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, allowMultiple: bool) -> ICollection: ...


class DefaultHtmlGeneratorExtensions:
    def GenerateForm(generator: IHtmlGenerator, viewContext: ViewContext, actionName: str, controllerName: str, fragment: str, routeValues: Object, method: str, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateRouteForm(generator: IHtmlGenerator, viewContext: ViewContext, routeName: str, routeValues: Object, fragment: str, method: str, htmlAttributes: Object) -> TagBuilder: ...


class DefaultValidationHtmlAttributeProvider(ValidationHtmlAttributeProvider):
    def __init__(self, optionsAccessor: IOptions, metadataProvider: IModelMetadataProvider, clientValidatorCache: ClientValidatorCache): ...
    def AddValidationAttributes(self, viewContext: ViewContext, modelExplorer: ModelExplorer, attributes: IDictionary) -> None: ...


class Enumerator:
    def __init__(self, attributes: AttributeDictionary): ...
    def Dispose(self) -> None: ...
    @property
    def Current(self) -> KeyValuePair: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class FormContext:
    def __init__(self): ...
    @property
    def CanRenderAtEndOfForm(self) -> bool: ...
    @property
    def EndOfFormContent(self) -> List[IHtmlContent]: ...
    @property
    def FormData(self) -> IDictionary: ...
    @property
    def HasAntiforgeryToken(self) -> bool: ...
    @property
    def HasEndOfFormContent(self) -> bool: ...
    @property
    def HasFormData(self) -> bool: ...
    @overload
    def RenderedField(self, fieldName: str) -> bool: ...
    @overload
    def RenderedField(self, fieldName: str, value: bool) -> None: ...
    @CanRenderAtEndOfForm.setter
    def CanRenderAtEndOfForm(self, value: bool) -> None: ...
    @HasAntiforgeryToken.setter
    def HasAntiforgeryToken(self, value: bool) -> None: ...


class HtmlHelper:
    def __init__(self, htmlGenerator: IHtmlGenerator, viewEngine: ICompositeViewEngine, metadataProvider: IModelMetadataProvider, bufferScope: IViewBufferScope, htmlEncoder: HtmlEncoder, urlEncoder: UrlEncoder): ...
    def ActionLink(self, linkText: str, actionName: str, controllerName: str, protocol: str, hostname: str, fragment: str, routeValues: Object, htmlAttributes: Object) -> IHtmlContent: ...
    def AnonymousObjectToHtmlAttributes(htmlAttributes: Object) -> IDictionary: ...
    def AntiForgeryToken(self) -> IHtmlContent: ...
    def BeginForm(self, actionName: str, controllerName: str, routeValues: Object, method: FormMethod, antiforgery: Nullable, htmlAttributes: Object) -> MvcForm: ...
    def BeginRouteForm(self, routeName: str, routeValues: Object, method: FormMethod, antiforgery: Nullable, htmlAttributes: Object) -> MvcForm: ...
    def CheckBox(self, expression: str, isChecked: Nullable, htmlAttributes: Object) -> IHtmlContent: ...
    def Contextualize(self, viewContext: ViewContext) -> None: ...
    def Display(self, expression: str, templateName: str, htmlFieldName: str, additionalViewData: Object) -> IHtmlContent: ...
    def DisplayName(self, expression: str) -> str: ...
    def DisplayText(self, expression: str) -> str: ...
    def DropDownList(self, expression: str, selectList: Iterable[SelectListItem], optionLabel: str, htmlAttributes: Object) -> IHtmlContent: ...
    def Editor(self, expression: str, templateName: str, htmlFieldName: str, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def Encode(self, value: str) -> str: ...
    @overload
    def Encode(self, value: Object) -> str: ...
    def EndForm(self) -> None: ...
    def FormatValue(self, value: Object, format: str) -> str: ...
    def GenerateIdFromName(self, fullName: str) -> str: ...
    @property
    def Html5DateRenderingMode(self) -> Html5DateRenderingMode: ...
    @property
    def IdAttributeDotReplacement(self) -> str: ...
    @property
    def MetadataProvider(self) -> IModelMetadataProvider: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def UrlEncoder(self) -> UrlEncoder: ...
    @property
    def ViewBag(self) -> Object: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    @overload
    def GetEnumSelectList(self) -> Iterable[SelectListItem]: ...
    @overload
    def GetEnumSelectList(self, enumType: Type) -> Iterable[SelectListItem]: ...
    def GetFormMethodString(method: FormMethod) -> str: ...
    def Hidden(self, expression: str, value: Object, htmlAttributes: Object) -> IHtmlContent: ...
    def Id(self, expression: str) -> str: ...
    def Label(self, expression: str, labelText: str, htmlAttributes: Object) -> IHtmlContent: ...
    def ListBox(self, expression: str, selectList: Iterable[SelectListItem], htmlAttributes: Object) -> IHtmlContent: ...
    def Name(self, expression: str) -> str: ...
    def ObjectToDictionary(value: Object) -> IDictionary: ...
    def PartialAsync(self, partialViewName: str, model: Object, viewData: ViewDataDictionary) -> Task: ...
    def Password(self, expression: str, value: Object, htmlAttributes: Object) -> IHtmlContent: ...
    def RadioButton(self, expression: str, value: Object, isChecked: Nullable, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def Raw(self, value: str) -> IHtmlContent: ...
    @overload
    def Raw(self, value: Object) -> IHtmlContent: ...
    def RenderPartialAsync(self, partialViewName: str, model: Object, viewData: ViewDataDictionary) -> Task: ...
    def RouteLink(self, linkText: str, routeName: str, protocol: str, hostName: str, fragment: str, routeValues: Object, htmlAttributes: Object) -> IHtmlContent: ...
    @Html5DateRenderingMode.setter
    def Html5DateRenderingMode(self, value: Html5DateRenderingMode) -> None: ...
    def TextArea(self, expression: str, value: str, rows: int, columns: int, htmlAttributes: Object) -> IHtmlContent: ...
    def TextBox(self, expression: str, value: Object, format: str, htmlAttributes: Object) -> IHtmlContent: ...
    def ValidationMessage(self, expression: str, message: str, htmlAttributes: Object, tag: str) -> IHtmlContent: ...
    def ValidationSummary(self, excludePropertyErrors: bool, message: str, htmlAttributes: Object, tag: str) -> IHtmlContent: ...
    def Value(self, expression: str, format: str) -> str: ...




class HtmlHelperOptions:
    def __init__(self): ...
    @property
    def CheckBoxHiddenInputRenderMode(self) -> CheckBoxHiddenInputRenderMode: ...
    @property
    def ClientValidationEnabled(self) -> bool: ...
    @property
    def Html5DateRenderingMode(self) -> Html5DateRenderingMode: ...
    @property
    def IdAttributeDotReplacement(self) -> str: ...
    @property
    def ValidationMessageElement(self) -> str: ...
    @property
    def ValidationSummaryMessageElement(self) -> str: ...
    @CheckBoxHiddenInputRenderMode.setter
    def CheckBoxHiddenInputRenderMode(self, value: CheckBoxHiddenInputRenderMode) -> None: ...
    @ClientValidationEnabled.setter
    def ClientValidationEnabled(self, value: bool) -> None: ...
    @Html5DateRenderingMode.setter
    def Html5DateRenderingMode(self, value: Html5DateRenderingMode) -> None: ...
    @IdAttributeDotReplacement.setter
    def IdAttributeDotReplacement(self, value: str) -> None: ...
    @ValidationMessageElement.setter
    def ValidationMessageElement(self, value: str) -> None: ...
    @ValidationSummaryMessageElement.setter
    def ValidationSummaryMessageElement(self, value: str) -> None: ...


class IAntiforgeryPolicy:
    pass


class IFileVersionProvider:
    def AddFileVersionToPath(self, requestPathBase: PathString, path: str) -> str: ...


class IHtmlGenerator:
    @overload
    def Encode(self, value: str) -> str: ...
    @overload
    def Encode(self, value: Object) -> str: ...
    def FormatValue(self, value: Object, format: str) -> str: ...
    def GenerateActionLink(self, viewContext: ViewContext, linkText: str, actionName: str, controllerName: str, protocol: str, hostname: str, fragment: str, routeValues: Object, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateAntiforgery(self, viewContext: ViewContext) -> IHtmlContent: ...
    def GenerateCheckBox(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, isChecked: Nullable, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateForm(self, viewContext: ViewContext, actionName: str, controllerName: str, routeValues: Object, method: str, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateGroupsAndOptions(self, optionLabel: str, selectList: Iterable[SelectListItem]) -> IHtmlContent: ...
    def GenerateHidden(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, value: Object, useViewData: bool, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateHiddenForCheckbox(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str) -> TagBuilder: ...
    def GenerateLabel(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, labelText: str, htmlAttributes: Object) -> TagBuilder: ...
    def GeneratePageForm(self, viewContext: ViewContext, pageName: str, pageHandler: str, routeValues: Object, fragment: str, method: str, htmlAttributes: Object) -> TagBuilder: ...
    def GeneratePageLink(self, viewContext: ViewContext, linkText: str, pageName: str, pageHandler: str, protocol: str, hostname: str, fragment: str, routeValues: Object, htmlAttributes: Object) -> TagBuilder: ...
    def GeneratePassword(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, value: Object, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateRadioButton(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, value: Object, isChecked: Nullable, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateRouteForm(self, viewContext: ViewContext, routeName: str, routeValues: Object, method: str, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateRouteLink(self, viewContext: ViewContext, linkText: str, routeName: str, protocol: str, hostName: str, fragment: str, routeValues: Object, htmlAttributes: Object) -> TagBuilder: ...
    @overload
    def GenerateSelect(self, viewContext: ViewContext, modelExplorer: ModelExplorer, optionLabel: str, expression: str, selectList: Iterable[SelectListItem], allowMultiple: bool, htmlAttributes: Object) -> TagBuilder: ...
    @overload
    def GenerateSelect(self, viewContext: ViewContext, modelExplorer: ModelExplorer, optionLabel: str, expression: str, selectList: Iterable[SelectListItem], currentValues: ICollection, allowMultiple: bool, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateTextArea(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, rows: int, columns: int, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateTextBox(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, value: Object, format: str, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateValidationMessage(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, message: str, tag: str, htmlAttributes: Object) -> TagBuilder: ...
    def GenerateValidationSummary(self, viewContext: ViewContext, excludePropertyErrors: bool, message: str, headerTag: str, htmlAttributes: Object) -> TagBuilder: ...
    @property
    def IdAttributeDotReplacement(self) -> str: ...
    def GetCurrentValues(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, allowMultiple: bool) -> ICollection: ...


class IModelExpressionProvider:
    def CreateModelExpression(self, viewData: ViewDataDictionary, expression: Expression) -> ModelExpression: ...


class InputType:
    CheckBox = 0
    Hidden = 1
    Password = 2
    Radio = 3
    Text = 4


class ITempDataDictionary:
    @overload
    def Keep(self) -> None: ...
    @overload
    def Keep(self, key: str) -> None: ...
    def Load(self) -> None: ...
    def Peek(self, key: str) -> Object: ...
    def Save(self) -> None: ...


class ITempDataDictionaryFactory:
    def GetTempData(self, context: HttpContext) -> ITempDataDictionary: ...


class ITempDataProvider:
    def LoadTempData(self, context: HttpContext) -> IDictionary: ...
    def SaveTempData(self, context: HttpContext, values: IDictionary) -> None: ...


class IViewContextAware:
    def Contextualize(self, viewContext: ViewContext) -> None: ...


class ModelExplorer:
    @overload
    def __init__(self, metadataProvider: IModelMetadataProvider, metadata: ModelMetadata, model: Object): ...
    @overload
    def __init__(self, metadataProvider: IModelMetadataProvider, container: ModelExplorer, metadata: ModelMetadata, modelAccessor: Func): ...
    @overload
    def __init__(self, metadataProvider: IModelMetadataProvider, container: ModelExplorer, metadata: ModelMetadata, model: Object): ...
    @property
    def Container(self) -> ModelExplorer: ...
    @property
    def Metadata(self) -> ModelMetadata: ...
    @property
    def Model(self) -> Object: ...
    @property
    def ModelType(self) -> Type: ...
    @property
    def Properties(self) -> Iterable[ModelExplorer]: ...
    @overload
    def GetExplorerForExpression(self, metadata: ModelMetadata, modelAccessor: Func) -> ModelExplorer: ...
    @overload
    def GetExplorerForExpression(self, modelType: Type, model: Object) -> ModelExplorer: ...
    @overload
    def GetExplorerForExpression(self, metadata: ModelMetadata, model: Object) -> ModelExplorer: ...
    @overload
    def GetExplorerForExpression(self, modelType: Type, modelAccessor: Func) -> ModelExplorer: ...
    def GetExplorerForModel(self, model: Object) -> ModelExplorer: ...
    @overload
    def GetExplorerForProperty(self, name: str) -> ModelExplorer: ...
    @overload
    def GetExplorerForProperty(self, name: str, model: Object) -> ModelExplorer: ...
    @overload
    def GetExplorerForProperty(self, name: str, modelAccessor: Func) -> ModelExplorer: ...


class ModelExplorerExtensions:
    def GetSimpleDisplayText(modelExplorer: ModelExplorer) -> str: ...


class ModelExpression:
    def __init__(self, name: str, modelExplorer: ModelExplorer): ...
    @property
    def Metadata(self) -> ModelMetadata: ...
    @property
    def Model(self) -> Object: ...
    @property
    def ModelExplorer(self) -> ModelExplorer: ...
    @property
    def Name(self) -> str: ...


class ModelExpressionProvider:
    def __init__(self, modelMetadataProvider: IModelMetadataProvider): ...
    @overload
    def CreateModelExpression(self, viewData: ViewDataDictionary, expression: Expression) -> ModelExpression: ...
    @overload
    def CreateModelExpression(self, viewData: ViewDataDictionary, expression: str) -> ModelExpression: ...
    def GetExpressionText(self, expression: Expression) -> str: ...


class ModelMetadataProviderExtensions:
    def GetModelExplorerForType(provider: IModelMetadataProvider, modelType: Type, model: Object) -> ModelExplorer: ...


class PartialViewResultExecutor(ViewExecutor):
    def __init__(self, viewOptions: IOptions, writerFactory: IHttpResponseStreamWriterFactory, viewEngine: ICompositeViewEngine, tempDataFactory: ITempDataDictionaryFactory, diagnosticListener: DiagnosticListener, loggerFactory: ILoggerFactory, modelMetadataProvider: IModelMetadataProvider): ...
    @overload
    def ExecuteAsync(self, context: ActionContext, result: PartialViewResult) -> Task: ...
    @overload
    def ExecuteAsync(self, actionContext: ActionContext, view: IView, viewResult: PartialViewResult) -> Task: ...
    def FindView(self, actionContext: ActionContext, viewResult: PartialViewResult) -> ViewEngineResult: ...


class SaveTempDataAttribute:
    def __init__(self): ...
    def CreateInstance(self, serviceProvider: IServiceProvider) -> IFilterMetadata: ...
    @property
    def IsReusable(self) -> bool: ...
    @property
    def Order(self) -> int: ...
    @Order.setter
    def Order(self, value: int) -> None: ...


class SessionStateTempDataProvider:
    def __init__(self, tempDataSerializer: TempDataSerializer): ...
    def LoadTempData(self, context: HttpContext) -> IDictionary: ...
    def SaveTempData(self, context: HttpContext, values: IDictionary) -> None: ...


class StringHtmlContent:
    def __init__(self, input: str): ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class TempDataDictionary:
    def __init__(self, context: HttpContext, provider: ITempDataProvider): ...
    def Add(self, key: str, value: Object) -> None: ...
    def Clear(self) -> None: ...
    def ContainsKey(self, key: str) -> bool: ...
    def ContainsValue(self, value: Object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, key: str) -> Object: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Values(self) -> ICollection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def Keep(self) -> None: ...
    @overload
    def Keep(self, key: str) -> None: ...
    def Load(self) -> None: ...
    def Peek(self, key: str) -> Object: ...
    def Remove(self, key: str) -> bool: ...
    def Save(self) -> None: ...
    @Item.setter
    def Item(self, key: str, value: Object) -> None: ...
    def TryGetValue(self, key: str) -> Tuple[bool, Object]: ...


class TempDataDictionaryFactory:
    def __init__(self, provider: ITempDataProvider): ...
    def GetTempData(self, context: HttpContext) -> ITempDataDictionary: ...


class TemplateInfo:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, original: TemplateInfo): ...
    def AddVisited(self, value: Object) -> bool: ...
    @property
    def FormattedModelValue(self) -> Object: ...
    @property
    def HtmlFieldPrefix(self) -> str: ...
    @property
    def TemplateDepth(self) -> int: ...
    def GetFullHtmlFieldName(self, partialFieldName: str) -> str: ...
    @FormattedModelValue.setter
    def FormattedModelValue(self, value: Object) -> None: ...
    @HtmlFieldPrefix.setter
    def HtmlFieldPrefix(self, value: str) -> None: ...
    def Visited(self, modelExplorer: ModelExplorer) -> bool: ...


class TryGetValueDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, dictionary: Object, key: str, callback: AsyncCallback, object: Object) -> Tuple[IAsyncResult, Object]: ...
    def EndInvoke(self, result: IAsyncResult) -> Tuple[bool, Object]: ...
    def Invoke(self, dictionary: Object, key: str) -> Tuple[bool, Object]: ...


class TryGetValueProvider:
    def CreateInstance(targetType: Type) -> TryGetValueDelegate: ...


class ValidationHtmlAttributeProvider:
    def AddAndTrackValidationAttributes(self, viewContext: ViewContext, modelExplorer: ModelExplorer, expression: str, attributes: IDictionary) -> None: ...
    def AddValidationAttributes(self, viewContext: ViewContext, modelExplorer: ModelExplorer, attributes: IDictionary) -> None: ...


class ViewComponentResultExecutor:
    @overload
    def __init__(self, mvcHelperOptions: IOptions, loggerFactory: ILoggerFactory, htmlEncoder: HtmlEncoder, modelMetadataProvider: IModelMetadataProvider, tempDataDictionaryFactory: ITempDataDictionaryFactory): ...
    @overload
    def __init__(self, mvcHelperOptions: IOptions, loggerFactory: ILoggerFactory, htmlEncoder: HtmlEncoder, modelMetadataProvider: IModelMetadataProvider, tempDataDictionaryFactory: ITempDataDictionaryFactory, writerFactory: IHttpResponseStreamWriterFactory): ...
    def ExecuteAsync(self, context: ActionContext, result: ViewComponentResult) -> Task: ...


class ViewContextAttribute:
    def __init__(self): ...


class ViewDataDictionary:
    @overload
    def __init__(self, source: ViewDataDictionary): ...
    @overload
    def __init__(self, metadataProvider: IModelMetadataProvider, modelState: ModelStateDictionary): ...
    @overload
    def Add(self, item: KeyValuePair) -> None: ...
    @overload
    def Add(self, key: str, value: Object) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, item: KeyValuePair) -> bool: ...
    def ContainsKey(self, key: str) -> bool: ...
    def CopyTo(self, array: Set(KeyValuePair), arrayIndex: int) -> None: ...
    @overload
    def Eval(self, expression: str) -> Object: ...
    @overload
    def Eval(self, expression: str, format: str) -> str: ...
    def FormatValue(value: Object, format: str) -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, index: str) -> Object: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Model(self) -> Object: ...
    @property
    def ModelExplorer(self) -> ModelExplorer: ...
    @property
    def ModelMetadata(self) -> ModelMetadata: ...
    @property
    def ModelState(self) -> ModelStateDictionary: ...
    @property
    def TemplateInfo(self) -> TemplateInfo: ...
    @property
    def Values(self) -> ICollection: ...
    def GetViewDataInfo(self, expression: str) -> ViewDataInfo: ...
    @overload
    def Remove(self, key: str) -> bool: ...
    @overload
    def Remove(self, item: KeyValuePair) -> bool: ...
    @Item.setter
    def Item(self, index: str, value: Object) -> None: ...
    @Model.setter
    def Model(self, value: Object) -> None: ...
    @ModelExplorer.setter
    def ModelExplorer(self, value: ModelExplorer) -> None: ...
    def TryGetValue(self, key: str) -> Tuple[bool, Object]: ...




class ViewDataDictionaryAttribute:
    def __init__(self): ...


class ViewDataDictionaryControllerPropertyActivator:
    def __init__(self, modelMetadataProvider: IModelMetadataProvider): ...
    def Activate(self, actionContext: ControllerContext, controller: Object) -> None: ...
    def GetActivatorDelegate(self, actionDescriptor: ControllerActionDescriptor) -> Action: ...


class ViewDataEvaluator:
    @overload
    def Eval(viewData: ViewDataDictionary, expression: str) -> ViewDataInfo: ...
    @overload
    def Eval(indexableObject: Object, expression: str) -> ViewDataInfo: ...


class ViewDataInfo:
    @overload
    def __init__(self, container: Object, value: Object): ...
    @overload
    def __init__(self, container: Object, propertyInfo: PropertyInfo): ...
    @overload
    def __init__(self, container: Object, propertyInfo: PropertyInfo, valueAccessor: Func): ...
    @property
    def Container(self) -> Object: ...
    @property
    def PropertyInfo(self) -> PropertyInfo: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class ViewExecutor:
    def __init__(self, viewOptions: IOptions, writerFactory: IHttpResponseStreamWriterFactory, viewEngine: ICompositeViewEngine, tempDataFactory: ITempDataDictionaryFactory, diagnosticListener: DiagnosticListener, modelMetadataProvider: IModelMetadataProvider): ...
    def ExecuteAsync(self, actionContext: ActionContext, view: IView, viewData: ViewDataDictionary, tempData: ITempDataDictionary, contentType: str, statusCode: Nullable) -> Task: ...


class ViewResultExecutor(ViewExecutor):
    def __init__(self, viewOptions: IOptions, writerFactory: IHttpResponseStreamWriterFactory, viewEngine: ICompositeViewEngine, tempDataFactory: ITempDataDictionaryFactory, diagnosticListener: DiagnosticListener, loggerFactory: ILoggerFactory, modelMetadataProvider: IModelMetadataProvider): ...
    @overload
    def ExecuteAsync(self, context: ActionContext, result: ViewResult) -> Task: ...
    def FindView(self, actionContext: ActionContext, viewResult: ViewResult) -> ViewEngineResult: ...
