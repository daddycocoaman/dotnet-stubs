from typing import Tuple, Set, Iterable, List


class ClaimAction:
    def __init__(self, claimType: str, valueType: str): ...
    @property
    def ClaimType(self) -> str: ...
    @property
    def ValueType(self) -> str: ...
    def Run(self, userData: JsonElement, identity: ClaimsIdentity, issuer: str) -> None: ...


class ClaimActionCollection:
    def __init__(self): ...
    def Add(self, action: ClaimAction) -> None: ...
    def Clear(self) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, claimType: str) -> None: ...


class CustomJsonClaimAction(ClaimAction):
    def __init__(self, claimType: str, valueType: str, resolver: Func): ...
    @property
    def Resolver(self) -> Func: ...
    def Run(self, userData: JsonElement, identity: ClaimsIdentity, issuer: str) -> None: ...


class DeleteClaimAction(ClaimAction):
    def __init__(self, claimType: str): ...
    def Run(self, userData: JsonElement, identity: ClaimsIdentity, issuer: str) -> None: ...


class JsonKeyClaimAction(ClaimAction):
    def __init__(self, claimType: str, valueType: str, jsonKey: str): ...
    @property
    def JsonKey(self) -> str: ...
    def Run(self, userData: JsonElement, identity: ClaimsIdentity, issuer: str) -> None: ...


class JsonSubKeyClaimAction(JsonKeyClaimAction):
    def __init__(self, claimType: str, valueType: str, jsonKey: str, subKey: str): ...
    @property
    def SubKey(self) -> str: ...
    def Run(self, userData: JsonElement, identity: ClaimsIdentity, issuer: str) -> None: ...


class MapAllClaimsAction(ClaimAction):
    def __init__(self): ...
    def Run(self, userData: JsonElement, identity: ClaimsIdentity, issuer: str) -> None: ...
