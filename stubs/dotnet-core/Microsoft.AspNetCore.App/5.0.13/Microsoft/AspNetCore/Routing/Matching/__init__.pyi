from typing import Tuple, Set, Iterable, List


class CandidateSet:
    def __init__(self, endpoints: Set(Endpoint), values: Set(RouteValueDictionary), scores: Set(int)): ...
    def ExpandEndpoint(self, index: int, endpoints: IReadOnlyList, comparer: IComparer) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> CandidateState: ...
    def IsValidCandidate(self, index: int) -> bool: ...
    def ReplaceEndpoint(self, index: int, endpoint: Endpoint, values: RouteValueDictionary) -> None: ...
    def SetValidity(self, index: int, value: bool) -> None: ...


class CandidateState:
    @property
    def Endpoint(self) -> Endpoint: ...
    @property
    def Score(self) -> int: ...
    @property
    def Values(self) -> RouteValueDictionary: ...


class EndpointMetadataComparer:
    pass




class EndpointSelector:
    def SelectAsync(self, httpContext: HttpContext, candidates: CandidateSet) -> Task: ...


class HostMatcherPolicy(MatcherPolicy):
    def __init__(self): ...
    def ApplyAsync(self, httpContext: HttpContext, candidates: CandidateSet) -> Task: ...
    def BuildJumpTable(self, exitDestination: int, edges: IReadOnlyList) -> PolicyJumpTable: ...
    @property
    def Comparer(self) -> IComparer: ...
    @property
    def Order(self) -> int: ...
    def GetEdges(self, endpoints: IReadOnlyList) -> IReadOnlyList: ...


class HttpMethodMatcherPolicy(MatcherPolicy):
    def __init__(self): ...
    def ApplyAsync(self, httpContext: HttpContext, candidates: CandidateSet) -> Task: ...
    def BuildJumpTable(self, exitDestination: int, edges: IReadOnlyList) -> PolicyJumpTable: ...
    @property
    def Comparer(self) -> IComparer: ...
    @property
    def Order(self) -> int: ...
    def GetEdges(self, endpoints: IReadOnlyList) -> IReadOnlyList: ...


class IEndpointComparerPolicy:
    @property
    def Comparer(self) -> IComparer: ...


class IEndpointSelectorPolicy:
    def AppliesToEndpoints(self, endpoints: IReadOnlyList) -> bool: ...
    def ApplyAsync(self, httpContext: HttpContext, candidates: CandidateSet) -> Task: ...


class INodeBuilderPolicy:
    def AppliesToEndpoints(self, endpoints: IReadOnlyList) -> bool: ...
    def BuildJumpTable(self, exitDestination: int, edges: IReadOnlyList) -> PolicyJumpTable: ...
    def GetEdges(self, endpoints: IReadOnlyList) -> IReadOnlyList: ...


class PolicyJumpTable:
    def GetDestination(self, httpContext: HttpContext) -> int: ...


class PolicyJumpTableEdge:
    def __init__(self, state: Object, destination: int): ...
    @property
    def Destination(self) -> int: ...
    @property
    def State(self) -> Object: ...


class PolicyNodeEdge:
    def __init__(self, state: Object, endpoints: IReadOnlyList): ...
    @property
    def Endpoints(self) -> IReadOnlyList: ...
    @property
    def State(self) -> Object: ...
