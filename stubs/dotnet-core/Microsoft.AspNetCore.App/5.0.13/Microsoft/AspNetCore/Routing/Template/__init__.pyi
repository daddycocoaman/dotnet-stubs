from typing import Tuple, Set, Iterable, List


class InlineConstraint:
    @overload
    def __init__(self, constraint: str): ...
    @overload
    def __init__(self, other: RoutePatternParameterPolicyReference): ...
    @property
    def Constraint(self) -> str: ...


class RoutePrecedence:
    def ComputeInbound(template: RouteTemplate) -> Decimal: ...
    def ComputeOutbound(template: RouteTemplate) -> Decimal: ...


class RouteTemplate:
    @overload
    def __init__(self, other: RoutePattern): ...
    @overload
    def __init__(self, template: str, segments: List): ...
    @property
    def Parameters(self) -> List[TemplatePart]: ...
    @property
    def Segments(self) -> List[TemplateSegment]: ...
    @property
    def TemplateText(self) -> str: ...
    def GetParameter(self, name: str) -> TemplatePart: ...
    def GetSegment(self, index: int) -> TemplateSegment: ...
    def ToRoutePattern(self) -> RoutePattern: ...


class TemplateBinder:
    def BindValues(self, acceptedValues: RouteValueDictionary) -> str: ...
    def GetValues(self, ambientValues: RouteValueDictionary, values: RouteValueDictionary) -> TemplateValuesResult: ...
    def RoutePartsEqual(a: Object, b: Object) -> bool: ...
    def TryProcessConstraints(self, httpContext: HttpContext, combinedValues: RouteValueDictionary) -> Tuple[bool, str, IRouteConstraint]: ...


class TemplateBinderFactory:
    @overload
    def Create(self, pattern: RoutePattern) -> TemplateBinder: ...
    @overload
    def Create(self, template: RouteTemplate, defaults: RouteValueDictionary) -> TemplateBinder: ...


class TemplateMatcher:
    def __init__(self, template: RouteTemplate, defaults: RouteValueDictionary): ...
    @property
    def Defaults(self) -> RouteValueDictionary: ...
    @property
    def Template(self) -> RouteTemplate: ...
    def TryMatch(self, path: PathString, values: RouteValueDictionary) -> bool: ...


class TemplateParser:
    def Parse(routeTemplate: str) -> RouteTemplate: ...


class TemplatePart:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: RoutePatternPart): ...
    def CreateLiteral(text: str) -> TemplatePart: ...
    def CreateParameter(name: str, isCatchAll: bool, isOptional: bool, defaultValue: Object, inlineConstraints: Iterable[InlineConstraint]) -> TemplatePart: ...
    @property
    def DefaultValue(self) -> Object: ...
    @property
    def InlineConstraints(self) -> Iterable[InlineConstraint]: ...
    @property
    def IsCatchAll(self) -> bool: ...
    @property
    def IsLiteral(self) -> bool: ...
    @property
    def IsOptional(self) -> bool: ...
    @property
    def IsOptionalSeperator(self) -> bool: ...
    @property
    def IsParameter(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @IsOptionalSeperator.setter
    def IsOptionalSeperator(self, value: bool) -> None: ...
    def ToRoutePatternPart(self) -> RoutePatternPart: ...


class TemplateSegment:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: RoutePatternPathSegment): ...
    @property
    def IsSimple(self) -> bool: ...
    @property
    def Parts(self) -> List: ...
    def ToRoutePatternPathSegment(self) -> RoutePatternPathSegment: ...


class TemplateValuesResult:
    def __init__(self): ...
    @property
    def AcceptedValues(self) -> RouteValueDictionary: ...
    @property
    def CombinedValues(self) -> RouteValueDictionary: ...
    @AcceptedValues.setter
    def AcceptedValues(self, value: RouteValueDictionary) -> None: ...
    @CombinedValues.setter
    def CombinedValues(self, value: RouteValueDictionary) -> None: ...
