from typing import Tuple, Set, Iterable, List


class CertificateForwardingMiddleware:
    def __init__(self, next: RequestDelegate, loggerFactory: ILoggerFactory, options: IOptions): ...
    def Invoke(self, httpContext: HttpContext) -> Task: ...


class CertificateForwardingOptions:
    def __init__(self): ...
    @property
    def CertificateHeader(self) -> str: ...
    @CertificateHeader.setter
    def CertificateHeader(self, value: str) -> None: ...


class ForwardedHeaders:
    #None = 0
    XForwardedFor = 1
    XForwardedHost = 2
    XForwardedProto = 4
    All = 7


class ForwardedHeadersDefaults:
    @property
    def XForwardedForHeaderName() -> str: ...
    @property
    def XForwardedHostHeaderName() -> str: ...
    @property
    def XForwardedProtoHeaderName() -> str: ...
    @property
    def XOriginalForHeaderName() -> str: ...
    @property
    def XOriginalHostHeaderName() -> str: ...
    @property
    def XOriginalProtoHeaderName() -> str: ...


class ForwardedHeadersMiddleware:
    def __init__(self, next: RequestDelegate, loggerFactory: ILoggerFactory, options: IOptions): ...
    def ApplyForwarders(self, context: HttpContext) -> None: ...
    def Invoke(self, context: HttpContext) -> Task: ...


class HttpMethodOverrideMiddleware:
    def __init__(self, next: RequestDelegate, options: IOptions): ...
    def Invoke(self, context: HttpContext) -> Task: ...


class IPNetwork:
    def __init__(self, prefix: IPAddress, prefixLength: int): ...
    def Contains(self, address: IPAddress) -> bool: ...
    @property
    def Prefix(self) -> IPAddress: ...
    @property
    def PrefixLength(self) -> int: ...
