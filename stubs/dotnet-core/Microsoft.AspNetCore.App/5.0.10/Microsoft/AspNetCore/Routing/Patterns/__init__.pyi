from typing import Tuple, Set, Iterable, List


class RoutePattern:
    @property
    def Defaults(self) -> IReadOnlyDictionary: ...
    @property
    def InboundPrecedence(self) -> Decimal: ...
    @property
    def OutboundPrecedence(self) -> Decimal: ...
    @property
    def ParameterPolicies(self) -> IReadOnlyDictionary: ...
    @property
    def Parameters(self) -> IReadOnlyList: ...
    @property
    def PathSegments(self) -> IReadOnlyList: ...
    @property
    def RawText(self) -> str: ...
    @property
    def RequiredValues(self) -> IReadOnlyDictionary: ...
    def GetParameter(self, name: str) -> RoutePatternParameterPart: ...


class RoutePatternException:
    def __init__(self, pattern: str, message: str): ...
    @property
    def Pattern(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class RoutePatternFactory:
    @overload
    def Constraint(constraint: str) -> RoutePatternParameterPolicyReference: ...
    @overload
    def Constraint(constraint: IRouteConstraint) -> RoutePatternParameterPolicyReference: ...
    @overload
    def Constraint(constraint: Object) -> RoutePatternParameterPolicyReference: ...
    def LiteralPart(content: str) -> RoutePatternLiteralPart: ...
    @overload
    def ParameterPart(parameterName: str) -> RoutePatternParameterPart: ...
    @overload
    def ParameterPart(parameterName: str, default: Object) -> RoutePatternParameterPart: ...
    @overload
    def ParameterPart(parameterName: str, default: Object, parameterKind: RoutePatternParameterKind) -> RoutePatternParameterPart: ...
    @overload
    def ParameterPart(parameterName: str, default: Object, parameterKind: RoutePatternParameterKind, parameterPolicies: Set(RoutePatternParameterPolicyReference)) -> RoutePatternParameterPart: ...
    @overload
    def ParameterPart(parameterName: str, default: Object, parameterKind: RoutePatternParameterKind, parameterPolicies: Iterable[RoutePatternParameterPolicyReference]) -> RoutePatternParameterPart: ...
    @overload
    def ParameterPolicy(parameterPolicy: str) -> RoutePatternParameterPolicyReference: ...
    @overload
    def ParameterPolicy(parameterPolicy: IParameterPolicy) -> RoutePatternParameterPolicyReference: ...
    @overload
    def Parse(pattern: str) -> RoutePattern: ...
    @overload
    def Parse(pattern: str, defaults: Object, parameterPolicies: Object) -> RoutePattern: ...
    @overload
    def Parse(pattern: str, defaults: Object, parameterPolicies: Object, requiredValues: Object) -> RoutePattern: ...
    @overload
    def Pattern(segments: Set(RoutePatternPathSegment)) -> RoutePattern: ...
    @overload
    def Pattern(segments: Iterable[RoutePatternPathSegment]) -> RoutePattern: ...
    @overload
    def Pattern(rawText: str, segments: Set(RoutePatternPathSegment)) -> RoutePattern: ...
    @overload
    def Pattern(rawText: str, segments: Iterable[RoutePatternPathSegment]) -> RoutePattern: ...
    @overload
    def Pattern(defaults: Object, parameterPolicies: Object, segments: Set(RoutePatternPathSegment)) -> RoutePattern: ...
    @overload
    def Pattern(defaults: Object, parameterPolicies: Object, segments: Iterable[RoutePatternPathSegment]) -> RoutePattern: ...
    @overload
    def Pattern(rawText: str, defaults: Object, parameterPolicies: Object, segments: Set(RoutePatternPathSegment)) -> RoutePattern: ...
    @overload
    def Pattern(rawText: str, defaults: Object, parameterPolicies: Object, segments: Iterable[RoutePatternPathSegment]) -> RoutePattern: ...
    @overload
    def Segment(parts: Iterable[RoutePatternPart]) -> RoutePatternPathSegment: ...
    @overload
    def Segment(parts: Set(RoutePatternPart)) -> RoutePatternPathSegment: ...
    def SeparatorPart(content: str) -> RoutePatternSeparatorPart: ...


class RoutePatternLiteralPart(RoutePatternPart):
    @property
    def Content(self) -> str: ...


class RoutePatternParameterKind:
    Standard = 0
    Optional = 1
    CatchAll = 2


class RoutePatternParameterPart(RoutePatternPart):
    @property
    def Default(self) -> Object: ...
    @property
    def EncodeSlashes(self) -> bool: ...
    @property
    def IsCatchAll(self) -> bool: ...
    @property
    def IsOptional(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParameterKind(self) -> RoutePatternParameterKind: ...
    @property
    def ParameterPolicies(self) -> IReadOnlyList: ...


class RoutePatternParameterPolicyReference:
    @property
    def Content(self) -> str: ...
    @property
    def ParameterPolicy(self) -> IParameterPolicy: ...


class RoutePatternPart:
    @property
    def IsLiteral(self) -> bool: ...
    @property
    def IsParameter(self) -> bool: ...
    @property
    def IsSeparator(self) -> bool: ...
    @property
    def PartKind(self) -> RoutePatternPartKind: ...


class RoutePatternPartKind:
    Literal = 0
    Parameter = 1
    Separator = 2


class RoutePatternPathSegment:
    @property
    def IsSimple(self) -> bool: ...
    @property
    def Parts(self) -> IReadOnlyList: ...


class RoutePatternSeparatorPart(RoutePatternPart):
    @property
    def Content(self) -> str: ...


class RoutePatternTransformer:
    def SubstituteRequiredValues(self, original: RoutePattern, requiredValues: Object) -> RoutePattern: ...
