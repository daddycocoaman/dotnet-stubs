from typing import Tuple, Set, Iterable, List


class AlphaRouteConstraint(RegexRouteConstraint):
    def __init__(self): ...


class BoolRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class CompositeRouteConstraint:
    def __init__(self, constraints: Iterable[IRouteConstraint]): ...
    @property
    def Constraints(self) -> Iterable[IRouteConstraint]: ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class DateTimeRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class DecimalRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class DoubleRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class FileNameRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class FloatRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class GuidRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class HttpMethodRouteConstraint:
    def __init__(self, allowedMethods: Set(str)): ...
    @property
    def AllowedMethods(self) -> List[str]: ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class IntRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class LengthRouteConstraint:
    @overload
    def __init__(self, length: int): ...
    @overload
    def __init__(self, minLength: int, maxLength: int): ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def MinLength(self) -> int: ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class LongRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class MaxLengthRouteConstraint:
    def __init__(self, maxLength: int): ...
    @property
    def MaxLength(self) -> int: ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class MaxRouteConstraint:
    def __init__(self, max: Int64): ...
    @property
    def Max(self) -> Int64: ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class MinLengthRouteConstraint:
    def __init__(self, minLength: int): ...
    @property
    def MinLength(self) -> int: ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class MinRouteConstraint:
    def __init__(self, min: Int64): ...
    @property
    def Min(self) -> Int64: ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class NonFileNameRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class OptionalRouteConstraint:
    def __init__(self, innerConstraint: IRouteConstraint): ...
    @property
    def InnerConstraint(self) -> IRouteConstraint: ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class RangeRouteConstraint:
    def __init__(self, min: Int64, max: Int64): ...
    @property
    def Max(self) -> Int64: ...
    @property
    def Min(self) -> Int64: ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class RegexInlineRouteConstraint(RegexRouteConstraint):
    def __init__(self, regexPattern: str): ...


class RegexRouteConstraint:
    @overload
    def __init__(self, regex: Regex): ...
    @overload
    def __init__(self, regexPattern: str): ...
    @property
    def Constraint(self) -> Regex: ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class RequiredRouteConstraint:
    def __init__(self): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...


class StringRouteConstraint:
    def __init__(self, value: str): ...
    def Match(self, httpContext: HttpContext, route: IRouter, routeKey: str, values: RouteValueDictionary, routeDirection: RouteDirection) -> bool: ...
