__all__ = ['Claims']
from typing import Tuple, Set, Iterable, List


class OAuthChallengeProperties(AuthenticationProperties):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: IDictionary): ...
    @overload
    def __init__(self, items: IDictionary, parameters: IDictionary): ...
    @property
    def Scope(self) -> ICollection: ...
    @Scope.setter
    def Scope(self, value: ICollection) -> None: ...
    def SetScope(self, scopes: Set(str)) -> None: ...


class OAuthCodeExchangeContext:
    def __init__(self, properties: AuthenticationProperties, code: str, redirectUri: str): ...
    @property
    def Code(self) -> str: ...
    @property
    def Properties(self) -> AuthenticationProperties: ...
    @property
    def RedirectUri(self) -> str: ...


class OAuthConstants:
    pass


class OAuthCreatingTicketContext:
    def __init__(self, principal: ClaimsPrincipal, properties: AuthenticationProperties, context: HttpContext, scheme: AuthenticationScheme, options: OAuthOptions, backchannel: HttpClient, tokens: OAuthTokenResponse, user: JsonElement): ...
    @property
    def AccessToken(self) -> str: ...
    @property
    def Backchannel(self) -> HttpClient: ...
    @property
    def ExpiresIn(self) -> Nullable: ...
    @property
    def Identity(self) -> ClaimsIdentity: ...
    @property
    def RefreshToken(self) -> str: ...
    @property
    def TokenResponse(self) -> OAuthTokenResponse: ...
    @property
    def TokenType(self) -> str: ...
    @property
    def User(self) -> JsonElement: ...
    @overload
    def RunClaimActions(self) -> None: ...
    @overload
    def RunClaimActions(self, userData: JsonElement) -> None: ...


class OAuthDefaults:
    pass


class OAuthEvents(RemoteAuthenticationEvents):
    def __init__(self): ...
    def CreatingTicket(self, context: OAuthCreatingTicketContext) -> Task: ...
    @property
    def OnCreatingTicket(self) -> Func: ...
    @property
    def OnRedirectToAuthorizationEndpoint(self) -> Func: ...
    def RedirectToAuthorizationEndpoint(self, context: RedirectContext) -> Task: ...
    @OnCreatingTicket.setter
    def OnCreatingTicket(self, value: Func) -> None: ...
    @OnRedirectToAuthorizationEndpoint.setter
    def OnRedirectToAuthorizationEndpoint(self, value: Func) -> None: ...




class OAuthOptions(RemoteAuthenticationOptions):
    def __init__(self): ...
    @property
    def AuthorizationEndpoint(self) -> str: ...
    @property
    def ClaimActions(self) -> ClaimActionCollection: ...
    @property
    def ClientId(self) -> str: ...
    @property
    def ClientSecret(self) -> str: ...
    @property
    def Events(self) -> OAuthEvents: ...
    @property
    def Scope(self) -> ICollection: ...
    @property
    def StateDataFormat(self) -> ISecureDataFormat: ...
    @property
    def TokenEndpoint(self) -> str: ...
    @property
    def UsePkce(self) -> bool: ...
    @property
    def UserInformationEndpoint(self) -> str: ...
    @AuthorizationEndpoint.setter
    def AuthorizationEndpoint(self, value: str) -> None: ...
    @ClientId.setter
    def ClientId(self, value: str) -> None: ...
    @ClientSecret.setter
    def ClientSecret(self, value: str) -> None: ...
    @Events.setter
    def Events(self, value: OAuthEvents) -> None: ...
    @StateDataFormat.setter
    def StateDataFormat(self, value: ISecureDataFormat) -> None: ...
    @TokenEndpoint.setter
    def TokenEndpoint(self, value: str) -> None: ...
    @UsePkce.setter
    def UsePkce(self, value: bool) -> None: ...
    @UserInformationEndpoint.setter
    def UserInformationEndpoint(self, value: str) -> None: ...
    @overload
    def Validate(self) -> None: ...


class OAuthTokenResponse:
    def Dispose(self) -> None: ...
    def Failed(error: Exception) -> OAuthTokenResponse: ...
    @property
    def AccessToken(self) -> str: ...
    @property
    def Error(self) -> Exception: ...
    @property
    def ExpiresIn(self) -> str: ...
    @property
    def RefreshToken(self) -> str: ...
    @property
    def Response(self) -> JsonDocument: ...
    @property
    def TokenType(self) -> str: ...
    @AccessToken.setter
    def AccessToken(self, value: str) -> None: ...
    @Error.setter
    def Error(self, value: Exception) -> None: ...
    @ExpiresIn.setter
    def ExpiresIn(self, value: str) -> None: ...
    @RefreshToken.setter
    def RefreshToken(self, value: str) -> None: ...
    @Response.setter
    def Response(self, value: JsonDocument) -> None: ...
    @TokenType.setter
    def TokenType(self, value: str) -> None: ...
    def Success(response: JsonDocument) -> OAuthTokenResponse: ...
