__all__ = ['Authentication']
from typing import Tuple, Set, Iterable, List


class FeatureCollection:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, defaults: IFeatureCollection): ...
    def Get(self) -> TFeature: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, key: Type) -> Object: ...
    @property
    def Revision(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @Item.setter
    def Item(self, key: Type, value: Object) -> None: ...
    def Set(self, instance: TFeature) -> None: ...






class HttpsCompressionMode:
    Default = 0
    DoNotCompress = 1
    Compress = 2


class IFeatureCollection:
    def Get(self) -> TFeature: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, key: Type) -> Object: ...
    @property
    def Revision(self) -> int: ...
    @Item.setter
    def Item(self, key: Type, value: Object) -> None: ...
    def Set(self, instance: TFeature) -> None: ...


class IFormFeature:
    @property
    def Form(self) -> IFormCollection: ...
    @property
    def HasFormContentType(self) -> bool: ...
    def ReadForm(self) -> IFormCollection: ...
    def ReadFormAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @Form.setter
    def Form(self, value: IFormCollection) -> None: ...


class IHttpBodyControlFeature:
    @property
    def AllowSynchronousIO(self) -> bool: ...
    @AllowSynchronousIO.setter
    def AllowSynchronousIO(self, value: bool) -> None: ...


class IHttpConnectionFeature:
    @property
    def ConnectionId(self) -> str: ...
    @property
    def LocalIpAddress(self) -> IPAddress: ...
    @property
    def LocalPort(self) -> int: ...
    @property
    def RemoteIpAddress(self) -> IPAddress: ...
    @property
    def RemotePort(self) -> int: ...
    @ConnectionId.setter
    def ConnectionId(self, value: str) -> None: ...
    @LocalIpAddress.setter
    def LocalIpAddress(self, value: IPAddress) -> None: ...
    @LocalPort.setter
    def LocalPort(self, value: int) -> None: ...
    @RemoteIpAddress.setter
    def RemoteIpAddress(self, value: IPAddress) -> None: ...
    @RemotePort.setter
    def RemotePort(self, value: int) -> None: ...


class IHttpMaxRequestBodySizeFeature:
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def MaxRequestBodySize(self) -> Nullable: ...
    @MaxRequestBodySize.setter
    def MaxRequestBodySize(self, value: Nullable) -> None: ...


class IHttpRequestBodyDetectionFeature:
    @property
    def CanHaveBody(self) -> bool: ...


class IHttpRequestFeature:
    @property
    def Body(self) -> Stream: ...
    @property
    def Headers(self) -> IHeaderDictionary: ...
    @property
    def Method(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def PathBase(self) -> str: ...
    @property
    def Protocol(self) -> str: ...
    @property
    def QueryString(self) -> str: ...
    @property
    def RawTarget(self) -> str: ...
    @property
    def Scheme(self) -> str: ...
    @Body.setter
    def Body(self, value: Stream) -> None: ...
    @Headers.setter
    def Headers(self, value: IHeaderDictionary) -> None: ...
    @Method.setter
    def Method(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @PathBase.setter
    def PathBase(self, value: str) -> None: ...
    @Protocol.setter
    def Protocol(self, value: str) -> None: ...
    @QueryString.setter
    def QueryString(self, value: str) -> None: ...
    @RawTarget.setter
    def RawTarget(self, value: str) -> None: ...
    @Scheme.setter
    def Scheme(self, value: str) -> None: ...


class IHttpRequestIdentifierFeature:
    @property
    def TraceIdentifier(self) -> str: ...
    @TraceIdentifier.setter
    def TraceIdentifier(self, value: str) -> None: ...


class IHttpRequestLifetimeFeature:
    def Abort(self) -> None: ...
    @property
    def RequestAborted(self) -> CancellationToken: ...
    @RequestAborted.setter
    def RequestAborted(self, value: CancellationToken) -> None: ...


class IHttpRequestTrailersFeature:
    @property
    def Available(self) -> bool: ...
    @property
    def Trailers(self) -> IHeaderDictionary: ...


class IHttpResetFeature:
    def Reset(self, errorCode: int) -> None: ...


class IHttpResponseBodyFeature:
    def CompleteAsync(self) -> Task: ...
    def DisableBuffering(self) -> None: ...
    @property
    def Stream(self) -> Stream: ...
    @property
    def Writer(self) -> PipeWriter: ...
    def SendFileAsync(self, path: str, offset: Int64, count: Nullable, cancellationToken: CancellationToken) -> Task: ...
    def StartAsync(self, cancellationToken: CancellationToken) -> Task: ...


class IHttpResponseFeature:
    @property
    def Body(self) -> Stream: ...
    @property
    def HasStarted(self) -> bool: ...
    @property
    def Headers(self) -> IHeaderDictionary: ...
    @property
    def ReasonPhrase(self) -> str: ...
    @property
    def StatusCode(self) -> int: ...
    def OnCompleted(self, callback: Func, state: Object) -> None: ...
    def OnStarting(self, callback: Func, state: Object) -> None: ...
    @Body.setter
    def Body(self, value: Stream) -> None: ...
    @Headers.setter
    def Headers(self, value: IHeaderDictionary) -> None: ...
    @ReasonPhrase.setter
    def ReasonPhrase(self, value: str) -> None: ...
    @StatusCode.setter
    def StatusCode(self, value: int) -> None: ...


class IHttpResponseTrailersFeature:
    @property
    def Trailers(self) -> IHeaderDictionary: ...
    @Trailers.setter
    def Trailers(self, value: IHeaderDictionary) -> None: ...


class IHttpsCompressionFeature:
    @property
    def Mode(self) -> HttpsCompressionMode: ...
    @Mode.setter
    def Mode(self, value: HttpsCompressionMode) -> None: ...


class IHttpUpgradeFeature:
    @property
    def IsUpgradableRequest(self) -> bool: ...
    def UpgradeAsync(self) -> Task: ...


class IHttpWebSocketFeature:
    def AcceptAsync(self, context: WebSocketAcceptContext) -> Task: ...
    @property
    def IsWebSocketRequest(self) -> bool: ...


class IItemsFeature:
    @property
    def Items(self) -> IDictionary: ...
    @Items.setter
    def Items(self, value: IDictionary) -> None: ...


class IQueryFeature:
    @property
    def Query(self) -> IQueryCollection: ...
    @Query.setter
    def Query(self, value: IQueryCollection) -> None: ...


class IRequestBodyPipeFeature:
    @property
    def Reader(self) -> PipeReader: ...


class IRequestCookiesFeature:
    @property
    def Cookies(self) -> IRequestCookieCollection: ...
    @Cookies.setter
    def Cookies(self, value: IRequestCookieCollection) -> None: ...


class IResponseCookiesFeature:
    @property
    def Cookies(self) -> IResponseCookies: ...


class IServerVariablesFeature:
    @property
    def Item(self, variableName: str) -> str: ...
    @Item.setter
    def Item(self, variableName: str, value: str) -> None: ...


class IServiceProvidersFeature:
    @property
    def RequestServices(self) -> IServiceProvider: ...
    @RequestServices.setter
    def RequestServices(self, value: IServiceProvider) -> None: ...


class ISessionFeature:
    @property
    def Session(self) -> ISession: ...
    @Session.setter
    def Session(self, value: ISession) -> None: ...


class ITlsConnectionFeature:
    @property
    def ClientCertificate(self) -> X509Certificate2: ...
    def GetClientCertificateAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @ClientCertificate.setter
    def ClientCertificate(self, value: X509Certificate2) -> None: ...


class ITlsTokenBindingFeature:
    def GetProvidedTokenBindingId(self) -> Set(Byte): ...
    def GetReferredTokenBindingId(self) -> Set(Byte): ...


class ITrackingConsentFeature:
    def CreateConsentCookie(self) -> str: ...
    @property
    def CanTrack(self) -> bool: ...
    @property
    def HasConsent(self) -> bool: ...
    @property
    def IsConsentNeeded(self) -> bool: ...
    def GrantConsent(self) -> None: ...
    def WithdrawConsent(self) -> None: ...
