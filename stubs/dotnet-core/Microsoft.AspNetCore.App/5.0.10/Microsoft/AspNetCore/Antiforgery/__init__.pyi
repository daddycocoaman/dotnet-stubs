from typing import Tuple, Set, Iterable, List


class AntiforgeryOptions:
    def __init__(self): ...
    @property
    def Cookie(self) -> CookieBuilder: ...
    @property
    def FormFieldName(self) -> str: ...
    @property
    def HeaderName(self) -> str: ...
    @property
    def SuppressXFrameOptionsHeader(self) -> bool: ...
    @Cookie.setter
    def Cookie(self, value: CookieBuilder) -> None: ...
    @FormFieldName.setter
    def FormFieldName(self, value: str) -> None: ...
    @HeaderName.setter
    def HeaderName(self, value: str) -> None: ...
    @SuppressXFrameOptionsHeader.setter
    def SuppressXFrameOptionsHeader(self, value: bool) -> None: ...


class AntiforgeryTokenSet:
    def __init__(self, requestToken: str, cookieToken: str, formFieldName: str, headerName: str): ...
    @property
    def CookieToken(self) -> str: ...
    @property
    def FormFieldName(self) -> str: ...
    @property
    def HeaderName(self) -> str: ...
    @property
    def RequestToken(self) -> str: ...


class AntiforgeryValidationException:
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class IAntiforgery:
    def GetAndStoreTokens(self, httpContext: HttpContext) -> AntiforgeryTokenSet: ...
    def GetTokens(self, httpContext: HttpContext) -> AntiforgeryTokenSet: ...
    def IsRequestValidAsync(self, httpContext: HttpContext) -> Task: ...
    def SetCookieTokenAndHeader(self, httpContext: HttpContext) -> None: ...
    def ValidateRequestAsync(self, httpContext: HttpContext) -> Task: ...


class IAntiforgeryAdditionalDataProvider:
    def GetAdditionalData(self, context: HttpContext) -> str: ...
    def ValidateAdditionalData(self, context: HttpContext, additionalData: str) -> bool: ...
