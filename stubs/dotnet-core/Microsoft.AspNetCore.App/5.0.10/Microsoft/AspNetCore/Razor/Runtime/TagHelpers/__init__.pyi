from typing import Tuple, Set, Iterable, List


class TagHelperExecutionContext:
    def __init__(self, tagName: str, tagMode: TagMode, items: IDictionary, uniqueId: str, executeChildContentAsync: Func, startTagHelperWritingScope: Action, endTagHelperWritingScope: Func): ...
    def Add(self, tagHelper: ITagHelper) -> None: ...
    @overload
    def AddHtmlAttribute(self, attribute: TagHelperAttribute) -> None: ...
    @overload
    def AddHtmlAttribute(self, name: str, value: Object, valueStyle: HtmlAttributeValueStyle) -> None: ...
    @overload
    def AddTagHelperAttribute(self, attribute: TagHelperAttribute) -> None: ...
    @overload
    def AddTagHelperAttribute(self, name: str, value: Object, valueStyle: HtmlAttributeValueStyle) -> None: ...
    @property
    def ChildContentRetrieved(self) -> bool: ...
    @property
    def Context(self) -> TagHelperContext: ...
    @property
    def Items(self) -> IDictionary: ...
    @property
    def Output(self) -> TagHelperOutput: ...
    @property
    def TagHelpers(self) -> List[ITagHelper]: ...
    def Reinitialize(self, tagName: str, tagMode: TagMode, items: IDictionary, uniqueId: str, executeChildContentAsync: Func) -> None: ...
    def SetOutputContentAsync(self) -> Task: ...


class TagHelperRunner:
    def __init__(self): ...
    def RunAsync(self, executionContext: TagHelperExecutionContext) -> Task: ...


class TagHelperScopeManager:
    def __init__(self, startTagHelperWritingScope: Action, endTagHelperWritingScope: Func): ...
    def Begin(self, tagName: str, tagMode: TagMode, uniqueId: str, executeChildContentAsync: Func) -> TagHelperExecutionContext: ...
    def End(self) -> TagHelperExecutionContext: ...
