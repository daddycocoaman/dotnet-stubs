from typing import Tuple, Set, Iterable, List


class TagHelperOutput:
    def __init__(self, tagName: str, attributes: TagHelperAttributeList, getChildContentAsync: Func`3): ...
    @property
    def Attributes(self) -> TagHelperAttributeList: ...
    @property
    def Content(self) -> TagHelperContent: ...
    @property
    def IsContentModified(self) -> bool: ...
    @property
    def PostContent(self) -> TagHelperContent: ...
    @property
    def PostElement(self) -> TagHelperContent: ...
    @property
    def PreContent(self) -> TagHelperContent: ...
    @property
    def PreElement(self) -> TagHelperContent: ...
    @property
    def TagMode(self) -> TagMode: ...
    @property
    def TagName(self) -> str: ...
    @overload
    def GetChildContentAsync(self) -> Task: ...
    @overload
    def GetChildContentAsync(self, useCachedResult: bool) -> Task: ...
    @overload
    def GetChildContentAsync(self, encoder: HtmlEncoder) -> Task: ...
    @overload
    def GetChildContentAsync(self, useCachedResult: bool, encoder: HtmlEncoder) -> Task: ...
    def Reinitialize(self, tagName: str, tagMode: TagMode) -> None: ...
    @Content.setter
    def Content(self, value: TagHelperContent) -> None: ...
    @TagMode.setter
    def TagMode(self, value: TagMode) -> None: ...
    @TagName.setter
    def TagName(self, value: str) -> None: ...
    def SuppressOutput(self) -> None: ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...
