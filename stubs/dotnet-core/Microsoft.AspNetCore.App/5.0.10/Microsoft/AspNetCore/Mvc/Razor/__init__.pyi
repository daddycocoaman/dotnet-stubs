__all__ = ['Compilation','Infrastructure','Internal','TagHelpers']
from typing import Tuple, Set, Iterable, List


class HelperResult:
    def __init__(self, asyncAction: Func): ...
    @property
    def WriteAction(self) -> Func: ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class IRazorPage:
    def EnsureRenderedBodyOrSections(self) -> None: ...
    def ExecuteAsync(self) -> Task: ...
    @property
    def BodyContent(self) -> IHtmlContent: ...
    @property
    def IsLayoutBeingRendered(self) -> bool: ...
    @property
    def Layout(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def PreviousSectionWriters(self) -> IDictionary: ...
    @property
    def SectionWriters(self) -> IDictionary: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    @BodyContent.setter
    def BodyContent(self, value: IHtmlContent) -> None: ...
    @IsLayoutBeingRendered.setter
    def IsLayoutBeingRendered(self, value: bool) -> None: ...
    @Layout.setter
    def Layout(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @PreviousSectionWriters.setter
    def PreviousSectionWriters(self, value: IDictionary) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class IRazorPageActivator:
    def Activate(self, page: IRazorPage, context: ViewContext) -> None: ...


class IRazorPageFactoryProvider:
    def CreateFactory(self, relativePath: str) -> RazorPageFactoryResult: ...


class IRazorViewEngine:
    def FindPage(self, context: ActionContext, pageName: str) -> RazorPageResult: ...
    def GetAbsolutePath(self, executingFilePath: str, pagePath: str) -> str: ...
    def GetPage(self, executingFilePath: str, pagePath: str) -> RazorPageResult: ...


class ITagHelperActivator:
    def Create(self, context: ViewContext) -> TTagHelper: ...


class ITagHelperFactory:
    def CreateTagHelper(self, context: ViewContext) -> TTagHelper: ...




class IViewLocationExpander:
    def ExpandViewLocations(self, context: ViewLocationExpanderContext, viewLocations: Iterable[str]) -> Iterable[str]: ...
    def PopulateValues(self, context: ViewLocationExpanderContext) -> None: ...


class LanguageViewLocationExpander:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, format: LanguageViewLocationExpanderFormat): ...
    def ExpandViewLocations(self, context: ViewLocationExpanderContext, viewLocations: Iterable[str]) -> Iterable[str]: ...
    def PopulateValues(self, context: ViewLocationExpanderContext) -> None: ...


class LanguageViewLocationExpanderFormat:
    SubFolder = 0
    Suffix = 1


class RazorPage(RazorPageBase):
    def BeginContext(self, position: int, length: int, isLiteral: bool) -> None: ...
    def DefineSection(self, name: str, section: RenderAsyncDelegate) -> None: ...
    def EndContext(self) -> None: ...
    def EnsureRenderedBodyOrSections(self) -> None: ...
    @property
    def Context(self) -> HttpContext: ...
    def IgnoreBody(self) -> None: ...
    def IgnoreSection(self, sectionName: str) -> None: ...
    def IsSectionDefined(self, name: str) -> bool: ...
    @overload
    def RenderSection(self, name: str) -> HtmlString: ...
    @overload
    def RenderSection(self, name: str, required: bool) -> HtmlString: ...
    @overload
    def RenderSectionAsync(self, name: str) -> Task: ...
    @overload
    def RenderSectionAsync(self, name: str, required: bool) -> Task: ...




class RazorPageActivator:
    def __init__(self, metadataProvider: IModelMetadataProvider, urlHelperFactory: IUrlHelperFactory, jsonHelper: IJsonHelper, diagnosticSource: DiagnosticSource, htmlEncoder: HtmlEncoder, modelExpressionProvider: IModelExpressionProvider): ...
    def Activate(self, page: IRazorPage, context: ViewContext) -> None: ...


class RazorPageBase:
    def AddHtmlAttributeValue(self, prefix: str, prefixOffset: int, value: Object, valueOffset: int, valueLength: int, isLiteral: bool) -> None: ...
    def BeginAddHtmlAttributeValues(self, executionContext: TagHelperExecutionContext, attributeName: str, attributeValuesCount: int, attributeValueStyle: HtmlAttributeValueStyle) -> None: ...
    def BeginContext(self, position: int, length: int, isLiteral: bool) -> None: ...
    def BeginWriteAttribute(self, name: str, prefix: str, prefixOffset: int, suffix: str, suffixOffset: int, attributeValuesCount: int) -> None: ...
    def BeginWriteTagHelperAttribute(self) -> None: ...
    def CreateTagHelper(self) -> TTagHelper: ...
    def DefineSection(self, name: str, section: RenderAsyncDelegate) -> None: ...
    def EndAddHtmlAttributeValues(self, executionContext: TagHelperExecutionContext) -> None: ...
    def EndContext(self) -> None: ...
    def EndTagHelperWritingScope(self) -> TagHelperContent: ...
    def EndWriteAttribute(self) -> None: ...
    def EndWriteTagHelperAttribute(self) -> str: ...
    def EnsureRenderedBodyOrSections(self) -> None: ...
    def ExecuteAsync(self) -> Task: ...
    def FlushAsync(self) -> Task: ...
    @property
    def BodyContent(self) -> IHtmlContent: ...
    @property
    def DiagnosticSource(self) -> DiagnosticSource: ...
    @property
    def HtmlEncoder(self) -> HtmlEncoder: ...
    @property
    def IsLayoutBeingRendered(self) -> bool: ...
    @property
    def Layout(self) -> str: ...
    @property
    def Output(self) -> TextWriter: ...
    @property
    def Path(self) -> str: ...
    @property
    def PreviousSectionWriters(self) -> IDictionary: ...
    @property
    def SectionWriters(self) -> IDictionary: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def User(self) -> ClaimsPrincipal: ...
    @property
    def ViewBag(self) -> Object: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Href(self, contentPath: str) -> str: ...
    def InvalidTagHelperIndexerAssignment(self, attributeName: str, tagHelperTypeName: str, propertyName: str) -> str: ...
    @BodyContent.setter
    def BodyContent(self, value: IHtmlContent) -> None: ...
    @DiagnosticSource.setter
    def DiagnosticSource(self, value: DiagnosticSource) -> None: ...
    @HtmlEncoder.setter
    def HtmlEncoder(self, value: HtmlEncoder) -> None: ...
    @IsLayoutBeingRendered.setter
    def IsLayoutBeingRendered(self, value: bool) -> None: ...
    @Layout.setter
    def Layout(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @PreviousSectionWriters.setter
    def PreviousSectionWriters(self, value: IDictionary) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...
    def SetAntiforgeryCookieAndHeader(self) -> HtmlString: ...
    def StartTagHelperWritingScope(self, encoder: HtmlEncoder) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, value: Object) -> None: ...
    def WriteAttributeValue(self, prefix: str, prefixOffset: int, value: Object, valueOffset: int, valueLength: int, isLiteral: bool) -> None: ...
    @overload
    def WriteLiteral(self, value: str) -> None: ...
    @overload
    def WriteLiteral(self, value: Object) -> None: ...


class RazorPageFactoryResult:
    def __init__(self, viewDescriptor: CompiledViewDescriptor, razorPageFactory: Func): ...
    @property
    def RazorPageFactory(self) -> Func: ...
    @property
    def Success(self) -> bool: ...
    @property
    def ViewDescriptor(self) -> CompiledViewDescriptor: ...


class RazorPageResult:
    @overload
    def __init__(self, name: str, page: IRazorPage): ...
    @overload
    def __init__(self, name: str, searchedLocations: Iterable[str]): ...
    @property
    def Name(self) -> str: ...
    @property
    def Page(self) -> IRazorPage: ...
    @property
    def SearchedLocations(self) -> Iterable[str]: ...


class RazorView:
    def __init__(self, viewEngine: IRazorViewEngine, pageActivator: IRazorPageActivator, viewStartPages: IReadOnlyList, razorPage: IRazorPage, htmlEncoder: HtmlEncoder, diagnosticListener: DiagnosticListener): ...
    @property
    def Path(self) -> str: ...
    @property
    def RazorPage(self) -> IRazorPage: ...
    @property
    def ViewStartPages(self) -> IReadOnlyList: ...
    def RenderAsync(self, context: ViewContext) -> Task: ...


class RazorViewEngine:
    def __init__(self, pageFactory: IRazorPageFactoryProvider, pageActivator: IRazorPageActivator, htmlEncoder: HtmlEncoder, optionsAccessor: IOptions, loggerFactory: ILoggerFactory, diagnosticListener: DiagnosticListener): ...
    def FindPage(self, context: ActionContext, pageName: str) -> RazorPageResult: ...
    def FindView(self, context: ActionContext, viewName: str, isMainPage: bool) -> ViewEngineResult: ...
    def GetAbsolutePath(self, executingFilePath: str, pagePath: str) -> str: ...
    def GetNormalizedRouteValue(context: ActionContext, key: str) -> str: ...
    def GetPage(self, executingFilePath: str, pagePath: str) -> RazorPageResult: ...
    def GetView(self, executingFilePath: str, viewPath: str, isMainPage: bool) -> ViewEngineResult: ...


class RazorViewEngineOptions:
    def __init__(self): ...
    @property
    def AreaPageViewLocationFormats(self) -> List[str]: ...
    @property
    def AreaViewLocationFormats(self) -> List[str]: ...
    @property
    def PageViewLocationFormats(self) -> List[str]: ...
    @property
    def ViewLocationExpanders(self) -> List[IViewLocationExpander]: ...
    @property
    def ViewLocationFormats(self) -> List[str]: ...


class RenderAsyncDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Task: ...
    def Invoke(self) -> Task: ...




class ViewLocationExpanderContext:
    def __init__(self, actionContext: ActionContext, viewName: str, controllerName: str, areaName: str, pageName: str, isMainPage: bool): ...
    @property
    def ActionContext(self) -> ActionContext: ...
    @property
    def AreaName(self) -> str: ...
    @property
    def ControllerName(self) -> str: ...
    @property
    def IsMainPage(self) -> bool: ...
    @property
    def PageName(self) -> str: ...
    @property
    def Values(self) -> IDictionary: ...
    @property
    def ViewName(self) -> str: ...
    @Values.setter
    def Values(self, value: IDictionary) -> None: ...
