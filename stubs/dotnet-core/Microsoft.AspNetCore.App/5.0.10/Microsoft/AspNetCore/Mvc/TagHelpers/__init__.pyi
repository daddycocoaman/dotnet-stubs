__all__ = ['Cache']
from typing import Tuple, Set, Iterable, List


class AnchorTagHelper(TagHelper):
    def __init__(self, generator: IHtmlGenerator): ...
    @property
    def Action(self) -> str: ...
    @property
    def Area(self) -> str: ...
    @property
    def Controller(self) -> str: ...
    @property
    def Fragment(self) -> str: ...
    @property
    def Host(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def Page(self) -> str: ...
    @property
    def PageHandler(self) -> str: ...
    @property
    def Protocol(self) -> str: ...
    @property
    def Route(self) -> str: ...
    @property
    def RouteValues(self) -> IDictionary: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @Action.setter
    def Action(self, value: str) -> None: ...
    @Area.setter
    def Area(self, value: str) -> None: ...
    @Controller.setter
    def Controller(self, value: str) -> None: ...
    @Fragment.setter
    def Fragment(self, value: str) -> None: ...
    @Host.setter
    def Host(self, value: str) -> None: ...
    @Page.setter
    def Page(self, value: str) -> None: ...
    @PageHandler.setter
    def PageHandler(self, value: str) -> None: ...
    @Protocol.setter
    def Protocol(self, value: str) -> None: ...
    @Route.setter
    def Route(self, value: str) -> None: ...
    @RouteValues.setter
    def RouteValues(self, value: IDictionary) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class CacheTagHelper(CacheTagHelperBase):
    def __init__(self, factory: CacheTagHelperMemoryCacheFactory, htmlEncoder: HtmlEncoder): ...
    @property
    def Priority(self) -> Nullable: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...
    @Priority.setter
    def Priority(self, value: Nullable) -> None: ...


class CacheTagHelperBase(TagHelper):
    def __init__(self, htmlEncoder: HtmlEncoder): ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ExpiresAfter(self) -> Nullable: ...
    @property
    def ExpiresOn(self) -> Nullable: ...
    @property
    def ExpiresSliding(self) -> Nullable: ...
    @property
    def Order(self) -> int: ...
    @property
    def VaryBy(self) -> str: ...
    @property
    def VaryByCookie(self) -> str: ...
    @property
    def VaryByCulture(self) -> bool: ...
    @property
    def VaryByHeader(self) -> str: ...
    @property
    def VaryByQuery(self) -> str: ...
    @property
    def VaryByRoute(self) -> str: ...
    @property
    def VaryByUser(self) -> bool: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ExpiresAfter.setter
    def ExpiresAfter(self, value: Nullable) -> None: ...
    @ExpiresOn.setter
    def ExpiresOn(self, value: Nullable) -> None: ...
    @ExpiresSliding.setter
    def ExpiresSliding(self, value: Nullable) -> None: ...
    @VaryBy.setter
    def VaryBy(self, value: str) -> None: ...
    @VaryByCookie.setter
    def VaryByCookie(self, value: str) -> None: ...
    @VaryByCulture.setter
    def VaryByCulture(self, value: bool) -> None: ...
    @VaryByHeader.setter
    def VaryByHeader(self, value: str) -> None: ...
    @VaryByQuery.setter
    def VaryByQuery(self, value: str) -> None: ...
    @VaryByRoute.setter
    def VaryByRoute(self, value: str) -> None: ...
    @VaryByUser.setter
    def VaryByUser(self, value: bool) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class CacheTagHelperMemoryCacheFactory:
    def __init__(self, options: IOptions): ...
    @property
    def Cache(self) -> IMemoryCache: ...


class CacheTagHelperOptions:
    def __init__(self): ...
    @property
    def SizeLimit(self) -> Int64: ...
    @SizeLimit.setter
    def SizeLimit(self, value: Int64) -> None: ...


class ComponentTagHelper(TagHelper):
    def __init__(self): ...
    @property
    def ComponentType(self) -> Type: ...
    @property
    def Parameters(self) -> IDictionary: ...
    @property
    def RenderMode(self) -> RenderMode: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...
    @ComponentType.setter
    def ComponentType(self, value: Type) -> None: ...
    @Parameters.setter
    def Parameters(self, value: IDictionary) -> None: ...
    @RenderMode.setter
    def RenderMode(self, value: RenderMode) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class DistributedCacheTagHelper(CacheTagHelperBase):
    def __init__(self, distributedCacheService: IDistributedCacheTagHelperService, htmlEncoder: HtmlEncoder): ...
    @property
    def Name(self) -> str: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class EnvironmentTagHelper(TagHelper):
    def __init__(self, hostingEnvironment: IWebHostEnvironment): ...
    @property
    def Exclude(self) -> str: ...
    @property
    def Include(self) -> str: ...
    @property
    def Names(self) -> str: ...
    @property
    def Order(self) -> int: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @Exclude.setter
    def Exclude(self, value: str) -> None: ...
    @Include.setter
    def Include(self, value: str) -> None: ...
    @Names.setter
    def Names(self, value: str) -> None: ...


class FormActionTagHelper(TagHelper):
    def __init__(self, urlHelperFactory: IUrlHelperFactory): ...
    @property
    def Action(self) -> str: ...
    @property
    def Area(self) -> str: ...
    @property
    def Controller(self) -> str: ...
    @property
    def Fragment(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def Page(self) -> str: ...
    @property
    def PageHandler(self) -> str: ...
    @property
    def Route(self) -> str: ...
    @property
    def RouteValues(self) -> IDictionary: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @Action.setter
    def Action(self, value: str) -> None: ...
    @Area.setter
    def Area(self, value: str) -> None: ...
    @Controller.setter
    def Controller(self, value: str) -> None: ...
    @Fragment.setter
    def Fragment(self, value: str) -> None: ...
    @Page.setter
    def Page(self, value: str) -> None: ...
    @PageHandler.setter
    def PageHandler(self, value: str) -> None: ...
    @Route.setter
    def Route(self, value: str) -> None: ...
    @RouteValues.setter
    def RouteValues(self, value: IDictionary) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class FormTagHelper(TagHelper):
    def __init__(self, generator: IHtmlGenerator): ...
    @property
    def Action(self) -> str: ...
    @property
    def Antiforgery(self) -> Nullable: ...
    @property
    def Area(self) -> str: ...
    @property
    def Controller(self) -> str: ...
    @property
    def Fragment(self) -> str: ...
    @property
    def Method(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def Page(self) -> str: ...
    @property
    def PageHandler(self) -> str: ...
    @property
    def Route(self) -> str: ...
    @property
    def RouteValues(self) -> IDictionary: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @Action.setter
    def Action(self, value: str) -> None: ...
    @Antiforgery.setter
    def Antiforgery(self, value: Nullable) -> None: ...
    @Area.setter
    def Area(self, value: str) -> None: ...
    @Controller.setter
    def Controller(self, value: str) -> None: ...
    @Fragment.setter
    def Fragment(self, value: str) -> None: ...
    @Method.setter
    def Method(self, value: str) -> None: ...
    @Page.setter
    def Page(self, value: str) -> None: ...
    @PageHandler.setter
    def PageHandler(self, value: str) -> None: ...
    @Route.setter
    def Route(self, value: str) -> None: ...
    @RouteValues.setter
    def RouteValues(self, value: IDictionary) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class GlobbingUrlBuilder:
    def __init__(self, fileProvider: IFileProvider, cache: IMemoryCache, requestPathBase: PathString): ...
    def BuildUrlList(self, staticUrl: str, includePattern: str, excludePattern: str) -> IReadOnlyList: ...
    @property
    def Cache(self) -> IMemoryCache: ...
    @property
    def FileProvider(self) -> IFileProvider: ...
    @property
    def RequestPathBase(self) -> PathString: ...


class ImageTagHelper(UrlResolutionTagHelper):
    @overload
    def __init__(self, fileVersionProvider: IFileVersionProvider, htmlEncoder: HtmlEncoder, urlHelperFactory: IUrlHelperFactory): ...
    @overload
    def __init__(self, hostingEnvironment: IWebHostEnvironment, cacheProvider: TagHelperMemoryCacheProvider, fileVersionProvider: IFileVersionProvider, htmlEncoder: HtmlEncoder, urlHelperFactory: IUrlHelperFactory): ...
    @property
    def AppendVersion(self) -> bool: ...
    @property
    def Order(self) -> int: ...
    @property
    def Src(self) -> str: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @AppendVersion.setter
    def AppendVersion(self, value: bool) -> None: ...
    @Src.setter
    def Src(self, value: str) -> None: ...


class InputTagHelper(TagHelper):
    def __init__(self, generator: IHtmlGenerator): ...
    @property
    def For(self) -> ModelExpression: ...
    @property
    def Format(self) -> str: ...
    @property
    def InputTypeName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def Value(self) -> str: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @For.setter
    def For(self, value: ModelExpression) -> None: ...
    @Format.setter
    def Format(self, value: str) -> None: ...
    @InputTypeName.setter
    def InputTypeName(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class LabelTagHelper(TagHelper):
    def __init__(self, generator: IHtmlGenerator): ...
    @property
    def For(self) -> ModelExpression: ...
    @property
    def Order(self) -> int: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...
    @For.setter
    def For(self, value: ModelExpression) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class LinkTagHelper(UrlResolutionTagHelper):
    def __init__(self, hostingEnvironment: IWebHostEnvironment, cacheProvider: TagHelperMemoryCacheProvider, fileVersionProvider: IFileVersionProvider, htmlEncoder: HtmlEncoder, javaScriptEncoder: JavaScriptEncoder, urlHelperFactory: IUrlHelperFactory): ...
    @property
    def AppendVersion(self) -> Nullable: ...
    @property
    def FallbackHref(self) -> str: ...
    @property
    def FallbackHrefExclude(self) -> str: ...
    @property
    def FallbackHrefInclude(self) -> str: ...
    @property
    def FallbackTestClass(self) -> str: ...
    @property
    def FallbackTestProperty(self) -> str: ...
    @property
    def FallbackTestValue(self) -> str: ...
    @property
    def Href(self) -> str: ...
    @property
    def HrefExclude(self) -> str: ...
    @property
    def HrefInclude(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def SuppressFallbackIntegrity(self) -> bool: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @AppendVersion.setter
    def AppendVersion(self, value: Nullable) -> None: ...
    @FallbackHref.setter
    def FallbackHref(self, value: str) -> None: ...
    @FallbackHrefExclude.setter
    def FallbackHrefExclude(self, value: str) -> None: ...
    @FallbackHrefInclude.setter
    def FallbackHrefInclude(self, value: str) -> None: ...
    @FallbackTestClass.setter
    def FallbackTestClass(self, value: str) -> None: ...
    @FallbackTestProperty.setter
    def FallbackTestProperty(self, value: str) -> None: ...
    @FallbackTestValue.setter
    def FallbackTestValue(self, value: str) -> None: ...
    @Href.setter
    def Href(self, value: str) -> None: ...
    @HrefExclude.setter
    def HrefExclude(self, value: str) -> None: ...
    @HrefInclude.setter
    def HrefInclude(self, value: str) -> None: ...
    @SuppressFallbackIntegrity.setter
    def SuppressFallbackIntegrity(self, value: bool) -> None: ...


class OptionTagHelper(TagHelper):
    def __init__(self, generator: IHtmlGenerator): ...
    @property
    def Order(self) -> int: ...
    @property
    def Value(self) -> str: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class PartialTagHelper(TagHelper):
    def __init__(self, viewEngine: ICompositeViewEngine, viewBufferScope: IViewBufferScope): ...
    @property
    def FallbackName(self) -> str: ...
    @property
    def For(self) -> ModelExpression: ...
    @property
    def Model(self) -> Object: ...
    @property
    def Name(self) -> str: ...
    @property
    def Optional(self) -> bool: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...
    @FallbackName.setter
    def FallbackName(self, value: str) -> None: ...
    @For.setter
    def For(self, value: ModelExpression) -> None: ...
    @Model.setter
    def Model(self, value: Object) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Optional.setter
    def Optional(self, value: bool) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...
    @ViewData.setter
    def ViewData(self, value: ViewDataDictionary) -> None: ...


class RenderAtEndOfFormTagHelper(TagHelper):
    def __init__(self): ...
    @property
    def Order(self) -> int: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Init(self, context: TagHelperContext) -> None: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class ScriptTagHelper(UrlResolutionTagHelper):
    def __init__(self, hostingEnvironment: IWebHostEnvironment, cacheProvider: TagHelperMemoryCacheProvider, fileVersionProvider: IFileVersionProvider, htmlEncoder: HtmlEncoder, javaScriptEncoder: JavaScriptEncoder, urlHelperFactory: IUrlHelperFactory): ...
    @property
    def AppendVersion(self) -> Nullable: ...
    @property
    def FallbackSrc(self) -> str: ...
    @property
    def FallbackSrcExclude(self) -> str: ...
    @property
    def FallbackSrcInclude(self) -> str: ...
    @property
    def FallbackTestExpression(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def Src(self) -> str: ...
    @property
    def SrcExclude(self) -> str: ...
    @property
    def SrcInclude(self) -> str: ...
    @property
    def SuppressFallbackIntegrity(self) -> bool: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @AppendVersion.setter
    def AppendVersion(self, value: Nullable) -> None: ...
    @FallbackSrc.setter
    def FallbackSrc(self, value: str) -> None: ...
    @FallbackSrcExclude.setter
    def FallbackSrcExclude(self, value: str) -> None: ...
    @FallbackSrcInclude.setter
    def FallbackSrcInclude(self, value: str) -> None: ...
    @FallbackTestExpression.setter
    def FallbackTestExpression(self, value: str) -> None: ...
    @Src.setter
    def Src(self, value: str) -> None: ...
    @SrcExclude.setter
    def SrcExclude(self, value: str) -> None: ...
    @SrcInclude.setter
    def SrcInclude(self, value: str) -> None: ...
    @SuppressFallbackIntegrity.setter
    def SuppressFallbackIntegrity(self, value: bool) -> None: ...


class SelectTagHelper(TagHelper):
    def __init__(self, generator: IHtmlGenerator): ...
    @property
    def For(self) -> ModelExpression: ...
    @property
    def Items(self) -> Iterable[SelectListItem]: ...
    @property
    def Name(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Init(self, context: TagHelperContext) -> None: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @For.setter
    def For(self, value: ModelExpression) -> None: ...
    @Items.setter
    def Items(self, value: Iterable[SelectListItem]) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class TagHelperOutputExtensions:
    def AddClass(tagHelperOutput: TagHelperOutput, classValue: str, htmlEncoder: HtmlEncoder) -> None: ...
    def CopyHtmlAttribute(tagHelperOutput: TagHelperOutput, attributeName: str, context: TagHelperContext) -> None: ...
    def MergeAttributes(tagHelperOutput: TagHelperOutput, tagBuilder: TagBuilder) -> None: ...
    def RemoveClass(tagHelperOutput: TagHelperOutput, classValue: str, htmlEncoder: HtmlEncoder) -> None: ...
    def RemoveRange(tagHelperOutput: TagHelperOutput, attributes: Iterable[TagHelperAttribute]) -> None: ...


class TextAreaTagHelper(TagHelper):
    def __init__(self, generator: IHtmlGenerator): ...
    @property
    def For(self) -> ModelExpression: ...
    @property
    def Name(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @For.setter
    def For(self, value: ModelExpression) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class ValidationMessageTagHelper(TagHelper):
    def __init__(self, generator: IHtmlGenerator): ...
    @property
    def For(self) -> ModelExpression: ...
    @property
    def Order(self) -> int: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...
    @For.setter
    def For(self, value: ModelExpression) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class ValidationSummaryTagHelper(TagHelper):
    def __init__(self, generator: IHtmlGenerator): ...
    @property
    def Order(self) -> int: ...
    @property
    def ValidationSummary(self) -> ValidationSummary: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @ValidationSummary.setter
    def ValidationSummary(self, value: ValidationSummary) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...
