from typing import Tuple, Set, Iterable, List


class ActionContextAccessor:
    def __init__(self): ...
    @property
    def ActionContext(self) -> ActionContext: ...
    @ActionContext.setter
    def ActionContext(self, value: ActionContext) -> None: ...


class ActionDescriptorCollection:
    def __init__(self, items: IReadOnlyList, version: int): ...
    @property
    def Items(self) -> IReadOnlyList: ...
    @property
    def Version(self) -> int: ...


class ActionDescriptorCollectionProvider:
    @property
    def ActionDescriptors(self) -> ActionDescriptorCollection: ...
    def GetChangeToken(self) -> IChangeToken: ...


class ActionResultObjectValueAttribute:
    def __init__(self): ...


class ActionResultStatusCodeAttribute:
    def __init__(self): ...


class AmbiguousActionException:
    def __init__(self, message: str): ...






class ContentResultExecutor:
    def __init__(self, logger: ILogger, httpResponseStreamWriterFactory: IHttpResponseStreamWriterFactory): ...
    def ExecuteAsync(self, context: ActionContext, result: ContentResult) -> Task: ...


class DefaultOutputFormatterSelector(OutputFormatterSelector):
    def __init__(self, options: IOptions, loggerFactory: ILoggerFactory): ...
    def SelectFormatter(self, context: OutputFormatterCanWriteContext, formatters: List[IOutputFormatter], contentTypes: MediaTypeCollection) -> IOutputFormatter: ...


class DefaultStatusCodeAttribute:
    def __init__(self, statusCode: int): ...
    @property
    def StatusCode(self) -> int: ...


class FileContentResultExecutor(FileResultExecutorBase):
    def __init__(self, loggerFactory: ILoggerFactory): ...
    def ExecuteAsync(self, context: ActionContext, result: FileContentResult) -> Task: ...


class FileResultExecutorBase:
    def __init__(self, logger: ILogger): ...


class FileStreamResultExecutor(FileResultExecutorBase):
    def __init__(self, loggerFactory: ILoggerFactory): ...
    def ExecuteAsync(self, context: ActionContext, result: FileStreamResult) -> Task: ...


class IActionContextAccessor:
    @property
    def ActionContext(self) -> ActionContext: ...
    @ActionContext.setter
    def ActionContext(self, value: ActionContext) -> None: ...


class IActionDescriptorChangeProvider:
    def GetChangeToken(self) -> IChangeToken: ...


class IActionDescriptorCollectionProvider:
    @property
    def ActionDescriptors(self) -> ActionDescriptorCollection: ...


class IActionInvokerFactory:
    def CreateInvoker(self, actionContext: ActionContext) -> IActionInvoker: ...




class IActionResultTypeMapper:
    def Convert(self, value: Object, returnType: Type) -> IActionResult: ...
    def GetResultDataType(self, returnType: Type) -> Type: ...


class IActionSelector:
    def SelectBestCandidate(self, context: RouteContext, candidates: IReadOnlyList) -> ActionDescriptor: ...
    def SelectCandidates(self, context: RouteContext) -> IReadOnlyList: ...


class IApiBehaviorMetadata:
    pass


class IClientErrorActionResult:
    pass


class IClientErrorFactory:
    def GetClientError(self, actionContext: ActionContext, clientError: IClientErrorActionResult) -> IActionResult: ...


class ICompatibilitySwitch:
    @property
    def IsValueSet(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class IConvertToActionResult:
    def Convert(self) -> IActionResult: ...


class IHttpRequestStreamReaderFactory:
    def CreateReader(self, stream: Stream, encoding: Encoding) -> TextReader: ...


class IHttpResponseStreamWriterFactory:
    def CreateWriter(self, stream: Stream, encoding: Encoding) -> TextWriter: ...


class IParameterInfoParameterDescriptor:
    @property
    def ParameterInfo(self) -> ParameterInfo: ...


class IPropertyInfoParameterDescriptor:
    @property
    def PropertyInfo(self) -> PropertyInfo: ...


class IStatusCodeActionResult:
    @property
    def StatusCode(self) -> Nullable: ...


class LocalRedirectResultExecutor:
    def __init__(self, loggerFactory: ILoggerFactory, urlHelperFactory: IUrlHelperFactory): ...
    def ExecuteAsync(self, context: ActionContext, result: LocalRedirectResult) -> Task: ...


class ModelStateInvalidFilter:
    def __init__(self, apiBehaviorOptions: ApiBehaviorOptions, logger: ILogger): ...
    @property
    def IsReusable(self) -> bool: ...
    @property
    def Order(self) -> int: ...
    def OnActionExecuted(self, context: ActionExecutedContext) -> None: ...
    def OnActionExecuting(self, context: ActionExecutingContext) -> None: ...


class MvcCompatibilityOptions:
    def __init__(self): ...
    @property
    def CompatibilityVersion(self) -> CompatibilityVersion: ...
    @CompatibilityVersion.setter
    def CompatibilityVersion(self, value: CompatibilityVersion) -> None: ...


class ObjectResultExecutor:
    @overload
    def __init__(self, formatterSelector: OutputFormatterSelector, writerFactory: IHttpResponseStreamWriterFactory, loggerFactory: ILoggerFactory): ...
    @overload
    def __init__(self, formatterSelector: OutputFormatterSelector, writerFactory: IHttpResponseStreamWriterFactory, loggerFactory: ILoggerFactory, mvcOptions: IOptions): ...
    def ExecuteAsync(self, context: ActionContext, result: ObjectResult) -> Task: ...


class OutputFormatterSelector:
    def SelectFormatter(self, context: OutputFormatterCanWriteContext, formatters: List[IOutputFormatter], mediaTypes: MediaTypeCollection) -> IOutputFormatter: ...


class PhysicalFileResultExecutor(FileResultExecutorBase):
    def __init__(self, loggerFactory: ILoggerFactory): ...
    def ExecuteAsync(self, context: ActionContext, result: PhysicalFileResult) -> Task: ...


class ProblemDetailsFactory:
    def CreateProblemDetails(self, httpContext: HttpContext, statusCode: Nullable, title: str, type: str, detail: str, instance: str) -> ProblemDetails: ...
    def CreateValidationProblemDetails(self, httpContext: HttpContext, modelStateDictionary: ModelStateDictionary, statusCode: Nullable, title: str, type: str, detail: str, instance: str) -> ValidationProblemDetails: ...


class RedirectResultExecutor:
    def __init__(self, loggerFactory: ILoggerFactory, urlHelperFactory: IUrlHelperFactory): ...
    def ExecuteAsync(self, context: ActionContext, result: RedirectResult) -> Task: ...


class RedirectToActionResultExecutor:
    def __init__(self, loggerFactory: ILoggerFactory, urlHelperFactory: IUrlHelperFactory): ...
    def ExecuteAsync(self, context: ActionContext, result: RedirectToActionResult) -> Task: ...


class RedirectToPageResultExecutor:
    def __init__(self, loggerFactory: ILoggerFactory, urlHelperFactory: IUrlHelperFactory): ...
    def ExecuteAsync(self, context: ActionContext, result: RedirectToPageResult) -> Task: ...


class RedirectToRouteResultExecutor:
    def __init__(self, loggerFactory: ILoggerFactory, urlHelperFactory: IUrlHelperFactory): ...
    def ExecuteAsync(self, context: ActionContext, result: RedirectToRouteResult) -> Task: ...


class VirtualFileResultExecutor(FileResultExecutorBase):
    def __init__(self, loggerFactory: ILoggerFactory, hostingEnvironment: IWebHostEnvironment): ...
    def ExecuteAsync(self, context: ActionContext, result: VirtualFileResult) -> Task: ...
