from typing import Tuple, Set, Iterable, List






class EnumerableWrapperProvider:
    def __init__(self, sourceEnumerableOfT: Type, elementWrapperProvider: IWrapperProvider): ...
    @property
    def WrappingType(self) -> Type: ...
    def Wrap(self, original: Object) -> Object: ...


class EnumerableWrapperProviderFactory:
    def __init__(self, wrapperProviderFactories: Iterable[IWrapperProviderFactory]): ...
    def GetProvider(self, context: WrapperProviderContext) -> IWrapperProvider: ...


class IUnwrappable:
    def Unwrap(self, declaredType: Type) -> Object: ...


class IWrapperProvider:
    @property
    def WrappingType(self) -> Type: ...
    def Wrap(self, original: Object) -> Object: ...


class IWrapperProviderFactory:
    def GetProvider(self, context: WrapperProviderContext) -> IWrapperProvider: ...


class MvcXmlOptions:
    def __init__(self): ...


class ProblemDetailsWrapper:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, problemDetails: ProblemDetails): ...
    def GetSchema(self) -> XmlSchema: ...
    def ReadXml(self, reader: XmlReader) -> None: ...
    def WriteXml(self, writer: XmlWriter) -> None: ...


class SerializableErrorWrapper:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, error: SerializableError): ...
    @property
    def SerializableError(self) -> SerializableError: ...
    def GetSchema(self) -> XmlSchema: ...
    def ReadXml(self, reader: XmlReader) -> None: ...
    def Unwrap(self, declaredType: Type) -> Object: ...
    def WriteXml(self, writer: XmlWriter) -> None: ...


class SerializableErrorWrapperProvider:
    def __init__(self): ...
    @property
    def WrappingType(self) -> Type: ...
    def Wrap(self, original: Object) -> Object: ...


class SerializableErrorWrapperProviderFactory:
    def __init__(self): ...
    def GetProvider(self, context: WrapperProviderContext) -> IWrapperProvider: ...


class ValidationProblemDetailsWrapper(ProblemDetailsWrapper):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, problemDetails: ValidationProblemDetails): ...
    def WriteXml(self, writer: XmlWriter) -> None: ...


class WrapperProviderContext:
    def __init__(self, declaredType: Type, isSerialization: bool): ...
    @property
    def DeclaredType(self) -> Type: ...
    @property
    def IsSerialization(self) -> bool: ...


class WrapperProviderFactoriesExtensions:
    def GetWrapperProvider(wrapperProviderFactories: Iterable[IWrapperProviderFactory], wrapperProviderContext: WrapperProviderContext) -> IWrapperProvider: ...
