__all__ = ['Infrastructure']
from typing import Tuple, Set, Iterable, List


class DefaultFilesMiddleware:
    def __init__(self, next: RequestDelegate, hostingEnv: IWebHostEnvironment, options: IOptions): ...
    def Invoke(self, context: HttpContext) -> Task: ...


class DirectoryBrowserMiddleware:
    @overload
    def __init__(self, next: RequestDelegate, hostingEnv: IWebHostEnvironment, options: IOptions): ...
    @overload
    def __init__(self, next: RequestDelegate, hostingEnv: IWebHostEnvironment, encoder: HtmlEncoder, options: IOptions): ...
    def Invoke(self, context: HttpContext) -> Task: ...


class FileExtensionContentTypeProvider:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, mapping: IDictionary): ...
    @property
    def Mappings(self) -> IDictionary: ...
    def TryGetContentType(self, subpath: str) -> Tuple[bool, str]: ...


class HtmlDirectoryFormatter:
    def __init__(self, encoder: HtmlEncoder): ...
    def GenerateContentAsync(self, context: HttpContext, contents: Iterable[IFileInfo]) -> Task: ...


class IContentTypeProvider:
    def TryGetContentType(self, subpath: str) -> Tuple[bool, str]: ...


class IDirectoryFormatter:
    def GenerateContentAsync(self, context: HttpContext, contents: Iterable[IFileInfo]) -> Task: ...


class StaticFileMiddleware:
    def __init__(self, next: RequestDelegate, hostingEnv: IWebHostEnvironment, options: IOptions, loggerFactory: ILoggerFactory): ...
    def Invoke(self, context: HttpContext) -> Task: ...


class StaticFileResponseContext:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, context: HttpContext, file: IFileInfo): ...
    @property
    def Context(self) -> HttpContext: ...
    @property
    def File(self) -> IFileInfo: ...
