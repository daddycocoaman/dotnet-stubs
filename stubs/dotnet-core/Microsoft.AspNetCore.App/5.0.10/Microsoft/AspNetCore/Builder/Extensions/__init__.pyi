from typing import Tuple, Set, Iterable, List


class MapMiddleware:
    def __init__(self, next: RequestDelegate, options: MapOptions): ...
    def Invoke(self, context: HttpContext) -> Task: ...


class MapOptions:
    def __init__(self): ...
    @property
    def Branch(self) -> RequestDelegate: ...
    @property
    def PathMatch(self) -> PathString: ...
    @property
    def PreserveMatchedPathSegment(self) -> bool: ...
    @Branch.setter
    def Branch(self, value: RequestDelegate) -> None: ...
    @PathMatch.setter
    def PathMatch(self, value: PathString) -> None: ...
    @PreserveMatchedPathSegment.setter
    def PreserveMatchedPathSegment(self, value: bool) -> None: ...


class MapWhenMiddleware:
    def __init__(self, next: RequestDelegate, options: MapWhenOptions): ...
    def Invoke(self, context: HttpContext) -> Task: ...


class MapWhenOptions:
    def __init__(self): ...
    @property
    def Branch(self) -> RequestDelegate: ...
    @property
    def Predicate(self) -> Func: ...
    @Branch.setter
    def Branch(self, value: RequestDelegate) -> None: ...
    @Predicate.setter
    def Predicate(self, value: Func) -> None: ...


class UsePathBaseMiddleware:
    def __init__(self, next: RequestDelegate, pathBase: PathString): ...
    def Invoke(self, context: HttpContext) -> Task: ...
