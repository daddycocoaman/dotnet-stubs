from typing import Tuple, Set, Iterable, List


class ApacheModRewriteOptionsExtensions:
    @overload
    def AddApacheModRewrite(options: RewriteOptions, reader: TextReader) -> RewriteOptions: ...
    @overload
    def AddApacheModRewrite(options: RewriteOptions, fileProvider: IFileProvider, filePath: str) -> RewriteOptions: ...


class IISUrlRewriteOptionsExtensions:
    @overload
    def AddIISUrlRewrite(options: RewriteOptions, reader: TextReader, alwaysUseManagedServerVariables: bool) -> RewriteOptions: ...
    @overload
    def AddIISUrlRewrite(options: RewriteOptions, fileProvider: IFileProvider, filePath: str, alwaysUseManagedServerVariables: bool) -> RewriteOptions: ...


class IRule:
    def ApplyRule(self, context: RewriteContext) -> None: ...


class RewriteContext:
    def __init__(self): ...
    @property
    def HttpContext(self) -> HttpContext: ...
    @property
    def Logger(self) -> ILogger: ...
    @property
    def Result(self) -> RuleResult: ...
    @property
    def StaticFileProvider(self) -> IFileProvider: ...
    @HttpContext.setter
    def HttpContext(self, value: HttpContext) -> None: ...
    @Logger.setter
    def Logger(self, value: ILogger) -> None: ...
    @Result.setter
    def Result(self, value: RuleResult) -> None: ...
    @StaticFileProvider.setter
    def StaticFileProvider(self, value: IFileProvider) -> None: ...


class RewriteMiddleware:
    def __init__(self, next: RequestDelegate, hostingEnvironment: IWebHostEnvironment, loggerFactory: ILoggerFactory, options: IOptions): ...
    def Invoke(self, context: HttpContext) -> Task: ...


class RewriteOptions:
    def __init__(self): ...
    @property
    def Rules(self) -> List[IRule]: ...
    @property
    def StaticFileProvider(self) -> IFileProvider: ...
    @StaticFileProvider.setter
    def StaticFileProvider(self, value: IFileProvider) -> None: ...


class RewriteOptionsExtensions:
    @overload
    def Add(options: RewriteOptions, rule: IRule) -> RewriteOptions: ...
    @overload
    def Add(options: RewriteOptions, applyRule: Action) -> RewriteOptions: ...
    @overload
    def AddRedirect(options: RewriteOptions, regex: str, replacement: str) -> RewriteOptions: ...
    @overload
    def AddRedirect(options: RewriteOptions, regex: str, replacement: str, statusCode: int) -> RewriteOptions: ...
    @overload
    def AddRedirectToHttps(options: RewriteOptions) -> RewriteOptions: ...
    @overload
    def AddRedirectToHttps(options: RewriteOptions, statusCode: int) -> RewriteOptions: ...
    @overload
    def AddRedirectToHttps(options: RewriteOptions, statusCode: int, sslPort: Nullable) -> RewriteOptions: ...
    def AddRedirectToHttpsPermanent(options: RewriteOptions) -> RewriteOptions: ...
    @overload
    def AddRedirectToNonWww(options: RewriteOptions) -> RewriteOptions: ...
    @overload
    def AddRedirectToNonWww(options: RewriteOptions, statusCode: int) -> RewriteOptions: ...
    @overload
    def AddRedirectToNonWww(options: RewriteOptions, domains: Set(str)) -> RewriteOptions: ...
    @overload
    def AddRedirectToNonWww(options: RewriteOptions, statusCode: int, domains: Set(str)) -> RewriteOptions: ...
    @overload
    def AddRedirectToNonWwwPermanent(options: RewriteOptions) -> RewriteOptions: ...
    @overload
    def AddRedirectToNonWwwPermanent(options: RewriteOptions, domains: Set(str)) -> RewriteOptions: ...
    @overload
    def AddRedirectToWww(options: RewriteOptions) -> RewriteOptions: ...
    @overload
    def AddRedirectToWww(options: RewriteOptions, domains: Set(str)) -> RewriteOptions: ...
    @overload
    def AddRedirectToWww(options: RewriteOptions, statusCode: int) -> RewriteOptions: ...
    @overload
    def AddRedirectToWww(options: RewriteOptions, statusCode: int, domains: Set(str)) -> RewriteOptions: ...
    @overload
    def AddRedirectToWwwPermanent(options: RewriteOptions) -> RewriteOptions: ...
    @overload
    def AddRedirectToWwwPermanent(options: RewriteOptions, domains: Set(str)) -> RewriteOptions: ...
    def AddRewrite(options: RewriteOptions, regex: str, replacement: str, skipRemainingRules: bool) -> RewriteOptions: ...


class RuleResult:
    ContinueRules = 0
    EndResponse = 1
    SkipRemainingRules = 2
