from typing import Tuple, Set, Iterable, List


class DistributedSession:
    def __init__(self, cache: IDistributedCache, sessionKey: str, idleTimeout: TimeSpan, ioTimeout: TimeSpan, tryEstablishSession: Func, loggerFactory: ILoggerFactory, isNewSessionKey: bool): ...
    def Clear(self) -> None: ...
    def CommitAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @property
    def Id(self) -> str: ...
    @property
    def IsAvailable(self) -> bool: ...
    @property
    def Keys(self) -> Iterable[str]: ...
    def LoadAsync(self, cancellationToken: CancellationToken) -> Task: ...
    def Remove(self, key: str) -> None: ...
    def Set(self, key: str, value: Set(Byte)) -> None: ...
    def TryGetValue(self, key: str) -> Tuple[bool, Set(Byte)]: ...


class DistributedSessionStore:
    def __init__(self, cache: IDistributedCache, loggerFactory: ILoggerFactory): ...
    def Create(self, sessionKey: str, idleTimeout: TimeSpan, ioTimeout: TimeSpan, tryEstablishSession: Func, isNewSessionKey: bool) -> ISession: ...


class ISessionStore:
    def Create(self, sessionKey: str, idleTimeout: TimeSpan, ioTimeout: TimeSpan, tryEstablishSession: Func, isNewSessionKey: bool) -> ISession: ...


class SessionDefaults:
    pass


class SessionFeature:
    def __init__(self): ...
    @property
    def Session(self) -> ISession: ...
    @Session.setter
    def Session(self, value: ISession) -> None: ...


class SessionMiddleware:
    def __init__(self, next: RequestDelegate, loggerFactory: ILoggerFactory, dataProtectionProvider: IDataProtectionProvider, sessionStore: ISessionStore, options: IOptions): ...
    def Invoke(self, context: HttpContext) -> Task: ...
