from typing import Tuple, Set, Iterable, List


class HtmlTestEncoder:
    def __init__(self): ...
    @overload
    def Encode(self, value: str) -> str: ...
    @overload
    def Encode(self, output: TextWriter, value: Set(Char), startIndex: int, characterCount: int) -> None: ...
    @overload
    def Encode(self, output: TextWriter, value: str, startIndex: int, characterCount: int) -> None: ...
    def FindFirstCharacterToEncode(self, text: Char, textLength: int) -> int: ...
    @property
    def MaxOutputCharactersPerInputCharacter(self) -> int: ...
    def TryEncodeUnicodeScalar(self, unicodeScalar: int, buffer: Char, bufferLength: int) -> Tuple[bool, int]: ...
    def WillEncode(self, unicodeScalar: int) -> bool: ...


class JavaScriptTestEncoder:
    def __init__(self): ...
    @overload
    def Encode(self, value: str) -> str: ...
    @overload
    def Encode(self, output: TextWriter, value: Set(Char), startIndex: int, characterCount: int) -> None: ...
    @overload
    def Encode(self, output: TextWriter, value: str, startIndex: int, characterCount: int) -> None: ...
    def FindFirstCharacterToEncode(self, text: Char, textLength: int) -> int: ...
    @property
    def MaxOutputCharactersPerInputCharacter(self) -> int: ...
    def TryEncodeUnicodeScalar(self, unicodeScalar: int, buffer: Char, bufferLength: int) -> Tuple[bool, int]: ...
    def WillEncode(self, unicodeScalar: int) -> bool: ...


class UrlTestEncoder:
    def __init__(self): ...
    @overload
    def Encode(self, value: str) -> str: ...
    @overload
    def Encode(self, output: TextWriter, value: Set(Char), startIndex: int, characterCount: int) -> None: ...
    @overload
    def Encode(self, output: TextWriter, value: str, startIndex: int, characterCount: int) -> None: ...
    def FindFirstCharacterToEncode(self, text: Char, textLength: int) -> int: ...
    @property
    def MaxOutputCharactersPerInputCharacter(self) -> int: ...
    def TryEncodeUnicodeScalar(self, unicodeScalar: int, buffer: Char, bufferLength: int) -> Tuple[bool, int]: ...
    def WillEncode(self, unicodeScalar: int) -> bool: ...
