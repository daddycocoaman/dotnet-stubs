from typing import Tuple, Set, Iterable, List


class MemoryCache:
    @overload
    def __init__(self, optionsAccessor: IOptions): ...
    @overload
    def __init__(self, optionsAccessor: IOptions, loggerFactory: ILoggerFactory): ...
    def Compact(self, percentage: float) -> None: ...
    def CreateEntry(self, key: Object) -> ICacheEntry: ...
    def Dispose(self) -> None: ...
    @property
    def Count(self) -> int: ...
    def Remove(self, key: Object) -> None: ...
    def TryGetValue(self, key: Object) -> Tuple[bool, Object]: ...


class MemoryCacheOptions:
    def __init__(self): ...
    @property
    def Clock(self) -> ISystemClock: ...
    @property
    def CompactionPercentage(self) -> float: ...
    @property
    def ExpirationScanFrequency(self) -> TimeSpan: ...
    @property
    def SizeLimit(self) -> Nullable: ...
    @Clock.setter
    def Clock(self, value: ISystemClock) -> None: ...
    @CompactionPercentage.setter
    def CompactionPercentage(self, value: float) -> None: ...
    @ExpirationScanFrequency.setter
    def ExpirationScanFrequency(self, value: TimeSpan) -> None: ...
    @SizeLimit.setter
    def SizeLimit(self, value: Nullable) -> None: ...


class MemoryDistributedCacheOptions(MemoryCacheOptions):
    def __init__(self): ...
