from typing import Tuple, Set, Iterable, List


class FrameData:
    @property
    def Stem(self) -> str: ...
    @property
    def StemItems(self) -> List[str]: ...


class FrameData:
    @property
    def Stem(self) -> str: ...
    @property
    def StemItems(self) -> List[str]: ...




class PatternContextLinear:
    def __init__(self, pattern: ILinearPattern): ...
    def PushDirectory(self, directory: DirectoryInfoBase) -> None: ...
    @overload
    def Test(self, file: FileInfoBase) -> PatternTestResult: ...


class PatternContextLinearExclude(PatternContextLinear):
    def __init__(self, pattern: ILinearPattern): ...
    @overload
    def Test(self, directory: DirectoryInfoBase) -> bool: ...


class PatternContextLinearInclude(PatternContextLinear):
    def __init__(self, pattern: ILinearPattern): ...
    def Declare(self, onDeclare: Action) -> None: ...
    @overload
    def Test(self, directory: DirectoryInfoBase) -> bool: ...


class PatternContextRagged:
    def __init__(self, pattern: IRaggedPattern): ...
    def PopDirectory(self) -> None: ...
    def PushDirectory(self, directory: DirectoryInfoBase) -> None: ...
    @overload
    def Test(self, file: FileInfoBase) -> PatternTestResult: ...


class PatternContextRaggedExclude(PatternContextRagged):
    def __init__(self, pattern: IRaggedPattern): ...
    @overload
    def Test(self, directory: DirectoryInfoBase) -> bool: ...


class PatternContextRaggedInclude(PatternContextRagged):
    def __init__(self, pattern: IRaggedPattern): ...
    def Declare(self, onDeclare: Action) -> None: ...
    @overload
    def Test(self, directory: DirectoryInfoBase) -> bool: ...
