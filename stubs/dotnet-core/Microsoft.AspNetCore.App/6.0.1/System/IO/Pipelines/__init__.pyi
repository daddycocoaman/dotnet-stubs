from typing import Tuple, Set, Iterable, List


class FlushResult(ValueType):
    def __init__(self, isCanceled: bool, isCompleted: bool): ...
    @property
    def IsCanceled(self) -> bool: ...
    @property
    def IsCompleted(self) -> bool: ...


class IDuplexPipe:
    @property
    def Input(self) -> PipeReader: ...
    @property
    def Output(self) -> PipeWriter: ...


class Pipe(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, options: PipeOptions): ...
    @property
    def Reader(self) -> PipeReader: ...
    @property
    def Writer(self) -> PipeWriter: ...
    def Reset(self) -> None: ...


class PipeOptions(Object):
    def __init__(self, pool: MemoryPool, readerScheduler: PipeScheduler, writerScheduler: PipeScheduler, pauseWriterThreshold: Int64, resumeWriterThreshold: Int64, minimumSegmentSize: int, useSynchronizationContext: bool): ...
    @property
    def Default() -> PipeOptions: ...
    @property
    def MinimumSegmentSize(self) -> int: ...
    @property
    def PauseWriterThreshold(self) -> Int64: ...
    @property
    def Pool(self) -> MemoryPool: ...
    @property
    def ReaderScheduler(self) -> PipeScheduler: ...
    @property
    def ResumeWriterThreshold(self) -> Int64: ...
    @property
    def UseSynchronizationContext(self) -> bool: ...
    @property
    def WriterScheduler(self) -> PipeScheduler: ...


class PipeReader(Object):
    @overload
    def AdvanceTo(self, consumed: SequencePosition) -> None: ...
    @overload
    def AdvanceTo(self, consumed: SequencePosition, examined: SequencePosition) -> None: ...
    def AsStream(self, leaveOpen: bool) -> Stream: ...
    def CancelPendingRead(self) -> None: ...
    def Complete(self, exception: Exception) -> None: ...
    def CompleteAsync(self, exception: Exception) -> ValueTask: ...
    @overload
    def CopyToAsync(self, destination: Stream, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def CopyToAsync(self, destination: PipeWriter, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def Create(sequence: ReadOnlySequence) -> PipeReader: ...
    @overload
    def Create(stream: Stream, readerOptions: StreamPipeReaderOptions) -> PipeReader: ...
    def ReadAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...
    def ReadAtLeastAsync(self, minimumSize: int, cancellationToken: CancellationToken) -> ValueTask: ...
    def TryRead(self) -> Tuple[bool, ReadResult]: ...


class PipeScheduler(Object):
    @property
    def Inline() -> PipeScheduler: ...
    @property
    def ThreadPool() -> PipeScheduler: ...
    def Schedule(self, action: Action, state: Object) -> None: ...


class PipeWriter(Object):
    def Advance(self, bytes: int) -> None: ...
    def AsStream(self, leaveOpen: bool) -> Stream: ...
    def CancelPendingFlush(self) -> None: ...
    def Complete(self, exception: Exception) -> None: ...
    def CompleteAsync(self, exception: Exception) -> ValueTask: ...
    def Create(stream: Stream, writerOptions: StreamPipeWriterOptions) -> PipeWriter: ...
    def FlushAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...
    @property
    def CanGetUnflushedBytes(self) -> bool: ...
    @property
    def UnflushedBytes(self) -> Int64: ...
    def GetMemory(self, sizeHint: int) -> Memory: ...
    def GetSpan(self, sizeHint: int) -> Span: ...
    def WriteAsync(self, source: ReadOnlyMemory, cancellationToken: CancellationToken) -> ValueTask: ...


class ReadResult(ValueType):
    def __init__(self, buffer: ReadOnlySequence, isCanceled: bool, isCompleted: bool): ...
    @property
    def Buffer(self) -> ReadOnlySequence: ...
    @property
    def IsCanceled(self) -> bool: ...
    @property
    def IsCompleted(self) -> bool: ...


class StreamPipeExtensions(Object):
    def CopyToAsync(source: Stream, destination: PipeWriter, cancellationToken: CancellationToken) -> Task: ...


class StreamPipeReaderOptions(Object):
    @overload
    def __init__(self, pool: MemoryPool, bufferSize: int, minimumReadSize: int, leaveOpen: bool): ...
    @overload
    def __init__(self, pool: MemoryPool, bufferSize: int, minimumReadSize: int, leaveOpen: bool, useZeroByteReads: bool): ...
    @property
    def BufferSize(self) -> int: ...
    @property
    def LeaveOpen(self) -> bool: ...
    @property
    def MinimumReadSize(self) -> int: ...
    @property
    def Pool(self) -> MemoryPool: ...
    @property
    def UseZeroByteReads(self) -> bool: ...


class StreamPipeWriterOptions(Object):
    def __init__(self, pool: MemoryPool, minimumBufferSize: int, leaveOpen: bool): ...
    @property
    def LeaveOpen(self) -> bool: ...
    @property
    def MinimumBufferSize(self) -> int: ...
    @property
    def Pool(self) -> MemoryPool: ...
