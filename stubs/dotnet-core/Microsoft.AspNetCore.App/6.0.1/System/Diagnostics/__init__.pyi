from typing import Tuple, Set, Iterable, List


class EntryWrittenEventArgs(EventArgs):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, entry: EventLogEntry): ...
    @property
    def Entry(self) -> EventLogEntry: ...


class EntryWrittenEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EntryWrittenEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EntryWrittenEventArgs) -> None: ...


class EventInstance(Object):
    @overload
    def __init__(self, instanceId: Int64, categoryId: int): ...
    @overload
    def __init__(self, instanceId: Int64, categoryId: int, entryType: EventLogEntryType): ...
    @property
    def CategoryId(self) -> int: ...
    @property
    def EntryType(self) -> EventLogEntryType: ...
    @property
    def InstanceId(self) -> Int64: ...
    @CategoryId.setter
    def CategoryId(self, value: int) -> None: ...
    @EntryType.setter
    def EntryType(self, value: EventLogEntryType) -> None: ...
    @InstanceId.setter
    def InstanceId(self, value: Int64) -> None: ...


class EventLog(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, logName: str): ...
    @overload
    def __init__(self, logName: str, machineName: str): ...
    @overload
    def __init__(self, logName: str, machineName: str, source: str): ...
    def add_EntryWritten(self, value: EntryWrittenEventHandler) -> None: ...
    def BeginInit(self) -> None: ...
    def Clear(self) -> None: ...
    def Close(self) -> None: ...
    @overload
    def CreateEventSource(sourceData: EventSourceCreationData) -> None: ...
    @overload
    def CreateEventSource(source: str, logName: str) -> None: ...
    @overload
    def Delete(logName: str) -> None: ...
    @overload
    def Delete(logName: str, machineName: str) -> None: ...
    @overload
    def DeleteEventSource(source: str) -> None: ...
    @overload
    def DeleteEventSource(source: str, machineName: str) -> None: ...
    def EndInit(self) -> None: ...
    @overload
    def Exists(logName: str) -> bool: ...
    @overload
    def Exists(logName: str, machineName: str) -> bool: ...
    @property
    def EnableRaisingEvents(self) -> bool: ...
    @property
    def Entries(self) -> EventLogEntryCollection: ...
    @property
    def Log(self) -> str: ...
    @property
    def LogDisplayName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def MaximumKilobytes(self) -> Int64: ...
    @property
    def MinimumRetentionDays(self) -> int: ...
    @property
    def OverflowAction(self) -> OverflowAction: ...
    @property
    def Source(self) -> str: ...
    @property
    def SynchronizingObject(self) -> ISynchronizeInvoke: ...
    @overload
    def GetEventLogs() -> Set(EventLog): ...
    @overload
    def GetEventLogs(machineName: str) -> Set(EventLog): ...
    def LogNameFromSourceName(source: str, machineName: str) -> str: ...
    def ModifyOverflowPolicy(self, action: OverflowAction, retentionDays: int) -> None: ...
    def RegisterDisplayName(self, resourceFile: str, resourceId: Int64) -> None: ...
    def remove_EntryWritten(self, value: EntryWrittenEventHandler) -> None: ...
    @EnableRaisingEvents.setter
    def EnableRaisingEvents(self, value: bool) -> None: ...
    @Log.setter
    def Log(self, value: str) -> None: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...
    @MaximumKilobytes.setter
    def MaximumKilobytes(self, value: Int64) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: ISynchronizeInvoke) -> None: ...
    @overload
    def SourceExists(source: str) -> bool: ...
    @overload
    def SourceExists(source: str, machineName: str) -> bool: ...
    @overload
    def WriteEntry(self, message: str) -> None: ...
    @overload
    def WriteEntry(source: str, message: str) -> None: ...
    @overload
    def WriteEntry(self, message: str, type: EventLogEntryType) -> None: ...
    @overload
    def WriteEntry(source: str, message: str, type: EventLogEntryType) -> None: ...
    @overload
    def WriteEntry(self, message: str, type: EventLogEntryType, eventID: int) -> None: ...
    @overload
    def WriteEntry(self, message: str, type: EventLogEntryType, eventID: int, category: Int16) -> None: ...
    @overload
    def WriteEntry(source: str, message: str, type: EventLogEntryType, eventID: int) -> None: ...
    @overload
    def WriteEntry(self, message: str, type: EventLogEntryType, eventID: int, category: Int16, rawData: Set(Byte)) -> None: ...
    @overload
    def WriteEntry(source: str, message: str, type: EventLogEntryType, eventID: int, category: Int16) -> None: ...
    @overload
    def WriteEntry(source: str, message: str, type: EventLogEntryType, eventID: int, category: Int16, rawData: Set(Byte)) -> None: ...
    @overload
    def WriteEvent(self, instance: EventInstance, values: Set(Object)) -> None: ...
    @overload
    def WriteEvent(source: str, instance: EventInstance, values: Set(Object)) -> None: ...
    @overload
    def WriteEvent(self, instance: EventInstance, data: Set(Byte), values: Set(Object)) -> None: ...
    @overload
    def WriteEvent(source: str, instance: EventInstance, data: Set(Byte), values: Set(Object)) -> None: ...


class EventLogEntry(Component):
    @overload
    def Equals(self, otherEntry: EventLogEntry) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def CategoryNumber(self) -> Int16: ...
    @property
    def Data(self) -> Set(Byte): ...
    @property
    def EntryType(self) -> EventLogEntryType: ...
    @property
    def EventID(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def InstanceId(self) -> Int64: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def Message(self) -> str: ...
    @property
    def ReplacementStrings(self) -> Set(str): ...
    @property
    def Source(self) -> str: ...
    @property
    def TimeGenerated(self) -> DateTime: ...
    @property
    def TimeWritten(self) -> DateTime: ...
    @property
    def UserName(self) -> str: ...


class EventLogEntryCollection(Object):
    def CopyTo(self, entries: Set(EventLogEntry), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> EventLogEntry: ...
    def GetEnumerator(self) -> IEnumerator: ...


class EventLogEntryType:
    Error = 1
    Warning = 2
    Information = 4
    SuccessAudit = 8
    FailureAudit = 16


class EventLogTraceListener(TraceListener):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, eventLog: EventLog): ...
    @overload
    def __init__(self, source: str): ...
    def Close(self) -> None: ...
    @property
    def EventLog(self) -> EventLog: ...
    @property
    def Name(self) -> str: ...
    @EventLog.setter
    def EventLog(self, value: EventLog) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id: int, data: Object) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id: int, data: Set(Object)) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id: int, format: str, args: Set(Object)) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...


class EventSourceCreationData(Object):
    def __init__(self, source: str, logName: str): ...
    @property
    def CategoryCount(self) -> int: ...
    @property
    def CategoryResourceFile(self) -> str: ...
    @property
    def LogName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def MessageResourceFile(self) -> str: ...
    @property
    def ParameterResourceFile(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @CategoryCount.setter
    def CategoryCount(self, value: int) -> None: ...
    @CategoryResourceFile.setter
    def CategoryResourceFile(self, value: str) -> None: ...
    @LogName.setter
    def LogName(self, value: str) -> None: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...
    @MessageResourceFile.setter
    def MessageResourceFile(self, value: str) -> None: ...
    @ParameterResourceFile.setter
    def ParameterResourceFile(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...


class OverflowAction:
    OverwriteAsNeeded = 0
    OverwriteOlder = 1
    DoNotOverwrite = -1
