from typing import Tuple, Set, Iterable, List


class EventLogTraceListener(TraceListener):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, eventLog: EventLog): ...
    @overload
    def __init__(self, source: str): ...
    def Close(self) -> None: ...
    @property
    def EventLog(self) -> EventLog: ...
    @property
    def Name(self) -> str: ...
    @EventLog.setter
    def EventLog(self, value: EventLog) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id: int, data: Object) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id: int, data: Set(Object)) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, severity: TraceEventType, id: int, format: str, args: Set(Object)) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...
