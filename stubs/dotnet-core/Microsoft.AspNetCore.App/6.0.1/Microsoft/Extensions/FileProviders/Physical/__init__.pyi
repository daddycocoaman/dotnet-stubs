from typing import Tuple, Set, Iterable, List


class ExclusionFilters:
    #None = 0
    DotPrefixed = 1
    Hidden = 2
    System = 4
    Sensitive = 7


class PhysicalDirectoryInfo:
    def __init__(self, info: DirectoryInfo): ...
    def CreateReadStream(self) -> Stream: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDirectory(self) -> bool: ...
    @property
    def LastModified(self) -> DateTimeOffset: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Name(self) -> str: ...
    @property
    def PhysicalPath(self) -> str: ...


class PhysicalFileInfo:
    def __init__(self, info: FileInfo): ...
    def CreateReadStream(self) -> Stream: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDirectory(self) -> bool: ...
    @property
    def LastModified(self) -> DateTimeOffset: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Name(self) -> str: ...
    @property
    def PhysicalPath(self) -> str: ...


class PhysicalFilesWatcher:
    @overload
    def __init__(self, root: str, fileSystemWatcher: FileSystemWatcher, pollForChanges: bool): ...
    @overload
    def __init__(self, root: str, fileSystemWatcher: FileSystemWatcher, pollForChanges: bool, filters: ExclusionFilters): ...
    def CreateFileChangeToken(self, filter: str) -> IChangeToken: ...
    def Dispose(self) -> None: ...


class PollingFileChangeToken:
    def __init__(self, fileInfo: FileInfo): ...
    @property
    def ActiveChangeCallbacks(self) -> bool: ...
    @property
    def HasChanged(self) -> bool: ...
    def RegisterChangeCallback(self, callback: Action, state: Object) -> IDisposable: ...


class PollingWildCardChangeToken:
    def __init__(self, root: str, pattern: str): ...
    @property
    def ActiveChangeCallbacks(self) -> bool: ...
    @property
    def HasChanged(self) -> bool: ...
