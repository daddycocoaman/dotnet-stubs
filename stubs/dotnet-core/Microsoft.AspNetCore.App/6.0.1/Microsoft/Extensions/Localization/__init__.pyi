from typing import Tuple, Set, Iterable, List


class IResourceNamesCache:
    def GetOrAdd(self, name: str, valueFactory: Func) -> List[str]: ...


class LocalizationOptions:
    def __init__(self): ...
    @property
    def ResourcesPath(self) -> str: ...
    @ResourcesPath.setter
    def ResourcesPath(self, value: str) -> None: ...


class ResourceLocationAttribute:
    def __init__(self, resourceLocation: str): ...
    @property
    def ResourceLocation(self) -> str: ...


class ResourceManagerStringLocalizer:
    def __init__(self, resourceManager: ResourceManager, resourceAssembly: Assembly, baseName: str, resourceNamesCache: IResourceNamesCache, logger: ILogger): ...
    @property
    def Item(self, name: str) -> LocalizedString: ...
    @property
    def Item(self, name: str, arguments: Set(Object)) -> LocalizedString: ...
    def GetAllStrings(self, includeParentCultures: bool) -> Iterable[LocalizedString]: ...


class ResourceManagerStringLocalizerFactory:
    def __init__(self, localizationOptions: IOptions, loggerFactory: ILoggerFactory): ...
    @overload
    def Create(self, resourceSource: Type) -> IStringLocalizer: ...
    @overload
    def Create(self, baseName: str, location: str) -> IStringLocalizer: ...


class ResourceNamesCache:
    def __init__(self): ...
    def GetOrAdd(self, name: str, valueFactory: Func) -> List[str]: ...


class RootNamespaceAttribute:
    def __init__(self, rootNamespace: str): ...
    @property
    def RootNamespace(self) -> str: ...
