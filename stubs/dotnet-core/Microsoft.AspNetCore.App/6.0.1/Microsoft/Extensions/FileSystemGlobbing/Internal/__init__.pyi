__all__ = ['PathSegments','PatternContexts','Patterns']
from typing import Tuple, Set, Iterable, List


class ILinearPattern:
    @property
    def Segments(self) -> List[IPathSegment]: ...


class IPathSegment:
    @property
    def CanProduceStem(self) -> bool: ...
    def Match(self, value: str) -> bool: ...


class IPattern:
    def CreatePatternContextForExclude(self) -> IPatternContext: ...
    def CreatePatternContextForInclude(self) -> IPatternContext: ...


class IPatternContext:
    def Declare(self, onDeclare: Action) -> None: ...
    def PopDirectory(self) -> None: ...
    def PushDirectory(self, directory: DirectoryInfoBase) -> None: ...
    @overload
    def Test(self, directory: DirectoryInfoBase) -> bool: ...
    @overload
    def Test(self, file: FileInfoBase) -> PatternTestResult: ...


class IRaggedPattern:
    @property
    def Contains(self) -> List[IPathSegment]: ...
    @property
    def EndsWith(self) -> List[IPathSegment]: ...
    @property
    def Segments(self) -> List[IPathSegment]: ...
    @property
    def StartsWith(self) -> List[IPathSegment]: ...


class MatcherContext:
    def __init__(self, includePatterns: Iterable[IPattern], excludePatterns: Iterable[IPattern], directoryInfo: DirectoryInfoBase, comparison: StringComparison): ...
    def Execute(self) -> PatternMatchingResult: ...


class PatternTestResult:
    @property
    def IsSuccessful(self) -> bool: ...
    @property
    def Stem(self) -> str: ...
    def Success(stem: str) -> PatternTestResult: ...
