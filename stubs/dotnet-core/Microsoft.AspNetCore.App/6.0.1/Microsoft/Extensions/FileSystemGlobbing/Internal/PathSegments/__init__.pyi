from typing import Tuple, Set, Iterable, List


class CurrentPathSegment:
    def __init__(self): ...
    @property
    def CanProduceStem(self) -> bool: ...
    def Match(self, value: str) -> bool: ...


class LiteralPathSegment:
    def __init__(self, value: str, comparisonType: StringComparison): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CanProduceStem(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def Match(self, value: str) -> bool: ...


class ParentPathSegment:
    def __init__(self): ...
    @property
    def CanProduceStem(self) -> bool: ...
    def Match(self, value: str) -> bool: ...


class RecursiveWildcardSegment:
    def __init__(self): ...
    @property
    def CanProduceStem(self) -> bool: ...
    def Match(self, value: str) -> bool: ...


class WildcardPathSegment:
    def __init__(self, beginsWith: str, contains: List, endsWith: str, comparisonType: StringComparison): ...
    @property
    def BeginsWith(self) -> str: ...
    @property
    def CanProduceStem(self) -> bool: ...
    @property
    def Contains(self) -> List: ...
    @property
    def EndsWith(self) -> str: ...
    def Match(self, value: str) -> bool: ...
