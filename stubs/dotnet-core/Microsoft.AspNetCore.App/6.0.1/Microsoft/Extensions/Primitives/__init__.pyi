from typing import Tuple, Set, Iterable, List


class CancellationChangeToken:
    def __init__(self, cancellationToken: CancellationToken): ...
    @property
    def ActiveChangeCallbacks(self) -> bool: ...
    @property
    def HasChanged(self) -> bool: ...
    def RegisterChangeCallback(self, callback: Action, state: Object) -> IDisposable: ...


class ChangeToken:
    @overload
    def OnChange(changeTokenProducer: Func, changeTokenConsumer: Action) -> IDisposable: ...
    @overload
    def OnChange(changeTokenProducer: Func, changeTokenConsumer: Action, state: TState) -> IDisposable: ...


class CompositeChangeToken:
    def __init__(self, changeTokens: IReadOnlyList): ...
    @property
    def ActiveChangeCallbacks(self) -> bool: ...
    @property
    def ChangeTokens(self) -> IReadOnlyList: ...
    @property
    def HasChanged(self) -> bool: ...
    def RegisterChangeCallback(self, callback: Action, state: Object) -> IDisposable: ...


class Enumerator:
    def __init__(self, tokenizer: StringTokenizer): ...
    def Dispose(self) -> None: ...
    @property
    def Current(self) -> StringSegment: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class Enumerator:
    def __init__(self, values: StringValues): ...
    def Dispose(self) -> None: ...
    @property
    def Current(self) -> str: ...
    def MoveNext(self) -> bool: ...


class Extensions:
    def Append(builder: StringBuilder, segment: StringSegment) -> StringBuilder: ...


class IChangeToken:
    @property
    def ActiveChangeCallbacks(self) -> bool: ...
    @property
    def HasChanged(self) -> bool: ...
    def RegisterChangeCallback(self, callback: Action, state: Object) -> IDisposable: ...


class StringSegment:
    @overload
    def __init__(self, buffer: str): ...
    @overload
    def __init__(self, buffer: str, offset: int, length: int): ...
    def AsMemory(self) -> ReadOnlyMemory: ...
    @overload
    def AsSpan(self) -> ReadOnlySpan: ...
    @overload
    def AsSpan(self, start: int) -> ReadOnlySpan: ...
    @overload
    def AsSpan(self, start: int, length: int) -> ReadOnlySpan: ...
    def Compare(a: StringSegment, b: StringSegment, comparisonType: StringComparison) -> int: ...
    def EndsWith(self, text: str, comparisonType: StringComparison) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: StringSegment) -> bool: ...
    @overload
    def Equals(self, text: str) -> bool: ...
    @overload
    def Equals(self, other: StringSegment, comparisonType: StringComparison) -> bool: ...
    @overload
    def Equals(self, text: str, comparisonType: StringComparison) -> bool: ...
    @overload
    def Equals(a: StringSegment, b: StringSegment, comparisonType: StringComparison) -> bool: ...
    @property
    def Buffer(self) -> str: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def Item(self, index: int) -> Char: ...
    @property
    def Length(self) -> int: ...
    @property
    def Offset(self) -> int: ...
    @property
    def Value(self) -> str: ...
    def GetHashCode(self) -> int: ...
    @overload
    def IndexOf(self, c: Char) -> int: ...
    @overload
    def IndexOf(self, c: Char, start: int) -> int: ...
    @overload
    def IndexOf(self, c: Char, start: int, count: int) -> int: ...
    @overload
    def IndexOfAny(self, anyOf: Set(Char)) -> int: ...
    @overload
    def IndexOfAny(self, anyOf: Set(Char), startIndex: int) -> int: ...
    @overload
    def IndexOfAny(self, anyOf: Set(Char), startIndex: int, count: int) -> int: ...
    def IsNullOrEmpty(value: StringSegment) -> bool: ...
    def LastIndexOf(self, value: Char) -> int: ...
    def op_Equality(left: StringSegment, right: StringSegment) -> bool: ...
    @overload
    def op_Implicit(value: str) -> StringSegment: ...
    @overload
    def op_Implicit(segment: StringSegment) -> ReadOnlyMemory: ...
    @overload
    def op_Implicit(segment: StringSegment) -> ReadOnlySpan: ...
    def op_Inequality(left: StringSegment, right: StringSegment) -> bool: ...
    def Split(self, chars: Set(Char)) -> StringTokenizer: ...
    def StartsWith(self, text: str, comparisonType: StringComparison) -> bool: ...
    @overload
    def Subsegment(self, offset: int) -> StringSegment: ...
    @overload
    def Subsegment(self, offset: int, length: int) -> StringSegment: ...
    @overload
    def Substring(self, offset: int) -> str: ...
    @overload
    def Substring(self, offset: int, length: int) -> str: ...
    def ToString(self) -> str: ...
    def Trim(self) -> StringSegment: ...
    def TrimEnd(self) -> StringSegment: ...
    def TrimStart(self) -> StringSegment: ...


class StringSegmentComparer:
    def Compare(self, x: StringSegment, y: StringSegment) -> int: ...
    @overload
    def Equals(self, x: StringSegment, y: StringSegment) -> bool: ...
    @property
    def Ordinal() -> StringSegmentComparer: ...
    @property
    def OrdinalIgnoreCase() -> StringSegmentComparer: ...
    @overload
    def GetHashCode(self, obj: StringSegment) -> int: ...


class StringTokenizer:
    @overload
    def __init__(self, value: str, separators: Set(Char)): ...
    @overload
    def __init__(self, value: StringSegment, separators: Set(Char)): ...
    def GetEnumerator(self) -> Enumerator: ...


class StringValues:
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, values: Set(str)): ...
    @overload
    def Concat(value: str, values: StringValues) -> Tuple[StringValues, StringValues]: ...
    @overload
    def Concat(values: StringValues, value: str) -> Tuple[StringValues, StringValues]: ...
    @overload
    def Concat(values1: StringValues, values2: StringValues) -> StringValues: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Set(str)) -> bool: ...
    @overload
    def Equals(self, other: str) -> bool: ...
    @overload
    def Equals(self, other: StringValues) -> bool: ...
    @overload
    def Equals(left: Set(str), right: StringValues) -> bool: ...
    @overload
    def Equals(left: StringValues, right: Set(str)) -> bool: ...
    @overload
    def Equals(left: StringValues, right: str) -> bool: ...
    @overload
    def Equals(left: str, right: StringValues) -> bool: ...
    @overload
    def Equals(left: StringValues, right: StringValues) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> str: ...
    def GetEnumerator(self) -> Enumerator: ...
    def GetHashCode(self) -> int: ...
    def IsNullOrEmpty(value: StringValues) -> bool: ...
    @overload
    def op_Equality(left: Object, right: StringValues) -> bool: ...
    @overload
    def op_Equality(left: StringValues, right: Object) -> bool: ...
    @overload
    def op_Equality(left: Set(str), right: StringValues) -> bool: ...
    @overload
    def op_Equality(left: StringValues, right: Set(str)) -> bool: ...
    @overload
    def op_Equality(left: str, right: StringValues) -> bool: ...
    @overload
    def op_Equality(left: StringValues, right: str) -> bool: ...
    @overload
    def op_Equality(left: StringValues, right: StringValues) -> bool: ...
    @overload
    def op_Implicit(values: StringValues) -> str: ...
    @overload
    def op_Implicit(value: str) -> StringValues: ...
    @overload
    def op_Implicit(value: StringValues) -> Set(str): ...
    @overload
    def op_Implicit(values: Set(str)) -> StringValues: ...
    @overload
    def op_Inequality(left: StringValues, right: str) -> bool: ...
    @overload
    def op_Inequality(left: str, right: StringValues) -> bool: ...
    @overload
    def op_Inequality(left: Object, right: StringValues) -> bool: ...
    @overload
    def op_Inequality(left: StringValues, right: Set(str)) -> bool: ...
    @overload
    def op_Inequality(left: StringValues, right: StringValues) -> bool: ...
    @overload
    def op_Inequality(left: Set(str), right: StringValues) -> bool: ...
    @overload
    def op_Inequality(left: StringValues, right: Object) -> bool: ...
    def ToArray(self) -> Set(str): ...
    def ToString(self) -> str: ...
