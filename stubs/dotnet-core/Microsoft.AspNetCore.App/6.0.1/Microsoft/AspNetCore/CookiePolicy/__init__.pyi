from typing import Tuple, Set, Iterable, List


class AppendCookieContext:
    def __init__(self, context: HttpContext, options: CookieOptions, name: str, value: str): ...
    @property
    def Context(self) -> HttpContext: ...
    @property
    def CookieName(self) -> str: ...
    @property
    def CookieOptions(self) -> CookieOptions: ...
    @property
    def CookieValue(self) -> str: ...
    @property
    def HasConsent(self) -> bool: ...
    @property
    def IsConsentNeeded(self) -> bool: ...
    @property
    def IssueCookie(self) -> bool: ...
    @CookieName.setter
    def CookieName(self, value: str) -> None: ...
    @CookieValue.setter
    def CookieValue(self, value: str) -> None: ...
    @IssueCookie.setter
    def IssueCookie(self, value: bool) -> None: ...


class CookiePolicyMiddleware:
    @overload
    def __init__(self, next: RequestDelegate, options: IOptions): ...
    @overload
    def __init__(self, next: RequestDelegate, options: IOptions, factory: ILoggerFactory): ...
    @property
    def Options(self) -> CookiePolicyOptions: ...
    def Invoke(self, context: HttpContext) -> Task: ...
    @Options.setter
    def Options(self, value: CookiePolicyOptions) -> None: ...


class DeleteCookieContext:
    def __init__(self, context: HttpContext, options: CookieOptions, name: str): ...
    @property
    def Context(self) -> HttpContext: ...
    @property
    def CookieName(self) -> str: ...
    @property
    def CookieOptions(self) -> CookieOptions: ...
    @property
    def HasConsent(self) -> bool: ...
    @property
    def IsConsentNeeded(self) -> bool: ...
    @property
    def IssueCookie(self) -> bool: ...
    @CookieName.setter
    def CookieName(self, value: str) -> None: ...
    @IssueCookie.setter
    def IssueCookie(self, value: bool) -> None: ...


class HttpOnlyPolicy:
    #None = 0
    Always = 1
