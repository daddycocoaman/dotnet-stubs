from typing import Tuple, Set, Iterable, List


class InboundMatch:
    def __init__(self): ...
    @property
    def Entry(self) -> InboundRouteEntry: ...
    @property
    def TemplateMatcher(self) -> TemplateMatcher: ...
    @Entry.setter
    def Entry(self, value: InboundRouteEntry) -> None: ...
    @TemplateMatcher.setter
    def TemplateMatcher(self, value: TemplateMatcher) -> None: ...


class InboundRouteEntry:
    def __init__(self): ...
    @property
    def Constraints(self) -> IDictionary: ...
    @property
    def Defaults(self) -> RouteValueDictionary: ...
    @property
    def Handler(self) -> IRouter: ...
    @property
    def Order(self) -> int: ...
    @property
    def Precedence(self) -> Decimal: ...
    @property
    def RouteName(self) -> str: ...
    @property
    def RouteTemplate(self) -> RouteTemplate: ...
    @Constraints.setter
    def Constraints(self, value: IDictionary) -> None: ...
    @Defaults.setter
    def Defaults(self, value: RouteValueDictionary) -> None: ...
    @Handler.setter
    def Handler(self, value: IRouter) -> None: ...
    @Order.setter
    def Order(self, value: int) -> None: ...
    @Precedence.setter
    def Precedence(self, value: Decimal) -> None: ...
    @RouteName.setter
    def RouteName(self, value: str) -> None: ...
    @RouteTemplate.setter
    def RouteTemplate(self, value: RouteTemplate) -> None: ...


class OutboundMatch:
    def __init__(self): ...
    @property
    def Entry(self) -> OutboundRouteEntry: ...
    @property
    def TemplateBinder(self) -> TemplateBinder: ...
    @Entry.setter
    def Entry(self, value: OutboundRouteEntry) -> None: ...
    @TemplateBinder.setter
    def TemplateBinder(self, value: TemplateBinder) -> None: ...


class OutboundRouteEntry:
    def __init__(self): ...
    @property
    def Constraints(self) -> IDictionary: ...
    @property
    def Data(self) -> Object: ...
    @property
    def Defaults(self) -> RouteValueDictionary: ...
    @property
    def Handler(self) -> IRouter: ...
    @property
    def Order(self) -> int: ...
    @property
    def Precedence(self) -> Decimal: ...
    @property
    def RequiredLinkValues(self) -> RouteValueDictionary: ...
    @property
    def RouteName(self) -> str: ...
    @property
    def RouteTemplate(self) -> RouteTemplate: ...
    @Constraints.setter
    def Constraints(self, value: IDictionary) -> None: ...
    @Data.setter
    def Data(self, value: Object) -> None: ...
    @Defaults.setter
    def Defaults(self, value: RouteValueDictionary) -> None: ...
    @Handler.setter
    def Handler(self, value: IRouter) -> None: ...
    @Order.setter
    def Order(self, value: int) -> None: ...
    @Precedence.setter
    def Precedence(self, value: Decimal) -> None: ...
    @RequiredLinkValues.setter
    def RequiredLinkValues(self, value: RouteValueDictionary) -> None: ...
    @RouteName.setter
    def RouteName(self, value: str) -> None: ...
    @RouteTemplate.setter
    def RouteTemplate(self, value: RouteTemplate) -> None: ...


class TreeRouteBuilder:
    @overload
    def Build(self) -> TreeRouter: ...
    @overload
    def Build(self, version: int) -> TreeRouter: ...
    def Clear(self) -> None: ...
    @property
    def InboundEntries(self) -> List[InboundRouteEntry]: ...
    @property
    def OutboundEntries(self) -> List[OutboundRouteEntry]: ...
    def MapInbound(self, handler: IRouter, routeTemplate: RouteTemplate, routeName: str, order: int) -> InboundRouteEntry: ...
    def MapOutbound(self, handler: IRouter, routeTemplate: RouteTemplate, requiredLinkValues: RouteValueDictionary, routeName: str, order: int) -> OutboundRouteEntry: ...


class TreeRouter:
    @property
    def Version(self) -> int: ...
    def GetVirtualPath(self, context: VirtualPathContext) -> VirtualPathData: ...
    def RouteAsync(self, context: RouteContext) -> Task: ...


class UrlMatchingNode:
    def __init__(self, length: int): ...
    @property
    def CatchAlls(self) -> UrlMatchingNode: ...
    @property
    def ConstrainedCatchAlls(self) -> UrlMatchingNode: ...
    @property
    def ConstrainedParameters(self) -> UrlMatchingNode: ...
    @property
    def Depth(self) -> int: ...
    @property
    def IsCatchAll(self) -> bool: ...
    @property
    def Literals(self) -> Dictionary: ...
    @property
    def Matches(self) -> List: ...
    @property
    def Parameters(self) -> UrlMatchingNode: ...
    @CatchAlls.setter
    def CatchAlls(self, value: UrlMatchingNode) -> None: ...
    @ConstrainedCatchAlls.setter
    def ConstrainedCatchAlls(self, value: UrlMatchingNode) -> None: ...
    @ConstrainedParameters.setter
    def ConstrainedParameters(self, value: UrlMatchingNode) -> None: ...
    @IsCatchAll.setter
    def IsCatchAll(self, value: bool) -> None: ...
    @Parameters.setter
    def Parameters(self, value: UrlMatchingNode) -> None: ...


class UrlMatchingTree:
    def __init__(self, order: int): ...
    @property
    def Order(self) -> int: ...
    @property
    def Root(self) -> UrlMatchingNode: ...
