__all__ = ['Constraints','Internal','Matching','Patterns','Template','Tree']
from typing import Tuple, Set, Iterable, List


class CompositeEndpointDataSource(EndpointDataSource):
    def __init__(self, endpointDataSources: Iterable[EndpointDataSource]): ...
    @property
    def DataSources(self) -> Iterable[EndpointDataSource]: ...
    @property
    def Endpoints(self) -> IReadOnlyList: ...
    def GetChangeToken(self) -> IChangeToken: ...


class DataTokensMetadata:
    def __init__(self, dataTokens: IReadOnlyDictionary): ...
    @property
    def DataTokens(self) -> IReadOnlyDictionary: ...


class DefaultEndpointDataSource(EndpointDataSource):
    @overload
    def __init__(self, endpoints: Set(Endpoint)): ...
    @overload
    def __init__(self, endpoints: Iterable[Endpoint]): ...
    @property
    def Endpoints(self) -> IReadOnlyList: ...
    def GetChangeToken(self) -> IChangeToken: ...


class DefaultInlineConstraintResolver:
    def __init__(self, routeOptions: IOptions, serviceProvider: IServiceProvider): ...
    def ResolveConstraint(self, inlineConstraint: str) -> IRouteConstraint: ...


class EndpointDataSource:
    @property
    def Endpoints(self) -> IReadOnlyList: ...
    def GetChangeToken(self) -> IChangeToken: ...


class EndpointGroupNameAttribute:
    def __init__(self, endpointGroupName: str): ...
    @property
    def EndpointGroupName(self) -> str: ...


class EndpointNameAttribute:
    def __init__(self, endpointName: str): ...
    @property
    def EndpointName(self) -> str: ...


class EndpointNameMetadata:
    def __init__(self, endpointName: str): ...
    @property
    def EndpointName(self) -> str: ...


class ExcludeFromDescriptionAttribute:
    def __init__(self): ...
    @property
    def ExcludeFromDescription(self) -> bool: ...


class HostAttribute:
    @overload
    def __init__(self, host: str): ...
    @overload
    def __init__(self, hosts: Set(str)): ...
    @property
    def Hosts(self) -> IReadOnlyList: ...


class HttpMethodMetadata:
    @overload
    def __init__(self, httpMethods: Iterable[str]): ...
    @overload
    def __init__(self, httpMethods: Iterable[str], acceptCorsPreflight: bool): ...
    @property
    def AcceptCorsPreflight(self) -> bool: ...
    @property
    def HttpMethods(self) -> IReadOnlyList: ...


class IDataTokensMetadata:
    @property
    def DataTokens(self) -> IReadOnlyDictionary: ...


class IDynamicEndpointMetadata:
    @property
    def IsDynamic(self) -> bool: ...




class IEndpointGroupNameMetadata:
    @property
    def EndpointGroupName(self) -> str: ...


class IEndpointNameMetadata:
    @property
    def EndpointName(self) -> str: ...


class IEndpointRouteBuilder:
    def CreateApplicationBuilder(self) -> IApplicationBuilder: ...
    @property
    def DataSources(self) -> ICollection: ...
    @property
    def ServiceProvider(self) -> IServiceProvider: ...


class IExcludeFromDescriptionMetadata:
    @property
    def ExcludeFromDescription(self) -> bool: ...


class IHostMetadata:
    @property
    def Hosts(self) -> IReadOnlyList: ...


class IHttpMethodMetadata:
    @property
    def AcceptCorsPreflight(self) -> bool: ...
    @property
    def HttpMethods(self) -> IReadOnlyList: ...


class IInlineConstraintResolver:
    def ResolveConstraint(self, inlineConstraint: str) -> IRouteConstraint: ...


class INamedRouter:
    @property
    def Name(self) -> str: ...


class InlineRouteParameterParser:
    def ParseRouteParameter(routeParameter: str) -> TemplatePart: ...


class IRouteBuilder:
    def Build(self) -> IRouter: ...
    @property
    def ApplicationBuilder(self) -> IApplicationBuilder: ...
    @property
    def DefaultHandler(self) -> IRouter: ...
    @property
    def Routes(self) -> List[IRouter]: ...
    @property
    def ServiceProvider(self) -> IServiceProvider: ...
    @DefaultHandler.setter
    def DefaultHandler(self, value: IRouter) -> None: ...


class IRouteCollection:
    def Add(self, router: IRouter) -> None: ...


class IRouteNameMetadata:
    @property
    def RouteName(self) -> str: ...


class ISuppressLinkGenerationMetadata:
    @property
    def SuppressLinkGeneration(self) -> bool: ...


class ISuppressMatchingMetadata:
    @property
    def SuppressMatching(self) -> bool: ...


class LinkGeneratorEndpointNameAddressExtensions:
    @overload
    def GetPathByName(generator: LinkGenerator, endpointName: str, values: Object, pathBase: PathString, fragment: FragmentString, options: LinkOptions) -> str: ...
    @overload
    def GetPathByName(generator: LinkGenerator, httpContext: HttpContext, endpointName: str, values: Object, pathBase: Nullable, fragment: FragmentString, options: LinkOptions) -> str: ...
    @overload
    def GetUriByName(generator: LinkGenerator, endpointName: str, values: Object, scheme: str, host: HostString, pathBase: PathString, fragment: FragmentString, options: LinkOptions) -> str: ...
    @overload
    def GetUriByName(generator: LinkGenerator, httpContext: HttpContext, endpointName: str, values: Object, scheme: str, host: Nullable, pathBase: Nullable, fragment: FragmentString, options: LinkOptions) -> str: ...


class LinkGeneratorRouteValuesAddressExtensions:
    @overload
    def GetPathByRouteValues(generator: LinkGenerator, routeName: str, values: Object, pathBase: PathString, fragment: FragmentString, options: LinkOptions) -> str: ...
    @overload
    def GetPathByRouteValues(generator: LinkGenerator, httpContext: HttpContext, routeName: str, values: Object, pathBase: Nullable, fragment: FragmentString, options: LinkOptions) -> str: ...
    @overload
    def GetUriByRouteValues(generator: LinkGenerator, routeName: str, values: Object, scheme: str, host: HostString, pathBase: PathString, fragment: FragmentString, options: LinkOptions) -> str: ...
    @overload
    def GetUriByRouteValues(generator: LinkGenerator, httpContext: HttpContext, routeName: str, values: Object, scheme: str, host: Nullable, pathBase: Nullable, fragment: FragmentString, options: LinkOptions) -> str: ...


class LinkParser:
    def ParsePathByAddress(self, address: TAddress, path: PathString) -> RouteValueDictionary: ...


class LinkParserEndpointNameAddressExtensions:
    def ParsePathByEndpointName(parser: LinkParser, endpointName: str, path: PathString) -> RouteValueDictionary: ...


class MatcherPolicy:
    @property
    def Order(self) -> int: ...


class ParameterPolicyFactory:
    @overload
    def Create(self, parameter: RoutePatternParameterPart, inlineText: str) -> IParameterPolicy: ...
    @overload
    def Create(self, parameter: RoutePatternParameterPart, parameterPolicy: IParameterPolicy) -> IParameterPolicy: ...
    @overload
    def Create(self, parameter: RoutePatternParameterPart, reference: RoutePatternParameterPolicyReference) -> IParameterPolicy: ...


class RequestDelegateRouteBuilderExtensions:
    @overload
    def MapDelete(builder: IRouteBuilder, template: str, handler: RequestDelegate) -> IRouteBuilder: ...
    @overload
    def MapDelete(builder: IRouteBuilder, template: str, handler: Func`4) -> IRouteBuilder: ...
    @overload
    def MapGet(builder: IRouteBuilder, template: str, handler: RequestDelegate) -> IRouteBuilder: ...
    @overload
    def MapGet(builder: IRouteBuilder, template: str, handler: Func`4) -> IRouteBuilder: ...
    def MapMiddlewareDelete(builder: IRouteBuilder, template: str, action: Action) -> IRouteBuilder: ...
    def MapMiddlewareGet(builder: IRouteBuilder, template: str, action: Action) -> IRouteBuilder: ...
    def MapMiddlewarePost(builder: IRouteBuilder, template: str, action: Action) -> IRouteBuilder: ...
    def MapMiddlewarePut(builder: IRouteBuilder, template: str, action: Action) -> IRouteBuilder: ...
    def MapMiddlewareRoute(builder: IRouteBuilder, template: str, action: Action) -> IRouteBuilder: ...
    def MapMiddlewareVerb(builder: IRouteBuilder, verb: str, template: str, action: Action) -> IRouteBuilder: ...
    @overload
    def MapPost(builder: IRouteBuilder, template: str, handler: Func`4) -> IRouteBuilder: ...
    @overload
    def MapPost(builder: IRouteBuilder, template: str, handler: RequestDelegate) -> IRouteBuilder: ...
    @overload
    def MapPut(builder: IRouteBuilder, template: str, handler: RequestDelegate) -> IRouteBuilder: ...
    @overload
    def MapPut(builder: IRouteBuilder, template: str, handler: Func`4) -> IRouteBuilder: ...
    def MapRoute(builder: IRouteBuilder, template: str, handler: RequestDelegate) -> IRouteBuilder: ...
    @overload
    def MapVerb(builder: IRouteBuilder, verb: str, template: str, handler: Func`4) -> IRouteBuilder: ...
    @overload
    def MapVerb(builder: IRouteBuilder, verb: str, template: str, handler: RequestDelegate) -> IRouteBuilder: ...


class Route(RouteBase):
    @overload
    def __init__(self, target: IRouter, routeTemplate: str, inlineConstraintResolver: IInlineConstraintResolver): ...
    @overload
    def __init__(self, target: IRouter, routeTemplate: str, defaults: RouteValueDictionary, constraints: IDictionary, dataTokens: RouteValueDictionary, inlineConstraintResolver: IInlineConstraintResolver): ...
    @overload
    def __init__(self, target: IRouter, routeName: str, routeTemplate: str, defaults: RouteValueDictionary, constraints: IDictionary, dataTokens: RouteValueDictionary, inlineConstraintResolver: IInlineConstraintResolver): ...
    @property
    def RouteTemplate(self) -> str: ...


class RouteBase:
    def __init__(self, template: str, name: str, constraintResolver: IInlineConstraintResolver, defaults: RouteValueDictionary, constraints: IDictionary, dataTokens: RouteValueDictionary): ...
    @property
    def Constraints(self) -> IDictionary: ...
    @property
    def DataTokens(self) -> RouteValueDictionary: ...
    @property
    def Defaults(self) -> RouteValueDictionary: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParsedTemplate(self) -> RouteTemplate: ...
    def GetVirtualPath(self, context: VirtualPathContext) -> VirtualPathData: ...
    def RouteAsync(self, context: RouteContext) -> Task: ...
    def ToString(self) -> str: ...


class RouteBuilder:
    @overload
    def __init__(self, applicationBuilder: IApplicationBuilder): ...
    @overload
    def __init__(self, applicationBuilder: IApplicationBuilder, defaultHandler: IRouter): ...
    def Build(self) -> IRouter: ...
    @property
    def ApplicationBuilder(self) -> IApplicationBuilder: ...
    @property
    def DefaultHandler(self) -> IRouter: ...
    @property
    def Routes(self) -> List[IRouter]: ...
    @property
    def ServiceProvider(self) -> IServiceProvider: ...
    @DefaultHandler.setter
    def DefaultHandler(self, value: IRouter) -> None: ...


class RouteCollection:
    def __init__(self): ...
    def Add(self, router: IRouter) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> IRouter: ...
    def GetVirtualPath(self, context: VirtualPathContext) -> VirtualPathData: ...
    def RouteAsync(self, context: RouteContext) -> Task: ...


class RouteConstraintBuilder:
    def __init__(self, inlineConstraintResolver: IInlineConstraintResolver, displayName: str): ...
    def AddConstraint(self, key: str, value: Object) -> None: ...
    def AddResolvedConstraint(self, key: str, constraintText: str) -> None: ...
    def Build(self) -> IDictionary: ...
    def SetOptional(self, key: str) -> None: ...


class RouteConstraintMatcher:
    def Match(constraints: IDictionary, routeValues: RouteValueDictionary, httpContext: HttpContext, route: IRouter, routeDirection: RouteDirection, logger: ILogger) -> bool: ...


class RouteCreationException:
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class RouteEndpoint(Endpoint):
    def __init__(self, requestDelegate: RequestDelegate, routePattern: RoutePattern, order: int, metadata: EndpointMetadataCollection, displayName: str): ...
    @property
    def Order(self) -> int: ...
    @property
    def RoutePattern(self) -> RoutePattern: ...


class RouteEndpointBuilder(EndpointBuilder):
    def __init__(self, requestDelegate: RequestDelegate, routePattern: RoutePattern, order: int): ...
    def Build(self) -> Endpoint: ...
    @property
    def Order(self) -> int: ...
    @property
    def RoutePattern(self) -> RoutePattern: ...
    @Order.setter
    def Order(self, value: int) -> None: ...
    @RoutePattern.setter
    def RoutePattern(self, value: RoutePattern) -> None: ...


class RouteHandler:
    def __init__(self, requestDelegate: RequestDelegate): ...
    def GetRequestHandler(self, httpContext: HttpContext, routeData: RouteData) -> RequestDelegate: ...
    def GetVirtualPath(self, context: VirtualPathContext) -> VirtualPathData: ...
    def RouteAsync(self, context: RouteContext) -> Task: ...


class RouteHandlerOptions:
    def __init__(self): ...
    @property
    def ThrowOnBadRequest(self) -> bool: ...
    @ThrowOnBadRequest.setter
    def ThrowOnBadRequest(self, value: bool) -> None: ...


class RouteNameMetadata:
    def __init__(self, routeName: str): ...
    @property
    def RouteName(self) -> str: ...


class RouteOptions:
    def __init__(self): ...
    @property
    def AppendTrailingSlash(self) -> bool: ...
    @property
    def ConstraintMap(self) -> IDictionary: ...
    @property
    def LowercaseQueryStrings(self) -> bool: ...
    @property
    def LowercaseUrls(self) -> bool: ...
    @property
    def SuppressCheckForUnhandledSecurityMetadata(self) -> bool: ...
    @AppendTrailingSlash.setter
    def AppendTrailingSlash(self, value: bool) -> None: ...
    @ConstraintMap.setter
    def ConstraintMap(self, value: IDictionary) -> None: ...
    @LowercaseQueryStrings.setter
    def LowercaseQueryStrings(self, value: bool) -> None: ...
    @LowercaseUrls.setter
    def LowercaseUrls(self, value: bool) -> None: ...
    @SuppressCheckForUnhandledSecurityMetadata.setter
    def SuppressCheckForUnhandledSecurityMetadata(self, value: bool) -> None: ...


class RouteValueEqualityComparer:
    def __init__(self): ...
    @overload
    def Equals(self, x: Object, y: Object) -> bool: ...
    @overload
    def GetHashCode(self, obj: Object) -> int: ...


class RouteValuesAddress:
    def __init__(self): ...
    @property
    def AmbientValues(self) -> RouteValueDictionary: ...
    @property
    def ExplicitValues(self) -> RouteValueDictionary: ...
    @property
    def RouteName(self) -> str: ...
    @AmbientValues.setter
    def AmbientValues(self, value: RouteValueDictionary) -> None: ...
    @ExplicitValues.setter
    def ExplicitValues(self, value: RouteValueDictionary) -> None: ...
    @RouteName.setter
    def RouteName(self, value: str) -> None: ...


class RoutingFeature:
    def __init__(self): ...
    @property
    def RouteData(self) -> RouteData: ...
    @RouteData.setter
    def RouteData(self, value: RouteData) -> None: ...


class SuppressLinkGenerationMetadata:
    def __init__(self): ...
    @property
    def SuppressLinkGeneration(self) -> bool: ...


class SuppressMatchingMetadata:
    def __init__(self): ...
    @property
    def SuppressMatching(self) -> bool: ...
