from typing import Tuple, Set, Iterable, List


class DataProtectionAdvancedExtensions:
    @overload
    def Protect(protector: ITimeLimitedDataProtector, plaintext: Set(Byte), lifetime: TimeSpan) -> Set(Byte): ...
    @overload
    def Protect(protector: ITimeLimitedDataProtector, plaintext: str, expiration: DateTimeOffset) -> str: ...
    @overload
    def Protect(protector: ITimeLimitedDataProtector, plaintext: str, lifetime: TimeSpan) -> str: ...
    def ToTimeLimitedDataProtector(protector: IDataProtector) -> ITimeLimitedDataProtector: ...
    def Unprotect(protector: ITimeLimitedDataProtector, protectedData: str) -> Tuple[str, DateTimeOffset]: ...


class DataProtectionProvider:
    @overload
    def Create(applicationName: str) -> IDataProtectionProvider: ...
    @overload
    def Create(keyDirectory: DirectoryInfo) -> IDataProtectionProvider: ...
    @overload
    def Create(keyDirectory: DirectoryInfo, setupAction: Action) -> IDataProtectionProvider: ...
    @overload
    def Create(applicationName: str, certificate: X509Certificate2) -> IDataProtectionProvider: ...
    @overload
    def Create(keyDirectory: DirectoryInfo, certificate: X509Certificate2) -> IDataProtectionProvider: ...
    @overload
    def Create(keyDirectory: DirectoryInfo, setupAction: Action, certificate: X509Certificate2) -> IDataProtectionProvider: ...


class ITimeLimitedDataProtector:
    def CreateProtector(self, purpose: str) -> ITimeLimitedDataProtector: ...
    def Protect(self, plaintext: Set(Byte), expiration: DateTimeOffset) -> Set(Byte): ...
    def Unprotect(self, protectedData: Set(Byte)) -> Tuple[Set(Byte), DateTimeOffset]: ...
