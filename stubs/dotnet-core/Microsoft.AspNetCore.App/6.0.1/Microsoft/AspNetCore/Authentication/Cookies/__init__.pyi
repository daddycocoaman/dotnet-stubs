from typing import Tuple, Set, Iterable, List


class ChunkingCookieManager:
    def __init__(self): ...
    def AppendResponseCookie(self, context: HttpContext, key: str, value: str, options: CookieOptions) -> None: ...
    def DeleteCookie(self, context: HttpContext, key: str, options: CookieOptions) -> None: ...
    @property
    def ChunkSize(self) -> Nullable: ...
    @property
    def ThrowForPartialCookies(self) -> bool: ...
    def GetRequestCookie(self, context: HttpContext, key: str) -> str: ...
    @ChunkSize.setter
    def ChunkSize(self, value: Nullable) -> None: ...
    @ThrowForPartialCookies.setter
    def ThrowForPartialCookies(self, value: bool) -> None: ...


class CookieAuthenticationDefaults:
    pass


class CookieAuthenticationEvents:
    def __init__(self): ...
    @property
    def OnCheckSlidingExpiration(self) -> Func: ...
    @property
    def OnRedirectToAccessDenied(self) -> Func: ...
    @property
    def OnRedirectToLogin(self) -> Func: ...
    @property
    def OnRedirectToLogout(self) -> Func: ...
    @property
    def OnRedirectToReturnUrl(self) -> Func: ...
    @property
    def OnSignedIn(self) -> Func: ...
    @property
    def OnSigningIn(self) -> Func: ...
    @property
    def OnSigningOut(self) -> Func: ...
    @property
    def OnValidatePrincipal(self) -> Func: ...
    def RedirectToAccessDenied(self, context: RedirectContext) -> Task: ...
    def RedirectToLogin(self, context: RedirectContext) -> Task: ...
    def RedirectToLogout(self, context: RedirectContext) -> Task: ...
    def RedirectToReturnUrl(self, context: RedirectContext) -> Task: ...
    @OnCheckSlidingExpiration.setter
    def OnCheckSlidingExpiration(self, value: Func) -> None: ...
    @OnRedirectToAccessDenied.setter
    def OnRedirectToAccessDenied(self, value: Func) -> None: ...
    @OnRedirectToLogin.setter
    def OnRedirectToLogin(self, value: Func) -> None: ...
    @OnRedirectToLogout.setter
    def OnRedirectToLogout(self, value: Func) -> None: ...
    @OnRedirectToReturnUrl.setter
    def OnRedirectToReturnUrl(self, value: Func) -> None: ...
    @OnSignedIn.setter
    def OnSignedIn(self, value: Func) -> None: ...
    @OnSigningIn.setter
    def OnSigningIn(self, value: Func) -> None: ...
    @OnSigningOut.setter
    def OnSigningOut(self, value: Func) -> None: ...
    @OnValidatePrincipal.setter
    def OnValidatePrincipal(self, value: Func) -> None: ...
    def SignedIn(self, context: CookieSignedInContext) -> Task: ...
    def SigningIn(self, context: CookieSigningInContext) -> Task: ...
    def SigningOut(self, context: CookieSigningOutContext) -> Task: ...
    def ValidatePrincipal(self, context: CookieValidatePrincipalContext) -> Task: ...


class CookieAuthenticationHandler:
    def __init__(self, options: IOptionsMonitor, logger: ILoggerFactory, encoder: UrlEncoder, clock: ISystemClock): ...


class CookieAuthenticationOptions(AuthenticationSchemeOptions):
    def __init__(self): ...
    @property
    def AccessDeniedPath(self) -> PathString: ...
    @property
    def Cookie(self) -> CookieBuilder: ...
    @property
    def CookieManager(self) -> ICookieManager: ...
    @property
    def DataProtectionProvider(self) -> IDataProtectionProvider: ...
    @property
    def Events(self) -> CookieAuthenticationEvents: ...
    @property
    def ExpireTimeSpan(self) -> TimeSpan: ...
    @property
    def LoginPath(self) -> PathString: ...
    @property
    def LogoutPath(self) -> PathString: ...
    @property
    def ReturnUrlParameter(self) -> str: ...
    @property
    def SessionStore(self) -> ITicketStore: ...
    @property
    def SlidingExpiration(self) -> bool: ...
    @property
    def TicketDataFormat(self) -> ISecureDataFormat: ...
    @AccessDeniedPath.setter
    def AccessDeniedPath(self, value: PathString) -> None: ...
    @Cookie.setter
    def Cookie(self, value: CookieBuilder) -> None: ...
    @CookieManager.setter
    def CookieManager(self, value: ICookieManager) -> None: ...
    @DataProtectionProvider.setter
    def DataProtectionProvider(self, value: IDataProtectionProvider) -> None: ...
    @Events.setter
    def Events(self, value: CookieAuthenticationEvents) -> None: ...
    @ExpireTimeSpan.setter
    def ExpireTimeSpan(self, value: TimeSpan) -> None: ...
    @LoginPath.setter
    def LoginPath(self, value: PathString) -> None: ...
    @LogoutPath.setter
    def LogoutPath(self, value: PathString) -> None: ...
    @ReturnUrlParameter.setter
    def ReturnUrlParameter(self, value: str) -> None: ...
    @SessionStore.setter
    def SessionStore(self, value: ITicketStore) -> None: ...
    @SlidingExpiration.setter
    def SlidingExpiration(self, value: bool) -> None: ...
    @TicketDataFormat.setter
    def TicketDataFormat(self, value: ISecureDataFormat) -> None: ...


class CookieSignedInContext:
    def __init__(self, context: HttpContext, scheme: AuthenticationScheme, principal: ClaimsPrincipal, properties: AuthenticationProperties, options: CookieAuthenticationOptions): ...


class CookieSigningInContext:
    def __init__(self, context: HttpContext, scheme: AuthenticationScheme, options: CookieAuthenticationOptions, principal: ClaimsPrincipal, properties: AuthenticationProperties, cookieOptions: CookieOptions): ...
    @property
    def CookieOptions(self) -> CookieOptions: ...
    @CookieOptions.setter
    def CookieOptions(self, value: CookieOptions) -> None: ...


class CookieSigningOutContext:
    def __init__(self, context: HttpContext, scheme: AuthenticationScheme, options: CookieAuthenticationOptions, properties: AuthenticationProperties, cookieOptions: CookieOptions): ...
    @property
    def CookieOptions(self) -> CookieOptions: ...
    @CookieOptions.setter
    def CookieOptions(self, value: CookieOptions) -> None: ...


class CookieSlidingExpirationContext:
    def __init__(self, context: HttpContext, scheme: AuthenticationScheme, options: CookieAuthenticationOptions, ticket: AuthenticationTicket, elapsedTime: TimeSpan, remainingTime: TimeSpan): ...
    @property
    def ElapsedTime(self) -> TimeSpan: ...
    @property
    def RemainingTime(self) -> TimeSpan: ...
    @property
    def ShouldRenew(self) -> bool: ...
    @ShouldRenew.setter
    def ShouldRenew(self, value: bool) -> None: ...


class CookieValidatePrincipalContext:
    def __init__(self, context: HttpContext, scheme: AuthenticationScheme, options: CookieAuthenticationOptions, ticket: AuthenticationTicket): ...
    @property
    def ShouldRenew(self) -> bool: ...
    def RejectPrincipal(self) -> None: ...
    def ReplacePrincipal(self, principal: ClaimsPrincipal) -> None: ...
    @ShouldRenew.setter
    def ShouldRenew(self, value: bool) -> None: ...


class ICookieManager:
    def AppendResponseCookie(self, context: HttpContext, key: str, value: str, options: CookieOptions) -> None: ...
    def DeleteCookie(self, context: HttpContext, key: str, options: CookieOptions) -> None: ...
    def GetRequestCookie(self, context: HttpContext, key: str) -> str: ...


class ITicketStore:
    @overload
    def RemoveAsync(self, key: str) -> Task: ...
    @overload
    def RemoveAsync(self, key: str, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def RenewAsync(self, key: str, ticket: AuthenticationTicket) -> Task: ...
    @overload
    def RenewAsync(self, key: str, ticket: AuthenticationTicket, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def RetrieveAsync(self, key: str) -> Task: ...
    @overload
    def RetrieveAsync(self, key: str, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def StoreAsync(self, ticket: AuthenticationTicket) -> Task: ...
    @overload
    def StoreAsync(self, ticket: AuthenticationTicket, cancellationToken: CancellationToken) -> Task: ...


class PostConfigureCookieAuthenticationOptions:
    def __init__(self, dataProtection: IDataProtectionProvider): ...
    def PostConfigure(self, name: str, options: CookieAuthenticationOptions) -> None: ...
