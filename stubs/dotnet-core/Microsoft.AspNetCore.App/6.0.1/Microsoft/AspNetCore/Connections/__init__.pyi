__all__ = ['Features']
from typing import Tuple, Set, Iterable, List


class AddressInUseException:
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class BaseConnectionContext:
    @overload
    def Abort(self) -> None: ...
    @overload
    def Abort(self, abortReason: ConnectionAbortedException) -> None: ...
    def DisposeAsync(self) -> ValueTask: ...
    @property
    def ConnectionClosed(self) -> CancellationToken: ...
    @property
    def ConnectionId(self) -> str: ...
    @property
    def Features(self) -> IFeatureCollection: ...
    @property
    def Items(self) -> IDictionary: ...
    @property
    def LocalEndPoint(self) -> EndPoint: ...
    @property
    def RemoteEndPoint(self) -> EndPoint: ...
    @ConnectionClosed.setter
    def ConnectionClosed(self, value: CancellationToken) -> None: ...
    @ConnectionId.setter
    def ConnectionId(self, value: str) -> None: ...
    @Items.setter
    def Items(self, value: IDictionary) -> None: ...
    @LocalEndPoint.setter
    def LocalEndPoint(self, value: EndPoint) -> None: ...
    @RemoteEndPoint.setter
    def RemoteEndPoint(self, value: EndPoint) -> None: ...


class ConnectionAbortedException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class ConnectionBuilder:
    def __init__(self, applicationServices: IServiceProvider): ...
    def Build(self) -> ConnectionDelegate: ...
    @property
    def ApplicationServices(self) -> IServiceProvider: ...
    def Use(self, middleware: Func) -> IConnectionBuilder: ...


class ConnectionBuilderExtensions:
    def Run(connectionBuilder: IConnectionBuilder, middleware: Func) -> IConnectionBuilder: ...
    def Use(connectionBuilder: IConnectionBuilder, middleware: Func`3) -> IConnectionBuilder: ...
    def UseConnectionHandler(connectionBuilder: IConnectionBuilder) -> IConnectionBuilder: ...


class ConnectionContext(BaseConnectionContext):
    @overload
    def Abort(self) -> None: ...
    @overload
    def Abort(self, abortReason: ConnectionAbortedException) -> None: ...
    @property
    def Transport(self) -> IDuplexPipe: ...
    @Transport.setter
    def Transport(self, value: IDuplexPipe) -> None: ...


class ConnectionDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, connection: ConnectionContext, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Task: ...
    def Invoke(self, connection: ConnectionContext) -> Task: ...


class ConnectionHandler:
    def OnConnectedAsync(self, connection: ConnectionContext) -> Task: ...


class ConnectionItems:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: IDictionary): ...
    @property
    def Items(self) -> IDictionary: ...


class ConnectionResetException:
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class DefaultConnectionContext(ConnectionContext):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, id: str): ...
    @overload
    def __init__(self, id: str, transport: IDuplexPipe, application: IDuplexPipe): ...
    @overload
    def Abort(self, abortReason: ConnectionAbortedException) -> None: ...
    def DisposeAsync(self) -> ValueTask: ...
    @property
    def Application(self) -> IDuplexPipe: ...
    @property
    def ConnectionClosed(self) -> CancellationToken: ...
    @property
    def ConnectionId(self) -> str: ...
    @property
    def Features(self) -> IFeatureCollection: ...
    @property
    def Items(self) -> IDictionary: ...
    @property
    def LocalEndPoint(self) -> EndPoint: ...
    @property
    def RemoteEndPoint(self) -> EndPoint: ...
    @property
    def Transport(self) -> IDuplexPipe: ...
    @property
    def User(self) -> ClaimsPrincipal: ...
    @Application.setter
    def Application(self, value: IDuplexPipe) -> None: ...
    @ConnectionClosed.setter
    def ConnectionClosed(self, value: CancellationToken) -> None: ...
    @ConnectionId.setter
    def ConnectionId(self, value: str) -> None: ...
    @Items.setter
    def Items(self, value: IDictionary) -> None: ...
    @LocalEndPoint.setter
    def LocalEndPoint(self, value: EndPoint) -> None: ...
    @RemoteEndPoint.setter
    def RemoteEndPoint(self, value: EndPoint) -> None: ...
    @Transport.setter
    def Transport(self, value: IDuplexPipe) -> None: ...
    @User.setter
    def User(self, value: ClaimsPrincipal) -> None: ...


class FileHandleEndPoint:
    def __init__(self, fileHandle: UInt64, fileHandleType: FileHandleType): ...
    @property
    def FileHandle(self) -> UInt64: ...
    @property
    def FileHandleType(self) -> FileHandleType: ...


class FileHandleType:
    Auto = 0
    Tcp = 1
    Pipe = 2


class IConnectionBuilder:
    def Build(self) -> ConnectionDelegate: ...
    @property
    def ApplicationServices(self) -> IServiceProvider: ...
    def Use(self, middleware: Func) -> IConnectionBuilder: ...


class IConnectionFactory:
    def ConnectAsync(self, endpoint: EndPoint, cancellationToken: CancellationToken) -> ValueTask: ...


class IConnectionListener:
    def AcceptAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...
    @property
    def EndPoint(self) -> EndPoint: ...
    def UnbindAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...


class IConnectionListenerFactory:
    def BindAsync(self, endpoint: EndPoint, cancellationToken: CancellationToken) -> ValueTask: ...


class IMultiplexedConnectionBuilder:
    def Build(self) -> MultiplexedConnectionDelegate: ...
    @property
    def ApplicationServices(self) -> IServiceProvider: ...
    def Use(self, middleware: Func) -> IMultiplexedConnectionBuilder: ...


class IMultiplexedConnectionFactory:
    def ConnectAsync(self, endpoint: EndPoint, features: IFeatureCollection, cancellationToken: CancellationToken) -> ValueTask: ...


class IMultiplexedConnectionListener:
    def AcceptAsync(self, features: IFeatureCollection, cancellationToken: CancellationToken) -> ValueTask: ...
    @property
    def EndPoint(self) -> EndPoint: ...
    def UnbindAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...


class IMultiplexedConnectionListenerFactory:
    def BindAsync(self, endpoint: EndPoint, features: IFeatureCollection, cancellationToken: CancellationToken) -> ValueTask: ...


class MultiplexedConnectionBuilder:
    def __init__(self, applicationServices: IServiceProvider): ...
    def Build(self) -> MultiplexedConnectionDelegate: ...
    @property
    def ApplicationServices(self) -> IServiceProvider: ...
    def Use(self, middleware: Func) -> IMultiplexedConnectionBuilder: ...


class MultiplexedConnectionContext(BaseConnectionContext):
    def AcceptAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...
    def ConnectAsync(self, features: IFeatureCollection, cancellationToken: CancellationToken) -> ValueTask: ...


class MultiplexedConnectionDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, connection: MultiplexedConnectionContext, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Task: ...
    def Invoke(self, connection: MultiplexedConnectionContext) -> Task: ...


class TransferFormat:
    Binary = 1
    Text = 2


class UriEndPoint:
    def __init__(self, uri: Uri): ...
    @property
    def Uri(self) -> Uri: ...
    def ToString(self) -> str: ...
