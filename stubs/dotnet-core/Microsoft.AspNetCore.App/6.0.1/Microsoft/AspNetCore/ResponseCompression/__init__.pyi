from typing import Tuple, Set, Iterable, List


class BrotliCompressionProvider:
    def __init__(self, options: IOptions): ...
    def CreateStream(self, outputStream: Stream) -> Stream: ...
    @property
    def EncodingName(self) -> str: ...
    @property
    def SupportsFlush(self) -> bool: ...


class BrotliCompressionProviderOptions:
    def __init__(self): ...
    @property
    def Level(self) -> CompressionLevel: ...
    @Level.setter
    def Level(self, value: CompressionLevel) -> None: ...


class CompressionProviderCollection:
    def __init__(self): ...
    @overload
    def Add(self) -> None: ...
    @overload
    def Add(self, providerType: Type) -> None: ...


class GzipCompressionProvider:
    def __init__(self, options: IOptions): ...
    def CreateStream(self, outputStream: Stream) -> Stream: ...
    @property
    def EncodingName(self) -> str: ...
    @property
    def SupportsFlush(self) -> bool: ...


class GzipCompressionProviderOptions:
    def __init__(self): ...
    @property
    def Level(self) -> CompressionLevel: ...
    @Level.setter
    def Level(self, value: CompressionLevel) -> None: ...


class ICompressionProvider:
    def CreateStream(self, outputStream: Stream) -> Stream: ...
    @property
    def EncodingName(self) -> str: ...
    @property
    def SupportsFlush(self) -> bool: ...


class IResponseCompressionProvider:
    def CheckRequestAcceptsCompression(self, context: HttpContext) -> bool: ...
    def GetCompressionProvider(self, context: HttpContext) -> ICompressionProvider: ...
    def ShouldCompressResponse(self, context: HttpContext) -> bool: ...


class ResponseCompressionDefaults:
    def __init__(self): ...


class ResponseCompressionMiddleware:
    def __init__(self, next: RequestDelegate, provider: IResponseCompressionProvider): ...
    def Invoke(self, context: HttpContext) -> Task: ...


class ResponseCompressionOptions:
    def __init__(self): ...
    @property
    def EnableForHttps(self) -> bool: ...
    @property
    def ExcludedMimeTypes(self) -> Iterable[str]: ...
    @property
    def MimeTypes(self) -> Iterable[str]: ...
    @property
    def Providers(self) -> CompressionProviderCollection: ...
    @EnableForHttps.setter
    def EnableForHttps(self, value: bool) -> None: ...
    @ExcludedMimeTypes.setter
    def ExcludedMimeTypes(self, value: Iterable[str]) -> None: ...
    @MimeTypes.setter
    def MimeTypes(self, value: Iterable[str]) -> None: ...


class ResponseCompressionProvider:
    def __init__(self, services: IServiceProvider, options: IOptions): ...
    def CheckRequestAcceptsCompression(self, context: HttpContext) -> bool: ...
    def GetCompressionProvider(self, context: HttpContext) -> ICompressionProvider: ...
    def ShouldCompressResponse(self, context: HttpContext) -> bool: ...
