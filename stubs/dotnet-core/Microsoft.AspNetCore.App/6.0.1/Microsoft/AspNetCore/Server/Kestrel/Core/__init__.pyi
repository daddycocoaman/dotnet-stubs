__all__ = ['Features']
from typing import Tuple, Set, Iterable, List


class Http2Limits:
    def __init__(self): ...
    @property
    def HeaderTableSize(self) -> int: ...
    @property
    def InitialConnectionWindowSize(self) -> int: ...
    @property
    def InitialStreamWindowSize(self) -> int: ...
    @property
    def KeepAlivePingDelay(self) -> TimeSpan: ...
    @property
    def KeepAlivePingTimeout(self) -> TimeSpan: ...
    @property
    def MaxFrameSize(self) -> int: ...
    @property
    def MaxRequestHeaderFieldSize(self) -> int: ...
    @property
    def MaxStreamsPerConnection(self) -> int: ...
    @HeaderTableSize.setter
    def HeaderTableSize(self, value: int) -> None: ...
    @InitialConnectionWindowSize.setter
    def InitialConnectionWindowSize(self, value: int) -> None: ...
    @InitialStreamWindowSize.setter
    def InitialStreamWindowSize(self, value: int) -> None: ...
    @KeepAlivePingDelay.setter
    def KeepAlivePingDelay(self, value: TimeSpan) -> None: ...
    @KeepAlivePingTimeout.setter
    def KeepAlivePingTimeout(self, value: TimeSpan) -> None: ...
    @MaxFrameSize.setter
    def MaxFrameSize(self, value: int) -> None: ...
    @MaxRequestHeaderFieldSize.setter
    def MaxRequestHeaderFieldSize(self, value: int) -> None: ...
    @MaxStreamsPerConnection.setter
    def MaxStreamsPerConnection(self, value: int) -> None: ...


class Http3Limits:
    def __init__(self): ...
    @property
    def MaxRequestHeaderFieldSize(self) -> int: ...
    @MaxRequestHeaderFieldSize.setter
    def MaxRequestHeaderFieldSize(self, value: int) -> None: ...


class HttpProtocols:
    #None = 0
    Http1 = 1
    Http2 = 2
    Http1AndHttp2 = 3
    Http3 = 4
    Http1AndHttp2AndHttp3 = 7


class KestrelServer:
    def __init__(self, options: IOptions, transportFactory: IConnectionListenerFactory, loggerFactory: ILoggerFactory): ...
    def Dispose(self) -> None: ...
    @property
    def Features(self) -> IFeatureCollection: ...
    @property
    def Options(self) -> KestrelServerOptions: ...
    def StartAsync(self, application: IHttpApplication, cancellationToken: CancellationToken) -> Task: ...
    def StopAsync(self, cancellationToken: CancellationToken) -> Task: ...


class KestrelServerLimits:
    def __init__(self): ...
    @property
    def Http2(self) -> Http2Limits: ...
    @property
    def Http3(self) -> Http3Limits: ...
    @property
    def KeepAliveTimeout(self) -> TimeSpan: ...
    @property
    def MaxConcurrentConnections(self) -> Nullable: ...
    @property
    def MaxConcurrentUpgradedConnections(self) -> Nullable: ...
    @property
    def MaxRequestBodySize(self) -> Nullable: ...
    @property
    def MaxRequestBufferSize(self) -> Nullable: ...
    @property
    def MaxRequestHeaderCount(self) -> int: ...
    @property
    def MaxRequestHeadersTotalSize(self) -> int: ...
    @property
    def MaxRequestLineSize(self) -> int: ...
    @property
    def MaxResponseBufferSize(self) -> Nullable: ...
    @property
    def MinRequestBodyDataRate(self) -> MinDataRate: ...
    @property
    def MinResponseDataRate(self) -> MinDataRate: ...
    @property
    def RequestHeadersTimeout(self) -> TimeSpan: ...
    @KeepAliveTimeout.setter
    def KeepAliveTimeout(self, value: TimeSpan) -> None: ...
    @MaxConcurrentConnections.setter
    def MaxConcurrentConnections(self, value: Nullable) -> None: ...
    @MaxConcurrentUpgradedConnections.setter
    def MaxConcurrentUpgradedConnections(self, value: Nullable) -> None: ...
    @MaxRequestBodySize.setter
    def MaxRequestBodySize(self, value: Nullable) -> None: ...
    @MaxRequestBufferSize.setter
    def MaxRequestBufferSize(self, value: Nullable) -> None: ...
    @MaxRequestHeaderCount.setter
    def MaxRequestHeaderCount(self, value: int) -> None: ...
    @MaxRequestHeadersTotalSize.setter
    def MaxRequestHeadersTotalSize(self, value: int) -> None: ...
    @MaxRequestLineSize.setter
    def MaxRequestLineSize(self, value: int) -> None: ...
    @MaxResponseBufferSize.setter
    def MaxResponseBufferSize(self, value: Nullable) -> None: ...
    @MinRequestBodyDataRate.setter
    def MinRequestBodyDataRate(self, value: MinDataRate) -> None: ...
    @MinResponseDataRate.setter
    def MinResponseDataRate(self, value: MinDataRate) -> None: ...
    @RequestHeadersTimeout.setter
    def RequestHeadersTimeout(self, value: TimeSpan) -> None: ...


class KestrelServerOptions:
    def __init__(self): ...
    @overload
    def Configure(self) -> KestrelConfigurationLoader: ...
    @overload
    def Configure(self, config: IConfiguration) -> KestrelConfigurationLoader: ...
    @overload
    def Configure(self, config: IConfiguration, reloadOnChange: bool) -> KestrelConfigurationLoader: ...
    def ConfigureEndpointDefaults(self, configureOptions: Action) -> None: ...
    def ConfigureHttpsDefaults(self, configureOptions: Action) -> None: ...
    @property
    def AddServerHeader(self) -> bool: ...
    @property
    def AllowAlternateSchemes(self) -> bool: ...
    @property
    def AllowResponseHeaderCompression(self) -> bool: ...
    @property
    def AllowSynchronousIO(self) -> bool: ...
    @property
    def ApplicationServices(self) -> IServiceProvider: ...
    @property
    def ConfigurationLoader(self) -> KestrelConfigurationLoader: ...
    @property
    def DisableStringReuse(self) -> bool: ...
    @property
    def EnableAltSvc(self) -> bool: ...
    @property
    def Limits(self) -> KestrelServerLimits: ...
    @property
    def RequestHeaderEncodingSelector(self) -> Func: ...
    @property
    def ResponseHeaderEncodingSelector(self) -> Func: ...
    @overload
    def Listen(self, endPoint: IPEndPoint) -> None: ...
    @overload
    def Listen(self, endPoint: EndPoint) -> None: ...
    @overload
    def Listen(self, endPoint: EndPoint, configure: Action) -> None: ...
    @overload
    def Listen(self, address: IPAddress, port: int) -> None: ...
    @overload
    def Listen(self, endPoint: IPEndPoint, configure: Action) -> None: ...
    @overload
    def Listen(self, address: IPAddress, port: int, configure: Action) -> None: ...
    @overload
    def ListenAnyIP(self, port: int) -> None: ...
    @overload
    def ListenAnyIP(self, port: int, configure: Action) -> None: ...
    @overload
    def ListenHandle(self, handle: UInt64) -> None: ...
    @overload
    def ListenHandle(self, handle: UInt64, configure: Action) -> None: ...
    @overload
    def ListenLocalhost(self, port: int) -> None: ...
    @overload
    def ListenLocalhost(self, port: int, configure: Action) -> None: ...
    @overload
    def ListenUnixSocket(self, socketPath: str) -> None: ...
    @overload
    def ListenUnixSocket(self, socketPath: str, configure: Action) -> None: ...
    @AddServerHeader.setter
    def AddServerHeader(self, value: bool) -> None: ...
    @AllowAlternateSchemes.setter
    def AllowAlternateSchemes(self, value: bool) -> None: ...
    @AllowResponseHeaderCompression.setter
    def AllowResponseHeaderCompression(self, value: bool) -> None: ...
    @AllowSynchronousIO.setter
    def AllowSynchronousIO(self, value: bool) -> None: ...
    @ApplicationServices.setter
    def ApplicationServices(self, value: IServiceProvider) -> None: ...
    @ConfigurationLoader.setter
    def ConfigurationLoader(self, value: KestrelConfigurationLoader) -> None: ...
    @DisableStringReuse.setter
    def DisableStringReuse(self, value: bool) -> None: ...
    @EnableAltSvc.setter
    def EnableAltSvc(self, value: bool) -> None: ...
    @RequestHeaderEncodingSelector.setter
    def RequestHeaderEncodingSelector(self, value: Func) -> None: ...
    @ResponseHeaderEncodingSelector.setter
    def ResponseHeaderEncodingSelector(self, value: Func) -> None: ...


class ListenOptions:
    def Build(self) -> ConnectionDelegate: ...
    @property
    def ApplicationServices(self) -> IServiceProvider: ...
    @property
    def DisableAltSvcHeader(self) -> bool: ...
    @property
    def EndPoint(self) -> EndPoint: ...
    @property
    def FileHandle(self) -> UInt64: ...
    @property
    def IPEndPoint(self) -> IPEndPoint: ...
    @property
    def KestrelServerOptions(self) -> KestrelServerOptions: ...
    @property
    def Protocols(self) -> HttpProtocols: ...
    @property
    def SocketPath(self) -> str: ...
    @DisableAltSvcHeader.setter
    def DisableAltSvcHeader(self, value: bool) -> None: ...
    @Protocols.setter
    def Protocols(self, value: HttpProtocols) -> None: ...
    def ToString(self) -> str: ...
    def Use(self, middleware: Func) -> IConnectionBuilder: ...


class MinDataRate:
    def __init__(self, bytesPerSecond: float, gracePeriod: TimeSpan): ...
    @property
    def BytesPerSecond(self) -> float: ...
    @property
    def GracePeriod(self) -> TimeSpan: ...
    def ToString(self) -> str: ...
