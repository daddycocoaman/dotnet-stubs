from typing import Tuple, Set, Iterable, List


class ContentViewComponentResult:
    def __init__(self, content: str): ...
    def Execute(self, context: ViewComponentContext) -> None: ...
    def ExecuteAsync(self, context: ViewComponentContext) -> Task: ...
    @property
    def Content(self) -> str: ...


class DefaultViewComponentDescriptorCollectionProvider:
    def __init__(self, descriptorProvider: IViewComponentDescriptorProvider): ...
    @property
    def ViewComponents(self) -> ViewComponentDescriptorCollection: ...


class DefaultViewComponentDescriptorProvider:
    def __init__(self, partManager: ApplicationPartManager): ...
    def GetViewComponents(self) -> Iterable[ViewComponentDescriptor]: ...


class DefaultViewComponentFactory:
    def __init__(self, activator: IViewComponentActivator): ...
    def CreateViewComponent(self, context: ViewComponentContext) -> Object: ...
    def ReleaseViewComponent(self, context: ViewComponentContext, component: Object) -> None: ...
    def ReleaseViewComponentAsync(self, context: ViewComponentContext, component: Object) -> ValueTask: ...


class DefaultViewComponentHelper:
    def __init__(self, descriptorProvider: IViewComponentDescriptorCollectionProvider, htmlEncoder: HtmlEncoder, selector: IViewComponentSelector, invokerFactory: IViewComponentInvokerFactory, viewBufferScope: IViewBufferScope): ...
    def Contextualize(self, viewContext: ViewContext) -> None: ...
    @overload
    def InvokeAsync(self, name: str, arguments: Object) -> Task: ...
    @overload
    def InvokeAsync(self, componentType: Type, arguments: Object) -> Task: ...


class DefaultViewComponentSelector:
    def __init__(self, descriptorProvider: IViewComponentDescriptorCollectionProvider): ...
    def SelectComponent(self, componentName: str) -> ViewComponentDescriptor: ...


class HtmlContentViewComponentResult:
    def __init__(self, encodedContent: IHtmlContent): ...
    def Execute(self, context: ViewComponentContext) -> None: ...
    def ExecuteAsync(self, context: ViewComponentContext) -> Task: ...
    @property
    def EncodedContent(self) -> IHtmlContent: ...


class IViewComponentActivator:
    def Create(self, context: ViewComponentContext) -> Object: ...
    def Release(self, context: ViewComponentContext, viewComponent: Object) -> None: ...
    def ReleaseAsync(self, context: ViewComponentContext, viewComponent: Object) -> ValueTask: ...


class IViewComponentDescriptorCollectionProvider:
    @property
    def ViewComponents(self) -> ViewComponentDescriptorCollection: ...


class IViewComponentDescriptorProvider:
    def GetViewComponents(self) -> Iterable[ViewComponentDescriptor]: ...


class IViewComponentFactory:
    def CreateViewComponent(self, context: ViewComponentContext) -> Object: ...
    def ReleaseViewComponent(self, context: ViewComponentContext, component: Object) -> None: ...
    def ReleaseViewComponentAsync(self, context: ViewComponentContext, component: Object) -> ValueTask: ...


class IViewComponentInvoker:
    def InvokeAsync(self, context: ViewComponentContext) -> Task: ...


class IViewComponentInvokerFactory:
    def CreateInstance(self, context: ViewComponentContext) -> IViewComponentInvoker: ...


class IViewComponentSelector:
    def SelectComponent(self, componentName: str) -> ViewComponentDescriptor: ...


class ServiceBasedViewComponentActivator:
    def __init__(self): ...
    def Create(self, context: ViewComponentContext) -> Object: ...
    def Release(self, context: ViewComponentContext, viewComponent: Object) -> None: ...


class ViewComponentContext:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, viewComponentDescriptor: ViewComponentDescriptor, arguments: IDictionary, htmlEncoder: HtmlEncoder, viewContext: ViewContext, writer: TextWriter): ...
    @property
    def Arguments(self) -> IDictionary: ...
    @property
    def HtmlEncoder(self) -> HtmlEncoder: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def ViewComponentDescriptor(self) -> ViewComponentDescriptor: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    @property
    def Writer(self) -> TextWriter: ...
    @Arguments.setter
    def Arguments(self, value: IDictionary) -> None: ...
    @HtmlEncoder.setter
    def HtmlEncoder(self, value: HtmlEncoder) -> None: ...
    @ViewComponentDescriptor.setter
    def ViewComponentDescriptor(self, value: ViewComponentDescriptor) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class ViewComponentContextAttribute:
    def __init__(self): ...


class ViewComponentConventions:
    def GetComponentFullName(componentType: TypeInfo) -> str: ...
    def GetComponentName(componentType: TypeInfo) -> str: ...
    def IsComponent(typeInfo: TypeInfo) -> bool: ...


class ViewComponentDescriptor:
    def __init__(self): ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def FullName(self) -> str: ...
    @property
    def Id(self) -> str: ...
    @property
    def MethodInfo(self) -> MethodInfo: ...
    @property
    def Parameters(self) -> IReadOnlyList: ...
    @property
    def ShortName(self) -> str: ...
    @property
    def TypeInfo(self) -> TypeInfo: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @FullName.setter
    def FullName(self, value: str) -> None: ...
    @Id.setter
    def Id(self, value: str) -> None: ...
    @MethodInfo.setter
    def MethodInfo(self, value: MethodInfo) -> None: ...
    @Parameters.setter
    def Parameters(self, value: IReadOnlyList) -> None: ...
    @ShortName.setter
    def ShortName(self, value: str) -> None: ...
    @TypeInfo.setter
    def TypeInfo(self, value: TypeInfo) -> None: ...


class ViewComponentDescriptorCollection:
    def __init__(self, items: Iterable[ViewComponentDescriptor], version: int): ...
    @property
    def Items(self) -> IReadOnlyList: ...
    @property
    def Version(self) -> int: ...


class ViewComponentFeature:
    def __init__(self): ...
    @property
    def ViewComponents(self) -> List[TypeInfo]: ...


class ViewComponentFeatureProvider:
    def __init__(self): ...
    def PopulateFeature(self, parts: Iterable[ApplicationPart], feature: ViewComponentFeature) -> None: ...


class ViewViewComponentResult:
    def __init__(self): ...
    def Execute(self, context: ViewComponentContext) -> None: ...
    def ExecuteAsync(self, context: ViewComponentContext) -> Task: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    @property
    def ViewEngine(self) -> IViewEngine: ...
    @property
    def ViewName(self) -> str: ...
    @TempData.setter
    def TempData(self, value: ITempDataDictionary) -> None: ...
    @ViewData.setter
    def ViewData(self, value: ViewDataDictionary) -> None: ...
    @ViewEngine.setter
    def ViewEngine(self, value: IViewEngine) -> None: ...
    @ViewName.setter
    def ViewName(self, value: str) -> None: ...
