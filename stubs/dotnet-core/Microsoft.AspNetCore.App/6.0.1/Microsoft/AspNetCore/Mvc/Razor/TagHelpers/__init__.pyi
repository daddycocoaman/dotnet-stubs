from typing import Tuple, Set, Iterable, List


class BodyTagHelper(TagHelperComponentTagHelper):
    def __init__(self, manager: ITagHelperComponentManager, loggerFactory: ILoggerFactory): ...


class HeadTagHelper(TagHelperComponentTagHelper):
    def __init__(self, manager: ITagHelperComponentManager, loggerFactory: ILoggerFactory): ...


class ITagHelperComponentManager:
    @property
    def Components(self) -> ICollection: ...


class ITagHelperComponentPropertyActivator:
    def Activate(self, context: ViewContext, tagHelperComponent: ITagHelperComponent) -> None: ...


class TagHelperComponentTagHelper(TagHelper):
    def __init__(self, manager: ITagHelperComponentManager, loggerFactory: ILoggerFactory): ...
    @property
    def PropertyActivator(self) -> ITagHelperComponentPropertyActivator: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Init(self, context: TagHelperContext) -> None: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...
    @PropertyActivator.setter
    def PropertyActivator(self, value: ITagHelperComponentPropertyActivator) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...


class TagHelperFeature:
    def __init__(self): ...
    @property
    def TagHelpers(self) -> List[TypeInfo]: ...


class TagHelperFeatureProvider:
    def __init__(self): ...
    def PopulateFeature(self, parts: Iterable[ApplicationPart], feature: TagHelperFeature) -> None: ...


class UrlResolutionTagHelper(TagHelper):
    def __init__(self, urlHelperFactory: IUrlHelperFactory, htmlEncoder: HtmlEncoder): ...
    @property
    def Order(self) -> int: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    @ViewContext.setter
    def ViewContext(self, value: ViewContext) -> None: ...
