from typing import Tuple, Set, Iterable, List


class CompiledViewDescriptor:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item: RazorCompiledItem): ...
    @overload
    def __init__(self, item: RazorCompiledItem, attribute: RazorViewAttribute): ...
    @property
    def ExpirationTokens(self) -> List[IChangeToken]: ...
    @property
    def Item(self) -> RazorCompiledItem: ...
    @property
    def RelativePath(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    @property
    def ViewAttribute(self) -> RazorViewAttribute: ...
    @ExpirationTokens.setter
    def ExpirationTokens(self, value: List[IChangeToken]) -> None: ...
    @Item.setter
    def Item(self, value: RazorCompiledItem) -> None: ...
    @RelativePath.setter
    def RelativePath(self, value: str) -> None: ...
    @ViewAttribute.setter
    def ViewAttribute(self, value: RazorViewAttribute) -> None: ...


class IViewCompiler:
    def CompileAsync(self, relativePath: str) -> Task: ...


class IViewCompilerProvider:
    def GetCompiler(self) -> IViewCompiler: ...


class ViewsFeature:
    def __init__(self): ...
    @property
    def ViewDescriptors(self) -> List[CompiledViewDescriptor]: ...
