from typing import Tuple, Set, Iterable, List


class IPageApplicationModelConvention:
    def Apply(self, model: PageApplicationModel) -> None: ...


class IPageApplicationModelPartsProvider:
    def CreateHandlerModel(self, method: MethodInfo) -> PageHandlerModel: ...
    def CreateParameterModel(self, parameter: ParameterInfo) -> PageParameterModel: ...
    def CreatePropertyModel(self, property: PropertyInfo) -> PagePropertyModel: ...
    def IsHandler(self, methodInfo: MethodInfo) -> bool: ...


class IPageApplicationModelProvider:
    @property
    def Order(self) -> int: ...
    def OnProvidersExecuted(self, context: PageApplicationModelProviderContext) -> None: ...
    def OnProvidersExecuting(self, context: PageApplicationModelProviderContext) -> None: ...


class IPageConvention:
    pass


class IPageHandlerModelConvention:
    def Apply(self, model: PageHandlerModel) -> None: ...


class IPageRouteModelConvention:
    def Apply(self, model: PageRouteModel) -> None: ...


class IPageRouteModelProvider:
    @property
    def Order(self) -> int: ...
    def OnProvidersExecuted(self, context: PageRouteModelProviderContext) -> None: ...
    def OnProvidersExecuting(self, context: PageRouteModelProviderContext) -> None: ...


class PageApplicationModel:
    @overload
    def __init__(self, other: PageApplicationModel): ...
    @overload
    def __init__(self, actionDescriptor: PageActionDescriptor, handlerType: TypeInfo, handlerAttributes: IReadOnlyList): ...
    @overload
    def __init__(self, actionDescriptor: PageActionDescriptor, declaredModelType: TypeInfo, handlerType: TypeInfo, handlerAttributes: IReadOnlyList): ...
    @property
    def ActionDescriptor(self) -> PageActionDescriptor: ...
    @property
    def AreaName(self) -> str: ...
    @property
    def DeclaredModelType(self) -> TypeInfo: ...
    @property
    def EndpointMetadata(self) -> List[Object]: ...
    @property
    def Filters(self) -> List[IFilterMetadata]: ...
    @property
    def HandlerMethods(self) -> List[PageHandlerModel]: ...
    @property
    def HandlerProperties(self) -> List[PagePropertyModel]: ...
    @property
    def HandlerType(self) -> TypeInfo: ...
    @property
    def HandlerTypeAttributes(self) -> IReadOnlyList: ...
    @property
    def ModelType(self) -> TypeInfo: ...
    @property
    def PageType(self) -> TypeInfo: ...
    @property
    def Properties(self) -> IDictionary: ...
    @property
    def RelativePath(self) -> str: ...
    @property
    def RouteTemplate(self) -> str: ...
    @property
    def ViewEnginePath(self) -> str: ...
    @ModelType.setter
    def ModelType(self, value: TypeInfo) -> None: ...
    @PageType.setter
    def PageType(self, value: TypeInfo) -> None: ...


class PageApplicationModelProviderContext:
    def __init__(self, descriptor: PageActionDescriptor, pageTypeInfo: TypeInfo): ...
    @property
    def ActionDescriptor(self) -> PageActionDescriptor: ...
    @property
    def PageApplicationModel(self) -> PageApplicationModel: ...
    @property
    def PageType(self) -> TypeInfo: ...
    @PageApplicationModel.setter
    def PageApplicationModel(self, value: PageApplicationModel) -> None: ...


class PageConventionCollection:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, conventions: List[IPageConvention]): ...
    def AddAreaFolderApplicationModelConvention(self, areaName: str, folderPath: str, action: Action) -> IPageApplicationModelConvention: ...
    def AddAreaFolderRouteModelConvention(self, areaName: str, folderPath: str, action: Action) -> IPageRouteModelConvention: ...
    def AddAreaPageApplicationModelConvention(self, areaName: str, pageName: str, action: Action) -> IPageApplicationModelConvention: ...
    def AddAreaPageRouteModelConvention(self, areaName: str, pageName: str, action: Action) -> IPageRouteModelConvention: ...
    def AddFolderApplicationModelConvention(self, folderPath: str, action: Action) -> IPageApplicationModelConvention: ...
    def AddFolderRouteModelConvention(self, folderPath: str, action: Action) -> IPageRouteModelConvention: ...
    def AddPageApplicationModelConvention(self, pageName: str, action: Action) -> IPageApplicationModelConvention: ...
    def AddPageRouteModelConvention(self, pageName: str, action: Action) -> IPageRouteModelConvention: ...
    @overload
    def RemoveType(self) -> None: ...
    @overload
    def RemoveType(self, pageConventionType: Type) -> None: ...


class PageHandlerModel:
    @overload
    def __init__(self, other: PageHandlerModel): ...
    @overload
    def __init__(self, handlerMethod: MethodInfo, attributes: IReadOnlyList): ...
    @property
    def Attributes(self) -> IReadOnlyList: ...
    @property
    def HandlerName(self) -> str: ...
    @property
    def HttpMethod(self) -> str: ...
    @property
    def MethodInfo(self) -> MethodInfo: ...
    @property
    def Name(self) -> str: ...
    @property
    def Page(self) -> PageApplicationModel: ...
    @property
    def Parameters(self) -> List[PageParameterModel]: ...
    @property
    def Properties(self) -> IDictionary: ...
    @HandlerName.setter
    def HandlerName(self, value: str) -> None: ...
    @HttpMethod.setter
    def HttpMethod(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Page.setter
    def Page(self, value: PageApplicationModel) -> None: ...


class PageParameterModel(ParameterModelBase):
    @overload
    def __init__(self, other: PageParameterModel): ...
    @overload
    def __init__(self, parameterInfo: ParameterInfo, attributes: IReadOnlyList): ...
    @property
    def Handler(self) -> PageHandlerModel: ...
    @property
    def ParameterInfo(self) -> ParameterInfo: ...
    @property
    def ParameterName(self) -> str: ...
    @Handler.setter
    def Handler(self, value: PageHandlerModel) -> None: ...
    @ParameterName.setter
    def ParameterName(self, value: str) -> None: ...


class PagePropertyModel(ParameterModelBase):
    @overload
    def __init__(self, other: PagePropertyModel): ...
    @overload
    def __init__(self, propertyInfo: PropertyInfo, attributes: IReadOnlyList): ...
    @property
    def Page(self) -> PageApplicationModel: ...
    @property
    def PropertyInfo(self) -> PropertyInfo: ...
    @property
    def PropertyName(self) -> str: ...
    @Page.setter
    def Page(self, value: PageApplicationModel) -> None: ...
    @PropertyName.setter
    def PropertyName(self, value: str) -> None: ...


class PageRouteMetadata:
    def __init__(self, pageRoute: str, routeTemplate: str): ...
    @property
    def PageRoute(self) -> str: ...
    @property
    def RouteTemplate(self) -> str: ...


class PageRouteModel:
    @overload
    def __init__(self, other: PageRouteModel): ...
    @overload
    def __init__(self, relativePath: str, viewEnginePath: str): ...
    @overload
    def __init__(self, relativePath: str, viewEnginePath: str, areaName: str): ...
    @property
    def AreaName(self) -> str: ...
    @property
    def Properties(self) -> IDictionary: ...
    @property
    def RelativePath(self) -> str: ...
    @property
    def RouteParameterTransformer(self) -> IOutboundParameterTransformer: ...
    @property
    def RouteValues(self) -> IDictionary: ...
    @property
    def Selectors(self) -> List[SelectorModel]: ...
    @property
    def ViewEnginePath(self) -> str: ...
    @RouteParameterTransformer.setter
    def RouteParameterTransformer(self, value: IOutboundParameterTransformer) -> None: ...


class PageRouteModelProviderContext:
    def __init__(self): ...
    @property
    def RouteModels(self) -> List[PageRouteModel]: ...


class PageRouteTransformerConvention:
    def __init__(self, parameterTransformer: IOutboundParameterTransformer): ...
    def Apply(self, model: PageRouteModel) -> None: ...
