from typing import Tuple, Set, Iterable, List


class IAsyncPageFilter:
    def OnPageHandlerExecutionAsync(self, context: PageHandlerExecutingContext, next: PageHandlerExecutionDelegate) -> Task: ...
    def OnPageHandlerSelectionAsync(self, context: PageHandlerSelectedContext) -> Task: ...


class IPageFilter:
    def OnPageHandlerExecuted(self, context: PageHandlerExecutedContext) -> None: ...
    def OnPageHandlerExecuting(self, context: PageHandlerExecutingContext) -> None: ...
    def OnPageHandlerSelected(self, context: PageHandlerSelectedContext) -> None: ...


class PageHandlerExecutedContext(FilterContext):
    def __init__(self, pageContext: PageContext, filters: List[IFilterMetadata], handlerMethod: HandlerMethodDescriptor, handlerInstance: Object): ...
    @property
    def ActionDescriptor(self) -> CompiledPageActionDescriptor: ...
    @property
    def Canceled(self) -> bool: ...
    @property
    def Exception(self) -> Exception: ...
    @property
    def ExceptionDispatchInfo(self) -> ExceptionDispatchInfo: ...
    @property
    def ExceptionHandled(self) -> bool: ...
    @property
    def HandlerInstance(self) -> Object: ...
    @property
    def HandlerMethod(self) -> HandlerMethodDescriptor: ...
    @property
    def Result(self) -> IActionResult: ...
    @Canceled.setter
    def Canceled(self, value: bool) -> None: ...
    @Exception.setter
    def Exception(self, value: Exception) -> None: ...
    @ExceptionDispatchInfo.setter
    def ExceptionDispatchInfo(self, value: ExceptionDispatchInfo) -> None: ...
    @ExceptionHandled.setter
    def ExceptionHandled(self, value: bool) -> None: ...
    @Result.setter
    def Result(self, value: IActionResult) -> None: ...


class PageHandlerExecutingContext(FilterContext):
    def __init__(self, pageContext: PageContext, filters: List[IFilterMetadata], handlerMethod: HandlerMethodDescriptor, handlerArguments: IDictionary, handlerInstance: Object): ...
    @property
    def ActionDescriptor(self) -> CompiledPageActionDescriptor: ...
    @property
    def HandlerArguments(self) -> IDictionary: ...
    @property
    def HandlerInstance(self) -> Object: ...
    @property
    def HandlerMethod(self) -> HandlerMethodDescriptor: ...
    @property
    def Result(self) -> IActionResult: ...
    @Result.setter
    def Result(self, value: IActionResult) -> None: ...


class PageHandlerExecutionDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Task: ...
    def Invoke(self) -> Task: ...


class PageHandlerSelectedContext(FilterContext):
    def __init__(self, pageContext: PageContext, filters: List[IFilterMetadata], handlerInstance: Object): ...
    @property
    def ActionDescriptor(self) -> CompiledPageActionDescriptor: ...
    @property
    def HandlerInstance(self) -> Object: ...
    @property
    def HandlerMethod(self) -> HandlerMethodDescriptor: ...
    @HandlerMethod.setter
    def HandlerMethod(self, value: HandlerMethodDescriptor) -> None: ...
