from typing import Tuple, Set, Iterable, List


class ClientValidatorCache:
    def __init__(self): ...
    def GetValidators(self, metadata: ModelMetadata, validatorProvider: IClientModelValidatorProvider) -> IReadOnlyList: ...


class CompositeClientModelValidatorProvider:
    def __init__(self, providers: Iterable[IClientModelValidatorProvider]): ...
    def CreateValidators(self, context: ClientValidatorProviderContext) -> None: ...
    @property
    def ValidatorProviders(self) -> IReadOnlyList: ...


class CompositeModelValidatorProvider:
    def __init__(self, providers: List[IModelValidatorProvider]): ...
    def CreateValidators(self, context: ModelValidatorProviderContext) -> None: ...
    @property
    def ValidatorProviders(self) -> List[IModelValidatorProvider]: ...


class IMetadataBasedModelValidatorProvider:
    def HasValidators(self, modelType: Type, validatorMetadata: List[Object]) -> bool: ...


class IObjectModelValidator:
    def Validate(self, actionContext: ActionContext, validationState: ValidationStateDictionary, prefix: str, model: Object) -> None: ...


class ModelValidatorProviderExtensions:
    @overload
    def RemoveType(list: List[IModelValidatorProvider]) -> None: ...
    @overload
    def RemoveType(list: List[IModelValidatorProvider], type: Type) -> None: ...


class ValidateNeverAttribute:
    def __init__(self): ...
    def ShouldValidateEntry(self, entry: ValidationEntry, parentEntry: ValidationEntry) -> bool: ...


class ValidationVisitor:
    def __init__(self, actionContext: ActionContext, validatorProvider: IModelValidatorProvider, validatorCache: ValidatorCache, metadataProvider: IModelMetadataProvider, validationState: ValidationStateDictionary): ...
    @property
    def MaxValidationDepth(self) -> Nullable: ...
    @property
    def ValidateComplexTypesIfChildValidationFails(self) -> bool: ...
    @MaxValidationDepth.setter
    def MaxValidationDepth(self, value: Nullable) -> None: ...
    @ValidateComplexTypesIfChildValidationFails.setter
    def ValidateComplexTypesIfChildValidationFails(self, value: bool) -> None: ...
    @overload
    def Validate(self, metadata: ModelMetadata, key: str, model: Object) -> bool: ...
    @overload
    def Validate(self, metadata: ModelMetadata, key: str, model: Object, alwaysValidateAtTopLevel: bool) -> bool: ...
    @overload
    def Validate(self, metadata: ModelMetadata, key: str, model: Object, alwaysValidateAtTopLevel: bool, container: Object) -> bool: ...


class ValidatorCache:
    def __init__(self): ...
    def GetValidators(self, metadata: ModelMetadata, validatorProvider: IModelValidatorProvider) -> IReadOnlyList: ...
