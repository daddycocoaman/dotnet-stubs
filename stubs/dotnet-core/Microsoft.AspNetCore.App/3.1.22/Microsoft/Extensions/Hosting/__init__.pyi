__all__ = ['Internal']
from typing import Tuple, Set, Iterable, List


class ConsoleLifetimeOptions:
    def __init__(self): ...
    @property
    def SuppressStatusMessages(self) -> bool: ...
    @SuppressStatusMessages.setter
    def SuppressStatusMessages(self, value: bool) -> None: ...


class Host:
    @overload
    def CreateDefaultBuilder() -> IHostBuilder: ...
    @overload
    def CreateDefaultBuilder(args: Set(str)) -> IHostBuilder: ...


class HostBuilder:
    def __init__(self): ...
    def Build(self) -> IHost: ...
    def ConfigureAppConfiguration(self, configureDelegate: Action) -> IHostBuilder: ...
    def ConfigureContainer(self, configureDelegate: Action) -> IHostBuilder: ...
    def ConfigureHostConfiguration(self, configureDelegate: Action) -> IHostBuilder: ...
    def ConfigureServices(self, configureDelegate: Action) -> IHostBuilder: ...
    @property
    def Properties(self) -> IDictionary: ...
    @overload
    def UseServiceProviderFactory(self, factory: IServiceProviderFactory) -> IHostBuilder: ...
    @overload
    def UseServiceProviderFactory(self, factory: Func) -> IHostBuilder: ...


class HostingHostBuilderExtensions:
    def ConfigureAppConfiguration(hostBuilder: IHostBuilder, configureDelegate: Action) -> IHostBuilder: ...
    def ConfigureContainer(hostBuilder: IHostBuilder, configureDelegate: Action) -> IHostBuilder: ...
    @overload
    def ConfigureLogging(hostBuilder: IHostBuilder, configureLogging: Action) -> IHostBuilder: ...
    @overload
    def ConfigureLogging(hostBuilder: IHostBuilder, configureLogging: Action) -> IHostBuilder: ...
    def ConfigureServices(hostBuilder: IHostBuilder, configureDelegate: Action) -> IHostBuilder: ...
    @overload
    def RunConsoleAsync(hostBuilder: IHostBuilder, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def RunConsoleAsync(hostBuilder: IHostBuilder, configureOptions: Action, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def UseConsoleLifetime(hostBuilder: IHostBuilder) -> IHostBuilder: ...
    @overload
    def UseConsoleLifetime(hostBuilder: IHostBuilder, configureOptions: Action) -> IHostBuilder: ...
    def UseContentRoot(hostBuilder: IHostBuilder, contentRoot: str) -> IHostBuilder: ...
    @overload
    def UseDefaultServiceProvider(hostBuilder: IHostBuilder, configure: Action) -> IHostBuilder: ...
    @overload
    def UseDefaultServiceProvider(hostBuilder: IHostBuilder, configure: Action) -> IHostBuilder: ...
    def UseEnvironment(hostBuilder: IHostBuilder, environment: str) -> IHostBuilder: ...


class HostOptions:
    def __init__(self): ...
    @property
    def ShutdownTimeout(self) -> TimeSpan: ...
    @ShutdownTimeout.setter
    def ShutdownTimeout(self, value: TimeSpan) -> None: ...
