from typing import Tuple, Set, Iterable, List


class ControllerActionDescriptor(ActionDescriptor):
    def __init__(self): ...
    @property
    def ActionName(self) -> str: ...
    @property
    def ControllerName(self) -> str: ...
    @property
    def ControllerTypeInfo(self) -> TypeInfo: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def MethodInfo(self) -> MethodInfo: ...
    @ActionName.setter
    def ActionName(self, value: str) -> None: ...
    @ControllerName.setter
    def ControllerName(self, value: str) -> None: ...
    @ControllerTypeInfo.setter
    def ControllerTypeInfo(self, value: TypeInfo) -> None: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @MethodInfo.setter
    def MethodInfo(self, value: MethodInfo) -> None: ...


class ControllerActivatorProvider:
    def __init__(self, controllerActivator: IControllerActivator): ...
    def CreateActivator(self, descriptor: ControllerActionDescriptor) -> Func: ...
    def CreateReleaser(self, descriptor: ControllerActionDescriptor) -> Action: ...


class ControllerBoundPropertyDescriptor(ParameterDescriptor):
    def __init__(self): ...
    @property
    def PropertyInfo(self) -> PropertyInfo: ...
    @PropertyInfo.setter
    def PropertyInfo(self, value: PropertyInfo) -> None: ...


class ControllerFeature:
    def __init__(self): ...
    @property
    def Controllers(self) -> List[TypeInfo]: ...


class ControllerFeatureProvider:
    def __init__(self): ...
    def PopulateFeature(self, parts: Iterable[ApplicationPart], feature: ControllerFeature) -> None: ...


class ControllerParameterDescriptor(ParameterDescriptor):
    def __init__(self): ...
    @property
    def ParameterInfo(self) -> ParameterInfo: ...
    @ParameterInfo.setter
    def ParameterInfo(self, value: ParameterInfo) -> None: ...


class IControllerActivator:
    def Create(self, context: ControllerContext) -> Object: ...
    def Release(self, context: ControllerContext, controller: Object) -> None: ...


class IControllerActivatorProvider:
    def CreateActivator(self, descriptor: ControllerActionDescriptor) -> Func: ...
    def CreateReleaser(self, descriptor: ControllerActionDescriptor) -> Action: ...


class IControllerFactory:
    def CreateController(self, context: ControllerContext) -> Object: ...
    def ReleaseController(self, context: ControllerContext, controller: Object) -> None: ...


class IControllerFactoryProvider:
    def CreateControllerFactory(self, descriptor: ControllerActionDescriptor) -> Func: ...
    def CreateControllerReleaser(self, descriptor: ControllerActionDescriptor) -> Action: ...


class ServiceBasedControllerActivator:
    def __init__(self): ...
    def Create(self, actionContext: ControllerContext) -> Object: ...
    def Release(self, context: ControllerContext, controller: Object) -> None: ...
