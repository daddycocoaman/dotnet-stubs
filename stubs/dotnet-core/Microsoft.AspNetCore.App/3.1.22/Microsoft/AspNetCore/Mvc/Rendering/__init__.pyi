from typing import Tuple, Set, Iterable, List


class FormMethod:
    Get = 0
    Post = 1


class Html5DateRenderingMode:
    Rfc3339 = 0
    CurrentCulture = 1


class HtmlHelperComponentExtensions:
    @overload
    def RenderComponentAsync(htmlHelper: IHtmlHelper, renderMode: RenderMode) -> Task: ...
    @overload
    def RenderComponentAsync(htmlHelper: IHtmlHelper, renderMode: RenderMode, parameters: Object) -> Task: ...
    @overload
    def RenderComponentAsync(htmlHelper: IHtmlHelper, componentType: Type, renderMode: RenderMode, parameters: Object) -> Task: ...


class HtmlHelperDisplayExtensions:
    @overload
    def Display(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def Display(htmlHelper: IHtmlHelper, expression: str, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def Display(htmlHelper: IHtmlHelper, expression: str, templateName: str) -> IHtmlContent: ...
    @overload
    def Display(htmlHelper: IHtmlHelper, expression: str, templateName: str, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def Display(htmlHelper: IHtmlHelper, expression: str, templateName: str, htmlFieldName: str) -> IHtmlContent: ...
    @overload
    def DisplayFor(htmlHelper: IHtmlHelper, expression: Expression) -> IHtmlContent: ...
    @overload
    def DisplayFor(htmlHelper: IHtmlHelper, expression: Expression, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def DisplayFor(htmlHelper: IHtmlHelper, expression: Expression, templateName: str) -> IHtmlContent: ...
    @overload
    def DisplayFor(htmlHelper: IHtmlHelper, expression: Expression, templateName: str, htmlFieldName: str) -> IHtmlContent: ...
    @overload
    def DisplayFor(htmlHelper: IHtmlHelper, expression: Expression, templateName: str, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def DisplayForModel(htmlHelper: IHtmlHelper) -> IHtmlContent: ...
    @overload
    def DisplayForModel(htmlHelper: IHtmlHelper, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def DisplayForModel(htmlHelper: IHtmlHelper, templateName: str) -> IHtmlContent: ...
    @overload
    def DisplayForModel(htmlHelper: IHtmlHelper, templateName: str, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def DisplayForModel(htmlHelper: IHtmlHelper, templateName: str, htmlFieldName: str) -> IHtmlContent: ...
    @overload
    def DisplayForModel(htmlHelper: IHtmlHelper, templateName: str, htmlFieldName: str, additionalViewData: Object) -> IHtmlContent: ...


class HtmlHelperDisplayNameExtensions:
    def DisplayNameFor(htmlHelper: IHtmlHelper, expression: Expression) -> str: ...
    def DisplayNameForModel(htmlHelper: IHtmlHelper) -> str: ...


class HtmlHelperEditorExtensions:
    @overload
    def Editor(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def Editor(htmlHelper: IHtmlHelper, expression: str, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def Editor(htmlHelper: IHtmlHelper, expression: str, templateName: str) -> IHtmlContent: ...
    @overload
    def Editor(htmlHelper: IHtmlHelper, expression: str, templateName: str, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def Editor(htmlHelper: IHtmlHelper, expression: str, templateName: str, htmlFieldName: str) -> IHtmlContent: ...
    @overload
    def EditorFor(htmlHelper: IHtmlHelper, expression: Expression) -> IHtmlContent: ...
    @overload
    def EditorFor(htmlHelper: IHtmlHelper, expression: Expression, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def EditorFor(htmlHelper: IHtmlHelper, expression: Expression, templateName: str) -> IHtmlContent: ...
    @overload
    def EditorFor(htmlHelper: IHtmlHelper, expression: Expression, templateName: str, htmlFieldName: str) -> IHtmlContent: ...
    @overload
    def EditorFor(htmlHelper: IHtmlHelper, expression: Expression, templateName: str, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def EditorForModel(htmlHelper: IHtmlHelper) -> IHtmlContent: ...
    @overload
    def EditorForModel(htmlHelper: IHtmlHelper, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def EditorForModel(htmlHelper: IHtmlHelper, templateName: str) -> IHtmlContent: ...
    @overload
    def EditorForModel(htmlHelper: IHtmlHelper, templateName: str, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def EditorForModel(htmlHelper: IHtmlHelper, templateName: str, htmlFieldName: str) -> IHtmlContent: ...
    @overload
    def EditorForModel(htmlHelper: IHtmlHelper, templateName: str, htmlFieldName: str, additionalViewData: Object) -> IHtmlContent: ...


class HtmlHelperFormExtensions:
    @overload
    def BeginForm(htmlHelper: IHtmlHelper) -> MvcForm: ...
    @overload
    def BeginForm(htmlHelper: IHtmlHelper, antiforgery: Nullable) -> MvcForm: ...
    @overload
    def BeginForm(htmlHelper: IHtmlHelper, method: FormMethod) -> MvcForm: ...
    @overload
    def BeginForm(htmlHelper: IHtmlHelper, routeValues: Object) -> MvcForm: ...
    @overload
    def BeginForm(htmlHelper: IHtmlHelper, method: FormMethod, htmlAttributes: Object) -> MvcForm: ...
    @overload
    def BeginForm(htmlHelper: IHtmlHelper, actionName: str, controllerName: str) -> MvcForm: ...
    @overload
    def BeginForm(htmlHelper: IHtmlHelper, method: FormMethod, antiforgery: Nullable, htmlAttributes: Object) -> MvcForm: ...
    @overload
    def BeginForm(htmlHelper: IHtmlHelper, actionName: str, controllerName: str, routeValues: Object) -> MvcForm: ...
    @overload
    def BeginForm(htmlHelper: IHtmlHelper, actionName: str, controllerName: str, method: FormMethod) -> MvcForm: ...
    @overload
    def BeginForm(htmlHelper: IHtmlHelper, actionName: str, controllerName: str, routeValues: Object, method: FormMethod) -> MvcForm: ...
    @overload
    def BeginForm(htmlHelper: IHtmlHelper, actionName: str, controllerName: str, method: FormMethod, htmlAttributes: Object) -> MvcForm: ...
    @overload
    def BeginRouteForm(htmlHelper: IHtmlHelper, routeName: str) -> MvcForm: ...
    @overload
    def BeginRouteForm(htmlHelper: IHtmlHelper, routeValues: Object) -> MvcForm: ...
    @overload
    def BeginRouteForm(htmlHelper: IHtmlHelper, routeName: str, antiforgery: Nullable) -> MvcForm: ...
    @overload
    def BeginRouteForm(htmlHelper: IHtmlHelper, routeName: str, routeValues: Object) -> MvcForm: ...
    @overload
    def BeginRouteForm(htmlHelper: IHtmlHelper, routeName: str, method: FormMethod) -> MvcForm: ...
    @overload
    def BeginRouteForm(htmlHelper: IHtmlHelper, routeValues: Object, antiforgery: Nullable) -> MvcForm: ...
    @overload
    def BeginRouteForm(htmlHelper: IHtmlHelper, routeName: str, routeValues: Object, method: FormMethod) -> MvcForm: ...
    @overload
    def BeginRouteForm(htmlHelper: IHtmlHelper, routeName: str, method: FormMethod, htmlAttributes: Object) -> MvcForm: ...


class HtmlHelperInputExtensions:
    @overload
    def CheckBox(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def CheckBox(htmlHelper: IHtmlHelper, expression: str, isChecked: bool) -> IHtmlContent: ...
    @overload
    def CheckBox(htmlHelper: IHtmlHelper, expression: str, htmlAttributes: Object) -> IHtmlContent: ...
    def CheckBoxFor(htmlHelper: IHtmlHelper, expression: Expression) -> IHtmlContent: ...
    @overload
    def Hidden(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def Hidden(htmlHelper: IHtmlHelper, expression: str, value: Object) -> IHtmlContent: ...
    def HiddenFor(htmlHelper: IHtmlHelper, expression: Expression) -> IHtmlContent: ...
    @overload
    def Password(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def Password(htmlHelper: IHtmlHelper, expression: str, value: Object) -> IHtmlContent: ...
    def PasswordFor(htmlHelper: IHtmlHelper, expression: Expression) -> IHtmlContent: ...
    @overload
    def RadioButton(htmlHelper: IHtmlHelper, expression: str, value: Object) -> IHtmlContent: ...
    @overload
    def RadioButton(htmlHelper: IHtmlHelper, expression: str, value: Object, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def RadioButton(htmlHelper: IHtmlHelper, expression: str, value: Object, isChecked: bool) -> IHtmlContent: ...
    def RadioButtonFor(htmlHelper: IHtmlHelper, expression: Expression, value: Object) -> IHtmlContent: ...
    @overload
    def TextArea(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def TextArea(htmlHelper: IHtmlHelper, expression: str, value: str) -> IHtmlContent: ...
    @overload
    def TextArea(htmlHelper: IHtmlHelper, expression: str, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def TextArea(htmlHelper: IHtmlHelper, expression: str, value: str, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def TextAreaFor(htmlHelper: IHtmlHelper, expression: Expression) -> IHtmlContent: ...
    @overload
    def TextAreaFor(htmlHelper: IHtmlHelper, expression: Expression, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def TextBox(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def TextBox(htmlHelper: IHtmlHelper, expression: str, value: Object) -> IHtmlContent: ...
    @overload
    def TextBox(htmlHelper: IHtmlHelper, expression: str, value: Object, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def TextBox(htmlHelper: IHtmlHelper, expression: str, value: Object, format: str) -> IHtmlContent: ...
    @overload
    def TextBoxFor(htmlHelper: IHtmlHelper, expression: Expression) -> IHtmlContent: ...
    @overload
    def TextBoxFor(htmlHelper: IHtmlHelper, expression: Expression, format: str) -> IHtmlContent: ...
    @overload
    def TextBoxFor(htmlHelper: IHtmlHelper, expression: Expression, htmlAttributes: Object) -> IHtmlContent: ...


class HtmlHelperLabelExtensions:
    @overload
    def Label(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def Label(htmlHelper: IHtmlHelper, expression: str, labelText: str) -> IHtmlContent: ...
    @overload
    def LabelFor(htmlHelper: IHtmlHelper, expression: Expression) -> IHtmlContent: ...
    @overload
    def LabelFor(htmlHelper: IHtmlHelper, expression: Expression, labelText: str) -> IHtmlContent: ...
    @overload
    def LabelFor(htmlHelper: IHtmlHelper, expression: Expression, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def LabelForModel(htmlHelper: IHtmlHelper) -> IHtmlContent: ...
    @overload
    def LabelForModel(htmlHelper: IHtmlHelper, labelText: str) -> IHtmlContent: ...
    @overload
    def LabelForModel(htmlHelper: IHtmlHelper, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def LabelForModel(htmlHelper: IHtmlHelper, labelText: str, htmlAttributes: Object) -> IHtmlContent: ...


class HtmlHelperLinkExtensions:
    @overload
    def ActionLink(helper: IHtmlHelper, linkText: str, actionName: str) -> IHtmlContent: ...
    @overload
    def ActionLink(helper: IHtmlHelper, linkText: str, actionName: str, routeValues: Object) -> IHtmlContent: ...
    @overload
    def ActionLink(helper: IHtmlHelper, linkText: str, actionName: str, controllerName: str) -> IHtmlContent: ...
    @overload
    def ActionLink(helper: IHtmlHelper, linkText: str, actionName: str, routeValues: Object, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def ActionLink(helper: IHtmlHelper, linkText: str, actionName: str, controllerName: str, routeValues: Object) -> IHtmlContent: ...
    @overload
    def ActionLink(helper: IHtmlHelper, linkText: str, actionName: str, controllerName: str, routeValues: Object, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def RouteLink(htmlHelper: IHtmlHelper, linkText: str, routeValues: Object) -> IHtmlContent: ...
    @overload
    def RouteLink(htmlHelper: IHtmlHelper, linkText: str, routeName: str) -> IHtmlContent: ...
    @overload
    def RouteLink(htmlHelper: IHtmlHelper, linkText: str, routeName: str, routeValues: Object) -> IHtmlContent: ...
    @overload
    def RouteLink(htmlHelper: IHtmlHelper, linkText: str, routeValues: Object, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def RouteLink(htmlHelper: IHtmlHelper, linkText: str, routeName: str, routeValues: Object, htmlAttributes: Object) -> IHtmlContent: ...


class HtmlHelperNameExtensions:
    def IdForModel(htmlHelper: IHtmlHelper) -> str: ...
    def NameForModel(htmlHelper: IHtmlHelper) -> str: ...


class HtmlHelperPartialExtensions:
    @overload
    def Partial(htmlHelper: IHtmlHelper, partialViewName: str) -> IHtmlContent: ...
    @overload
    def Partial(htmlHelper: IHtmlHelper, partialViewName: str, viewData: ViewDataDictionary) -> IHtmlContent: ...
    @overload
    def Partial(htmlHelper: IHtmlHelper, partialViewName: str, model: Object) -> IHtmlContent: ...
    @overload
    def Partial(htmlHelper: IHtmlHelper, partialViewName: str, model: Object, viewData: ViewDataDictionary) -> IHtmlContent: ...
    @overload
    def PartialAsync(htmlHelper: IHtmlHelper, partialViewName: str) -> Task: ...
    @overload
    def PartialAsync(htmlHelper: IHtmlHelper, partialViewName: str, model: Object) -> Task: ...
    @overload
    def PartialAsync(htmlHelper: IHtmlHelper, partialViewName: str, viewData: ViewDataDictionary) -> Task: ...
    @overload
    def RenderPartial(htmlHelper: IHtmlHelper, partialViewName: str) -> None: ...
    @overload
    def RenderPartial(htmlHelper: IHtmlHelper, partialViewName: str, model: Object) -> None: ...
    @overload
    def RenderPartial(htmlHelper: IHtmlHelper, partialViewName: str, viewData: ViewDataDictionary) -> None: ...
    @overload
    def RenderPartial(htmlHelper: IHtmlHelper, partialViewName: str, model: Object, viewData: ViewDataDictionary) -> None: ...
    @overload
    def RenderPartialAsync(htmlHelper: IHtmlHelper, partialViewName: str) -> Task: ...
    @overload
    def RenderPartialAsync(htmlHelper: IHtmlHelper, partialViewName: str, viewData: ViewDataDictionary) -> Task: ...
    @overload
    def RenderPartialAsync(htmlHelper: IHtmlHelper, partialViewName: str, model: Object) -> Task: ...


class HtmlHelperSelectExtensions:
    @overload
    def DropDownList(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def DropDownList(htmlHelper: IHtmlHelper, expression: str, optionLabel: str) -> IHtmlContent: ...
    @overload
    def DropDownList(htmlHelper: IHtmlHelper, expression: str, selectList: Iterable[SelectListItem]) -> IHtmlContent: ...
    @overload
    def DropDownList(htmlHelper: IHtmlHelper, expression: str, selectList: Iterable[SelectListItem], htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def DropDownList(htmlHelper: IHtmlHelper, expression: str, selectList: Iterable[SelectListItem], optionLabel: str) -> IHtmlContent: ...
    @overload
    def DropDownListFor(htmlHelper: IHtmlHelper, expression: Expression, selectList: Iterable[SelectListItem]) -> IHtmlContent: ...
    @overload
    def DropDownListFor(htmlHelper: IHtmlHelper, expression: Expression, selectList: Iterable[SelectListItem], htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def DropDownListFor(htmlHelper: IHtmlHelper, expression: Expression, selectList: Iterable[SelectListItem], optionLabel: str) -> IHtmlContent: ...
    @overload
    def ListBox(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def ListBox(htmlHelper: IHtmlHelper, expression: str, selectList: Iterable[SelectListItem]) -> IHtmlContent: ...
    def ListBoxFor(htmlHelper: IHtmlHelper, expression: Expression, selectList: Iterable[SelectListItem]) -> IHtmlContent: ...


class HtmlHelperValidationExtensions:
    @overload
    def ValidationMessage(htmlHelper: IHtmlHelper, expression: str) -> IHtmlContent: ...
    @overload
    def ValidationMessage(htmlHelper: IHtmlHelper, expression: str, message: str) -> IHtmlContent: ...
    @overload
    def ValidationMessage(htmlHelper: IHtmlHelper, expression: str, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def ValidationMessage(htmlHelper: IHtmlHelper, expression: str, message: str, tag: str) -> IHtmlContent: ...
    @overload
    def ValidationMessage(htmlHelper: IHtmlHelper, expression: str, message: str, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def ValidationMessageFor(htmlHelper: IHtmlHelper, expression: Expression) -> IHtmlContent: ...
    @overload
    def ValidationMessageFor(htmlHelper: IHtmlHelper, expression: Expression, message: str) -> IHtmlContent: ...
    @overload
    def ValidationMessageFor(htmlHelper: IHtmlHelper, expression: Expression, message: str, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def ValidationMessageFor(htmlHelper: IHtmlHelper, expression: Expression, message: str, tag: str) -> IHtmlContent: ...
    @overload
    def ValidationSummary(htmlHelper: IHtmlHelper) -> IHtmlContent: ...
    @overload
    def ValidationSummary(htmlHelper: IHtmlHelper, excludePropertyErrors: bool) -> IHtmlContent: ...
    @overload
    def ValidationSummary(htmlHelper: IHtmlHelper, message: str) -> IHtmlContent: ...
    @overload
    def ValidationSummary(htmlHelper: IHtmlHelper, message: str, tag: str) -> IHtmlContent: ...
    @overload
    def ValidationSummary(htmlHelper: IHtmlHelper, message: str, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def ValidationSummary(htmlHelper: IHtmlHelper, excludePropertyErrors: bool, message: str) -> IHtmlContent: ...
    @overload
    def ValidationSummary(htmlHelper: IHtmlHelper, message: str, htmlAttributes: Object, tag: str) -> IHtmlContent: ...
    @overload
    def ValidationSummary(htmlHelper: IHtmlHelper, excludePropertyErrors: bool, message: str, tag: str) -> IHtmlContent: ...
    @overload
    def ValidationSummary(htmlHelper: IHtmlHelper, excludePropertyErrors: bool, message: str, htmlAttributes: Object) -> IHtmlContent: ...


class HtmlHelperValueExtensions:
    def Value(htmlHelper: IHtmlHelper, expression: str) -> str: ...
    def ValueFor(htmlHelper: IHtmlHelper, expression: Expression) -> str: ...
    @overload
    def ValueForModel(htmlHelper: IHtmlHelper) -> str: ...
    @overload
    def ValueForModel(htmlHelper: IHtmlHelper, format: str) -> str: ...


class IHtmlHelper:
    def ActionLink(self, linkText: str, actionName: str, controllerName: str, protocol: str, hostname: str, fragment: str, routeValues: Object, htmlAttributes: Object) -> IHtmlContent: ...
    def AntiForgeryToken(self) -> IHtmlContent: ...
    def BeginForm(self, actionName: str, controllerName: str, routeValues: Object, method: FormMethod, antiforgery: Nullable, htmlAttributes: Object) -> MvcForm: ...
    def BeginRouteForm(self, routeName: str, routeValues: Object, method: FormMethod, antiforgery: Nullable, htmlAttributes: Object) -> MvcForm: ...
    def CheckBox(self, expression: str, isChecked: Nullable, htmlAttributes: Object) -> IHtmlContent: ...
    def Display(self, expression: str, templateName: str, htmlFieldName: str, additionalViewData: Object) -> IHtmlContent: ...
    def DisplayName(self, expression: str) -> str: ...
    def DisplayText(self, expression: str) -> str: ...
    def DropDownList(self, expression: str, selectList: Iterable[SelectListItem], optionLabel: str, htmlAttributes: Object) -> IHtmlContent: ...
    def Editor(self, expression: str, templateName: str, htmlFieldName: str, additionalViewData: Object) -> IHtmlContent: ...
    @overload
    def Encode(self, value: str) -> str: ...
    @overload
    def Encode(self, value: Object) -> str: ...
    def EndForm(self) -> None: ...
    def FormatValue(self, value: Object, format: str) -> str: ...
    def GenerateIdFromName(self, fullName: str) -> str: ...
    @property
    def Html5DateRenderingMode(self) -> Html5DateRenderingMode: ...
    @property
    def IdAttributeDotReplacement(self) -> str: ...
    @property
    def MetadataProvider(self) -> IModelMetadataProvider: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def UrlEncoder(self) -> UrlEncoder: ...
    @property
    def ViewBag(self) -> Object: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    @overload
    def GetEnumSelectList(self) -> Iterable[SelectListItem]: ...
    @overload
    def GetEnumSelectList(self, enumType: Type) -> Iterable[SelectListItem]: ...
    def Hidden(self, expression: str, value: Object, htmlAttributes: Object) -> IHtmlContent: ...
    def Id(self, expression: str) -> str: ...
    def Label(self, expression: str, labelText: str, htmlAttributes: Object) -> IHtmlContent: ...
    def ListBox(self, expression: str, selectList: Iterable[SelectListItem], htmlAttributes: Object) -> IHtmlContent: ...
    def Name(self, expression: str) -> str: ...
    def PartialAsync(self, partialViewName: str, model: Object, viewData: ViewDataDictionary) -> Task: ...
    def Password(self, expression: str, value: Object, htmlAttributes: Object) -> IHtmlContent: ...
    def RadioButton(self, expression: str, value: Object, isChecked: Nullable, htmlAttributes: Object) -> IHtmlContent: ...
    @overload
    def Raw(self, value: str) -> IHtmlContent: ...
    @overload
    def Raw(self, value: Object) -> IHtmlContent: ...
    def RenderPartialAsync(self, partialViewName: str, model: Object, viewData: ViewDataDictionary) -> Task: ...
    def RouteLink(self, linkText: str, routeName: str, protocol: str, hostName: str, fragment: str, routeValues: Object, htmlAttributes: Object) -> IHtmlContent: ...
    @Html5DateRenderingMode.setter
    def Html5DateRenderingMode(self, value: Html5DateRenderingMode) -> None: ...
    def TextArea(self, expression: str, value: str, rows: int, columns: int, htmlAttributes: Object) -> IHtmlContent: ...
    def TextBox(self, expression: str, value: Object, format: str, htmlAttributes: Object) -> IHtmlContent: ...
    def ValidationMessage(self, expression: str, message: str, htmlAttributes: Object, tag: str) -> IHtmlContent: ...
    def ValidationSummary(self, excludePropertyErrors: bool, message: str, htmlAttributes: Object, tag: str) -> IHtmlContent: ...
    def Value(self, expression: str, format: str) -> str: ...




class IJsonHelper:
    def Serialize(self, value: Object) -> IHtmlContent: ...


class MultiSelectList:
    @overload
    def __init__(self, items: IEnumerable): ...
    @overload
    def __init__(self, items: IEnumerable, selectedValues: IEnumerable): ...
    @overload
    def __init__(self, items: IEnumerable, dataValueField: str, dataTextField: str): ...
    @overload
    def __init__(self, items: IEnumerable, dataValueField: str, dataTextField: str, selectedValues: IEnumerable): ...
    @overload
    def __init__(self, items: IEnumerable, dataValueField: str, dataTextField: str, selectedValues: IEnumerable, dataGroupField: str): ...
    @property
    def DataGroupField(self) -> str: ...
    @property
    def DataTextField(self) -> str: ...
    @property
    def DataValueField(self) -> str: ...
    @property
    def Items(self) -> IEnumerable: ...
    @property
    def SelectedValues(self) -> IEnumerable: ...
    def GetEnumerator(self) -> IEnumerator: ...


class MvcForm:
    def __init__(self, viewContext: ViewContext, htmlEncoder: HtmlEncoder): ...
    def Dispose(self) -> None: ...
    def EndForm(self) -> None: ...


class RenderMode:
    Static = 1
    Server = 2
    ServerPrerendered = 3


class SelectList(MultiSelectList):
    @overload
    def __init__(self, items: IEnumerable): ...
    @overload
    def __init__(self, items: IEnumerable, selectedValue: Object): ...
    @overload
    def __init__(self, items: IEnumerable, dataValueField: str, dataTextField: str): ...
    @overload
    def __init__(self, items: IEnumerable, dataValueField: str, dataTextField: str, selectedValue: Object): ...
    @overload
    def __init__(self, items: IEnumerable, dataValueField: str, dataTextField: str, selectedValue: Object, dataGroupField: str): ...
    @property
    def SelectedValue(self) -> Object: ...


class SelectListGroup:
    def __init__(self): ...
    @property
    def Disabled(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Disabled.setter
    def Disabled(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class SelectListItem:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, text: str, value: str): ...
    @overload
    def __init__(self, text: str, value: str, selected: bool): ...
    @overload
    def __init__(self, text: str, value: str, selected: bool, disabled: bool): ...
    @property
    def Disabled(self) -> bool: ...
    @property
    def Group(self) -> SelectListGroup: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Disabled.setter
    def Disabled(self, value: bool) -> None: ...
    @Group.setter
    def Group(self, value: SelectListGroup) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class TagBuilder:
    def __init__(self, tagName: str): ...
    def AddCssClass(self, value: str) -> None: ...
    def CreateSanitizedId(name: str, invalidCharReplacement: str) -> str: ...
    def GenerateId(self, name: str, invalidCharReplacement: str) -> None: ...
    @property
    def Attributes(self) -> AttributeDictionary: ...
    @property
    def HasInnerHtml(self) -> bool: ...
    @property
    def InnerHtml(self) -> IHtmlContentBuilder: ...
    @property
    def TagName(self) -> str: ...
    @property
    def TagRenderMode(self) -> TagRenderMode: ...
    @overload
    def MergeAttribute(self, key: str, value: str) -> None: ...
    @overload
    def MergeAttribute(self, key: str, value: str, replaceExisting: bool) -> None: ...
    @overload
    def MergeAttributes(self, attributes: IDictionary) -> None: ...
    @overload
    def MergeAttributes(self, attributes: IDictionary, replaceExisting: bool) -> None: ...
    def RenderBody(self) -> IHtmlContent: ...
    def RenderEndTag(self) -> IHtmlContent: ...
    def RenderSelfClosingTag(self) -> IHtmlContent: ...
    def RenderStartTag(self) -> IHtmlContent: ...
    @TagRenderMode.setter
    def TagRenderMode(self, value: TagRenderMode) -> None: ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class TagRenderMode:
    Normal = 0
    StartTag = 1
    EndTag = 2
    SelfClosing = 3


class ViewComponentHelperExtensions:
    @overload
    def InvokeAsync(helper: IViewComponentHelper) -> Task: ...
    @overload
    def InvokeAsync(helper: IViewComponentHelper, name: str) -> Task: ...
    @overload
    def InvokeAsync(helper: IViewComponentHelper, componentType: Type) -> Task: ...
    @overload
    def InvokeAsync(helper: IViewComponentHelper, arguments: Object) -> Task: ...


class ViewContext(ActionContext):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, viewContext: ViewContext, view: IView, viewData: ViewDataDictionary, writer: TextWriter): ...
    @overload
    def __init__(self, actionContext: ActionContext, view: IView, viewData: ViewDataDictionary, tempData: ITempDataDictionary, writer: TextWriter, htmlHelperOptions: HtmlHelperOptions): ...
    @property
    def ClientValidationEnabled(self) -> bool: ...
    @property
    def ExecutingFilePath(self) -> str: ...
    @property
    def FormContext(self) -> FormContext: ...
    @property
    def Html5DateRenderingMode(self) -> Html5DateRenderingMode: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def ValidationMessageElement(self) -> str: ...
    @property
    def ValidationSummaryMessageElement(self) -> str: ...
    @property
    def View(self) -> IView: ...
    @property
    def ViewBag(self) -> Object: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    @property
    def Writer(self) -> TextWriter: ...
    def GetFormContextForClientValidation(self) -> FormContext: ...
    @ClientValidationEnabled.setter
    def ClientValidationEnabled(self, value: bool) -> None: ...
    @ExecutingFilePath.setter
    def ExecutingFilePath(self, value: str) -> None: ...
    @FormContext.setter
    def FormContext(self, value: FormContext) -> None: ...
    @Html5DateRenderingMode.setter
    def Html5DateRenderingMode(self, value: Html5DateRenderingMode) -> None: ...
    @TempData.setter
    def TempData(self, value: ITempDataDictionary) -> None: ...
    @ValidationMessageElement.setter
    def ValidationMessageElement(self, value: str) -> None: ...
    @ValidationSummaryMessageElement.setter
    def ValidationSummaryMessageElement(self, value: str) -> None: ...
    @View.setter
    def View(self, value: IView) -> None: ...
    @ViewData.setter
    def ViewData(self, value: ViewDataDictionary) -> None: ...
    @Writer.setter
    def Writer(self, value: TextWriter) -> None: ...
