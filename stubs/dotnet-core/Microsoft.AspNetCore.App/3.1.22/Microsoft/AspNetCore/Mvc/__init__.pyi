__all__ = ['Diagnostics','ModelBinding','Rendering','ViewComponents','ViewEngines','ViewFeatures']
from typing import Tuple, Set, Iterable, List


class AutoValidateAntiforgeryTokenAttribute:
    def __init__(self): ...
    def CreateInstance(self, serviceProvider: IServiceProvider) -> IFilterMetadata: ...
    @property
    def IsReusable(self) -> bool: ...
    @property
    def Order(self) -> int: ...
    @Order.setter
    def Order(self, value: int) -> None: ...


class Controller(ControllerBase):
    def Dispose(self) -> None: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def ViewBag(self) -> Object: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    @overload
    def Json(self, data: Object) -> JsonResult: ...
    @overload
    def Json(self, data: Object, serializerSettings: Object) -> JsonResult: ...
    def OnActionExecuted(self, context: ActionExecutedContext) -> None: ...
    def OnActionExecuting(self, context: ActionExecutingContext) -> None: ...
    def OnActionExecutionAsync(self, context: ActionExecutingContext, next: ActionExecutionDelegate) -> Task: ...
    @overload
    def PartialView(self) -> PartialViewResult: ...
    @overload
    def PartialView(self, model: Object) -> PartialViewResult: ...
    @overload
    def PartialView(self, viewName: str) -> PartialViewResult: ...
    @overload
    def PartialView(self, viewName: str, model: Object) -> PartialViewResult: ...
    @TempData.setter
    def TempData(self, value: ITempDataDictionary) -> None: ...
    @ViewData.setter
    def ViewData(self, value: ViewDataDictionary) -> None: ...
    @overload
    def View(self) -> ViewResult: ...
    @overload
    def View(self, model: Object) -> ViewResult: ...
    @overload
    def View(self, viewName: str) -> ViewResult: ...
    @overload
    def View(self, viewName: str, model: Object) -> ViewResult: ...
    @overload
    def ViewComponent(self, componentName: str) -> ViewComponentResult: ...
    @overload
    def ViewComponent(self, componentType: Type) -> ViewComponentResult: ...
    @overload
    def ViewComponent(self, componentName: str, arguments: Object) -> ViewComponentResult: ...
    @overload
    def ViewComponent(self, componentType: Type, arguments: Object) -> ViewComponentResult: ...


class CookieTempDataProviderOptions:
    def __init__(self): ...
    @property
    def Cookie(self) -> CookieBuilder: ...
    @Cookie.setter
    def Cookie(self, value: CookieBuilder) -> None: ...


class IgnoreAntiforgeryTokenAttribute:
    def __init__(self): ...
    @property
    def Order(self) -> int: ...
    @Order.setter
    def Order(self, value: int) -> None: ...


class IViewComponentHelper:
    @overload
    def InvokeAsync(self, name: str, arguments: Object) -> Task: ...
    @overload
    def InvokeAsync(self, componentType: Type, arguments: Object) -> Task: ...


class IViewComponentResult:
    def Execute(self, context: ViewComponentContext) -> None: ...
    def ExecuteAsync(self, context: ViewComponentContext) -> Task: ...


class MvcViewOptions:
    def __init__(self): ...
    @property
    def ClientModelValidatorProviders(self) -> List[IClientModelValidatorProvider]: ...
    @property
    def HtmlHelperOptions(self) -> HtmlHelperOptions: ...
    @property
    def ViewEngines(self) -> List[IViewEngine]: ...
    @HtmlHelperOptions.setter
    def HtmlHelperOptions(self, value: HtmlHelperOptions) -> None: ...


class PageRemoteAttribute(RemoteAttributeBase):
    def __init__(self): ...
    @property
    def PageHandler(self) -> str: ...
    @property
    def PageName(self) -> str: ...
    @PageHandler.setter
    def PageHandler(self, value: str) -> None: ...
    @PageName.setter
    def PageName(self, value: str) -> None: ...


class PartialViewResult(ActionResult):
    def __init__(self): ...
    def ExecuteResultAsync(self, context: ActionContext) -> Task: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Model(self) -> Object: ...
    @property
    def StatusCode(self) -> Nullable: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    @property
    def ViewEngine(self) -> IViewEngine: ...
    @property
    def ViewName(self) -> str: ...
    @ContentType.setter
    def ContentType(self, value: str) -> None: ...
    @StatusCode.setter
    def StatusCode(self, value: Nullable) -> None: ...
    @TempData.setter
    def TempData(self, value: ITempDataDictionary) -> None: ...
    @ViewData.setter
    def ViewData(self, value: ViewDataDictionary) -> None: ...
    @ViewEngine.setter
    def ViewEngine(self, value: IViewEngine) -> None: ...
    @ViewName.setter
    def ViewName(self, value: str) -> None: ...


class RemoteAttribute(RemoteAttributeBase):
    @overload
    def __init__(self, routeName: str): ...
    @overload
    def __init__(self, action: str, controller: str): ...
    @overload
    def __init__(self, action: str, controller: str, areaName: str): ...


class RemoteAttributeBase:
    def AddValidation(self, context: ClientModelValidationContext) -> None: ...
    def FormatAdditionalFieldsForClientValidation(self, property: str) -> str: ...
    def FormatErrorMessage(self, name: str) -> str: ...
    def FormatPropertyForClientValidation(property: str) -> str: ...
    @property
    def AdditionalFields(self) -> str: ...
    @property
    def HttpMethod(self) -> str: ...
    def IsValid(self, value: Object) -> bool: ...
    @AdditionalFields.setter
    def AdditionalFields(self, value: str) -> None: ...
    @HttpMethod.setter
    def HttpMethod(self, value: str) -> None: ...


class SkipStatusCodePagesAttribute:
    def __init__(self): ...
    def OnResourceExecuted(self, context: ResourceExecutedContext) -> None: ...
    def OnResourceExecuting(self, context: ResourceExecutingContext) -> None: ...


class TempDataAttribute:
    def __init__(self): ...
    @property
    def Key(self) -> str: ...
    @Key.setter
    def Key(self, value: str) -> None: ...


class ValidateAntiForgeryTokenAttribute:
    def __init__(self): ...
    def CreateInstance(self, serviceProvider: IServiceProvider) -> IFilterMetadata: ...
    @property
    def IsReusable(self) -> bool: ...
    @property
    def Order(self) -> int: ...
    @Order.setter
    def Order(self, value: int) -> None: ...


class ViewComponent:
    def Content(self, content: str) -> ContentViewComponentResult: ...
    @property
    def HttpContext(self) -> HttpContext: ...
    @property
    def ModelState(self) -> ModelStateDictionary: ...
    @property
    def Request(self) -> HttpRequest: ...
    @property
    def RouteData(self) -> RouteData: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def Url(self) -> IUrlHelper: ...
    @property
    def User(self) -> IPrincipal: ...
    @property
    def UserClaimsPrincipal(self) -> ClaimsPrincipal: ...
    @property
    def ViewBag(self) -> Object: ...
    @property
    def ViewComponentContext(self) -> ViewComponentContext: ...
    @property
    def ViewContext(self) -> ViewContext: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    @property
    def ViewEngine(self) -> ICompositeViewEngine: ...
    @Url.setter
    def Url(self, value: IUrlHelper) -> None: ...
    @ViewComponentContext.setter
    def ViewComponentContext(self, value: ViewComponentContext) -> None: ...
    @ViewEngine.setter
    def ViewEngine(self, value: ICompositeViewEngine) -> None: ...
    @overload
    def View(self) -> ViewViewComponentResult: ...
    @overload
    def View(self, viewName: str) -> ViewViewComponentResult: ...
    @overload
    def View(self, model: TModel) -> ViewViewComponentResult: ...
    @overload
    def View(self, viewName: str, model: TModel) -> ViewViewComponentResult: ...


class ViewComponentAttribute:
    def __init__(self): ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class ViewComponentResult(ActionResult):
    def __init__(self): ...
    def ExecuteResultAsync(self, context: ActionContext) -> Task: ...
    @property
    def Arguments(self) -> Object: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Model(self) -> Object: ...
    @property
    def StatusCode(self) -> Nullable: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def ViewComponentName(self) -> str: ...
    @property
    def ViewComponentType(self) -> Type: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    @Arguments.setter
    def Arguments(self, value: Object) -> None: ...
    @ContentType.setter
    def ContentType(self, value: str) -> None: ...
    @StatusCode.setter
    def StatusCode(self, value: Nullable) -> None: ...
    @TempData.setter
    def TempData(self, value: ITempDataDictionary) -> None: ...
    @ViewComponentName.setter
    def ViewComponentName(self, value: str) -> None: ...
    @ViewComponentType.setter
    def ViewComponentType(self, value: Type) -> None: ...
    @ViewData.setter
    def ViewData(self, value: ViewDataDictionary) -> None: ...


class ViewDataAttribute:
    def __init__(self): ...
    @property
    def Key(self) -> str: ...
    @Key.setter
    def Key(self, value: str) -> None: ...


class ViewResult(ActionResult):
    def __init__(self): ...
    def ExecuteResultAsync(self, context: ActionContext) -> Task: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Model(self) -> Object: ...
    @property
    def StatusCode(self) -> Nullable: ...
    @property
    def TempData(self) -> ITempDataDictionary: ...
    @property
    def ViewData(self) -> ViewDataDictionary: ...
    @property
    def ViewEngine(self) -> IViewEngine: ...
    @property
    def ViewName(self) -> str: ...
    @ContentType.setter
    def ContentType(self, value: str) -> None: ...
    @StatusCode.setter
    def StatusCode(self, value: Nullable) -> None: ...
    @TempData.setter
    def TempData(self, value: ITempDataDictionary) -> None: ...
    @ViewData.setter
    def ViewData(self, value: ViewDataDictionary) -> None: ...
    @ViewEngine.setter
    def ViewEngine(self, value: IViewEngine) -> None: ...
    @ViewName.setter
    def ViewName(self, value: str) -> None: ...
