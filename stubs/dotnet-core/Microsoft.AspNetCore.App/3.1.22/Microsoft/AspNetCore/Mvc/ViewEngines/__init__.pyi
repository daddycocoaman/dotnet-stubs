from typing import Tuple, Set, Iterable, List


class CompositeViewEngine:
    def __init__(self, optionsAccessor: IOptions): ...
    def FindView(self, context: ActionContext, viewName: str, isMainPage: bool) -> ViewEngineResult: ...
    @property
    def ViewEngines(self) -> IReadOnlyList: ...
    def GetView(self, executingFilePath: str, viewPath: str, isMainPage: bool) -> ViewEngineResult: ...


class ICompositeViewEngine:
    @property
    def ViewEngines(self) -> IReadOnlyList: ...


class IView:
    @property
    def Path(self) -> str: ...
    def RenderAsync(self, context: ViewContext) -> Task: ...


class IViewEngine:
    def FindView(self, context: ActionContext, viewName: str, isMainPage: bool) -> ViewEngineResult: ...
    def GetView(self, executingFilePath: str, viewPath: str, isMainPage: bool) -> ViewEngineResult: ...


class ViewEngineResult:
    def EnsureSuccessful(self, originalLocations: Iterable[str]) -> ViewEngineResult: ...
    def Found(viewName: str, view: IView) -> ViewEngineResult: ...
    @property
    def SearchedLocations(self) -> Iterable[str]: ...
    @property
    def Success(self) -> bool: ...
    @property
    def View(self) -> IView: ...
    @property
    def ViewName(self) -> str: ...
    def NotFound(viewName: str, searchedLocations: Iterable[str]) -> ViewEngineResult: ...
