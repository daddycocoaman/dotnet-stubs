from typing import Tuple, Set, Iterable, List


class AcceptLanguageHeaderRequestCultureProvider(RequestCultureProvider):
    def __init__(self): ...
    def DetermineProviderCultureResult(self, httpContext: HttpContext) -> Task: ...
    @property
    def MaximumAcceptLanguageHeaderValuesToTry(self) -> int: ...
    @MaximumAcceptLanguageHeaderValuesToTry.setter
    def MaximumAcceptLanguageHeaderValuesToTry(self, value: int) -> None: ...


class CookieRequestCultureProvider(RequestCultureProvider):
    def __init__(self): ...
    def DetermineProviderCultureResult(self, httpContext: HttpContext) -> Task: ...
    @property
    def CookieName(self) -> str: ...
    def MakeCookieValue(requestCulture: RequestCulture) -> str: ...
    def ParseCookieValue(value: str) -> ProviderCultureResult: ...
    @CookieName.setter
    def CookieName(self, value: str) -> None: ...


class CustomRequestCultureProvider(RequestCultureProvider):
    def __init__(self, provider: Func): ...
    def DetermineProviderCultureResult(self, httpContext: HttpContext) -> Task: ...


class IRequestCultureFeature:
    @property
    def Provider(self) -> IRequestCultureProvider: ...
    @property
    def RequestCulture(self) -> RequestCulture: ...


class IRequestCultureProvider:
    def DetermineProviderCultureResult(self, httpContext: HttpContext) -> Task: ...


class ProviderCultureResult:
    @overload
    def __init__(self, culture: StringSegment): ...
    @overload
    def __init__(self, cultures: List[StringSegment]): ...
    @overload
    def __init__(self, culture: StringSegment, uiCulture: StringSegment): ...
    @overload
    def __init__(self, cultures: List[StringSegment], uiCultures: List[StringSegment]): ...
    @property
    def Cultures(self) -> List[StringSegment]: ...
    @property
    def UICultures(self) -> List[StringSegment]: ...


class QueryStringRequestCultureProvider(RequestCultureProvider):
    def __init__(self): ...
    def DetermineProviderCultureResult(self, httpContext: HttpContext) -> Task: ...
    @property
    def QueryStringKey(self) -> str: ...
    @property
    def UIQueryStringKey(self) -> str: ...
    @QueryStringKey.setter
    def QueryStringKey(self, value: str) -> None: ...
    @UIQueryStringKey.setter
    def UIQueryStringKey(self, value: str) -> None: ...


class RequestCulture:
    @overload
    def __init__(self, culture: CultureInfo): ...
    @overload
    def __init__(self, culture: str): ...
    @overload
    def __init__(self, culture: str, uiCulture: str): ...
    @overload
    def __init__(self, culture: CultureInfo, uiCulture: CultureInfo): ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def UICulture(self) -> CultureInfo: ...


class RequestCultureFeature:
    def __init__(self, requestCulture: RequestCulture, provider: IRequestCultureProvider): ...
    @property
    def Provider(self) -> IRequestCultureProvider: ...
    @property
    def RequestCulture(self) -> RequestCulture: ...


class RequestCultureProvider:
    def DetermineProviderCultureResult(self, httpContext: HttpContext) -> Task: ...
    @property
    def Options(self) -> RequestLocalizationOptions: ...
    @Options.setter
    def Options(self, value: RequestLocalizationOptions) -> None: ...


class RequestLocalizationMiddleware:
    @overload
    def __init__(self, next: RequestDelegate, options: IOptions): ...
    @overload
    def __init__(self, next: RequestDelegate, options: IOptions, loggerFactory: ILoggerFactory): ...
    def Invoke(self, context: HttpContext) -> Task: ...
