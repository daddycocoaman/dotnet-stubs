from typing import Tuple, Set, Iterable, List


class HtmlContentBuilder:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, entries: List[Object]): ...
    def Append(self, unencoded: str) -> IHtmlContentBuilder: ...
    @overload
    def AppendHtml(self, htmlContent: IHtmlContent) -> IHtmlContentBuilder: ...
    @overload
    def AppendHtml(self, encoded: str) -> IHtmlContentBuilder: ...
    def Clear(self) -> IHtmlContentBuilder: ...
    def CopyTo(self, destination: IHtmlContentBuilder) -> None: ...
    @property
    def Count(self) -> int: ...
    def MoveTo(self, destination: IHtmlContentBuilder) -> None: ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class HtmlContentBuilderExtensions:
    @overload
    def AppendFormat(builder: IHtmlContentBuilder, format: str, args: Set(Object)) -> IHtmlContentBuilder: ...
    @overload
    def AppendFormat(builder: IHtmlContentBuilder, formatProvider: IFormatProvider, format: str, args: Set(Object)) -> IHtmlContentBuilder: ...
    def AppendHtmlLine(builder: IHtmlContentBuilder, encoded: str) -> IHtmlContentBuilder: ...
    @overload
    def AppendLine(builder: IHtmlContentBuilder) -> IHtmlContentBuilder: ...
    @overload
    def AppendLine(builder: IHtmlContentBuilder, unencoded: str) -> IHtmlContentBuilder: ...
    @overload
    def AppendLine(builder: IHtmlContentBuilder, content: IHtmlContent) -> IHtmlContentBuilder: ...
    def SetContent(builder: IHtmlContentBuilder, unencoded: str) -> IHtmlContentBuilder: ...
    @overload
    def SetHtmlContent(builder: IHtmlContentBuilder, content: IHtmlContent) -> IHtmlContentBuilder: ...
    @overload
    def SetHtmlContent(builder: IHtmlContentBuilder, encoded: str) -> IHtmlContentBuilder: ...


class HtmlFormattableString:
    @overload
    def __init__(self, format: str, args: Set(Object)): ...
    @overload
    def __init__(self, formatProvider: IFormatProvider, format: str, args: Set(Object)): ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class HtmlString:
    def __init__(self, value: str): ...
    @property
    def Value(self) -> str: ...
    def ToString(self) -> str: ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class IHtmlContent:
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class IHtmlContentBuilder:
    def Append(self, unencoded: str) -> IHtmlContentBuilder: ...
    @overload
    def AppendHtml(self, content: IHtmlContent) -> IHtmlContentBuilder: ...
    @overload
    def AppendHtml(self, encoded: str) -> IHtmlContentBuilder: ...
    def Clear(self) -> IHtmlContentBuilder: ...


class IHtmlContentContainer:
    def CopyTo(self, builder: IHtmlContentBuilder) -> None: ...
    def MoveTo(self, builder: IHtmlContentBuilder) -> None: ...
