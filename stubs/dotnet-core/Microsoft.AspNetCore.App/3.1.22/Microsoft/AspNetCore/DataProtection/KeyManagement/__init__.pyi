__all__ = ['Internal']
from typing import Tuple, Set, Iterable, List


class IKey:
    def CreateEncryptor(self) -> IAuthenticatedEncryptor: ...
    @property
    def ActivationDate(self) -> DateTimeOffset: ...
    @property
    def CreationDate(self) -> DateTimeOffset: ...
    @property
    def Descriptor(self) -> IAuthenticatedEncryptorDescriptor: ...
    @property
    def ExpirationDate(self) -> DateTimeOffset: ...
    @property
    def IsRevoked(self) -> bool: ...
    @property
    def KeyId(self) -> Guid: ...


class IKeyEscrowSink:
    def Store(self, keyId: Guid, element: XElement) -> None: ...


class IKeyManager:
    def CreateNewKey(self, activationDate: DateTimeOffset, expirationDate: DateTimeOffset) -> IKey: ...
    def GetAllKeys(self) -> IReadOnlyCollection: ...
    def GetCacheExpirationToken(self) -> CancellationToken: ...
    def RevokeAllKeys(self, revocationDate: DateTimeOffset, reason: str) -> None: ...
    def RevokeKey(self, keyId: Guid, reason: str) -> None: ...


class KeyManagementOptions:
    def __init__(self): ...
    @property
    def AuthenticatedEncryptorConfiguration(self) -> AlgorithmConfiguration: ...
    @property
    def AuthenticatedEncryptorFactories(self) -> List[IAuthenticatedEncryptorFactory]: ...
    @property
    def AutoGenerateKeys(self) -> bool: ...
    @property
    def KeyEscrowSinks(self) -> List[IKeyEscrowSink]: ...
    @property
    def NewKeyLifetime(self) -> TimeSpan: ...
    @property
    def XmlEncryptor(self) -> IXmlEncryptor: ...
    @property
    def XmlRepository(self) -> IXmlRepository: ...
    @AuthenticatedEncryptorConfiguration.setter
    def AuthenticatedEncryptorConfiguration(self, value: AlgorithmConfiguration) -> None: ...
    @AutoGenerateKeys.setter
    def AutoGenerateKeys(self, value: bool) -> None: ...
    @NewKeyLifetime.setter
    def NewKeyLifetime(self, value: TimeSpan) -> None: ...
    @XmlEncryptor.setter
    def XmlEncryptor(self, value: IXmlEncryptor) -> None: ...
    @XmlRepository.setter
    def XmlRepository(self, value: IXmlRepository) -> None: ...


class XmlKeyManager:
    @overload
    def __init__(self, keyManagementOptions: IOptions, activator: IActivator): ...
    @overload
    def __init__(self, keyManagementOptions: IOptions, activator: IActivator, loggerFactory: ILoggerFactory): ...
    def CreateNewKey(self, activationDate: DateTimeOffset, expirationDate: DateTimeOffset) -> IKey: ...
    def GetAllKeys(self) -> IReadOnlyCollection: ...
    def GetCacheExpirationToken(self) -> CancellationToken: ...
    def RevokeAllKeys(self, revocationDate: DateTimeOffset, reason: str) -> None: ...
    def RevokeKey(self, keyId: Guid, reason: str) -> None: ...
