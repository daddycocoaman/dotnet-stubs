from typing import Tuple, Set, Iterable, List


class HttpRequestMultipartExtensions:
    def GetMultipartBoundary(request: HttpRequest) -> str: ...


class QueryBuilder:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parameters: Iterable[KeyValuePair]): ...
    @overload
    def Add(self, key: str, values: Iterable[str]) -> None: ...
    @overload
    def Add(self, key: str, value: str) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetHashCode(self) -> int: ...
    def ToQueryString(self) -> QueryString: ...
    def ToString(self) -> str: ...


class StreamCopyOperation:
    @overload
    def CopyToAsync(source: Stream, destination: Stream, count: Nullable, cancel: CancellationToken) -> Task: ...
    @overload
    def CopyToAsync(source: Stream, destination: Stream, count: Nullable, bufferSize: int, cancel: CancellationToken) -> Task: ...


class UriHelper:
    def BuildAbsolute(scheme: str, host: HostString, pathBase: PathString, path: PathString, query: QueryString, fragment: FragmentString) -> str: ...
    def BuildRelative(pathBase: PathString, path: PathString, query: QueryString, fragment: FragmentString) -> str: ...
    def Encode(uri: Uri) -> str: ...
    def FromAbsolute(uri: str) -> Tuple[str, HostString, PathString, QueryString, FragmentString]: ...
    def GetDisplayUrl(request: HttpRequest) -> str: ...
    def GetEncodedPathAndQuery(request: HttpRequest) -> str: ...
    def GetEncodedUrl(request: HttpRequest) -> str: ...
