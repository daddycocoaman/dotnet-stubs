from typing import Tuple, Set, Iterable, List


class RewriteOptionsExtensions:
    @overload
    def Add(options: RewriteOptions, rule: IRule) -> RewriteOptions: ...
    @overload
    def Add(options: RewriteOptions, applyRule: Action) -> RewriteOptions: ...
    @overload
    def AddRedirect(options: RewriteOptions, regex: str, replacement: str) -> RewriteOptions: ...
    @overload
    def AddRedirect(options: RewriteOptions, regex: str, replacement: str, statusCode: int) -> RewriteOptions: ...
    @overload
    def AddRedirectToHttps(options: RewriteOptions) -> RewriteOptions: ...
    @overload
    def AddRedirectToHttps(options: RewriteOptions, statusCode: int) -> RewriteOptions: ...
    @overload
    def AddRedirectToHttps(options: RewriteOptions, statusCode: int, sslPort: Nullable) -> RewriteOptions: ...
    def AddRedirectToHttpsPermanent(options: RewriteOptions) -> RewriteOptions: ...
    @overload
    def AddRedirectToWww(options: RewriteOptions) -> RewriteOptions: ...
    @overload
    def AddRedirectToWww(options: RewriteOptions, statusCode: int) -> RewriteOptions: ...
    @overload
    def AddRedirectToWww(options: RewriteOptions, domains: Set(str)) -> RewriteOptions: ...
    @overload
    def AddRedirectToWww(options: RewriteOptions, statusCode: int, domains: Set(str)) -> RewriteOptions: ...
    @overload
    def AddRedirectToWwwPermanent(options: RewriteOptions) -> RewriteOptions: ...
    @overload
    def AddRedirectToWwwPermanent(options: RewriteOptions, domains: Set(str)) -> RewriteOptions: ...
    def AddRewrite(options: RewriteOptions, regex: str, replacement: str, skipRemainingRules: bool) -> RewriteOptions: ...
