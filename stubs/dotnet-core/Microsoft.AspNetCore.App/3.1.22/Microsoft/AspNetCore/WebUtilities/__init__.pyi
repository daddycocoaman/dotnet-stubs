from typing import Tuple, Set, Iterable, List


class Base64UrlTextEncoder:
    def Decode(text: str) -> Set(Byte): ...
    def Encode(data: Set(Byte)) -> str: ...


class BufferedReadStream:
    @overload
    def __init__(self, inner: Stream, bufferSize: int): ...
    @overload
    def __init__(self, inner: Stream, bufferSize: int, bytePool: ArrayPool): ...
    @overload
    def EnsureBuffered(self) -> bool: ...
    @overload
    def EnsureBuffered(self, minCount: int) -> bool: ...
    @overload
    def EnsureBufferedAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def EnsureBufferedAsync(self, minCount: int, cancellationToken: CancellationToken) -> Task: ...
    def Flush(self) -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @property
    def BufferedData(self) -> ArraySegment: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanTimeout(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Position(self) -> Int64: ...
    @overload
    def Read(self, buffer: Set(Byte), offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...
    def ReadLine(self, lengthLimit: int) -> str: ...
    def ReadLineAsync(self, lengthLimit: int, cancellationToken: CancellationToken) -> Task: ...
    def Seek(self, offset: Int64, origin: SeekOrigin) -> Int64: ...
    @Position.setter
    def Position(self, value: Int64) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    @overload
    def Write(self, buffer: Set(Byte), offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...


class FileBufferingReadStream:
    @overload
    def __init__(self, inner: Stream, memoryThreshold: int): ...
    @overload
    def __init__(self, inner: Stream, memoryThreshold: int, bufferLimit: Nullable, tempFileDirectoryAccessor: Func): ...
    @overload
    def __init__(self, inner: Stream, memoryThreshold: int, bufferLimit: Nullable, tempFileDirectory: str): ...
    @overload
    def __init__(self, inner: Stream, memoryThreshold: int, bufferLimit: Nullable, tempFileDirectoryAccessor: Func, bytePool: ArrayPool): ...
    @overload
    def __init__(self, inner: Stream, memoryThreshold: int, bufferLimit: Nullable, tempFileDirectory: str, bytePool: ArrayPool): ...
    def DisposeAsync(self) -> ValueTask: ...
    def Flush(self) -> None: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def InMemory(self) -> bool: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Position(self) -> Int64: ...
    @property
    def TempFileName(self) -> str: ...
    @overload
    def Read(self, buffer: Set(Byte), offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...
    def Seek(self, offset: Int64, origin: SeekOrigin) -> Int64: ...
    @Position.setter
    def Position(self, value: Int64) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    @overload
    def Write(self, buffer: Set(Byte), offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...


class FileBufferingWriteStream:
    def __init__(self, memoryThreshold: int, bufferLimit: Nullable, tempFileDirectoryAccessor: Func): ...
    def DisposeAsync(self) -> ValueTask: ...
    def DrainBufferAsync(self, destination: Stream, cancellationToken: CancellationToken) -> Task: ...
    def Flush(self) -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Position(self) -> Int64: ...
    @overload
    def Read(self, buffer: Set(Byte), offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...
    def Seek(self, offset: Int64, origin: SeekOrigin) -> Int64: ...
    @Position.setter
    def Position(self, value: Int64) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    @overload
    def Write(self, buffer: Set(Byte), offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...


class FileMultipartSection:
    @overload
    def __init__(self, section: MultipartSection): ...
    @overload
    def __init__(self, section: MultipartSection, header: ContentDispositionHeaderValue): ...
    @property
    def FileName(self) -> str: ...
    @property
    def FileStream(self) -> Stream: ...
    @property
    def Name(self) -> str: ...
    @property
    def Section(self) -> MultipartSection: ...


class FormMultipartSection:
    @overload
    def __init__(self, section: MultipartSection): ...
    @overload
    def __init__(self, section: MultipartSection, header: ContentDispositionHeaderValue): ...
    @property
    def Name(self) -> str: ...
    @property
    def Section(self) -> MultipartSection: ...
    def GetValueAsync(self) -> Task: ...


class FormPipeReader:
    @overload
    def __init__(self, pipeReader: PipeReader): ...
    @overload
    def __init__(self, pipeReader: PipeReader, encoding: Encoding): ...
    @property
    def KeyLengthLimit(self) -> int: ...
    @property
    def ValueCountLimit(self) -> int: ...
    @property
    def ValueLengthLimit(self) -> int: ...
    def ReadFormAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @KeyLengthLimit.setter
    def KeyLengthLimit(self, value: int) -> None: ...
    @ValueCountLimit.setter
    def ValueCountLimit(self, value: int) -> None: ...
    @ValueLengthLimit.setter
    def ValueLengthLimit(self, value: int) -> None: ...


class FormReader:
    @overload
    def __init__(self, data: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, data: str, charPool: ArrayPool): ...
    @overload
    def __init__(self, stream: Stream, encoding: Encoding): ...
    @overload
    def __init__(self, stream: Stream, encoding: Encoding, charPool: ArrayPool): ...
    def Dispose(self) -> None: ...
    @property
    def KeyLengthLimit(self) -> int: ...
    @property
    def ValueCountLimit(self) -> int: ...
    @property
    def ValueLengthLimit(self) -> int: ...
    def ReadForm(self) -> Dictionary: ...
    def ReadFormAsync(self, cancellationToken: CancellationToken) -> Task: ...
    def ReadNextPair(self) -> Nullable: ...
    def ReadNextPairAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @KeyLengthLimit.setter
    def KeyLengthLimit(self, value: int) -> None: ...
    @ValueCountLimit.setter
    def ValueCountLimit(self, value: int) -> None: ...
    @ValueLengthLimit.setter
    def ValueLengthLimit(self, value: int) -> None: ...


class HttpRequestStreamReader:
    @overload
    def __init__(self, stream: Stream, encoding: Encoding): ...
    @overload
    def __init__(self, stream: Stream, encoding: Encoding, bufferSize: int): ...
    @overload
    def __init__(self, stream: Stream, encoding: Encoding, bufferSize: int, bytePool: ArrayPool, charPool: ArrayPool): ...
    def Peek(self) -> int: ...
    @overload
    def Read(self) -> int: ...
    @overload
    def Read(self, buffer: Set(Char), index: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: Set(Char), index: int, count: int) -> Task: ...


class HttpResponseStreamWriter:
    @overload
    def __init__(self, stream: Stream, encoding: Encoding): ...
    @overload
    def __init__(self, stream: Stream, encoding: Encoding, bufferSize: int): ...
    @overload
    def __init__(self, stream: Stream, encoding: Encoding, bufferSize: int, bytePool: ArrayPool, charPool: ArrayPool): ...
    def DisposeAsync(self) -> ValueTask: ...
    def Flush(self) -> None: ...
    def FlushAsync(self) -> Task: ...
    @property
    def Encoding(self) -> Encoding: ...
    @overload
    def Write(self, value: Char) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, values: Set(Char), index: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, value: Char) -> Task: ...
    @overload
    def WriteAsync(self, value: str) -> Task: ...
    @overload
    def WriteAsync(self, values: Set(Char), index: int, count: int) -> Task: ...


class KeyValueAccumulator:
    def Append(self, key: str, value: str) -> None: ...
    @property
    def HasValues(self) -> bool: ...
    @property
    def KeyCount(self) -> int: ...
    @property
    def ValueCount(self) -> int: ...
    def GetResults(self) -> Dictionary: ...


class MultipartReader:
    @overload
    def __init__(self, boundary: str, stream: Stream): ...
    @overload
    def __init__(self, boundary: str, stream: Stream, bufferSize: int): ...
    @property
    def BodyLengthLimit(self) -> Nullable: ...
    @property
    def HeadersCountLimit(self) -> int: ...
    @property
    def HeadersLengthLimit(self) -> int: ...
    def ReadNextSectionAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @BodyLengthLimit.setter
    def BodyLengthLimit(self, value: Nullable) -> None: ...
    @HeadersCountLimit.setter
    def HeadersCountLimit(self, value: int) -> None: ...
    @HeadersLengthLimit.setter
    def HeadersLengthLimit(self, value: int) -> None: ...


class MultipartSection:
    def __init__(self): ...
    @property
    def BaseStreamOffset(self) -> Nullable: ...
    @property
    def Body(self) -> Stream: ...
    @property
    def ContentDisposition(self) -> str: ...
    @property
    def ContentType(self) -> str: ...
    @property
    def Headers(self) -> Dictionary: ...
    @BaseStreamOffset.setter
    def BaseStreamOffset(self, value: Nullable) -> None: ...
    @Body.setter
    def Body(self, value: Stream) -> None: ...
    @Headers.setter
    def Headers(self, value: Dictionary) -> None: ...


class MultipartSectionConverterExtensions:
    def AsFileSection(section: MultipartSection) -> FileMultipartSection: ...
    def AsFormDataSection(section: MultipartSection) -> FormMultipartSection: ...
    def GetContentDispositionHeader(section: MultipartSection) -> ContentDispositionHeaderValue: ...


class MultipartSectionStreamExtensions:
    def ReadAsStringAsync(section: MultipartSection) -> Task: ...


class QueryHelpers:
    @overload
    def AddQueryString(uri: str, queryString: IDictionary) -> str: ...
    @overload
    def AddQueryString(uri: str, name: str, value: str) -> str: ...
    def ParseNullableQuery(queryString: str) -> Dictionary: ...
    def ParseQuery(queryString: str) -> Dictionary: ...


class ReasonPhrases:
    def GetReasonPhrase(statusCode: int) -> str: ...


class StreamHelperExtensions:
    @overload
    def DrainAsync(stream: Stream, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def DrainAsync(stream: Stream, limit: Nullable, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def DrainAsync(stream: Stream, bytePool: ArrayPool, limit: Nullable, cancellationToken: CancellationToken) -> Task: ...


class WebEncoders:
    @overload
    def Base64UrlDecode(input: str) -> Set(Byte): ...
    @overload
    def Base64UrlDecode(input: str, offset: int, count: int) -> Set(Byte): ...
    @overload
    def Base64UrlDecode(input: str, offset: int, buffer: Set(Char), bufferOffset: int, count: int) -> Set(Byte): ...
    @overload
    def Base64UrlEncode(input: Set(Byte)) -> str: ...
    @overload
    def Base64UrlEncode(input: ReadOnlySpan) -> str: ...
    @overload
    def Base64UrlEncode(input: Set(Byte), offset: int, count: int) -> str: ...
    @overload
    def Base64UrlEncode(input: Set(Byte), offset: int, output: Set(Char), outputOffset: int, count: int) -> int: ...
    def GetArraySizeRequiredToDecode(count: int) -> int: ...
    def GetArraySizeRequiredToEncode(count: int) -> int: ...
