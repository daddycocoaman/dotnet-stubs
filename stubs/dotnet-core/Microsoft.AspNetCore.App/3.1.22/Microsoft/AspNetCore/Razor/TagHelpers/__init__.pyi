from typing import Tuple, Set, Iterable, List


class DefaultTagHelperContent(TagHelperContent):
    def __init__(self): ...
    def Append(self, unencoded: str) -> TagHelperContent: ...
    @overload
    def AppendHtml(self, htmlContent: IHtmlContent) -> TagHelperContent: ...
    @overload
    def AppendHtml(self, encoded: str) -> TagHelperContent: ...
    def Clear(self) -> TagHelperContent: ...
    def CopyTo(self, destination: IHtmlContentBuilder) -> None: ...
    @property
    def IsEmptyOrWhiteSpace(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    @overload
    def GetContent(self) -> str: ...
    @overload
    def GetContent(self, encoder: HtmlEncoder) -> str: ...
    def MoveTo(self, destination: IHtmlContentBuilder) -> None: ...
    def Reinitialize(self) -> None: ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class HtmlAttributeNameAttribute:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @property
    def DictionaryAttributePrefix(self) -> str: ...
    @property
    def DictionaryAttributePrefixSet(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @DictionaryAttributePrefix.setter
    def DictionaryAttributePrefix(self, value: str) -> None: ...


class HtmlAttributeNotBoundAttribute:
    def __init__(self): ...


class HtmlAttributeValueStyle:
    DoubleQuotes = 0
    SingleQuotes = 1
    NoQuotes = 2
    Minimized = 3


class HtmlTargetElementAttribute:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tag: str): ...
    @property
    def Attributes(self) -> str: ...
    @property
    def ParentTag(self) -> str: ...
    @property
    def Tag(self) -> str: ...
    @property
    def TagStructure(self) -> TagStructure: ...
    @Attributes.setter
    def Attributes(self, value: str) -> None: ...
    @ParentTag.setter
    def ParentTag(self, value: str) -> None: ...
    @TagStructure.setter
    def TagStructure(self, value: TagStructure) -> None: ...


class ITagHelper:
    pass


class ITagHelperComponent:
    @property
    def Order(self) -> int: ...
    def Init(self, context: TagHelperContext) -> None: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...


class NullHtmlEncoder:
    @overload
    def Encode(self, value: str) -> str: ...
    @overload
    def Encode(self, output: TextWriter, value: Set(Char), startIndex: int, characterCount: int) -> None: ...
    @overload
    def Encode(self, output: TextWriter, value: str, startIndex: int, characterCount: int) -> None: ...
    def FindFirstCharacterToEncode(self, text: Char, textLength: int) -> int: ...
    @property
    def Default() -> NullHtmlEncoder: ...
    @property
    def MaxOutputCharactersPerInputCharacter(self) -> int: ...
    def TryEncodeUnicodeScalar(self, unicodeScalar: int, buffer: Char, bufferLength: int) -> Tuple[bool, int]: ...
    def WillEncode(self, unicodeScalar: int) -> bool: ...


class OutputElementHintAttribute:
    def __init__(self, outputElement: str): ...
    @property
    def OutputElement(self) -> str: ...


class ReadOnlyTagHelperAttributeList:
    def __init__(self, attributes: List[TagHelperAttribute]): ...
    def ContainsName(self, name: str) -> bool: ...
    @property
    def Item(self, name: str) -> TagHelperAttribute: ...
    def IndexOfName(self, name: str) -> int: ...
    def TryGetAttribute(self, name: str) -> Tuple[bool, TagHelperAttribute]: ...
    def TryGetAttributes(self, name: str) -> Tuple[bool, IReadOnlyList]: ...


class RestrictChildrenAttribute:
    def __init__(self, childTag: str, childTags: Set(str)): ...
    @property
    def ChildTags(self) -> Iterable[str]: ...


class TagHelper:
    @property
    def Order(self) -> int: ...
    def Init(self, context: TagHelperContext) -> None: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...


class TagHelperAttribute:
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, value: Object): ...
    @overload
    def __init__(self, name: str, value: Object, valueStyle: HtmlAttributeValueStyle): ...
    def CopyTo(self, destination: IHtmlContentBuilder) -> None: ...
    @overload
    def Equals(self, other: TagHelperAttribute) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @property
    def ValueStyle(self) -> HtmlAttributeValueStyle: ...
    def GetHashCode(self) -> int: ...
    def MoveTo(self, destination: IHtmlContentBuilder) -> None: ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class TagHelperAttributeList(ReadOnlyTagHelperAttributeList):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Iterable[TagHelperAttribute]): ...
    @overload
    def __init__(self, attributes: List): ...
    @overload
    def Add(self, attribute: TagHelperAttribute) -> None: ...
    @overload
    def Add(self, name: str, value: Object) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Item(self, index: int) -> TagHelperAttribute: ...
    def Insert(self, index: int, attribute: TagHelperAttribute) -> None: ...
    def Remove(self, attribute: TagHelperAttribute) -> bool: ...
    def RemoveAll(self, name: str) -> bool: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: TagHelperAttribute) -> None: ...
    @overload
    def SetAttribute(self, attribute: TagHelperAttribute) -> None: ...
    @overload
    def SetAttribute(self, name: str, value: Object) -> None: ...


class TagHelperComponent:
    @property
    def Order(self) -> int: ...
    def Init(self, context: TagHelperContext) -> None: ...
    def Process(self, context: TagHelperContext, output: TagHelperOutput) -> None: ...
    def ProcessAsync(self, context: TagHelperContext, output: TagHelperOutput) -> Task: ...


class TagHelperContent:
    def Append(self, unencoded: str) -> TagHelperContent: ...
    @overload
    def AppendFormat(self, format: str, args: Set(Object)) -> TagHelperContent: ...
    @overload
    def AppendFormat(self, provider: IFormatProvider, format: str, args: Set(Object)) -> TagHelperContent: ...
    @overload
    def AppendHtml(self, htmlContent: IHtmlContent) -> TagHelperContent: ...
    @overload
    def AppendHtml(self, encoded: str) -> TagHelperContent: ...
    def Clear(self) -> TagHelperContent: ...
    def CopyTo(self, destination: IHtmlContentBuilder) -> None: ...
    @property
    def IsEmptyOrWhiteSpace(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    @overload
    def GetContent(self) -> str: ...
    @overload
    def GetContent(self, encoder: HtmlEncoder) -> str: ...
    def MoveTo(self, destination: IHtmlContentBuilder) -> None: ...
    def Reinitialize(self) -> None: ...
    def SetContent(self, unencoded: str) -> TagHelperContent: ...
    @overload
    def SetHtmlContent(self, htmlContent: IHtmlContent) -> TagHelperContent: ...
    @overload
    def SetHtmlContent(self, encoded: str) -> TagHelperContent: ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class TagHelperContext:
    @overload
    def __init__(self, allAttributes: TagHelperAttributeList, items: IDictionary, uniqueId: str): ...
    @overload
    def __init__(self, tagName: str, allAttributes: TagHelperAttributeList, items: IDictionary, uniqueId: str): ...
    @property
    def AllAttributes(self) -> ReadOnlyTagHelperAttributeList: ...
    @property
    def Items(self) -> IDictionary: ...
    @property
    def TagName(self) -> str: ...
    @property
    def UniqueId(self) -> str: ...
    @overload
    def Reinitialize(self, items: IDictionary, uniqueId: str) -> None: ...
    @overload
    def Reinitialize(self, tagName: str, items: IDictionary, uniqueId: str) -> None: ...


class TagHelperOutput:
    def __init__(self, tagName: str, attributes: TagHelperAttributeList, getChildContentAsync: Func`3): ...
    @property
    def Attributes(self) -> TagHelperAttributeList: ...
    @property
    def Content(self) -> TagHelperContent: ...
    @property
    def IsContentModified(self) -> bool: ...
    @property
    def PostContent(self) -> TagHelperContent: ...
    @property
    def PostElement(self) -> TagHelperContent: ...
    @property
    def PreContent(self) -> TagHelperContent: ...
    @property
    def PreElement(self) -> TagHelperContent: ...
    @property
    def TagMode(self) -> TagMode: ...
    @property
    def TagName(self) -> str: ...
    @overload
    def GetChildContentAsync(self) -> Task: ...
    @overload
    def GetChildContentAsync(self, useCachedResult: bool) -> Task: ...
    @overload
    def GetChildContentAsync(self, encoder: HtmlEncoder) -> Task: ...
    @overload
    def GetChildContentAsync(self, useCachedResult: bool, encoder: HtmlEncoder) -> Task: ...
    def Reinitialize(self, tagName: str, tagMode: TagMode) -> None: ...
    @Content.setter
    def Content(self, value: TagHelperContent) -> None: ...
    @TagMode.setter
    def TagMode(self, value: TagMode) -> None: ...
    @TagName.setter
    def TagName(self, value: str) -> None: ...
    def SuppressOutput(self) -> None: ...
    def WriteTo(self, writer: TextWriter, encoder: HtmlEncoder) -> None: ...


class TagMode:
    StartTagAndEndTag = 0
    SelfClosing = 1
    StartTagOnly = 2


class TagStructure:
    Unspecified = 0
    NormalOrSelfClosing = 1
    WithoutEndTag = 2
