from typing import Tuple, Set, Iterable, List


class CacheControlHeaderValue:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Extensions(self) -> List[NameValueHeaderValue]: ...
    @property
    def MaxAge(self) -> Nullable: ...
    @property
    def MaxStale(self) -> bool: ...
    @property
    def MaxStaleLimit(self) -> Nullable: ...
    @property
    def MinFresh(self) -> Nullable: ...
    @property
    def MustRevalidate(self) -> bool: ...
    @property
    def NoCache(self) -> bool: ...
    @property
    def NoCacheHeaders(self) -> ICollection: ...
    @property
    def NoStore(self) -> bool: ...
    @property
    def NoTransform(self) -> bool: ...
    @property
    def OnlyIfCached(self) -> bool: ...
    @property
    def Private(self) -> bool: ...
    @property
    def PrivateHeaders(self) -> ICollection: ...
    @property
    def ProxyRevalidate(self) -> bool: ...
    @property
    def Public(self) -> bool: ...
    @property
    def SharedMaxAge(self) -> Nullable: ...
    def GetHashCode(self) -> int: ...
    def Parse(input: StringSegment) -> CacheControlHeaderValue: ...
    @MaxAge.setter
    def MaxAge(self, value: Nullable) -> None: ...
    @MaxStale.setter
    def MaxStale(self, value: bool) -> None: ...
    @MaxStaleLimit.setter
    def MaxStaleLimit(self, value: Nullable) -> None: ...
    @MinFresh.setter
    def MinFresh(self, value: Nullable) -> None: ...
    @MustRevalidate.setter
    def MustRevalidate(self, value: bool) -> None: ...
    @NoCache.setter
    def NoCache(self, value: bool) -> None: ...
    @NoStore.setter
    def NoStore(self, value: bool) -> None: ...
    @NoTransform.setter
    def NoTransform(self, value: bool) -> None: ...
    @OnlyIfCached.setter
    def OnlyIfCached(self, value: bool) -> None: ...
    @Private.setter
    def Private(self, value: bool) -> None: ...
    @ProxyRevalidate.setter
    def ProxyRevalidate(self, value: bool) -> None: ...
    @Public.setter
    def Public(self, value: bool) -> None: ...
    @SharedMaxAge.setter
    def SharedMaxAge(self, value: Nullable) -> None: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, CacheControlHeaderValue]: ...


class ContentDispositionHeaderValue:
    def __init__(self, dispositionType: StringSegment): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CreationDate(self) -> Nullable: ...
    @property
    def DispositionType(self) -> StringSegment: ...
    @property
    def FileName(self) -> StringSegment: ...
    @property
    def FileNameStar(self) -> StringSegment: ...
    @property
    def ModificationDate(self) -> Nullable: ...
    @property
    def Name(self) -> StringSegment: ...
    @property
    def Parameters(self) -> List[NameValueHeaderValue]: ...
    @property
    def ReadDate(self) -> Nullable: ...
    @property
    def Size(self) -> Nullable: ...
    def GetHashCode(self) -> int: ...
    def Parse(input: StringSegment) -> ContentDispositionHeaderValue: ...
    @CreationDate.setter
    def CreationDate(self, value: Nullable) -> None: ...
    @DispositionType.setter
    def DispositionType(self, value: StringSegment) -> None: ...
    @FileName.setter
    def FileName(self, value: StringSegment) -> None: ...
    @FileNameStar.setter
    def FileNameStar(self, value: StringSegment) -> None: ...
    @ModificationDate.setter
    def ModificationDate(self, value: Nullable) -> None: ...
    @Name.setter
    def Name(self, value: StringSegment) -> None: ...
    @ReadDate.setter
    def ReadDate(self, value: Nullable) -> None: ...
    @Size.setter
    def Size(self, value: Nullable) -> None: ...
    def SetHttpFileName(self, fileName: StringSegment) -> None: ...
    def SetMimeFileName(self, fileName: StringSegment) -> None: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, ContentDispositionHeaderValue]: ...


class ContentDispositionHeaderValueIdentityExtensions:
    def IsFileDisposition(header: ContentDispositionHeaderValue) -> bool: ...
    def IsFormDisposition(header: ContentDispositionHeaderValue) -> bool: ...


class ContentRangeHeaderValue:
    @overload
    def __init__(self, length: Int64): ...
    @overload
    def __init__(self, from_: Int64, to: Int64): ...
    @overload
    def __init__(self, from_: Int64, to: Int64, length: Int64): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def From(self) -> Nullable: ...
    @property
    def HasLength(self) -> bool: ...
    @property
    def HasRange(self) -> bool: ...
    @property
    def Length(self) -> Nullable: ...
    @property
    def To(self) -> Nullable: ...
    @property
    def Unit(self) -> StringSegment: ...
    def GetHashCode(self) -> int: ...
    def Parse(input: StringSegment) -> ContentRangeHeaderValue: ...
    @Unit.setter
    def Unit(self, value: StringSegment) -> None: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, ContentRangeHeaderValue]: ...


class CookieHeaderValue:
    @overload
    def __init__(self, name: StringSegment): ...
    @overload
    def __init__(self, name: StringSegment, value: StringSegment): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> StringSegment: ...
    @property
    def Value(self) -> StringSegment: ...
    def GetHashCode(self) -> int: ...
    def Parse(input: StringSegment) -> CookieHeaderValue: ...
    def ParseList(inputs: List[str]) -> List[CookieHeaderValue]: ...
    def ParseStrictList(inputs: List[str]) -> List[CookieHeaderValue]: ...
    @Name.setter
    def Name(self, value: StringSegment) -> None: ...
    @Value.setter
    def Value(self, value: StringSegment) -> None: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, CookieHeaderValue]: ...
    def TryParseList(inputs: List[str]) -> Tuple[bool, List[CookieHeaderValue]]: ...
    def TryParseStrictList(inputs: List[str]) -> Tuple[bool, List[CookieHeaderValue]]: ...


class EntityTagHeaderValue:
    @overload
    def __init__(self, tag: StringSegment): ...
    @overload
    def __init__(self, tag: StringSegment, isWeak: bool): ...
    def Compare(self, other: EntityTagHeaderValue, useStrongComparison: bool) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Any() -> EntityTagHeaderValue: ...
    @property
    def IsWeak(self) -> bool: ...
    @property
    def Tag(self) -> StringSegment: ...
    def GetHashCode(self) -> int: ...
    def Parse(input: StringSegment) -> EntityTagHeaderValue: ...
    def ParseList(inputs: List[str]) -> List[EntityTagHeaderValue]: ...
    def ParseStrictList(inputs: List[str]) -> List[EntityTagHeaderValue]: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, EntityTagHeaderValue]: ...
    def TryParseList(inputs: List[str]) -> Tuple[bool, List[EntityTagHeaderValue]]: ...
    def TryParseStrictList(inputs: List[str]) -> Tuple[bool, List[EntityTagHeaderValue]]: ...


class HeaderNames:
    pass


class HeaderQuality:
    pass


class HeaderUtilities:
    def ContainsCacheDirective(cacheControlDirectives: StringValues, targetDirectives: str) -> bool: ...
    def EscapeAsQuotedString(input: StringSegment) -> StringSegment: ...
    @overload
    def FormatDate(dateTime: DateTimeOffset) -> str: ...
    @overload
    def FormatDate(dateTime: DateTimeOffset, quoted: bool) -> str: ...
    def FormatNonNegativeInt64(value: Int64) -> str: ...
    def IsQuoted(input: StringSegment) -> bool: ...
    def RemoveQuotes(input: StringSegment) -> StringSegment: ...
    def TryParseDate(input: StringSegment) -> Tuple[bool, DateTimeOffset]: ...
    def TryParseNonNegativeInt32(value: StringSegment) -> Tuple[bool, int]: ...
    def TryParseNonNegativeInt64(value: StringSegment) -> Tuple[bool, Int64]: ...
    def TryParseSeconds(headerValues: StringValues, targetValue: str) -> Tuple[bool, Nullable]: ...
    def UnescapeAsQuotedString(input: StringSegment) -> StringSegment: ...


class MediaTypeHeaderValue:
    @overload
    def __init__(self, mediaType: StringSegment): ...
    @overload
    def __init__(self, mediaType: StringSegment, quality: float): ...
    def Copy(self) -> MediaTypeHeaderValue: ...
    def CopyAsReadOnly(self) -> MediaTypeHeaderValue: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Boundary(self) -> StringSegment: ...
    @property
    def Charset(self) -> StringSegment: ...
    @property
    def Encoding(self) -> Encoding: ...
    @property
    def Facets(self) -> Iterable[StringSegment]: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def MatchesAllSubTypes(self) -> bool: ...
    @property
    def MatchesAllSubTypesWithoutSuffix(self) -> bool: ...
    @property
    def MatchesAllTypes(self) -> bool: ...
    @property
    def MediaType(self) -> StringSegment: ...
    @property
    def Parameters(self) -> List[NameValueHeaderValue]: ...
    @property
    def Quality(self) -> Nullable: ...
    @property
    def SubType(self) -> StringSegment: ...
    @property
    def SubTypeWithoutSuffix(self) -> StringSegment: ...
    @property
    def Suffix(self) -> StringSegment: ...
    @property
    def Type(self) -> StringSegment: ...
    def GetHashCode(self) -> int: ...
    def IsSubsetOf(self, otherMediaType: MediaTypeHeaderValue) -> bool: ...
    def Parse(input: StringSegment) -> MediaTypeHeaderValue: ...
    def ParseList(inputs: List[str]) -> List[MediaTypeHeaderValue]: ...
    def ParseStrictList(inputs: List[str]) -> List[MediaTypeHeaderValue]: ...
    @Boundary.setter
    def Boundary(self, value: StringSegment) -> None: ...
    @Charset.setter
    def Charset(self, value: StringSegment) -> None: ...
    @Encoding.setter
    def Encoding(self, value: Encoding) -> None: ...
    @MediaType.setter
    def MediaType(self, value: StringSegment) -> None: ...
    @Quality.setter
    def Quality(self, value: Nullable) -> None: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, MediaTypeHeaderValue]: ...
    def TryParseList(inputs: List[str]) -> Tuple[bool, List[MediaTypeHeaderValue]]: ...
    def TryParseStrictList(inputs: List[str]) -> Tuple[bool, List[MediaTypeHeaderValue]]: ...


class MediaTypeHeaderValueComparer:
    def Compare(self, mediaType1: MediaTypeHeaderValue, mediaType2: MediaTypeHeaderValue) -> int: ...
    @property
    def QualityComparer() -> MediaTypeHeaderValueComparer: ...


class NameValueHeaderValue:
    @overload
    def __init__(self, name: StringSegment): ...
    @overload
    def __init__(self, name: StringSegment, value: StringSegment): ...
    def Copy(self) -> NameValueHeaderValue: ...
    def CopyAsReadOnly(self) -> NameValueHeaderValue: ...
    def Equals(self, obj: Object) -> bool: ...
    def Find(values: List[NameValueHeaderValue], name: StringSegment) -> NameValueHeaderValue: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Name(self) -> StringSegment: ...
    @property
    def Value(self) -> StringSegment: ...
    def GetHashCode(self) -> int: ...
    def GetUnescapedValue(self) -> StringSegment: ...
    def Parse(input: StringSegment) -> NameValueHeaderValue: ...
    def ParseList(input: List[str]) -> List[NameValueHeaderValue]: ...
    def ParseStrictList(input: List[str]) -> List[NameValueHeaderValue]: ...
    @Value.setter
    def Value(self, value: StringSegment) -> None: ...
    def SetAndEscapeValue(self, value: StringSegment) -> None: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, NameValueHeaderValue]: ...
    def TryParseList(input: List[str]) -> Tuple[bool, List[NameValueHeaderValue]]: ...
    def TryParseStrictList(input: List[str]) -> Tuple[bool, List[NameValueHeaderValue]]: ...


class RangeConditionHeaderValue:
    @overload
    def __init__(self, lastModified: DateTimeOffset): ...
    @overload
    def __init__(self, entityTag: EntityTagHeaderValue): ...
    @overload
    def __init__(self, entityTag: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def EntityTag(self) -> EntityTagHeaderValue: ...
    @property
    def LastModified(self) -> Nullable: ...
    def GetHashCode(self) -> int: ...
    def Parse(input: StringSegment) -> RangeConditionHeaderValue: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, RangeConditionHeaderValue]: ...


class RangeHeaderValue:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, from_: Nullable, to: Nullable): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Ranges(self) -> ICollection: ...
    @property
    def Unit(self) -> StringSegment: ...
    def GetHashCode(self) -> int: ...
    def Parse(input: StringSegment) -> RangeHeaderValue: ...
    @Unit.setter
    def Unit(self, value: StringSegment) -> None: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, RangeHeaderValue]: ...


class RangeItemHeaderValue:
    def __init__(self, from_: Nullable, to: Nullable): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def From(self) -> Nullable: ...
    @property
    def To(self) -> Nullable: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class SameSiteMode:
    #None = 0
    Lax = 1
    Strict = 2
    Unspecified = -1


class SetCookieHeaderValue:
    @overload
    def __init__(self, name: StringSegment): ...
    @overload
    def __init__(self, name: StringSegment, value: StringSegment): ...
    def AppendToStringBuilder(self, builder: StringBuilder) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Domain(self) -> StringSegment: ...
    @property
    def Expires(self) -> Nullable: ...
    @property
    def HttpOnly(self) -> bool: ...
    @property
    def MaxAge(self) -> Nullable: ...
    @property
    def Name(self) -> StringSegment: ...
    @property
    def Path(self) -> StringSegment: ...
    @property
    def SameSite(self) -> SameSiteMode: ...
    @property
    def Secure(self) -> bool: ...
    @property
    def Value(self) -> StringSegment: ...
    def GetHashCode(self) -> int: ...
    def Parse(input: StringSegment) -> SetCookieHeaderValue: ...
    def ParseList(inputs: List[str]) -> List[SetCookieHeaderValue]: ...
    def ParseStrictList(inputs: List[str]) -> List[SetCookieHeaderValue]: ...
    @Domain.setter
    def Domain(self, value: StringSegment) -> None: ...
    @Expires.setter
    def Expires(self, value: Nullable) -> None: ...
    @HttpOnly.setter
    def HttpOnly(self, value: bool) -> None: ...
    @MaxAge.setter
    def MaxAge(self, value: Nullable) -> None: ...
    @Name.setter
    def Name(self, value: StringSegment) -> None: ...
    @Path.setter
    def Path(self, value: StringSegment) -> None: ...
    @SameSite.setter
    def SameSite(self, value: SameSiteMode) -> None: ...
    @Secure.setter
    def Secure(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: StringSegment) -> None: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, SetCookieHeaderValue]: ...
    def TryParseList(inputs: List[str]) -> Tuple[bool, List[SetCookieHeaderValue]]: ...
    def TryParseStrictList(inputs: List[str]) -> Tuple[bool, List[SetCookieHeaderValue]]: ...


class StringWithQualityHeaderValue:
    @overload
    def __init__(self, value: StringSegment): ...
    @overload
    def __init__(self, value: StringSegment, quality: float): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Quality(self) -> Nullable: ...
    @property
    def Value(self) -> StringSegment: ...
    def GetHashCode(self) -> int: ...
    def Parse(input: StringSegment) -> StringWithQualityHeaderValue: ...
    def ParseList(input: List[str]) -> List[StringWithQualityHeaderValue]: ...
    def ParseStrictList(input: List[str]) -> List[StringWithQualityHeaderValue]: ...
    def ToString(self) -> str: ...
    def TryParse(input: StringSegment) -> Tuple[bool, StringWithQualityHeaderValue]: ...
    def TryParseList(input: List[str]) -> Tuple[bool, List[StringWithQualityHeaderValue]]: ...
    def TryParseStrictList(input: List[str]) -> Tuple[bool, List[StringWithQualityHeaderValue]]: ...


class StringWithQualityHeaderValueComparer:
    def Compare(self, stringWithQuality1: StringWithQualityHeaderValue, stringWithQuality2: StringWithQualityHeaderValue) -> int: ...
    @property
    def QualityComparer() -> StringWithQualityHeaderValueComparer: ...
