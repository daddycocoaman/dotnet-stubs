__all__ = ['Mail','NetworkInformation','PeerToPeer']
from typing import Tuple, Set, Iterable, List


class DnsPermission(CodeAccessPermission):
    def __init__(self, state: PermissionState): ...
    def Copy(self) -> IPermission: ...
    def FromXml(self, securityElement: SecurityElement) -> None: ...
    def Intersect(self, target: IPermission) -> IPermission: ...
    def IsSubsetOf(self, target: IPermission) -> bool: ...
    def IsUnrestricted(self) -> bool: ...
    def ToXml(self) -> SecurityElement: ...
    def Union(self, target: IPermission) -> IPermission: ...


class DnsPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...


class EndpointPermission(Object):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Hostname(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @property
    def Transport(self) -> TransportType: ...
    def GetHashCode(self) -> int: ...


class NetworkAccess:
    Connect = 64
    Accept = 128


class SocketPermission(CodeAccessPermission):
    @overload
    def __init__(self, state: PermissionState): ...
    @overload
    def __init__(self, access: NetworkAccess, transport: TransportType, hostName: str, portNumber: int): ...
    def AddPermission(self, access: NetworkAccess, transport: TransportType, hostName: str, portNumber: int) -> None: ...
    def Copy(self) -> IPermission: ...
    def FromXml(self, securityElement: SecurityElement) -> None: ...
    @property
    def AcceptList(self) -> IEnumerator: ...
    @property
    def ConnectList(self) -> IEnumerator: ...
    def Intersect(self, target: IPermission) -> IPermission: ...
    def IsSubsetOf(self, target: IPermission) -> bool: ...
    def IsUnrestricted(self) -> bool: ...
    def ToXml(self) -> SecurityElement: ...
    def Union(self, target: IPermission) -> IPermission: ...


class SocketPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...
    @property
    def Access(self) -> str: ...
    @property
    def Host(self) -> str: ...
    @property
    def Port(self) -> str: ...
    @property
    def Transport(self) -> str: ...
    @Access.setter
    def Access(self, value: str) -> None: ...
    @Host.setter
    def Host(self, value: str) -> None: ...
    @Port.setter
    def Port(self, value: str) -> None: ...
    @Transport.setter
    def Transport(self, value: str) -> None: ...


class TransportType:
    Udp = 1
    Connectionless = 1
    ConnectionOriented = 2
    Tcp = 2
    All = 3


class WebPermission(CodeAccessPermission):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, state: PermissionState): ...
    @overload
    def __init__(self, access: NetworkAccess, uriString: str): ...
    @overload
    def __init__(self, access: NetworkAccess, uriRegex: Regex): ...
    @overload
    def AddPermission(self, access: NetworkAccess, uriString: str) -> None: ...
    @overload
    def AddPermission(self, access: NetworkAccess, uriRegex: Regex) -> None: ...
    def Copy(self) -> IPermission: ...
    def FromXml(self, securityElement: SecurityElement) -> None: ...
    @property
    def AcceptList(self) -> IEnumerator: ...
    @property
    def ConnectList(self) -> IEnumerator: ...
    def Intersect(self, target: IPermission) -> IPermission: ...
    def IsSubsetOf(self, target: IPermission) -> bool: ...
    def IsUnrestricted(self) -> bool: ...
    def ToXml(self) -> SecurityElement: ...
    def Union(self, target: IPermission) -> IPermission: ...


class WebPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...
    @property
    def Accept(self) -> str: ...
    @property
    def AcceptPattern(self) -> str: ...
    @property
    def Connect(self) -> str: ...
    @property
    def ConnectPattern(self) -> str: ...
    @Accept.setter
    def Accept(self, value: str) -> None: ...
    @AcceptPattern.setter
    def AcceptPattern(self, value: str) -> None: ...
    @Connect.setter
    def Connect(self, value: str) -> None: ...
    @ConnectPattern.setter
    def ConnectPattern(self, value: str) -> None: ...
