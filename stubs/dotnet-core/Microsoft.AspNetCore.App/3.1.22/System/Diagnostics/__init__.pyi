from typing import Tuple, Set, Iterable, List


class EventLogPermission(ResourcePermissionBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, permissionAccessEntries: Set(EventLogPermissionEntry)): ...
    @overload
    def __init__(self, state: PermissionState): ...
    @overload
    def __init__(self, permissionAccess: EventLogPermissionAccess, machineName: str): ...
    @property
    def PermissionEntries(self) -> EventLogPermissionEntryCollection: ...


class EventLogPermissionAccess:
    #None = 0
    Browse = 2
    Instrument = 6
    Audit = 10
    Write = 16
    Administer = 48


class EventLogPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def PermissionAccess(self) -> EventLogPermissionAccess: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...
    @PermissionAccess.setter
    def PermissionAccess(self, value: EventLogPermissionAccess) -> None: ...


class EventLogPermissionEntry(Object):
    def __init__(self, permissionAccess: EventLogPermissionAccess, machineName: str): ...
    @property
    def MachineName(self) -> str: ...
    @property
    def PermissionAccess(self) -> EventLogPermissionAccess: ...


class EventLogPermissionEntryCollection(CollectionBase):
    def Add(self, value: EventLogPermissionEntry) -> int: ...
    @overload
    def AddRange(self, value: EventLogPermissionEntryCollection) -> None: ...
    @overload
    def AddRange(self, value: Set(EventLogPermissionEntry)) -> None: ...
    def Contains(self, value: EventLogPermissionEntry) -> bool: ...
    def CopyTo(self, array: Set(EventLogPermissionEntry), index: int) -> None: ...
    @property
    def Item(self, index: int) -> EventLogPermissionEntry: ...
    def IndexOf(self, value: EventLogPermissionEntry) -> int: ...
    def Insert(self, index: int, value: EventLogPermissionEntry) -> None: ...
    def Remove(self, value: EventLogPermissionEntry) -> None: ...
    @Item.setter
    def Item(self, index: int, value: EventLogPermissionEntry) -> None: ...


class PerformanceCounterPermission(ResourcePermissionBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, permissionAccessEntries: Set(PerformanceCounterPermissionEntry)): ...
    @overload
    def __init__(self, state: PermissionState): ...
    @overload
    def __init__(self, permissionAccess: PerformanceCounterPermissionAccess, machineName: str, categoryName: str): ...
    @property
    def PermissionEntries(self) -> PerformanceCounterPermissionEntryCollection: ...


class PerformanceCounterPermissionAccess:
    #None = 0
    Browse = 1
    Read = 1
    Write = 2
    Instrument = 3
    Administer = 7


class PerformanceCounterPermissionAttribute(CodeAccessSecurityAttribute):
    def __init__(self, action: SecurityAction): ...
    def CreatePermission(self) -> IPermission: ...
    @property
    def CategoryName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def PermissionAccess(self) -> PerformanceCounterPermissionAccess: ...
    @CategoryName.setter
    def CategoryName(self, value: str) -> None: ...
    @MachineName.setter
    def MachineName(self, value: str) -> None: ...
    @PermissionAccess.setter
    def PermissionAccess(self, value: PerformanceCounterPermissionAccess) -> None: ...


class PerformanceCounterPermissionEntry(Object):
    def __init__(self, permissionAccess: PerformanceCounterPermissionAccess, machineName: str, categoryName: str): ...
    @property
    def CategoryName(self) -> str: ...
    @property
    def MachineName(self) -> str: ...
    @property
    def PermissionAccess(self) -> PerformanceCounterPermissionAccess: ...


class PerformanceCounterPermissionEntryCollection(CollectionBase):
    def Add(self, value: PerformanceCounterPermissionEntry) -> int: ...
    @overload
    def AddRange(self, value: PerformanceCounterPermissionEntryCollection) -> None: ...
    @overload
    def AddRange(self, value: Set(PerformanceCounterPermissionEntry)) -> None: ...
    def Contains(self, value: PerformanceCounterPermissionEntry) -> bool: ...
    def CopyTo(self, array: Set(PerformanceCounterPermissionEntry), index: int) -> None: ...
    @property
    def Item(self, index: int) -> PerformanceCounterPermissionEntry: ...
    def IndexOf(self, value: PerformanceCounterPermissionEntry) -> int: ...
    def Insert(self, index: int, value: PerformanceCounterPermissionEntry) -> None: ...
    def Remove(self, value: PerformanceCounterPermissionEntry) -> None: ...
    @Item.setter
    def Item(self, index: int, value: PerformanceCounterPermissionEntry) -> None: ...
