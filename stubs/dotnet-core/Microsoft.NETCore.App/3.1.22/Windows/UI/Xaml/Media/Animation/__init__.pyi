from typing import Tuple, Set, Iterable, List


class KeyTime:
    @overload
    def Equals(self, value: KeyTime) -> bool: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(keyTime1: KeyTime, keyTime2: KeyTime) -> bool: ...
    def FromTimeSpan(timeSpan: TimeSpan) -> KeyTime: ...
    @property
    def TimeSpan(self) -> TimeSpan: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(keyTime1: KeyTime, keyTime2: KeyTime) -> bool: ...
    def op_Implicit(timeSpan: TimeSpan) -> KeyTime: ...
    def op_Inequality(keyTime1: KeyTime, keyTime2: KeyTime) -> bool: ...
    def ToString(self) -> str: ...


class RepeatBehavior:
    @overload
    def __init__(self, count: float): ...
    @overload
    def __init__(self, duration: TimeSpan): ...
    @overload
    def Equals(self, repeatBehavior: RepeatBehavior) -> bool: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(repeatBehavior1: RepeatBehavior, repeatBehavior2: RepeatBehavior) -> bool: ...
    @property
    def Count(self) -> float: ...
    @property
    def Duration(self) -> TimeSpan: ...
    @property
    def Forever() -> RepeatBehavior: ...
    @property
    def HasCount(self) -> bool: ...
    @property
    def HasDuration(self) -> bool: ...
    @property
    def Type(self) -> RepeatBehaviorType: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(repeatBehavior1: RepeatBehavior, repeatBehavior2: RepeatBehavior) -> bool: ...
    def op_Inequality(repeatBehavior1: RepeatBehavior, repeatBehavior2: RepeatBehavior) -> bool: ...
    @Count.setter
    def Count(self, value: float) -> None: ...
    @Duration.setter
    def Duration(self, value: TimeSpan) -> None: ...
    @Type.setter
    def Type(self, value: RepeatBehaviorType) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, formatProvider: IFormatProvider) -> str: ...


class RepeatBehaviorType:
    Count = 0
    Duration = 1
    Forever = 2
