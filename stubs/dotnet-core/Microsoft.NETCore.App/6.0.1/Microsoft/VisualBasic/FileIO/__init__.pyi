from typing import Tuple, Set, Iterable, List


class DeleteDirectoryOption:
    ThrowIfDirectoryNonEmpty = 4
    DeleteAllContents = 5


class FieldType:
    Delimited = 0
    FixedWidth = 1


class FileSystem:
    def __init__(self): ...
    def CombinePath(baseDirectory: str, relativePath: str) -> str: ...
    @overload
    def CopyDirectory(sourceDirectoryName: str, destinationDirectoryName: str) -> None: ...
    @overload
    def CopyDirectory(sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption) -> None: ...
    @overload
    def CopyDirectory(sourceDirectoryName: str, destinationDirectoryName: str, overwrite: bool) -> None: ...
    @overload
    def CopyDirectory(sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    def CopyFile(sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    def CopyFile(sourceFileName: str, destinationFileName: str, overwrite: bool) -> None: ...
    @overload
    def CopyFile(sourceFileName: str, destinationFileName: str, showUI: UIOption) -> None: ...
    @overload
    def CopyFile(sourceFileName: str, destinationFileName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    def CreateDirectory(directory: str) -> None: ...
    @overload
    def DeleteDirectory(directory: str, onDirectoryNotEmpty: DeleteDirectoryOption) -> None: ...
    @overload
    def DeleteDirectory(directory: str, showUI: UIOption, recycle: RecycleOption) -> None: ...
    @overload
    def DeleteDirectory(directory: str, showUI: UIOption, recycle: RecycleOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    def DeleteFile(file: str) -> None: ...
    @overload
    def DeleteFile(file: str, showUI: UIOption, recycle: RecycleOption) -> None: ...
    @overload
    def DeleteFile(file: str, showUI: UIOption, recycle: RecycleOption, onUserCancel: UICancelOption) -> None: ...
    def DirectoryExists(directory: str) -> bool: ...
    def FileExists(file: str) -> bool: ...
    @overload
    def FindInFiles(directory: str, containsText: str, ignoreCase: bool, searchType: SearchOption) -> ReadOnlyCollection: ...
    @overload
    def FindInFiles(directory: str, containsText: str, ignoreCase: bool, searchType: SearchOption, fileWildcards: Set(str)) -> ReadOnlyCollection: ...
    @property
    def CurrentDirectory() -> str: ...
    @property
    def Drives() -> ReadOnlyCollection: ...
    @overload
    def GetDirectories(directory: str) -> ReadOnlyCollection: ...
    @overload
    def GetDirectories(directory: str, searchType: SearchOption, wildcards: Set(str)) -> ReadOnlyCollection: ...
    def GetDirectoryInfo(directory: str) -> DirectoryInfo: ...
    def GetDriveInfo(drive: str) -> DriveInfo: ...
    def GetFileInfo(file: str) -> FileInfo: ...
    @overload
    def GetFiles(directory: str) -> ReadOnlyCollection: ...
    @overload
    def GetFiles(directory: str, searchType: SearchOption, wildcards: Set(str)) -> ReadOnlyCollection: ...
    def GetName(path: str) -> str: ...
    def GetParentPath(path: str) -> str: ...
    def GetTempFileName() -> str: ...
    @overload
    def MoveDirectory(sourceDirectoryName: str, destinationDirectoryName: str) -> None: ...
    @overload
    def MoveDirectory(sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption) -> None: ...
    @overload
    def MoveDirectory(sourceDirectoryName: str, destinationDirectoryName: str, overwrite: bool) -> None: ...
    @overload
    def MoveDirectory(sourceDirectoryName: str, destinationDirectoryName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    def MoveFile(sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    def MoveFile(sourceFileName: str, destinationFileName: str, showUI: UIOption) -> None: ...
    @overload
    def MoveFile(sourceFileName: str, destinationFileName: str, overwrite: bool) -> None: ...
    @overload
    def MoveFile(sourceFileName: str, destinationFileName: str, showUI: UIOption, onUserCancel: UICancelOption) -> None: ...
    @overload
    def OpenTextFieldParser(file: str) -> TextFieldParser: ...
    @overload
    def OpenTextFieldParser(file: str, delimiters: Set(str)) -> TextFieldParser: ...
    @overload
    def OpenTextFieldParser(file: str, fieldWidths: Set(int)) -> TextFieldParser: ...
    @overload
    def OpenTextFileReader(file: str) -> StreamReader: ...
    @overload
    def OpenTextFileReader(file: str, encoding: Encoding) -> StreamReader: ...
    @overload
    def OpenTextFileWriter(file: str, append: bool) -> StreamWriter: ...
    @overload
    def OpenTextFileWriter(file: str, append: bool, encoding: Encoding) -> StreamWriter: ...
    def ReadAllBytes(file: str) -> Set(Byte): ...
    @overload
    def ReadAllText(file: str) -> str: ...
    @overload
    def ReadAllText(file: str, encoding: Encoding) -> str: ...
    def RenameDirectory(directory: str, newName: str) -> None: ...
    def RenameFile(file: str, newName: str) -> None: ...
    @CurrentDirectory.setter
    def CurrentDirectory(value: str) -> None: ...
    def WriteAllBytes(file: str, data: Set(Byte), append: bool) -> None: ...
    @overload
    def WriteAllText(file: str, text: str, append: bool) -> None: ...
    @overload
    def WriteAllText(file: str, text: str, append: bool, encoding: Encoding) -> None: ...


class MalformedLineException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, lineNumber: Int64): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, lineNumber: Int64, innerException: Exception): ...
    @property
    def LineNumber(self) -> Int64: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @LineNumber.setter
    def LineNumber(self, value: Int64) -> None: ...
    def ToString(self) -> str: ...


class RecycleOption:
    DeletePermanently = 2
    SendToRecycleBin = 3


class SearchOption:
    SearchTopLevelOnly = 2
    SearchAllSubDirectories = 3


class SpecialDirectories:
    def __init__(self): ...
    @property
    def AllUsersApplicationData() -> str: ...
    @property
    def CurrentUserApplicationData() -> str: ...
    @property
    def Desktop() -> str: ...
    @property
    def MyDocuments() -> str: ...
    @property
    def MyMusic() -> str: ...
    @property
    def MyPictures() -> str: ...
    @property
    def ProgramFiles() -> str: ...
    @property
    def Programs() -> str: ...
    @property
    def Temp() -> str: ...


class TextFieldParser:
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, reader: TextReader): ...
    @overload
    def __init__(self, path: str, defaultEncoding: Encoding): ...
    @overload
    def __init__(self, stream: Stream, defaultEncoding: Encoding): ...
    @overload
    def __init__(self, path: str, defaultEncoding: Encoding, detectEncoding: bool): ...
    @overload
    def __init__(self, stream: Stream, defaultEncoding: Encoding, detectEncoding: bool): ...
    @overload
    def __init__(self, stream: Stream, defaultEncoding: Encoding, detectEncoding: bool, leaveOpen: bool): ...
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def CommentTokens(self) -> Set(str): ...
    @property
    def Delimiters(self) -> Set(str): ...
    @property
    def EndOfData(self) -> bool: ...
    @property
    def ErrorLine(self) -> str: ...
    @property
    def ErrorLineNumber(self) -> Int64: ...
    @property
    def FieldWidths(self) -> Set(int): ...
    @property
    def HasFieldsEnclosedInQuotes(self) -> bool: ...
    @property
    def LineNumber(self) -> Int64: ...
    @property
    def TextFieldType(self) -> FieldType: ...
    @property
    def TrimWhiteSpace(self) -> bool: ...
    def PeekChars(self, numberOfChars: int) -> str: ...
    def ReadFields(self) -> Set(str): ...
    def ReadLine(self) -> str: ...
    def ReadToEnd(self) -> str: ...
    @CommentTokens.setter
    def CommentTokens(self, value: Set(str)) -> None: ...
    @Delimiters.setter
    def Delimiters(self, value: Set(str)) -> None: ...
    @FieldWidths.setter
    def FieldWidths(self, value: Set(int)) -> None: ...
    @HasFieldsEnclosedInQuotes.setter
    def HasFieldsEnclosedInQuotes(self, value: bool) -> None: ...
    @TextFieldType.setter
    def TextFieldType(self, value: FieldType) -> None: ...
    @TrimWhiteSpace.setter
    def TrimWhiteSpace(self, value: bool) -> None: ...
    def SetDelimiters(self, delimiters: Set(str)) -> None: ...
    def SetFieldWidths(self, fieldWidths: Set(int)) -> None: ...


class UICancelOption:
    DoNothing = 2
    ThrowException = 3


class UIOption:
    OnlyErrorDialogs = 2
    AllDialogs = 3
