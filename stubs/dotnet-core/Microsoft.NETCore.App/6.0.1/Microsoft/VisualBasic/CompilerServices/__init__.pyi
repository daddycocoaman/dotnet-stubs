from typing import Tuple, Set, Iterable, List


class BooleanType:
    def FromObject(Value: Object) -> bool: ...
    def FromString(Value: str) -> bool: ...


class ByteType:
    def FromObject(Value: Object) -> Byte: ...
    def FromString(Value: str) -> Byte: ...


class CharArrayType:
    def FromObject(Value: Object) -> Set(Char): ...
    def FromString(Value: str) -> Set(Char): ...


class CharType:
    def FromObject(Value: Object) -> Char: ...
    def FromString(Value: str) -> Char: ...


class Conversions:
    def ChangeType(Expression: Object, TargetType: Type) -> Object: ...
    def FromCharAndCount(Value: Char, Count: int) -> str: ...
    def FromCharArray(Value: Set(Char)) -> str: ...
    def FromCharArraySubset(Value: Set(Char), StartIndex: int, Length: int) -> str: ...
    @overload
    def ToBoolean(Value: str) -> bool: ...
    @overload
    def ToBoolean(Value: Object) -> bool: ...
    @overload
    def ToByte(Value: str) -> Byte: ...
    @overload
    def ToByte(Value: Object) -> Byte: ...
    @overload
    def ToChar(Value: Object) -> Char: ...
    @overload
    def ToChar(Value: str) -> Char: ...
    @overload
    def ToCharArrayRankOne(Value: Object) -> Set(Char): ...
    @overload
    def ToCharArrayRankOne(Value: str) -> Set(Char): ...
    @overload
    def ToDate(Value: Object) -> DateTime: ...
    @overload
    def ToDate(Value: str) -> DateTime: ...
    @overload
    def ToDecimal(Value: bool) -> Decimal: ...
    @overload
    def ToDecimal(Value: str) -> Decimal: ...
    @overload
    def ToDecimal(Value: Object) -> Decimal: ...
    @overload
    def ToDouble(Value: str) -> float: ...
    @overload
    def ToDouble(Value: Object) -> float: ...
    def ToGenericParameter(Value: Object) -> T: ...
    @overload
    def ToInteger(Value: Object) -> int: ...
    @overload
    def ToInteger(Value: str) -> int: ...
    @overload
    def ToLong(Value: Object) -> Int64: ...
    @overload
    def ToLong(Value: str) -> Int64: ...
    @overload
    def ToSByte(Value: str) -> SByte: ...
    @overload
    def ToSByte(Value: Object) -> SByte: ...
    @overload
    def ToShort(Value: Object) -> Int16: ...
    @overload
    def ToShort(Value: str) -> Int16: ...
    @overload
    def ToSingle(Value: str) -> Single: ...
    @overload
    def ToSingle(Value: Object) -> Single: ...
    @overload
    def ToString(Value: Decimal) -> str: ...
    @overload
    def ToString(Value: Single) -> str: ...
    @overload
    def ToString(Value: DateTime) -> str: ...
    @overload
    def ToString(Value: float) -> str: ...
    @overload
    def ToString(Value: Object) -> str: ...
    @overload
    def ToString(Value: UInt64) -> str: ...
    @overload
    def ToString(Value: Byte) -> str: ...
    @overload
    def ToString(Value: UInt32) -> str: ...
    @overload
    def ToString(Value: int) -> str: ...
    @overload
    def ToString(Value: Int16) -> str: ...
    @overload
    def ToString(Value: Char) -> str: ...
    @overload
    def ToString(Value: bool) -> str: ...
    @overload
    def ToString(Value: Int64) -> str: ...
    @overload
    def ToString(Value: Single, NumberFormat: NumberFormatInfo) -> str: ...
    @overload
    def ToString(Value: float, NumberFormat: NumberFormatInfo) -> str: ...
    @overload
    def ToString(Value: Decimal, NumberFormat: NumberFormatInfo) -> str: ...
    @overload
    def ToUInteger(Value: Object) -> UInt32: ...
    @overload
    def ToUInteger(Value: str) -> UInt32: ...
    @overload
    def ToULong(Value: Object) -> UInt64: ...
    @overload
    def ToULong(Value: str) -> UInt64: ...
    @overload
    def ToUShort(Value: str) -> UInt16: ...
    @overload
    def ToUShort(Value: Object) -> UInt16: ...


class DateType:
    def FromObject(Value: Object) -> DateTime: ...
    @overload
    def FromString(Value: str) -> DateTime: ...
    @overload
    def FromString(Value: str, culture: CultureInfo) -> DateTime: ...


class DecimalType:
    def FromBoolean(Value: bool) -> Decimal: ...
    @overload
    def FromObject(Value: Object) -> Decimal: ...
    @overload
    def FromObject(Value: Object, NumberFormat: NumberFormatInfo) -> Decimal: ...
    @overload
    def FromString(Value: str) -> Decimal: ...
    @overload
    def FromString(Value: str, NumberFormat: NumberFormatInfo) -> Decimal: ...
    def Parse(Value: str, NumberFormat: NumberFormatInfo) -> Decimal: ...


class DesignerGeneratedAttribute:
    def __init__(self): ...


class DoubleType:
    @overload
    def FromObject(Value: Object) -> float: ...
    @overload
    def FromObject(Value: Object, NumberFormat: NumberFormatInfo) -> float: ...
    @overload
    def FromString(Value: str) -> float: ...
    @overload
    def FromString(Value: str, NumberFormat: NumberFormatInfo) -> float: ...
    @overload
    def Parse(Value: str) -> float: ...
    @overload
    def Parse(Value: str, NumberFormat: NumberFormatInfo) -> float: ...


class ForLoopControl:
    def ForLoopInitObj(Counter: Object, Start: Object, Limit: Object, StepValue: Object, LoopForResult: Object, CounterResult: Object) -> Tuple[bool, Object, Object]: ...
    def ForNextCheckDec(count: Decimal, limit: Decimal, StepValue: Decimal) -> bool: ...
    def ForNextCheckObj(Counter: Object, LoopObj: Object, CounterResult: Object) -> Tuple[bool, Object]: ...
    def ForNextCheckR4(count: Single, limit: Single, StepValue: Single) -> bool: ...
    def ForNextCheckR8(count: float, limit: float, StepValue: float) -> bool: ...


class IncompleteInitialization:
    def __init__(self): ...


class IntegerType:
    def FromObject(Value: Object) -> int: ...
    def FromString(Value: str) -> int: ...


class LateBinding:
    def LateCall(o: Object, objType: Type, name: str, args: Set(Object), paramnames: Set(str), CopyBack: Set(bool)) -> None: ...
    def LateGet(o: Object, objType: Type, name: str, args: Set(Object), paramnames: Set(str), CopyBack: Set(bool)) -> Object: ...
    def LateIndexGet(o: Object, args: Set(Object), paramnames: Set(str)) -> Object: ...
    def LateIndexSet(o: Object, args: Set(Object), paramnames: Set(str)) -> None: ...
    def LateIndexSetComplex(o: Object, args: Set(Object), paramnames: Set(str), OptimisticSet: bool, RValueBase: bool) -> None: ...
    def LateSet(o: Object, objType: Type, name: str, args: Set(Object), paramnames: Set(str)) -> None: ...
    def LateSetComplex(o: Object, objType: Type, name: str, args: Set(Object), paramnames: Set(str), OptimisticSet: bool, RValueBase: bool) -> None: ...


class LikeOperator:
    def LikeObject(Source: Object, Pattern: Object, CompareOption: CompareMethod) -> Object: ...
    def LikeString(Source: str, Pattern: str, CompareOption: CompareMethod) -> bool: ...


class LongType:
    def FromObject(Value: Object) -> Int64: ...
    def FromString(Value: str) -> Int64: ...


class NewLateBinding:
    def LateCall(Instance: Object, Type: Type, MemberName: str, Arguments: Set(Object), ArgumentNames: Set(str), TypeArguments: Set(Type), CopyBack: Set(bool), IgnoreReturn: bool) -> Object: ...
    def LateCallInvokeDefault(Instance: Object, Arguments: Set(Object), ArgumentNames: Set(str), ReportErrors: bool) -> Object: ...
    def LateGet(Instance: Object, Type: Type, MemberName: str, Arguments: Set(Object), ArgumentNames: Set(str), TypeArguments: Set(Type), CopyBack: Set(bool)) -> Object: ...
    def LateGetInvokeDefault(Instance: Object, Arguments: Set(Object), ArgumentNames: Set(str), ReportErrors: bool) -> Object: ...
    def LateIndexGet(Instance: Object, Arguments: Set(Object), ArgumentNames: Set(str)) -> Object: ...
    def LateIndexSet(Instance: Object, Arguments: Set(Object), ArgumentNames: Set(str)) -> None: ...
    def LateIndexSetComplex(Instance: Object, Arguments: Set(Object), ArgumentNames: Set(str), OptimisticSet: bool, RValueBase: bool) -> None: ...
    @overload
    def LateSet(Instance: Object, Type: Type, MemberName: str, Arguments: Set(Object), ArgumentNames: Set(str), TypeArguments: Set(Type)) -> None: ...
    @overload
    def LateSet(Instance: Object, Type: Type, MemberName: str, Arguments: Set(Object), ArgumentNames: Set(str), TypeArguments: Set(Type), OptimisticSet: bool, RValueBase: bool, CallType: CallType) -> None: ...
    def LateSetComplex(Instance: Object, Type: Type, MemberName: str, Arguments: Set(Object), ArgumentNames: Set(str), TypeArguments: Set(Type), OptimisticSet: bool, RValueBase: bool) -> None: ...


class ObjectFlowControl:
    def CheckForSyncLockOnValueType(Expression: Object) -> None: ...


class ObjectType:
    def __init__(self): ...
    def AddObj(o1: Object, o2: Object) -> Object: ...
    def BitAndObj(obj1: Object, obj2: Object) -> Object: ...
    def BitOrObj(obj1: Object, obj2: Object) -> Object: ...
    def BitXorObj(obj1: Object, obj2: Object) -> Object: ...
    def DivObj(o1: Object, o2: Object) -> Object: ...
    def GetObjectValuePrimitive(o: Object) -> Object: ...
    def IDivObj(o1: Object, o2: Object) -> Object: ...
    def LikeObj(vLeft: Object, vRight: Object, CompareOption: CompareMethod) -> bool: ...
    def ModObj(o1: Object, o2: Object) -> Object: ...
    def MulObj(o1: Object, o2: Object) -> Object: ...
    def NegObj(obj: Object) -> Object: ...
    def NotObj(obj: Object) -> Object: ...
    def ObjTst(o1: Object, o2: Object, TextCompare: bool) -> int: ...
    def PlusObj(obj: Object) -> Object: ...
    def PowObj(obj1: Object, obj2: Object) -> Object: ...
    def ShiftLeftObj(o1: Object, amount: int) -> Object: ...
    def ShiftRightObj(o1: Object, amount: int) -> Object: ...
    def StrCatObj(vLeft: Object, vRight: Object) -> Object: ...
    def SubObj(o1: Object, o2: Object) -> Object: ...
    def XorObj(obj1: Object, obj2: Object) -> Object: ...


class Operators:
    def AddObject(Left: Object, Right: Object) -> Object: ...
    def AndObject(Left: Object, Right: Object) -> Object: ...
    def CompareObjectEqual(Left: Object, Right: Object, TextCompare: bool) -> Object: ...
    def CompareObjectGreater(Left: Object, Right: Object, TextCompare: bool) -> Object: ...
    def CompareObjectGreaterEqual(Left: Object, Right: Object, TextCompare: bool) -> Object: ...
    def CompareObjectLess(Left: Object, Right: Object, TextCompare: bool) -> Object: ...
    def CompareObjectLessEqual(Left: Object, Right: Object, TextCompare: bool) -> Object: ...
    def CompareObjectNotEqual(Left: Object, Right: Object, TextCompare: bool) -> Object: ...
    def CompareString(Left: str, Right: str, TextCompare: bool) -> int: ...
    def ConcatenateObject(Left: Object, Right: Object) -> Object: ...
    def ConditionalCompareObjectEqual(Left: Object, Right: Object, TextCompare: bool) -> bool: ...
    def ConditionalCompareObjectGreater(Left: Object, Right: Object, TextCompare: bool) -> bool: ...
    def ConditionalCompareObjectGreaterEqual(Left: Object, Right: Object, TextCompare: bool) -> bool: ...
    def ConditionalCompareObjectLess(Left: Object, Right: Object, TextCompare: bool) -> bool: ...
    def ConditionalCompareObjectLessEqual(Left: Object, Right: Object, TextCompare: bool) -> bool: ...
    def ConditionalCompareObjectNotEqual(Left: Object, Right: Object, TextCompare: bool) -> bool: ...
    def DivideObject(Left: Object, Right: Object) -> Object: ...
    def ExponentObject(Left: Object, Right: Object) -> Object: ...
    def IntDivideObject(Left: Object, Right: Object) -> Object: ...
    def LeftShiftObject(Operand: Object, Amount: Object) -> Object: ...
    def ModObject(Left: Object, Right: Object) -> Object: ...
    def MultiplyObject(Left: Object, Right: Object) -> Object: ...
    def NegateObject(Operand: Object) -> Object: ...
    def NotObject(Operand: Object) -> Object: ...
    def OrObject(Left: Object, Right: Object) -> Object: ...
    def PlusObject(Operand: Object) -> Object: ...
    def RightShiftObject(Operand: Object, Amount: Object) -> Object: ...
    def SubtractObject(Left: Object, Right: Object) -> Object: ...
    def XorObject(Left: Object, Right: Object) -> Object: ...


class OptionCompareAttribute:
    def __init__(self): ...


class OptionTextAttribute:
    def __init__(self): ...


class ProjectData:
    def ClearProjectError() -> None: ...
    def CreateProjectError(hr: int) -> Exception: ...
    def EndApp() -> None: ...
    @overload
    def SetProjectError(ex: Exception) -> None: ...
    @overload
    def SetProjectError(ex: Exception, lErl: int) -> None: ...


class ShortType:
    def FromObject(Value: Object) -> Int16: ...
    def FromString(Value: str) -> Int16: ...


class SingleType:
    @overload
    def FromObject(Value: Object) -> Single: ...
    @overload
    def FromObject(Value: Object, NumberFormat: NumberFormatInfo) -> Single: ...
    @overload
    def FromString(Value: str) -> Single: ...
    @overload
    def FromString(Value: str, NumberFormat: NumberFormatInfo) -> Single: ...


class StandardModuleAttribute:
    def __init__(self): ...


class StaticLocalInitFlag:
    def __init__(self): ...


class StringType:
    def FromBoolean(Value: bool) -> str: ...
    def FromByte(Value: Byte) -> str: ...
    def FromChar(Value: Char) -> str: ...
    def FromDate(Value: DateTime) -> str: ...
    @overload
    def FromDecimal(Value: Decimal) -> str: ...
    @overload
    def FromDecimal(Value: Decimal, NumberFormat: NumberFormatInfo) -> str: ...
    @overload
    def FromDouble(Value: float) -> str: ...
    @overload
    def FromDouble(Value: float, NumberFormat: NumberFormatInfo) -> str: ...
    def FromInteger(Value: int) -> str: ...
    def FromLong(Value: Int64) -> str: ...
    def FromObject(Value: Object) -> str: ...
    def FromShort(Value: Int16) -> str: ...
    @overload
    def FromSingle(Value: Single) -> str: ...
    @overload
    def FromSingle(Value: Single, NumberFormat: NumberFormatInfo) -> str: ...
    def MidStmtStr(sDest: str, StartPosition: int, MaxInsertLength: int, sInsert: str) -> Tuple[str]: ...
    def StrCmp(sLeft: str, sRight: str, TextCompare: bool) -> int: ...
    def StrLike(Source: str, Pattern: str, CompareOption: CompareMethod) -> bool: ...
    def StrLikeBinary(Source: str, Pattern: str) -> bool: ...
    def StrLikeText(Source: str, Pattern: str) -> bool: ...


class Utils:
    def CopyArray(arySrc: Array, aryDest: Array) -> Array: ...
    def GetResourceString(ResourceKey: str, Args: Set(str)) -> str: ...


class Versioned:
    def CallByName(Instance: Object, MethodName: str, UseCallType: CallType, Arguments: Set(Object)) -> Object: ...
    def IsNumeric(Expression: Object) -> bool: ...
    def SystemTypeName(VbName: str) -> str: ...
    def TypeName(Expression: Object) -> str: ...
    def VbTypeName(SystemName: str) -> str: ...
