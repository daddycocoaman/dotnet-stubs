__all__ = ['SafeHandles']
from typing import Tuple, Set, Iterable, List


class RegistryKey:
    def Close(self) -> None: ...
    @overload
    def CreateSubKey(self, subkey: str) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, writable: bool) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, permissionCheck: RegistryKeyPermissionCheck) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, writable: bool, options: RegistryOptions) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, permissionCheck: RegistryKeyPermissionCheck, registrySecurity: RegistrySecurity) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, permissionCheck: RegistryKeyPermissionCheck, registryOptions: RegistryOptions) -> RegistryKey: ...
    @overload
    def CreateSubKey(self, subkey: str, permissionCheck: RegistryKeyPermissionCheck, registryOptions: RegistryOptions, registrySecurity: RegistrySecurity) -> RegistryKey: ...
    @overload
    def DeleteSubKey(self, subkey: str) -> None: ...
    @overload
    def DeleteSubKey(self, subkey: str, throwOnMissingSubKey: bool) -> None: ...
    @overload
    def DeleteSubKeyTree(self, subkey: str) -> None: ...
    @overload
    def DeleteSubKeyTree(self, subkey: str, throwOnMissingSubKey: bool) -> None: ...
    @overload
    def DeleteValue(self, name: str) -> None: ...
    @overload
    def DeleteValue(self, name: str, throwOnMissingValue: bool) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> None: ...
    @overload
    def FromHandle(handle: SafeRegistryHandle) -> RegistryKey: ...
    @overload
    def FromHandle(handle: SafeRegistryHandle, view: RegistryView) -> RegistryKey: ...
    @property
    def Handle(self) -> SafeRegistryHandle: ...
    @property
    def Name(self) -> str: ...
    @property
    def SubKeyCount(self) -> int: ...
    @property
    def ValueCount(self) -> int: ...
    @property
    def View(self) -> RegistryView: ...
    @overload
    def GetAccessControl(self) -> RegistrySecurity: ...
    @overload
    def GetAccessControl(self, includeSections: AccessControlSections) -> RegistrySecurity: ...
    def GetSubKeyNames(self) -> Set(str): ...
    @overload
    def GetValue(self, name: str) -> Object: ...
    @overload
    def GetValue(self, name: str, defaultValue: Object) -> Object: ...
    @overload
    def GetValue(self, name: str, defaultValue: Object, options: RegistryValueOptions) -> Object: ...
    def GetValueKind(self, name: str) -> RegistryValueKind: ...
    def GetValueNames(self) -> Set(str): ...
    def OpenBaseKey(hKey: RegistryHive, view: RegistryView) -> RegistryKey: ...
    @overload
    def OpenRemoteBaseKey(hKey: RegistryHive, machineName: str) -> RegistryKey: ...
    @overload
    def OpenRemoteBaseKey(hKey: RegistryHive, machineName: str, view: RegistryView) -> RegistryKey: ...
    @overload
    def OpenSubKey(self, name: str) -> RegistryKey: ...
    @overload
    def OpenSubKey(self, name: str, rights: RegistryRights) -> RegistryKey: ...
    @overload
    def OpenSubKey(self, name: str, writable: bool) -> RegistryKey: ...
    @overload
    def OpenSubKey(self, name: str, permissionCheck: RegistryKeyPermissionCheck) -> RegistryKey: ...
    @overload
    def OpenSubKey(self, name: str, permissionCheck: RegistryKeyPermissionCheck, rights: RegistryRights) -> RegistryKey: ...
    def SetAccessControl(self, registrySecurity: RegistrySecurity) -> None: ...
    @overload
    def SetValue(self, name: str, value: Object) -> None: ...
    @overload
    def SetValue(self, name: str, value: Object, valueKind: RegistryValueKind) -> None: ...
    def ToString(self) -> str: ...
