from typing import Tuple, Set, Iterable, List


class INullable:
    @property
    def IsNull(self) -> bool: ...


class SqlAlreadyFilledException(SqlTypeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, e: Exception): ...


class SqlBinary(ValueType):
    def __init__(self, value: Set(Byte)): ...
    def Add(x: SqlBinary, y: SqlBinary) -> SqlBinary: ...
    @overload
    def CompareTo(self, value: SqlBinary) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    def Concat(x: SqlBinary, y: SqlBinary) -> SqlBinary: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Item(self, index: int) -> Byte: ...
    @property
    def Length(self) -> int: ...
    @property
    def Value(self) -> Set(Byte): ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    def LessThan(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    def NotEquals(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    def op_Addition(x: SqlBinary, y: SqlBinary) -> SqlBinary: ...
    def op_Equality(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlBinary) -> Set(Byte): ...
    @overload
    def op_Explicit(x: SqlGuid) -> SqlBinary: ...
    def op_GreaterThan(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    def op_Implicit(x: Set(Byte)) -> SqlBinary: ...
    def op_Inequality(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    def op_LessThan(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlBinary, y: SqlBinary) -> SqlBoolean: ...
    def ToSqlGuid(self) -> SqlGuid: ...
    def ToString(self) -> str: ...


class SqlBoolean(ValueType):
    @overload
    def __init__(self, value: bool): ...
    @overload
    def __init__(self, value: int): ...
    def And(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    @overload
    def CompareTo(self, value: SqlBoolean) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    @property
    def ByteValue(self) -> Byte: ...
    @property
    def IsFalse(self) -> bool: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def IsTrue(self) -> bool: ...
    @property
    def Value(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def GreaterThanOrEquals(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def LessThan(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def LessThanOrEquals(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def NotEquals(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def OnesComplement(x: SqlBoolean) -> SqlBoolean: ...
    def op_BitwiseAnd(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def op_BitwiseOr(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def op_Equality(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def op_ExclusiveOr(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlMoney) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlDecimal) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlDouble) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlInt64) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlInt32) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlInt16) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlByte) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlBoolean) -> bool: ...
    @overload
    def op_Explicit(x: SqlSingle) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlBoolean: ...
    def op_False(x: SqlBoolean) -> bool: ...
    def op_GreaterThan(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def op_Implicit(x: bool) -> SqlBoolean: ...
    def op_Inequality(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def op_LessThan(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def op_LogicalNot(x: SqlBoolean) -> SqlBoolean: ...
    def op_OnesComplement(x: SqlBoolean) -> SqlBoolean: ...
    def op_True(x: SqlBoolean) -> bool: ...
    def Or(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...
    def Parse(s: str) -> SqlBoolean: ...
    def ToSqlByte(self) -> SqlByte: ...
    def ToSqlDecimal(self) -> SqlDecimal: ...
    def ToSqlDouble(self) -> SqlDouble: ...
    def ToSqlInt16(self) -> SqlInt16: ...
    def ToSqlInt32(self) -> SqlInt32: ...
    def ToSqlInt64(self) -> SqlInt64: ...
    def ToSqlMoney(self) -> SqlMoney: ...
    def ToSqlSingle(self) -> SqlSingle: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...
    def Xor(x: SqlBoolean, y: SqlBoolean) -> SqlBoolean: ...


class SqlByte(ValueType):
    def __init__(self, value: Byte): ...
    def Add(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def BitwiseAnd(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def BitwiseOr(x: SqlByte, y: SqlByte) -> SqlByte: ...
    @overload
    def CompareTo(self, value: SqlByte) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    def Divide(x: SqlByte, y: SqlByte) -> SqlByte: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Value(self) -> Byte: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def LessThan(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def Mod(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def Modulus(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def Multiply(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def NotEquals(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def OnesComplement(x: SqlByte) -> SqlByte: ...
    def op_Addition(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def op_BitwiseAnd(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def op_BitwiseOr(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def op_Division(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def op_Equality(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def op_ExclusiveOr(x: SqlByte, y: SqlByte) -> SqlByte: ...
    @overload
    def op_Explicit(x: SqlByte) -> Byte: ...
    @overload
    def op_Explicit(x: SqlBoolean) -> SqlByte: ...
    @overload
    def op_Explicit(x: SqlMoney) -> SqlByte: ...
    @overload
    def op_Explicit(x: SqlDouble) -> SqlByte: ...
    @overload
    def op_Explicit(x: SqlInt32) -> SqlByte: ...
    @overload
    def op_Explicit(x: SqlInt16) -> SqlByte: ...
    @overload
    def op_Explicit(x: SqlDecimal) -> SqlByte: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlByte: ...
    @overload
    def op_Explicit(x: SqlSingle) -> SqlByte: ...
    @overload
    def op_Explicit(x: SqlInt64) -> SqlByte: ...
    def op_GreaterThan(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def op_Implicit(x: Byte) -> SqlByte: ...
    def op_Inequality(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def op_LessThan(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlByte, y: SqlByte) -> SqlBoolean: ...
    def op_Modulus(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def op_Multiply(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def op_OnesComplement(x: SqlByte) -> SqlByte: ...
    def op_Subtraction(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def Parse(s: str) -> SqlByte: ...
    def Subtract(x: SqlByte, y: SqlByte) -> SqlByte: ...
    def ToSqlBoolean(self) -> SqlBoolean: ...
    def ToSqlDecimal(self) -> SqlDecimal: ...
    def ToSqlDouble(self) -> SqlDouble: ...
    def ToSqlInt16(self) -> SqlInt16: ...
    def ToSqlInt32(self) -> SqlInt32: ...
    def ToSqlInt64(self) -> SqlInt64: ...
    def ToSqlMoney(self) -> SqlMoney: ...
    def ToSqlSingle(self) -> SqlSingle: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...
    def Xor(x: SqlByte, y: SqlByte) -> SqlByte: ...


class SqlBytes(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, buffer: Set(Byte)): ...
    @overload
    def __init__(self, value: SqlBinary): ...
    @overload
    def __init__(self, s: Stream): ...
    @property
    def Buffer(self) -> Set(Byte): ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Item(self, offset: Int64) -> Byte: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def MaxLength(self) -> Int64: ...
    @property
    def Null() -> SqlBytes: ...
    @property
    def Storage(self) -> StorageState: ...
    @property
    def Stream(self) -> Stream: ...
    @property
    def Value(self) -> Set(Byte): ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    @overload
    def op_Explicit(value: SqlBytes) -> SqlBinary: ...
    @overload
    def op_Explicit(value: SqlBinary) -> SqlBytes: ...
    def Read(self, offset: Int64, buffer: Set(Byte), offsetInBuffer: int, count: int) -> Int64: ...
    @Item.setter
    def Item(self, offset: Int64, value: Byte) -> None: ...
    @Stream.setter
    def Stream(self, value: Stream) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    def SetNull(self) -> None: ...
    def ToSqlBinary(self) -> SqlBinary: ...
    def Write(self, offset: Int64, buffer: Set(Byte), offsetInBuffer: int, count: int) -> None: ...


class SqlChars(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, buffer: Set(Char)): ...
    @overload
    def __init__(self, value: SqlString): ...
    @property
    def Buffer(self) -> Set(Char): ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Item(self, offset: Int64) -> Char: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def MaxLength(self) -> Int64: ...
    @property
    def Null() -> SqlChars: ...
    @property
    def Storage(self) -> StorageState: ...
    @property
    def Value(self) -> Set(Char): ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    @overload
    def op_Explicit(value: SqlChars) -> SqlString: ...
    @overload
    def op_Explicit(value: SqlString) -> SqlChars: ...
    def Read(self, offset: Int64, buffer: Set(Char), offsetInBuffer: int, count: int) -> Int64: ...
    @Item.setter
    def Item(self, offset: Int64, value: Char) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    def SetNull(self) -> None: ...
    def ToSqlString(self) -> SqlString: ...
    def Write(self, offset: Int64, buffer: Set(Char), offsetInBuffer: int, count: int) -> None: ...


class SqlCompareOptions:
    #None = 0
    IgnoreCase = 1
    IgnoreNonSpace = 2
    IgnoreKanaType = 8
    IgnoreWidth = 16
    BinarySort2 = 16384
    BinarySort = 32768


class SqlDateTime(ValueType):
    @overload
    def __init__(self, value: DateTime): ...
    @overload
    def __init__(self, dayTicks: int, timeTicks: int): ...
    @overload
    def __init__(self, year: int, month: int, day: int): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: float): ...
    @overload
    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int, bilisecond: int): ...
    def Add(x: SqlDateTime, t: TimeSpan) -> SqlDateTime: ...
    @overload
    def CompareTo(self, value: SqlDateTime) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    @property
    def DayTicks(self) -> int: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def TimeTicks(self) -> int: ...
    @property
    def Value(self) -> DateTime: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    def LessThan(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    def NotEquals(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    def op_Addition(x: SqlDateTime, t: TimeSpan) -> SqlDateTime: ...
    def op_Equality(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlDateTime: ...
    @overload
    def op_Explicit(x: SqlDateTime) -> DateTime: ...
    def op_GreaterThan(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    def op_Implicit(value: DateTime) -> SqlDateTime: ...
    def op_Inequality(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    def op_LessThan(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlDateTime, y: SqlDateTime) -> SqlBoolean: ...
    def op_Subtraction(x: SqlDateTime, t: TimeSpan) -> SqlDateTime: ...
    def Parse(s: str) -> SqlDateTime: ...
    def Subtract(x: SqlDateTime, t: TimeSpan) -> SqlDateTime: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...


class SqlDecimal(ValueType):
    @overload
    def __init__(self, value: Decimal): ...
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: Int64): ...
    @overload
    def __init__(self, dVal: float): ...
    @overload
    def __init__(self, bPrecision: Byte, bScale: Byte, fPositive: bool, bits: Set(int)): ...
    @overload
    def __init__(self, bPrecision: Byte, bScale: Byte, fPositive: bool, data1: int, data2: int, data3: int, data4: int): ...
    def Abs(n: SqlDecimal) -> SqlDecimal: ...
    def Add(x: SqlDecimal, y: SqlDecimal) -> SqlDecimal: ...
    def AdjustScale(n: SqlDecimal, digits: int, fRound: bool) -> SqlDecimal: ...
    def Ceiling(n: SqlDecimal) -> SqlDecimal: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    @overload
    def CompareTo(self, value: SqlDecimal) -> int: ...
    def ConvertToPrecScale(n: SqlDecimal, precision: int, scale: int) -> SqlDecimal: ...
    def Divide(x: SqlDecimal, y: SqlDecimal) -> SqlDecimal: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    def Floor(n: SqlDecimal) -> SqlDecimal: ...
    @property
    def BinData(self) -> Set(Byte): ...
    @property
    def Data(self) -> Set(int): ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def IsPositive(self) -> bool: ...
    @property
    def Precision(self) -> Byte: ...
    @property
    def Scale(self) -> Byte: ...
    @property
    def Value(self) -> Decimal: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    def LessThan(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    def Multiply(x: SqlDecimal, y: SqlDecimal) -> SqlDecimal: ...
    def NotEquals(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    def op_Addition(x: SqlDecimal, y: SqlDecimal) -> SqlDecimal: ...
    def op_Division(x: SqlDecimal, y: SqlDecimal) -> SqlDecimal: ...
    def op_Equality(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlDecimal) -> Decimal: ...
    @overload
    def op_Explicit(x: float) -> SqlDecimal: ...
    @overload
    def op_Explicit(x: SqlSingle) -> SqlDecimal: ...
    @overload
    def op_Explicit(x: SqlDouble) -> SqlDecimal: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlDecimal: ...
    @overload
    def op_Explicit(x: SqlBoolean) -> SqlDecimal: ...
    def op_GreaterThan(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    @overload
    def op_Implicit(x: SqlMoney) -> SqlDecimal: ...
    @overload
    def op_Implicit(x: SqlInt64) -> SqlDecimal: ...
    @overload
    def op_Implicit(x: SqlInt32) -> SqlDecimal: ...
    @overload
    def op_Implicit(x: SqlInt16) -> SqlDecimal: ...
    @overload
    def op_Implicit(x: Int64) -> SqlDecimal: ...
    @overload
    def op_Implicit(x: SqlByte) -> SqlDecimal: ...
    @overload
    def op_Implicit(x: Decimal) -> SqlDecimal: ...
    def op_Inequality(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    def op_LessThan(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlDecimal, y: SqlDecimal) -> SqlBoolean: ...
    def op_Multiply(x: SqlDecimal, y: SqlDecimal) -> SqlDecimal: ...
    def op_Subtraction(x: SqlDecimal, y: SqlDecimal) -> SqlDecimal: ...
    def op_UnaryNegation(x: SqlDecimal) -> SqlDecimal: ...
    def Parse(s: str) -> SqlDecimal: ...
    def Power(n: SqlDecimal, exp: float) -> SqlDecimal: ...
    def Round(n: SqlDecimal, position: int) -> SqlDecimal: ...
    def Sign(n: SqlDecimal) -> SqlInt32: ...
    def Subtract(x: SqlDecimal, y: SqlDecimal) -> SqlDecimal: ...
    def ToDouble(self) -> float: ...
    def ToSqlBoolean(self) -> SqlBoolean: ...
    def ToSqlByte(self) -> SqlByte: ...
    def ToSqlDouble(self) -> SqlDouble: ...
    def ToSqlInt16(self) -> SqlInt16: ...
    def ToSqlInt32(self) -> SqlInt32: ...
    def ToSqlInt64(self) -> SqlInt64: ...
    def ToSqlMoney(self) -> SqlMoney: ...
    def ToSqlSingle(self) -> SqlSingle: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...
    def Truncate(n: SqlDecimal, position: int) -> SqlDecimal: ...


class SqlDouble(ValueType):
    def __init__(self, value: float): ...
    def Add(x: SqlDouble, y: SqlDouble) -> SqlDouble: ...
    @overload
    def CompareTo(self, value: SqlDouble) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    def Divide(x: SqlDouble, y: SqlDouble) -> SqlDouble: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Value(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    def LessThan(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    def Multiply(x: SqlDouble, y: SqlDouble) -> SqlDouble: ...
    def NotEquals(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    def op_Addition(x: SqlDouble, y: SqlDouble) -> SqlDouble: ...
    def op_Division(x: SqlDouble, y: SqlDouble) -> SqlDouble: ...
    def op_Equality(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlBoolean) -> SqlDouble: ...
    @overload
    def op_Explicit(x: SqlDouble) -> float: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlDouble: ...
    def op_GreaterThan(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    @overload
    def op_Implicit(x: float) -> SqlDouble: ...
    @overload
    def op_Implicit(x: SqlDecimal) -> SqlDouble: ...
    @overload
    def op_Implicit(x: SqlMoney) -> SqlDouble: ...
    @overload
    def op_Implicit(x: SqlSingle) -> SqlDouble: ...
    @overload
    def op_Implicit(x: SqlInt64) -> SqlDouble: ...
    @overload
    def op_Implicit(x: SqlInt32) -> SqlDouble: ...
    @overload
    def op_Implicit(x: SqlInt16) -> SqlDouble: ...
    @overload
    def op_Implicit(x: SqlByte) -> SqlDouble: ...
    def op_Inequality(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    def op_LessThan(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlDouble, y: SqlDouble) -> SqlBoolean: ...
    def op_Multiply(x: SqlDouble, y: SqlDouble) -> SqlDouble: ...
    def op_Subtraction(x: SqlDouble, y: SqlDouble) -> SqlDouble: ...
    def op_UnaryNegation(x: SqlDouble) -> SqlDouble: ...
    def Parse(s: str) -> SqlDouble: ...
    def Subtract(x: SqlDouble, y: SqlDouble) -> SqlDouble: ...
    def ToSqlBoolean(self) -> SqlBoolean: ...
    def ToSqlByte(self) -> SqlByte: ...
    def ToSqlDecimal(self) -> SqlDecimal: ...
    def ToSqlInt16(self) -> SqlInt16: ...
    def ToSqlInt32(self) -> SqlInt32: ...
    def ToSqlInt64(self) -> SqlInt64: ...
    def ToSqlMoney(self) -> SqlMoney: ...
    def ToSqlSingle(self) -> SqlSingle: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...


class SqlGuid(ValueType):
    @overload
    def __init__(self, value: Set(Byte)): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, g: Guid): ...
    @overload
    def __init__(self, a: int, b: Int16, c: Int16, d: Byte, e: Byte, f: Byte, g: Byte, h: Byte, i: Byte, j: Byte, k: Byte): ...
    @overload
    def CompareTo(self, value: SqlGuid) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Value(self) -> Guid: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    def LessThan(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    def NotEquals(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    def op_Equality(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlGuid) -> Guid: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlGuid: ...
    @overload
    def op_Explicit(x: SqlBinary) -> SqlGuid: ...
    def op_GreaterThan(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    def op_Implicit(x: Guid) -> SqlGuid: ...
    def op_Inequality(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    def op_LessThan(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlGuid, y: SqlGuid) -> SqlBoolean: ...
    def Parse(s: str) -> SqlGuid: ...
    def ToByteArray(self) -> Set(Byte): ...
    def ToSqlBinary(self) -> SqlBinary: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...


class SqlInt16(ValueType):
    def __init__(self, value: Int16): ...
    def Add(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def BitwiseAnd(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def BitwiseOr(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    @overload
    def CompareTo(self, value: SqlInt16) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    def Divide(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Value(self) -> Int16: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    def LessThan(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    def Mod(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def Modulus(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def Multiply(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def NotEquals(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    def OnesComplement(x: SqlInt16) -> SqlInt16: ...
    def op_Addition(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def op_BitwiseAnd(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def op_BitwiseOr(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def op_Division(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def op_Equality(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    def op_ExclusiveOr(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    @overload
    def op_Explicit(x: SqlInt64) -> SqlInt16: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlInt16: ...
    @overload
    def op_Explicit(x: SqlBoolean) -> SqlInt16: ...
    @overload
    def op_Explicit(x: SqlInt16) -> Int16: ...
    @overload
    def op_Explicit(x: SqlDecimal) -> SqlInt16: ...
    @overload
    def op_Explicit(x: SqlMoney) -> SqlInt16: ...
    @overload
    def op_Explicit(x: SqlDouble) -> SqlInt16: ...
    @overload
    def op_Explicit(x: SqlSingle) -> SqlInt16: ...
    @overload
    def op_Explicit(x: SqlInt32) -> SqlInt16: ...
    def op_GreaterThan(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    @overload
    def op_Implicit(x: Int16) -> SqlInt16: ...
    @overload
    def op_Implicit(x: SqlByte) -> SqlInt16: ...
    def op_Inequality(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    def op_LessThan(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlInt16, y: SqlInt16) -> SqlBoolean: ...
    def op_Modulus(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def op_Multiply(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def op_OnesComplement(x: SqlInt16) -> SqlInt16: ...
    def op_Subtraction(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def op_UnaryNegation(x: SqlInt16) -> SqlInt16: ...
    def Parse(s: str) -> SqlInt16: ...
    def Subtract(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...
    def ToSqlBoolean(self) -> SqlBoolean: ...
    def ToSqlByte(self) -> SqlByte: ...
    def ToSqlDecimal(self) -> SqlDecimal: ...
    def ToSqlDouble(self) -> SqlDouble: ...
    def ToSqlInt32(self) -> SqlInt32: ...
    def ToSqlInt64(self) -> SqlInt64: ...
    def ToSqlMoney(self) -> SqlMoney: ...
    def ToSqlSingle(self) -> SqlSingle: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...
    def Xor(x: SqlInt16, y: SqlInt16) -> SqlInt16: ...


class SqlInt32(ValueType):
    def __init__(self, value: int): ...
    def Add(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def BitwiseAnd(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def BitwiseOr(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    @overload
    def CompareTo(self, value: SqlInt32) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    def Divide(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Value(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    def LessThan(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    def Mod(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def Modulus(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def Multiply(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def NotEquals(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    def OnesComplement(x: SqlInt32) -> SqlInt32: ...
    def op_Addition(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def op_BitwiseAnd(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def op_BitwiseOr(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def op_Division(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def op_Equality(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    def op_ExclusiveOr(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    @overload
    def op_Explicit(x: SqlDecimal) -> SqlInt32: ...
    @overload
    def op_Explicit(x: SqlMoney) -> SqlInt32: ...
    @overload
    def op_Explicit(x: SqlDouble) -> SqlInt32: ...
    @overload
    def op_Explicit(x: SqlSingle) -> SqlInt32: ...
    @overload
    def op_Explicit(x: SqlInt64) -> SqlInt32: ...
    @overload
    def op_Explicit(x: SqlInt32) -> int: ...
    @overload
    def op_Explicit(x: SqlBoolean) -> SqlInt32: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlInt32: ...
    def op_GreaterThan(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    @overload
    def op_Implicit(x: int) -> SqlInt32: ...
    @overload
    def op_Implicit(x: SqlInt16) -> SqlInt32: ...
    @overload
    def op_Implicit(x: SqlByte) -> SqlInt32: ...
    def op_Inequality(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    def op_LessThan(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlInt32, y: SqlInt32) -> SqlBoolean: ...
    def op_Modulus(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def op_Multiply(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def op_OnesComplement(x: SqlInt32) -> SqlInt32: ...
    def op_Subtraction(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def op_UnaryNegation(x: SqlInt32) -> SqlInt32: ...
    def Parse(s: str) -> SqlInt32: ...
    def Subtract(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...
    def ToSqlBoolean(self) -> SqlBoolean: ...
    def ToSqlByte(self) -> SqlByte: ...
    def ToSqlDecimal(self) -> SqlDecimal: ...
    def ToSqlDouble(self) -> SqlDouble: ...
    def ToSqlInt16(self) -> SqlInt16: ...
    def ToSqlInt64(self) -> SqlInt64: ...
    def ToSqlMoney(self) -> SqlMoney: ...
    def ToSqlSingle(self) -> SqlSingle: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...
    def Xor(x: SqlInt32, y: SqlInt32) -> SqlInt32: ...


class SqlInt64(ValueType):
    def __init__(self, value: Int64): ...
    def Add(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def BitwiseAnd(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def BitwiseOr(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    @overload
    def CompareTo(self, value: SqlInt64) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    def Divide(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Value(self) -> Int64: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    def LessThan(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    def Mod(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def Modulus(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def Multiply(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def NotEquals(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    def OnesComplement(x: SqlInt64) -> SqlInt64: ...
    def op_Addition(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def op_BitwiseAnd(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def op_BitwiseOr(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def op_Division(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def op_Equality(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    def op_ExclusiveOr(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlInt64: ...
    @overload
    def op_Explicit(x: SqlMoney) -> SqlInt64: ...
    @overload
    def op_Explicit(x: SqlDouble) -> SqlInt64: ...
    @overload
    def op_Explicit(x: SqlSingle) -> SqlInt64: ...
    @overload
    def op_Explicit(x: SqlInt64) -> Int64: ...
    @overload
    def op_Explicit(x: SqlBoolean) -> SqlInt64: ...
    @overload
    def op_Explicit(x: SqlDecimal) -> SqlInt64: ...
    def op_GreaterThan(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    @overload
    def op_Implicit(x: Int64) -> SqlInt64: ...
    @overload
    def op_Implicit(x: SqlInt32) -> SqlInt64: ...
    @overload
    def op_Implicit(x: SqlInt16) -> SqlInt64: ...
    @overload
    def op_Implicit(x: SqlByte) -> SqlInt64: ...
    def op_Inequality(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    def op_LessThan(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlInt64, y: SqlInt64) -> SqlBoolean: ...
    def op_Modulus(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def op_Multiply(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def op_OnesComplement(x: SqlInt64) -> SqlInt64: ...
    def op_Subtraction(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def op_UnaryNegation(x: SqlInt64) -> SqlInt64: ...
    def Parse(s: str) -> SqlInt64: ...
    def Subtract(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...
    def ToSqlBoolean(self) -> SqlBoolean: ...
    def ToSqlByte(self) -> SqlByte: ...
    def ToSqlDecimal(self) -> SqlDecimal: ...
    def ToSqlDouble(self) -> SqlDouble: ...
    def ToSqlInt16(self) -> SqlInt16: ...
    def ToSqlInt32(self) -> SqlInt32: ...
    def ToSqlMoney(self) -> SqlMoney: ...
    def ToSqlSingle(self) -> SqlSingle: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...
    def Xor(x: SqlInt64, y: SqlInt64) -> SqlInt64: ...


class SqlMoney(ValueType):
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: Int64): ...
    @overload
    def __init__(self, value: Decimal): ...
    @overload
    def __init__(self, value: float): ...
    def Add(x: SqlMoney, y: SqlMoney) -> SqlMoney: ...
    @overload
    def CompareTo(self, value: SqlMoney) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    def Divide(x: SqlMoney, y: SqlMoney) -> SqlMoney: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Value(self) -> Decimal: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    def LessThan(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    def Multiply(x: SqlMoney, y: SqlMoney) -> SqlMoney: ...
    def NotEquals(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    def op_Addition(x: SqlMoney, y: SqlMoney) -> SqlMoney: ...
    def op_Division(x: SqlMoney, y: SqlMoney) -> SqlMoney: ...
    def op_Equality(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: float) -> SqlMoney: ...
    @overload
    def op_Explicit(x: SqlMoney) -> Decimal: ...
    @overload
    def op_Explicit(x: SqlDecimal) -> SqlMoney: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlMoney: ...
    @overload
    def op_Explicit(x: SqlSingle) -> SqlMoney: ...
    @overload
    def op_Explicit(x: SqlBoolean) -> SqlMoney: ...
    @overload
    def op_Explicit(x: SqlDouble) -> SqlMoney: ...
    def op_GreaterThan(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    @overload
    def op_Implicit(x: Decimal) -> SqlMoney: ...
    @overload
    def op_Implicit(x: SqlByte) -> SqlMoney: ...
    @overload
    def op_Implicit(x: Int64) -> SqlMoney: ...
    @overload
    def op_Implicit(x: SqlInt16) -> SqlMoney: ...
    @overload
    def op_Implicit(x: SqlInt32) -> SqlMoney: ...
    @overload
    def op_Implicit(x: SqlInt64) -> SqlMoney: ...
    def op_Inequality(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    def op_LessThan(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlMoney, y: SqlMoney) -> SqlBoolean: ...
    def op_Multiply(x: SqlMoney, y: SqlMoney) -> SqlMoney: ...
    def op_Subtraction(x: SqlMoney, y: SqlMoney) -> SqlMoney: ...
    def op_UnaryNegation(x: SqlMoney) -> SqlMoney: ...
    def Parse(s: str) -> SqlMoney: ...
    def Subtract(x: SqlMoney, y: SqlMoney) -> SqlMoney: ...
    def ToDecimal(self) -> Decimal: ...
    def ToDouble(self) -> float: ...
    def ToInt32(self) -> int: ...
    def ToInt64(self) -> Int64: ...
    def ToSqlBoolean(self) -> SqlBoolean: ...
    def ToSqlByte(self) -> SqlByte: ...
    def ToSqlDecimal(self) -> SqlDecimal: ...
    def ToSqlDouble(self) -> SqlDouble: ...
    def ToSqlInt16(self) -> SqlInt16: ...
    def ToSqlInt32(self) -> SqlInt32: ...
    def ToSqlInt64(self) -> SqlInt64: ...
    def ToSqlSingle(self) -> SqlSingle: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...


class SqlNotFilledException(SqlTypeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, e: Exception): ...


class SqlNullValueException(SqlTypeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, e: Exception): ...


class SqlSingle(ValueType):
    @overload
    def __init__(self, value: Single): ...
    @overload
    def __init__(self, value: float): ...
    def Add(x: SqlSingle, y: SqlSingle) -> SqlSingle: ...
    @overload
    def CompareTo(self, value: SqlSingle) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    def Divide(x: SqlSingle, y: SqlSingle) -> SqlSingle: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Value(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    def LessThan(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    def Multiply(x: SqlSingle, y: SqlSingle) -> SqlSingle: ...
    def NotEquals(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    def op_Addition(x: SqlSingle, y: SqlSingle) -> SqlSingle: ...
    def op_Division(x: SqlSingle, y: SqlSingle) -> SqlSingle: ...
    def op_Equality(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlBoolean) -> SqlSingle: ...
    @overload
    def op_Explicit(x: SqlSingle) -> Single: ...
    @overload
    def op_Explicit(x: SqlDouble) -> SqlSingle: ...
    @overload
    def op_Explicit(x: SqlString) -> SqlSingle: ...
    def op_GreaterThan(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    @overload
    def op_Implicit(x: Single) -> SqlSingle: ...
    @overload
    def op_Implicit(x: SqlDecimal) -> SqlSingle: ...
    @overload
    def op_Implicit(x: SqlMoney) -> SqlSingle: ...
    @overload
    def op_Implicit(x: SqlInt64) -> SqlSingle: ...
    @overload
    def op_Implicit(x: SqlInt32) -> SqlSingle: ...
    @overload
    def op_Implicit(x: SqlInt16) -> SqlSingle: ...
    @overload
    def op_Implicit(x: SqlByte) -> SqlSingle: ...
    def op_Inequality(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    def op_LessThan(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlSingle, y: SqlSingle) -> SqlBoolean: ...
    def op_Multiply(x: SqlSingle, y: SqlSingle) -> SqlSingle: ...
    def op_Subtraction(x: SqlSingle, y: SqlSingle) -> SqlSingle: ...
    def op_UnaryNegation(x: SqlSingle) -> SqlSingle: ...
    def Parse(s: str) -> SqlSingle: ...
    def Subtract(x: SqlSingle, y: SqlSingle) -> SqlSingle: ...
    def ToSqlBoolean(self) -> SqlBoolean: ...
    def ToSqlByte(self) -> SqlByte: ...
    def ToSqlDecimal(self) -> SqlDecimal: ...
    def ToSqlDouble(self) -> SqlDouble: ...
    def ToSqlInt16(self) -> SqlInt16: ...
    def ToSqlInt32(self) -> SqlInt32: ...
    def ToSqlInt64(self) -> SqlInt64: ...
    def ToSqlMoney(self) -> SqlMoney: ...
    def ToSqlString(self) -> SqlString: ...
    def ToString(self) -> str: ...


class SqlString(ValueType):
    @overload
    def __init__(self, data: str): ...
    @overload
    def __init__(self, data: str, lcid: int): ...
    @overload
    def __init__(self, lcid: int, compareOptions: SqlCompareOptions, data: Set(Byte)): ...
    @overload
    def __init__(self, data: str, lcid: int, compareOptions: SqlCompareOptions): ...
    @overload
    def __init__(self, lcid: int, compareOptions: SqlCompareOptions, data: Set(Byte), fUnicode: bool): ...
    @overload
    def __init__(self, lcid: int, compareOptions: SqlCompareOptions, data: Set(Byte), index: int, count: int): ...
    @overload
    def __init__(self, lcid: int, compareOptions: SqlCompareOptions, data: Set(Byte), index: int, count: int, fUnicode: bool): ...
    def Add(x: SqlString, y: SqlString) -> SqlString: ...
    def Clone(self) -> SqlString: ...
    def CompareOptionsFromSqlCompareOptions(compareOptions: SqlCompareOptions) -> CompareOptions: ...
    @overload
    def CompareTo(self, value: SqlString) -> int: ...
    @overload
    def CompareTo(self, value: Object) -> int: ...
    def Concat(x: SqlString, y: SqlString) -> SqlString: ...
    @overload
    def Equals(self, value: Object) -> bool: ...
    @overload
    def Equals(x: SqlString, y: SqlString) -> SqlBoolean: ...
    @property
    def CompareInfo(self) -> CompareInfo: ...
    @property
    def CultureInfo(self) -> CultureInfo: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def LCID(self) -> int: ...
    @property
    def SqlCompareOptions(self) -> SqlCompareOptions: ...
    @property
    def Value(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetNonUnicodeBytes(self) -> Set(Byte): ...
    def GetUnicodeBytes(self) -> Set(Byte): ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...
    def GreaterThan(x: SqlString, y: SqlString) -> SqlBoolean: ...
    def GreaterThanOrEqual(x: SqlString, y: SqlString) -> SqlBoolean: ...
    def LessThan(x: SqlString, y: SqlString) -> SqlBoolean: ...
    def LessThanOrEqual(x: SqlString, y: SqlString) -> SqlBoolean: ...
    def NotEquals(x: SqlString, y: SqlString) -> SqlBoolean: ...
    def op_Addition(x: SqlString, y: SqlString) -> SqlString: ...
    def op_Equality(x: SqlString, y: SqlString) -> SqlBoolean: ...
    @overload
    def op_Explicit(x: SqlString) -> str: ...
    @overload
    def op_Explicit(x: SqlInt64) -> SqlString: ...
    @overload
    def op_Explicit(x: SqlBoolean) -> SqlString: ...
    @overload
    def op_Explicit(x: SqlByte) -> SqlString: ...
    @overload
    def op_Explicit(x: SqlSingle) -> SqlString: ...
    @overload
    def op_Explicit(x: SqlDouble) -> SqlString: ...
    @overload
    def op_Explicit(x: SqlDecimal) -> SqlString: ...
    @overload
    def op_Explicit(x: SqlMoney) -> SqlString: ...
    @overload
    def op_Explicit(x: SqlInt32) -> SqlString: ...
    @overload
    def op_Explicit(x: SqlGuid) -> SqlString: ...
    @overload
    def op_Explicit(x: SqlDateTime) -> SqlString: ...
    @overload
    def op_Explicit(x: SqlInt16) -> SqlString: ...
    def op_GreaterThan(x: SqlString, y: SqlString) -> SqlBoolean: ...
    def op_GreaterThanOrEqual(x: SqlString, y: SqlString) -> SqlBoolean: ...
    def op_Implicit(x: str) -> SqlString: ...
    def op_Inequality(x: SqlString, y: SqlString) -> SqlBoolean: ...
    def op_LessThan(x: SqlString, y: SqlString) -> SqlBoolean: ...
    def op_LessThanOrEqual(x: SqlString, y: SqlString) -> SqlBoolean: ...
    def ToSqlBoolean(self) -> SqlBoolean: ...
    def ToSqlByte(self) -> SqlByte: ...
    def ToSqlDateTime(self) -> SqlDateTime: ...
    def ToSqlDecimal(self) -> SqlDecimal: ...
    def ToSqlDouble(self) -> SqlDouble: ...
    def ToSqlGuid(self) -> SqlGuid: ...
    def ToSqlInt16(self) -> SqlInt16: ...
    def ToSqlInt32(self) -> SqlInt32: ...
    def ToSqlInt64(self) -> SqlInt64: ...
    def ToSqlMoney(self) -> SqlMoney: ...
    def ToSqlSingle(self) -> SqlSingle: ...
    def ToString(self) -> str: ...


class SqlTruncateException(SqlTypeException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, e: Exception): ...


class SqlTypeException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, e: Exception): ...


class SqlXml(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: XmlReader): ...
    @overload
    def __init__(self, value: Stream): ...
    def CreateReader(self) -> XmlReader: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Null() -> SqlXml: ...
    @property
    def Value(self) -> str: ...
    def GetXsdType(schemaSet: XmlSchemaSet) -> XmlQualifiedName: ...


class StorageState:
    Buffer = 0
    Stream = 1
    UnmanagedBuffer = 2
