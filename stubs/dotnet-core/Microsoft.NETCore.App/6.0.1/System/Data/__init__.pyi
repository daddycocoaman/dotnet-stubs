__all__ = ['Common','SqlTypes']
from typing import Tuple, Set, Iterable, List


class AcceptRejectRule:
    #None = 0
    Cascade = 1


class CommandBehavior:
    Default = 0
    SingleResult = 1
    SchemaOnly = 2
    KeyInfo = 4
    SingleRow = 8
    SequentialAccess = 16
    CloseConnection = 32


class CommandType:
    Text = 1
    StoredProcedure = 4
    TableDirect = 512


class ConflictOption:
    CompareAllSearchableValues = 1
    CompareRowVersion = 2
    OverwriteChanges = 3


class ConnectionState:
    Closed = 0
    Open = 1
    Connecting = 2
    Executing = 4
    Fetching = 8
    Broken = 16


class Constraint(Object):
    @property
    def ConstraintName(self) -> str: ...
    @property
    def ExtendedProperties(self) -> PropertyCollection: ...
    @property
    def Table(self) -> DataTable: ...
    @ConstraintName.setter
    def ConstraintName(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ConstraintCollection(InternalDataCollectionBase):
    def add_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Add(self, constraint: Constraint) -> None: ...
    @overload
    def Add(self, name: str, columns: Set(DataColumn), primaryKey: bool) -> Constraint: ...
    @overload
    def Add(self, name: str, column: DataColumn, primaryKey: bool) -> Constraint: ...
    @overload
    def Add(self, name: str, primaryKeyColumn: DataColumn, foreignKeyColumn: DataColumn) -> Constraint: ...
    @overload
    def Add(self, name: str, primaryKeyColumns: Set(DataColumn), foreignKeyColumns: Set(DataColumn)) -> Constraint: ...
    def AddRange(self, constraints: Set(Constraint)) -> None: ...
    def CanRemove(self, constraint: Constraint) -> bool: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    @overload
    def CopyTo(self, array: Set(Constraint), index: int) -> None: ...
    @property
    def Item(self, index: int) -> Constraint: ...
    @property
    def Item(self, name: str) -> Constraint: ...
    @overload
    def IndexOf(self, constraintName: str) -> int: ...
    @overload
    def IndexOf(self, constraint: Constraint) -> int: ...
    def remove_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Remove(self, constraint: Constraint) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class ConstraintException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class DataColumn(MarshalByValueComponent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, columnName: str): ...
    @overload
    def __init__(self, columnName: str, dataType: Type): ...
    @overload
    def __init__(self, columnName: str, dataType: Type, expr: str): ...
    @overload
    def __init__(self, columnName: str, dataType: Type, expr: str, type: MappingType): ...
    @property
    def AllowDBNull(self) -> bool: ...
    @property
    def AutoIncrement(self) -> bool: ...
    @property
    def AutoIncrementSeed(self) -> Int64: ...
    @property
    def AutoIncrementStep(self) -> Int64: ...
    @property
    def Caption(self) -> str: ...
    @property
    def ColumnMapping(self) -> MappingType: ...
    @property
    def ColumnName(self) -> str: ...
    @property
    def DataType(self) -> Type: ...
    @property
    def DateTimeMode(self) -> DataSetDateTime: ...
    @property
    def DefaultValue(self) -> Object: ...
    @property
    def Expression(self) -> str: ...
    @property
    def ExtendedProperties(self) -> PropertyCollection: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Ordinal(self) -> int: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Table(self) -> DataTable: ...
    @property
    def Unique(self) -> bool: ...
    @AllowDBNull.setter
    def AllowDBNull(self, value: bool) -> None: ...
    @AutoIncrement.setter
    def AutoIncrement(self, value: bool) -> None: ...
    @AutoIncrementSeed.setter
    def AutoIncrementSeed(self, value: Int64) -> None: ...
    @AutoIncrementStep.setter
    def AutoIncrementStep(self, value: Int64) -> None: ...
    @Caption.setter
    def Caption(self, value: str) -> None: ...
    @ColumnMapping.setter
    def ColumnMapping(self, value: MappingType) -> None: ...
    @ColumnName.setter
    def ColumnName(self, value: str) -> None: ...
    @DataType.setter
    def DataType(self, value: Type) -> None: ...
    @DateTimeMode.setter
    def DateTimeMode(self, value: DataSetDateTime) -> None: ...
    @DefaultValue.setter
    def DefaultValue(self, value: Object) -> None: ...
    @Expression.setter
    def Expression(self, value: str) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Unique.setter
    def Unique(self, value: bool) -> None: ...
    def SetOrdinal(self, ordinal: int) -> None: ...
    def ToString(self) -> str: ...


class DataColumnChangeEventArgs(EventArgs):
    def __init__(self, row: DataRow, column: DataColumn, value: Object): ...
    @property
    def Column(self) -> DataColumn: ...
    @property
    def ProposedValue(self) -> Object: ...
    @property
    def Row(self) -> DataRow: ...
    @ProposedValue.setter
    def ProposedValue(self, value: Object) -> None: ...


class DataColumnChangeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataColumnChangeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataColumnChangeEventArgs) -> None: ...


class DataColumnCollection(InternalDataCollectionBase):
    @overload
    def Add(self) -> DataColumn: ...
    def add_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Add(self, column: DataColumn) -> None: ...
    @overload
    def Add(self, columnName: str) -> DataColumn: ...
    @overload
    def Add(self, columnName: str, type: Type) -> DataColumn: ...
    @overload
    def Add(self, columnName: str, type: Type, expression: str) -> DataColumn: ...
    def AddRange(self, columns: Set(DataColumn)) -> None: ...
    def CanRemove(self, column: DataColumn) -> bool: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    @overload
    def CopyTo(self, array: Set(DataColumn), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DataColumn: ...
    @property
    def Item(self, name: str) -> DataColumn: ...
    @overload
    def IndexOf(self, columnName: str) -> int: ...
    @overload
    def IndexOf(self, column: DataColumn) -> int: ...
    def remove_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Remove(self, column: DataColumn) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class DataException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, s: str, innerException: Exception): ...


class DataReaderExtensions(Object):
    def GetBoolean(reader: DbDataReader, name: str) -> bool: ...
    def GetByte(reader: DbDataReader, name: str) -> Byte: ...
    def GetBytes(reader: DbDataReader, name: str, dataOffset: Int64, buffer: Set(Byte), bufferOffset: int, length: int) -> Int64: ...
    def GetChar(reader: DbDataReader, name: str) -> Char: ...
    def GetChars(reader: DbDataReader, name: str, dataOffset: Int64, buffer: Set(Char), bufferOffset: int, length: int) -> Int64: ...
    def GetData(reader: DbDataReader, name: str) -> DbDataReader: ...
    def GetDataTypeName(reader: DbDataReader, name: str) -> str: ...
    def GetDateTime(reader: DbDataReader, name: str) -> DateTime: ...
    def GetDecimal(reader: DbDataReader, name: str) -> Decimal: ...
    def GetDouble(reader: DbDataReader, name: str) -> float: ...
    def GetFieldType(reader: DbDataReader, name: str) -> Type: ...
    def GetFieldValue(reader: DbDataReader, name: str) -> T: ...
    def GetFieldValueAsync(reader: DbDataReader, name: str, cancellationToken: CancellationToken) -> Task: ...
    def GetFloat(reader: DbDataReader, name: str) -> Single: ...
    def GetGuid(reader: DbDataReader, name: str) -> Guid: ...
    def GetInt16(reader: DbDataReader, name: str) -> Int16: ...
    def GetInt32(reader: DbDataReader, name: str) -> int: ...
    def GetInt64(reader: DbDataReader, name: str) -> Int64: ...
    def GetProviderSpecificFieldType(reader: DbDataReader, name: str) -> Type: ...
    def GetProviderSpecificValue(reader: DbDataReader, name: str) -> Object: ...
    def GetStream(reader: DbDataReader, name: str) -> Stream: ...
    def GetString(reader: DbDataReader, name: str) -> str: ...
    def GetTextReader(reader: DbDataReader, name: str) -> TextReader: ...
    def GetValue(reader: DbDataReader, name: str) -> Object: ...
    def IsDBNull(reader: DbDataReader, name: str) -> bool: ...
    def IsDBNullAsync(reader: DbDataReader, name: str, cancellationToken: CancellationToken) -> Task: ...


class DataRelation(Object):
    @overload
    def __init__(self, relationName: str, parentColumn: DataColumn, childColumn: DataColumn): ...
    @overload
    def __init__(self, relationName: str, parentColumns: Set(DataColumn), childColumns: Set(DataColumn)): ...
    @overload
    def __init__(self, relationName: str, parentColumn: DataColumn, childColumn: DataColumn, createConstraints: bool): ...
    @overload
    def __init__(self, relationName: str, parentColumns: Set(DataColumn), childColumns: Set(DataColumn), createConstraints: bool): ...
    @overload
    def __init__(self, relationName: str, parentTableName: str, childTableName: str, parentColumnNames: Set(str), childColumnNames: Set(str), nested: bool): ...
    @overload
    def __init__(self, relationName: str, parentTableName: str, parentTableNamespace: str, childTableName: str, childTableNamespace: str, parentColumnNames: Set(str), childColumnNames: Set(str), nested: bool): ...
    @property
    def ChildColumns(self) -> Set(DataColumn): ...
    @property
    def ChildKeyConstraint(self) -> ForeignKeyConstraint: ...
    @property
    def ChildTable(self) -> DataTable: ...
    @property
    def DataSet(self) -> DataSet: ...
    @property
    def ExtendedProperties(self) -> PropertyCollection: ...
    @property
    def Nested(self) -> bool: ...
    @property
    def ParentColumns(self) -> Set(DataColumn): ...
    @property
    def ParentKeyConstraint(self) -> UniqueConstraint: ...
    @property
    def ParentTable(self) -> DataTable: ...
    @property
    def RelationName(self) -> str: ...
    @Nested.setter
    def Nested(self, value: bool) -> None: ...
    @RelationName.setter
    def RelationName(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class DataRelationCollection(InternalDataCollectionBase):
    def add_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Add(self, relation: DataRelation) -> None: ...
    @overload
    def Add(self, parentColumns: Set(DataColumn), childColumns: Set(DataColumn)) -> DataRelation: ...
    @overload
    def Add(self, parentColumn: DataColumn, childColumn: DataColumn) -> DataRelation: ...
    @overload
    def Add(self, name: str, parentColumns: Set(DataColumn), childColumns: Set(DataColumn)) -> DataRelation: ...
    @overload
    def Add(self, name: str, parentColumn: DataColumn, childColumn: DataColumn) -> DataRelation: ...
    @overload
    def Add(self, name: str, parentColumns: Set(DataColumn), childColumns: Set(DataColumn), createConstraints: bool) -> DataRelation: ...
    @overload
    def Add(self, name: str, parentColumn: DataColumn, childColumn: DataColumn, createConstraints: bool) -> DataRelation: ...
    def AddRange(self, relations: Set(DataRelation)) -> None: ...
    def CanRemove(self, relation: DataRelation) -> bool: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    @overload
    def CopyTo(self, array: Set(DataRelation), index: int) -> None: ...
    @property
    def Item(self, name: str) -> DataRelation: ...
    @property
    def Item(self, index: int) -> DataRelation: ...
    @overload
    def IndexOf(self, relationName: str) -> int: ...
    @overload
    def IndexOf(self, relation: DataRelation) -> int: ...
    def remove_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Remove(self, relation: DataRelation) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class DataRow(Object):
    def AcceptChanges(self) -> None: ...
    def BeginEdit(self) -> None: ...
    def CancelEdit(self) -> None: ...
    def ClearErrors(self) -> None: ...
    def Delete(self) -> None: ...
    def EndEdit(self) -> None: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def Item(self, columnName: str) -> Object: ...
    @property
    def Item(self, column: DataColumn) -> Object: ...
    @property
    def Item(self, columnIndex: int) -> Object: ...
    @property
    def Item(self, columnIndex: int, version: DataRowVersion) -> Object: ...
    @property
    def Item(self, columnName: str, version: DataRowVersion) -> Object: ...
    @property
    def Item(self, column: DataColumn, version: DataRowVersion) -> Object: ...
    @property
    def ItemArray(self) -> Set(Object): ...
    @property
    def RowError(self) -> str: ...
    @property
    def RowState(self) -> DataRowState: ...
    @property
    def Table(self) -> DataTable: ...
    @overload
    def GetChildRows(self, relationName: str) -> Set(DataRow): ...
    @overload
    def GetChildRows(self, relation: DataRelation) -> Set(DataRow): ...
    @overload
    def GetChildRows(self, relationName: str, version: DataRowVersion) -> Set(DataRow): ...
    @overload
    def GetChildRows(self, relation: DataRelation, version: DataRowVersion) -> Set(DataRow): ...
    @overload
    def GetColumnError(self, columnName: str) -> str: ...
    @overload
    def GetColumnError(self, column: DataColumn) -> str: ...
    @overload
    def GetColumnError(self, columnIndex: int) -> str: ...
    def GetColumnsInError(self) -> Set(DataColumn): ...
    @overload
    def GetParentRow(self, relationName: str) -> DataRow: ...
    @overload
    def GetParentRow(self, relation: DataRelation) -> DataRow: ...
    @overload
    def GetParentRow(self, relationName: str, version: DataRowVersion) -> DataRow: ...
    @overload
    def GetParentRow(self, relation: DataRelation, version: DataRowVersion) -> DataRow: ...
    @overload
    def GetParentRows(self, relation: DataRelation) -> Set(DataRow): ...
    @overload
    def GetParentRows(self, relationName: str) -> Set(DataRow): ...
    @overload
    def GetParentRows(self, relation: DataRelation, version: DataRowVersion) -> Set(DataRow): ...
    @overload
    def GetParentRows(self, relationName: str, version: DataRowVersion) -> Set(DataRow): ...
    def HasVersion(self, version: DataRowVersion) -> bool: ...
    @overload
    def IsNull(self, column: DataColumn) -> bool: ...
    @overload
    def IsNull(self, columnName: str) -> bool: ...
    @overload
    def IsNull(self, columnIndex: int) -> bool: ...
    @overload
    def IsNull(self, column: DataColumn, version: DataRowVersion) -> bool: ...
    def RejectChanges(self) -> None: ...
    @Item.setter
    def Item(self, column: DataColumn, value: Object) -> None: ...
    @Item.setter
    def Item(self, columnIndex: int, value: Object) -> None: ...
    @Item.setter
    def Item(self, columnName: str, value: Object) -> None: ...
    @ItemArray.setter
    def ItemArray(self, value: Set(Object)) -> None: ...
    @RowError.setter
    def RowError(self, value: str) -> None: ...
    def SetAdded(self) -> None: ...
    @overload
    def SetColumnError(self, columnName: str, error: str) -> None: ...
    @overload
    def SetColumnError(self, columnIndex: int, error: str) -> None: ...
    @overload
    def SetColumnError(self, column: DataColumn, error: str) -> None: ...
    def SetModified(self) -> None: ...
    @overload
    def SetParentRow(self, parentRow: DataRow) -> None: ...
    @overload
    def SetParentRow(self, parentRow: DataRow, relation: DataRelation) -> None: ...


class DataRowAction:
    Nothing = 0
    Delete = 1
    Change = 2
    Rollback = 4
    Commit = 8
    Add = 16
    ChangeOriginal = 32
    ChangeCurrentAndOriginal = 64


class DataRowBuilder(Object):
    pass


class DataRowChangeEventArgs(EventArgs):
    def __init__(self, row: DataRow, action: DataRowAction): ...
    @property
    def Action(self) -> DataRowAction: ...
    @property
    def Row(self) -> DataRow: ...


class DataRowChangeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataRowChangeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataRowChangeEventArgs) -> None: ...


class DataRowCollection(InternalDataCollectionBase):
    @overload
    def Add(self, row: DataRow) -> None: ...
    @overload
    def Add(self, values: Set(Object)) -> DataRow: ...
    def Clear(self) -> None: ...
    @overload
    def Contains(self, keys: Set(Object)) -> bool: ...
    @overload
    def Contains(self, key: Object) -> bool: ...
    @overload
    def CopyTo(self, ar: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, array: Set(DataRow), index: int) -> None: ...
    @overload
    def Find(self, key: Object) -> DataRow: ...
    @overload
    def Find(self, keys: Set(Object)) -> DataRow: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> DataRow: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, row: DataRow) -> int: ...
    def InsertAt(self, row: DataRow, pos: int) -> None: ...
    def Remove(self, row: DataRow) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class DataRowComparer(Object):
    @property
    def Default() -> DataRowComparer: ...




class DataRowExtensions(Object):
    @overload
    def Field(row: DataRow, columnName: str) -> T: ...
    @overload
    def Field(row: DataRow, column: DataColumn) -> T: ...
    @overload
    def Field(row: DataRow, columnIndex: int) -> T: ...
    @overload
    def Field(row: DataRow, columnIndex: int, version: DataRowVersion) -> T: ...
    @overload
    def Field(row: DataRow, columnName: str, version: DataRowVersion) -> T: ...
    @overload
    def Field(row: DataRow, column: DataColumn, version: DataRowVersion) -> T: ...
    @overload
    def SetField(row: DataRow, columnIndex: int, value: T) -> None: ...
    @overload
    def SetField(row: DataRow, columnName: str, value: T) -> None: ...
    @overload
    def SetField(row: DataRow, column: DataColumn, value: T) -> None: ...


class DataRowState:
    Detached = 1
    Unchanged = 2
    Added = 4
    Deleted = 8
    Modified = 16


class DataRowVersion:
    Original = 256
    Current = 512
    Proposed = 1024
    Default = 1536


class DataRowView(Object):
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def BeginEdit(self) -> None: ...
    def CancelEdit(self) -> None: ...
    @overload
    def CreateChildView(self, relationName: str) -> DataView: ...
    @overload
    def CreateChildView(self, relation: DataRelation) -> DataView: ...
    @overload
    def CreateChildView(self, relationName: str, followParent: bool) -> DataView: ...
    @overload
    def CreateChildView(self, relation: DataRelation, followParent: bool) -> DataView: ...
    def Delete(self) -> None: ...
    def EndEdit(self) -> None: ...
    def Equals(self, other: Object) -> bool: ...
    @property
    def DataView(self) -> DataView: ...
    @property
    def IsEdit(self) -> bool: ...
    @property
    def IsNew(self) -> bool: ...
    @property
    def Item(self, property: str) -> Object: ...
    @property
    def Item(self, ndx: int) -> Object: ...
    @property
    def Row(self) -> DataRow: ...
    @property
    def RowVersion(self) -> DataRowVersion: ...
    def GetHashCode(self) -> int: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @Item.setter
    def Item(self, property: str, value: Object) -> None: ...
    @Item.setter
    def Item(self, ndx: int, value: Object) -> None: ...


class DataSet(MarshalByValueComponent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dataSetName: str): ...
    def AcceptChanges(self) -> None: ...
    def add_Initialized(self, value: EventHandler) -> None: ...
    def add_MergeFailed(self, value: MergeFailedEventHandler) -> None: ...
    def BeginInit(self) -> None: ...
    def Clear(self) -> None: ...
    def Clone(self) -> DataSet: ...
    def Copy(self) -> DataSet: ...
    @overload
    def CreateDataReader(self) -> DataTableReader: ...
    @overload
    def CreateDataReader(self, dataTables: Set(DataTable)) -> DataTableReader: ...
    def EndInit(self) -> None: ...
    @property
    def CaseSensitive(self) -> bool: ...
    @property
    def DataSetName(self) -> str: ...
    @property
    def DefaultViewManager(self) -> DataViewManager: ...
    @property
    def EnforceConstraints(self) -> bool: ...
    @property
    def ExtendedProperties(self) -> PropertyCollection: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def IsInitialized(self) -> bool: ...
    @property
    def Locale(self) -> CultureInfo: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def Relations(self) -> DataRelationCollection: ...
    @property
    def RemotingFormat(self) -> SerializationFormat: ...
    @property
    def SchemaSerializationMode(self) -> SchemaSerializationMode: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Tables(self) -> DataTableCollection: ...
    @overload
    def GetChanges(self) -> DataSet: ...
    @overload
    def GetChanges(self, rowStates: DataRowState) -> DataSet: ...
    def GetDataSetSchema(schemaSet: XmlSchemaSet) -> XmlSchemaComplexType: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXml(self) -> str: ...
    def GetXmlSchema(self) -> str: ...
    @overload
    def HasChanges(self) -> bool: ...
    @overload
    def HasChanges(self, rowStates: DataRowState) -> bool: ...
    @overload
    def InferXmlSchema(self, fileName: str, nsArray: Set(str)) -> None: ...
    @overload
    def InferXmlSchema(self, reader: XmlReader, nsArray: Set(str)) -> None: ...
    @overload
    def InferXmlSchema(self, stream: Stream, nsArray: Set(str)) -> None: ...
    @overload
    def InferXmlSchema(self, reader: TextReader, nsArray: Set(str)) -> None: ...
    @overload
    def Load(self, reader: IDataReader, loadOption: LoadOption, tables: Set(str)) -> None: ...
    @overload
    def Load(self, reader: IDataReader, loadOption: LoadOption, tables: Set(DataTable)) -> None: ...
    @overload
    def Load(self, reader: IDataReader, loadOption: LoadOption, errorHandler: FillErrorEventHandler, tables: Set(DataTable)) -> None: ...
    @overload
    def Merge(self, dataSet: DataSet) -> None: ...
    @overload
    def Merge(self, table: DataTable) -> None: ...
    @overload
    def Merge(self, rows: Set(DataRow)) -> None: ...
    @overload
    def Merge(self, dataSet: DataSet, preserveChanges: bool) -> None: ...
    @overload
    def Merge(self, table: DataTable, preserveChanges: bool, missingSchemaAction: MissingSchemaAction) -> None: ...
    @overload
    def Merge(self, rows: Set(DataRow), preserveChanges: bool, missingSchemaAction: MissingSchemaAction) -> None: ...
    @overload
    def Merge(self, dataSet: DataSet, preserveChanges: bool, missingSchemaAction: MissingSchemaAction) -> None: ...
    @overload
    def ReadXml(self, reader: TextReader) -> XmlReadMode: ...
    @overload
    def ReadXml(self, stream: Stream) -> XmlReadMode: ...
    @overload
    def ReadXml(self, reader: XmlReader) -> XmlReadMode: ...
    @overload
    def ReadXml(self, fileName: str) -> XmlReadMode: ...
    @overload
    def ReadXml(self, reader: XmlReader, mode: XmlReadMode) -> XmlReadMode: ...
    @overload
    def ReadXml(self, stream: Stream, mode: XmlReadMode) -> XmlReadMode: ...
    @overload
    def ReadXml(self, reader: TextReader, mode: XmlReadMode) -> XmlReadMode: ...
    @overload
    def ReadXml(self, fileName: str, mode: XmlReadMode) -> XmlReadMode: ...
    @overload
    def ReadXmlSchema(self, reader: XmlReader) -> None: ...
    @overload
    def ReadXmlSchema(self, stream: Stream) -> None: ...
    @overload
    def ReadXmlSchema(self, reader: TextReader) -> None: ...
    @overload
    def ReadXmlSchema(self, fileName: str) -> None: ...
    def RejectChanges(self) -> None: ...
    def remove_Initialized(self, value: EventHandler) -> None: ...
    def remove_MergeFailed(self, value: MergeFailedEventHandler) -> None: ...
    def Reset(self) -> None: ...
    @CaseSensitive.setter
    def CaseSensitive(self, value: bool) -> None: ...
    @DataSetName.setter
    def DataSetName(self, value: str) -> None: ...
    @EnforceConstraints.setter
    def EnforceConstraints(self, value: bool) -> None: ...
    @Locale.setter
    def Locale(self, value: CultureInfo) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @RemotingFormat.setter
    def RemotingFormat(self, value: SerializationFormat) -> None: ...
    @SchemaSerializationMode.setter
    def SchemaSerializationMode(self, value: SchemaSerializationMode) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @overload
    def WriteXml(self, writer: XmlWriter) -> None: ...
    @overload
    def WriteXml(self, fileName: str) -> None: ...
    @overload
    def WriteXml(self, writer: TextWriter) -> None: ...
    @overload
    def WriteXml(self, stream: Stream) -> None: ...
    @overload
    def WriteXml(self, fileName: str, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, stream: Stream, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, writer: TextWriter, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, writer: XmlWriter, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: TextWriter) -> None: ...
    @overload
    def WriteXmlSchema(self, fileName: str) -> None: ...
    @overload
    def WriteXmlSchema(self, stream: Stream) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: XmlWriter) -> None: ...
    @overload
    def WriteXmlSchema(self, fileName: str, multipleTargetConverter: Converter) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: XmlWriter, multipleTargetConverter: Converter) -> None: ...
    @overload
    def WriteXmlSchema(self, stream: Stream, multipleTargetConverter: Converter) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: TextWriter, multipleTargetConverter: Converter) -> None: ...


class DataSetDateTime:
    Local = 1
    Unspecified = 2
    UnspecifiedLocal = 3
    Utc = 4


class DataTable(MarshalByValueComponent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, tableName: str): ...
    @overload
    def __init__(self, tableName: str, tableNamespace: str): ...
    def AcceptChanges(self) -> None: ...
    def add_ColumnChanged(self, value: DataColumnChangeEventHandler) -> None: ...
    def add_ColumnChanging(self, value: DataColumnChangeEventHandler) -> None: ...
    def add_Initialized(self, value: EventHandler) -> None: ...
    def add_RowChanged(self, value: DataRowChangeEventHandler) -> None: ...
    def add_RowChanging(self, value: DataRowChangeEventHandler) -> None: ...
    def add_RowDeleted(self, value: DataRowChangeEventHandler) -> None: ...
    def add_RowDeleting(self, value: DataRowChangeEventHandler) -> None: ...
    def add_TableCleared(self, value: DataTableClearEventHandler) -> None: ...
    def add_TableClearing(self, value: DataTableClearEventHandler) -> None: ...
    def add_TableNewRow(self, value: DataTableNewRowEventHandler) -> None: ...
    def BeginInit(self) -> None: ...
    def BeginLoadData(self) -> None: ...
    def Clear(self) -> None: ...
    def Clone(self) -> DataTable: ...
    def Compute(self, expression: str, filter: str) -> Object: ...
    def Copy(self) -> DataTable: ...
    def CreateDataReader(self) -> DataTableReader: ...
    def EndInit(self) -> None: ...
    def EndLoadData(self) -> None: ...
    @property
    def CaseSensitive(self) -> bool: ...
    @property
    def ChildRelations(self) -> DataRelationCollection: ...
    @property
    def Columns(self) -> DataColumnCollection: ...
    @property
    def Constraints(self) -> ConstraintCollection: ...
    @property
    def DataSet(self) -> DataSet: ...
    @property
    def DefaultView(self) -> DataView: ...
    @property
    def DisplayExpression(self) -> str: ...
    @property
    def ExtendedProperties(self) -> PropertyCollection: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def IsInitialized(self) -> bool: ...
    @property
    def Locale(self) -> CultureInfo: ...
    @property
    def MinimumCapacity(self) -> int: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ParentRelations(self) -> DataRelationCollection: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def PrimaryKey(self) -> Set(DataColumn): ...
    @property
    def RemotingFormat(self) -> SerializationFormat: ...
    @property
    def Rows(self) -> DataRowCollection: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def TableName(self) -> str: ...
    @overload
    def GetChanges(self) -> DataTable: ...
    @overload
    def GetChanges(self, rowStates: DataRowState) -> DataTable: ...
    def GetDataTableSchema(schemaSet: XmlSchemaSet) -> XmlSchemaComplexType: ...
    def GetErrors(self) -> Set(DataRow): ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def ImportRow(self, row: DataRow) -> None: ...
    @overload
    def Load(self, reader: IDataReader) -> None: ...
    @overload
    def Load(self, reader: IDataReader, loadOption: LoadOption) -> None: ...
    @overload
    def Load(self, reader: IDataReader, loadOption: LoadOption, errorHandler: FillErrorEventHandler) -> None: ...
    @overload
    def LoadDataRow(self, values: Set(Object), loadOption: LoadOption) -> DataRow: ...
    @overload
    def LoadDataRow(self, values: Set(Object), fAcceptChanges: bool) -> DataRow: ...
    @overload
    def Merge(self, table: DataTable) -> None: ...
    @overload
    def Merge(self, table: DataTable, preserveChanges: bool) -> None: ...
    @overload
    def Merge(self, table: DataTable, preserveChanges: bool, missingSchemaAction: MissingSchemaAction) -> None: ...
    def NewRow(self) -> DataRow: ...
    @overload
    def ReadXml(self, stream: Stream) -> XmlReadMode: ...
    @overload
    def ReadXml(self, reader: TextReader) -> XmlReadMode: ...
    @overload
    def ReadXml(self, reader: XmlReader) -> XmlReadMode: ...
    @overload
    def ReadXml(self, fileName: str) -> XmlReadMode: ...
    @overload
    def ReadXmlSchema(self, stream: Stream) -> None: ...
    @overload
    def ReadXmlSchema(self, reader: TextReader) -> None: ...
    @overload
    def ReadXmlSchema(self, fileName: str) -> None: ...
    @overload
    def ReadXmlSchema(self, reader: XmlReader) -> None: ...
    def RejectChanges(self) -> None: ...
    def remove_ColumnChanged(self, value: DataColumnChangeEventHandler) -> None: ...
    def remove_ColumnChanging(self, value: DataColumnChangeEventHandler) -> None: ...
    def remove_Initialized(self, value: EventHandler) -> None: ...
    def remove_RowChanged(self, value: DataRowChangeEventHandler) -> None: ...
    def remove_RowChanging(self, value: DataRowChangeEventHandler) -> None: ...
    def remove_RowDeleted(self, value: DataRowChangeEventHandler) -> None: ...
    def remove_RowDeleting(self, value: DataRowChangeEventHandler) -> None: ...
    def remove_TableCleared(self, value: DataTableClearEventHandler) -> None: ...
    def remove_TableClearing(self, value: DataTableClearEventHandler) -> None: ...
    def remove_TableNewRow(self, value: DataTableNewRowEventHandler) -> None: ...
    def Reset(self) -> None: ...
    @overload
    def Select(self) -> Set(DataRow): ...
    @overload
    def Select(self, filterExpression: str) -> Set(DataRow): ...
    @overload
    def Select(self, filterExpression: str, sort: str) -> Set(DataRow): ...
    @overload
    def Select(self, filterExpression: str, sort: str, recordStates: DataViewRowState) -> Set(DataRow): ...
    @CaseSensitive.setter
    def CaseSensitive(self, value: bool) -> None: ...
    @DisplayExpression.setter
    def DisplayExpression(self, value: str) -> None: ...
    @Locale.setter
    def Locale(self, value: CultureInfo) -> None: ...
    @MinimumCapacity.setter
    def MinimumCapacity(self, value: int) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @PrimaryKey.setter
    def PrimaryKey(self, value: Set(DataColumn)) -> None: ...
    @RemotingFormat.setter
    def RemotingFormat(self, value: SerializationFormat) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @TableName.setter
    def TableName(self, value: str) -> None: ...
    def ToString(self) -> str: ...
    @overload
    def WriteXml(self, fileName: str) -> None: ...
    @overload
    def WriteXml(self, writer: XmlWriter) -> None: ...
    @overload
    def WriteXml(self, stream: Stream) -> None: ...
    @overload
    def WriteXml(self, writer: TextWriter) -> None: ...
    @overload
    def WriteXml(self, fileName: str, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, writer: TextWriter, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, writer: TextWriter, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, stream: Stream, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, writer: XmlWriter, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, writer: XmlWriter, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, fileName: str, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, stream: Stream, mode: XmlWriteMode) -> None: ...
    @overload
    def WriteXml(self, fileName: str, mode: XmlWriteMode, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, stream: Stream, mode: XmlWriteMode, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, writer: TextWriter, mode: XmlWriteMode, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXml(self, writer: XmlWriter, mode: XmlWriteMode, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXmlSchema(self, stream: Stream) -> None: ...
    @overload
    def WriteXmlSchema(self, fileName: str) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: XmlWriter) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: TextWriter) -> None: ...
    @overload
    def WriteXmlSchema(self, fileName: str, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: XmlWriter, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXmlSchema(self, writer: TextWriter, writeHierarchy: bool) -> None: ...
    @overload
    def WriteXmlSchema(self, stream: Stream, writeHierarchy: bool) -> None: ...


class DataTableClearEventArgs(EventArgs):
    def __init__(self, dataTable: DataTable): ...
    @property
    def Table(self) -> DataTable: ...
    @property
    def TableName(self) -> str: ...
    @property
    def TableNamespace(self) -> str: ...


class DataTableClearEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataTableClearEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataTableClearEventArgs) -> None: ...


class DataTableCollection(InternalDataCollectionBase):
    @overload
    def Add(self) -> DataTable: ...
    def add_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    def add_CollectionChanging(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Add(self, table: DataTable) -> None: ...
    @overload
    def Add(self, name: str) -> DataTable: ...
    @overload
    def Add(self, name: str, tableNamespace: str) -> DataTable: ...
    def AddRange(self, tables: Set(DataTable)) -> None: ...
    def CanRemove(self, table: DataTable) -> bool: ...
    def Clear(self) -> None: ...
    @overload
    def Contains(self, name: str) -> bool: ...
    @overload
    def Contains(self, name: str, tableNamespace: str) -> bool: ...
    @overload
    def CopyTo(self, array: Set(DataTable), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DataTable: ...
    @property
    def Item(self, name: str) -> DataTable: ...
    @property
    def Item(self, name: str, tableNamespace: str) -> DataTable: ...
    @overload
    def IndexOf(self, tableName: str) -> int: ...
    @overload
    def IndexOf(self, table: DataTable) -> int: ...
    @overload
    def IndexOf(self, tableName: str, tableNamespace: str) -> int: ...
    def remove_CollectionChanged(self, value: CollectionChangeEventHandler) -> None: ...
    def remove_CollectionChanging(self, value: CollectionChangeEventHandler) -> None: ...
    @overload
    def Remove(self, table: DataTable) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    @overload
    def Remove(self, name: str, tableNamespace: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...


class DataTableExtensions(Object):
    @overload
    def AsDataView(table: DataTable) -> DataView: ...
    @overload
    def AsDataView(source: EnumerableRowCollection) -> DataView: ...
    def AsEnumerable(source: DataTable) -> EnumerableRowCollection: ...
    @overload
    def CopyToDataTable(source: Iterable[T]) -> DataTable: ...
    @overload
    def CopyToDataTable(source: Iterable[T], table: DataTable, options: LoadOption) -> None: ...
    @overload
    def CopyToDataTable(source: Iterable[T], table: DataTable, options: LoadOption, errorHandler: FillErrorEventHandler) -> None: ...


class DataTableNewRowEventArgs(EventArgs):
    def __init__(self, dataRow: DataRow): ...
    @property
    def Row(self) -> DataRow: ...


class DataTableNewRowEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DataTableNewRowEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DataTableNewRowEventArgs) -> None: ...


class DataTableReader(DbDataReader):
    @overload
    def __init__(self, dataTable: DataTable): ...
    @overload
    def __init__(self, dataTables: Set(DataTable)): ...
    def Close(self) -> None: ...
    @property
    def Depth(self) -> int: ...
    @property
    def FieldCount(self) -> int: ...
    @property
    def HasRows(self) -> bool: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def Item(self, ordinal: int) -> Object: ...
    @property
    def Item(self, name: str) -> Object: ...
    @property
    def RecordsAffected(self) -> int: ...
    def GetBoolean(self, ordinal: int) -> bool: ...
    def GetByte(self, ordinal: int) -> Byte: ...
    def GetBytes(self, ordinal: int, dataIndex: Int64, buffer: Set(Byte), bufferIndex: int, length: int) -> Int64: ...
    def GetChar(self, ordinal: int) -> Char: ...
    def GetChars(self, ordinal: int, dataIndex: Int64, buffer: Set(Char), bufferIndex: int, length: int) -> Int64: ...
    def GetDataTypeName(self, ordinal: int) -> str: ...
    def GetDateTime(self, ordinal: int) -> DateTime: ...
    def GetDecimal(self, ordinal: int) -> Decimal: ...
    def GetDouble(self, ordinal: int) -> float: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetFieldType(self, ordinal: int) -> Type: ...
    def GetFloat(self, ordinal: int) -> Single: ...
    def GetGuid(self, ordinal: int) -> Guid: ...
    def GetInt16(self, ordinal: int) -> Int16: ...
    def GetInt32(self, ordinal: int) -> int: ...
    def GetInt64(self, ordinal: int) -> Int64: ...
    def GetName(self, ordinal: int) -> str: ...
    def GetOrdinal(self, name: str) -> int: ...
    def GetProviderSpecificFieldType(self, ordinal: int) -> Type: ...
    def GetProviderSpecificValue(self, ordinal: int) -> Object: ...
    def GetProviderSpecificValues(self, values: Set(Object)) -> int: ...
    def GetSchemaTable(self) -> DataTable: ...
    def GetString(self, ordinal: int) -> str: ...
    def GetValue(self, ordinal: int) -> Object: ...
    def GetValues(self, values: Set(Object)) -> int: ...
    def IsDBNull(self, ordinal: int) -> bool: ...
    def NextResult(self) -> bool: ...
    def Read(self) -> bool: ...


class DataView(MarshalByValueComponent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, table: DataTable): ...
    @overload
    def __init__(self, table: DataTable, RowFilter: str, Sort: str, RowState: DataViewRowState): ...
    def add_Initialized(self, value: EventHandler) -> None: ...
    def add_ListChanged(self, value: ListChangedEventHandler) -> None: ...
    def AddNew(self) -> DataRowView: ...
    def BeginInit(self) -> None: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    def Delete(self, index: int) -> None: ...
    def EndInit(self) -> None: ...
    @overload
    def Equals(self, view: DataView) -> bool: ...
    @overload
    def Find(self, key: Object) -> int: ...
    @overload
    def Find(self, key: Set(Object)) -> int: ...
    @overload
    def FindRows(self, key: Set(Object)) -> Set(DataRowView): ...
    @overload
    def FindRows(self, key: Object) -> Set(DataRowView): ...
    @property
    def AllowDelete(self) -> bool: ...
    @property
    def AllowEdit(self) -> bool: ...
    @property
    def AllowNew(self) -> bool: ...
    @property
    def ApplyDefaultSort(self) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def DataViewManager(self) -> DataViewManager: ...
    @property
    def IsInitialized(self) -> bool: ...
    @property
    def Item(self, recordIndex: int) -> DataRowView: ...
    @property
    def RowFilter(self) -> str: ...
    @property
    def RowStateFilter(self) -> DataViewRowState: ...
    @property
    def Sort(self) -> str: ...
    @property
    def Table(self) -> DataTable: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def remove_Initialized(self, value: EventHandler) -> None: ...
    def remove_ListChanged(self, value: ListChangedEventHandler) -> None: ...
    @AllowDelete.setter
    def AllowDelete(self, value: bool) -> None: ...
    @AllowEdit.setter
    def AllowEdit(self, value: bool) -> None: ...
    @AllowNew.setter
    def AllowNew(self, value: bool) -> None: ...
    @ApplyDefaultSort.setter
    def ApplyDefaultSort(self, value: bool) -> None: ...
    @RowFilter.setter
    def RowFilter(self, value: str) -> None: ...
    @RowStateFilter.setter
    def RowStateFilter(self, value: DataViewRowState) -> None: ...
    @Sort.setter
    def Sort(self, value: str) -> None: ...
    @Table.setter
    def Table(self, value: DataTable) -> None: ...
    @overload
    def ToTable(self) -> DataTable: ...
    @overload
    def ToTable(self, tableName: str) -> DataTable: ...
    @overload
    def ToTable(self, distinct: bool, columnNames: Set(str)) -> DataTable: ...
    @overload
    def ToTable(self, tableName: str, distinct: bool, columnNames: Set(str)) -> DataTable: ...


class DataViewManager(MarshalByValueComponent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dataSet: DataSet): ...
    def add_ListChanged(self, value: ListChangedEventHandler) -> None: ...
    def CreateDataView(self, table: DataTable) -> DataView: ...
    @property
    def DataSet(self) -> DataSet: ...
    @property
    def DataViewSettingCollectionString(self) -> str: ...
    @property
    def DataViewSettings(self) -> DataViewSettingCollection: ...
    def remove_ListChanged(self, value: ListChangedEventHandler) -> None: ...
    @DataSet.setter
    def DataSet(self, value: DataSet) -> None: ...
    @DataViewSettingCollectionString.setter
    def DataViewSettingCollectionString(self, value: str) -> None: ...


class DataViewRowState:
    #None = 0
    Unchanged = 2
    Added = 4
    Deleted = 8
    ModifiedCurrent = 16
    CurrentRows = 22
    ModifiedOriginal = 32
    OriginalRows = 42


class DataViewSetting(Object):
    @property
    def ApplyDefaultSort(self) -> bool: ...
    @property
    def DataViewManager(self) -> DataViewManager: ...
    @property
    def RowFilter(self) -> str: ...
    @property
    def RowStateFilter(self) -> DataViewRowState: ...
    @property
    def Sort(self) -> str: ...
    @property
    def Table(self) -> DataTable: ...
    @ApplyDefaultSort.setter
    def ApplyDefaultSort(self, value: bool) -> None: ...
    @RowFilter.setter
    def RowFilter(self, value: str) -> None: ...
    @RowStateFilter.setter
    def RowStateFilter(self, value: DataViewRowState) -> None: ...
    @Sort.setter
    def Sort(self, value: str) -> None: ...


class DataViewSettingCollection(Object):
    @overload
    def CopyTo(self, ar: Array, index: int) -> None: ...
    @overload
    def CopyTo(self, ar: Set(DataViewSetting), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, table: DataTable) -> DataViewSetting: ...
    @property
    def Item(self, tableName: str) -> DataViewSetting: ...
    @property
    def Item(self, index: int) -> DataViewSetting: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @Item.setter
    def Item(self, table: DataTable, value: DataViewSetting) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DataViewSetting) -> None: ...


class DBConcurrencyException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, message: str, inner: Exception, dataRows: Set(DataRow)): ...
    @overload
    def CopyToRows(self, array: Set(DataRow)) -> None: ...
    @overload
    def CopyToRows(self, array: Set(DataRow), arrayIndex: int) -> None: ...
    @property
    def Row(self) -> DataRow: ...
    @property
    def RowCount(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @Row.setter
    def Row(self, value: DataRow) -> None: ...


class DbType:
    AnsiString = 0
    Binary = 1
    Byte = 2
    Boolean = 3
    Currency = 4
    Date = 5
    DateTime = 6
    Decimal = 7
    Double = 8
    Guid = 9
    Int16 = 10
    Int32 = 11
    Int64 = 12
    Object = 13
    SByte = 14
    Single = 15
    String = 16
    Time = 17
    UInt16 = 18
    UInt32 = 19
    UInt64 = 20
    VarNumeric = 21
    AnsiStringFixedLength = 22
    StringFixedLength = 23
    Xml = 25
    DateTime2 = 26
    DateTimeOffset = 27


class DeletedRowInaccessibleException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class DuplicateNameException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class EnumerableRowCollection(Object):
    pass




class EnumerableRowCollectionExtensions(Object):
    def Cast(source: EnumerableRowCollection) -> EnumerableRowCollection: ...
    @overload
    def OrderBy(source: EnumerableRowCollection, keySelector: Func) -> OrderedEnumerableRowCollection: ...
    @overload
    def OrderBy(source: EnumerableRowCollection, keySelector: Func, comparer: IComparer) -> OrderedEnumerableRowCollection: ...
    @overload
    def OrderByDescending(source: EnumerableRowCollection, keySelector: Func) -> OrderedEnumerableRowCollection: ...
    @overload
    def OrderByDescending(source: EnumerableRowCollection, keySelector: Func, comparer: IComparer) -> OrderedEnumerableRowCollection: ...
    def Select(source: EnumerableRowCollection, selector: Func) -> EnumerableRowCollection: ...
    @overload
    def ThenBy(source: OrderedEnumerableRowCollection, keySelector: Func) -> OrderedEnumerableRowCollection: ...
    @overload
    def ThenBy(source: OrderedEnumerableRowCollection, keySelector: Func, comparer: IComparer) -> OrderedEnumerableRowCollection: ...
    @overload
    def ThenByDescending(source: OrderedEnumerableRowCollection, keySelector: Func) -> OrderedEnumerableRowCollection: ...
    @overload
    def ThenByDescending(source: OrderedEnumerableRowCollection, keySelector: Func, comparer: IComparer) -> OrderedEnumerableRowCollection: ...
    def Where(source: EnumerableRowCollection, predicate: Func) -> EnumerableRowCollection: ...


class EvaluateException(InvalidExpressionException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class FillErrorEventArgs(EventArgs):
    def __init__(self, dataTable: DataTable, values: Set(Object)): ...
    @property
    def Continue(self) -> bool: ...
    @property
    def DataTable(self) -> DataTable: ...
    @property
    def Errors(self) -> Exception: ...
    @property
    def Values(self) -> Set(Object): ...
    @Continue.setter
    def Continue(self, value: bool) -> None: ...
    @Errors.setter
    def Errors(self, value: Exception) -> None: ...


class FillErrorEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: FillErrorEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: FillErrorEventArgs) -> None: ...


class ForeignKeyConstraint(Constraint):
    @overload
    def __init__(self, parentColumn: DataColumn, childColumn: DataColumn): ...
    @overload
    def __init__(self, parentColumns: Set(DataColumn), childColumns: Set(DataColumn)): ...
    @overload
    def __init__(self, constraintName: str, parentColumn: DataColumn, childColumn: DataColumn): ...
    @overload
    def __init__(self, constraintName: str, parentColumns: Set(DataColumn), childColumns: Set(DataColumn)): ...
    @overload
    def __init__(self, constraintName: str, parentTableName: str, parentColumnNames: Set(str), childColumnNames: Set(str), acceptRejectRule: AcceptRejectRule, deleteRule: Rule, updateRule: Rule): ...
    @overload
    def __init__(self, constraintName: str, parentTableName: str, parentTableNamespace: str, parentColumnNames: Set(str), childColumnNames: Set(str), acceptRejectRule: AcceptRejectRule, deleteRule: Rule, updateRule: Rule): ...
    def Equals(self, key: Object) -> bool: ...
    @property
    def AcceptRejectRule(self) -> AcceptRejectRule: ...
    @property
    def Columns(self) -> Set(DataColumn): ...
    @property
    def DeleteRule(self) -> Rule: ...
    @property
    def RelatedColumns(self) -> Set(DataColumn): ...
    @property
    def RelatedTable(self) -> DataTable: ...
    @property
    def Table(self) -> DataTable: ...
    @property
    def UpdateRule(self) -> Rule: ...
    def GetHashCode(self) -> int: ...
    @AcceptRejectRule.setter
    def AcceptRejectRule(self, value: AcceptRejectRule) -> None: ...
    @DeleteRule.setter
    def DeleteRule(self, value: Rule) -> None: ...
    @UpdateRule.setter
    def UpdateRule(self, value: Rule) -> None: ...


class IColumnMapping:
    @property
    def DataSetColumn(self) -> str: ...
    @property
    def SourceColumn(self) -> str: ...
    @DataSetColumn.setter
    def DataSetColumn(self, value: str) -> None: ...
    @SourceColumn.setter
    def SourceColumn(self, value: str) -> None: ...


class IColumnMappingCollection:
    def Add(self, sourceColumnName: str, dataSetColumnName: str) -> IColumnMapping: ...
    def Contains(self, sourceColumnName: str) -> bool: ...
    @property
    def Item(self, index: str) -> Object: ...
    def GetByDataSetColumn(self, dataSetColumnName: str) -> IColumnMapping: ...
    def IndexOf(self, sourceColumnName: str) -> int: ...
    def RemoveAt(self, sourceColumnName: str) -> None: ...
    @Item.setter
    def Item(self, index: str, value: Object) -> None: ...


class IDataAdapter:
    def Fill(self, dataSet: DataSet) -> int: ...
    def FillSchema(self, dataSet: DataSet, schemaType: SchemaType) -> Set(DataTable): ...
    @property
    def MissingMappingAction(self) -> MissingMappingAction: ...
    @property
    def MissingSchemaAction(self) -> MissingSchemaAction: ...
    @property
    def TableMappings(self) -> ITableMappingCollection: ...
    def GetFillParameters(self) -> Set(IDataParameter): ...
    @MissingMappingAction.setter
    def MissingMappingAction(self, value: MissingMappingAction) -> None: ...
    @MissingSchemaAction.setter
    def MissingSchemaAction(self, value: MissingSchemaAction) -> None: ...
    def Update(self, dataSet: DataSet) -> int: ...


class IDataParameter:
    @property
    def DbType(self) -> DbType: ...
    @property
    def Direction(self) -> ParameterDirection: ...
    @property
    def IsNullable(self) -> bool: ...
    @property
    def ParameterName(self) -> str: ...
    @property
    def SourceColumn(self) -> str: ...
    @property
    def SourceVersion(self) -> DataRowVersion: ...
    @property
    def Value(self) -> Object: ...
    @DbType.setter
    def DbType(self, value: DbType) -> None: ...
    @Direction.setter
    def Direction(self, value: ParameterDirection) -> None: ...
    @ParameterName.setter
    def ParameterName(self, value: str) -> None: ...
    @SourceColumn.setter
    def SourceColumn(self, value: str) -> None: ...
    @SourceVersion.setter
    def SourceVersion(self, value: DataRowVersion) -> None: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class IDataParameterCollection:
    def Contains(self, parameterName: str) -> bool: ...
    @property
    def Item(self, parameterName: str) -> Object: ...
    def IndexOf(self, parameterName: str) -> int: ...
    def RemoveAt(self, parameterName: str) -> None: ...
    @Item.setter
    def Item(self, parameterName: str, value: Object) -> None: ...


class IDataReader:
    def Close(self) -> None: ...
    @property
    def Depth(self) -> int: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def RecordsAffected(self) -> int: ...
    def GetSchemaTable(self) -> DataTable: ...
    def NextResult(self) -> bool: ...
    def Read(self) -> bool: ...


class IDataRecord:
    @property
    def FieldCount(self) -> int: ...
    @property
    def Item(self, i: int) -> Object: ...
    @property
    def Item(self, name: str) -> Object: ...
    def GetBoolean(self, i: int) -> bool: ...
    def GetByte(self, i: int) -> Byte: ...
    def GetBytes(self, i: int, fieldOffset: Int64, buffer: Set(Byte), bufferoffset: int, length: int) -> Int64: ...
    def GetChar(self, i: int) -> Char: ...
    def GetChars(self, i: int, fieldoffset: Int64, buffer: Set(Char), bufferoffset: int, length: int) -> Int64: ...
    def GetData(self, i: int) -> IDataReader: ...
    def GetDataTypeName(self, i: int) -> str: ...
    def GetDateTime(self, i: int) -> DateTime: ...
    def GetDecimal(self, i: int) -> Decimal: ...
    def GetDouble(self, i: int) -> float: ...
    def GetFieldType(self, i: int) -> Type: ...
    def GetFloat(self, i: int) -> Single: ...
    def GetGuid(self, i: int) -> Guid: ...
    def GetInt16(self, i: int) -> Int16: ...
    def GetInt32(self, i: int) -> int: ...
    def GetInt64(self, i: int) -> Int64: ...
    def GetName(self, i: int) -> str: ...
    def GetOrdinal(self, name: str) -> int: ...
    def GetString(self, i: int) -> str: ...
    def GetValue(self, i: int) -> Object: ...
    def GetValues(self, values: Set(Object)) -> int: ...
    def IsDBNull(self, i: int) -> bool: ...


class IDbCommand:
    def Cancel(self) -> None: ...
    def CreateParameter(self) -> IDbDataParameter: ...
    def ExecuteNonQuery(self) -> int: ...
    @overload
    def ExecuteReader(self) -> IDataReader: ...
    @overload
    def ExecuteReader(self, behavior: CommandBehavior) -> IDataReader: ...
    def ExecuteScalar(self) -> Object: ...
    @property
    def CommandText(self) -> str: ...
    @property
    def CommandTimeout(self) -> int: ...
    @property
    def CommandType(self) -> CommandType: ...
    @property
    def Connection(self) -> IDbConnection: ...
    @property
    def Parameters(self) -> IDataParameterCollection: ...
    @property
    def Transaction(self) -> IDbTransaction: ...
    @property
    def UpdatedRowSource(self) -> UpdateRowSource: ...
    def Prepare(self) -> None: ...
    @CommandText.setter
    def CommandText(self, value: str) -> None: ...
    @CommandTimeout.setter
    def CommandTimeout(self, value: int) -> None: ...
    @CommandType.setter
    def CommandType(self, value: CommandType) -> None: ...
    @Connection.setter
    def Connection(self, value: IDbConnection) -> None: ...
    @Transaction.setter
    def Transaction(self, value: IDbTransaction) -> None: ...
    @UpdatedRowSource.setter
    def UpdatedRowSource(self, value: UpdateRowSource) -> None: ...


class IDbConnection:
    @overload
    def BeginTransaction(self) -> IDbTransaction: ...
    @overload
    def BeginTransaction(self, il: IsolationLevel) -> IDbTransaction: ...
    def ChangeDatabase(self, databaseName: str) -> None: ...
    def Close(self) -> None: ...
    def CreateCommand(self) -> IDbCommand: ...
    @property
    def ConnectionString(self) -> str: ...
    @property
    def ConnectionTimeout(self) -> int: ...
    @property
    def Database(self) -> str: ...
    @property
    def State(self) -> ConnectionState: ...
    def Open(self) -> None: ...
    @ConnectionString.setter
    def ConnectionString(self, value: str) -> None: ...


class IDbDataAdapter:
    @property
    def DeleteCommand(self) -> IDbCommand: ...
    @property
    def InsertCommand(self) -> IDbCommand: ...
    @property
    def SelectCommand(self) -> IDbCommand: ...
    @property
    def UpdateCommand(self) -> IDbCommand: ...
    @DeleteCommand.setter
    def DeleteCommand(self, value: IDbCommand) -> None: ...
    @InsertCommand.setter
    def InsertCommand(self, value: IDbCommand) -> None: ...
    @SelectCommand.setter
    def SelectCommand(self, value: IDbCommand) -> None: ...
    @UpdateCommand.setter
    def UpdateCommand(self, value: IDbCommand) -> None: ...


class IDbDataParameter:
    @property
    def Precision(self) -> Byte: ...
    @property
    def Scale(self) -> Byte: ...
    @property
    def Size(self) -> int: ...
    @Precision.setter
    def Precision(self, value: Byte) -> None: ...
    @Scale.setter
    def Scale(self, value: Byte) -> None: ...
    @Size.setter
    def Size(self, value: int) -> None: ...


class IDbTransaction:
    def Commit(self) -> None: ...
    @property
    def Connection(self) -> IDbConnection: ...
    @property
    def IsolationLevel(self) -> IsolationLevel: ...
    def Rollback(self) -> None: ...


class InRowChangingEventException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class InternalDataCollectionBase(Object):
    def __init__(self): ...
    def CopyTo(self, ar: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...


class InvalidConstraintException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class InvalidExpressionException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class IsolationLevel:
    Chaos = 16
    ReadUncommitted = 256
    ReadCommitted = 4096
    RepeatableRead = 65536
    Serializable = 1048576
    Snapshot = 16777216
    Unspecified = -1


class ITableMapping:
    @property
    def ColumnMappings(self) -> IColumnMappingCollection: ...
    @property
    def DataSetTable(self) -> str: ...
    @property
    def SourceTable(self) -> str: ...
    @DataSetTable.setter
    def DataSetTable(self, value: str) -> None: ...
    @SourceTable.setter
    def SourceTable(self, value: str) -> None: ...


class ITableMappingCollection:
    def Add(self, sourceTableName: str, dataSetTableName: str) -> ITableMapping: ...
    def Contains(self, sourceTableName: str) -> bool: ...
    @property
    def Item(self, index: str) -> Object: ...
    def GetByDataSetTable(self, dataSetTableName: str) -> ITableMapping: ...
    def IndexOf(self, sourceTableName: str) -> int: ...
    def RemoveAt(self, sourceTableName: str) -> None: ...
    @Item.setter
    def Item(self, index: str, value: Object) -> None: ...


class KeyRestrictionBehavior:
    AllowOnly = 0
    PreventUsage = 1


class LoadOption:
    OverwriteChanges = 1
    PreserveChanges = 2
    Upsert = 3


class MappingType:
    Element = 1
    Attribute = 2
    SimpleContent = 3
    Hidden = 4


class MergeFailedEventArgs(EventArgs):
    def __init__(self, table: DataTable, conflict: str): ...
    @property
    def Conflict(self) -> str: ...
    @property
    def Table(self) -> DataTable: ...


class MergeFailedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: MergeFailedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: MergeFailedEventArgs) -> None: ...


class MissingMappingAction:
    Passthrough = 1
    Ignore = 2
    Error = 3


class MissingPrimaryKeyException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class MissingSchemaAction:
    Add = 1
    Ignore = 2
    Error = 3
    AddWithKey = 4


class NoNullAllowedException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...




class ParameterDirection:
    Input = 1
    Output = 2
    InputOutput = 3
    ReturnValue = 6


class PropertyCollection(Hashtable):
    def __init__(self): ...
    def Clone(self) -> Object: ...


class ReadOnlyException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class RowNotInTableException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class Rule:
    #None = 0
    Cascade = 1
    SetNull = 2
    SetDefault = 3


class SchemaSerializationMode:
    IncludeSchema = 1
    ExcludeSchema = 2


class SchemaType:
    Source = 1
    Mapped = 2


class SerializationFormat:
    Xml = 0
    Binary = 1


class SqlDbType:
    BigInt = 0
    Binary = 1
    Bit = 2
    Char = 3
    DateTime = 4
    Decimal = 5
    Float = 6
    Image = 7
    Int = 8
    Money = 9
    NChar = 10
    NText = 11
    NVarChar = 12
    Real = 13
    UniqueIdentifier = 14
    SmallDateTime = 15
    SmallInt = 16
    SmallMoney = 17
    Text = 18
    Timestamp = 19
    TinyInt = 20
    VarBinary = 21
    VarChar = 22
    Variant = 23
    Xml = 25
    Udt = 29
    Structured = 30
    Date = 31
    Time = 32
    DateTime2 = 33
    DateTimeOffset = 34


class StateChangeEventArgs(EventArgs):
    def __init__(self, originalState: ConnectionState, currentState: ConnectionState): ...
    @property
    def CurrentState(self) -> ConnectionState: ...
    @property
    def OriginalState(self) -> ConnectionState: ...


class StateChangeEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: StateChangeEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: StateChangeEventArgs) -> None: ...


class StatementCompletedEventArgs(EventArgs):
    def __init__(self, recordCount: int): ...
    @property
    def RecordCount(self) -> int: ...


class StatementCompletedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: StatementCompletedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: StatementCompletedEventArgs) -> None: ...


class StatementType:
    Select = 0
    Insert = 1
    Update = 2
    Delete = 3
    Batch = 4


class StrongTypingException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, s: str, innerException: Exception): ...


class SyntaxErrorException(InvalidExpressionException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...




class TypedTableBaseExtensions(Object):
    def AsEnumerable(source: TypedTableBase) -> EnumerableRowCollection: ...
    def ElementAtOrDefault(source: TypedTableBase, index: int) -> TRow: ...
    @overload
    def OrderBy(source: TypedTableBase, keySelector: Func) -> OrderedEnumerableRowCollection: ...
    @overload
    def OrderBy(source: TypedTableBase, keySelector: Func, comparer: IComparer) -> OrderedEnumerableRowCollection: ...
    @overload
    def OrderByDescending(source: TypedTableBase, keySelector: Func) -> OrderedEnumerableRowCollection: ...
    @overload
    def OrderByDescending(source: TypedTableBase, keySelector: Func, comparer: IComparer) -> OrderedEnumerableRowCollection: ...
    def Select(source: TypedTableBase, selector: Func) -> EnumerableRowCollection: ...
    def Where(source: TypedTableBase, predicate: Func) -> EnumerableRowCollection: ...


class UniqueConstraint(Constraint):
    @overload
    def __init__(self, column: DataColumn): ...
    @overload
    def __init__(self, columns: Set(DataColumn)): ...
    @overload
    def __init__(self, name: str, column: DataColumn): ...
    @overload
    def __init__(self, name: str, columns: Set(DataColumn)): ...
    @overload
    def __init__(self, column: DataColumn, isPrimaryKey: bool): ...
    @overload
    def __init__(self, columns: Set(DataColumn), isPrimaryKey: bool): ...
    @overload
    def __init__(self, name: str, columnNames: Set(str), isPrimaryKey: bool): ...
    @overload
    def __init__(self, name: str, column: DataColumn, isPrimaryKey: bool): ...
    @overload
    def __init__(self, name: str, columns: Set(DataColumn), isPrimaryKey: bool): ...
    def Equals(self, key2: Object) -> bool: ...
    @property
    def Columns(self) -> Set(DataColumn): ...
    @property
    def IsPrimaryKey(self) -> bool: ...
    @property
    def Table(self) -> DataTable: ...
    def GetHashCode(self) -> int: ...


class UpdateRowSource:
    #None = 0
    OutputParameters = 1
    FirstReturnedRecord = 2
    Both = 3


class UpdateStatus:
    Continue = 0
    ErrorsOccurred = 1
    SkipCurrentRow = 2
    SkipAllRemainingRows = 3


class VersionNotFoundException(DataException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, s: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class XmlReadMode:
    Auto = 0
    ReadSchema = 1
    IgnoreSchema = 2
    InferSchema = 3
    DiffGram = 4
    Fragment = 5
    InferTypedSchema = 6


class XmlWriteMode:
    WriteSchema = 0
    IgnoreSchema = 1
    DiffGram = 2
