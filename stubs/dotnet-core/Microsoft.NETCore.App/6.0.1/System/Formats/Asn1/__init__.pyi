from typing import Tuple, Set, Iterable, List


class Asn1Tag(ValueType):
    @overload
    def __init__(self, universalTagNumber: UniversalTagNumber, isConstructed: bool): ...
    @overload
    def __init__(self, tagClass: TagClass, tagValue: int, isConstructed: bool): ...
    def AsConstructed(self) -> Asn1Tag: ...
    def AsPrimitive(self) -> Asn1Tag: ...
    def CalculateEncodedSize(self) -> int: ...
    def Decode(source: ReadOnlySpan) -> Tuple[Asn1Tag, int]: ...
    def Encode(self, destination: Span) -> int: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Asn1Tag) -> bool: ...
    @property
    def IsConstructed(self) -> bool: ...
    @property
    def TagClass(self) -> TagClass: ...
    @property
    def TagValue(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def HasSameClassAndValue(self, other: Asn1Tag) -> bool: ...
    def op_Equality(left: Asn1Tag, right: Asn1Tag) -> bool: ...
    def op_Inequality(left: Asn1Tag, right: Asn1Tag) -> bool: ...
    def ToString(self) -> str: ...
    def TryDecode(source: ReadOnlySpan) -> Tuple[bool, Asn1Tag, int]: ...
    def TryEncode(self, destination: Span) -> Tuple[bool, int]: ...


class AsnContentException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class AsnDecoder(Object):
    def ReadBitString(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[Set(Byte), int, int]: ...
    def ReadBoolean(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[bool, int]: ...
    def ReadCharacterString(source: ReadOnlySpan, ruleSet: AsnEncodingRules, encodingType: UniversalTagNumber, expectedTag: Nullable) -> Tuple[str, int]: ...
    def ReadEncodedValue(source: ReadOnlySpan, ruleSet: AsnEncodingRules) -> Tuple[Asn1Tag, int, int, int]: ...
    def ReadEnumeratedBytes(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[ReadOnlySpan, int]: ...
    @overload
    def ReadEnumeratedValue(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[TEnum, int]: ...
    @overload
    def ReadEnumeratedValue(source: ReadOnlySpan, ruleSet: AsnEncodingRules, enumType: Type, expectedTag: Nullable) -> Tuple[Enum, int]: ...
    def ReadGeneralizedTime(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[DateTimeOffset, int]: ...
    def ReadInteger(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[BigInteger, int]: ...
    def ReadIntegerBytes(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[ReadOnlySpan, int]: ...
    def ReadNamedBitList(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[BitArray, int]: ...
    @overload
    def ReadNamedBitListValue(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[TFlagsEnum, int]: ...
    @overload
    def ReadNamedBitListValue(source: ReadOnlySpan, ruleSet: AsnEncodingRules, flagsEnumType: Type, expectedTag: Nullable) -> Tuple[Enum, int]: ...
    def ReadNull(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[int]: ...
    def ReadObjectIdentifier(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[str, int]: ...
    def ReadOctetString(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[Set(Byte), int]: ...
    def ReadSequence(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[int, int, int]: ...
    def ReadSetOf(source: ReadOnlySpan, ruleSet: AsnEncodingRules, skipSortOrderValidation: bool, expectedTag: Nullable) -> Tuple[int, int, int]: ...
    def ReadUtcTime(source: ReadOnlySpan, ruleSet: AsnEncodingRules, twoDigitYearMax: int, expectedTag: Nullable) -> Tuple[DateTimeOffset, int]: ...
    def TryReadBitString(source: ReadOnlySpan, destination: Span, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[bool, int, int, int]: ...
    def TryReadCharacterString(source: ReadOnlySpan, destination: Span, ruleSet: AsnEncodingRules, encodingType: UniversalTagNumber, expectedTag: Nullable) -> Tuple[bool, int, int]: ...
    def TryReadCharacterStringBytes(source: ReadOnlySpan, destination: Span, ruleSet: AsnEncodingRules, expectedTag: Asn1Tag) -> Tuple[bool, int, int]: ...
    def TryReadEncodedValue(source: ReadOnlySpan, ruleSet: AsnEncodingRules) -> Tuple[bool, Asn1Tag, int, int, int]: ...
    def TryReadInt32(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[bool, int, int]: ...
    def TryReadInt64(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[bool, Int64, int]: ...
    def TryReadOctetString(source: ReadOnlySpan, destination: Span, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[bool, int, int]: ...
    def TryReadPrimitiveBitString(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[bool, int, ReadOnlySpan, int]: ...
    def TryReadPrimitiveCharacterStringBytes(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Asn1Tag) -> Tuple[bool, ReadOnlySpan, int]: ...
    def TryReadPrimitiveOctetString(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[bool, ReadOnlySpan, int]: ...
    def TryReadUInt32(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[bool, UInt32, int]: ...
    def TryReadUInt64(source: ReadOnlySpan, ruleSet: AsnEncodingRules, expectedTag: Nullable) -> Tuple[bool, UInt64, int]: ...


class AsnEncodingRules:
    BER = 0
    CER = 1
    DER = 2


class AsnReader(Object):
    def __init__(self, data: ReadOnlyMemory, ruleSet: AsnEncodingRules, options: AsnReaderOptions): ...
    @property
    def HasData(self) -> bool: ...
    @property
    def RuleSet(self) -> AsnEncodingRules: ...
    def PeekContentBytes(self) -> ReadOnlyMemory: ...
    def PeekEncodedValue(self) -> ReadOnlyMemory: ...
    def PeekTag(self) -> Asn1Tag: ...
    def ReadBitString(self, expectedTag: Nullable) -> Tuple[Set(Byte), int]: ...
    def ReadBoolean(self, expectedTag: Nullable) -> bool: ...
    def ReadCharacterString(self, encodingType: UniversalTagNumber, expectedTag: Nullable) -> str: ...
    def ReadEncodedValue(self) -> ReadOnlyMemory: ...
    def ReadEnumeratedBytes(self, expectedTag: Nullable) -> ReadOnlyMemory: ...
    @overload
    def ReadEnumeratedValue(self, expectedTag: Nullable) -> TEnum: ...
    @overload
    def ReadEnumeratedValue(self, enumType: Type, expectedTag: Nullable) -> Enum: ...
    def ReadGeneralizedTime(self, expectedTag: Nullable) -> DateTimeOffset: ...
    def ReadInteger(self, expectedTag: Nullable) -> BigInteger: ...
    def ReadIntegerBytes(self, expectedTag: Nullable) -> ReadOnlyMemory: ...
    def ReadNamedBitList(self, expectedTag: Nullable) -> BitArray: ...
    @overload
    def ReadNamedBitListValue(self, expectedTag: Nullable) -> TFlagsEnum: ...
    @overload
    def ReadNamedBitListValue(self, flagsEnumType: Type, expectedTag: Nullable) -> Enum: ...
    def ReadNull(self, expectedTag: Nullable) -> None: ...
    def ReadObjectIdentifier(self, expectedTag: Nullable) -> str: ...
    def ReadOctetString(self, expectedTag: Nullable) -> Set(Byte): ...
    def ReadSequence(self, expectedTag: Nullable) -> AsnReader: ...
    @overload
    def ReadSetOf(self, expectedTag: Nullable) -> AsnReader: ...
    @overload
    def ReadSetOf(self, skipSortOrderValidation: bool, expectedTag: Nullable) -> AsnReader: ...
    @overload
    def ReadUtcTime(self, expectedTag: Nullable) -> DateTimeOffset: ...
    @overload
    def ReadUtcTime(self, twoDigitYearMax: int, expectedTag: Nullable) -> DateTimeOffset: ...
    def ThrowIfNotEmpty(self) -> None: ...
    def TryReadBitString(self, destination: Span, expectedTag: Nullable) -> Tuple[bool, int, int]: ...
    def TryReadCharacterString(self, destination: Span, encodingType: UniversalTagNumber, expectedTag: Nullable) -> Tuple[bool, int]: ...
    def TryReadCharacterStringBytes(self, destination: Span, expectedTag: Asn1Tag) -> Tuple[bool, int]: ...
    def TryReadInt32(self, expectedTag: Nullable) -> Tuple[bool, int]: ...
    def TryReadInt64(self, expectedTag: Nullable) -> Tuple[bool, Int64]: ...
    def TryReadOctetString(self, destination: Span, expectedTag: Nullable) -> Tuple[bool, int]: ...
    def TryReadPrimitiveBitString(self, expectedTag: Nullable) -> Tuple[bool, int, ReadOnlyMemory]: ...
    def TryReadPrimitiveCharacterStringBytes(self, expectedTag: Asn1Tag) -> Tuple[bool, ReadOnlyMemory]: ...
    def TryReadPrimitiveOctetString(self, expectedTag: Nullable) -> Tuple[bool, ReadOnlyMemory]: ...
    def TryReadUInt32(self, expectedTag: Nullable) -> Tuple[bool, UInt32]: ...
    def TryReadUInt64(self, expectedTag: Nullable) -> Tuple[bool, UInt64]: ...


class AsnReaderOptions(ValueType):
    @property
    def SkipSetSortOrderVerification(self) -> bool: ...
    @property
    def UtcTimeTwoDigitYearMax(self) -> int: ...
    @SkipSetSortOrderVerification.setter
    def SkipSetSortOrderVerification(self, value: bool) -> None: ...
    @UtcTimeTwoDigitYearMax.setter
    def UtcTimeTwoDigitYearMax(self, value: int) -> None: ...


class AsnWriter(Object):
    def __init__(self, ruleSet: AsnEncodingRules): ...
    def CopyTo(self, destination: AsnWriter) -> None: ...
    @overload
    def Encode(self) -> Set(Byte): ...
    @overload
    def Encode(self, destination: Span) -> int: ...
    @overload
    def EncodedValueEquals(self, other: ReadOnlySpan) -> bool: ...
    @overload
    def EncodedValueEquals(self, other: AsnWriter) -> bool: ...
    @property
    def RuleSet(self) -> AsnEncodingRules: ...
    def GetEncodedLength(self) -> int: ...
    def PopOctetString(self, tag: Nullable) -> None: ...
    def PopSequence(self, tag: Nullable) -> None: ...
    def PopSetOf(self, tag: Nullable) -> None: ...
    def PushOctetString(self, tag: Nullable) -> Scope: ...
    def PushSequence(self, tag: Nullable) -> Scope: ...
    def PushSetOf(self, tag: Nullable) -> Scope: ...
    def Reset(self) -> None: ...
    def TryEncode(self, destination: Span) -> Tuple[bool, int]: ...
    def WriteBitString(self, value: ReadOnlySpan, unusedBitCount: int, tag: Nullable) -> None: ...
    def WriteBoolean(self, value: bool, tag: Nullable) -> None: ...
    @overload
    def WriteCharacterString(self, encodingType: UniversalTagNumber, str: ReadOnlySpan, tag: Nullable) -> None: ...
    @overload
    def WriteCharacterString(self, encodingType: UniversalTagNumber, value: str, tag: Nullable) -> None: ...
    def WriteEncodedValue(self, value: ReadOnlySpan) -> None: ...
    @overload
    def WriteEnumeratedValue(self, value: Enum, tag: Nullable) -> None: ...
    @overload
    def WriteEnumeratedValue(self, value: TEnum, tag: Nullable) -> None: ...
    def WriteGeneralizedTime(self, value: DateTimeOffset, omitFractionalSeconds: bool, tag: Nullable) -> None: ...
    @overload
    def WriteInteger(self, value: UInt64, tag: Nullable) -> None: ...
    @overload
    def WriteInteger(self, value: Int64, tag: Nullable) -> None: ...
    @overload
    def WriteInteger(self, value: ReadOnlySpan, tag: Nullable) -> None: ...
    @overload
    def WriteInteger(self, value: BigInteger, tag: Nullable) -> None: ...
    def WriteIntegerUnsigned(self, value: ReadOnlySpan, tag: Nullable) -> None: ...
    @overload
    def WriteNamedBitList(self, value: BitArray, tag: Nullable) -> None: ...
    @overload
    def WriteNamedBitList(self, value: TEnum, tag: Nullable) -> None: ...
    @overload
    def WriteNamedBitList(self, value: Enum, tag: Nullable) -> None: ...
    def WriteNull(self, tag: Nullable) -> None: ...
    @overload
    def WriteObjectIdentifier(self, oidValue: ReadOnlySpan, tag: Nullable) -> None: ...
    @overload
    def WriteObjectIdentifier(self, oidValue: str, tag: Nullable) -> None: ...
    def WriteOctetString(self, value: ReadOnlySpan, tag: Nullable) -> None: ...
    @overload
    def WriteUtcTime(self, value: DateTimeOffset, tag: Nullable) -> None: ...
    @overload
    def WriteUtcTime(self, value: DateTimeOffset, twoDigitYearMax: int, tag: Nullable) -> None: ...


class Scope(ValueType):
    def Dispose(self) -> None: ...


class TagClass:
    Universal = 0
    Application = 64
    ContextSpecific = 128
    Private = 192


class UniversalTagNumber:
    EndOfContents = 0
    Boolean = 1
    Integer = 2
    BitString = 3
    OctetString = 4
    Null = 5
    ObjectIdentifier = 6
    ObjectDescriptor = 7
    External = 8
    InstanceOf = 8
    Real = 9
    Enumerated = 10
    Embedded = 11
    UTF8String = 12
    RelativeObjectIdentifier = 13
    Time = 14
    Sequence = 16
    SequenceOf = 16
    Set = 17
    SetOf = 17
    NumericString = 18
    PrintableString = 19
    TeletexString = 20
    T61String = 20
    VideotexString = 21
    IA5String = 22
    UtcTime = 23
    GeneralizedTime = 24
    GraphicString = 25
    VisibleString = 26
    ISO646String = 26
    GeneralString = 27
    UniversalString = 28
    UnrestrictedCharacterString = 29
    BMPString = 30
    Date = 31
    TimeOfDay = 32
    DateTime = 33
    Duration = 34
    ObjectIdentifierIRI = 35
    RelativeObjectIdentifierIRI = 36
