__all__ = ['Ecma335']
from typing import Tuple, Set, Iterable, List


class ArrayShape(ValueType):
    def __init__(self, rank: int, sizes: ImmutableArray, lowerBounds: ImmutableArray): ...
    @property
    def LowerBounds(self) -> ImmutableArray: ...
    @property
    def Rank(self) -> int: ...
    @property
    def Sizes(self) -> ImmutableArray: ...


class AssemblyDefinition(ValueType):
    @property
    def Culture(self) -> StringHandle: ...
    @property
    def Flags(self) -> AssemblyFlags: ...
    @property
    def HashAlgorithm(self) -> AssemblyHashAlgorithm: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def PublicKey(self) -> BlobHandle: ...
    @property
    def Version(self) -> Version: ...
    def GetAssemblyName(self) -> AssemblyName: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...
    def GetDeclarativeSecurityAttributes(self) -> DeclarativeSecurityAttributeHandleCollection: ...


class AssemblyDefinitionHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: AssemblyDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: AssemblyDefinitionHandle, right: AssemblyDefinitionHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> AssemblyDefinitionHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> AssemblyDefinitionHandle: ...
    @overload
    def op_Implicit(handle: AssemblyDefinitionHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: AssemblyDefinitionHandle) -> EntityHandle: ...
    def op_Inequality(left: AssemblyDefinitionHandle, right: AssemblyDefinitionHandle) -> bool: ...


class AssemblyFile(ValueType):
    @property
    def ContainsMetadata(self) -> bool: ...
    @property
    def HashValue(self) -> BlobHandle: ...
    @property
    def Name(self) -> StringHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class AssemblyFileHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: AssemblyFileHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: AssemblyFileHandle, right: AssemblyFileHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> AssemblyFileHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> AssemblyFileHandle: ...
    @overload
    def op_Implicit(handle: AssemblyFileHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: AssemblyFileHandle) -> EntityHandle: ...
    def op_Inequality(left: AssemblyFileHandle, right: AssemblyFileHandle) -> bool: ...


class AssemblyFileHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class AssemblyReference(ValueType):
    @property
    def Culture(self) -> StringHandle: ...
    @property
    def Flags(self) -> AssemblyFlags: ...
    @property
    def HashValue(self) -> BlobHandle: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def PublicKeyOrToken(self) -> BlobHandle: ...
    @property
    def Version(self) -> Version: ...
    def GetAssemblyName(self) -> AssemblyName: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class AssemblyReferenceHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: AssemblyReferenceHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: AssemblyReferenceHandle, right: AssemblyReferenceHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> AssemblyReferenceHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> AssemblyReferenceHandle: ...
    @overload
    def op_Implicit(handle: AssemblyReferenceHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: AssemblyReferenceHandle) -> EntityHandle: ...
    def op_Inequality(left: AssemblyReferenceHandle, right: AssemblyReferenceHandle) -> bool: ...


class AssemblyReferenceHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class Blob(ValueType):
    @property
    def IsDefault(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    def GetBytes(self) -> ArraySegment: ...


class BlobBuilder(Object):
    def __init__(self, capacity: int): ...
    def Align(self, alignment: int) -> None: ...
    def Clear(self) -> None: ...
    def ContentEquals(self, other: BlobBuilder) -> bool: ...
    @property
    def Count(self) -> int: ...
    def GetBlobs(self) -> Blobs: ...
    def LinkPrefix(self, prefix: BlobBuilder) -> None: ...
    def LinkSuffix(self, suffix: BlobBuilder) -> None: ...
    def PadTo(self, position: int) -> None: ...
    def ReserveBytes(self, byteCount: int) -> Blob: ...
    @overload
    def ToArray(self) -> Set(Byte): ...
    @overload
    def ToArray(self, start: int, byteCount: int) -> Set(Byte): ...
    @overload
    def ToImmutableArray(self) -> ImmutableArray: ...
    @overload
    def ToImmutableArray(self, start: int, byteCount: int) -> ImmutableArray: ...
    def TryWriteBytes(self, source: Stream, byteCount: int) -> int: ...
    def WriteBoolean(self, value: bool) -> None: ...
    def WriteByte(self, value: Byte) -> None: ...
    @overload
    def WriteBytes(self, buffer: Set(Byte)) -> None: ...
    @overload
    def WriteBytes(self, buffer: ImmutableArray) -> None: ...
    @overload
    def WriteBytes(self, value: Byte, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, buffer: Byte, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, buffer: Set(Byte), start: int, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, buffer: ImmutableArray, start: int, byteCount: int) -> None: ...
    def WriteCompressedInteger(self, value: int) -> None: ...
    def WriteCompressedSignedInteger(self, value: int) -> None: ...
    def WriteConstant(self, value: Object) -> None: ...
    @overload
    def WriteContentTo(self, destination: BlobBuilder) -> None: ...
    @overload
    def WriteContentTo(self, destination: BlobWriter) -> Tuple[BlobWriter]: ...
    @overload
    def WriteContentTo(self, destination: Stream) -> None: ...
    def WriteDateTime(self, value: DateTime) -> None: ...
    def WriteDecimal(self, value: Decimal) -> None: ...
    def WriteDouble(self, value: float) -> None: ...
    def WriteGuid(self, value: Guid) -> None: ...
    def WriteInt16(self, value: Int16) -> None: ...
    def WriteInt16BE(self, value: Int16) -> None: ...
    def WriteInt32(self, value: int) -> None: ...
    def WriteInt32BE(self, value: int) -> None: ...
    def WriteInt64(self, value: Int64) -> None: ...
    def WriteReference(self, reference: int, isSmall: bool) -> None: ...
    def WriteSByte(self, value: SByte) -> None: ...
    def WriteSerializedString(self, value: str) -> None: ...
    def WriteSingle(self, value: Single) -> None: ...
    def WriteUInt16(self, value: UInt16) -> None: ...
    def WriteUInt16BE(self, value: UInt16) -> None: ...
    def WriteUInt32(self, value: UInt32) -> None: ...
    def WriteUInt32BE(self, value: UInt32) -> None: ...
    def WriteUInt64(self, value: UInt64) -> None: ...
    def WriteUserString(self, value: str) -> None: ...
    @overload
    def WriteUTF16(self, value: Set(Char)) -> None: ...
    @overload
    def WriteUTF16(self, value: str) -> None: ...
    def WriteUTF8(self, value: str, allowUnpairedSurrogates: bool) -> None: ...


class BlobContentId(ValueType):
    @overload
    def __init__(self, id: ImmutableArray): ...
    @overload
    def __init__(self, id: Set(Byte)): ...
    @overload
    def __init__(self, guid: Guid, stamp: UInt32): ...
    @overload
    def Equals(self, other: BlobContentId) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FromHash(hashCode: ImmutableArray) -> BlobContentId: ...
    @overload
    def FromHash(hashCode: Set(Byte)) -> BlobContentId: ...
    @property
    def Guid(self) -> Guid: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def Stamp(self) -> UInt32: ...
    def GetHashCode(self) -> int: ...
    def GetTimeBasedProvider() -> Func: ...
    def op_Equality(left: BlobContentId, right: BlobContentId) -> bool: ...
    def op_Inequality(left: BlobContentId, right: BlobContentId) -> bool: ...


class BlobHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: BlobHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: BlobHandle, right: BlobHandle) -> bool: ...
    def op_Explicit(handle: Handle) -> BlobHandle: ...
    def op_Implicit(handle: BlobHandle) -> Handle: ...
    def op_Inequality(left: BlobHandle, right: BlobHandle) -> bool: ...


class BlobReader(ValueType):
    def __init__(self, buffer: Byte, length: int): ...
    def Align(self, alignment: Byte) -> None: ...
    @property
    def CurrentPointer(self) -> Byte: ...
    @property
    def Length(self) -> int: ...
    @property
    def Offset(self) -> int: ...
    @property
    def RemainingBytes(self) -> int: ...
    @property
    def StartPointer(self) -> Byte: ...
    def IndexOf(self, value: Byte) -> int: ...
    def ReadBlobHandle(self) -> BlobHandle: ...
    def ReadBoolean(self) -> bool: ...
    def ReadByte(self) -> Byte: ...
    @overload
    def ReadBytes(self, byteCount: int) -> Set(Byte): ...
    @overload
    def ReadBytes(self, byteCount: int, buffer: Set(Byte), bufferOffset: int) -> None: ...
    def ReadChar(self) -> Char: ...
    def ReadCompressedInteger(self) -> int: ...
    def ReadCompressedSignedInteger(self) -> int: ...
    def ReadConstant(self, typeCode: ConstantTypeCode) -> Object: ...
    def ReadDateTime(self) -> DateTime: ...
    def ReadDecimal(self) -> Decimal: ...
    def ReadDouble(self) -> float: ...
    def ReadGuid(self) -> Guid: ...
    def ReadInt16(self) -> Int16: ...
    def ReadInt32(self) -> int: ...
    def ReadInt64(self) -> Int64: ...
    def ReadSByte(self) -> SByte: ...
    def ReadSerializationTypeCode(self) -> SerializationTypeCode: ...
    def ReadSerializedString(self) -> str: ...
    def ReadSignatureHeader(self) -> SignatureHeader: ...
    def ReadSignatureTypeCode(self) -> SignatureTypeCode: ...
    def ReadSingle(self) -> Single: ...
    def ReadTypeHandle(self) -> EntityHandle: ...
    def ReadUInt16(self) -> UInt16: ...
    def ReadUInt32(self) -> UInt32: ...
    def ReadUInt64(self) -> UInt64: ...
    def ReadUTF16(self, byteCount: int) -> str: ...
    def ReadUTF8(self, byteCount: int) -> str: ...
    def Reset(self) -> None: ...
    @Offset.setter
    def Offset(self, value: int) -> None: ...
    def TryReadCompressedInteger(self) -> Tuple[bool, int]: ...
    def TryReadCompressedSignedInteger(self) -> Tuple[bool, int]: ...


class Blobs(ValueType):
    @property
    def Current(self) -> Blob: ...
    def GetEnumerator(self) -> Blobs: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class BlobWriter(ValueType):
    @overload
    def __init__(self, size: int): ...
    @overload
    def __init__(self, buffer: Set(Byte)): ...
    @overload
    def __init__(self, blob: Blob): ...
    @overload
    def __init__(self, buffer: Set(Byte), start: int, count: int): ...
    def Align(self, alignment: int) -> None: ...
    def Clear(self) -> None: ...
    def ContentEquals(self, other: BlobWriter) -> bool: ...
    @property
    def Blob(self) -> Blob: ...
    @property
    def Length(self) -> int: ...
    @property
    def Offset(self) -> int: ...
    @property
    def RemainingBytes(self) -> int: ...
    def PadTo(self, offset: int) -> None: ...
    @Offset.setter
    def Offset(self, value: int) -> None: ...
    @overload
    def ToArray(self) -> Set(Byte): ...
    @overload
    def ToArray(self, start: int, byteCount: int) -> Set(Byte): ...
    @overload
    def ToImmutableArray(self) -> ImmutableArray: ...
    @overload
    def ToImmutableArray(self, start: int, byteCount: int) -> ImmutableArray: ...
    def WriteBoolean(self, value: bool) -> None: ...
    def WriteByte(self, value: Byte) -> None: ...
    @overload
    def WriteBytes(self, source: BlobBuilder) -> None: ...
    @overload
    def WriteBytes(self, buffer: ImmutableArray) -> None: ...
    @overload
    def WriteBytes(self, buffer: Set(Byte)) -> None: ...
    @overload
    def WriteBytes(self, value: Byte, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, source: Stream, byteCount: int) -> int: ...
    @overload
    def WriteBytes(self, buffer: Byte, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, buffer: Set(Byte), start: int, byteCount: int) -> None: ...
    @overload
    def WriteBytes(self, buffer: ImmutableArray, start: int, byteCount: int) -> None: ...
    def WriteCompressedInteger(self, value: int) -> None: ...
    def WriteCompressedSignedInteger(self, value: int) -> None: ...
    def WriteConstant(self, value: Object) -> None: ...
    def WriteDateTime(self, value: DateTime) -> None: ...
    def WriteDecimal(self, value: Decimal) -> None: ...
    def WriteDouble(self, value: float) -> None: ...
    def WriteGuid(self, value: Guid) -> None: ...
    def WriteInt16(self, value: Int16) -> None: ...
    def WriteInt16BE(self, value: Int16) -> None: ...
    def WriteInt32(self, value: int) -> None: ...
    def WriteInt32BE(self, value: int) -> None: ...
    def WriteInt64(self, value: Int64) -> None: ...
    def WriteReference(self, reference: int, isSmall: bool) -> None: ...
    def WriteSByte(self, value: SByte) -> None: ...
    def WriteSerializedString(self, str: str) -> None: ...
    def WriteSingle(self, value: Single) -> None: ...
    def WriteUInt16(self, value: UInt16) -> None: ...
    def WriteUInt16BE(self, value: UInt16) -> None: ...
    def WriteUInt32(self, value: UInt32) -> None: ...
    def WriteUInt32BE(self, value: UInt32) -> None: ...
    def WriteUInt64(self, value: UInt64) -> None: ...
    def WriteUserString(self, value: str) -> None: ...
    @overload
    def WriteUTF16(self, value: str) -> None: ...
    @overload
    def WriteUTF16(self, value: Set(Char)) -> None: ...
    def WriteUTF8(self, value: str, allowUnpairedSurrogates: bool) -> None: ...


class ChildrenEnumerator(ValueType):
    @property
    def Current(self) -> LocalScopeHandle: ...
    def MoveNext(self) -> bool: ...


class Constant(ValueType):
    @property
    def Parent(self) -> EntityHandle: ...
    @property
    def TypeCode(self) -> ConstantTypeCode: ...
    @property
    def Value(self) -> BlobHandle: ...


class ConstantHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ConstantHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: ConstantHandle, right: ConstantHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> ConstantHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> ConstantHandle: ...
    @overload
    def op_Implicit(handle: ConstantHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: ConstantHandle) -> EntityHandle: ...
    def op_Inequality(left: ConstantHandle, right: ConstantHandle) -> bool: ...


class ConstantTypeCode:
    Invalid = 0
    Boolean = 2
    Char = 3
    SByte = 4
    Byte = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Single = 12
    Double = 13
    String = 14
    NullReference = 18


class CustomAttribute(ValueType):
    def DecodeValue(self, provider: ICustomAttributeTypeProvider) -> CustomAttributeValue: ...
    @property
    def Constructor(self) -> EntityHandle: ...
    @property
    def Parent(self) -> EntityHandle: ...
    @property
    def Value(self) -> BlobHandle: ...


class CustomAttributeHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: CustomAttributeHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: CustomAttributeHandle, right: CustomAttributeHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> CustomAttributeHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> CustomAttributeHandle: ...
    @overload
    def op_Implicit(handle: CustomAttributeHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: CustomAttributeHandle) -> EntityHandle: ...
    def op_Inequality(left: CustomAttributeHandle, right: CustomAttributeHandle) -> bool: ...


class CustomAttributeHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...




class CustomAttributeNamedArgumentKind:
    Field = 83
    Property = 84






class CustomDebugInformation(ValueType):
    @property
    def Kind(self) -> GuidHandle: ...
    @property
    def Parent(self) -> EntityHandle: ...
    @property
    def Value(self) -> BlobHandle: ...


class CustomDebugInformationHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: CustomDebugInformationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: CustomDebugInformationHandle, right: CustomDebugInformationHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> CustomDebugInformationHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> CustomDebugInformationHandle: ...
    @overload
    def op_Implicit(handle: CustomDebugInformationHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: CustomDebugInformationHandle) -> EntityHandle: ...
    def op_Inequality(left: CustomDebugInformationHandle, right: CustomDebugInformationHandle) -> bool: ...


class CustomDebugInformationHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class DebugMetadataHeader(Object):
    @property
    def EntryPoint(self) -> MethodDefinitionHandle: ...
    @property
    def Id(self) -> ImmutableArray: ...
    @property
    def IdStartOffset(self) -> int: ...


class DeclarativeSecurityAttribute(ValueType):
    @property
    def Action(self) -> DeclarativeSecurityAction: ...
    @property
    def Parent(self) -> EntityHandle: ...
    @property
    def PermissionSet(self) -> BlobHandle: ...


class DeclarativeSecurityAttributeHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: DeclarativeSecurityAttributeHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: DeclarativeSecurityAttributeHandle, right: DeclarativeSecurityAttributeHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> DeclarativeSecurityAttributeHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> DeclarativeSecurityAttributeHandle: ...
    @overload
    def op_Implicit(handle: DeclarativeSecurityAttributeHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: DeclarativeSecurityAttributeHandle) -> EntityHandle: ...
    def op_Inequality(left: DeclarativeSecurityAttributeHandle, right: DeclarativeSecurityAttributeHandle) -> bool: ...


class DeclarativeSecurityAttributeHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class Document(ValueType):
    @property
    def Hash(self) -> BlobHandle: ...
    @property
    def HashAlgorithm(self) -> GuidHandle: ...
    @property
    def Language(self) -> GuidHandle: ...
    @property
    def Name(self) -> DocumentNameBlobHandle: ...


class DocumentHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: DocumentHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: DocumentHandle, right: DocumentHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> DocumentHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> DocumentHandle: ...
    @overload
    def op_Implicit(handle: DocumentHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: DocumentHandle) -> EntityHandle: ...
    def op_Inequality(left: DocumentHandle, right: DocumentHandle) -> bool: ...


class DocumentHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class DocumentNameBlobHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: DocumentNameBlobHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: DocumentNameBlobHandle, right: DocumentNameBlobHandle) -> bool: ...
    def op_Explicit(handle: BlobHandle) -> DocumentNameBlobHandle: ...
    def op_Implicit(handle: DocumentNameBlobHandle) -> BlobHandle: ...
    def op_Inequality(left: DocumentNameBlobHandle, right: DocumentNameBlobHandle) -> bool: ...


class EntityHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: EntityHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @property
    def Kind(self) -> HandleKind: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: EntityHandle, right: EntityHandle) -> bool: ...
    def op_Explicit(handle: Handle) -> EntityHandle: ...
    def op_Implicit(handle: EntityHandle) -> Handle: ...
    def op_Inequality(left: EntityHandle, right: EntityHandle) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> MemberReferenceHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> MethodDefinitionHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> GenericParameterConstraintHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> GenericParameterHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> FieldDefinitionHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> PropertyDefinitionHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> EventDefinitionHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> AssemblyFileHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> MethodImplementationHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> ParameterHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> ManifestResourceHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> CustomAttributeHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> InterfaceImplementationHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> AssemblyReferenceHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> TypeDefinitionHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> ImportDefinition: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> TypeReferenceHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> LocalVariableHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> LocalConstantHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> LocalScopeHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> ExportedTypeHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> MethodDebugInformationHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> SequencePoint: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> DocumentHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> DeclarativeSecurityAttributeHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> ImportScopeHandle: ...
    def MoveNext(self) -> bool: ...


class Enumerator(ValueType):
    @property
    def Current(self) -> CustomDebugInformationHandle: ...
    def MoveNext(self) -> bool: ...


class EventAccessors(ValueType):
    @property
    def Adder(self) -> MethodDefinitionHandle: ...
    @property
    def Others(self) -> ImmutableArray: ...
    @property
    def Raiser(self) -> MethodDefinitionHandle: ...
    @property
    def Remover(self) -> MethodDefinitionHandle: ...


class EventDefinition(ValueType):
    @property
    def Attributes(self) -> EventAttributes: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Type(self) -> EntityHandle: ...
    def GetAccessors(self) -> EventAccessors: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class EventDefinitionHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: EventDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: EventDefinitionHandle, right: EventDefinitionHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> EventDefinitionHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> EventDefinitionHandle: ...
    @overload
    def op_Implicit(handle: EventDefinitionHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: EventDefinitionHandle) -> EntityHandle: ...
    def op_Inequality(left: EventDefinitionHandle, right: EventDefinitionHandle) -> bool: ...


class EventDefinitionHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class ExceptionRegion(ValueType):
    @property
    def CatchType(self) -> EntityHandle: ...
    @property
    def FilterOffset(self) -> int: ...
    @property
    def HandlerLength(self) -> int: ...
    @property
    def HandlerOffset(self) -> int: ...
    @property
    def Kind(self) -> ExceptionRegionKind: ...
    @property
    def TryLength(self) -> int: ...
    @property
    def TryOffset(self) -> int: ...


class ExceptionRegionKind:
    Catch = 0
    Filter = 1
    Finally = 2
    Fault = 4


class ExportedType(ValueType):
    @property
    def Attributes(self) -> TypeAttributes: ...
    @property
    def Implementation(self) -> EntityHandle: ...
    @property
    def IsForwarder(self) -> bool: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Namespace(self) -> StringHandle: ...
    @property
    def NamespaceDefinition(self) -> NamespaceDefinitionHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class ExportedTypeHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ExportedTypeHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: ExportedTypeHandle, right: ExportedTypeHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> ExportedTypeHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> ExportedTypeHandle: ...
    @overload
    def op_Implicit(handle: ExportedTypeHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: ExportedTypeHandle) -> EntityHandle: ...
    def op_Inequality(left: ExportedTypeHandle, right: ExportedTypeHandle) -> bool: ...


class ExportedTypeHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class FieldDefinition(ValueType):
    def DecodeSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> TType: ...
    @property
    def Attributes(self) -> FieldAttributes: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Signature(self) -> BlobHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...
    def GetDeclaringType(self) -> TypeDefinitionHandle: ...
    def GetDefaultValue(self) -> ConstantHandle: ...
    def GetMarshallingDescriptor(self) -> BlobHandle: ...
    def GetOffset(self) -> int: ...
    def GetRelativeVirtualAddress(self) -> int: ...


class FieldDefinitionHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: FieldDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: FieldDefinitionHandle, right: FieldDefinitionHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> FieldDefinitionHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> FieldDefinitionHandle: ...
    @overload
    def op_Implicit(handle: FieldDefinitionHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: FieldDefinitionHandle) -> EntityHandle: ...
    def op_Inequality(left: FieldDefinitionHandle, right: FieldDefinitionHandle) -> bool: ...


class FieldDefinitionHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class GenericParameter(ValueType):
    @property
    def Attributes(self) -> GenericParameterAttributes: ...
    @property
    def Index(self) -> int: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Parent(self) -> EntityHandle: ...
    def GetConstraints(self) -> GenericParameterConstraintHandleCollection: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class GenericParameterConstraint(ValueType):
    @property
    def Parameter(self) -> GenericParameterHandle: ...
    @property
    def Type(self) -> EntityHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class GenericParameterConstraintHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: GenericParameterConstraintHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: GenericParameterConstraintHandle, right: GenericParameterConstraintHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> GenericParameterConstraintHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> GenericParameterConstraintHandle: ...
    @overload
    def op_Implicit(handle: GenericParameterConstraintHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: GenericParameterConstraintHandle) -> EntityHandle: ...
    def op_Inequality(left: GenericParameterConstraintHandle, right: GenericParameterConstraintHandle) -> bool: ...


class GenericParameterConstraintHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> GenericParameterConstraintHandle: ...
    def GetEnumerator(self) -> Enumerator: ...


class GenericParameterHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: GenericParameterHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: GenericParameterHandle, right: GenericParameterHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> GenericParameterHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> GenericParameterHandle: ...
    @overload
    def op_Implicit(handle: GenericParameterHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: GenericParameterHandle) -> EntityHandle: ...
    def op_Inequality(left: GenericParameterHandle, right: GenericParameterHandle) -> bool: ...


class GenericParameterHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> GenericParameterHandle: ...
    def GetEnumerator(self) -> Enumerator: ...


class GuidHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: GuidHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: GuidHandle, right: GuidHandle) -> bool: ...
    def op_Explicit(handle: Handle) -> GuidHandle: ...
    def op_Implicit(handle: GuidHandle) -> Handle: ...
    def op_Inequality(left: GuidHandle, right: GuidHandle) -> bool: ...


class Handle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Handle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    @property
    def Kind(self) -> HandleKind: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: Handle, right: Handle) -> bool: ...
    def op_Inequality(left: Handle, right: Handle) -> bool: ...


class HandleComparer(Object):
    @overload
    def Compare(self, x: Handle, y: Handle) -> int: ...
    @overload
    def Compare(self, x: EntityHandle, y: EntityHandle) -> int: ...
    @overload
    def Equals(self, x: Handle, y: Handle) -> bool: ...
    @overload
    def Equals(self, x: EntityHandle, y: EntityHandle) -> bool: ...
    @property
    def Default() -> HandleComparer: ...
    @overload
    def GetHashCode(self, obj: Handle) -> int: ...
    @overload
    def GetHashCode(self, obj: EntityHandle) -> int: ...


class HandleKind:
    ModuleDefinition = 0
    TypeReference = 1
    TypeDefinition = 2
    FieldDefinition = 4
    MethodDefinition = 6
    Parameter = 8
    InterfaceImplementation = 9
    MemberReference = 10
    Constant = 11
    CustomAttribute = 12
    DeclarativeSecurityAttribute = 14
    StandaloneSignature = 17
    EventDefinition = 20
    PropertyDefinition = 23
    MethodImplementation = 25
    ModuleReference = 26
    TypeSpecification = 27
    AssemblyDefinition = 32
    AssemblyReference = 35
    AssemblyFile = 38
    ExportedType = 39
    ManifestResource = 40
    GenericParameter = 42
    MethodSpecification = 43
    GenericParameterConstraint = 44
    Document = 48
    MethodDebugInformation = 49
    LocalScope = 50
    LocalVariable = 51
    LocalConstant = 52
    ImportScope = 53
    CustomDebugInformation = 55
    UserString = 112
    Blob = 113
    Guid = 114
    String = 120
    NamespaceDefinition = 124






class ILOpCode:
    Nop = 0
    Break = 1
    Ldarg_0 = 2
    Ldarg_1 = 3
    Ldarg_2 = 4
    Ldarg_3 = 5
    Ldloc_0 = 6
    Ldloc_1 = 7
    Ldloc_2 = 8
    Ldloc_3 = 9
    Stloc_0 = 10
    Stloc_1 = 11
    Stloc_2 = 12
    Stloc_3 = 13
    Ldarg_s = 14
    Ldarga_s = 15
    Starg_s = 16
    Ldloc_s = 17
    Ldloca_s = 18
    Stloc_s = 19
    Ldnull = 20
    Ldc_i4_m1 = 21
    Ldc_i4_0 = 22
    Ldc_i4_1 = 23
    Ldc_i4_2 = 24
    Ldc_i4_3 = 25
    Ldc_i4_4 = 26
    Ldc_i4_5 = 27
    Ldc_i4_6 = 28
    Ldc_i4_7 = 29
    Ldc_i4_8 = 30
    Ldc_i4_s = 31
    Ldc_i4 = 32
    Ldc_i8 = 33
    Ldc_r4 = 34
    Ldc_r8 = 35
    Dup = 37
    Pop = 38
    Jmp = 39
    Call = 40
    Calli = 41
    Ret = 42
    Br_s = 43
    Brfalse_s = 44
    Brtrue_s = 45
    Beq_s = 46
    Bge_s = 47
    Bgt_s = 48
    Ble_s = 49
    Blt_s = 50
    Bne_un_s = 51
    Bge_un_s = 52
    Bgt_un_s = 53
    Ble_un_s = 54
    Blt_un_s = 55
    Br = 56
    Brfalse = 57
    Brtrue = 58
    Beq = 59
    Bge = 60
    Bgt = 61
    Ble = 62
    Blt = 63
    Bne_un = 64
    Bge_un = 65
    Bgt_un = 66
    Ble_un = 67
    Blt_un = 68
    Switch = 69
    Ldind_i1 = 70
    Ldind_u1 = 71
    Ldind_i2 = 72
    Ldind_u2 = 73
    Ldind_i4 = 74
    Ldind_u4 = 75
    Ldind_i8 = 76
    Ldind_i = 77
    Ldind_r4 = 78
    Ldind_r8 = 79
    Ldind_ref = 80
    Stind_ref = 81
    Stind_i1 = 82
    Stind_i2 = 83
    Stind_i4 = 84
    Stind_i8 = 85
    Stind_r4 = 86
    Stind_r8 = 87
    Add = 88
    Sub = 89
    Mul = 90
    Div = 91
    Div_un = 92
    Rem = 93
    Rem_un = 94
    And = 95
    Or = 96
    Xor = 97
    Shl = 98
    Shr = 99
    Shr_un = 100
    Neg = 101
    Not = 102
    Conv_i1 = 103
    Conv_i2 = 104
    Conv_i4 = 105
    Conv_i8 = 106
    Conv_r4 = 107
    Conv_r8 = 108
    Conv_u4 = 109
    Conv_u8 = 110
    Callvirt = 111
    Cpobj = 112
    Ldobj = 113
    Ldstr = 114
    Newobj = 115
    Castclass = 116
    Isinst = 117
    Conv_r_un = 118
    Unbox = 121
    Throw = 122
    Ldfld = 123
    Ldflda = 124
    Stfld = 125
    Ldsfld = 126
    Ldsflda = 127
    Stsfld = 128
    Stobj = 129
    Conv_ovf_i1_un = 130
    Conv_ovf_i2_un = 131
    Conv_ovf_i4_un = 132
    Conv_ovf_i8_un = 133
    Conv_ovf_u1_un = 134
    Conv_ovf_u2_un = 135
    Conv_ovf_u4_un = 136
    Conv_ovf_u8_un = 137
    Conv_ovf_i_un = 138
    Conv_ovf_u_un = 139
    Box = 140
    Newarr = 141
    Ldlen = 142
    Ldelema = 143
    Ldelem_i1 = 144
    Ldelem_u1 = 145
    Ldelem_i2 = 146
    Ldelem_u2 = 147
    Ldelem_i4 = 148
    Ldelem_u4 = 149
    Ldelem_i8 = 150
    Ldelem_i = 151
    Ldelem_r4 = 152
    Ldelem_r8 = 153
    Ldelem_ref = 154
    Stelem_i = 155
    Stelem_i1 = 156
    Stelem_i2 = 157
    Stelem_i4 = 158
    Stelem_i8 = 159
    Stelem_r4 = 160
    Stelem_r8 = 161
    Stelem_ref = 162
    Ldelem = 163
    Stelem = 164
    Unbox_any = 165
    Conv_ovf_i1 = 179
    Conv_ovf_u1 = 180
    Conv_ovf_i2 = 181
    Conv_ovf_u2 = 182
    Conv_ovf_i4 = 183
    Conv_ovf_u4 = 184
    Conv_ovf_i8 = 185
    Conv_ovf_u8 = 186
    Refanyval = 194
    Ckfinite = 195
    Mkrefany = 198
    Ldtoken = 208
    Conv_u2 = 209
    Conv_u1 = 210
    Conv_i = 211
    Conv_ovf_i = 212
    Conv_ovf_u = 213
    Add_ovf = 214
    Add_ovf_un = 215
    Mul_ovf = 216
    Mul_ovf_un = 217
    Sub_ovf = 218
    Sub_ovf_un = 219
    Endfinally = 220
    Leave = 221
    Leave_s = 222
    Stind_i = 223
    Conv_u = 224
    Arglist = 65024
    Ceq = 65025
    Cgt = 65026
    Cgt_un = 65027
    Clt = 65028
    Clt_un = 65029
    Ldftn = 65030
    Ldvirtftn = 65031
    Ldarg = 65033
    Ldarga = 65034
    Starg = 65035
    Ldloc = 65036
    Ldloca = 65037
    Stloc = 65038
    Localloc = 65039
    Endfilter = 65041
    Unaligned = 65042
    Volatile = 65043
    Tail = 65044
    Initobj = 65045
    Constrained = 65046
    Cpblk = 65047
    Initblk = 65048
    Rethrow = 65050
    Sizeof = 65052
    Refanytype = 65053
    Readonly = 65054


class ILOpCodeExtensions(Object):
    def GetBranchOperandSize(opCode: ILOpCode) -> int: ...
    def GetLongBranch(opCode: ILOpCode) -> ILOpCode: ...
    def GetShortBranch(opCode: ILOpCode) -> ILOpCode: ...
    def IsBranch(opCode: ILOpCode) -> bool: ...


class ImageFormatLimitationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ImportDefinition(ValueType):
    @property
    def Alias(self) -> BlobHandle: ...
    @property
    def Kind(self) -> ImportDefinitionKind: ...
    @property
    def TargetAssembly(self) -> AssemblyReferenceHandle: ...
    @property
    def TargetNamespace(self) -> BlobHandle: ...
    @property
    def TargetType(self) -> EntityHandle: ...


class ImportDefinitionCollection(ValueType):
    def GetEnumerator(self) -> Enumerator: ...


class ImportDefinitionKind:
    ImportNamespace = 1
    ImportAssemblyNamespace = 2
    ImportType = 3
    ImportXmlNamespace = 4
    ImportAssemblyReferenceAlias = 5
    AliasAssemblyReference = 6
    AliasNamespace = 7
    AliasAssemblyNamespace = 8
    AliasType = 9


class ImportScope(ValueType):
    @property
    def ImportsBlob(self) -> BlobHandle: ...
    @property
    def Parent(self) -> ImportScopeHandle: ...
    def GetImports(self) -> ImportDefinitionCollection: ...


class ImportScopeCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class ImportScopeHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ImportScopeHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: ImportScopeHandle, right: ImportScopeHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> ImportScopeHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> ImportScopeHandle: ...
    @overload
    def op_Implicit(handle: ImportScopeHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: ImportScopeHandle) -> EntityHandle: ...
    def op_Inequality(left: ImportScopeHandle, right: ImportScopeHandle) -> bool: ...


class InterfaceImplementation(ValueType):
    @property
    def Interface(self) -> EntityHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class InterfaceImplementationHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: InterfaceImplementationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: InterfaceImplementationHandle, right: InterfaceImplementationHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> InterfaceImplementationHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> InterfaceImplementationHandle: ...
    @overload
    def op_Implicit(handle: InterfaceImplementationHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: InterfaceImplementationHandle) -> EntityHandle: ...
    def op_Inequality(left: InterfaceImplementationHandle, right: InterfaceImplementationHandle) -> bool: ...


class InterfaceImplementationHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...








class LocalConstant(ValueType):
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Signature(self) -> BlobHandle: ...


class LocalConstantHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: LocalConstantHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: LocalConstantHandle, right: LocalConstantHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> LocalConstantHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> LocalConstantHandle: ...
    @overload
    def op_Implicit(handle: LocalConstantHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: LocalConstantHandle) -> EntityHandle: ...
    def op_Inequality(left: LocalConstantHandle, right: LocalConstantHandle) -> bool: ...


class LocalConstantHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class LocalScope(ValueType):
    @property
    def EndOffset(self) -> int: ...
    @property
    def ImportScope(self) -> ImportScopeHandle: ...
    @property
    def Length(self) -> int: ...
    @property
    def Method(self) -> MethodDefinitionHandle: ...
    @property
    def StartOffset(self) -> int: ...
    def GetChildren(self) -> ChildrenEnumerator: ...
    def GetLocalConstants(self) -> LocalConstantHandleCollection: ...
    def GetLocalVariables(self) -> LocalVariableHandleCollection: ...


class LocalScopeHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: LocalScopeHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: LocalScopeHandle, right: LocalScopeHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> LocalScopeHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> LocalScopeHandle: ...
    @overload
    def op_Implicit(handle: LocalScopeHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: LocalScopeHandle) -> EntityHandle: ...
    def op_Inequality(left: LocalScopeHandle, right: LocalScopeHandle) -> bool: ...


class LocalScopeHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class LocalVariable(ValueType):
    @property
    def Attributes(self) -> LocalVariableAttributes: ...
    @property
    def Index(self) -> int: ...
    @property
    def Name(self) -> StringHandle: ...


class LocalVariableAttributes:
    #None = 0
    DebuggerHidden = 1


class LocalVariableHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: LocalVariableHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: LocalVariableHandle, right: LocalVariableHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> LocalVariableHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> LocalVariableHandle: ...
    @overload
    def op_Implicit(handle: LocalVariableHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: LocalVariableHandle) -> EntityHandle: ...
    def op_Inequality(left: LocalVariableHandle, right: LocalVariableHandle) -> bool: ...


class LocalVariableHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class ManifestResource(ValueType):
    @property
    def Attributes(self) -> ManifestResourceAttributes: ...
    @property
    def Implementation(self) -> EntityHandle: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Offset(self) -> Int64: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class ManifestResourceHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ManifestResourceHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: ManifestResourceHandle, right: ManifestResourceHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> ManifestResourceHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> ManifestResourceHandle: ...
    @overload
    def op_Implicit(handle: ManifestResourceHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: ManifestResourceHandle) -> EntityHandle: ...
    def op_Inequality(left: ManifestResourceHandle, right: ManifestResourceHandle) -> bool: ...


class ManifestResourceHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class MemberReference(ValueType):
    def DecodeFieldSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> TType: ...
    def DecodeMethodSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> MethodSignature: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Parent(self) -> EntityHandle: ...
    @property
    def Signature(self) -> BlobHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...
    def GetKind(self) -> MemberReferenceKind: ...


class MemberReferenceHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: MemberReferenceHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: MemberReferenceHandle, right: MemberReferenceHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> MemberReferenceHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> MemberReferenceHandle: ...
    @overload
    def op_Implicit(handle: MemberReferenceHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: MemberReferenceHandle) -> EntityHandle: ...
    def op_Inequality(left: MemberReferenceHandle, right: MemberReferenceHandle) -> bool: ...


class MemberReferenceHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class MemberReferenceKind:
    Method = 0
    Field = 1


class MetadataKind:
    Ecma335 = 0
    WindowsMetadata = 1
    ManagedWindowsMetadata = 2


class MetadataReader(Object):
    @overload
    def __init__(self, metadata: Byte, length: int): ...
    @overload
    def __init__(self, metadata: Byte, length: int, options: MetadataReaderOptions): ...
    @overload
    def __init__(self, metadata: Byte, length: int, options: MetadataReaderOptions, utf8Decoder: MetadataStringDecoder): ...
    @property
    def AssemblyFiles(self) -> AssemblyFileHandleCollection: ...
    @property
    def AssemblyReferences(self) -> AssemblyReferenceHandleCollection: ...
    @property
    def CustomAttributes(self) -> CustomAttributeHandleCollection: ...
    @property
    def CustomDebugInformation(self) -> CustomDebugInformationHandleCollection: ...
    @property
    def DebugMetadataHeader(self) -> DebugMetadataHeader: ...
    @property
    def DeclarativeSecurityAttributes(self) -> DeclarativeSecurityAttributeHandleCollection: ...
    @property
    def Documents(self) -> DocumentHandleCollection: ...
    @property
    def EventDefinitions(self) -> EventDefinitionHandleCollection: ...
    @property
    def ExportedTypes(self) -> ExportedTypeHandleCollection: ...
    @property
    def FieldDefinitions(self) -> FieldDefinitionHandleCollection: ...
    @property
    def ImportScopes(self) -> ImportScopeCollection: ...
    @property
    def IsAssembly(self) -> bool: ...
    @property
    def LocalConstants(self) -> LocalConstantHandleCollection: ...
    @property
    def LocalScopes(self) -> LocalScopeHandleCollection: ...
    @property
    def LocalVariables(self) -> LocalVariableHandleCollection: ...
    @property
    def ManifestResources(self) -> ManifestResourceHandleCollection: ...
    @property
    def MemberReferences(self) -> MemberReferenceHandleCollection: ...
    @property
    def MetadataKind(self) -> MetadataKind: ...
    @property
    def MetadataLength(self) -> int: ...
    @property
    def MetadataPointer(self) -> Byte: ...
    @property
    def MetadataVersion(self) -> str: ...
    @property
    def MethodDebugInformation(self) -> MethodDebugInformationHandleCollection: ...
    @property
    def MethodDefinitions(self) -> MethodDefinitionHandleCollection: ...
    @property
    def Options(self) -> MetadataReaderOptions: ...
    @property
    def PropertyDefinitions(self) -> PropertyDefinitionHandleCollection: ...
    @property
    def StringComparer(self) -> MetadataStringComparer: ...
    @property
    def TypeDefinitions(self) -> TypeDefinitionHandleCollection: ...
    @property
    def TypeReferences(self) -> TypeReferenceHandleCollection: ...
    @property
    def UTF8Decoder(self) -> MetadataStringDecoder: ...
    def GetAssemblyDefinition(self) -> AssemblyDefinition: ...
    def GetAssemblyFile(self, handle: AssemblyFileHandle) -> AssemblyFile: ...
    def GetAssemblyReference(self, handle: AssemblyReferenceHandle) -> AssemblyReference: ...
    def GetBlobBytes(self, handle: BlobHandle) -> Set(Byte): ...
    def GetBlobContent(self, handle: BlobHandle) -> ImmutableArray: ...
    @overload
    def GetBlobReader(self, handle: BlobHandle) -> BlobReader: ...
    @overload
    def GetBlobReader(self, handle: StringHandle) -> BlobReader: ...
    def GetConstant(self, handle: ConstantHandle) -> Constant: ...
    def GetCustomAttribute(self, handle: CustomAttributeHandle) -> CustomAttribute: ...
    def GetCustomAttributes(self, handle: EntityHandle) -> CustomAttributeHandleCollection: ...
    @overload
    def GetCustomDebugInformation(self, handle: CustomDebugInformationHandle) -> CustomDebugInformation: ...
    @overload
    def GetCustomDebugInformation(self, handle: EntityHandle) -> CustomDebugInformationHandleCollection: ...
    def GetDeclarativeSecurityAttribute(self, handle: DeclarativeSecurityAttributeHandle) -> DeclarativeSecurityAttribute: ...
    def GetDocument(self, handle: DocumentHandle) -> Document: ...
    def GetEventDefinition(self, handle: EventDefinitionHandle) -> EventDefinition: ...
    def GetExportedType(self, handle: ExportedTypeHandle) -> ExportedType: ...
    def GetFieldDefinition(self, handle: FieldDefinitionHandle) -> FieldDefinition: ...
    def GetGenericParameter(self, handle: GenericParameterHandle) -> GenericParameter: ...
    def GetGenericParameterConstraint(self, handle: GenericParameterConstraintHandle) -> GenericParameterConstraint: ...
    def GetGuid(self, handle: GuidHandle) -> Guid: ...
    def GetImportScope(self, handle: ImportScopeHandle) -> ImportScope: ...
    def GetInterfaceImplementation(self, handle: InterfaceImplementationHandle) -> InterfaceImplementation: ...
    def GetLocalConstant(self, handle: LocalConstantHandle) -> LocalConstant: ...
    def GetLocalScope(self, handle: LocalScopeHandle) -> LocalScope: ...
    @overload
    def GetLocalScopes(self, handle: MethodDebugInformationHandle) -> LocalScopeHandleCollection: ...
    @overload
    def GetLocalScopes(self, handle: MethodDefinitionHandle) -> LocalScopeHandleCollection: ...
    def GetLocalVariable(self, handle: LocalVariableHandle) -> LocalVariable: ...
    def GetManifestResource(self, handle: ManifestResourceHandle) -> ManifestResource: ...
    def GetMemberReference(self, handle: MemberReferenceHandle) -> MemberReference: ...
    @overload
    def GetMethodDebugInformation(self, handle: MethodDebugInformationHandle) -> MethodDebugInformation: ...
    @overload
    def GetMethodDebugInformation(self, handle: MethodDefinitionHandle) -> MethodDebugInformation: ...
    def GetMethodDefinition(self, handle: MethodDefinitionHandle) -> MethodDefinition: ...
    def GetMethodImplementation(self, handle: MethodImplementationHandle) -> MethodImplementation: ...
    def GetMethodSpecification(self, handle: MethodSpecificationHandle) -> MethodSpecification: ...
    def GetModuleDefinition(self) -> ModuleDefinition: ...
    def GetModuleReference(self, handle: ModuleReferenceHandle) -> ModuleReference: ...
    def GetNamespaceDefinition(self, handle: NamespaceDefinitionHandle) -> NamespaceDefinition: ...
    def GetNamespaceDefinitionRoot(self) -> NamespaceDefinition: ...
    def GetParameter(self, handle: ParameterHandle) -> Parameter: ...
    def GetPropertyDefinition(self, handle: PropertyDefinitionHandle) -> PropertyDefinition: ...
    def GetStandaloneSignature(self, handle: StandaloneSignatureHandle) -> StandaloneSignature: ...
    @overload
    def GetString(self, handle: StringHandle) -> str: ...
    @overload
    def GetString(self, handle: DocumentNameBlobHandle) -> str: ...
    @overload
    def GetString(self, handle: NamespaceDefinitionHandle) -> str: ...
    def GetTypeDefinition(self, handle: TypeDefinitionHandle) -> TypeDefinition: ...
    def GetTypeReference(self, handle: TypeReferenceHandle) -> TypeReference: ...
    def GetTypeSpecification(self, handle: TypeSpecificationHandle) -> TypeSpecification: ...
    def GetUserString(self, handle: UserStringHandle) -> str: ...


class MetadataReaderOptions:
    #None = 0
    Default = 1
    ApplyWindowsRuntimeProjections = 1


class MetadataReaderProvider(Object):
    def Dispose(self) -> None: ...
    @overload
    def FromMetadataImage(image: ImmutableArray) -> MetadataReaderProvider: ...
    @overload
    def FromMetadataImage(start: Byte, size: int) -> MetadataReaderProvider: ...
    def FromMetadataStream(stream: Stream, options: MetadataStreamOptions, size: int) -> MetadataReaderProvider: ...
    @overload
    def FromPortablePdbImage(image: ImmutableArray) -> MetadataReaderProvider: ...
    @overload
    def FromPortablePdbImage(start: Byte, size: int) -> MetadataReaderProvider: ...
    def FromPortablePdbStream(stream: Stream, options: MetadataStreamOptions, size: int) -> MetadataReaderProvider: ...
    def GetMetadataReader(self, options: MetadataReaderOptions, utf8Decoder: MetadataStringDecoder) -> MetadataReader: ...


class MetadataStreamOptions:
    Default = 0
    LeaveOpen = 1
    PrefetchMetadata = 2


class MetadataStringComparer(ValueType):
    @overload
    def Equals(self, handle: StringHandle, value: str) -> bool: ...
    @overload
    def Equals(self, handle: NamespaceDefinitionHandle, value: str) -> bool: ...
    @overload
    def Equals(self, handle: DocumentNameBlobHandle, value: str) -> bool: ...
    @overload
    def Equals(self, handle: StringHandle, value: str, ignoreCase: bool) -> bool: ...
    @overload
    def Equals(self, handle: NamespaceDefinitionHandle, value: str, ignoreCase: bool) -> bool: ...
    @overload
    def Equals(self, handle: DocumentNameBlobHandle, value: str, ignoreCase: bool) -> bool: ...
    @overload
    def StartsWith(self, handle: StringHandle, value: str) -> bool: ...
    @overload
    def StartsWith(self, handle: StringHandle, value: str, ignoreCase: bool) -> bool: ...


class MetadataStringDecoder(Object):
    def __init__(self, encoding: Encoding): ...
    @property
    def DefaultUTF8() -> MetadataStringDecoder: ...
    @property
    def Encoding(self) -> Encoding: ...
    def GetString(self, bytes: Byte, byteCount: int) -> str: ...


class MethodBodyBlock(Object):
    def Create(reader: BlobReader) -> MethodBodyBlock: ...
    @property
    def ExceptionRegions(self) -> ImmutableArray: ...
    @property
    def LocalSignature(self) -> StandaloneSignatureHandle: ...
    @property
    def LocalVariablesInitialized(self) -> bool: ...
    @property
    def MaxStack(self) -> int: ...
    @property
    def Size(self) -> int: ...
    def GetILBytes(self) -> Set(Byte): ...
    def GetILContent(self) -> ImmutableArray: ...
    def GetILReader(self) -> BlobReader: ...


class MethodDebugInformation(ValueType):
    @property
    def Document(self) -> DocumentHandle: ...
    @property
    def LocalSignature(self) -> StandaloneSignatureHandle: ...
    @property
    def SequencePointsBlob(self) -> BlobHandle: ...
    def GetSequencePoints(self) -> SequencePointCollection: ...
    def GetStateMachineKickoffMethod(self) -> MethodDefinitionHandle: ...


class MethodDebugInformationHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: MethodDebugInformationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: MethodDebugInformationHandle, right: MethodDebugInformationHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> MethodDebugInformationHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> MethodDebugInformationHandle: ...
    @overload
    def op_Implicit(handle: MethodDebugInformationHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: MethodDebugInformationHandle) -> EntityHandle: ...
    def op_Inequality(left: MethodDebugInformationHandle, right: MethodDebugInformationHandle) -> bool: ...
    def ToDefinitionHandle(self) -> MethodDefinitionHandle: ...


class MethodDebugInformationHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class MethodDefinition(ValueType):
    def DecodeSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> MethodSignature: ...
    @property
    def Attributes(self) -> MethodAttributes: ...
    @property
    def ImplAttributes(self) -> MethodImplAttributes: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def RelativeVirtualAddress(self) -> int: ...
    @property
    def Signature(self) -> BlobHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...
    def GetDeclarativeSecurityAttributes(self) -> DeclarativeSecurityAttributeHandleCollection: ...
    def GetDeclaringType(self) -> TypeDefinitionHandle: ...
    def GetGenericParameters(self) -> GenericParameterHandleCollection: ...
    def GetImport(self) -> MethodImport: ...
    def GetParameters(self) -> ParameterHandleCollection: ...


class MethodDefinitionHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: MethodDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: MethodDefinitionHandle, right: MethodDefinitionHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> MethodDefinitionHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> MethodDefinitionHandle: ...
    @overload
    def op_Implicit(handle: MethodDefinitionHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: MethodDefinitionHandle) -> EntityHandle: ...
    def op_Inequality(left: MethodDefinitionHandle, right: MethodDefinitionHandle) -> bool: ...
    def ToDebugInformationHandle(self) -> MethodDebugInformationHandle: ...


class MethodDefinitionHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class MethodImplementation(ValueType):
    @property
    def MethodBody(self) -> EntityHandle: ...
    @property
    def MethodDeclaration(self) -> EntityHandle: ...
    @property
    def Type(self) -> TypeDefinitionHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class MethodImplementationHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: MethodImplementationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: MethodImplementationHandle, right: MethodImplementationHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> MethodImplementationHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> MethodImplementationHandle: ...
    @overload
    def op_Implicit(handle: MethodImplementationHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: MethodImplementationHandle) -> EntityHandle: ...
    def op_Inequality(left: MethodImplementationHandle, right: MethodImplementationHandle) -> bool: ...


class MethodImplementationHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class MethodImport(ValueType):
    @property
    def Attributes(self) -> MethodImportAttributes: ...
    @property
    def Module(self) -> ModuleReferenceHandle: ...
    @property
    def Name(self) -> StringHandle: ...




class MethodSpecification(ValueType):
    def DecodeSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> ImmutableArray: ...
    @property
    def Method(self) -> EntityHandle: ...
    @property
    def Signature(self) -> BlobHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class MethodSpecificationHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: MethodSpecificationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: MethodSpecificationHandle, right: MethodSpecificationHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> MethodSpecificationHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> MethodSpecificationHandle: ...
    @overload
    def op_Implicit(handle: MethodSpecificationHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: MethodSpecificationHandle) -> EntityHandle: ...
    def op_Inequality(left: MethodSpecificationHandle, right: MethodSpecificationHandle) -> bool: ...


class ModuleDefinition(ValueType):
    @property
    def BaseGenerationId(self) -> GuidHandle: ...
    @property
    def Generation(self) -> int: ...
    @property
    def GenerationId(self) -> GuidHandle: ...
    @property
    def Mvid(self) -> GuidHandle: ...
    @property
    def Name(self) -> StringHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class ModuleDefinitionHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ModuleDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: ModuleDefinitionHandle, right: ModuleDefinitionHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> ModuleDefinitionHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> ModuleDefinitionHandle: ...
    @overload
    def op_Implicit(handle: ModuleDefinitionHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: ModuleDefinitionHandle) -> EntityHandle: ...
    def op_Inequality(left: ModuleDefinitionHandle, right: ModuleDefinitionHandle) -> bool: ...


class ModuleReference(ValueType):
    @property
    def Name(self) -> StringHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class ModuleReferenceHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ModuleReferenceHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: ModuleReferenceHandle, right: ModuleReferenceHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> ModuleReferenceHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> ModuleReferenceHandle: ...
    @overload
    def op_Implicit(handle: ModuleReferenceHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: ModuleReferenceHandle) -> EntityHandle: ...
    def op_Inequality(left: ModuleReferenceHandle, right: ModuleReferenceHandle) -> bool: ...


class NamespaceDefinition(ValueType):
    @property
    def ExportedTypes(self) -> ImmutableArray: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def NamespaceDefinitions(self) -> ImmutableArray: ...
    @property
    def Parent(self) -> NamespaceDefinitionHandle: ...
    @property
    def TypeDefinitions(self) -> ImmutableArray: ...


class NamespaceDefinitionHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: NamespaceDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: NamespaceDefinitionHandle, right: NamespaceDefinitionHandle) -> bool: ...
    def op_Explicit(handle: Handle) -> NamespaceDefinitionHandle: ...
    def op_Implicit(handle: NamespaceDefinitionHandle) -> Handle: ...
    def op_Inequality(left: NamespaceDefinitionHandle, right: NamespaceDefinitionHandle) -> bool: ...


class Parameter(ValueType):
    @property
    def Attributes(self) -> ParameterAttributes: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def SequenceNumber(self) -> int: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...
    def GetDefaultValue(self) -> ConstantHandle: ...
    def GetMarshallingDescriptor(self) -> BlobHandle: ...


class ParameterHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ParameterHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: ParameterHandle, right: ParameterHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> ParameterHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> ParameterHandle: ...
    @overload
    def op_Implicit(handle: ParameterHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: ParameterHandle) -> EntityHandle: ...
    def op_Inequality(left: ParameterHandle, right: ParameterHandle) -> bool: ...


class ParameterHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class PEReaderExtensions(Object):
    @overload
    def GetMetadataReader(peReader: PEReader) -> MetadataReader: ...
    @overload
    def GetMetadataReader(peReader: PEReader, options: MetadataReaderOptions) -> MetadataReader: ...
    @overload
    def GetMetadataReader(peReader: PEReader, options: MetadataReaderOptions, utf8Decoder: MetadataStringDecoder) -> MetadataReader: ...
    def GetMethodBody(peReader: PEReader, relativeVirtualAddress: int) -> MethodBodyBlock: ...


class PrimitiveSerializationTypeCode:
    Boolean = 2
    Char = 3
    SByte = 4
    Byte = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Single = 12
    Double = 13
    String = 14


class PrimitiveTypeCode:
    Void = 1
    Boolean = 2
    Char = 3
    SByte = 4
    Byte = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Single = 12
    Double = 13
    String = 14
    TypedReference = 22
    IntPtr = 24
    UIntPtr = 25
    Object = 28


class PropertyAccessors(ValueType):
    @property
    def Getter(self) -> MethodDefinitionHandle: ...
    @property
    def Others(self) -> ImmutableArray: ...
    @property
    def Setter(self) -> MethodDefinitionHandle: ...


class PropertyDefinition(ValueType):
    def DecodeSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> MethodSignature: ...
    @property
    def Attributes(self) -> PropertyAttributes: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Signature(self) -> BlobHandle: ...
    def GetAccessors(self) -> PropertyAccessors: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...
    def GetDefaultValue(self) -> ConstantHandle: ...


class PropertyDefinitionHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: PropertyDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: PropertyDefinitionHandle, right: PropertyDefinitionHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> PropertyDefinitionHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> PropertyDefinitionHandle: ...
    @overload
    def op_Implicit(handle: PropertyDefinitionHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: PropertyDefinitionHandle) -> EntityHandle: ...
    def op_Inequality(left: PropertyDefinitionHandle, right: PropertyDefinitionHandle) -> bool: ...


class PropertyDefinitionHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...




class SequencePoint(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: SequencePoint) -> bool: ...
    @property
    def Document(self) -> DocumentHandle: ...
    @property
    def EndColumn(self) -> int: ...
    @property
    def EndLine(self) -> int: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def Offset(self) -> int: ...
    @property
    def StartColumn(self) -> int: ...
    @property
    def StartLine(self) -> int: ...
    def GetHashCode(self) -> int: ...


class SequencePointCollection(ValueType):
    def GetEnumerator(self) -> Enumerator: ...


class SerializationTypeCode:
    Invalid = 0
    Boolean = 2
    Char = 3
    SByte = 4
    Byte = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Single = 12
    Double = 13
    String = 14
    SZArray = 29
    Type = 80
    TaggedObject = 81
    Enum = 85


class SignatureAttributes:
    #None = 0
    Generic = 16
    Instance = 32
    ExplicitThis = 64


class SignatureCallingConvention:
    Default = 0
    CDecl = 1
    StdCall = 2
    ThisCall = 3
    FastCall = 4
    VarArgs = 5
    Unmanaged = 9


class SignatureHeader(ValueType):
    @overload
    def __init__(self, rawValue: Byte): ...
    @overload
    def __init__(self, kind: SignatureKind, convention: SignatureCallingConvention, attributes: SignatureAttributes): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: SignatureHeader) -> bool: ...
    @property
    def Attributes(self) -> SignatureAttributes: ...
    @property
    def CallingConvention(self) -> SignatureCallingConvention: ...
    @property
    def HasExplicitThis(self) -> bool: ...
    @property
    def IsGeneric(self) -> bool: ...
    @property
    def IsInstance(self) -> bool: ...
    @property
    def Kind(self) -> SignatureKind: ...
    @property
    def RawValue(self) -> Byte: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: SignatureHeader, right: SignatureHeader) -> bool: ...
    def op_Inequality(left: SignatureHeader, right: SignatureHeader) -> bool: ...
    def ToString(self) -> str: ...


class SignatureKind:
    Method = 0
    Field = 6
    LocalVariables = 7
    Property = 8
    MethodSpecification = 10


class SignatureTypeCode:
    Invalid = 0
    Void = 1
    Boolean = 2
    Char = 3
    SByte = 4
    Byte = 5
    Int16 = 6
    UInt16 = 7
    Int32 = 8
    UInt32 = 9
    Int64 = 10
    UInt64 = 11
    Single = 12
    Double = 13
    String = 14
    Pointer = 15
    ByReference = 16
    GenericTypeParameter = 19
    Array = 20
    GenericTypeInstance = 21
    TypedReference = 22
    IntPtr = 24
    UIntPtr = 25
    FunctionPointer = 27
    Object = 28
    SZArray = 29
    GenericMethodParameter = 30
    RequiredModifier = 31
    OptionalModifier = 32
    TypeHandle = 64
    Sentinel = 65
    Pinned = 69


class SignatureTypeKind:
    Unknown = 0
    ValueType = 17
    Class = 18


class StandaloneSignature(ValueType):
    def DecodeLocalSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> ImmutableArray: ...
    def DecodeMethodSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> MethodSignature: ...
    @property
    def Signature(self) -> BlobHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...
    def GetKind(self) -> StandaloneSignatureKind: ...


class StandaloneSignatureHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: StandaloneSignatureHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: StandaloneSignatureHandle, right: StandaloneSignatureHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> StandaloneSignatureHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> StandaloneSignatureHandle: ...
    @overload
    def op_Implicit(handle: StandaloneSignatureHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: StandaloneSignatureHandle) -> EntityHandle: ...
    def op_Inequality(left: StandaloneSignatureHandle, right: StandaloneSignatureHandle) -> bool: ...


class StandaloneSignatureKind:
    Method = 0
    LocalVariables = 1


class StringHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: StringHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: StringHandle, right: StringHandle) -> bool: ...
    def op_Explicit(handle: Handle) -> StringHandle: ...
    def op_Implicit(handle: StringHandle) -> Handle: ...
    def op_Inequality(left: StringHandle, right: StringHandle) -> bool: ...


class TypeDefinition(ValueType):
    @property
    def Attributes(self) -> TypeAttributes: ...
    @property
    def BaseType(self) -> EntityHandle: ...
    @property
    def IsNested(self) -> bool: ...
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Namespace(self) -> StringHandle: ...
    @property
    def NamespaceDefinition(self) -> NamespaceDefinitionHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...
    def GetDeclarativeSecurityAttributes(self) -> DeclarativeSecurityAttributeHandleCollection: ...
    def GetDeclaringType(self) -> TypeDefinitionHandle: ...
    def GetEvents(self) -> EventDefinitionHandleCollection: ...
    def GetFields(self) -> FieldDefinitionHandleCollection: ...
    def GetGenericParameters(self) -> GenericParameterHandleCollection: ...
    def GetInterfaceImplementations(self) -> InterfaceImplementationHandleCollection: ...
    def GetLayout(self) -> TypeLayout: ...
    def GetMethodImplementations(self) -> MethodImplementationHandleCollection: ...
    def GetMethods(self) -> MethodDefinitionHandleCollection: ...
    def GetNestedTypes(self) -> ImmutableArray: ...
    def GetProperties(self) -> PropertyDefinitionHandleCollection: ...


class TypeDefinitionHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: TypeDefinitionHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: TypeDefinitionHandle, right: TypeDefinitionHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> TypeDefinitionHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> TypeDefinitionHandle: ...
    @overload
    def op_Implicit(handle: TypeDefinitionHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: TypeDefinitionHandle) -> EntityHandle: ...
    def op_Inequality(left: TypeDefinitionHandle, right: TypeDefinitionHandle) -> bool: ...


class TypeDefinitionHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class TypeLayout(ValueType):
    def __init__(self, size: int, packingSize: int): ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def PackingSize(self) -> int: ...
    @property
    def Size(self) -> int: ...


class TypeReference(ValueType):
    @property
    def Name(self) -> StringHandle: ...
    @property
    def Namespace(self) -> StringHandle: ...
    @property
    def ResolutionScope(self) -> EntityHandle: ...


class TypeReferenceHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: TypeReferenceHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: TypeReferenceHandle, right: TypeReferenceHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> TypeReferenceHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> TypeReferenceHandle: ...
    @overload
    def op_Implicit(handle: TypeReferenceHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: TypeReferenceHandle) -> EntityHandle: ...
    def op_Inequality(left: TypeReferenceHandle, right: TypeReferenceHandle) -> bool: ...


class TypeReferenceHandleCollection(ValueType):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> Enumerator: ...


class TypeSpecification(ValueType):
    def DecodeSignature(self, provider: ISignatureTypeProvider, genericContext: TGenericContext) -> TType: ...
    @property
    def Signature(self) -> BlobHandle: ...
    def GetCustomAttributes(self) -> CustomAttributeHandleCollection: ...


class TypeSpecificationHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: TypeSpecificationHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: TypeSpecificationHandle, right: TypeSpecificationHandle) -> bool: ...
    @overload
    def op_Explicit(handle: Handle) -> TypeSpecificationHandle: ...
    @overload
    def op_Explicit(handle: EntityHandle) -> TypeSpecificationHandle: ...
    @overload
    def op_Implicit(handle: TypeSpecificationHandle) -> Handle: ...
    @overload
    def op_Implicit(handle: TypeSpecificationHandle) -> EntityHandle: ...
    def op_Inequality(left: TypeSpecificationHandle, right: TypeSpecificationHandle) -> bool: ...


class UserStringHandle(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: UserStringHandle) -> bool: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: UserStringHandle, right: UserStringHandle) -> bool: ...
    def op_Explicit(handle: Handle) -> UserStringHandle: ...
    def op_Implicit(handle: UserStringHandle) -> Handle: ...
    def op_Inequality(left: UserStringHandle, right: UserStringHandle) -> bool: ...
