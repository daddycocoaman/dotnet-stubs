from typing import Tuple, Set, Iterable, List


class ArrayShapeEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def Shape(self, rank: int, sizes: ImmutableArray, lowerBounds: ImmutableArray) -> None: ...


class BlobEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    @overload
    def CustomAttributeSignature(self) -> Tuple[FixedArgumentsEncoder, CustomAttributeNamedArgumentsEncoder]: ...
    @overload
    def CustomAttributeSignature(self, fixedArguments: Action, namedArguments: Action) -> None: ...
    def FieldSignature(self) -> SignatureTypeEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def LocalVariableSignature(self, variableCount: int) -> LocalVariablesEncoder: ...
    def MethodSignature(self, convention: SignatureCallingConvention, genericParameterCount: int, isInstanceMethod: bool) -> MethodSignatureEncoder: ...
    def MethodSpecificationSignature(self, genericArgumentCount: int) -> GenericTypeArgumentsEncoder: ...
    def PermissionSetArguments(self, argumentCount: int) -> NamedArgumentsEncoder: ...
    def PermissionSetBlob(self, attributeCount: int) -> PermissionSetEncoder: ...
    def PropertySignature(self, isInstanceProperty: bool) -> MethodSignatureEncoder: ...
    def TypeSpecificationSignature(self) -> SignatureTypeEncoder: ...


class CodedIndex(Object):
    def CustomAttributeType(handle: EntityHandle) -> int: ...
    def HasConstant(handle: EntityHandle) -> int: ...
    def HasCustomAttribute(handle: EntityHandle) -> int: ...
    def HasCustomDebugInformation(handle: EntityHandle) -> int: ...
    def HasDeclSecurity(handle: EntityHandle) -> int: ...
    def HasFieldMarshal(handle: EntityHandle) -> int: ...
    def HasSemantics(handle: EntityHandle) -> int: ...
    def Implementation(handle: EntityHandle) -> int: ...
    def MemberForwarded(handle: EntityHandle) -> int: ...
    def MemberRefParent(handle: EntityHandle) -> int: ...
    def MethodDefOrRef(handle: EntityHandle) -> int: ...
    def ResolutionScope(handle: EntityHandle) -> int: ...
    def TypeDefOrRef(handle: EntityHandle) -> int: ...
    def TypeDefOrRefOrSpec(handle: EntityHandle) -> int: ...
    def TypeOrMethodDef(handle: EntityHandle) -> int: ...


class ControlFlowBuilder(Object):
    def __init__(self): ...
    def AddCatchRegion(self, tryStart: LabelHandle, tryEnd: LabelHandle, handlerStart: LabelHandle, handlerEnd: LabelHandle, catchType: EntityHandle) -> None: ...
    def AddFaultRegion(self, tryStart: LabelHandle, tryEnd: LabelHandle, handlerStart: LabelHandle, handlerEnd: LabelHandle) -> None: ...
    def AddFilterRegion(self, tryStart: LabelHandle, tryEnd: LabelHandle, handlerStart: LabelHandle, handlerEnd: LabelHandle, filterStart: LabelHandle) -> None: ...
    def AddFinallyRegion(self, tryStart: LabelHandle, tryEnd: LabelHandle, handlerStart: LabelHandle, handlerEnd: LabelHandle) -> None: ...


class CustomAttributeArrayTypeEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def ElementType(self) -> CustomAttributeElementTypeEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def ObjectArray(self) -> None: ...


class CustomAttributeElementTypeEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def Boolean(self) -> None: ...
    def Byte(self) -> None: ...
    def Char(self) -> None: ...
    def Double(self) -> None: ...
    def Enum(self, enumTypeName: str) -> None: ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def Int16(self) -> None: ...
    def Int32(self) -> None: ...
    def Int64(self) -> None: ...
    def PrimitiveType(self, type: PrimitiveSerializationTypeCode) -> None: ...
    def SByte(self) -> None: ...
    def Single(self) -> None: ...
    def String(self) -> None: ...
    def SystemType(self) -> None: ...
    def UInt16(self) -> None: ...
    def UInt32(self) -> None: ...
    def UInt64(self) -> None: ...


class CustomAttributeNamedArgumentsEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def Count(self, count: int) -> NamedArgumentsEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...


class CustomModifiersEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def AddModifier(self, type: EntityHandle, isOptional: bool) -> CustomModifiersEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...


class EditAndContinueLogEntry(ValueType):
    def __init__(self, handle: EntityHandle, operation: EditAndContinueOperation): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: EditAndContinueLogEntry) -> bool: ...
    @property
    def Handle(self) -> EntityHandle: ...
    @property
    def Operation(self) -> EditAndContinueOperation: ...
    def GetHashCode(self) -> int: ...


class EditAndContinueOperation:
    Default = 0
    AddMethod = 1
    AddField = 2
    AddParameter = 3
    AddProperty = 4
    AddEvent = 5


class ExceptionRegionEncoder(ValueType):
    def Add(self, kind: ExceptionRegionKind, tryOffset: int, tryLength: int, handlerOffset: int, handlerLength: int, catchType: EntityHandle, filterOffset: int) -> ExceptionRegionEncoder: ...
    def AddCatch(self, tryOffset: int, tryLength: int, handlerOffset: int, handlerLength: int, catchType: EntityHandle) -> ExceptionRegionEncoder: ...
    def AddFault(self, tryOffset: int, tryLength: int, handlerOffset: int, handlerLength: int) -> ExceptionRegionEncoder: ...
    def AddFilter(self, tryOffset: int, tryLength: int, handlerOffset: int, handlerLength: int, filterOffset: int) -> ExceptionRegionEncoder: ...
    def AddFinally(self, tryOffset: int, tryLength: int, handlerOffset: int, handlerLength: int) -> ExceptionRegionEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...
    @property
    def HasSmallFormat(self) -> bool: ...
    def IsSmallExceptionRegion(startOffset: int, length: int) -> bool: ...
    def IsSmallRegionCount(exceptionRegionCount: int) -> bool: ...


class ExportedTypeExtensions(Object):
    def GetTypeDefinitionId(exportedType: ExportedType) -> int: ...


class FixedArgumentsEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def AddArgument(self) -> LiteralEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...


class FunctionPointerAttributes:
    #None = 0
    HasThis = 32
    HasExplicitThis = 96


class GenericTypeArgumentsEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def AddArgument(self) -> SignatureTypeEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...


class HeapIndex:
    UserString = 0
    String = 1
    Blob = 2
    Guid = 3


class InstructionEncoder(ValueType):
    def __init__(self, codeBuilder: BlobBuilder, controlFlowBuilder: ControlFlowBuilder): ...
    def Branch(self, code: ILOpCode, label: LabelHandle) -> None: ...
    @overload
    def Call(self, methodHandle: EntityHandle) -> None: ...
    @overload
    def Call(self, methodHandle: MethodDefinitionHandle) -> None: ...
    @overload
    def Call(self, methodHandle: MethodSpecificationHandle) -> None: ...
    @overload
    def Call(self, methodHandle: MemberReferenceHandle) -> None: ...
    def CallIndirect(self, signature: StandaloneSignatureHandle) -> None: ...
    def DefineLabel(self) -> LabelHandle: ...
    @property
    def CodeBuilder(self) -> BlobBuilder: ...
    @property
    def ControlFlowBuilder(self) -> ControlFlowBuilder: ...
    @property
    def Offset(self) -> int: ...
    def LoadArgument(self, argumentIndex: int) -> None: ...
    def LoadArgumentAddress(self, argumentIndex: int) -> None: ...
    def LoadConstantI4(self, value: int) -> None: ...
    def LoadConstantI8(self, value: Int64) -> None: ...
    def LoadConstantR4(self, value: Single) -> None: ...
    def LoadConstantR8(self, value: float) -> None: ...
    def LoadLocal(self, slotIndex: int) -> None: ...
    def LoadLocalAddress(self, slotIndex: int) -> None: ...
    def LoadString(self, handle: UserStringHandle) -> None: ...
    def MarkLabel(self, label: LabelHandle) -> None: ...
    def OpCode(self, code: ILOpCode) -> None: ...
    def StoreArgument(self, argumentIndex: int) -> None: ...
    def StoreLocal(self, slotIndex: int) -> None: ...
    @overload
    def Token(self, token: int) -> None: ...
    @overload
    def Token(self, handle: EntityHandle) -> None: ...


class LabelHandle(ValueType):
    @overload
    def Equals(self, other: LabelHandle) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Id(self) -> int: ...
    @property
    def IsNil(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: LabelHandle, right: LabelHandle) -> bool: ...
    def op_Inequality(left: LabelHandle, right: LabelHandle) -> bool: ...


class LiteralEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def Scalar(self) -> ScalarEncoder: ...
    @overload
    def TaggedScalar(self) -> Tuple[CustomAttributeElementTypeEncoder, ScalarEncoder]: ...
    @overload
    def TaggedScalar(self, type: Action, scalar: Action) -> None: ...
    @overload
    def TaggedVector(self) -> Tuple[CustomAttributeArrayTypeEncoder, VectorEncoder]: ...
    @overload
    def TaggedVector(self, arrayType: Action, vector: Action) -> None: ...
    def Vector(self) -> VectorEncoder: ...


class LiteralsEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def AddLiteral(self) -> LiteralEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...


class LocalVariablesEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def AddVariable(self) -> LocalVariableTypeEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...


class LocalVariableTypeEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def CustomModifiers(self) -> CustomModifiersEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def Type(self, isByRef: bool, isPinned: bool) -> SignatureTypeEncoder: ...
    def TypedReference(self) -> None: ...


class MetadataAggregator(Object):
    @overload
    def __init__(self, baseReader: MetadataReader, deltaReaders: IReadOnlyList): ...
    @overload
    def __init__(self, baseTableRowCounts: IReadOnlyList, baseHeapSizes: IReadOnlyList, deltaReaders: IReadOnlyList): ...
    def GetGenerationHandle(self, handle: Handle) -> Tuple[Handle, int]: ...


class MetadataBuilder(Object):
    def __init__(self, userStringHeapStartOffset: int, stringHeapStartOffset: int, blobHeapStartOffset: int, guidHeapStartOffset: int): ...
    def AddAssembly(self, name: StringHandle, version: Version, culture: StringHandle, publicKey: BlobHandle, flags: AssemblyFlags, hashAlgorithm: AssemblyHashAlgorithm) -> AssemblyDefinitionHandle: ...
    def AddAssemblyFile(self, name: StringHandle, hashValue: BlobHandle, containsMetadata: bool) -> AssemblyFileHandle: ...
    def AddAssemblyReference(self, name: StringHandle, version: Version, culture: StringHandle, publicKeyOrToken: BlobHandle, flags: AssemblyFlags, hashValue: BlobHandle) -> AssemblyReferenceHandle: ...
    def AddConstant(self, parent: EntityHandle, value: Object) -> ConstantHandle: ...
    def AddCustomAttribute(self, parent: EntityHandle, constructor: EntityHandle, value: BlobHandle) -> CustomAttributeHandle: ...
    def AddCustomDebugInformation(self, parent: EntityHandle, kind: GuidHandle, value: BlobHandle) -> CustomDebugInformationHandle: ...
    def AddDeclarativeSecurityAttribute(self, parent: EntityHandle, action: DeclarativeSecurityAction, permissionSet: BlobHandle) -> DeclarativeSecurityAttributeHandle: ...
    def AddDocument(self, name: BlobHandle, hashAlgorithm: GuidHandle, hash: BlobHandle, language: GuidHandle) -> DocumentHandle: ...
    def AddEncLogEntry(self, entity: EntityHandle, code: EditAndContinueOperation) -> None: ...
    def AddEncMapEntry(self, entity: EntityHandle) -> None: ...
    def AddEvent(self, attributes: EventAttributes, name: StringHandle, type: EntityHandle) -> EventDefinitionHandle: ...
    def AddEventMap(self, declaringType: TypeDefinitionHandle, eventList: EventDefinitionHandle) -> None: ...
    def AddExportedType(self, attributes: TypeAttributes, namespace: StringHandle, name: StringHandle, implementation: EntityHandle, typeDefinitionId: int) -> ExportedTypeHandle: ...
    def AddFieldDefinition(self, attributes: FieldAttributes, name: StringHandle, signature: BlobHandle) -> FieldDefinitionHandle: ...
    def AddFieldLayout(self, field: FieldDefinitionHandle, offset: int) -> None: ...
    def AddFieldRelativeVirtualAddress(self, field: FieldDefinitionHandle, offset: int) -> None: ...
    def AddGenericParameter(self, parent: EntityHandle, attributes: GenericParameterAttributes, name: StringHandle, index: int) -> GenericParameterHandle: ...
    def AddGenericParameterConstraint(self, genericParameter: GenericParameterHandle, constraint: EntityHandle) -> GenericParameterConstraintHandle: ...
    def AddImportScope(self, parentScope: ImportScopeHandle, imports: BlobHandle) -> ImportScopeHandle: ...
    def AddInterfaceImplementation(self, type: TypeDefinitionHandle, implementedInterface: EntityHandle) -> InterfaceImplementationHandle: ...
    def AddLocalConstant(self, name: StringHandle, signature: BlobHandle) -> LocalConstantHandle: ...
    def AddLocalScope(self, method: MethodDefinitionHandle, importScope: ImportScopeHandle, variableList: LocalVariableHandle, constantList: LocalConstantHandle, startOffset: int, length: int) -> LocalScopeHandle: ...
    def AddLocalVariable(self, attributes: LocalVariableAttributes, index: int, name: StringHandle) -> LocalVariableHandle: ...
    def AddManifestResource(self, attributes: ManifestResourceAttributes, name: StringHandle, implementation: EntityHandle, offset: UInt32) -> ManifestResourceHandle: ...
    def AddMarshallingDescriptor(self, parent: EntityHandle, descriptor: BlobHandle) -> None: ...
    def AddMemberReference(self, parent: EntityHandle, name: StringHandle, signature: BlobHandle) -> MemberReferenceHandle: ...
    def AddMethodDebugInformation(self, document: DocumentHandle, sequencePoints: BlobHandle) -> MethodDebugInformationHandle: ...
    def AddMethodDefinition(self, attributes: MethodAttributes, implAttributes: MethodImplAttributes, name: StringHandle, signature: BlobHandle, bodyOffset: int, parameterList: ParameterHandle) -> MethodDefinitionHandle: ...
    def AddMethodImplementation(self, type: TypeDefinitionHandle, methodBody: EntityHandle, methodDeclaration: EntityHandle) -> MethodImplementationHandle: ...
    def AddMethodImport(self, method: MethodDefinitionHandle, attributes: MethodImportAttributes, name: StringHandle, module: ModuleReferenceHandle) -> None: ...
    def AddMethodSemantics(self, association: EntityHandle, semantics: MethodSemanticsAttributes, methodDefinition: MethodDefinitionHandle) -> None: ...
    def AddMethodSpecification(self, method: EntityHandle, instantiation: BlobHandle) -> MethodSpecificationHandle: ...
    def AddModule(self, generation: int, moduleName: StringHandle, mvid: GuidHandle, encId: GuidHandle, encBaseId: GuidHandle) -> ModuleDefinitionHandle: ...
    def AddModuleReference(self, moduleName: StringHandle) -> ModuleReferenceHandle: ...
    def AddNestedType(self, type: TypeDefinitionHandle, enclosingType: TypeDefinitionHandle) -> None: ...
    def AddParameter(self, attributes: ParameterAttributes, name: StringHandle, sequenceNumber: int) -> ParameterHandle: ...
    def AddProperty(self, attributes: PropertyAttributes, name: StringHandle, signature: BlobHandle) -> PropertyDefinitionHandle: ...
    def AddPropertyMap(self, declaringType: TypeDefinitionHandle, propertyList: PropertyDefinitionHandle) -> None: ...
    def AddStandaloneSignature(self, signature: BlobHandle) -> StandaloneSignatureHandle: ...
    def AddStateMachineMethod(self, moveNextMethod: MethodDefinitionHandle, kickoffMethod: MethodDefinitionHandle) -> None: ...
    def AddTypeDefinition(self, attributes: TypeAttributes, namespace: StringHandle, name: StringHandle, baseType: EntityHandle, fieldList: FieldDefinitionHandle, methodList: MethodDefinitionHandle) -> TypeDefinitionHandle: ...
    def AddTypeLayout(self, type: TypeDefinitionHandle, packingSize: UInt16, size: UInt32) -> None: ...
    def AddTypeReference(self, resolutionScope: EntityHandle, namespace: StringHandle, name: StringHandle) -> TypeReferenceHandle: ...
    def AddTypeSpecification(self, signature: BlobHandle) -> TypeSpecificationHandle: ...
    @overload
    def GetOrAddBlob(self, value: BlobBuilder) -> BlobHandle: ...
    @overload
    def GetOrAddBlob(self, value: Set(Byte)) -> BlobHandle: ...
    @overload
    def GetOrAddBlob(self, value: ImmutableArray) -> BlobHandle: ...
    def GetOrAddBlobUTF16(self, value: str) -> BlobHandle: ...
    def GetOrAddBlobUTF8(self, value: str, allowUnpairedSurrogates: bool) -> BlobHandle: ...
    def GetOrAddConstantBlob(self, value: Object) -> BlobHandle: ...
    def GetOrAddDocumentName(self, value: str) -> BlobHandle: ...
    def GetOrAddGuid(self, guid: Guid) -> GuidHandle: ...
    def GetOrAddString(self, value: str) -> StringHandle: ...
    def GetOrAddUserString(self, value: str) -> UserStringHandle: ...
    def GetRowCount(self, table: TableIndex) -> int: ...
    def GetRowCounts(self) -> ImmutableArray: ...
    def ReserveGuid(self) -> ReservedBlob: ...
    def ReserveUserString(self, length: int) -> ReservedBlob: ...
    @overload
    def SetCapacity(self, table: TableIndex, rowCount: int) -> None: ...
    @overload
    def SetCapacity(self, heap: HeapIndex, byteCount: int) -> None: ...


class MetadataReaderExtensions(Object):
    def GetEditAndContinueLogEntries(reader: MetadataReader) -> Iterable[EditAndContinueLogEntry]: ...
    def GetEditAndContinueMapEntries(reader: MetadataReader) -> Iterable[EntityHandle]: ...
    def GetHeapMetadataOffset(reader: MetadataReader, heapIndex: HeapIndex) -> int: ...
    def GetHeapSize(reader: MetadataReader, heapIndex: HeapIndex) -> int: ...
    @overload
    def GetNextHandle(reader: MetadataReader, handle: UserStringHandle) -> UserStringHandle: ...
    @overload
    def GetNextHandle(reader: MetadataReader, handle: BlobHandle) -> BlobHandle: ...
    @overload
    def GetNextHandle(reader: MetadataReader, handle: StringHandle) -> StringHandle: ...
    def GetTableMetadataOffset(reader: MetadataReader, tableIndex: TableIndex) -> int: ...
    def GetTableRowCount(reader: MetadataReader, tableIndex: TableIndex) -> int: ...
    def GetTableRowSize(reader: MetadataReader, tableIndex: TableIndex) -> int: ...
    def GetTypesWithEvents(reader: MetadataReader) -> Iterable[TypeDefinitionHandle]: ...
    def GetTypesWithProperties(reader: MetadataReader) -> Iterable[TypeDefinitionHandle]: ...
    def ResolveSignatureTypeKind(reader: MetadataReader, typeHandle: EntityHandle, rawTypeKind: Byte) -> SignatureTypeKind: ...


class MetadataRootBuilder(Object):
    def __init__(self, tablesAndHeaps: MetadataBuilder, metadataVersion: str, suppressValidation: bool): ...
    @property
    def MetadataVersion(self) -> str: ...
    @property
    def Sizes(self) -> MetadataSizes: ...
    @property
    def SuppressValidation(self) -> bool: ...
    def Serialize(self, builder: BlobBuilder, methodBodyStreamRva: int, mappedFieldDataStreamRva: int) -> None: ...


class MetadataSizes(Object):
    @property
    def ExternalRowCounts(self) -> ImmutableArray: ...
    @property
    def HeapSizes(self) -> ImmutableArray: ...
    @property
    def RowCounts(self) -> ImmutableArray: ...
    def GetAlignedHeapSize(self, index: HeapIndex) -> int: ...


class MetadataTokens(Object):
    def AssemblyFileHandle(rowNumber: int) -> AssemblyFileHandle: ...
    def AssemblyReferenceHandle(rowNumber: int) -> AssemblyReferenceHandle: ...
    def BlobHandle(offset: int) -> BlobHandle: ...
    def ConstantHandle(rowNumber: int) -> ConstantHandle: ...
    def CustomAttributeHandle(rowNumber: int) -> CustomAttributeHandle: ...
    def CustomDebugInformationHandle(rowNumber: int) -> CustomDebugInformationHandle: ...
    def DeclarativeSecurityAttributeHandle(rowNumber: int) -> DeclarativeSecurityAttributeHandle: ...
    def DocumentHandle(rowNumber: int) -> DocumentHandle: ...
    def DocumentNameBlobHandle(offset: int) -> DocumentNameBlobHandle: ...
    @overload
    def EntityHandle(token: int) -> EntityHandle: ...
    @overload
    def EntityHandle(tableIndex: TableIndex, rowNumber: int) -> EntityHandle: ...
    def EventDefinitionHandle(rowNumber: int) -> EventDefinitionHandle: ...
    def ExportedTypeHandle(rowNumber: int) -> ExportedTypeHandle: ...
    def FieldDefinitionHandle(rowNumber: int) -> FieldDefinitionHandle: ...
    def GenericParameterConstraintHandle(rowNumber: int) -> GenericParameterConstraintHandle: ...
    def GenericParameterHandle(rowNumber: int) -> GenericParameterHandle: ...
    @overload
    def GetHeapOffset(handle: GuidHandle) -> int: ...
    @overload
    def GetHeapOffset(handle: Handle) -> int: ...
    @overload
    def GetHeapOffset(handle: BlobHandle) -> int: ...
    @overload
    def GetHeapOffset(handle: UserStringHandle) -> int: ...
    @overload
    def GetHeapOffset(handle: StringHandle) -> int: ...
    @overload
    def GetHeapOffset(reader: MetadataReader, handle: Handle) -> int: ...
    @overload
    def GetRowNumber(handle: EntityHandle) -> int: ...
    @overload
    def GetRowNumber(reader: MetadataReader, handle: EntityHandle) -> int: ...
    @overload
    def GetToken(handle: EntityHandle) -> int: ...
    @overload
    def GetToken(handle: Handle) -> int: ...
    @overload
    def GetToken(reader: MetadataReader, handle: EntityHandle) -> int: ...
    @overload
    def GetToken(reader: MetadataReader, handle: Handle) -> int: ...
    def GuidHandle(offset: int) -> GuidHandle: ...
    @overload
    def Handle(token: int) -> Handle: ...
    @overload
    def Handle(tableIndex: TableIndex, rowNumber: int) -> EntityHandle: ...
    def ImportScopeHandle(rowNumber: int) -> ImportScopeHandle: ...
    def InterfaceImplementationHandle(rowNumber: int) -> InterfaceImplementationHandle: ...
    def LocalConstantHandle(rowNumber: int) -> LocalConstantHandle: ...
    def LocalScopeHandle(rowNumber: int) -> LocalScopeHandle: ...
    def LocalVariableHandle(rowNumber: int) -> LocalVariableHandle: ...
    def ManifestResourceHandle(rowNumber: int) -> ManifestResourceHandle: ...
    def MemberReferenceHandle(rowNumber: int) -> MemberReferenceHandle: ...
    def MethodDebugInformationHandle(rowNumber: int) -> MethodDebugInformationHandle: ...
    def MethodDefinitionHandle(rowNumber: int) -> MethodDefinitionHandle: ...
    def MethodImplementationHandle(rowNumber: int) -> MethodImplementationHandle: ...
    def MethodSpecificationHandle(rowNumber: int) -> MethodSpecificationHandle: ...
    def ModuleReferenceHandle(rowNumber: int) -> ModuleReferenceHandle: ...
    def ParameterHandle(rowNumber: int) -> ParameterHandle: ...
    def PropertyDefinitionHandle(rowNumber: int) -> PropertyDefinitionHandle: ...
    def StandaloneSignatureHandle(rowNumber: int) -> StandaloneSignatureHandle: ...
    def StringHandle(offset: int) -> StringHandle: ...
    def TryGetHeapIndex(type: HandleKind) -> Tuple[bool, HeapIndex]: ...
    def TryGetTableIndex(type: HandleKind) -> Tuple[bool, TableIndex]: ...
    def TypeDefinitionHandle(rowNumber: int) -> TypeDefinitionHandle: ...
    def TypeReferenceHandle(rowNumber: int) -> TypeReferenceHandle: ...
    def TypeSpecificationHandle(rowNumber: int) -> TypeSpecificationHandle: ...
    def UserStringHandle(offset: int) -> UserStringHandle: ...


class MethodBody(ValueType):
    @property
    def ExceptionRegions(self) -> ExceptionRegionEncoder: ...
    @property
    def Instructions(self) -> Blob: ...
    @property
    def Offset(self) -> int: ...


class MethodBodyAttributes:
    #None = 0
    InitLocals = 1


class MethodBodyStreamEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    @overload
    def AddMethodBody(self, instructionEncoder: InstructionEncoder, maxStack: int, localVariablesSignature: StandaloneSignatureHandle, attributes: MethodBodyAttributes) -> int: ...
    @overload
    def AddMethodBody(self, instructionEncoder: InstructionEncoder, maxStack: int, localVariablesSignature: StandaloneSignatureHandle, attributes: MethodBodyAttributes, hasDynamicStackAllocation: bool) -> int: ...
    @overload
    def AddMethodBody(self, codeSize: int, maxStack: int, exceptionRegionCount: int, hasSmallExceptionRegions: bool, localVariablesSignature: StandaloneSignatureHandle, attributes: MethodBodyAttributes) -> MethodBody: ...
    @overload
    def AddMethodBody(self, codeSize: int, maxStack: int, exceptionRegionCount: int, hasSmallExceptionRegions: bool, localVariablesSignature: StandaloneSignatureHandle, attributes: MethodBodyAttributes, hasDynamicStackAllocation: bool) -> MethodBody: ...
    @property
    def Builder(self) -> BlobBuilder: ...


class MethodSignatureEncoder(ValueType):
    def __init__(self, builder: BlobBuilder, hasVarArgs: bool): ...
    @property
    def Builder(self) -> BlobBuilder: ...
    @property
    def HasVarArgs(self) -> bool: ...
    @overload
    def Parameters(self, parameterCount: int) -> Tuple[ReturnTypeEncoder, ParametersEncoder]: ...
    @overload
    def Parameters(self, parameterCount: int, returnType: Action, parameters: Action) -> None: ...


class NamedArgumentsEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    @overload
    def AddArgument(self, isField: bool) -> Tuple[NamedArgumentTypeEncoder, NameEncoder, LiteralEncoder]: ...
    @overload
    def AddArgument(self, isField: bool, type: Action, name: Action, literal: Action) -> None: ...
    @property
    def Builder(self) -> BlobBuilder: ...


class NamedArgumentTypeEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def Object(self) -> None: ...
    def ScalarType(self) -> CustomAttributeElementTypeEncoder: ...
    def SZArray(self) -> CustomAttributeArrayTypeEncoder: ...


class NameEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def Name(self, name: str) -> None: ...


class ParametersEncoder(ValueType):
    def __init__(self, builder: BlobBuilder, hasVarArgs: bool): ...
    def AddParameter(self) -> ParameterTypeEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...
    @property
    def HasVarArgs(self) -> bool: ...
    def StartVarArgs(self) -> ParametersEncoder: ...


class ParameterTypeEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def CustomModifiers(self) -> CustomModifiersEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def Type(self, isByRef: bool) -> SignatureTypeEncoder: ...
    def TypedReference(self) -> None: ...


class PermissionSetEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    @overload
    def AddPermission(self, typeName: str, encodedArguments: ImmutableArray) -> PermissionSetEncoder: ...
    @overload
    def AddPermission(self, typeName: str, encodedArguments: BlobBuilder) -> PermissionSetEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...


class PortablePdbBuilder(Object):
    def __init__(self, tablesAndHeaps: MetadataBuilder, typeSystemRowCounts: ImmutableArray, entryPoint: MethodDefinitionHandle, idProvider: Func): ...
    @property
    def FormatVersion(self) -> UInt16: ...
    @property
    def IdProvider(self) -> Func: ...
    @property
    def MetadataVersion(self) -> str: ...
    def Serialize(self, builder: BlobBuilder) -> BlobContentId: ...


class ReturnTypeEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def CustomModifiers(self) -> CustomModifiersEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def Type(self, isByRef: bool) -> SignatureTypeEncoder: ...
    def TypedReference(self) -> None: ...
    def Void(self) -> None: ...


class ScalarEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def Constant(self, value: Object) -> None: ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def NullArray(self) -> None: ...
    def SystemType(self, serializedTypeName: str) -> None: ...




class SignatureTypeEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    @overload
    def Array(self, elementType: Action, arrayShape: Action) -> None: ...
    @overload
    def Array(self) -> Tuple[SignatureTypeEncoder, ArrayShapeEncoder]: ...
    def Boolean(self) -> None: ...
    def Byte(self) -> None: ...
    def Char(self) -> None: ...
    def CustomModifiers(self) -> CustomModifiersEncoder: ...
    def Double(self) -> None: ...
    def FunctionPointer(self, convention: SignatureCallingConvention, attributes: FunctionPointerAttributes, genericParameterCount: int) -> MethodSignatureEncoder: ...
    def GenericInstantiation(self, genericType: EntityHandle, genericArgumentCount: int, isValueType: bool) -> GenericTypeArgumentsEncoder: ...
    def GenericMethodTypeParameter(self, parameterIndex: int) -> None: ...
    def GenericTypeParameter(self, parameterIndex: int) -> None: ...
    @property
    def Builder(self) -> BlobBuilder: ...
    def Int16(self) -> None: ...
    def Int32(self) -> None: ...
    def Int64(self) -> None: ...
    def IntPtr(self) -> None: ...
    def Object(self) -> None: ...
    def Pointer(self) -> SignatureTypeEncoder: ...
    def PrimitiveType(self, type: PrimitiveTypeCode) -> None: ...
    def SByte(self) -> None: ...
    def Single(self) -> None: ...
    def String(self) -> None: ...
    def SZArray(self) -> SignatureTypeEncoder: ...
    def Type(self, type: EntityHandle, isValueType: bool) -> None: ...
    def UInt16(self) -> None: ...
    def UInt32(self) -> None: ...
    def UInt64(self) -> None: ...
    def UIntPtr(self) -> None: ...
    def VoidPointer(self) -> None: ...


class TableIndex:
    Module = 0
    TypeRef = 1
    TypeDef = 2
    FieldPtr = 3
    Field = 4
    MethodPtr = 5
    MethodDef = 6
    ParamPtr = 7
    Param = 8
    InterfaceImpl = 9
    MemberRef = 10
    Constant = 11
    CustomAttribute = 12
    FieldMarshal = 13
    DeclSecurity = 14
    ClassLayout = 15
    FieldLayout = 16
    StandAloneSig = 17
    EventMap = 18
    EventPtr = 19
    Event = 20
    PropertyMap = 21
    PropertyPtr = 22
    Property = 23
    MethodSemantics = 24
    MethodImpl = 25
    ModuleRef = 26
    TypeSpec = 27
    ImplMap = 28
    FieldRva = 29
    EncLog = 30
    EncMap = 31
    Assembly = 32
    AssemblyProcessor = 33
    AssemblyOS = 34
    AssemblyRef = 35
    AssemblyRefProcessor = 36
    AssemblyRefOS = 37
    File = 38
    ExportedType = 39
    ManifestResource = 40
    NestedClass = 41
    GenericParam = 42
    MethodSpec = 43
    GenericParamConstraint = 44
    Document = 48
    MethodDebugInformation = 49
    LocalScope = 50
    LocalVariable = 51
    LocalConstant = 52
    ImportScope = 53
    StateMachineMethod = 54
    CustomDebugInformation = 55


class VectorEncoder(ValueType):
    def __init__(self, builder: BlobBuilder): ...
    def Count(self, count: int) -> LiteralsEncoder: ...
    @property
    def Builder(self) -> BlobBuilder: ...
