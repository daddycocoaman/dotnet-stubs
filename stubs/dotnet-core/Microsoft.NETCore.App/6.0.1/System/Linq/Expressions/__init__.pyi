__all__ = ['Interpreter']
from typing import Tuple, Set, Iterable, List


class BinaryExpression(Expression):
    @property
    def CanReduce(self) -> bool: ...
    @property
    def Conversion(self) -> LambdaExpression: ...
    @property
    def IsLifted(self) -> bool: ...
    @property
    def IsLiftedToNull(self) -> bool: ...
    @property
    def Left(self) -> Expression: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Right(self) -> Expression: ...
    def Reduce(self) -> Expression: ...
    def Update(self, left: Expression, conversion: LambdaExpression, right: Expression) -> BinaryExpression: ...


class BlockExpression(Expression):
    @property
    def Expressions(self) -> ReadOnlyCollection: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Result(self) -> Expression: ...
    @property
    def Type(self) -> Type: ...
    @property
    def Variables(self) -> ReadOnlyCollection: ...
    def Update(self, variables: Iterable[ParameterExpression], expressions: Iterable[Expression]) -> BlockExpression: ...


class CatchBlock(Object):
    @property
    def Body(self) -> Expression: ...
    @property
    def Filter(self) -> Expression: ...
    @property
    def Test(self) -> Type: ...
    @property
    def Variable(self) -> ParameterExpression: ...
    def ToString(self) -> str: ...
    def Update(self, variable: ParameterExpression, filter: Expression, body: Expression) -> CatchBlock: ...


class ConditionalExpression(Expression):
    @property
    def IfFalse(self) -> Expression: ...
    @property
    def IfTrue(self) -> Expression: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Test(self) -> Expression: ...
    @property
    def Type(self) -> Type: ...
    def Update(self, test: Expression, ifTrue: Expression, ifFalse: Expression) -> ConditionalExpression: ...


class ConstantExpression(Expression):
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    @property
    def Value(self) -> Object: ...


class DebugInfoExpression(Expression):
    @property
    def Document(self) -> SymbolDocumentInfo: ...
    @property
    def EndColumn(self) -> int: ...
    @property
    def EndLine(self) -> int: ...
    @property
    def IsClear(self) -> bool: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def StartColumn(self) -> int: ...
    @property
    def StartLine(self) -> int: ...
    @property
    def Type(self) -> Type: ...


class DefaultExpression(Expression):
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...


class DynamicExpression(Expression):
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arg0: Expression) -> DynamicExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arguments: Iterable[Expression]) -> DynamicExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arguments: Set(Expression)) -> DynamicExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arg0: Expression, arg1: Expression) -> DynamicExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arg0: Expression, arg1: Expression, arg2: Expression) -> DynamicExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arg0: Expression, arg1: Expression, arg2: Expression, arg3: Expression) -> DynamicExpression: ...
    @property
    def Arguments(self) -> ReadOnlyCollection: ...
    @property
    def Binder(self) -> CallSiteBinder: ...
    @property
    def CanReduce(self) -> bool: ...
    @property
    def DelegateType(self) -> Type: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arguments: Iterable[Expression]) -> DynamicExpression: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arguments: Set(Expression)) -> DynamicExpression: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arg0: Expression) -> DynamicExpression: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arg0: Expression, arg1: Expression) -> DynamicExpression: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arg0: Expression, arg1: Expression, arg2: Expression) -> DynamicExpression: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arg0: Expression, arg1: Expression, arg2: Expression, arg3: Expression) -> DynamicExpression: ...
    def Reduce(self) -> Expression: ...
    def Update(self, arguments: Iterable[Expression]) -> DynamicExpression: ...


class DynamicExpressionVisitor(ExpressionVisitor):
    def __init__(self): ...


class ElementInit(Object):
    @property
    def AddMethod(self) -> MethodInfo: ...
    @property
    def ArgumentCount(self) -> int: ...
    @property
    def Arguments(self) -> ReadOnlyCollection: ...
    def GetArgument(self, index: int) -> Expression: ...
    def ToString(self) -> str: ...
    def Update(self, arguments: Iterable[Expression]) -> ElementInit: ...


class Expression(Object):
    @overload
    def Add(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Add(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def AddAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def AddAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def AddAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def AddAssignChecked(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def AddAssignChecked(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def AddAssignChecked(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def AddChecked(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def AddChecked(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def And(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def And(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def AndAlso(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def AndAlso(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def AndAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def AndAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def AndAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def ArrayAccess(array: Expression, indexes: Iterable[Expression]) -> IndexExpression: ...
    @overload
    def ArrayAccess(array: Expression, indexes: Set(Expression)) -> IndexExpression: ...
    @overload
    def ArrayIndex(array: Expression, indexes: Iterable[Expression]) -> MethodCallExpression: ...
    @overload
    def ArrayIndex(array: Expression, index: Expression) -> BinaryExpression: ...
    @overload
    def ArrayIndex(array: Expression, indexes: Set(Expression)) -> MethodCallExpression: ...
    def ArrayLength(array: Expression) -> UnaryExpression: ...
    def Assign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Bind(propertyAccessor: MethodInfo, expression: Expression) -> MemberAssignment: ...
    @overload
    def Bind(member: MemberInfo, expression: Expression) -> MemberAssignment: ...
    @overload
    def Block(expressions: Iterable[Expression]) -> BlockExpression: ...
    @overload
    def Block(expressions: Set(Expression)) -> BlockExpression: ...
    @overload
    def Block(variables: Iterable[ParameterExpression], expressions: Set(Expression)) -> BlockExpression: ...
    @overload
    def Block(arg0: Expression, arg1: Expression) -> BlockExpression: ...
    @overload
    def Block(type: Type, expressions: Set(Expression)) -> BlockExpression: ...
    @overload
    def Block(type: Type, expressions: Iterable[Expression]) -> BlockExpression: ...
    @overload
    def Block(variables: Iterable[ParameterExpression], expressions: Iterable[Expression]) -> BlockExpression: ...
    @overload
    def Block(arg0: Expression, arg1: Expression, arg2: Expression) -> BlockExpression: ...
    @overload
    def Block(type: Type, variables: Iterable[ParameterExpression], expressions: Set(Expression)) -> BlockExpression: ...
    @overload
    def Block(type: Type, variables: Iterable[ParameterExpression], expressions: Iterable[Expression]) -> BlockExpression: ...
    @overload
    def Block(arg0: Expression, arg1: Expression, arg2: Expression, arg3: Expression) -> BlockExpression: ...
    @overload
    def Block(arg0: Expression, arg1: Expression, arg2: Expression, arg3: Expression, arg4: Expression) -> BlockExpression: ...
    @overload
    def Break(target: LabelTarget) -> GotoExpression: ...
    @overload
    def Break(target: LabelTarget, type: Type) -> GotoExpression: ...
    @overload
    def Break(target: LabelTarget, value: Expression) -> GotoExpression: ...
    @overload
    def Break(target: LabelTarget, value: Expression, type: Type) -> GotoExpression: ...
    @overload
    def Call(method: MethodInfo, arg0: Expression) -> MethodCallExpression: ...
    @overload
    def Call(method: MethodInfo, arguments: Set(Expression)) -> MethodCallExpression: ...
    @overload
    def Call(method: MethodInfo, arguments: Iterable[Expression]) -> MethodCallExpression: ...
    @overload
    def Call(instance: Expression, method: MethodInfo) -> MethodCallExpression: ...
    @overload
    def Call(instance: Expression, method: MethodInfo, arguments: Set(Expression)) -> MethodCallExpression: ...
    @overload
    def Call(method: MethodInfo, arg0: Expression, arg1: Expression) -> MethodCallExpression: ...
    @overload
    def Call(instance: Expression, method: MethodInfo, arguments: Iterable[Expression]) -> MethodCallExpression: ...
    @overload
    def Call(method: MethodInfo, arg0: Expression, arg1: Expression, arg2: Expression) -> MethodCallExpression: ...
    @overload
    def Call(instance: Expression, method: MethodInfo, arg0: Expression, arg1: Expression) -> MethodCallExpression: ...
    @overload
    def Call(instance: Expression, methodName: str, typeArguments: Set(Type), arguments: Set(Expression)) -> MethodCallExpression: ...
    @overload
    def Call(type: Type, methodName: str, typeArguments: Set(Type), arguments: Set(Expression)) -> MethodCallExpression: ...
    @overload
    def Call(method: MethodInfo, arg0: Expression, arg1: Expression, arg2: Expression, arg3: Expression) -> MethodCallExpression: ...
    @overload
    def Call(instance: Expression, method: MethodInfo, arg0: Expression, arg1: Expression, arg2: Expression) -> MethodCallExpression: ...
    @overload
    def Call(method: MethodInfo, arg0: Expression, arg1: Expression, arg2: Expression, arg3: Expression, arg4: Expression) -> MethodCallExpression: ...
    @overload
    def Catch(type: Type, body: Expression) -> CatchBlock: ...
    @overload
    def Catch(variable: ParameterExpression, body: Expression) -> CatchBlock: ...
    @overload
    def Catch(type: Type, body: Expression, filter: Expression) -> CatchBlock: ...
    @overload
    def Catch(variable: ParameterExpression, body: Expression, filter: Expression) -> CatchBlock: ...
    def ClearDebugInfo(document: SymbolDocumentInfo) -> DebugInfoExpression: ...
    @overload
    def Coalesce(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Coalesce(left: Expression, right: Expression, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def Condition(test: Expression, ifTrue: Expression, ifFalse: Expression) -> ConditionalExpression: ...
    @overload
    def Condition(test: Expression, ifTrue: Expression, ifFalse: Expression, type: Type) -> ConditionalExpression: ...
    @overload
    def Constant(value: Object) -> ConstantExpression: ...
    @overload
    def Constant(value: Object, type: Type) -> ConstantExpression: ...
    @overload
    def Continue(target: LabelTarget) -> GotoExpression: ...
    @overload
    def Continue(target: LabelTarget, type: Type) -> GotoExpression: ...
    @overload
    def Convert(expression: Expression, type: Type) -> UnaryExpression: ...
    @overload
    def Convert(expression: Expression, type: Type, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def ConvertChecked(expression: Expression, type: Type) -> UnaryExpression: ...
    @overload
    def ConvertChecked(expression: Expression, type: Type, method: MethodInfo) -> UnaryExpression: ...
    def DebugInfo(document: SymbolDocumentInfo, startLine: int, startColumn: int, endLine: int, endColumn: int) -> DebugInfoExpression: ...
    @overload
    def Decrement(expression: Expression) -> UnaryExpression: ...
    @overload
    def Decrement(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    def Default(type: Type) -> DefaultExpression: ...
    @overload
    def Divide(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Divide(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def DivideAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def DivideAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def DivideAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arguments: Set(Expression)) -> DynamicExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arg0: Expression) -> DynamicExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arguments: Iterable[Expression]) -> DynamicExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arg0: Expression, arg1: Expression) -> DynamicExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arg0: Expression, arg1: Expression, arg2: Expression) -> DynamicExpression: ...
    @overload
    def Dynamic(binder: CallSiteBinder, returnType: Type, arg0: Expression, arg1: Expression, arg2: Expression, arg3: Expression) -> DynamicExpression: ...
    @overload
    def ElementInit(addMethod: MethodInfo, arguments: Set(Expression)) -> ElementInit: ...
    @overload
    def ElementInit(addMethod: MethodInfo, arguments: Iterable[Expression]) -> ElementInit: ...
    def Empty() -> DefaultExpression: ...
    @overload
    def Equal(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Equal(left: Expression, right: Expression, liftToNull: bool, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def ExclusiveOr(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def ExclusiveOr(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def ExclusiveOrAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def ExclusiveOrAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def ExclusiveOrAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def Field(expression: Expression, field: FieldInfo) -> MemberExpression: ...
    @overload
    def Field(expression: Expression, fieldName: str) -> MemberExpression: ...
    @overload
    def Field(expression: Expression, type: Type, fieldName: str) -> MemberExpression: ...
    @property
    def CanReduce(self) -> bool: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    def GetActionType(typeArgs: Set(Type)) -> Type: ...
    def GetDelegateType(typeArgs: Set(Type)) -> Type: ...
    def GetFuncType(typeArgs: Set(Type)) -> Type: ...
    @overload
    def Goto(target: LabelTarget) -> GotoExpression: ...
    @overload
    def Goto(target: LabelTarget, value: Expression) -> GotoExpression: ...
    @overload
    def Goto(target: LabelTarget, type: Type) -> GotoExpression: ...
    @overload
    def Goto(target: LabelTarget, value: Expression, type: Type) -> GotoExpression: ...
    @overload
    def GreaterThan(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def GreaterThan(left: Expression, right: Expression, liftToNull: bool, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def GreaterThanOrEqual(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def GreaterThanOrEqual(left: Expression, right: Expression, liftToNull: bool, method: MethodInfo) -> BinaryExpression: ...
    def IfThen(test: Expression, ifTrue: Expression) -> ConditionalExpression: ...
    def IfThenElse(test: Expression, ifTrue: Expression, ifFalse: Expression) -> ConditionalExpression: ...
    @overload
    def Increment(expression: Expression) -> UnaryExpression: ...
    @overload
    def Increment(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def Invoke(expression: Expression, arguments: Set(Expression)) -> InvocationExpression: ...
    @overload
    def Invoke(expression: Expression, arguments: Iterable[Expression]) -> InvocationExpression: ...
    @overload
    def IsFalse(expression: Expression) -> UnaryExpression: ...
    @overload
    def IsFalse(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def IsTrue(expression: Expression) -> UnaryExpression: ...
    @overload
    def IsTrue(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def Label() -> LabelTarget: ...
    @overload
    def Label(name: str) -> LabelTarget: ...
    @overload
    def Label(target: LabelTarget) -> LabelExpression: ...
    @overload
    def Label(type: Type) -> LabelTarget: ...
    @overload
    def Label(type: Type, name: str) -> LabelTarget: ...
    @overload
    def Label(target: LabelTarget, defaultValue: Expression) -> LabelExpression: ...
    @overload
    def Lambda(body: Expression, parameters: Set(ParameterExpression)) -> Expression: ...
    @overload
    def Lambda(body: Expression, parameters: Iterable[ParameterExpression]) -> Expression: ...
    @overload
    def Lambda(body: Expression, parameters: Set(ParameterExpression)) -> LambdaExpression: ...
    @overload
    def Lambda(body: Expression, parameters: Iterable[ParameterExpression]) -> LambdaExpression: ...
    @overload
    def Lambda(body: Expression, tailCall: bool, parameters: Iterable[ParameterExpression]) -> Expression: ...
    @overload
    def Lambda(body: Expression, tailCall: bool, parameters: Set(ParameterExpression)) -> LambdaExpression: ...
    @overload
    def Lambda(body: Expression, tailCall: bool, parameters: Iterable[ParameterExpression]) -> LambdaExpression: ...
    @overload
    def Lambda(delegateType: Type, body: Expression, parameters: Iterable[ParameterExpression]) -> LambdaExpression: ...
    @overload
    def Lambda(body: Expression, name: str, parameters: Iterable[ParameterExpression]) -> LambdaExpression: ...
    @overload
    def Lambda(body: Expression, tailCall: bool, parameters: Set(ParameterExpression)) -> Expression: ...
    @overload
    def Lambda(body: Expression, name: str, parameters: Iterable[ParameterExpression]) -> Expression: ...
    @overload
    def Lambda(delegateType: Type, body: Expression, parameters: Set(ParameterExpression)) -> LambdaExpression: ...
    @overload
    def Lambda(delegateType: Type, body: Expression, tailCall: bool, parameters: Set(ParameterExpression)) -> LambdaExpression: ...
    @overload
    def Lambda(delegateType: Type, body: Expression, name: str, parameters: Iterable[ParameterExpression]) -> LambdaExpression: ...
    @overload
    def Lambda(body: Expression, name: str, tailCall: bool, parameters: Iterable[ParameterExpression]) -> LambdaExpression: ...
    @overload
    def Lambda(delegateType: Type, body: Expression, tailCall: bool, parameters: Iterable[ParameterExpression]) -> LambdaExpression: ...
    @overload
    def Lambda(body: Expression, name: str, tailCall: bool, parameters: Iterable[ParameterExpression]) -> Expression: ...
    @overload
    def Lambda(delegateType: Type, body: Expression, name: str, tailCall: bool, parameters: Iterable[ParameterExpression]) -> LambdaExpression: ...
    @overload
    def LeftShift(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def LeftShift(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def LeftShiftAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def LeftShiftAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def LeftShiftAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def LessThan(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def LessThan(left: Expression, right: Expression, liftToNull: bool, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def LessThanOrEqual(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def LessThanOrEqual(left: Expression, right: Expression, liftToNull: bool, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def ListBind(member: MemberInfo, initializers: Iterable[ElementInit]) -> MemberListBinding: ...
    @overload
    def ListBind(propertyAccessor: MethodInfo, initializers: Set(ElementInit)) -> MemberListBinding: ...
    @overload
    def ListBind(propertyAccessor: MethodInfo, initializers: Iterable[ElementInit]) -> MemberListBinding: ...
    @overload
    def ListBind(member: MemberInfo, initializers: Set(ElementInit)) -> MemberListBinding: ...
    @overload
    def ListInit(newExpression: NewExpression, initializers: Set(Expression)) -> ListInitExpression: ...
    @overload
    def ListInit(newExpression: NewExpression, initializers: Iterable[Expression]) -> ListInitExpression: ...
    @overload
    def ListInit(newExpression: NewExpression, initializers: Set(ElementInit)) -> ListInitExpression: ...
    @overload
    def ListInit(newExpression: NewExpression, initializers: Iterable[ElementInit]) -> ListInitExpression: ...
    @overload
    def ListInit(newExpression: NewExpression, addMethod: MethodInfo, initializers: Set(Expression)) -> ListInitExpression: ...
    @overload
    def ListInit(newExpression: NewExpression, addMethod: MethodInfo, initializers: Iterable[Expression]) -> ListInitExpression: ...
    @overload
    def Loop(body: Expression) -> LoopExpression: ...
    @overload
    def Loop(body: Expression, break: LabelTarget) -> LoopExpression: ...
    @overload
    def Loop(body: Expression, break: LabelTarget, continue: LabelTarget) -> LoopExpression: ...
    @overload
    def MakeBinary(binaryType: ExpressionType, left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def MakeBinary(binaryType: ExpressionType, left: Expression, right: Expression, liftToNull: bool, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def MakeBinary(binaryType: ExpressionType, left: Expression, right: Expression, liftToNull: bool, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    def MakeCatchBlock(type: Type, variable: ParameterExpression, body: Expression, filter: Expression) -> CatchBlock: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arg0: Expression) -> DynamicExpression: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arguments: Iterable[Expression]) -> DynamicExpression: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arguments: Set(Expression)) -> DynamicExpression: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arg0: Expression, arg1: Expression) -> DynamicExpression: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arg0: Expression, arg1: Expression, arg2: Expression) -> DynamicExpression: ...
    @overload
    def MakeDynamic(delegateType: Type, binder: CallSiteBinder, arg0: Expression, arg1: Expression, arg2: Expression, arg3: Expression) -> DynamicExpression: ...
    def MakeGoto(kind: GotoExpressionKind, target: LabelTarget, value: Expression, type: Type) -> GotoExpression: ...
    def MakeIndex(instance: Expression, indexer: PropertyInfo, arguments: Iterable[Expression]) -> IndexExpression: ...
    def MakeMemberAccess(expression: Expression, member: MemberInfo) -> MemberExpression: ...
    def MakeTry(type: Type, body: Expression, finally: Expression, fault: Expression, handlers: Iterable[CatchBlock]) -> TryExpression: ...
    @overload
    def MakeUnary(unaryType: ExpressionType, operand: Expression, type: Type) -> UnaryExpression: ...
    @overload
    def MakeUnary(unaryType: ExpressionType, operand: Expression, type: Type, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def MemberBind(member: MemberInfo, bindings: Iterable[MemberBinding]) -> MemberMemberBinding: ...
    @overload
    def MemberBind(member: MemberInfo, bindings: Set(MemberBinding)) -> MemberMemberBinding: ...
    @overload
    def MemberBind(propertyAccessor: MethodInfo, bindings: Iterable[MemberBinding]) -> MemberMemberBinding: ...
    @overload
    def MemberBind(propertyAccessor: MethodInfo, bindings: Set(MemberBinding)) -> MemberMemberBinding: ...
    @overload
    def MemberInit(newExpression: NewExpression, bindings: Set(MemberBinding)) -> MemberInitExpression: ...
    @overload
    def MemberInit(newExpression: NewExpression, bindings: Iterable[MemberBinding]) -> MemberInitExpression: ...
    @overload
    def Modulo(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Modulo(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def ModuloAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def ModuloAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def ModuloAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def Multiply(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Multiply(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def MultiplyAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def MultiplyAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def MultiplyAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def MultiplyAssignChecked(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def MultiplyAssignChecked(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def MultiplyAssignChecked(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def MultiplyChecked(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def MultiplyChecked(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def Negate(expression: Expression) -> UnaryExpression: ...
    @overload
    def Negate(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def NegateChecked(expression: Expression) -> UnaryExpression: ...
    @overload
    def NegateChecked(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def New(constructor: ConstructorInfo) -> NewExpression: ...
    @overload
    def New(type: Type) -> NewExpression: ...
    @overload
    def New(constructor: ConstructorInfo, arguments: Iterable[Expression]) -> NewExpression: ...
    @overload
    def New(constructor: ConstructorInfo, arguments: Set(Expression)) -> NewExpression: ...
    @overload
    def New(constructor: ConstructorInfo, arguments: Iterable[Expression], members: Iterable[MemberInfo]) -> NewExpression: ...
    @overload
    def New(constructor: ConstructorInfo, arguments: Iterable[Expression], members: Set(MemberInfo)) -> NewExpression: ...
    @overload
    def NewArrayBounds(type: Type, bounds: Set(Expression)) -> NewArrayExpression: ...
    @overload
    def NewArrayBounds(type: Type, bounds: Iterable[Expression]) -> NewArrayExpression: ...
    @overload
    def NewArrayInit(type: Type, initializers: Iterable[Expression]) -> NewArrayExpression: ...
    @overload
    def NewArrayInit(type: Type, initializers: Set(Expression)) -> NewArrayExpression: ...
    @overload
    def Not(expression: Expression) -> UnaryExpression: ...
    @overload
    def Not(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def NotEqual(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def NotEqual(left: Expression, right: Expression, liftToNull: bool, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def OnesComplement(expression: Expression) -> UnaryExpression: ...
    @overload
    def OnesComplement(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def Or(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Or(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def OrAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def OrAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def OrAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def OrElse(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def OrElse(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def Parameter(type: Type) -> ParameterExpression: ...
    @overload
    def Parameter(type: Type, name: str) -> ParameterExpression: ...
    @overload
    def PostDecrementAssign(expression: Expression) -> UnaryExpression: ...
    @overload
    def PostDecrementAssign(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def PostIncrementAssign(expression: Expression) -> UnaryExpression: ...
    @overload
    def PostIncrementAssign(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def Power(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Power(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def PowerAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def PowerAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def PowerAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def PreDecrementAssign(expression: Expression) -> UnaryExpression: ...
    @overload
    def PreDecrementAssign(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def PreIncrementAssign(expression: Expression) -> UnaryExpression: ...
    @overload
    def PreIncrementAssign(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    @overload
    def Property(expression: Expression, propertyName: str) -> MemberExpression: ...
    @overload
    def Property(expression: Expression, property: PropertyInfo) -> MemberExpression: ...
    @overload
    def Property(expression: Expression, propertyAccessor: MethodInfo) -> MemberExpression: ...
    @overload
    def Property(instance: Expression, indexer: PropertyInfo, arguments: Set(Expression)) -> IndexExpression: ...
    @overload
    def Property(expression: Expression, type: Type, propertyName: str) -> MemberExpression: ...
    @overload
    def Property(instance: Expression, indexer: PropertyInfo, arguments: Iterable[Expression]) -> IndexExpression: ...
    @overload
    def Property(instance: Expression, propertyName: str, arguments: Set(Expression)) -> IndexExpression: ...
    def PropertyOrField(expression: Expression, propertyOrFieldName: str) -> MemberExpression: ...
    def Quote(expression: Expression) -> UnaryExpression: ...
    def Reduce(self) -> Expression: ...
    def ReduceAndCheck(self) -> Expression: ...
    def ReduceExtensions(self) -> Expression: ...
    def ReferenceEqual(left: Expression, right: Expression) -> BinaryExpression: ...
    def ReferenceNotEqual(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Rethrow() -> UnaryExpression: ...
    @overload
    def Rethrow(type: Type) -> UnaryExpression: ...
    @overload
    def Return(target: LabelTarget) -> GotoExpression: ...
    @overload
    def Return(target: LabelTarget, value: Expression) -> GotoExpression: ...
    @overload
    def Return(target: LabelTarget, type: Type) -> GotoExpression: ...
    @overload
    def Return(target: LabelTarget, value: Expression, type: Type) -> GotoExpression: ...
    @overload
    def RightShift(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def RightShift(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def RightShiftAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def RightShiftAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def RightShiftAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def RuntimeVariables(variables: Iterable[ParameterExpression]) -> RuntimeVariablesExpression: ...
    @overload
    def RuntimeVariables(variables: Set(ParameterExpression)) -> RuntimeVariablesExpression: ...
    @overload
    def Subtract(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def Subtract(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def SubtractAssign(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def SubtractAssign(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def SubtractAssign(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def SubtractAssignChecked(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def SubtractAssignChecked(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def SubtractAssignChecked(left: Expression, right: Expression, method: MethodInfo, conversion: LambdaExpression) -> BinaryExpression: ...
    @overload
    def SubtractChecked(left: Expression, right: Expression) -> BinaryExpression: ...
    @overload
    def SubtractChecked(left: Expression, right: Expression, method: MethodInfo) -> BinaryExpression: ...
    @overload
    def Switch(switchValue: Expression, cases: Set(SwitchCase)) -> SwitchExpression: ...
    @overload
    def Switch(switchValue: Expression, defaultBody: Expression, cases: Set(SwitchCase)) -> SwitchExpression: ...
    @overload
    def Switch(switchValue: Expression, defaultBody: Expression, comparison: MethodInfo, cases: Iterable[SwitchCase]) -> SwitchExpression: ...
    @overload
    def Switch(switchValue: Expression, defaultBody: Expression, comparison: MethodInfo, cases: Set(SwitchCase)) -> SwitchExpression: ...
    @overload
    def Switch(type: Type, switchValue: Expression, defaultBody: Expression, comparison: MethodInfo, cases: Iterable[SwitchCase]) -> SwitchExpression: ...
    @overload
    def Switch(type: Type, switchValue: Expression, defaultBody: Expression, comparison: MethodInfo, cases: Set(SwitchCase)) -> SwitchExpression: ...
    @overload
    def SwitchCase(body: Expression, testValues: Iterable[Expression]) -> SwitchCase: ...
    @overload
    def SwitchCase(body: Expression, testValues: Set(Expression)) -> SwitchCase: ...
    @overload
    def SymbolDocument(fileName: str) -> SymbolDocumentInfo: ...
    @overload
    def SymbolDocument(fileName: str, language: Guid) -> SymbolDocumentInfo: ...
    @overload
    def SymbolDocument(fileName: str, language: Guid, languageVendor: Guid) -> SymbolDocumentInfo: ...
    @overload
    def SymbolDocument(fileName: str, language: Guid, languageVendor: Guid, documentType: Guid) -> SymbolDocumentInfo: ...
    @overload
    def Throw(value: Expression) -> UnaryExpression: ...
    @overload
    def Throw(value: Expression, type: Type) -> UnaryExpression: ...
    def ToString(self) -> str: ...
    def TryCatch(body: Expression, handlers: Set(CatchBlock)) -> TryExpression: ...
    def TryCatchFinally(body: Expression, finally: Expression, handlers: Set(CatchBlock)) -> TryExpression: ...
    def TryFault(body: Expression, fault: Expression) -> TryExpression: ...
    def TryFinally(body: Expression, finally: Expression) -> TryExpression: ...
    def TryGetActionType(typeArgs: Set(Type)) -> Tuple[bool, Type]: ...
    def TryGetFuncType(typeArgs: Set(Type)) -> Tuple[bool, Type]: ...
    def TypeAs(expression: Expression, type: Type) -> UnaryExpression: ...
    def TypeEqual(expression: Expression, type: Type) -> TypeBinaryExpression: ...
    def TypeIs(expression: Expression, type: Type) -> TypeBinaryExpression: ...
    @overload
    def UnaryPlus(expression: Expression) -> UnaryExpression: ...
    @overload
    def UnaryPlus(expression: Expression, method: MethodInfo) -> UnaryExpression: ...
    def Unbox(expression: Expression, type: Type) -> UnaryExpression: ...
    @overload
    def Variable(type: Type) -> ParameterExpression: ...
    @overload
    def Variable(type: Type, name: str) -> ParameterExpression: ...




class ExpressionType:
    Add = 0
    AddChecked = 1
    And = 2
    AndAlso = 3
    ArrayLength = 4
    ArrayIndex = 5
    Call = 6
    Coalesce = 7
    Conditional = 8
    Constant = 9
    Convert = 10
    ConvertChecked = 11
    Divide = 12
    Equal = 13
    ExclusiveOr = 14
    GreaterThan = 15
    GreaterThanOrEqual = 16
    Invoke = 17
    Lambda = 18
    LeftShift = 19
    LessThan = 20
    LessThanOrEqual = 21
    ListInit = 22
    MemberAccess = 23
    MemberInit = 24
    Modulo = 25
    Multiply = 26
    MultiplyChecked = 27
    Negate = 28
    UnaryPlus = 29
    NegateChecked = 30
    New = 31
    NewArrayInit = 32
    NewArrayBounds = 33
    Not = 34
    NotEqual = 35
    Or = 36
    OrElse = 37
    Parameter = 38
    Power = 39
    Quote = 40
    RightShift = 41
    Subtract = 42
    SubtractChecked = 43
    TypeAs = 44
    TypeIs = 45
    Assign = 46
    Block = 47
    DebugInfo = 48
    Decrement = 49
    Dynamic = 50
    Default = 51
    Extension = 52
    Goto = 53
    Increment = 54
    Index = 55
    Label = 56
    RuntimeVariables = 57
    Loop = 58
    Switch = 59
    Throw = 60
    Try = 61
    Unbox = 62
    AddAssign = 63
    AndAssign = 64
    DivideAssign = 65
    ExclusiveOrAssign = 66
    LeftShiftAssign = 67
    ModuloAssign = 68
    MultiplyAssign = 69
    OrAssign = 70
    PowerAssign = 71
    RightShiftAssign = 72
    SubtractAssign = 73
    AddAssignChecked = 74
    MultiplyAssignChecked = 75
    SubtractAssignChecked = 76
    PreIncrementAssign = 77
    PreDecrementAssign = 78
    PostIncrementAssign = 79
    PostDecrementAssign = 80
    TypeEqual = 81
    OnesComplement = 82
    IsTrue = 83
    IsFalse = 84


class ExpressionVisitor(Object):
    @overload
    def Visit(self, node: Expression) -> Expression: ...
    @overload
    def Visit(self, nodes: ReadOnlyCollection) -> ReadOnlyCollection: ...
    @overload
    def Visit(nodes: ReadOnlyCollection, elementVisitor: Func) -> ReadOnlyCollection: ...
    @overload
    def VisitAndConvert(self, node: T, callerName: str) -> T: ...
    @overload
    def VisitAndConvert(self, nodes: ReadOnlyCollection, callerName: str) -> ReadOnlyCollection: ...


class GotoExpression(Expression):
    @property
    def Kind(self) -> GotoExpressionKind: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Target(self) -> LabelTarget: ...
    @property
    def Type(self) -> Type: ...
    @property
    def Value(self) -> Expression: ...
    def Update(self, target: LabelTarget, value: Expression) -> GotoExpression: ...


class GotoExpressionKind:
    Goto = 0
    Return = 1
    Break = 2
    Continue = 3


class IArgumentProvider:
    @property
    def ArgumentCount(self) -> int: ...
    def GetArgument(self, index: int) -> Expression: ...


class IDynamicExpression:
    def CreateCallSite(self) -> Object: ...
    @property
    def DelegateType(self) -> Type: ...
    def Rewrite(self, args: Set(Expression)) -> Expression: ...


class IndexExpression(Expression):
    @property
    def ArgumentCount(self) -> int: ...
    @property
    def Arguments(self) -> ReadOnlyCollection: ...
    @property
    def Indexer(self) -> PropertyInfo: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Object(self) -> Expression: ...
    @property
    def Type(self) -> Type: ...
    def GetArgument(self, index: int) -> Expression: ...
    def Update(self, object: Expression, arguments: Iterable[Expression]) -> IndexExpression: ...


class InvocationExpression(Expression):
    @property
    def ArgumentCount(self) -> int: ...
    @property
    def Arguments(self) -> ReadOnlyCollection: ...
    @property
    def Expression(self) -> Expression: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    def GetArgument(self, index: int) -> Expression: ...
    def Update(self, expression: Expression, arguments: Iterable[Expression]) -> InvocationExpression: ...


class LabelExpression(Expression):
    @property
    def DefaultValue(self) -> Expression: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Target(self) -> LabelTarget: ...
    @property
    def Type(self) -> Type: ...
    def Update(self, target: LabelTarget, defaultValue: Expression) -> LabelExpression: ...


class LabelTarget(Object):
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    def ToString(self) -> str: ...


class LambdaExpression(Expression):
    @overload
    def Compile(self) -> Delegate: ...
    @overload
    def Compile(self, preferInterpretation: bool) -> Delegate: ...
    @overload
    def Compile(self, debugInfoGenerator: DebugInfoGenerator) -> Delegate: ...
    @property
    def Body(self) -> Expression: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Parameters(self) -> ReadOnlyCollection: ...
    @property
    def ReturnType(self) -> Type: ...
    @property
    def TailCall(self) -> bool: ...
    @property
    def Type(self) -> Type: ...


class ListInitExpression(Expression):
    @property
    def CanReduce(self) -> bool: ...
    @property
    def Initializers(self) -> ReadOnlyCollection: ...
    @property
    def NewExpression(self) -> NewExpression: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    def Reduce(self) -> Expression: ...
    def Update(self, newExpression: NewExpression, initializers: Iterable[ElementInit]) -> ListInitExpression: ...


class LoopExpression(Expression):
    @property
    def Body(self) -> Expression: ...
    @property
    def BreakLabel(self) -> LabelTarget: ...
    @property
    def ContinueLabel(self) -> LabelTarget: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    def Update(self, breakLabel: LabelTarget, continueLabel: LabelTarget, body: Expression) -> LoopExpression: ...


class MemberAssignment(MemberBinding):
    @property
    def Expression(self) -> Expression: ...
    def Update(self, expression: Expression) -> MemberAssignment: ...


class MemberBinding(Object):
    @property
    def BindingType(self) -> MemberBindingType: ...
    @property
    def Member(self) -> MemberInfo: ...
    def ToString(self) -> str: ...


class MemberBindingType:
    Assignment = 0
    MemberBinding = 1
    ListBinding = 2


class MemberExpression(Expression):
    @property
    def Expression(self) -> Expression: ...
    @property
    def Member(self) -> MemberInfo: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    def Update(self, expression: Expression) -> MemberExpression: ...


class MemberInitExpression(Expression):
    @property
    def Bindings(self) -> ReadOnlyCollection: ...
    @property
    def CanReduce(self) -> bool: ...
    @property
    def NewExpression(self) -> NewExpression: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    def Reduce(self) -> Expression: ...
    def Update(self, newExpression: NewExpression, bindings: Iterable[MemberBinding]) -> MemberInitExpression: ...


class MemberListBinding(MemberBinding):
    @property
    def Initializers(self) -> ReadOnlyCollection: ...
    def Update(self, initializers: Iterable[ElementInit]) -> MemberListBinding: ...


class MemberMemberBinding(MemberBinding):
    @property
    def Bindings(self) -> ReadOnlyCollection: ...
    def Update(self, bindings: Iterable[MemberBinding]) -> MemberMemberBinding: ...


class MethodCallExpression(Expression):
    @property
    def ArgumentCount(self) -> int: ...
    @property
    def Arguments(self) -> ReadOnlyCollection: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Object(self) -> Expression: ...
    @property
    def Type(self) -> Type: ...
    def GetArgument(self, index: int) -> Expression: ...
    def Update(self, object: Expression, arguments: Iterable[Expression]) -> MethodCallExpression: ...


class NewArrayExpression(Expression):
    @property
    def Expressions(self) -> ReadOnlyCollection: ...
    @property
    def Type(self) -> Type: ...
    def Update(self, expressions: Iterable[Expression]) -> NewArrayExpression: ...


class NewExpression(Expression):
    @property
    def ArgumentCount(self) -> int: ...
    @property
    def Arguments(self) -> ReadOnlyCollection: ...
    @property
    def Constructor(self) -> ConstructorInfo: ...
    @property
    def Members(self) -> ReadOnlyCollection: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    def GetArgument(self, index: int) -> Expression: ...
    def Update(self, arguments: Iterable[Expression]) -> NewExpression: ...


class ParameterExpression(Expression):
    @property
    def IsByRef(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...


class RuntimeVariablesExpression(Expression):
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    @property
    def Variables(self) -> ReadOnlyCollection: ...
    def Update(self, variables: Iterable[ParameterExpression]) -> RuntimeVariablesExpression: ...


class SwitchCase(Object):
    @property
    def Body(self) -> Expression: ...
    @property
    def TestValues(self) -> ReadOnlyCollection: ...
    def ToString(self) -> str: ...
    def Update(self, testValues: Iterable[Expression], body: Expression) -> SwitchCase: ...


class SwitchExpression(Expression):
    @property
    def Cases(self) -> ReadOnlyCollection: ...
    @property
    def Comparison(self) -> MethodInfo: ...
    @property
    def DefaultBody(self) -> Expression: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def SwitchValue(self) -> Expression: ...
    @property
    def Type(self) -> Type: ...
    def Update(self, switchValue: Expression, cases: Iterable[SwitchCase], defaultBody: Expression) -> SwitchExpression: ...


class SymbolDocumentInfo(Object):
    @property
    def DocumentType(self) -> Guid: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Language(self) -> Guid: ...
    @property
    def LanguageVendor(self) -> Guid: ...


class TryExpression(Expression):
    @property
    def Body(self) -> Expression: ...
    @property
    def Fault(self) -> Expression: ...
    @property
    def Finally(self) -> Expression: ...
    @property
    def Handlers(self) -> ReadOnlyCollection: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    def Update(self, body: Expression, handlers: Iterable[CatchBlock], finally: Expression, fault: Expression) -> TryExpression: ...


class TypeBinaryExpression(Expression):
    @property
    def Expression(self) -> Expression: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Type(self) -> Type: ...
    @property
    def TypeOperand(self) -> Type: ...
    def Update(self, expression: Expression) -> TypeBinaryExpression: ...


class UnaryExpression(Expression):
    @property
    def CanReduce(self) -> bool: ...
    @property
    def IsLifted(self) -> bool: ...
    @property
    def IsLiftedToNull(self) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def NodeType(self) -> ExpressionType: ...
    @property
    def Operand(self) -> Expression: ...
    @property
    def Type(self) -> Type: ...
    def Reduce(self) -> Expression: ...
    def Update(self, operand: Expression) -> UnaryExpression: ...
