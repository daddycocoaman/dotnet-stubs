from typing import Tuple, Set, Iterable, List


class IResourceWriter:
    @overload
    def AddResource(self, name: str, value: str) -> None: ...
    @overload
    def AddResource(self, name: str, value: Object) -> None: ...
    @overload
    def AddResource(self, name: str, value: Set(Byte)) -> None: ...
    def Close(self) -> None: ...
    def Generate(self) -> None: ...


class ResourceWriter(Object):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def AddResource(self, name: str, value: Stream) -> None: ...
    @overload
    def AddResource(self, name: str, value: str) -> None: ...
    @overload
    def AddResource(self, name: str, value: Object) -> None: ...
    @overload
    def AddResource(self, name: str, value: Set(Byte)) -> None: ...
    @overload
    def AddResource(self, name: str, value: Stream, closeAfterWrite: bool) -> None: ...
    def AddResourceData(self, name: str, typeName: str, serializedData: Set(Byte)) -> None: ...
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    def Generate(self) -> None: ...
    @property
    def TypeNameConverter(self) -> Func: ...
    @TypeNameConverter.setter
    def TypeNameConverter(self, value: Func) -> None: ...
