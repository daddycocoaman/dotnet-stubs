from typing import Tuple, Set, Iterable, List


class CollectionDataContractAttribute(Attribute):
    def __init__(self): ...
    @property
    def IsItemNameSetExplicitly(self) -> bool: ...
    @property
    def IsKeyNameSetExplicitly(self) -> bool: ...
    @property
    def IsNameSetExplicitly(self) -> bool: ...
    @property
    def IsNamespaceSetExplicitly(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsReferenceSetExplicitly(self) -> bool: ...
    @property
    def IsValueNameSetExplicitly(self) -> bool: ...
    @property
    def ItemName(self) -> str: ...
    @property
    def KeyName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def ValueName(self) -> str: ...
    @IsReference.setter
    def IsReference(self, value: bool) -> None: ...
    @ItemName.setter
    def ItemName(self, value: str) -> None: ...
    @KeyName.setter
    def KeyName(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @ValueName.setter
    def ValueName(self, value: str) -> None: ...


class ContractNamespaceAttribute(Attribute):
    def __init__(self, contractNamespace: str): ...
    @property
    def ClrNamespace(self) -> str: ...
    @property
    def ContractNamespace(self) -> str: ...
    @ClrNamespace.setter
    def ClrNamespace(self, value: str) -> None: ...


class DataContractAttribute(Attribute):
    def __init__(self): ...
    @property
    def IsNameSetExplicitly(self) -> bool: ...
    @property
    def IsNamespaceSetExplicitly(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsReferenceSetExplicitly(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @IsReference.setter
    def IsReference(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...


class DataMemberAttribute(Attribute):
    def __init__(self): ...
    @property
    def EmitDefaultValue(self) -> bool: ...
    @property
    def IsNameSetExplicitly(self) -> bool: ...
    @property
    def IsRequired(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @EmitDefaultValue.setter
    def EmitDefaultValue(self, value: bool) -> None: ...
    @IsRequired.setter
    def IsRequired(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Order.setter
    def Order(self, value: int) -> None: ...


class EnumMemberAttribute(Attribute):
    def __init__(self): ...
    @property
    def IsValueSetExplicitly(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...


class IgnoreDataMemberAttribute(Attribute):
    def __init__(self): ...


class InvalidDataContractException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class ISerializationSurrogateProvider:
    def GetDeserializedObject(self, obj: Object, targetType: Type) -> Object: ...
    def GetObjectToSerialize(self, obj: Object, targetType: Type) -> Object: ...
    def GetSurrogateType(self, type: Type) -> Type: ...


class KnownTypeAttribute(Attribute):
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, methodName: str): ...
    @property
    def MethodName(self) -> str: ...
    @property
    def Type(self) -> Type: ...
