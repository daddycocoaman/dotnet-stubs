from typing import Tuple, Set, Iterable, List


class Capture(Object):
    @property
    def Index(self) -> int: ...
    @property
    def Length(self) -> int: ...
    @property
    def Value(self) -> str: ...
    @property
    def ValueSpan(self) -> ReadOnlySpan: ...
    def ToString(self) -> str: ...


class CaptureCollection(Object):
    @overload
    def CopyTo(self, array: Array, arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, array: Set(Capture), arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, i: int) -> Capture: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...


class Group(Capture):
    @property
    def Captures(self) -> CaptureCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Success(self) -> bool: ...
    def Synchronized(inner: Group) -> Group: ...


class GroupCollection(Object):
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def CopyTo(self, array: Set(Group), arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, array: Array, arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, groupname: str) -> Group: ...
    @property
    def Item(self, groupnum: int) -> Group: ...
    @property
    def Keys(self) -> Iterable[str]: ...
    @property
    def SyncRoot(self) -> Object: ...
    @property
    def Values(self) -> Iterable[Group]: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def TryGetValue(self, key: str) -> Tuple[bool, Group]: ...


class Match(Group):
    @property
    def Empty() -> Match: ...
    @property
    def Groups(self) -> GroupCollection: ...
    def NextMatch(self) -> Match: ...
    def Result(self, replacement: str) -> str: ...
    def Synchronized(inner: Match) -> Match: ...


class MatchCollection(Object):
    @overload
    def CopyTo(self, array: Array, arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, array: Set(Match), arrayIndex: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, i: int) -> Match: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...


class MatchEvaluator(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, match: Match, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> str: ...
    def Invoke(self, match: Match) -> str: ...


class Regex(Object):
    @overload
    def __init__(self, pattern: str): ...
    @overload
    def __init__(self, pattern: str, options: RegexOptions): ...
    @overload
    def __init__(self, pattern: str, options: RegexOptions, matchTimeout: TimeSpan): ...
    @overload
    def CompileToAssembly(regexinfos: Set(RegexCompilationInfo), assemblyname: AssemblyName) -> None: ...
    @overload
    def CompileToAssembly(regexinfos: Set(RegexCompilationInfo), assemblyname: AssemblyName, attributes: Set(CustomAttributeBuilder)) -> None: ...
    @overload
    def CompileToAssembly(regexinfos: Set(RegexCompilationInfo), assemblyname: AssemblyName, attributes: Set(CustomAttributeBuilder), resourceFile: str) -> None: ...
    def Escape(str: str) -> str: ...
    @property
    def CacheSize() -> int: ...
    @property
    def MatchTimeout(self) -> TimeSpan: ...
    @property
    def Options(self) -> RegexOptions: ...
    @property
    def RightToLeft(self) -> bool: ...
    def GetGroupNames(self) -> Set(str): ...
    def GetGroupNumbers(self) -> Set(int): ...
    def GroupNameFromNumber(self, i: int) -> str: ...
    def GroupNumberFromName(self, name: str) -> int: ...
    @overload
    def IsMatch(self, input: str) -> bool: ...
    @overload
    def IsMatch(input: str, pattern: str) -> bool: ...
    @overload
    def IsMatch(self, input: str, startat: int) -> bool: ...
    @overload
    def IsMatch(input: str, pattern: str, options: RegexOptions) -> bool: ...
    @overload
    def IsMatch(input: str, pattern: str, options: RegexOptions, matchTimeout: TimeSpan) -> bool: ...
    @overload
    def Match(self, input: str) -> Match: ...
    @overload
    def Match(input: str, pattern: str) -> Match: ...
    @overload
    def Match(self, input: str, startat: int) -> Match: ...
    @overload
    def Match(input: str, pattern: str, options: RegexOptions) -> Match: ...
    @overload
    def Match(self, input: str, beginning: int, length: int) -> Match: ...
    @overload
    def Match(input: str, pattern: str, options: RegexOptions, matchTimeout: TimeSpan) -> Match: ...
    @overload
    def Matches(self, input: str) -> MatchCollection: ...
    @overload
    def Matches(self, input: str, startat: int) -> MatchCollection: ...
    @overload
    def Matches(input: str, pattern: str) -> MatchCollection: ...
    @overload
    def Matches(input: str, pattern: str, options: RegexOptions) -> MatchCollection: ...
    @overload
    def Matches(input: str, pattern: str, options: RegexOptions, matchTimeout: TimeSpan) -> MatchCollection: ...
    @overload
    def Replace(self, input: str, evaluator: MatchEvaluator) -> str: ...
    @overload
    def Replace(self, input: str, replacement: str) -> str: ...
    @overload
    def Replace(input: str, pattern: str, evaluator: MatchEvaluator) -> str: ...
    @overload
    def Replace(self, input: str, evaluator: MatchEvaluator, count: int) -> str: ...
    @overload
    def Replace(self, input: str, replacement: str, count: int) -> str: ...
    @overload
    def Replace(input: str, pattern: str, replacement: str) -> str: ...
    @overload
    def Replace(self, input: str, replacement: str, count: int, startat: int) -> str: ...
    @overload
    def Replace(self, input: str, evaluator: MatchEvaluator, count: int, startat: int) -> str: ...
    @overload
    def Replace(input: str, pattern: str, replacement: str, options: RegexOptions) -> str: ...
    @overload
    def Replace(input: str, pattern: str, evaluator: MatchEvaluator, options: RegexOptions) -> str: ...
    @overload
    def Replace(input: str, pattern: str, evaluator: MatchEvaluator, options: RegexOptions, matchTimeout: TimeSpan) -> str: ...
    @overload
    def Replace(input: str, pattern: str, replacement: str, options: RegexOptions, matchTimeout: TimeSpan) -> str: ...
    @CacheSize.setter
    def CacheSize(value: int) -> None: ...
    @overload
    def Split(self, input: str) -> Set(str): ...
    @overload
    def Split(input: str, pattern: str) -> Set(str): ...
    @overload
    def Split(self, input: str, count: int) -> Set(str): ...
    @overload
    def Split(self, input: str, count: int, startat: int) -> Set(str): ...
    @overload
    def Split(input: str, pattern: str, options: RegexOptions) -> Set(str): ...
    @overload
    def Split(input: str, pattern: str, options: RegexOptions, matchTimeout: TimeSpan) -> Set(str): ...
    def ToString(self) -> str: ...
    def Unescape(str: str) -> str: ...


class RegexCompilationInfo(Object):
    @overload
    def __init__(self, pattern: str, options: RegexOptions, name: str, fullnamespace: str, ispublic: bool): ...
    @overload
    def __init__(self, pattern: str, options: RegexOptions, name: str, fullnamespace: str, ispublic: bool, matchTimeout: TimeSpan): ...
    @property
    def IsPublic(self) -> bool: ...
    @property
    def MatchTimeout(self) -> TimeSpan: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    @property
    def Options(self) -> RegexOptions: ...
    @property
    def Pattern(self) -> str: ...
    @IsPublic.setter
    def IsPublic(self, value: bool) -> None: ...
    @MatchTimeout.setter
    def MatchTimeout(self, value: TimeSpan) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Namespace.setter
    def Namespace(self, value: str) -> None: ...
    @Options.setter
    def Options(self, value: RegexOptions) -> None: ...
    @Pattern.setter
    def Pattern(self, value: str) -> None: ...


class RegexMatchTimeoutException(TimeoutException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, regexInput: str, regexPattern: str, matchTimeout: TimeSpan): ...
    @property
    def Input(self) -> str: ...
    @property
    def MatchTimeout(self) -> TimeSpan: ...
    @property
    def Pattern(self) -> str: ...


class RegexOptions:
    #None = 0
    IgnoreCase = 1
    Multiline = 2
    ExplicitCapture = 4
    Compiled = 8
    Singleline = 16
    IgnorePatternWhitespace = 32
    RightToLeft = 64
    ECMAScript = 256
    CultureInvariant = 512


class RegexParseError:
    Unknown = 0
    AlternationHasTooManyConditions = 1
    AlternationHasMalformedCondition = 2
    InvalidUnicodePropertyEscape = 3
    MalformedUnicodePropertyEscape = 4
    UnrecognizedEscape = 5
    UnrecognizedControlCharacter = 6
    MissingControlCharacter = 7
    InsufficientOrInvalidHexDigits = 8
    QuantifierOrCaptureGroupOutOfRange = 9
    UndefinedNamedReference = 10
    UndefinedNumberedReference = 11
    MalformedNamedReference = 12
    UnescapedEndingBackslash = 13
    UnterminatedComment = 14
    InvalidGroupingConstruct = 15
    AlternationHasNamedCapture = 16
    AlternationHasComment = 17
    AlternationHasMalformedReference = 18
    AlternationHasUndefinedReference = 19
    CaptureGroupNameInvalid = 20
    CaptureGroupOfZero = 21
    UnterminatedBracket = 22
    ExclusionGroupNotLast = 23
    ReversedCharacterRange = 24
    ShorthandClassInCharacterRange = 25
    InsufficientClosingParentheses = 26
    ReversedQuantifierRange = 27
    NestedQuantifiersNotParenthesized = 28
    QuantifierAfterNothing = 29
    InsufficientOpeningParentheses = 30
    UnrecognizedUnicodeProperty = 31


class RegexParseException(ArgumentException):
    @property
    def Error(self) -> RegexParseError: ...
    @property
    def Offset(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class RegexRunner(Object):
    pass


class RegexRunnerFactory(Object):
    pass
