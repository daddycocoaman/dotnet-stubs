from typing import Tuple, Set, Iterable, List


class JsonArray(JsonNode):
    @overload
    def __init__(self, options: Nullable): ...
    @overload
    def __init__(self, items: Set(JsonNode)): ...
    @overload
    def __init__(self, options: JsonNodeOptions, items: Set(JsonNode)): ...
    @overload
    def Add(self, value: T) -> None: ...
    @overload
    def Add(self, item: JsonNode) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, item: JsonNode) -> bool: ...
    def Create(element: JsonElement, options: Nullable) -> JsonArray: ...
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, item: JsonNode) -> int: ...
    def Insert(self, index: int, item: JsonNode) -> None: ...
    def Remove(self, item: JsonNode) -> bool: ...
    def RemoveAt(self, index: int) -> None: ...
    def WriteTo(self, writer: Utf8JsonWriter, options: JsonSerializerOptions) -> None: ...


class JsonNode(Object):
    def AsArray(self) -> JsonArray: ...
    def AsObject(self) -> JsonObject: ...
    def AsValue(self) -> JsonValue: ...
    @property
    def Item(self, propertyName: str) -> JsonNode: ...
    @property
    def Item(self, index: int) -> JsonNode: ...
    @property
    def Options(self) -> Nullable: ...
    @property
    def Parent(self) -> JsonNode: ...
    @property
    def Root(self) -> JsonNode: ...
    def GetPath(self) -> str: ...
    def GetValue(self) -> T: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> float: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> Decimal: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> DateTimeOffset: ...
    @overload
    def op_Explicit(value: JsonNode) -> DateTime: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> Char: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> Byte: ...
    @overload
    def op_Explicit(value: JsonNode) -> Guid: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> UInt64: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> UInt32: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> UInt16: ...
    @overload
    def op_Explicit(value: JsonNode) -> str: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> Single: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> SByte: ...
    @overload
    def op_Explicit(value: JsonNode) -> bool: ...
    @overload
    def op_Explicit(value: JsonNode) -> Int64: ...
    @overload
    def op_Explicit(value: JsonNode) -> Nullable: ...
    @overload
    def op_Explicit(value: JsonNode) -> int: ...
    @overload
    def op_Explicit(value: JsonNode) -> Int16: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: bool) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: Byte) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: Char) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: DateTime) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: DateTimeOffset) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: UInt64) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: float) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: Decimal) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: UInt32) -> JsonNode: ...
    @overload
    def op_Implicit(value: UInt16) -> JsonNode: ...
    @overload
    def op_Implicit(value: Guid) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: Single) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: str) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: Int64) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: int) -> JsonNode: ...
    @overload
    def op_Implicit(value: Nullable) -> JsonNode: ...
    @overload
    def op_Implicit(value: Int16) -> JsonNode: ...
    @overload
    def op_Implicit(value: SByte) -> JsonNode: ...
    @overload
    def Parse(reader: Utf8JsonReader, nodeOptions: Nullable) -> Tuple[JsonNode, Utf8JsonReader]: ...
    @overload
    def Parse(json: str, nodeOptions: Nullable, documentOptions: JsonDocumentOptions) -> JsonNode: ...
    @overload
    def Parse(utf8Json: ReadOnlySpan, nodeOptions: Nullable, documentOptions: JsonDocumentOptions) -> JsonNode: ...
    @overload
    def Parse(utf8Json: Stream, nodeOptions: Nullable, documentOptions: JsonDocumentOptions) -> JsonNode: ...
    @Item.setter
    def Item(self, propertyName: str, value: JsonNode) -> None: ...
    @Item.setter
    def Item(self, index: int, value: JsonNode) -> None: ...
    def ToJsonString(self, options: JsonSerializerOptions) -> str: ...
    def ToString(self) -> str: ...
    def WriteTo(self, writer: Utf8JsonWriter, options: JsonSerializerOptions) -> None: ...


class JsonNodeOptions(ValueType):
    @property
    def PropertyNameCaseInsensitive(self) -> bool: ...
    @PropertyNameCaseInsensitive.setter
    def PropertyNameCaseInsensitive(self, value: bool) -> None: ...


class JsonObject(JsonNode):
    @overload
    def __init__(self, options: Nullable): ...
    @overload
    def __init__(self, properties: Iterable[KeyValuePair], options: Nullable): ...
    @overload
    def Add(self, property: KeyValuePair) -> None: ...
    @overload
    def Add(self, propertyName: str, value: JsonNode) -> None: ...
    def Clear(self) -> None: ...
    def ContainsKey(self, propertyName: str) -> bool: ...
    def Create(element: JsonElement, options: Nullable) -> JsonObject: ...
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, propertyName: str) -> bool: ...
    def TryGetPropertyValue(self, propertyName: str) -> Tuple[bool, JsonNode]: ...
    def WriteTo(self, writer: Utf8JsonWriter, options: JsonSerializerOptions) -> None: ...


class JsonValue(JsonNode):
    @overload
    def Create(value: bool, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: SByte, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Single, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: str, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: UInt64, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: JsonElement, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: T, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: UInt32, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Int64, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: UInt16, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: int, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Byte, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Char, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: DateTime, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: DateTimeOffset, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: float, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Guid, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Int16, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Nullable, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: Decimal, options: Nullable) -> JsonValue: ...
    @overload
    def Create(value: T, jsonTypeInfo: JsonTypeInfo, options: Nullable) -> JsonValue: ...
    def TryGetValue(self) -> Tuple[bool, T]: ...
