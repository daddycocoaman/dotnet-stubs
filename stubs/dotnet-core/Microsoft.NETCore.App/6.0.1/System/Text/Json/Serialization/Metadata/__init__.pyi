from typing import Tuple, Set, Iterable, List




class JsonMetadataServices(Object):
    def CreateArrayInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    def CreateConcurrentQueueInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    def CreateConcurrentStackInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    def CreateDictionaryInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    def CreateICollectionInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    @overload
    def CreateIDictionaryInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    @overload
    def CreateIDictionaryInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    @overload
    def CreateIEnumerableInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    @overload
    def CreateIEnumerableInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    @overload
    def CreateIListInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    @overload
    def CreateIListInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    def CreateImmutableDictionaryInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues, createRangeFunc: Func) -> JsonTypeInfo: ...
    def CreateImmutableEnumerableInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues, createRangeFunc: Func) -> JsonTypeInfo: ...
    def CreateIReadOnlyDictionaryInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    def CreateISetInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    def CreateListInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    def CreateObjectInfo(options: JsonSerializerOptions, objectInfo: JsonObjectInfoValues) -> JsonTypeInfo: ...
    def CreatePropertyInfo(options: JsonSerializerOptions, propertyInfo: JsonPropertyInfoValues) -> JsonPropertyInfo: ...
    @overload
    def CreateQueueInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    @overload
    def CreateQueueInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues, addFunc: Action) -> JsonTypeInfo: ...
    @overload
    def CreateStackInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues) -> JsonTypeInfo: ...
    @overload
    def CreateStackInfo(options: JsonSerializerOptions, collectionInfo: JsonCollectionInfoValues, addFunc: Action) -> JsonTypeInfo: ...
    def CreateValueInfo(options: JsonSerializerOptions, converter: JsonConverter) -> JsonTypeInfo: ...
    @property
    def BooleanConverter() -> JsonConverter: ...
    @property
    def ByteArrayConverter() -> JsonConverter: ...
    @property
    def ByteConverter() -> JsonConverter: ...
    @property
    def CharConverter() -> JsonConverter: ...
    @property
    def DateTimeConverter() -> JsonConverter: ...
    @property
    def DateTimeOffsetConverter() -> JsonConverter: ...
    @property
    def DecimalConverter() -> JsonConverter: ...
    @property
    def DoubleConverter() -> JsonConverter: ...
    @property
    def GuidConverter() -> JsonConverter: ...
    @property
    def Int16Converter() -> JsonConverter: ...
    @property
    def Int32Converter() -> JsonConverter: ...
    @property
    def Int64Converter() -> JsonConverter: ...
    @property
    def JsonArrayConverter() -> JsonConverter: ...
    @property
    def JsonElementConverter() -> JsonConverter: ...
    @property
    def JsonNodeConverter() -> JsonConverter: ...
    @property
    def JsonObjectConverter() -> JsonConverter: ...
    @property
    def JsonValueConverter() -> JsonConverter: ...
    @property
    def ObjectConverter() -> JsonConverter: ...
    @property
    def SByteConverter() -> JsonConverter: ...
    @property
    def SingleConverter() -> JsonConverter: ...
    @property
    def StringConverter() -> JsonConverter: ...
    @property
    def TimeSpanConverter() -> JsonConverter: ...
    @property
    def UInt16Converter() -> JsonConverter: ...
    @property
    def UInt32Converter() -> JsonConverter: ...
    @property
    def UInt64Converter() -> JsonConverter: ...
    @property
    def UriConverter() -> JsonConverter: ...
    @property
    def VersionConverter() -> JsonConverter: ...
    def GetEnumConverter(options: JsonSerializerOptions) -> JsonConverter: ...
    def GetNullableConverter(underlyingTypeInfo: JsonTypeInfo) -> JsonConverter: ...
    def GetUnsupportedTypeConverter() -> JsonConverter: ...




class JsonParameterInfoValues(Object):
    def __init__(self): ...
    @property
    def DefaultValue(self) -> Object: ...
    @property
    def HasDefaultValue(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParameterType(self) -> Type: ...
    @property
    def Position(self) -> int: ...
    @DefaultValue.setter
    def DefaultValue(self, value: Object) -> None: ...
    @HasDefaultValue.setter
    def HasDefaultValue(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ParameterType.setter
    def ParameterType(self, value: Type) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...


class JsonPropertyInfo(Object):
    pass




class JsonTypeInfo(Object):
    pass


