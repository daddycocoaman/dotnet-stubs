__all__ = ['Nodes','Serialization']
from typing import Tuple, Set, Iterable, List


class ArrayEnumerator(ValueType):
    def Dispose(self) -> None: ...
    @property
    def Current(self) -> JsonElement: ...
    def GetEnumerator(self) -> ArrayEnumerator: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class JsonCommentHandling:
    Disallow = 0
    Skip = 1
    Allow = 2


class JsonDocument(Object):
    def Dispose(self) -> None: ...
    @property
    def RootElement(self) -> JsonElement: ...
    @overload
    def Parse(utf8Json: ReadOnlyMemory, options: JsonDocumentOptions) -> JsonDocument: ...
    @overload
    def Parse(utf8Json: ReadOnlySequence, options: JsonDocumentOptions) -> JsonDocument: ...
    @overload
    def Parse(utf8Json: Stream, options: JsonDocumentOptions) -> JsonDocument: ...
    @overload
    def Parse(json: ReadOnlyMemory, options: JsonDocumentOptions) -> JsonDocument: ...
    @overload
    def Parse(json: str, options: JsonDocumentOptions) -> JsonDocument: ...
    def ParseAsync(utf8Json: Stream, options: JsonDocumentOptions, cancellationToken: CancellationToken) -> Task: ...
    def ParseValue(reader: Utf8JsonReader) -> Tuple[JsonDocument, Utf8JsonReader]: ...
    def TryParseValue(reader: Utf8JsonReader) -> Tuple[bool, Utf8JsonReader, JsonDocument]: ...
    def WriteTo(self, writer: Utf8JsonWriter) -> None: ...


class JsonDocumentOptions(ValueType):
    @property
    def AllowTrailingCommas(self) -> bool: ...
    @property
    def CommentHandling(self) -> JsonCommentHandling: ...
    @property
    def MaxDepth(self) -> int: ...
    @AllowTrailingCommas.setter
    def AllowTrailingCommas(self, value: bool) -> None: ...
    @CommentHandling.setter
    def CommentHandling(self, value: JsonCommentHandling) -> None: ...
    @MaxDepth.setter
    def MaxDepth(self, value: int) -> None: ...


class JsonElement(ValueType):
    def Clone(self) -> JsonElement: ...
    def EnumerateArray(self) -> ArrayEnumerator: ...
    def EnumerateObject(self) -> ObjectEnumerator: ...
    @property
    def Item(self, index: int) -> JsonElement: ...
    @property
    def ValueKind(self) -> JsonValueKind: ...
    def GetArrayLength(self) -> int: ...
    def GetBoolean(self) -> bool: ...
    def GetByte(self) -> Byte: ...
    def GetBytesFromBase64(self) -> Set(Byte): ...
    def GetDateTime(self) -> DateTime: ...
    def GetDateTimeOffset(self) -> DateTimeOffset: ...
    def GetDecimal(self) -> Decimal: ...
    def GetDouble(self) -> float: ...
    def GetGuid(self) -> Guid: ...
    def GetInt16(self) -> Int16: ...
    def GetInt32(self) -> int: ...
    def GetInt64(self) -> Int64: ...
    @overload
    def GetProperty(self, propertyName: ReadOnlySpan) -> JsonElement: ...
    @overload
    def GetProperty(self, propertyName: str) -> JsonElement: ...
    @overload
    def GetProperty(self, utf8PropertyName: ReadOnlySpan) -> JsonElement: ...
    def GetRawText(self) -> str: ...
    def GetSByte(self) -> SByte: ...
    def GetSingle(self) -> Single: ...
    def GetString(self) -> str: ...
    def GetUInt16(self) -> UInt16: ...
    def GetUInt32(self) -> UInt32: ...
    def GetUInt64(self) -> UInt64: ...
    def ParseValue(reader: Utf8JsonReader) -> Tuple[JsonElement, Utf8JsonReader]: ...
    def ToString(self) -> str: ...
    def TryGetByte(self) -> Tuple[bool, Byte]: ...
    def TryGetBytesFromBase64(self) -> Tuple[bool, Set(Byte)]: ...
    def TryGetDateTime(self) -> Tuple[bool, DateTime]: ...
    def TryGetDateTimeOffset(self) -> Tuple[bool, DateTimeOffset]: ...
    def TryGetDecimal(self) -> Tuple[bool, Decimal]: ...
    def TryGetDouble(self) -> Tuple[bool, float]: ...
    def TryGetGuid(self) -> Tuple[bool, Guid]: ...
    def TryGetInt16(self) -> Tuple[bool, Int16]: ...
    def TryGetInt32(self) -> Tuple[bool, int]: ...
    def TryGetInt64(self) -> Tuple[bool, Int64]: ...
    @overload
    def TryGetProperty(self, propertyName: str) -> Tuple[bool, JsonElement]: ...
    @overload
    def TryGetProperty(self, propertyName: ReadOnlySpan) -> Tuple[bool, JsonElement]: ...
    @overload
    def TryGetProperty(self, utf8PropertyName: ReadOnlySpan) -> Tuple[bool, JsonElement]: ...
    def TryGetSByte(self) -> Tuple[bool, SByte]: ...
    def TryGetSingle(self) -> Tuple[bool, Single]: ...
    def TryGetUInt16(self) -> Tuple[bool, UInt16]: ...
    def TryGetUInt32(self) -> Tuple[bool, UInt32]: ...
    def TryGetUInt64(self) -> Tuple[bool, UInt64]: ...
    def TryParseValue(reader: Utf8JsonReader) -> Tuple[bool, Utf8JsonReader, Nullable]: ...
    @overload
    def ValueEquals(self, text: ReadOnlySpan) -> bool: ...
    @overload
    def ValueEquals(self, text: str) -> bool: ...
    @overload
    def ValueEquals(self, utf8Text: ReadOnlySpan) -> bool: ...
    def WriteTo(self, writer: Utf8JsonWriter) -> None: ...


class JsonEncodedText(ValueType):
    @overload
    def Encode(value: str, encoder: JavaScriptEncoder) -> JsonEncodedText: ...
    @overload
    def Encode(value: ReadOnlySpan, encoder: JavaScriptEncoder) -> JsonEncodedText: ...
    @overload
    def Encode(utf8Value: ReadOnlySpan, encoder: JavaScriptEncoder) -> JsonEncodedText: ...
    @overload
    def Equals(self, other: JsonEncodedText) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def EncodedUtf8Bytes(self) -> ReadOnlySpan: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class JsonException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, path: str, lineNumber: Nullable, bytePositionInLine: Nullable): ...
    @overload
    def __init__(self, message: str, path: str, lineNumber: Nullable, bytePositionInLine: Nullable, innerException: Exception): ...
    @property
    def BytePositionInLine(self) -> Nullable: ...
    @property
    def LineNumber(self) -> Nullable: ...
    @property
    def Message(self) -> str: ...
    @property
    def Path(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class JsonNamingPolicy(Object):
    def ConvertName(self, name: str) -> str: ...
    @property
    def CamelCase() -> JsonNamingPolicy: ...


class JsonProperty(ValueType):
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> JsonElement: ...
    @overload
    def NameEquals(self, text: str) -> bool: ...
    @overload
    def NameEquals(self, utf8Text: ReadOnlySpan) -> bool: ...
    @overload
    def NameEquals(self, text: ReadOnlySpan) -> bool: ...
    def ToString(self) -> str: ...
    def WriteTo(self, writer: Utf8JsonWriter) -> None: ...


class JsonReaderOptions(ValueType):
    @property
    def AllowTrailingCommas(self) -> bool: ...
    @property
    def CommentHandling(self) -> JsonCommentHandling: ...
    @property
    def MaxDepth(self) -> int: ...
    @AllowTrailingCommas.setter
    def AllowTrailingCommas(self, value: bool) -> None: ...
    @CommentHandling.setter
    def CommentHandling(self, value: JsonCommentHandling) -> None: ...
    @MaxDepth.setter
    def MaxDepth(self, value: int) -> None: ...


class JsonReaderState(ValueType):
    def __init__(self, options: JsonReaderOptions): ...
    @property
    def Options(self) -> JsonReaderOptions: ...


class JsonSerializer(Object):
    @overload
    def Deserialize(json: str, options: JsonSerializerOptions) -> TValue: ...
    @overload
    def Deserialize(utf8Json: Stream, jsonTypeInfo: JsonTypeInfo) -> TValue: ...
    @overload
    def Deserialize(utf8Json: Stream, options: JsonSerializerOptions) -> TValue: ...
    @overload
    def Deserialize(utf8Json: ReadOnlySpan, jsonTypeInfo: JsonTypeInfo) -> TValue: ...
    @overload
    def Deserialize(utf8Json: ReadOnlySpan, options: JsonSerializerOptions) -> TValue: ...
    @overload
    def Deserialize(node: JsonNode, jsonTypeInfo: JsonTypeInfo) -> TValue: ...
    @overload
    def Deserialize(node: JsonNode, options: JsonSerializerOptions) -> TValue: ...
    @overload
    def Deserialize(element: JsonElement, jsonTypeInfo: JsonTypeInfo) -> TValue: ...
    @overload
    def Deserialize(document: JsonDocument, jsonTypeInfo: JsonTypeInfo) -> TValue: ...
    @overload
    def Deserialize(document: JsonDocument, options: JsonSerializerOptions) -> TValue: ...
    @overload
    def Deserialize(element: JsonElement, options: JsonSerializerOptions) -> TValue: ...
    @overload
    def Deserialize(reader: Utf8JsonReader, options: JsonSerializerOptions) -> Tuple[TValue, Utf8JsonReader]: ...
    @overload
    def Deserialize(json: ReadOnlySpan, options: JsonSerializerOptions) -> TValue: ...
    @overload
    def Deserialize(json: str, jsonTypeInfo: JsonTypeInfo) -> TValue: ...
    @overload
    def Deserialize(reader: Utf8JsonReader, jsonTypeInfo: JsonTypeInfo) -> Tuple[TValue, Utf8JsonReader]: ...
    @overload
    def Deserialize(json: ReadOnlySpan, jsonTypeInfo: JsonTypeInfo) -> TValue: ...
    @overload
    def Deserialize(reader: Utf8JsonReader, returnType: Type, context: JsonSerializerContext) -> Tuple[Object, Utf8JsonReader]: ...
    @overload
    def Deserialize(document: JsonDocument, returnType: Type, context: JsonSerializerContext) -> Object: ...
    @overload
    def Deserialize(element: JsonElement, returnType: Type, options: JsonSerializerOptions) -> Object: ...
    @overload
    def Deserialize(json: ReadOnlySpan, returnType: Type, context: JsonSerializerContext) -> Object: ...
    @overload
    def Deserialize(element: JsonElement, returnType: Type, context: JsonSerializerContext) -> Object: ...
    @overload
    def Deserialize(json: str, returnType: Type, context: JsonSerializerContext) -> Object: ...
    @overload
    def Deserialize(node: JsonNode, returnType: Type, context: JsonSerializerContext) -> Object: ...
    @overload
    def Deserialize(utf8Json: ReadOnlySpan, returnType: Type, options: JsonSerializerOptions) -> Object: ...
    @overload
    def Deserialize(json: ReadOnlySpan, returnType: Type, options: JsonSerializerOptions) -> Object: ...
    @overload
    def Deserialize(utf8Json: ReadOnlySpan, returnType: Type, context: JsonSerializerContext) -> Object: ...
    @overload
    def Deserialize(json: str, returnType: Type, options: JsonSerializerOptions) -> Object: ...
    @overload
    def Deserialize(utf8Json: Stream, returnType: Type, options: JsonSerializerOptions) -> Object: ...
    @overload
    def Deserialize(utf8Json: Stream, returnType: Type, context: JsonSerializerContext) -> Object: ...
    @overload
    def Deserialize(document: JsonDocument, returnType: Type, options: JsonSerializerOptions) -> Object: ...
    @overload
    def Deserialize(reader: Utf8JsonReader, returnType: Type, options: JsonSerializerOptions) -> Tuple[Object, Utf8JsonReader]: ...
    @overload
    def Deserialize(node: JsonNode, returnType: Type, options: JsonSerializerOptions) -> Object: ...
    @overload
    def DeserializeAsync(utf8Json: Stream, jsonTypeInfo: JsonTypeInfo, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def DeserializeAsync(utf8Json: Stream, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def DeserializeAsync(utf8Json: Stream, returnType: Type, context: JsonSerializerContext, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def DeserializeAsync(utf8Json: Stream, returnType: Type, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> ValueTask: ...
    def DeserializeAsyncEnumerable(utf8Json: Stream, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> IAsyncEnumerable: ...
    @overload
    def Serialize(value: TValue, jsonTypeInfo: JsonTypeInfo) -> str: ...
    @overload
    def Serialize(value: TValue, options: JsonSerializerOptions) -> str: ...
    @overload
    def Serialize(utf8Json: Stream, value: TValue, options: JsonSerializerOptions) -> None: ...
    @overload
    def Serialize(writer: Utf8JsonWriter, value: TValue, jsonTypeInfo: JsonTypeInfo) -> None: ...
    @overload
    def Serialize(utf8Json: Stream, value: TValue, jsonTypeInfo: JsonTypeInfo) -> None: ...
    @overload
    def Serialize(writer: Utf8JsonWriter, value: TValue, options: JsonSerializerOptions) -> None: ...
    @overload
    def Serialize(value: Object, inputType: Type, context: JsonSerializerContext) -> str: ...
    @overload
    def Serialize(value: Object, inputType: Type, options: JsonSerializerOptions) -> str: ...
    @overload
    def Serialize(writer: Utf8JsonWriter, value: Object, inputType: Type, options: JsonSerializerOptions) -> None: ...
    @overload
    def Serialize(utf8Json: Stream, value: Object, inputType: Type, context: JsonSerializerContext) -> None: ...
    @overload
    def Serialize(writer: Utf8JsonWriter, value: Object, inputType: Type, context: JsonSerializerContext) -> None: ...
    @overload
    def Serialize(utf8Json: Stream, value: Object, inputType: Type, options: JsonSerializerOptions) -> None: ...
    @overload
    def SerializeAsync(utf8Json: Stream, value: TValue, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def SerializeAsync(utf8Json: Stream, value: TValue, jsonTypeInfo: JsonTypeInfo, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def SerializeAsync(utf8Json: Stream, value: Object, inputType: Type, context: JsonSerializerContext, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def SerializeAsync(utf8Json: Stream, value: Object, inputType: Type, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def SerializeToDocument(value: TValue, options: JsonSerializerOptions) -> JsonDocument: ...
    @overload
    def SerializeToDocument(value: TValue, jsonTypeInfo: JsonTypeInfo) -> JsonDocument: ...
    @overload
    def SerializeToDocument(value: Object, inputType: Type, context: JsonSerializerContext) -> JsonDocument: ...
    @overload
    def SerializeToDocument(value: Object, inputType: Type, options: JsonSerializerOptions) -> JsonDocument: ...
    @overload
    def SerializeToElement(value: TValue, jsonTypeInfo: JsonTypeInfo) -> JsonElement: ...
    @overload
    def SerializeToElement(value: TValue, options: JsonSerializerOptions) -> JsonElement: ...
    @overload
    def SerializeToElement(value: Object, inputType: Type, context: JsonSerializerContext) -> JsonElement: ...
    @overload
    def SerializeToElement(value: Object, inputType: Type, options: JsonSerializerOptions) -> JsonElement: ...
    @overload
    def SerializeToNode(value: TValue, jsonTypeInfo: JsonTypeInfo) -> JsonNode: ...
    @overload
    def SerializeToNode(value: TValue, options: JsonSerializerOptions) -> JsonNode: ...
    @overload
    def SerializeToNode(value: Object, inputType: Type, options: JsonSerializerOptions) -> JsonNode: ...
    @overload
    def SerializeToNode(value: Object, inputType: Type, context: JsonSerializerContext) -> JsonNode: ...
    @overload
    def SerializeToUtf8Bytes(value: TValue, jsonTypeInfo: JsonTypeInfo) -> Set(Byte): ...
    @overload
    def SerializeToUtf8Bytes(value: TValue, options: JsonSerializerOptions) -> Set(Byte): ...
    @overload
    def SerializeToUtf8Bytes(value: Object, inputType: Type, context: JsonSerializerContext) -> Set(Byte): ...
    @overload
    def SerializeToUtf8Bytes(value: Object, inputType: Type, options: JsonSerializerOptions) -> Set(Byte): ...


class JsonSerializerDefaults:
    General = 0
    Web = 1


class JsonSerializerOptions(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, options: JsonSerializerOptions): ...
    @overload
    def __init__(self, defaults: JsonSerializerDefaults): ...
    def AddContext(self) -> None: ...
    @property
    def AllowTrailingCommas(self) -> bool: ...
    @property
    def Converters(self) -> List[JsonConverter]: ...
    @property
    def DefaultBufferSize(self) -> int: ...
    @property
    def DefaultIgnoreCondition(self) -> JsonIgnoreCondition: ...
    @property
    def DictionaryKeyPolicy(self) -> JsonNamingPolicy: ...
    @property
    def Encoder(self) -> JavaScriptEncoder: ...
    @property
    def IgnoreNullValues(self) -> bool: ...
    @property
    def IgnoreReadOnlyFields(self) -> bool: ...
    @property
    def IgnoreReadOnlyProperties(self) -> bool: ...
    @property
    def IncludeFields(self) -> bool: ...
    @property
    def MaxDepth(self) -> int: ...
    @property
    def NumberHandling(self) -> JsonNumberHandling: ...
    @property
    def PropertyNameCaseInsensitive(self) -> bool: ...
    @property
    def PropertyNamingPolicy(self) -> JsonNamingPolicy: ...
    @property
    def ReadCommentHandling(self) -> JsonCommentHandling: ...
    @property
    def ReferenceHandler(self) -> ReferenceHandler: ...
    @property
    def UnknownTypeHandling(self) -> JsonUnknownTypeHandling: ...
    @property
    def WriteIndented(self) -> bool: ...
    def GetConverter(self, typeToConvert: Type) -> JsonConverter: ...
    @AllowTrailingCommas.setter
    def AllowTrailingCommas(self, value: bool) -> None: ...
    @DefaultBufferSize.setter
    def DefaultBufferSize(self, value: int) -> None: ...
    @DefaultIgnoreCondition.setter
    def DefaultIgnoreCondition(self, value: JsonIgnoreCondition) -> None: ...
    @DictionaryKeyPolicy.setter
    def DictionaryKeyPolicy(self, value: JsonNamingPolicy) -> None: ...
    @Encoder.setter
    def Encoder(self, value: JavaScriptEncoder) -> None: ...
    @IgnoreNullValues.setter
    def IgnoreNullValues(self, value: bool) -> None: ...
    @IgnoreReadOnlyFields.setter
    def IgnoreReadOnlyFields(self, value: bool) -> None: ...
    @IgnoreReadOnlyProperties.setter
    def IgnoreReadOnlyProperties(self, value: bool) -> None: ...
    @IncludeFields.setter
    def IncludeFields(self, value: bool) -> None: ...
    @MaxDepth.setter
    def MaxDepth(self, value: int) -> None: ...
    @NumberHandling.setter
    def NumberHandling(self, value: JsonNumberHandling) -> None: ...
    @PropertyNameCaseInsensitive.setter
    def PropertyNameCaseInsensitive(self, value: bool) -> None: ...
    @PropertyNamingPolicy.setter
    def PropertyNamingPolicy(self, value: JsonNamingPolicy) -> None: ...
    @ReadCommentHandling.setter
    def ReadCommentHandling(self, value: JsonCommentHandling) -> None: ...
    @ReferenceHandler.setter
    def ReferenceHandler(self, value: ReferenceHandler) -> None: ...
    @UnknownTypeHandling.setter
    def UnknownTypeHandling(self, value: JsonUnknownTypeHandling) -> None: ...
    @WriteIndented.setter
    def WriteIndented(self, value: bool) -> None: ...


class JsonTokenType:
    #None = 0
    StartObject = 1
    EndObject = 2
    StartArray = 3
    EndArray = 4
    PropertyName = 5
    Comment = 6
    String = 7
    Number = 8
    True = 9
    False = 10
    Null = 11


class JsonValueKind:
    Undefined = 0
    Object = 1
    Array = 2
    String = 3
    Number = 4
    True = 5
    False = 6
    Null = 7


class JsonWriterOptions(ValueType):
    @property
    def Encoder(self) -> JavaScriptEncoder: ...
    @property
    def Indented(self) -> bool: ...
    @property
    def SkipValidation(self) -> bool: ...
    @Encoder.setter
    def Encoder(self, value: JavaScriptEncoder) -> None: ...
    @Indented.setter
    def Indented(self, value: bool) -> None: ...
    @SkipValidation.setter
    def SkipValidation(self, value: bool) -> None: ...


class ObjectEnumerator(ValueType):
    def Dispose(self) -> None: ...
    @property
    def Current(self) -> JsonProperty: ...
    def GetEnumerator(self) -> ObjectEnumerator: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class Utf8JsonWriter(Object):
    @overload
    def __init__(self, bufferWriter: IBufferWriter, options: JsonWriterOptions): ...
    @overload
    def __init__(self, utf8Json: Stream, options: JsonWriterOptions): ...
    def Dispose(self) -> None: ...
    def DisposeAsync(self) -> ValueTask: ...
    def Flush(self) -> None: ...
    def FlushAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @property
    def BytesCommitted(self) -> Int64: ...
    @property
    def BytesPending(self) -> int: ...
    @property
    def CurrentDepth(self) -> int: ...
    @property
    def Options(self) -> JsonWriterOptions: ...
    @overload
    def Reset(self) -> None: ...
    @overload
    def Reset(self, utf8Json: Stream) -> None: ...
    @overload
    def Reset(self, bufferWriter: IBufferWriter) -> None: ...
    @overload
    def WriteBase64String(self, propertyName: ReadOnlySpan, bytes: ReadOnlySpan) -> None: ...
    @overload
    def WriteBase64String(self, utf8PropertyName: ReadOnlySpan, bytes: ReadOnlySpan) -> None: ...
    @overload
    def WriteBase64String(self, propertyName: str, bytes: ReadOnlySpan) -> None: ...
    @overload
    def WriteBase64String(self, propertyName: JsonEncodedText, bytes: ReadOnlySpan) -> None: ...
    def WriteBase64StringValue(self, bytes: ReadOnlySpan) -> None: ...
    @overload
    def WriteBoolean(self, utf8PropertyName: ReadOnlySpan, value: bool) -> None: ...
    @overload
    def WriteBoolean(self, propertyName: str, value: bool) -> None: ...
    @overload
    def WriteBoolean(self, propertyName: JsonEncodedText, value: bool) -> None: ...
    @overload
    def WriteBoolean(self, propertyName: ReadOnlySpan, value: bool) -> None: ...
    def WriteBooleanValue(self, value: bool) -> None: ...
    @overload
    def WriteCommentValue(self, value: str) -> None: ...
    @overload
    def WriteCommentValue(self, value: ReadOnlySpan) -> None: ...
    @overload
    def WriteCommentValue(self, utf8Value: ReadOnlySpan) -> None: ...
    def WriteEndArray(self) -> None: ...
    def WriteEndObject(self) -> None: ...
    @overload
    def WriteNull(self, propertyName: str) -> None: ...
    @overload
    def WriteNull(self, propertyName: ReadOnlySpan) -> None: ...
    @overload
    def WriteNull(self, utf8PropertyName: ReadOnlySpan) -> None: ...
    @overload
    def WriteNull(self, propertyName: JsonEncodedText) -> None: ...
    def WriteNullValue(self) -> None: ...
    @overload
    def WriteNumber(self, propertyName: str, value: Single) -> None: ...
    @overload
    def WriteNumber(self, propertyName: ReadOnlySpan, value: UInt32) -> None: ...
    @overload
    def WriteNumber(self, propertyName: str, value: UInt32) -> None: ...
    @overload
    def WriteNumber(self, propertyName: JsonEncodedText, value: UInt32) -> None: ...
    @overload
    def WriteNumber(self, utf8PropertyName: ReadOnlySpan, value: UInt64) -> None: ...
    @overload
    def WriteNumber(self, propertyName: JsonEncodedText, value: UInt64) -> None: ...
    @overload
    def WriteNumber(self, propertyName: str, value: UInt64) -> None: ...
    @overload
    def WriteNumber(self, utf8PropertyName: ReadOnlySpan, value: float) -> None: ...
    @overload
    def WriteNumber(self, propertyName: JsonEncodedText, value: Single) -> None: ...
    @overload
    def WriteNumber(self, propertyName: JsonEncodedText, value: Decimal) -> None: ...
    @overload
    def WriteNumber(self, propertyName: ReadOnlySpan, value: Single) -> None: ...
    @overload
    def WriteNumber(self, propertyName: ReadOnlySpan, value: UInt64) -> None: ...
    @overload
    def WriteNumber(self, propertyName: ReadOnlySpan, value: float) -> None: ...
    @overload
    def WriteNumber(self, propertyName: str, value: int) -> None: ...
    @overload
    def WriteNumber(self, propertyName: ReadOnlySpan, value: Decimal) -> None: ...
    @overload
    def WriteNumber(self, utf8PropertyName: ReadOnlySpan, value: int) -> None: ...
    @overload
    def WriteNumber(self, propertyName: ReadOnlySpan, value: int) -> None: ...
    @overload
    def WriteNumber(self, propertyName: JsonEncodedText, value: int) -> None: ...
    @overload
    def WriteNumber(self, utf8PropertyName: ReadOnlySpan, value: Int64) -> None: ...
    @overload
    def WriteNumber(self, propertyName: ReadOnlySpan, value: Int64) -> None: ...
    @overload
    def WriteNumber(self, propertyName: str, value: Int64) -> None: ...
    @overload
    def WriteNumber(self, propertyName: JsonEncodedText, value: Int64) -> None: ...
    @overload
    def WriteNumber(self, utf8PropertyName: ReadOnlySpan, value: UInt32) -> None: ...
    @overload
    def WriteNumber(self, propertyName: str, value: float) -> None: ...
    @overload
    def WriteNumber(self, utf8PropertyName: ReadOnlySpan, value: Decimal) -> None: ...
    @overload
    def WriteNumber(self, propertyName: JsonEncodedText, value: float) -> None: ...
    @overload
    def WriteNumber(self, propertyName: str, value: Decimal) -> None: ...
    @overload
    def WriteNumber(self, utf8PropertyName: ReadOnlySpan, value: Single) -> None: ...
    @overload
    def WriteNumberValue(self, value: Decimal) -> None: ...
    @overload
    def WriteNumberValue(self, value: Int64) -> None: ...
    @overload
    def WriteNumberValue(self, value: UInt32) -> None: ...
    @overload
    def WriteNumberValue(self, value: UInt64) -> None: ...
    @overload
    def WriteNumberValue(self, value: Single) -> None: ...
    @overload
    def WriteNumberValue(self, value: float) -> None: ...
    @overload
    def WriteNumberValue(self, value: int) -> None: ...
    @overload
    def WritePropertyName(self, utf8PropertyName: ReadOnlySpan) -> None: ...
    @overload
    def WritePropertyName(self, propertyName: str) -> None: ...
    @overload
    def WritePropertyName(self, propertyName: JsonEncodedText) -> None: ...
    @overload
    def WritePropertyName(self, propertyName: ReadOnlySpan) -> None: ...
    @overload
    def WriteRawValue(self, json: ReadOnlySpan, skipInputValidation: bool) -> None: ...
    @overload
    def WriteRawValue(self, json: str, skipInputValidation: bool) -> None: ...
    @overload
    def WriteRawValue(self, utf8Json: ReadOnlySpan, skipInputValidation: bool) -> None: ...
    @overload
    def WriteStartArray(self) -> None: ...
    @overload
    def WriteStartArray(self, propertyName: JsonEncodedText) -> None: ...
    @overload
    def WriteStartArray(self, utf8PropertyName: ReadOnlySpan) -> None: ...
    @overload
    def WriteStartArray(self, propertyName: str) -> None: ...
    @overload
    def WriteStartArray(self, propertyName: ReadOnlySpan) -> None: ...
    @overload
    def WriteStartObject(self) -> None: ...
    @overload
    def WriteStartObject(self, utf8PropertyName: ReadOnlySpan) -> None: ...
    @overload
    def WriteStartObject(self, propertyName: str) -> None: ...
    @overload
    def WriteStartObject(self, propertyName: ReadOnlySpan) -> None: ...
    @overload
    def WriteStartObject(self, propertyName: JsonEncodedText) -> None: ...
    @overload
    def WriteString(self, propertyName: str, value: DateTime) -> None: ...
    @overload
    def WriteString(self, propertyName: ReadOnlySpan, value: DateTime) -> None: ...
    @overload
    def WriteString(self, utf8PropertyName: ReadOnlySpan, value: DateTime) -> None: ...
    @overload
    def WriteString(self, propertyName: JsonEncodedText, value: DateTimeOffset) -> None: ...
    @overload
    def WriteString(self, utf8PropertyName: ReadOnlySpan, value: DateTimeOffset) -> None: ...
    @overload
    def WriteString(self, propertyName: str, value: DateTimeOffset) -> None: ...
    @overload
    def WriteString(self, propertyName: ReadOnlySpan, value: DateTimeOffset) -> None: ...
    @overload
    def WriteString(self, propertyName: JsonEncodedText, value: DateTime) -> None: ...
    @overload
    def WriteString(self, utf8PropertyName: ReadOnlySpan, value: str) -> None: ...
    @overload
    def WriteString(self, propertyName: str, value: JsonEncodedText) -> None: ...
    @overload
    def WriteString(self, utf8PropertyName: ReadOnlySpan, value: JsonEncodedText) -> None: ...
    @overload
    def WriteString(self, propertyName: ReadOnlySpan, value: str) -> None: ...
    @overload
    def WriteString(self, propertyName: ReadOnlySpan, value: JsonEncodedText) -> None: ...
    @overload
    def WriteString(self, propertyName: JsonEncodedText, value: Guid) -> None: ...
    @overload
    def WriteString(self, propertyName: str, value: Guid) -> None: ...
    @overload
    def WriteString(self, propertyName: ReadOnlySpan, value: Guid) -> None: ...
    @overload
    def WriteString(self, utf8PropertyName: ReadOnlySpan, value: Guid) -> None: ...
    @overload
    def WriteString(self, propertyName: ReadOnlySpan, utf8Value: ReadOnlySpan) -> None: ...
    @overload
    def WriteString(self, propertyName: JsonEncodedText, value: JsonEncodedText) -> None: ...
    @overload
    def WriteString(self, propertyName: str, utf8Value: ReadOnlySpan) -> None: ...
    @overload
    def WriteString(self, propertyName: JsonEncodedText, utf8Value: ReadOnlySpan) -> None: ...
    @overload
    def WriteString(self, utf8PropertyName: ReadOnlySpan, value: ReadOnlySpan) -> None: ...
    @overload
    def WriteString(self, propertyName: str, value: ReadOnlySpan) -> None: ...
    @overload
    def WriteString(self, propertyName: JsonEncodedText, value: ReadOnlySpan) -> None: ...
    @overload
    def WriteString(self, propertyName: JsonEncodedText, value: str) -> None: ...
    @overload
    def WriteString(self, utf8PropertyName: ReadOnlySpan, utf8Value: ReadOnlySpan) -> None: ...
    @overload
    def WriteString(self, propertyName: ReadOnlySpan, value: ReadOnlySpan) -> None: ...
    @overload
    def WriteString(self, propertyName: str, value: str) -> None: ...
    @overload
    def WriteStringValue(self, value: DateTime) -> None: ...
    @overload
    def WriteStringValue(self, value: Guid) -> None: ...
    @overload
    def WriteStringValue(self, value: ReadOnlySpan) -> None: ...
    @overload
    def WriteStringValue(self, value: str) -> None: ...
    @overload
    def WriteStringValue(self, value: JsonEncodedText) -> None: ...
    @overload
    def WriteStringValue(self, value: DateTimeOffset) -> None: ...
    @overload
    def WriteStringValue(self, utf8Value: ReadOnlySpan) -> None: ...
