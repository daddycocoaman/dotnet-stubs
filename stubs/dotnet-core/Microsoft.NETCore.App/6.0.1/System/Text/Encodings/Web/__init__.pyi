from typing import Tuple, Set, Iterable, List


class HtmlEncoder(TextEncoder):
    @overload
    def Create(settings: TextEncoderSettings) -> HtmlEncoder: ...
    @overload
    def Create(allowedRanges: Set(UnicodeRange)) -> HtmlEncoder: ...
    @property
    def Default() -> HtmlEncoder: ...


class JavaScriptEncoder(TextEncoder):
    @overload
    def Create(settings: TextEncoderSettings) -> JavaScriptEncoder: ...
    @overload
    def Create(allowedRanges: Set(UnicodeRange)) -> JavaScriptEncoder: ...
    @property
    def Default() -> JavaScriptEncoder: ...
    @property
    def UnsafeRelaxedJsonEscaping() -> JavaScriptEncoder: ...


class TextEncoder(Object):
    @overload
    def Encode(self, value: str) -> str: ...
    @overload
    def Encode(self, output: TextWriter, value: str) -> None: ...
    @overload
    def Encode(self, output: TextWriter, value: str, startIndex: int, characterCount: int) -> None: ...
    @overload
    def Encode(self, output: TextWriter, value: Set(Char), startIndex: int, characterCount: int) -> None: ...
    @overload
    def Encode(self, source: ReadOnlySpan, destination: Span, isFinalBlock: bool) -> Tuple[OperationStatus, int, int]: ...
    def EncodeUtf8(self, utf8Source: ReadOnlySpan, utf8Destination: Span, isFinalBlock: bool) -> Tuple[OperationStatus, int, int]: ...
    def FindFirstCharacterToEncode(self, text: Char, textLength: int) -> int: ...
    def FindFirstCharacterToEncodeUtf8(self, utf8Text: ReadOnlySpan) -> int: ...
    @property
    def MaxOutputCharactersPerInputCharacter(self) -> int: ...
    def TryEncodeUnicodeScalar(self, unicodeScalar: int, buffer: Char, bufferLength: int) -> Tuple[bool, int]: ...
    def WillEncode(self, unicodeScalar: int) -> bool: ...


class TextEncoderSettings(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: TextEncoderSettings): ...
    @overload
    def __init__(self, allowedRanges: Set(UnicodeRange)): ...
    def AllowCharacter(self, character: Char) -> None: ...
    def AllowCharacters(self, characters: Set(Char)) -> None: ...
    def AllowCodePoints(self, codePoints: Iterable[int]) -> None: ...
    def AllowRange(self, range: UnicodeRange) -> None: ...
    def AllowRanges(self, ranges: Set(UnicodeRange)) -> None: ...
    def Clear(self) -> None: ...
    def ForbidCharacter(self, character: Char) -> None: ...
    def ForbidCharacters(self, characters: Set(Char)) -> None: ...
    def ForbidRange(self, range: UnicodeRange) -> None: ...
    def ForbidRanges(self, ranges: Set(UnicodeRange)) -> None: ...
    def GetAllowedCodePoints(self) -> Iterable[int]: ...


class UrlEncoder(TextEncoder):
    @overload
    def Create(settings: TextEncoderSettings) -> UrlEncoder: ...
    @overload
    def Create(allowedRanges: Set(UnicodeRange)) -> UrlEncoder: ...
    @property
    def Default() -> UrlEncoder: ...
