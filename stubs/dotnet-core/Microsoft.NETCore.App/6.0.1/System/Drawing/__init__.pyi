from typing import Tuple, Set, Iterable, List


class Color(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Color) -> bool: ...
    @overload
    def FromArgb(argb: int) -> Color: ...
    @overload
    def FromArgb(alpha: int, baseColor: Color) -> Color: ...
    @overload
    def FromArgb(red: int, green: int, blue: int) -> Color: ...
    @overload
    def FromArgb(alpha: int, red: int, green: int, blue: int) -> Color: ...
    def FromKnownColor(color: KnownColor) -> Color: ...
    def FromName(name: str) -> Color: ...
    @property
    def A(self) -> Byte: ...
    @property
    def AliceBlue() -> Color: ...
    @property
    def AntiqueWhite() -> Color: ...
    @property
    def Aqua() -> Color: ...
    @property
    def Aquamarine() -> Color: ...
    @property
    def Azure() -> Color: ...
    @property
    def B(self) -> Byte: ...
    @property
    def Beige() -> Color: ...
    @property
    def Bisque() -> Color: ...
    @property
    def Black() -> Color: ...
    @property
    def BlanchedAlmond() -> Color: ...
    @property
    def Blue() -> Color: ...
    @property
    def BlueViolet() -> Color: ...
    @property
    def Brown() -> Color: ...
    @property
    def BurlyWood() -> Color: ...
    @property
    def CadetBlue() -> Color: ...
    @property
    def Chartreuse() -> Color: ...
    @property
    def Chocolate() -> Color: ...
    @property
    def Coral() -> Color: ...
    @property
    def CornflowerBlue() -> Color: ...
    @property
    def Cornsilk() -> Color: ...
    @property
    def Crimson() -> Color: ...
    @property
    def Cyan() -> Color: ...
    @property
    def DarkBlue() -> Color: ...
    @property
    def DarkCyan() -> Color: ...
    @property
    def DarkGoldenrod() -> Color: ...
    @property
    def DarkGray() -> Color: ...
    @property
    def DarkGreen() -> Color: ...
    @property
    def DarkKhaki() -> Color: ...
    @property
    def DarkMagenta() -> Color: ...
    @property
    def DarkOliveGreen() -> Color: ...
    @property
    def DarkOrange() -> Color: ...
    @property
    def DarkOrchid() -> Color: ...
    @property
    def DarkRed() -> Color: ...
    @property
    def DarkSalmon() -> Color: ...
    @property
    def DarkSeaGreen() -> Color: ...
    @property
    def DarkSlateBlue() -> Color: ...
    @property
    def DarkSlateGray() -> Color: ...
    @property
    def DarkTurquoise() -> Color: ...
    @property
    def DarkViolet() -> Color: ...
    @property
    def DeepPink() -> Color: ...
    @property
    def DeepSkyBlue() -> Color: ...
    @property
    def DimGray() -> Color: ...
    @property
    def DodgerBlue() -> Color: ...
    @property
    def Firebrick() -> Color: ...
    @property
    def FloralWhite() -> Color: ...
    @property
    def ForestGreen() -> Color: ...
    @property
    def Fuchsia() -> Color: ...
    @property
    def G(self) -> Byte: ...
    @property
    def Gainsboro() -> Color: ...
    @property
    def GhostWhite() -> Color: ...
    @property
    def Gold() -> Color: ...
    @property
    def Goldenrod() -> Color: ...
    @property
    def Gray() -> Color: ...
    @property
    def Green() -> Color: ...
    @property
    def GreenYellow() -> Color: ...
    @property
    def Honeydew() -> Color: ...
    @property
    def HotPink() -> Color: ...
    @property
    def IndianRed() -> Color: ...
    @property
    def Indigo() -> Color: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsKnownColor(self) -> bool: ...
    @property
    def IsNamedColor(self) -> bool: ...
    @property
    def IsSystemColor(self) -> bool: ...
    @property
    def Ivory() -> Color: ...
    @property
    def Khaki() -> Color: ...
    @property
    def Lavender() -> Color: ...
    @property
    def LavenderBlush() -> Color: ...
    @property
    def LawnGreen() -> Color: ...
    @property
    def LemonChiffon() -> Color: ...
    @property
    def LightBlue() -> Color: ...
    @property
    def LightCoral() -> Color: ...
    @property
    def LightCyan() -> Color: ...
    @property
    def LightGoldenrodYellow() -> Color: ...
    @property
    def LightGray() -> Color: ...
    @property
    def LightGreen() -> Color: ...
    @property
    def LightPink() -> Color: ...
    @property
    def LightSalmon() -> Color: ...
    @property
    def LightSeaGreen() -> Color: ...
    @property
    def LightSkyBlue() -> Color: ...
    @property
    def LightSlateGray() -> Color: ...
    @property
    def LightSteelBlue() -> Color: ...
    @property
    def LightYellow() -> Color: ...
    @property
    def Lime() -> Color: ...
    @property
    def LimeGreen() -> Color: ...
    @property
    def Linen() -> Color: ...
    @property
    def Magenta() -> Color: ...
    @property
    def Maroon() -> Color: ...
    @property
    def MediumAquamarine() -> Color: ...
    @property
    def MediumBlue() -> Color: ...
    @property
    def MediumOrchid() -> Color: ...
    @property
    def MediumPurple() -> Color: ...
    @property
    def MediumSeaGreen() -> Color: ...
    @property
    def MediumSlateBlue() -> Color: ...
    @property
    def MediumSpringGreen() -> Color: ...
    @property
    def MediumTurquoise() -> Color: ...
    @property
    def MediumVioletRed() -> Color: ...
    @property
    def MidnightBlue() -> Color: ...
    @property
    def MintCream() -> Color: ...
    @property
    def MistyRose() -> Color: ...
    @property
    def Moccasin() -> Color: ...
    @property
    def Name(self) -> str: ...
    @property
    def NavajoWhite() -> Color: ...
    @property
    def Navy() -> Color: ...
    @property
    def OldLace() -> Color: ...
    @property
    def Olive() -> Color: ...
    @property
    def OliveDrab() -> Color: ...
    @property
    def Orange() -> Color: ...
    @property
    def OrangeRed() -> Color: ...
    @property
    def Orchid() -> Color: ...
    @property
    def PaleGoldenrod() -> Color: ...
    @property
    def PaleGreen() -> Color: ...
    @property
    def PaleTurquoise() -> Color: ...
    @property
    def PaleVioletRed() -> Color: ...
    @property
    def PapayaWhip() -> Color: ...
    @property
    def PeachPuff() -> Color: ...
    @property
    def Peru() -> Color: ...
    @property
    def Pink() -> Color: ...
    @property
    def Plum() -> Color: ...
    @property
    def PowderBlue() -> Color: ...
    @property
    def Purple() -> Color: ...
    @property
    def R(self) -> Byte: ...
    @property
    def RebeccaPurple() -> Color: ...
    @property
    def Red() -> Color: ...
    @property
    def RosyBrown() -> Color: ...
    @property
    def RoyalBlue() -> Color: ...
    @property
    def SaddleBrown() -> Color: ...
    @property
    def Salmon() -> Color: ...
    @property
    def SandyBrown() -> Color: ...
    @property
    def SeaGreen() -> Color: ...
    @property
    def SeaShell() -> Color: ...
    @property
    def Sienna() -> Color: ...
    @property
    def Silver() -> Color: ...
    @property
    def SkyBlue() -> Color: ...
    @property
    def SlateBlue() -> Color: ...
    @property
    def SlateGray() -> Color: ...
    @property
    def Snow() -> Color: ...
    @property
    def SpringGreen() -> Color: ...
    @property
    def SteelBlue() -> Color: ...
    @property
    def Tan() -> Color: ...
    @property
    def Teal() -> Color: ...
    @property
    def Thistle() -> Color: ...
    @property
    def Tomato() -> Color: ...
    @property
    def Transparent() -> Color: ...
    @property
    def Turquoise() -> Color: ...
    @property
    def Violet() -> Color: ...
    @property
    def Wheat() -> Color: ...
    @property
    def White() -> Color: ...
    @property
    def WhiteSmoke() -> Color: ...
    @property
    def Yellow() -> Color: ...
    @property
    def YellowGreen() -> Color: ...
    def GetBrightness(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    def GetHue(self) -> Single: ...
    def GetSaturation(self) -> Single: ...
    def op_Equality(left: Color, right: Color) -> bool: ...
    def op_Inequality(left: Color, right: Color) -> bool: ...
    def ToArgb(self) -> int: ...
    def ToKnownColor(self) -> KnownColor: ...
    def ToString(self) -> str: ...


class ColorTranslator(Object):
    def FromHtml(htmlColor: str) -> Color: ...
    def FromOle(oleColor: int) -> Color: ...
    def FromWin32(win32Color: int) -> Color: ...
    def ToHtml(c: Color) -> str: ...
    def ToOle(c: Color) -> int: ...
    def ToWin32(c: Color) -> int: ...


class KnownColor:
    ActiveBorder = 1
    ActiveCaption = 2
    ActiveCaptionText = 3
    AppWorkspace = 4
    Control = 5
    ControlDark = 6
    ControlDarkDark = 7
    ControlLight = 8
    ControlLightLight = 9
    ControlText = 10
    Desktop = 11
    GrayText = 12
    Highlight = 13
    HighlightText = 14
    HotTrack = 15
    InactiveBorder = 16
    InactiveCaption = 17
    InactiveCaptionText = 18
    Info = 19
    InfoText = 20
    Menu = 21
    MenuText = 22
    ScrollBar = 23
    Window = 24
    WindowFrame = 25
    WindowText = 26
    Transparent = 27
    AliceBlue = 28
    AntiqueWhite = 29
    Aqua = 30
    Aquamarine = 31
    Azure = 32
    Beige = 33
    Bisque = 34
    Black = 35
    BlanchedAlmond = 36
    Blue = 37
    BlueViolet = 38
    Brown = 39
    BurlyWood = 40
    CadetBlue = 41
    Chartreuse = 42
    Chocolate = 43
    Coral = 44
    CornflowerBlue = 45
    Cornsilk = 46
    Crimson = 47
    Cyan = 48
    DarkBlue = 49
    DarkCyan = 50
    DarkGoldenrod = 51
    DarkGray = 52
    DarkGreen = 53
    DarkKhaki = 54
    DarkMagenta = 55
    DarkOliveGreen = 56
    DarkOrange = 57
    DarkOrchid = 58
    DarkRed = 59
    DarkSalmon = 60
    DarkSeaGreen = 61
    DarkSlateBlue = 62
    DarkSlateGray = 63
    DarkTurquoise = 64
    DarkViolet = 65
    DeepPink = 66
    DeepSkyBlue = 67
    DimGray = 68
    DodgerBlue = 69
    Firebrick = 70
    FloralWhite = 71
    ForestGreen = 72
    Fuchsia = 73
    Gainsboro = 74
    GhostWhite = 75
    Gold = 76
    Goldenrod = 77
    Gray = 78
    Green = 79
    GreenYellow = 80
    Honeydew = 81
    HotPink = 82
    IndianRed = 83
    Indigo = 84
    Ivory = 85
    Khaki = 86
    Lavender = 87
    LavenderBlush = 88
    LawnGreen = 89
    LemonChiffon = 90
    LightBlue = 91
    LightCoral = 92
    LightCyan = 93
    LightGoldenrodYellow = 94
    LightGray = 95
    LightGreen = 96
    LightPink = 97
    LightSalmon = 98
    LightSeaGreen = 99
    LightSkyBlue = 100
    LightSlateGray = 101
    LightSteelBlue = 102
    LightYellow = 103
    Lime = 104
    LimeGreen = 105
    Linen = 106
    Magenta = 107
    Maroon = 108
    MediumAquamarine = 109
    MediumBlue = 110
    MediumOrchid = 111
    MediumPurple = 112
    MediumSeaGreen = 113
    MediumSlateBlue = 114
    MediumSpringGreen = 115
    MediumTurquoise = 116
    MediumVioletRed = 117
    MidnightBlue = 118
    MintCream = 119
    MistyRose = 120
    Moccasin = 121
    NavajoWhite = 122
    Navy = 123
    OldLace = 124
    Olive = 125
    OliveDrab = 126
    Orange = 127
    OrangeRed = 128
    Orchid = 129
    PaleGoldenrod = 130
    PaleGreen = 131
    PaleTurquoise = 132
    PaleVioletRed = 133
    PapayaWhip = 134
    PeachPuff = 135
    Peru = 136
    Pink = 137
    Plum = 138
    PowderBlue = 139
    Purple = 140
    Red = 141
    RosyBrown = 142
    RoyalBlue = 143
    SaddleBrown = 144
    Salmon = 145
    SandyBrown = 146
    SeaGreen = 147
    SeaShell = 148
    Sienna = 149
    Silver = 150
    SkyBlue = 151
    SlateBlue = 152
    SlateGray = 153
    Snow = 154
    SpringGreen = 155
    SteelBlue = 156
    Tan = 157
    Teal = 158
    Thistle = 159
    Tomato = 160
    Turquoise = 161
    Violet = 162
    Wheat = 163
    White = 164
    WhiteSmoke = 165
    Yellow = 166
    YellowGreen = 167
    ButtonFace = 168
    ButtonHighlight = 169
    ButtonShadow = 170
    GradientActiveCaption = 171
    GradientInactiveCaption = 172
    MenuBar = 173
    MenuHighlight = 174
    RebeccaPurple = 175


class Point(ValueType):
    @overload
    def __init__(self, sz: Size): ...
    @overload
    def __init__(self, dw: int): ...
    @overload
    def __init__(self, x: int, y: int): ...
    def Add(pt: Point, sz: Size) -> Point: ...
    def Ceiling(value: PointF) -> Point: ...
    @overload
    def Equals(self, other: Point) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Offset(self, p: Point) -> None: ...
    @overload
    def Offset(self, dx: int, dy: int) -> None: ...
    def op_Addition(pt: Point, sz: Size) -> Point: ...
    def op_Equality(left: Point, right: Point) -> bool: ...
    def op_Explicit(p: Point) -> Size: ...
    def op_Implicit(p: Point) -> PointF: ...
    def op_Inequality(left: Point, right: Point) -> bool: ...
    def op_Subtraction(pt: Point, sz: Size) -> Point: ...
    def Round(value: PointF) -> Point: ...
    @X.setter
    def X(self, value: int) -> None: ...
    @Y.setter
    def Y(self, value: int) -> None: ...
    def Subtract(pt: Point, sz: Size) -> Point: ...
    def ToString(self) -> str: ...
    def Truncate(value: PointF) -> Point: ...


class PointF(ValueType):
    @overload
    def __init__(self, vector: Vector2): ...
    @overload
    def __init__(self, x: Single, y: Single): ...
    @overload
    def Add(pt: PointF, sz: SizeF) -> PointF: ...
    @overload
    def Add(pt: PointF, sz: Size) -> PointF: ...
    @overload
    def Equals(self, other: PointF) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def X(self) -> Single: ...
    @property
    def Y(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    @overload
    def op_Addition(pt: PointF, sz: Size) -> PointF: ...
    @overload
    def op_Addition(pt: PointF, sz: SizeF) -> PointF: ...
    def op_Equality(left: PointF, right: PointF) -> bool: ...
    @overload
    def op_Explicit(point: PointF) -> Vector2: ...
    @overload
    def op_Explicit(vector: Vector2) -> PointF: ...
    def op_Inequality(left: PointF, right: PointF) -> bool: ...
    @overload
    def op_Subtraction(pt: PointF, sz: SizeF) -> PointF: ...
    @overload
    def op_Subtraction(pt: PointF, sz: Size) -> PointF: ...
    @X.setter
    def X(self, value: Single) -> None: ...
    @Y.setter
    def Y(self, value: Single) -> None: ...
    @overload
    def Subtract(pt: PointF, sz: SizeF) -> PointF: ...
    @overload
    def Subtract(pt: PointF, sz: Size) -> PointF: ...
    def ToString(self) -> str: ...
    def ToVector2(self) -> Vector2: ...


class Rectangle(ValueType):
    @overload
    def __init__(self, location: Point, size: Size): ...
    @overload
    def __init__(self, x: int, y: int, width: int, height: int): ...
    def Ceiling(value: RectangleF) -> Rectangle: ...
    @overload
    def Contains(self, rect: Rectangle) -> bool: ...
    @overload
    def Contains(self, pt: Point) -> bool: ...
    @overload
    def Contains(self, x: int, y: int) -> bool: ...
    @overload
    def Equals(self, other: Rectangle) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def FromLTRB(left: int, top: int, right: int, bottom: int) -> Rectangle: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Right(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Top(self) -> int: ...
    @property
    def Width(self) -> int: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Inflate(self, size: Size) -> None: ...
    @overload
    def Inflate(self, width: int, height: int) -> None: ...
    @overload
    def Inflate(rect: Rectangle, x: int, y: int) -> Rectangle: ...
    @overload
    def Intersect(self, rect: Rectangle) -> None: ...
    @overload
    def Intersect(a: Rectangle, b: Rectangle) -> Rectangle: ...
    def IntersectsWith(self, rect: Rectangle) -> bool: ...
    @overload
    def Offset(self, pos: Point) -> None: ...
    @overload
    def Offset(self, x: int, y: int) -> None: ...
    def op_Equality(left: Rectangle, right: Rectangle) -> bool: ...
    def op_Inequality(left: Rectangle, right: Rectangle) -> bool: ...
    def Round(value: RectangleF) -> Rectangle: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @X.setter
    def X(self, value: int) -> None: ...
    @Y.setter
    def Y(self, value: int) -> None: ...
    def ToString(self) -> str: ...
    def Truncate(value: RectangleF) -> Rectangle: ...
    def Union(a: Rectangle, b: Rectangle) -> Rectangle: ...


class RectangleF(ValueType):
    @overload
    def __init__(self, vector: Vector4): ...
    @overload
    def __init__(self, location: PointF, size: SizeF): ...
    @overload
    def __init__(self, x: Single, y: Single, width: Single, height: Single): ...
    @overload
    def Contains(self, rect: RectangleF) -> bool: ...
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    def Contains(self, x: Single, y: Single) -> bool: ...
    @overload
    def Equals(self, other: RectangleF) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    def FromLTRB(left: Single, top: Single, right: Single, bottom: Single) -> RectangleF: ...
    @property
    def Bottom(self) -> Single: ...
    @property
    def Height(self) -> Single: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Left(self) -> Single: ...
    @property
    def Location(self) -> PointF: ...
    @property
    def Right(self) -> Single: ...
    @property
    def Size(self) -> SizeF: ...
    @property
    def Top(self) -> Single: ...
    @property
    def Width(self) -> Single: ...
    @property
    def X(self) -> Single: ...
    @property
    def Y(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Inflate(self, size: SizeF) -> None: ...
    @overload
    def Inflate(self, x: Single, y: Single) -> None: ...
    @overload
    def Inflate(rect: RectangleF, x: Single, y: Single) -> RectangleF: ...
    @overload
    def Intersect(self, rect: RectangleF) -> None: ...
    @overload
    def Intersect(a: RectangleF, b: RectangleF) -> RectangleF: ...
    def IntersectsWith(self, rect: RectangleF) -> bool: ...
    @overload
    def Offset(self, pos: PointF) -> None: ...
    @overload
    def Offset(self, x: Single, y: Single) -> None: ...
    def op_Equality(left: RectangleF, right: RectangleF) -> bool: ...
    @overload
    def op_Explicit(vector: Vector4) -> RectangleF: ...
    @overload
    def op_Explicit(rectangle: RectangleF) -> Vector4: ...
    def op_Implicit(r: Rectangle) -> RectangleF: ...
    def op_Inequality(left: RectangleF, right: RectangleF) -> bool: ...
    @Height.setter
    def Height(self, value: Single) -> None: ...
    @Location.setter
    def Location(self, value: PointF) -> None: ...
    @Size.setter
    def Size(self, value: SizeF) -> None: ...
    @Width.setter
    def Width(self, value: Single) -> None: ...
    @X.setter
    def X(self, value: Single) -> None: ...
    @Y.setter
    def Y(self, value: Single) -> None: ...
    def ToString(self) -> str: ...
    def ToVector4(self) -> Vector4: ...
    def Union(a: RectangleF, b: RectangleF) -> RectangleF: ...


class Size(ValueType):
    @overload
    def __init__(self, pt: Point): ...
    @overload
    def __init__(self, width: int, height: int): ...
    def Add(sz1: Size, sz2: Size) -> Size: ...
    def Ceiling(value: SizeF) -> Size: ...
    @overload
    def Equals(self, other: Size) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def op_Addition(sz1: Size, sz2: Size) -> Size: ...
    @overload
    def op_Division(left: Size, right: int) -> Size: ...
    @overload
    def op_Division(left: Size, right: Single) -> SizeF: ...
    def op_Equality(sz1: Size, sz2: Size) -> bool: ...
    def op_Explicit(size: Size) -> Point: ...
    def op_Implicit(p: Size) -> SizeF: ...
    def op_Inequality(sz1: Size, sz2: Size) -> bool: ...
    @overload
    def op_Multiply(left: Single, right: Size) -> SizeF: ...
    @overload
    def op_Multiply(left: Size, right: int) -> Size: ...
    @overload
    def op_Multiply(left: int, right: Size) -> Size: ...
    @overload
    def op_Multiply(left: Size, right: Single) -> SizeF: ...
    def op_Subtraction(sz1: Size, sz2: Size) -> Size: ...
    def Round(value: SizeF) -> Size: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def Subtract(sz1: Size, sz2: Size) -> Size: ...
    def ToString(self) -> str: ...
    def Truncate(value: SizeF) -> Size: ...


class SizeF(ValueType):
    @overload
    def __init__(self, size: SizeF): ...
    @overload
    def __init__(self, pt: PointF): ...
    @overload
    def __init__(self, vector: Vector2): ...
    @overload
    def __init__(self, width: Single, height: Single): ...
    def Add(sz1: SizeF, sz2: SizeF) -> SizeF: ...
    @overload
    def Equals(self, other: SizeF) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Height(self) -> Single: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Width(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    def op_Addition(sz1: SizeF, sz2: SizeF) -> SizeF: ...
    def op_Division(left: SizeF, right: Single) -> SizeF: ...
    def op_Equality(sz1: SizeF, sz2: SizeF) -> bool: ...
    @overload
    def op_Explicit(size: SizeF) -> PointF: ...
    @overload
    def op_Explicit(size: SizeF) -> Vector2: ...
    @overload
    def op_Explicit(vector: Vector2) -> SizeF: ...
    def op_Inequality(sz1: SizeF, sz2: SizeF) -> bool: ...
    @overload
    def op_Multiply(left: SizeF, right: Single) -> SizeF: ...
    @overload
    def op_Multiply(left: Single, right: SizeF) -> SizeF: ...
    def op_Subtraction(sz1: SizeF, sz2: SizeF) -> SizeF: ...
    @Height.setter
    def Height(self, value: Single) -> None: ...
    @Width.setter
    def Width(self, value: Single) -> None: ...
    def Subtract(sz1: SizeF, sz2: SizeF) -> SizeF: ...
    def ToPointF(self) -> PointF: ...
    def ToSize(self) -> Size: ...
    def ToString(self) -> str: ...
    def ToVector2(self) -> Vector2: ...


class SystemColors(Object):
    @property
    def ActiveBorder() -> Color: ...
    @property
    def ActiveCaption() -> Color: ...
    @property
    def ActiveCaptionText() -> Color: ...
    @property
    def AppWorkspace() -> Color: ...
    @property
    def ButtonFace() -> Color: ...
    @property
    def ButtonHighlight() -> Color: ...
    @property
    def ButtonShadow() -> Color: ...
    @property
    def Control() -> Color: ...
    @property
    def ControlDark() -> Color: ...
    @property
    def ControlDarkDark() -> Color: ...
    @property
    def ControlLight() -> Color: ...
    @property
    def ControlLightLight() -> Color: ...
    @property
    def ControlText() -> Color: ...
    @property
    def Desktop() -> Color: ...
    @property
    def GradientActiveCaption() -> Color: ...
    @property
    def GradientInactiveCaption() -> Color: ...
    @property
    def GrayText() -> Color: ...
    @property
    def Highlight() -> Color: ...
    @property
    def HighlightText() -> Color: ...
    @property
    def HotTrack() -> Color: ...
    @property
    def InactiveBorder() -> Color: ...
    @property
    def InactiveCaption() -> Color: ...
    @property
    def InactiveCaptionText() -> Color: ...
    @property
    def Info() -> Color: ...
    @property
    def InfoText() -> Color: ...
    @property
    def Menu() -> Color: ...
    @property
    def MenuBar() -> Color: ...
    @property
    def MenuHighlight() -> Color: ...
    @property
    def MenuText() -> Color: ...
    @property
    def ScrollBar() -> Color: ...
    @property
    def Window() -> Color: ...
    @property
    def WindowFrame() -> Color: ...
    @property
    def WindowText() -> Color: ...
