from typing import Tuple, Set, Iterable, List






class Instrument(Object):
    @property
    def Description(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def IsObservable(self) -> bool: ...
    @property
    def Meter(self) -> Meter: ...
    @property
    def Name(self) -> str: ...
    @property
    def Unit(self) -> str: ...








class Meter(Object):
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, version: str): ...
    def CreateCounter(self, name: str, unit: str, description: str) -> Counter: ...
    def CreateHistogram(self, name: str, unit: str, description: str) -> Histogram: ...
    @overload
    def CreateObservableCounter(self, name: str, observeValue: Func, unit: str, description: str) -> ObservableCounter: ...
    @overload
    def CreateObservableCounter(self, name: str, observeValue: Func, unit: str, description: str) -> ObservableCounter: ...
    @overload
    def CreateObservableCounter(self, name: str, observeValues: Func, unit: str, description: str) -> ObservableCounter: ...
    @overload
    def CreateObservableGauge(self, name: str, observeValue: Func, unit: str, description: str) -> ObservableGauge: ...
    @overload
    def CreateObservableGauge(self, name: str, observeValue: Func, unit: str, description: str) -> ObservableGauge: ...
    @overload
    def CreateObservableGauge(self, name: str, observeValues: Func, unit: str, description: str) -> ObservableGauge: ...
    def Dispose(self) -> None: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> str: ...


class MeterListener(Object):
    def __init__(self): ...
    def DisableMeasurementEvents(self, instrument: Instrument) -> Object: ...
    def Dispose(self) -> None: ...
    def EnableMeasurementEvents(self, instrument: Instrument, state: Object) -> None: ...
    @property
    def InstrumentPublished(self) -> Action: ...
    @property
    def MeasurementsCompleted(self) -> Action: ...
    def RecordObservableInstruments(self) -> None: ...
    @InstrumentPublished.setter
    def InstrumentPublished(self, value: Action) -> None: ...
    @MeasurementsCompleted.setter
    def MeasurementsCompleted(self, value: Action) -> None: ...
    def SetMeasurementEventCallback(self, measurementCallback: MeasurementCallback) -> None: ...
    def Start(self) -> None: ...






