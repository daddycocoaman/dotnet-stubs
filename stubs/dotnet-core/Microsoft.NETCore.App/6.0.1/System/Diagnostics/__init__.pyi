from typing import Tuple, Set, Iterable, List


class BooleanSwitch(Switch):
    @overload
    def __init__(self, displayName: str, description: str): ...
    @overload
    def __init__(self, displayName: str, description: str, defaultSwitchValue: str): ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...


class CorrelationManager(Object):
    @property
    def ActivityId(self) -> Guid: ...
    @property
    def LogicalOperationStack(self) -> Stack: ...
    @ActivityId.setter
    def ActivityId(self, value: Guid) -> None: ...
    @overload
    def StartLogicalOperation(self) -> None: ...
    @overload
    def StartLogicalOperation(self, operationId: Object) -> None: ...
    def StopLogicalOperation(self) -> None: ...


class DefaultTraceListener(TraceListener):
    def __init__(self): ...
    @overload
    def Fail(self, message: str) -> None: ...
    @overload
    def Fail(self, message: str, detailMessage: str) -> None: ...
    @property
    def AssertUiEnabled(self) -> bool: ...
    @property
    def LogFileName(self) -> str: ...
    @AssertUiEnabled.setter
    def AssertUiEnabled(self, value: bool) -> None: ...
    @LogFileName.setter
    def LogFileName(self, value: str) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...


class EventTypeFilter(TraceFilter):
    def __init__(self, level: SourceLevels): ...
    @property
    def EventType(self) -> SourceLevels: ...
    @EventType.setter
    def EventType(self, value: SourceLevels) -> None: ...
    def ShouldTrace(self, cache: TraceEventCache, source: str, eventType: TraceEventType, id: int, formatOrMessage: str, args: Set(Object), data1: Object, data: Set(Object)) -> bool: ...


class SourceFilter(TraceFilter):
    def __init__(self, source: str): ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    def ShouldTrace(self, cache: TraceEventCache, source: str, eventType: TraceEventType, id: int, formatOrMessage: str, args: Set(Object), data1: Object, data: Set(Object)) -> bool: ...


class SourceLevels:
    Off = 0
    Critical = 1
    Error = 3
    Warning = 7
    Information = 15
    Verbose = 31
    ActivityTracing = 65280
    All = -1


class SourceSwitch(Switch):
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, displayName: str, defaultSwitchValue: str): ...
    @property
    def Level(self) -> SourceLevels: ...
    @Level.setter
    def Level(self, value: SourceLevels) -> None: ...
    def ShouldTrace(self, eventType: TraceEventType) -> bool: ...


class Switch(Object):
    @property
    def Attributes(self) -> StringDictionary: ...
    @property
    def Description(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...


class SwitchAttribute(Attribute):
    def __init__(self, switchName: str, switchType: Type): ...
    @property
    def SwitchDescription(self) -> str: ...
    @property
    def SwitchName(self) -> str: ...
    @property
    def SwitchType(self) -> Type: ...
    def GetAll(assembly: Assembly) -> Set(SwitchAttribute): ...
    @SwitchDescription.setter
    def SwitchDescription(self, value: str) -> None: ...
    @SwitchName.setter
    def SwitchName(self, value: str) -> None: ...
    @SwitchType.setter
    def SwitchType(self, value: Type) -> None: ...


class SwitchLevelAttribute(Attribute):
    def __init__(self, switchLevelType: Type): ...
    @property
    def SwitchLevelType(self) -> Type: ...
    @SwitchLevelType.setter
    def SwitchLevelType(self, value: Type) -> None: ...


class Trace(Object):
    @overload
    def Assert(condition: bool) -> None: ...
    @overload
    def Assert(condition: bool, message: str) -> None: ...
    @overload
    def Assert(condition: bool, message: str, detailMessage: str) -> None: ...
    def Close() -> None: ...
    @overload
    def Fail(message: str) -> None: ...
    @overload
    def Fail(message: str, detailMessage: str) -> None: ...
    def Flush() -> None: ...
    @property
    def AutoFlush() -> bool: ...
    @property
    def CorrelationManager() -> CorrelationManager: ...
    @property
    def IndentLevel() -> int: ...
    @property
    def IndentSize() -> int: ...
    @property
    def Listeners() -> TraceListenerCollection: ...
    @property
    def UseGlobalLock() -> bool: ...
    def Indent() -> None: ...
    def Refresh() -> None: ...
    @AutoFlush.setter
    def AutoFlush(value: bool) -> None: ...
    @IndentLevel.setter
    def IndentLevel(value: int) -> None: ...
    @IndentSize.setter
    def IndentSize(value: int) -> None: ...
    @UseGlobalLock.setter
    def UseGlobalLock(value: bool) -> None: ...
    @overload
    def TraceError(message: str) -> None: ...
    @overload
    def TraceError(format: str, args: Set(Object)) -> None: ...
    @overload
    def TraceInformation(message: str) -> None: ...
    @overload
    def TraceInformation(format: str, args: Set(Object)) -> None: ...
    @overload
    def TraceWarning(message: str) -> None: ...
    @overload
    def TraceWarning(format: str, args: Set(Object)) -> None: ...
    def Unindent() -> None: ...
    @overload
    def Write(message: str) -> None: ...
    @overload
    def Write(value: Object) -> None: ...
    @overload
    def Write(message: str, category: str) -> None: ...
    @overload
    def Write(value: Object, category: str) -> None: ...
    @overload
    def WriteIf(condition: bool, message: str) -> None: ...
    @overload
    def WriteIf(condition: bool, value: Object) -> None: ...
    @overload
    def WriteIf(condition: bool, message: str, category: str) -> None: ...
    @overload
    def WriteIf(condition: bool, value: Object, category: str) -> None: ...
    @overload
    def WriteLine(value: Object) -> None: ...
    @overload
    def WriteLine(message: str) -> None: ...
    @overload
    def WriteLine(value: Object, category: str) -> None: ...
    @overload
    def WriteLine(message: str, category: str) -> None: ...
    @overload
    def WriteLineIf(condition: bool, value: Object) -> None: ...
    @overload
    def WriteLineIf(condition: bool, message: str) -> None: ...
    @overload
    def WriteLineIf(condition: bool, message: str, category: str) -> None: ...
    @overload
    def WriteLineIf(condition: bool, value: Object, category: str) -> None: ...


class TraceEventCache(Object):
    def __init__(self): ...
    @property
    def Callstack(self) -> str: ...
    @property
    def DateTime(self) -> DateTime: ...
    @property
    def LogicalOperationStack(self) -> Stack: ...
    @property
    def ProcessId(self) -> int: ...
    @property
    def ThreadId(self) -> str: ...
    @property
    def Timestamp(self) -> Int64: ...


class TraceEventType:
    Critical = 1
    Error = 2
    Warning = 4
    Information = 8
    Verbose = 16
    Start = 256
    Stop = 512
    Suspend = 1024
    Resume = 2048
    Transfer = 4096


class TraceFilter(Object):
    def ShouldTrace(self, cache: TraceEventCache, source: str, eventType: TraceEventType, id: int, formatOrMessage: str, args: Set(Object), data1: Object, data: Set(Object)) -> bool: ...


class TraceLevel:
    Off = 0
    Error = 1
    Warning = 2
    Info = 3
    Verbose = 4


class TraceListener(MarshalByRefObject):
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def Fail(self, message: str) -> None: ...
    @overload
    def Fail(self, message: str, detailMessage: str) -> None: ...
    def Flush(self) -> None: ...
    @property
    def Attributes(self) -> StringDictionary: ...
    @property
    def Filter(self) -> TraceFilter: ...
    @property
    def IndentLevel(self) -> int: ...
    @property
    def IndentSize(self) -> int: ...
    @property
    def IsThreadSafe(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def TraceOutputOptions(self) -> TraceOptions: ...
    @Filter.setter
    def Filter(self, value: TraceFilter) -> None: ...
    @IndentLevel.setter
    def IndentLevel(self, value: int) -> None: ...
    @IndentSize.setter
    def IndentSize(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @TraceOutputOptions.setter
    def TraceOutputOptions(self, value: TraceOptions) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, data: Object) -> None: ...
    @overload
    def TraceData(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, data: Set(Object)) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventCache: TraceEventCache, source: str, eventType: TraceEventType, id: int, format: str, args: Set(Object)) -> None: ...
    def TraceTransfer(self, eventCache: TraceEventCache, source: str, id: int, message: str, relatedActivityId: Guid) -> None: ...
    @overload
    def Write(self, message: str) -> None: ...
    @overload
    def Write(self, o: Object) -> None: ...
    @overload
    def Write(self, o: Object, category: str) -> None: ...
    @overload
    def Write(self, message: str, category: str) -> None: ...
    @overload
    def WriteLine(self, o: Object) -> None: ...
    @overload
    def WriteLine(self, message: str) -> None: ...
    @overload
    def WriteLine(self, message: str, category: str) -> None: ...
    @overload
    def WriteLine(self, o: Object, category: str) -> None: ...


class TraceListenerCollection(Object):
    def Add(self, listener: TraceListener) -> int: ...
    @overload
    def AddRange(self, value: Set(TraceListener)) -> None: ...
    @overload
    def AddRange(self, value: TraceListenerCollection) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, listener: TraceListener) -> bool: ...
    def CopyTo(self, listeners: Set(TraceListener), index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, i: int) -> TraceListener: ...
    @property
    def Item(self, name: str) -> TraceListener: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, listener: TraceListener) -> int: ...
    def Insert(self, index: int, listener: TraceListener) -> None: ...
    @overload
    def Remove(self, listener: TraceListener) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Item.setter
    def Item(self, i: int, value: TraceListener) -> None: ...


class TraceOptions:
    #None = 0
    LogicalOperationStack = 1
    DateTime = 2
    Timestamp = 4
    ProcessId = 8
    ThreadId = 16
    Callstack = 32


class TraceSource(Object):
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, defaultLevel: SourceLevels): ...
    def Close(self) -> None: ...
    def Flush(self) -> None: ...
    @property
    def Attributes(self) -> StringDictionary: ...
    @property
    def Listeners(self) -> TraceListenerCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Switch(self) -> SourceSwitch: ...
    @Switch.setter
    def Switch(self, value: SourceSwitch) -> None: ...
    @overload
    def TraceData(self, eventType: TraceEventType, id: int, data: Set(Object)) -> None: ...
    @overload
    def TraceData(self, eventType: TraceEventType, id: int, data: Object) -> None: ...
    @overload
    def TraceEvent(self, eventType: TraceEventType, id: int) -> None: ...
    @overload
    def TraceEvent(self, eventType: TraceEventType, id: int, message: str) -> None: ...
    @overload
    def TraceEvent(self, eventType: TraceEventType, id: int, format: str, args: Set(Object)) -> None: ...
    @overload
    def TraceInformation(self, message: str) -> None: ...
    @overload
    def TraceInformation(self, format: str, args: Set(Object)) -> None: ...
    def TraceTransfer(self, id: int, message: str, relatedActivityId: Guid) -> None: ...


class TraceSwitch(Switch):
    @overload
    def __init__(self, displayName: str, description: str): ...
    @overload
    def __init__(self, displayName: str, description: str, defaultSwitchValue: str): ...
    @property
    def Level(self) -> TraceLevel: ...
    @property
    def TraceError(self) -> bool: ...
    @property
    def TraceInfo(self) -> bool: ...
    @property
    def TraceVerbose(self) -> bool: ...
    @property
    def TraceWarning(self) -> bool: ...
    @Level.setter
    def Level(self, value: TraceLevel) -> None: ...
