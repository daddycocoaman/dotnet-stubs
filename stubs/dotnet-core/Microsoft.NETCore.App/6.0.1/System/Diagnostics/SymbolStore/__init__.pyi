from typing import Tuple, Set, Iterable, List


class ISymbolBinder:
    pass


class ISymbolBinder1:
    def GetReader(self, importer: IntPtr, filename: str, searchPath: str) -> ISymbolReader: ...


class ISymbolDocument:
    def FindClosestLine(self, line: int) -> int: ...
    @property
    def CheckSumAlgorithmId(self) -> Guid: ...
    @property
    def DocumentType(self) -> Guid: ...
    @property
    def HasEmbeddedSource(self) -> bool: ...
    @property
    def Language(self) -> Guid: ...
    @property
    def LanguageVendor(self) -> Guid: ...
    @property
    def SourceLength(self) -> int: ...
    @property
    def URL(self) -> str: ...
    def GetCheckSum(self) -> Set(Byte): ...
    def GetSourceRange(self, startLine: int, startColumn: int, endLine: int, endColumn: int) -> Set(Byte): ...


class ISymbolMethod:
    @property
    def RootScope(self) -> ISymbolScope: ...
    @property
    def SequencePointCount(self) -> int: ...
    @property
    def Token(self) -> SymbolToken: ...
    def GetNamespace(self) -> ISymbolNamespace: ...
    def GetOffset(self, document: ISymbolDocument, line: int, column: int) -> int: ...
    def GetParameters(self) -> Set(ISymbolVariable): ...
    def GetRanges(self, document: ISymbolDocument, line: int, column: int) -> Set(int): ...
    def GetScope(self, offset: int) -> ISymbolScope: ...
    def GetSequencePoints(self, offsets: Set(int), documents: Set(ISymbolDocument), lines: Set(int), columns: Set(int), endLines: Set(int), endColumns: Set(int)) -> None: ...
    def GetSourceStartEnd(self, docs: Set(ISymbolDocument), lines: Set(int), columns: Set(int)) -> bool: ...


class ISymbolNamespace:
    @property
    def Name(self) -> str: ...
    def GetNamespaces(self) -> Set(ISymbolNamespace): ...
    def GetVariables(self) -> Set(ISymbolVariable): ...


class ISymbolReader:
    @property
    def UserEntryPoint(self) -> SymbolToken: ...
    def GetDocument(self, url: str, language: Guid, languageVendor: Guid, documentType: Guid) -> ISymbolDocument: ...
    def GetDocuments(self) -> Set(ISymbolDocument): ...
    def GetGlobalVariables(self) -> Set(ISymbolVariable): ...
    @overload
    def GetMethod(self, method: SymbolToken) -> ISymbolMethod: ...
    @overload
    def GetMethod(self, method: SymbolToken, version: int) -> ISymbolMethod: ...
    def GetMethodFromDocumentPosition(self, document: ISymbolDocument, line: int, column: int) -> ISymbolMethod: ...
    def GetNamespaces(self) -> Set(ISymbolNamespace): ...
    def GetSymAttribute(self, parent: SymbolToken, name: str) -> Set(Byte): ...
    def GetVariables(self, parent: SymbolToken) -> Set(ISymbolVariable): ...


class ISymbolScope:
    @property
    def EndOffset(self) -> int: ...
    @property
    def Method(self) -> ISymbolMethod: ...
    @property
    def Parent(self) -> ISymbolScope: ...
    @property
    def StartOffset(self) -> int: ...
    def GetChildren(self) -> Set(ISymbolScope): ...
    def GetLocals(self) -> Set(ISymbolVariable): ...
    def GetNamespaces(self) -> Set(ISymbolNamespace): ...


class ISymbolVariable:
    @property
    def AddressField1(self) -> int: ...
    @property
    def AddressField2(self) -> int: ...
    @property
    def AddressField3(self) -> int: ...
    @property
    def AddressKind(self) -> SymAddressKind: ...
    @property
    def Attributes(self) -> Object: ...
    @property
    def EndOffset(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def StartOffset(self) -> int: ...
    def GetSignature(self) -> Set(Byte): ...


class ISymbolWriter:
    def Close(self) -> None: ...
    def CloseMethod(self) -> None: ...
    def CloseNamespace(self) -> None: ...
    def CloseScope(self, endOffset: int) -> None: ...
    def DefineDocument(self, url: str, language: Guid, languageVendor: Guid, documentType: Guid) -> ISymbolDocumentWriter: ...
    def DefineField(self, parent: SymbolToken, name: str, attributes: FieldAttributes, signature: Set(Byte), addrKind: SymAddressKind, addr1: int, addr2: int, addr3: int) -> None: ...
    def DefineGlobalVariable(self, name: str, attributes: FieldAttributes, signature: Set(Byte), addrKind: SymAddressKind, addr1: int, addr2: int, addr3: int) -> None: ...
    def DefineLocalVariable(self, name: str, attributes: FieldAttributes, signature: Set(Byte), addrKind: SymAddressKind, addr1: int, addr2: int, addr3: int, startOffset: int, endOffset: int) -> None: ...
    def DefineParameter(self, name: str, attributes: ParameterAttributes, sequence: int, addrKind: SymAddressKind, addr1: int, addr2: int, addr3: int) -> None: ...
    def DefineSequencePoints(self, document: ISymbolDocumentWriter, offsets: Set(int), lines: Set(int), columns: Set(int), endLines: Set(int), endColumns: Set(int)) -> None: ...
    def Initialize(self, emitter: IntPtr, filename: str, fFullBuild: bool) -> None: ...
    def OpenMethod(self, method: SymbolToken) -> None: ...
    def OpenNamespace(self, name: str) -> None: ...
    def OpenScope(self, startOffset: int) -> int: ...
    def SetMethodSourceRange(self, startDoc: ISymbolDocumentWriter, startLine: int, startColumn: int, endDoc: ISymbolDocumentWriter, endLine: int, endColumn: int) -> None: ...
    def SetScopeRange(self, scopeID: int, startOffset: int, endOffset: int) -> None: ...
    def SetSymAttribute(self, parent: SymbolToken, name: str, data: Set(Byte)) -> None: ...
    def SetUnderlyingWriter(self, underlyingWriter: IntPtr) -> None: ...
    def SetUserEntryPoint(self, entryMethod: SymbolToken) -> None: ...
    def UsingNamespace(self, fullName: str) -> None: ...


class SymAddressKind:
    ILOffset = 1
    NativeRVA = 2
    NativeRegister = 3
    NativeRegisterRelative = 4
    NativeOffset = 5
    NativeRegisterRegister = 6
    NativeRegisterStack = 7
    NativeStackRegister = 8
    BitField = 9
    NativeSectionOffset = 10


class SymbolToken(ValueType):
    def __init__(self, val: int): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, obj: SymbolToken) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetToken(self) -> int: ...
    def op_Equality(a: SymbolToken, b: SymbolToken) -> bool: ...
    def op_Inequality(a: SymbolToken, b: SymbolToken) -> bool: ...


class SymDocumentType(Object):
    def __init__(self): ...


class SymLanguageType(Object):
    def __init__(self): ...


class SymLanguageVendor(Object):
    def __init__(self): ...
