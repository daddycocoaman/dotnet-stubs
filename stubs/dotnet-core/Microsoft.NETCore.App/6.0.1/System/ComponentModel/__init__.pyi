from typing import Tuple, Set, Iterable, List


class DataErrorsChangedEventArgs(EventArgs):
    def __init__(self, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...


class INotifyDataErrorInfo:
    def add_ErrorsChanged(self, value: EventHandler) -> None: ...
    @property
    def HasErrors(self) -> bool: ...
    def GetErrors(self, propertyName: str) -> IEnumerable: ...
    def remove_ErrorsChanged(self, value: EventHandler) -> None: ...


class INotifyPropertyChanged:
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...


class INotifyPropertyChanging:
    def add_PropertyChanging(self, value: PropertyChangingEventHandler) -> None: ...
    def remove_PropertyChanging(self, value: PropertyChangingEventHandler) -> None: ...


class PropertyChangedEventArgs(EventArgs):
    def __init__(self, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...


class PropertyChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PropertyChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PropertyChangedEventArgs) -> None: ...


class PropertyChangingEventArgs(EventArgs):
    def __init__(self, propertyName: str): ...
    @property
    def PropertyName(self) -> str: ...


class PropertyChangingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: PropertyChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: PropertyChangingEventArgs) -> None: ...


class TypeConverterAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, typeName: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ConverterTypeName(self) -> str: ...
    def GetHashCode(self) -> int: ...


class TypeDescriptionProviderAttribute(Attribute):
    @overload
    def __init__(self, typeName: str): ...
    @overload
    def __init__(self, type: Type): ...
    @property
    def TypeName(self) -> str: ...
