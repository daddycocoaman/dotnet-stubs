__all__ = ['Schema']
from typing import Tuple, Set, Iterable, List


class AssociatedMetadataTypeTypeDescriptionProvider(TypeDescriptionProvider):
    @overload
    def __init__(self, type: Type): ...
    @overload
    def __init__(self, type: Type, associatedMetadataType: Type): ...
    @overload
    def GetTypeDescriptor(self, objectType: Type, instance: Object) -> ICustomTypeDescriptor: ...


class CompareAttribute(ValidationAttribute):
    def __init__(self, otherProperty: str): ...
    def FormatErrorMessage(self, name: str) -> str: ...
    @property
    def OtherProperty(self) -> str: ...
    @property
    def OtherPropertyDisplayName(self) -> str: ...
    @property
    def RequiresValidationContext(self) -> bool: ...


class ConcurrencyCheckAttribute(Attribute):
    def __init__(self): ...


class CreditCardAttribute(DataTypeAttribute):
    def __init__(self): ...
    def IsValid(self, value: Object) -> bool: ...


class CustomValidationAttribute(ValidationAttribute):
    def __init__(self, validatorType: Type, method: str): ...
    def FormatErrorMessage(self, name: str) -> str: ...
    @property
    def Method(self) -> str: ...
    @property
    def RequiresValidationContext(self) -> bool: ...
    @property
    def TypeId(self) -> Object: ...
    @property
    def ValidatorType(self) -> Type: ...


class DataType:
    Custom = 0
    DateTime = 1
    Date = 2
    Time = 3
    Duration = 4
    PhoneNumber = 5
    Currency = 6
    Text = 7
    Html = 8
    MultilineText = 9
    EmailAddress = 10
    Password = 11
    Url = 12
    ImageUrl = 13
    CreditCard = 14
    PostalCode = 15
    Upload = 16


class DataTypeAttribute(ValidationAttribute):
    @overload
    def __init__(self, dataType: DataType): ...
    @overload
    def __init__(self, customDataType: str): ...
    @property
    def CustomDataType(self) -> str: ...
    @property
    def DataType(self) -> DataType: ...
    @property
    def DisplayFormat(self) -> DisplayFormatAttribute: ...
    def GetDataTypeName(self) -> str: ...
    def IsValid(self, value: Object) -> bool: ...


class DisplayAttribute(Attribute):
    def __init__(self): ...
    @property
    def AutoGenerateField(self) -> bool: ...
    @property
    def AutoGenerateFilter(self) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def GroupName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Order(self) -> int: ...
    @property
    def Prompt(self) -> str: ...
    @property
    def ResourceType(self) -> Type: ...
    @property
    def ShortName(self) -> str: ...
    def GetAutoGenerateField(self) -> Nullable: ...
    def GetAutoGenerateFilter(self) -> Nullable: ...
    def GetDescription(self) -> str: ...
    def GetGroupName(self) -> str: ...
    def GetName(self) -> str: ...
    def GetOrder(self) -> Nullable: ...
    def GetPrompt(self) -> str: ...
    def GetShortName(self) -> str: ...
    @AutoGenerateField.setter
    def AutoGenerateField(self, value: bool) -> None: ...
    @AutoGenerateFilter.setter
    def AutoGenerateFilter(self, value: bool) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @GroupName.setter
    def GroupName(self, value: str) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Order.setter
    def Order(self, value: int) -> None: ...
    @Prompt.setter
    def Prompt(self, value: str) -> None: ...
    @ResourceType.setter
    def ResourceType(self, value: Type) -> None: ...
    @ShortName.setter
    def ShortName(self, value: str) -> None: ...


class DisplayColumnAttribute(Attribute):
    @overload
    def __init__(self, displayColumn: str): ...
    @overload
    def __init__(self, displayColumn: str, sortColumn: str): ...
    @overload
    def __init__(self, displayColumn: str, sortColumn: str, sortDescending: bool): ...
    @property
    def DisplayColumn(self) -> str: ...
    @property
    def SortColumn(self) -> str: ...
    @property
    def SortDescending(self) -> bool: ...


class DisplayFormatAttribute(Attribute):
    def __init__(self): ...
    @property
    def ApplyFormatInEditMode(self) -> bool: ...
    @property
    def ConvertEmptyStringToNull(self) -> bool: ...
    @property
    def DataFormatString(self) -> str: ...
    @property
    def HtmlEncode(self) -> bool: ...
    @property
    def NullDisplayText(self) -> str: ...
    @property
    def NullDisplayTextResourceType(self) -> Type: ...
    def GetNullDisplayText(self) -> str: ...
    @ApplyFormatInEditMode.setter
    def ApplyFormatInEditMode(self, value: bool) -> None: ...
    @ConvertEmptyStringToNull.setter
    def ConvertEmptyStringToNull(self, value: bool) -> None: ...
    @DataFormatString.setter
    def DataFormatString(self, value: str) -> None: ...
    @HtmlEncode.setter
    def HtmlEncode(self, value: bool) -> None: ...
    @NullDisplayText.setter
    def NullDisplayText(self, value: str) -> None: ...
    @NullDisplayTextResourceType.setter
    def NullDisplayTextResourceType(self, value: Type) -> None: ...


class EditableAttribute(Attribute):
    def __init__(self, allowEdit: bool): ...
    @property
    def AllowEdit(self) -> bool: ...
    @property
    def AllowInitialValue(self) -> bool: ...
    @AllowInitialValue.setter
    def AllowInitialValue(self, value: bool) -> None: ...


class EmailAddressAttribute(DataTypeAttribute):
    def __init__(self): ...
    def IsValid(self, value: Object) -> bool: ...


class EnumDataTypeAttribute(DataTypeAttribute):
    def __init__(self, enumType: Type): ...
    @property
    def EnumType(self) -> Type: ...
    def IsValid(self, value: Object) -> bool: ...


class FileExtensionsAttribute(DataTypeAttribute):
    def __init__(self): ...
    def FormatErrorMessage(self, name: str) -> str: ...
    @property
    def Extensions(self) -> str: ...
    def IsValid(self, value: Object) -> bool: ...
    @Extensions.setter
    def Extensions(self, value: str) -> None: ...


class IValidatableObject:
    def Validate(self, validationContext: ValidationContext) -> Iterable[ValidationResult]: ...


class KeyAttribute(Attribute):
    def __init__(self): ...


class MaxLengthAttribute(ValidationAttribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, length: int): ...
    def FormatErrorMessage(self, name: str) -> str: ...
    @property
    def Length(self) -> int: ...
    def IsValid(self, value: Object) -> bool: ...


class MetadataTypeAttribute(Attribute):
    def __init__(self, metadataClassType: Type): ...
    @property
    def MetadataClassType(self) -> Type: ...


class MinLengthAttribute(ValidationAttribute):
    def __init__(self, length: int): ...
    def FormatErrorMessage(self, name: str) -> str: ...
    @property
    def Length(self) -> int: ...
    def IsValid(self, value: Object) -> bool: ...


class PhoneAttribute(DataTypeAttribute):
    def __init__(self): ...
    def IsValid(self, value: Object) -> bool: ...


class RangeAttribute(ValidationAttribute):
    @overload
    def __init__(self, minimum: int, maximum: int): ...
    @overload
    def __init__(self, minimum: float, maximum: float): ...
    @overload
    def __init__(self, type: Type, minimum: str, maximum: str): ...
    def FormatErrorMessage(self, name: str) -> str: ...
    @property
    def ConvertValueInInvariantCulture(self) -> bool: ...
    @property
    def Maximum(self) -> Object: ...
    @property
    def Minimum(self) -> Object: ...
    @property
    def OperandType(self) -> Type: ...
    @property
    def ParseLimitsInInvariantCulture(self) -> bool: ...
    def IsValid(self, value: Object) -> bool: ...
    @ConvertValueInInvariantCulture.setter
    def ConvertValueInInvariantCulture(self, value: bool) -> None: ...
    @ParseLimitsInInvariantCulture.setter
    def ParseLimitsInInvariantCulture(self, value: bool) -> None: ...


class RegularExpressionAttribute(ValidationAttribute):
    def __init__(self, pattern: str): ...
    def FormatErrorMessage(self, name: str) -> str: ...
    @property
    def MatchTimeoutInMilliseconds(self) -> int: ...
    @property
    def Pattern(self) -> str: ...
    def IsValid(self, value: Object) -> bool: ...
    @MatchTimeoutInMilliseconds.setter
    def MatchTimeoutInMilliseconds(self, value: int) -> None: ...


class RequiredAttribute(ValidationAttribute):
    def __init__(self): ...
    @property
    def AllowEmptyStrings(self) -> bool: ...
    def IsValid(self, value: Object) -> bool: ...
    @AllowEmptyStrings.setter
    def AllowEmptyStrings(self, value: bool) -> None: ...


class ScaffoldColumnAttribute(Attribute):
    def __init__(self, scaffold: bool): ...
    @property
    def Scaffold(self) -> bool: ...


class StringLengthAttribute(ValidationAttribute):
    def __init__(self, maximumLength: int): ...
    def FormatErrorMessage(self, name: str) -> str: ...
    @property
    def MaximumLength(self) -> int: ...
    @property
    def MinimumLength(self) -> int: ...
    def IsValid(self, value: Object) -> bool: ...
    @MinimumLength.setter
    def MinimumLength(self, value: int) -> None: ...


class TimestampAttribute(Attribute):
    def __init__(self): ...


class UIHintAttribute(Attribute):
    @overload
    def __init__(self, uiHint: str): ...
    @overload
    def __init__(self, uiHint: str, presentationLayer: str): ...
    @overload
    def __init__(self, uiHint: str, presentationLayer: str, controlParameters: Set(Object)): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ControlParameters(self) -> IDictionary: ...
    @property
    def PresentationLayer(self) -> str: ...
    @property
    def UIHint(self) -> str: ...
    def GetHashCode(self) -> int: ...


class UrlAttribute(DataTypeAttribute):
    def __init__(self): ...
    def IsValid(self, value: Object) -> bool: ...


class ValidationAttribute(Attribute):
    def FormatErrorMessage(self, name: str) -> str: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def ErrorMessageResourceName(self) -> str: ...
    @property
    def ErrorMessageResourceType(self) -> Type: ...
    @property
    def RequiresValidationContext(self) -> bool: ...
    def GetValidationResult(self, value: Object, validationContext: ValidationContext) -> ValidationResult: ...
    def IsValid(self, value: Object) -> bool: ...
    @ErrorMessage.setter
    def ErrorMessage(self, value: str) -> None: ...
    @ErrorMessageResourceName.setter
    def ErrorMessageResourceName(self, value: str) -> None: ...
    @ErrorMessageResourceType.setter
    def ErrorMessageResourceType(self, value: Type) -> None: ...
    @overload
    def Validate(self, value: Object, name: str) -> None: ...
    @overload
    def Validate(self, value: Object, validationContext: ValidationContext) -> None: ...


class ValidationContext(Object):
    @overload
    def __init__(self, instance: Object): ...
    @overload
    def __init__(self, instance: Object, items: IDictionary): ...
    @overload
    def __init__(self, instance: Object, serviceProvider: IServiceProvider, items: IDictionary): ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Items(self) -> IDictionary: ...
    @property
    def MemberName(self) -> str: ...
    @property
    def ObjectInstance(self) -> Object: ...
    @property
    def ObjectType(self) -> Type: ...
    def GetService(self, serviceType: Type) -> Object: ...
    def InitializeServiceProvider(self, serviceProvider: Func) -> None: ...
    @DisplayName.setter
    def DisplayName(self, value: str) -> None: ...
    @MemberName.setter
    def MemberName(self, value: str) -> None: ...


class ValidationException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, validationResult: ValidationResult, validatingAttribute: ValidationAttribute, value: Object): ...
    @overload
    def __init__(self, errorMessage: str, validatingAttribute: ValidationAttribute, value: Object): ...
    @property
    def ValidationAttribute(self) -> ValidationAttribute: ...
    @property
    def ValidationResult(self) -> ValidationResult: ...
    @property
    def Value(self) -> Object: ...


class ValidationResult(Object):
    @overload
    def __init__(self, errorMessage: str): ...
    @overload
    def __init__(self, errorMessage: str, memberNames: Iterable[str]): ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def MemberNames(self) -> Iterable[str]: ...
    @ErrorMessage.setter
    def ErrorMessage(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class Validator(Object):
    @overload
    def TryValidateObject(instance: Object, validationContext: ValidationContext, validationResults: ICollection) -> bool: ...
    @overload
    def TryValidateObject(instance: Object, validationContext: ValidationContext, validationResults: ICollection, validateAllProperties: bool) -> bool: ...
    def TryValidateProperty(value: Object, validationContext: ValidationContext, validationResults: ICollection) -> bool: ...
    def TryValidateValue(value: Object, validationContext: ValidationContext, validationResults: ICollection, validationAttributes: Iterable[ValidationAttribute]) -> bool: ...
    @overload
    def ValidateObject(instance: Object, validationContext: ValidationContext) -> None: ...
    @overload
    def ValidateObject(instance: Object, validationContext: ValidationContext, validateAllProperties: bool) -> None: ...
    def ValidateProperty(value: Object, validationContext: ValidationContext) -> None: ...
    def ValidateValue(value: Object, validationContext: ValidationContext, validationAttributes: Iterable[ValidationAttribute]) -> None: ...
