from typing import Tuple, Set, Iterable, List


class ComponentSerializationService(Object):
    def CreateStore(self) -> SerializationStore: ...
    @overload
    def Deserialize(self, store: SerializationStore) -> ICollection: ...
    @overload
    def Deserialize(self, store: SerializationStore, container: IContainer) -> ICollection: ...
    @overload
    def DeserializeTo(self, store: SerializationStore, container: IContainer) -> None: ...
    @overload
    def DeserializeTo(self, store: SerializationStore, container: IContainer, validateRecycledTypes: bool) -> None: ...
    @overload
    def DeserializeTo(self, store: SerializationStore, container: IContainer, validateRecycledTypes: bool, applyDefaults: bool) -> None: ...
    def LoadStore(self, stream: Stream) -> SerializationStore: ...
    def Serialize(self, store: SerializationStore, value: Object) -> None: ...
    def SerializeAbsolute(self, store: SerializationStore, value: Object) -> None: ...
    def SerializeMember(self, store: SerializationStore, owningObject: Object, member: MemberDescriptor) -> None: ...
    def SerializeMemberAbsolute(self, store: SerializationStore, owningObject: Object, member: MemberDescriptor) -> None: ...


class ContextStack(Object):
    def __init__(self): ...
    def Append(self, context: Object) -> None: ...
    @property
    def Current(self) -> Object: ...
    @property
    def Item(self, level: int) -> Object: ...
    @property
    def Item(self, type: Type) -> Object: ...
    def Pop(self) -> Object: ...
    def Push(self, context: Object) -> None: ...


class DefaultSerializationProviderAttribute(Attribute):
    @overload
    def __init__(self, providerType: Type): ...
    @overload
    def __init__(self, providerTypeName: str): ...
    @property
    def ProviderTypeName(self) -> str: ...


class DesignerLoader(Object):
    def BeginLoad(self, host: IDesignerLoaderHost) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> None: ...
    @property
    def Loading(self) -> bool: ...


class IDesignerLoaderHost:
    def EndLoad(self, baseClassName: str, successful: bool, errorCollection: ICollection) -> None: ...
    def Reload(self) -> None: ...


class IDesignerLoaderHost2:
    @property
    def CanReloadWithErrors(self) -> bool: ...
    @property
    def IgnoreErrorsDuringReload(self) -> bool: ...
    @CanReloadWithErrors.setter
    def CanReloadWithErrors(self, value: bool) -> None: ...
    @IgnoreErrorsDuringReload.setter
    def IgnoreErrorsDuringReload(self, value: bool) -> None: ...


class IDesignerLoaderService:
    def AddLoadDependency(self) -> None: ...
    def DependentLoadComplete(self, successful: bool, errorCollection: ICollection) -> None: ...
    def Reload(self) -> bool: ...


class IDesignerSerializationManager:
    def add_ResolveName(self, value: ResolveNameEventHandler) -> None: ...
    def add_SerializationComplete(self, value: EventHandler) -> None: ...
    def AddSerializationProvider(self, provider: IDesignerSerializationProvider) -> None: ...
    def CreateInstance(self, type: Type, arguments: ICollection, name: str, addToContainer: bool) -> Object: ...
    @property
    def Context(self) -> ContextStack: ...
    @property
    def Properties(self) -> PropertyDescriptorCollection: ...
    def GetInstance(self, name: str) -> Object: ...
    def GetName(self, value: Object) -> str: ...
    def GetSerializer(self, objectType: Type, serializerType: Type) -> Object: ...
    def GetType(self, typeName: str) -> Type: ...
    def remove_ResolveName(self, value: ResolveNameEventHandler) -> None: ...
    def remove_SerializationComplete(self, value: EventHandler) -> None: ...
    def RemoveSerializationProvider(self, provider: IDesignerSerializationProvider) -> None: ...
    def ReportError(self, errorInformation: Object) -> None: ...
    def SetName(self, instance: Object, name: str) -> None: ...


class IDesignerSerializationProvider:
    def GetSerializer(self, manager: IDesignerSerializationManager, currentSerializer: Object, objectType: Type, serializerType: Type) -> Object: ...


class IDesignerSerializationService:
    def Deserialize(self, serializationData: Object) -> ICollection: ...
    def Serialize(self, objects: ICollection) -> Object: ...


class INameCreationService:
    def CreateName(self, container: IContainer, dataType: Type) -> str: ...
    def IsValidName(self, name: str) -> bool: ...
    def ValidateName(self, name: str) -> None: ...


class InstanceDescriptor(Object):
    @overload
    def __init__(self, member: MemberInfo, arguments: ICollection): ...
    @overload
    def __init__(self, member: MemberInfo, arguments: ICollection, isComplete: bool): ...
    @property
    def Arguments(self) -> ICollection: ...
    @property
    def IsComplete(self) -> bool: ...
    @property
    def MemberInfo(self) -> MemberInfo: ...
    def Invoke(self) -> Object: ...


class MemberRelationship(ValueType):
    def __init__(self, owner: Object, member: MemberDescriptor): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Member(self) -> MemberDescriptor: ...
    @property
    def Owner(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: MemberRelationship, right: MemberRelationship) -> bool: ...
    def op_Inequality(left: MemberRelationship, right: MemberRelationship) -> bool: ...


class MemberRelationshipService(Object):
    @property
    def Item(self, source: MemberRelationship) -> MemberRelationship: ...
    @property
    def Item(self, sourceOwner: Object, sourceMember: MemberDescriptor) -> MemberRelationship: ...
    @Item.setter
    def Item(self, source: MemberRelationship, value: MemberRelationship) -> None: ...
    @Item.setter
    def Item(self, sourceOwner: Object, sourceMember: MemberDescriptor, value: MemberRelationship) -> None: ...
    def SupportsRelationship(self, source: MemberRelationship, relationship: MemberRelationship) -> bool: ...


class ResolveNameEventArgs(EventArgs):
    def __init__(self, name: str): ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class ResolveNameEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ResolveNameEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ResolveNameEventArgs) -> None: ...


class SerializationStore(Object):
    def Close(self) -> None: ...
    @property
    def Errors(self) -> ICollection: ...
    def Save(self, stream: Stream) -> None: ...
