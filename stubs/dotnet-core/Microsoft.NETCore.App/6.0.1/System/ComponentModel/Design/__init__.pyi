__all__ = ['Serialization']
from typing import Tuple, Set, Iterable, List


class ActiveDesignerEventArgs(EventArgs):
    def __init__(self, oldDesigner: IDesignerHost, newDesigner: IDesignerHost): ...
    @property
    def NewDesigner(self) -> IDesignerHost: ...
    @property
    def OldDesigner(self) -> IDesignerHost: ...


class ActiveDesignerEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ActiveDesignerEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ActiveDesignerEventArgs) -> None: ...


class CheckoutException(ExternalException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, errorCode: int): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class CommandID(Object):
    def __init__(self, menuGroup: Guid, commandID: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Guid(self) -> Guid: ...
    @property
    def ID(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class ComponentChangedEventArgs(EventArgs):
    def __init__(self, component: Object, member: MemberDescriptor, oldValue: Object, newValue: Object): ...
    @property
    def Component(self) -> Object: ...
    @property
    def Member(self) -> MemberDescriptor: ...
    @property
    def NewValue(self) -> Object: ...
    @property
    def OldValue(self) -> Object: ...


class ComponentChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ComponentChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ComponentChangedEventArgs) -> None: ...


class ComponentChangingEventArgs(EventArgs):
    def __init__(self, component: Object, member: MemberDescriptor): ...
    @property
    def Component(self) -> Object: ...
    @property
    def Member(self) -> MemberDescriptor: ...


class ComponentChangingEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ComponentChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ComponentChangingEventArgs) -> None: ...


class ComponentEventArgs(EventArgs):
    def __init__(self, component: IComponent): ...
    @property
    def Component(self) -> IComponent: ...


class ComponentEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ComponentEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ComponentEventArgs) -> None: ...


class ComponentRenameEventArgs(EventArgs):
    def __init__(self, component: Object, oldName: str, newName: str): ...
    @property
    def Component(self) -> Object: ...
    @property
    def NewName(self) -> str: ...
    @property
    def OldName(self) -> str: ...


class ComponentRenameEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ComponentRenameEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ComponentRenameEventArgs) -> None: ...


class DesignerCollection(Object):
    @overload
    def __init__(self, designers: Set(IDesignerHost)): ...
    @overload
    def __init__(self, designers: IList): ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> IDesignerHost: ...
    def GetEnumerator(self) -> IEnumerator: ...


class DesignerEventArgs(EventArgs):
    def __init__(self, host: IDesignerHost): ...
    @property
    def Designer(self) -> IDesignerHost: ...


class DesignerEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DesignerEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DesignerEventArgs) -> None: ...


class DesignerOptionCollection(Object):
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> DesignerOptionCollection: ...
    @property
    def Item(self, name: str) -> DesignerOptionCollection: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> DesignerOptionCollection: ...
    @property
    def Properties(self) -> PropertyDescriptorCollection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IndexOf(self, value: DesignerOptionCollection) -> int: ...
    def ShowDialog(self) -> bool: ...


class DesignerOptionService(Object):
    @property
    def Options(self) -> DesignerOptionCollection: ...


class DesignerTransaction(Object):
    def Cancel(self) -> None: ...
    def Commit(self) -> None: ...
    @property
    def Canceled(self) -> bool: ...
    @property
    def Committed(self) -> bool: ...
    @property
    def Description(self) -> str: ...


class DesignerTransactionCloseEventArgs(EventArgs):
    @overload
    def __init__(self, commit: bool): ...
    @overload
    def __init__(self, commit: bool, lastTransaction: bool): ...
    @property
    def LastTransaction(self) -> bool: ...
    @property
    def TransactionCommitted(self) -> bool: ...


class DesignerTransactionCloseEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: DesignerTransactionCloseEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: DesignerTransactionCloseEventArgs) -> None: ...


class DesignerVerb(MenuCommand):
    @overload
    def __init__(self, text: str, handler: EventHandler): ...
    @overload
    def __init__(self, text: str, handler: EventHandler, startCommandID: CommandID): ...
    @property
    def Description(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class DesignerVerbCollection(CollectionBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Set(DesignerVerb)): ...
    def Add(self, value: DesignerVerb) -> int: ...
    @overload
    def AddRange(self, value: Set(DesignerVerb)) -> None: ...
    @overload
    def AddRange(self, value: DesignerVerbCollection) -> None: ...
    def Contains(self, value: DesignerVerb) -> bool: ...
    def CopyTo(self, array: Set(DesignerVerb), index: int) -> None: ...
    @property
    def Item(self, index: int) -> DesignerVerb: ...
    def IndexOf(self, value: DesignerVerb) -> int: ...
    def Insert(self, index: int, value: DesignerVerb) -> None: ...
    def Remove(self, value: DesignerVerb) -> None: ...
    @Item.setter
    def Item(self, index: int, value: DesignerVerb) -> None: ...


class DesigntimeLicenseContext(LicenseContext):
    def __init__(self): ...
    @property
    def UsageMode(self) -> LicenseUsageMode: ...
    def GetSavedLicenseKey(self, type: Type, resourceAssembly: Assembly) -> str: ...
    def SetSavedLicenseKey(self, type: Type, key: str) -> None: ...


class DesigntimeLicenseContextSerializer(Object):
    def Serialize(o: Stream, cryptoKey: str, context: DesigntimeLicenseContext) -> None: ...


class HelpContextType:
    Ambient = 0
    Window = 1
    Selection = 2
    ToolWindowSelection = 3


class HelpKeywordAttribute(Attribute):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, keyword: str): ...
    @overload
    def __init__(self, t: Type): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def HelpKeyword(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def IsDefaultAttribute(self) -> bool: ...


class HelpKeywordType:
    F1Keyword = 0
    GeneralKeyword = 1
    FilterKeyword = 2


class IComponentChangeService:
    def add_ComponentAdded(self, value: ComponentEventHandler) -> None: ...
    def add_ComponentAdding(self, value: ComponentEventHandler) -> None: ...
    def add_ComponentChanged(self, value: ComponentChangedEventHandler) -> None: ...
    def add_ComponentChanging(self, value: ComponentChangingEventHandler) -> None: ...
    def add_ComponentRemoved(self, value: ComponentEventHandler) -> None: ...
    def add_ComponentRemoving(self, value: ComponentEventHandler) -> None: ...
    def add_ComponentRename(self, value: ComponentRenameEventHandler) -> None: ...
    def OnComponentChanged(self, component: Object, member: MemberDescriptor, oldValue: Object, newValue: Object) -> None: ...
    def OnComponentChanging(self, component: Object, member: MemberDescriptor) -> None: ...
    def remove_ComponentAdded(self, value: ComponentEventHandler) -> None: ...
    def remove_ComponentAdding(self, value: ComponentEventHandler) -> None: ...
    def remove_ComponentChanged(self, value: ComponentChangedEventHandler) -> None: ...
    def remove_ComponentChanging(self, value: ComponentChangingEventHandler) -> None: ...
    def remove_ComponentRemoved(self, value: ComponentEventHandler) -> None: ...
    def remove_ComponentRemoving(self, value: ComponentEventHandler) -> None: ...
    def remove_ComponentRename(self, value: ComponentRenameEventHandler) -> None: ...


class IComponentDiscoveryService:
    def GetComponentTypes(self, designerHost: IDesignerHost, baseType: Type) -> ICollection: ...


class IComponentInitializer:
    def InitializeExistingComponent(self, defaultValues: IDictionary) -> None: ...
    def InitializeNewComponent(self, defaultValues: IDictionary) -> None: ...


class IDesigner:
    def DoDefaultAction(self) -> None: ...
    @property
    def Component(self) -> IComponent: ...
    @property
    def Verbs(self) -> DesignerVerbCollection: ...
    def Initialize(self, component: IComponent) -> None: ...


class IDesignerEventService:
    def add_ActiveDesignerChanged(self, value: ActiveDesignerEventHandler) -> None: ...
    def add_DesignerCreated(self, value: DesignerEventHandler) -> None: ...
    def add_DesignerDisposed(self, value: DesignerEventHandler) -> None: ...
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    @property
    def ActiveDesigner(self) -> IDesignerHost: ...
    @property
    def Designers(self) -> DesignerCollection: ...
    def remove_ActiveDesignerChanged(self, value: ActiveDesignerEventHandler) -> None: ...
    def remove_DesignerCreated(self, value: DesignerEventHandler) -> None: ...
    def remove_DesignerDisposed(self, value: DesignerEventHandler) -> None: ...
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...


class IDesignerFilter:
    def PostFilterAttributes(self, attributes: IDictionary) -> None: ...
    def PostFilterEvents(self, events: IDictionary) -> None: ...
    def PostFilterProperties(self, properties: IDictionary) -> None: ...
    def PreFilterAttributes(self, attributes: IDictionary) -> None: ...
    def PreFilterEvents(self, events: IDictionary) -> None: ...
    def PreFilterProperties(self, properties: IDictionary) -> None: ...


class IDesignerHost:
    def Activate(self) -> None: ...
    def add_Activated(self, value: EventHandler) -> None: ...
    def add_Deactivated(self, value: EventHandler) -> None: ...
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    def add_TransactionClosed(self, value: DesignerTransactionCloseEventHandler) -> None: ...
    def add_TransactionClosing(self, value: DesignerTransactionCloseEventHandler) -> None: ...
    def add_TransactionOpened(self, value: EventHandler) -> None: ...
    def add_TransactionOpening(self, value: EventHandler) -> None: ...
    @overload
    def CreateComponent(self, componentClass: Type) -> IComponent: ...
    @overload
    def CreateComponent(self, componentClass: Type, name: str) -> IComponent: ...
    @overload
    def CreateTransaction(self) -> DesignerTransaction: ...
    @overload
    def CreateTransaction(self, description: str) -> DesignerTransaction: ...
    def DestroyComponent(self, component: IComponent) -> None: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def InTransaction(self) -> bool: ...
    @property
    def Loading(self) -> bool: ...
    @property
    def RootComponent(self) -> IComponent: ...
    @property
    def RootComponentClassName(self) -> str: ...
    @property
    def TransactionDescription(self) -> str: ...
    def GetDesigner(self, component: IComponent) -> IDesigner: ...
    def GetType(self, typeName: str) -> Type: ...
    def remove_Activated(self, value: EventHandler) -> None: ...
    def remove_Deactivated(self, value: EventHandler) -> None: ...
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    def remove_TransactionClosed(self, value: DesignerTransactionCloseEventHandler) -> None: ...
    def remove_TransactionClosing(self, value: DesignerTransactionCloseEventHandler) -> None: ...
    def remove_TransactionOpened(self, value: EventHandler) -> None: ...
    def remove_TransactionOpening(self, value: EventHandler) -> None: ...


class IDesignerHostTransactionState:
    @property
    def IsClosingTransaction(self) -> bool: ...


class IDesignerOptionService:
    def GetOptionValue(self, pageName: str, valueName: str) -> Object: ...
    def SetOptionValue(self, pageName: str, valueName: str, value: Object) -> None: ...


class IDictionaryService:
    def GetKey(self, value: Object) -> Object: ...
    def GetValue(self, key: Object) -> Object: ...
    def SetValue(self, key: Object, value: Object) -> None: ...


class IEventBindingService:
    def CreateUniqueMethodName(self, component: IComponent, e: EventDescriptor) -> str: ...
    def GetCompatibleMethods(self, e: EventDescriptor) -> ICollection: ...
    def GetEvent(self, property: PropertyDescriptor) -> EventDescriptor: ...
    def GetEventProperties(self, events: EventDescriptorCollection) -> PropertyDescriptorCollection: ...
    def GetEventProperty(self, e: EventDescriptor) -> PropertyDescriptor: ...
    @overload
    def ShowCode(self) -> bool: ...
    @overload
    def ShowCode(self, lineNumber: int) -> bool: ...
    @overload
    def ShowCode(self, component: IComponent, e: EventDescriptor) -> bool: ...


class IExtenderListService:
    def GetExtenderProviders(self) -> Set(IExtenderProvider): ...


class IExtenderProviderService:
    def AddExtenderProvider(self, provider: IExtenderProvider) -> None: ...
    def RemoveExtenderProvider(self, provider: IExtenderProvider) -> None: ...


class IHelpService:
    def AddContextAttribute(self, name: str, value: str, keywordType: HelpKeywordType) -> None: ...
    def ClearContextAttributes(self) -> None: ...
    def CreateLocalContext(self, contextType: HelpContextType) -> IHelpService: ...
    def RemoveContextAttribute(self, name: str, value: str) -> None: ...
    def RemoveLocalContext(self, localContext: IHelpService) -> None: ...
    def ShowHelpFromKeyword(self, helpKeyword: str) -> None: ...
    def ShowHelpFromUrl(self, helpUrl: str) -> None: ...


class IInheritanceService:
    def AddInheritedComponents(self, component: IComponent, container: IContainer) -> None: ...
    def GetInheritanceAttribute(self, component: IComponent) -> InheritanceAttribute: ...


class IMenuCommandService:
    def AddCommand(self, command: MenuCommand) -> None: ...
    def AddVerb(self, verb: DesignerVerb) -> None: ...
    def FindCommand(self, commandID: CommandID) -> MenuCommand: ...
    @property
    def Verbs(self) -> DesignerVerbCollection: ...
    def GlobalInvoke(self, commandID: CommandID) -> bool: ...
    def RemoveCommand(self, command: MenuCommand) -> None: ...
    def RemoveVerb(self, verb: DesignerVerb) -> None: ...
    def ShowContextMenu(self, menuID: CommandID, x: int, y: int) -> None: ...


class IReferenceService:
    def GetComponent(self, reference: Object) -> IComponent: ...
    def GetName(self, reference: Object) -> str: ...
    def GetReference(self, name: str) -> Object: ...
    @overload
    def GetReferences(self) -> Set(Object): ...
    @overload
    def GetReferences(self, baseType: Type) -> Set(Object): ...


class IResourceService:
    def GetResourceReader(self, info: CultureInfo) -> IResourceReader: ...
    def GetResourceWriter(self, info: CultureInfo) -> IResourceWriter: ...


class IRootDesigner:
    @property
    def SupportedTechnologies(self) -> Set(ViewTechnology): ...
    def GetView(self, technology: ViewTechnology) -> Object: ...


class ISelectionService:
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    def add_SelectionChanging(self, value: EventHandler) -> None: ...
    @property
    def PrimarySelection(self) -> Object: ...
    @property
    def SelectionCount(self) -> int: ...
    def GetComponentSelected(self, component: Object) -> bool: ...
    def GetSelectedComponents(self) -> ICollection: ...
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    def remove_SelectionChanging(self, value: EventHandler) -> None: ...
    @overload
    def SetSelectedComponents(self, components: ICollection) -> None: ...
    @overload
    def SetSelectedComponents(self, components: ICollection, selectionType: SelectionTypes) -> None: ...


class IServiceContainer:
    @overload
    def AddService(self, serviceType: Type, serviceInstance: Object) -> None: ...
    @overload
    def AddService(self, serviceType: Type, callback: ServiceCreatorCallback) -> None: ...
    @overload
    def AddService(self, serviceType: Type, serviceInstance: Object, promote: bool) -> None: ...
    @overload
    def AddService(self, serviceType: Type, callback: ServiceCreatorCallback, promote: bool) -> None: ...
    @overload
    def RemoveService(self, serviceType: Type) -> None: ...
    @overload
    def RemoveService(self, serviceType: Type, promote: bool) -> None: ...


class ITreeDesigner:
    @property
    def Children(self) -> ICollection: ...
    @property
    def Parent(self) -> IDesigner: ...


class ITypeDescriptorFilterService:
    def FilterAttributes(self, component: IComponent, attributes: IDictionary) -> bool: ...
    def FilterEvents(self, component: IComponent, events: IDictionary) -> bool: ...
    def FilterProperties(self, component: IComponent, properties: IDictionary) -> bool: ...


class ITypeDiscoveryService:
    def GetTypes(self, baseType: Type, excludeGlobalTypes: bool) -> ICollection: ...


class ITypeResolutionService:
    @overload
    def GetAssembly(self, name: AssemblyName) -> Assembly: ...
    @overload
    def GetAssembly(self, name: AssemblyName, throwOnError: bool) -> Assembly: ...
    def GetPathOfAssembly(self, name: AssemblyName) -> str: ...
    @overload
    def GetType(self, name: str) -> Type: ...
    @overload
    def GetType(self, name: str, throwOnError: bool) -> Type: ...
    @overload
    def GetType(self, name: str, throwOnError: bool, ignoreCase: bool) -> Type: ...
    def ReferenceAssembly(self, name: AssemblyName) -> None: ...


class MenuCommand(Object):
    def __init__(self, handler: EventHandler, command: CommandID): ...
    def add_CommandChanged(self, value: EventHandler) -> None: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def CommandID(self) -> CommandID: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def OleStatus(self) -> int: ...
    @property
    def Properties(self) -> IDictionary: ...
    @property
    def Supported(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def Invoke(self, arg: Object) -> None: ...
    def remove_CommandChanged(self, value: EventHandler) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Supported.setter
    def Supported(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    def ToString(self) -> str: ...


class SelectionTypes:
    Auto = 1
    Normal = 1
    Replace = 2
    MouseDown = 4
    MouseUp = 8
    Click = 16
    Primary = 16
    Valid = 31
    Toggle = 32
    Add = 64
    Remove = 128


class ServiceContainer(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parentProvider: IServiceProvider): ...
    @overload
    def AddService(self, serviceType: Type, serviceInstance: Object) -> None: ...
    @overload
    def AddService(self, serviceType: Type, callback: ServiceCreatorCallback) -> None: ...
    @overload
    def AddService(self, serviceType: Type, serviceInstance: Object, promote: bool) -> None: ...
    @overload
    def AddService(self, serviceType: Type, callback: ServiceCreatorCallback, promote: bool) -> None: ...
    def Dispose(self) -> None: ...
    def GetService(self, serviceType: Type) -> Object: ...
    @overload
    def RemoveService(self, serviceType: Type) -> None: ...
    @overload
    def RemoveService(self, serviceType: Type, promote: bool) -> None: ...


class ServiceCreatorCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, container: IServiceContainer, serviceType: Type, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Object: ...
    def Invoke(self, container: IServiceContainer, serviceType: Type) -> Object: ...


class StandardCommands(Object):
    def __init__(self): ...


class StandardToolWindows(Object):
    def __init__(self): ...


class TypeDescriptionProviderService(Object):
    @overload
    def GetProvider(self, instance: Object) -> TypeDescriptionProvider: ...
    @overload
    def GetProvider(self, type: Type) -> TypeDescriptionProvider: ...


class ViewTechnology:
    Passthrough = 0
    WindowsForms = 1
    Default = 2
