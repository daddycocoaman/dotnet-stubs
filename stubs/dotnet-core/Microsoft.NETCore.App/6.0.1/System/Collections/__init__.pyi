__all__ = ['Specialized']
from typing import Tuple, Set, Iterable, List


class CaseInsensitiveComparer(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, culture: CultureInfo): ...
    def Compare(self, a: Object, b: Object) -> int: ...
    @property
    def Default() -> CaseInsensitiveComparer: ...
    @property
    def DefaultInvariant() -> CaseInsensitiveComparer: ...


class CollectionBase(Object):
    def Clear(self) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def RemoveAt(self, index: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...


class DictionaryBase(Object):
    def Clear(self) -> None: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> IDictionaryEnumerator: ...


class Queue(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, capacity: int): ...
    @overload
    def __init__(self, col: ICollection): ...
    @overload
    def __init__(self, capacity: int, growFactor: Single): ...
    def Clear(self) -> None: ...
    def Clone(self) -> Object: ...
    def Contains(self, obj: Object) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    def Dequeue(self) -> Object: ...
    def Enqueue(self, obj: Object) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Peek(self) -> Object: ...
    def Synchronized(queue: Queue) -> Queue: ...
    def ToArray(self) -> Set(Object): ...
    def TrimToSize(self) -> None: ...


class ReadOnlyCollectionBase(Object):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SortedList(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialCapacity: int): ...
    @overload
    def __init__(self, comparer: IComparer): ...
    @overload
    def __init__(self, d: IDictionary): ...
    @overload
    def __init__(self, comparer: IComparer, capacity: int): ...
    @overload
    def __init__(self, d: IDictionary, comparer: IComparer): ...
    def Add(self, key: Object, value: Object) -> None: ...
    def Clear(self) -> None: ...
    def Clone(self) -> Object: ...
    def Contains(self, key: Object) -> bool: ...
    def ContainsKey(self, key: Object) -> bool: ...
    def ContainsValue(self, value: Object) -> bool: ...
    def CopyTo(self, array: Array, arrayIndex: int) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsFixedSize(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, key: Object) -> Object: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def SyncRoot(self) -> Object: ...
    @property
    def Values(self) -> ICollection: ...
    def GetByIndex(self, index: int) -> Object: ...
    def GetEnumerator(self) -> IDictionaryEnumerator: ...
    def GetKey(self, index: int) -> Object: ...
    def GetKeyList(self) -> IList: ...
    def GetValueList(self) -> IList: ...
    def IndexOfKey(self, key: Object) -> int: ...
    def IndexOfValue(self, value: Object) -> int: ...
    def Remove(self, key: Object) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @Item.setter
    def Item(self, key: Object, value: Object) -> None: ...
    def SetByIndex(self, index: int, value: Object) -> None: ...
    def Synchronized(list: SortedList) -> SortedList: ...
    def TrimToSize(self) -> None: ...


class Stack(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialCapacity: int): ...
    @overload
    def __init__(self, col: ICollection): ...
    def Clear(self) -> None: ...
    def Clone(self) -> Object: ...
    def Contains(self, obj: Object) -> bool: ...
    def CopyTo(self, array: Array, index: int) -> None: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Peek(self) -> Object: ...
    def Pop(self) -> Object: ...
    def Push(self, obj: Object) -> None: ...
    def Synchronized(stack: Stack) -> Stack: ...
    def ToArray(self) -> Set(Object): ...
