from typing import Tuple, Set, Iterable, List


class Complex(ValueType):
    def __init__(self, real: float, imaginary: float): ...
    def Abs(value: Complex) -> float: ...
    def Acos(value: Complex) -> Complex: ...
    @overload
    def Add(left: float, right: Complex) -> Complex: ...
    @overload
    def Add(left: Complex, right: float) -> Complex: ...
    @overload
    def Add(left: Complex, right: Complex) -> Complex: ...
    def Asin(value: Complex) -> Complex: ...
    def Atan(value: Complex) -> Complex: ...
    def Conjugate(value: Complex) -> Complex: ...
    def Cos(value: Complex) -> Complex: ...
    def Cosh(value: Complex) -> Complex: ...
    @overload
    def Divide(dividend: Complex, divisor: Complex) -> Complex: ...
    @overload
    def Divide(dividend: Complex, divisor: float) -> Complex: ...
    @overload
    def Divide(dividend: float, divisor: Complex) -> Complex: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, value: Complex) -> bool: ...
    def Exp(value: Complex) -> Complex: ...
    def FromPolarCoordinates(magnitude: float, phase: float) -> Complex: ...
    @property
    def Imaginary(self) -> float: ...
    @property
    def Magnitude(self) -> float: ...
    @property
    def Phase(self) -> float: ...
    @property
    def Real(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def IsFinite(value: Complex) -> bool: ...
    def IsInfinity(value: Complex) -> bool: ...
    def IsNaN(value: Complex) -> bool: ...
    @overload
    def Log(value: Complex) -> Complex: ...
    @overload
    def Log(value: Complex, baseValue: float) -> Complex: ...
    def Log10(value: Complex) -> Complex: ...
    @overload
    def Multiply(left: Complex, right: Complex) -> Complex: ...
    @overload
    def Multiply(left: Complex, right: float) -> Complex: ...
    @overload
    def Multiply(left: float, right: Complex) -> Complex: ...
    def Negate(value: Complex) -> Complex: ...
    @overload
    def op_Addition(left: Complex, right: float) -> Complex: ...
    @overload
    def op_Addition(left: float, right: Complex) -> Complex: ...
    @overload
    def op_Addition(left: Complex, right: Complex) -> Complex: ...
    @overload
    def op_Division(left: Complex, right: float) -> Complex: ...
    @overload
    def op_Division(left: float, right: Complex) -> Complex: ...
    @overload
    def op_Division(left: Complex, right: Complex) -> Complex: ...
    def op_Equality(left: Complex, right: Complex) -> bool: ...
    @overload
    def op_Explicit(value: BigInteger) -> Complex: ...
    @overload
    def op_Explicit(value: Decimal) -> Complex: ...
    @overload
    def op_Implicit(value: Int16) -> Complex: ...
    @overload
    def op_Implicit(value: int) -> Complex: ...
    @overload
    def op_Implicit(value: Int64) -> Complex: ...
    @overload
    def op_Implicit(value: UInt16) -> Complex: ...
    @overload
    def op_Implicit(value: UInt64) -> Complex: ...
    @overload
    def op_Implicit(value: SByte) -> Complex: ...
    @overload
    def op_Implicit(value: Byte) -> Complex: ...
    @overload
    def op_Implicit(value: Single) -> Complex: ...
    @overload
    def op_Implicit(value: float) -> Complex: ...
    @overload
    def op_Implicit(value: UInt32) -> Complex: ...
    def op_Inequality(left: Complex, right: Complex) -> bool: ...
    @overload
    def op_Multiply(left: Complex, right: Complex) -> Complex: ...
    @overload
    def op_Multiply(left: Complex, right: float) -> Complex: ...
    @overload
    def op_Multiply(left: float, right: Complex) -> Complex: ...
    @overload
    def op_Subtraction(left: float, right: Complex) -> Complex: ...
    @overload
    def op_Subtraction(left: Complex, right: float) -> Complex: ...
    @overload
    def op_Subtraction(left: Complex, right: Complex) -> Complex: ...
    def op_UnaryNegation(value: Complex) -> Complex: ...
    @overload
    def Pow(value: Complex, power: Complex) -> Complex: ...
    @overload
    def Pow(value: Complex, power: float) -> Complex: ...
    def Reciprocal(value: Complex) -> Complex: ...
    def Sin(value: Complex) -> Complex: ...
    def Sinh(value: Complex) -> Complex: ...
    def Sqrt(value: Complex) -> Complex: ...
    @overload
    def Subtract(left: Complex, right: Complex) -> Complex: ...
    @overload
    def Subtract(left: Complex, right: float) -> Complex: ...
    @overload
    def Subtract(left: float, right: Complex) -> Complex: ...
    def Tan(value: Complex) -> Complex: ...
    def Tanh(value: Complex) -> Complex: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, provider: IFormatProvider) -> str: ...
    @overload
    def ToString(self, format: str) -> str: ...
    @overload
    def ToString(self, format: str, provider: IFormatProvider) -> str: ...
