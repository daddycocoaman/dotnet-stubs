from typing import Tuple, Set, Iterable, List


class CommittableTransaction(Transaction):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, timeout: TimeSpan): ...
    @overload
    def __init__(self, options: TransactionOptions): ...
    def BeginCommit(self, asyncCallback: AsyncCallback, asyncState: Object) -> IAsyncResult: ...
    def Commit(self) -> None: ...
    def EndCommit(self, asyncResult: IAsyncResult) -> None: ...


class DependentCloneOption:
    BlockCommitUntilComplete = 0
    RollbackIfNotComplete = 1


class DependentTransaction(Transaction):
    def Complete(self) -> None: ...


class Enlistment(Object):
    def Done(self) -> None: ...


class EnlistmentOptions:
    #None = 0
    EnlistDuringPrepareRequired = 1


class EnterpriseServicesInteropOption:
    #None = 0
    Automatic = 1
    Full = 2


class HostCurrentTransactionCallback(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Transaction: ...
    def Invoke(self) -> Transaction: ...


class IDtcTransaction:
    def Abort(self, reason: IntPtr, retaining: int, async: int) -> None: ...
    def Commit(self, retaining: int, commitType: int, reserved: int) -> None: ...
    def GetTransactionInfo(self, transactionInformation: IntPtr) -> None: ...


class IEnlistmentNotification:
    def Commit(self, enlistment: Enlistment) -> None: ...
    def InDoubt(self, enlistment: Enlistment) -> None: ...
    def Prepare(self, preparingEnlistment: PreparingEnlistment) -> None: ...
    def Rollback(self, enlistment: Enlistment) -> None: ...


class IPromotableSinglePhaseNotification:
    def Initialize(self) -> None: ...
    def Rollback(self, singlePhaseEnlistment: SinglePhaseEnlistment) -> None: ...
    def SinglePhaseCommit(self, singlePhaseEnlistment: SinglePhaseEnlistment) -> None: ...


class ISimpleTransactionSuperior:
    def Rollback(self) -> None: ...


class ISinglePhaseNotification:
    def SinglePhaseCommit(self, singlePhaseEnlistment: SinglePhaseEnlistment) -> None: ...


class IsolationLevel:
    Serializable = 0
    RepeatableRead = 1
    ReadCommitted = 2
    ReadUncommitted = 3
    Snapshot = 4
    Chaos = 5
    Unspecified = 6


class ITransactionPromoter:
    def Promote(self) -> Set(Byte): ...


class PreparingEnlistment(Enlistment):
    @overload
    def ForceRollback(self) -> None: ...
    @overload
    def ForceRollback(self, e: Exception) -> None: ...
    def Prepared(self) -> None: ...
    def RecoveryInformation(self) -> Set(Byte): ...


class SinglePhaseEnlistment(Enlistment):
    @overload
    def Aborted(self) -> None: ...
    @overload
    def Aborted(self, e: Exception) -> None: ...
    def Committed(self) -> None: ...
    @overload
    def InDoubt(self) -> None: ...
    @overload
    def InDoubt(self, e: Exception) -> None: ...


class SubordinateTransaction(Transaction):
    def __init__(self, isoLevel: IsolationLevel, superior: ISimpleTransactionSuperior): ...


class Transaction(Object):
    def add_TransactionCompleted(self, value: TransactionCompletedEventHandler) -> None: ...
    def Clone(self) -> Transaction: ...
    def DependentClone(self, cloneOption: DependentCloneOption) -> DependentTransaction: ...
    def Dispose(self) -> None: ...
    @overload
    def EnlistDurable(self, resourceManagerIdentifier: Guid, singlePhaseNotification: ISinglePhaseNotification, enlistmentOptions: EnlistmentOptions) -> Enlistment: ...
    @overload
    def EnlistDurable(self, resourceManagerIdentifier: Guid, enlistmentNotification: IEnlistmentNotification, enlistmentOptions: EnlistmentOptions) -> Enlistment: ...
    @overload
    def EnlistPromotableSinglePhase(self, promotableSinglePhaseNotification: IPromotableSinglePhaseNotification) -> bool: ...
    @overload
    def EnlistPromotableSinglePhase(self, promotableSinglePhaseNotification: IPromotableSinglePhaseNotification, promoterType: Guid) -> bool: ...
    @overload
    def EnlistVolatile(self, enlistmentNotification: IEnlistmentNotification, enlistmentOptions: EnlistmentOptions) -> Enlistment: ...
    @overload
    def EnlistVolatile(self, singlePhaseNotification: ISinglePhaseNotification, enlistmentOptions: EnlistmentOptions) -> Enlistment: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Current() -> Transaction: ...
    @property
    def IsolationLevel(self) -> IsolationLevel: ...
    @property
    def PromoterType(self) -> Guid: ...
    @property
    def TransactionInformation(self) -> TransactionInformation: ...
    def GetHashCode(self) -> int: ...
    def GetPromotedToken(self) -> Set(Byte): ...
    def op_Equality(x: Transaction, y: Transaction) -> bool: ...
    def op_Inequality(x: Transaction, y: Transaction) -> bool: ...
    def PromoteAndEnlistDurable(self, resourceManagerIdentifier: Guid, promotableNotification: IPromotableSinglePhaseNotification, enlistmentNotification: ISinglePhaseNotification, enlistmentOptions: EnlistmentOptions) -> Enlistment: ...
    def remove_TransactionCompleted(self, value: TransactionCompletedEventHandler) -> None: ...
    @overload
    def Rollback(self) -> None: ...
    @overload
    def Rollback(self, e: Exception) -> None: ...
    @Current.setter
    def Current(value: Transaction) -> None: ...
    def SetDistributedTransactionIdentifier(self, promotableNotification: IPromotableSinglePhaseNotification, distributedTransactionIdentifier: Guid) -> None: ...


class TransactionAbortedException(TransactionException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class TransactionCompletedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TransactionEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TransactionEventArgs) -> None: ...


class TransactionEventArgs(EventArgs):
    def __init__(self): ...
    @property
    def Transaction(self) -> Transaction: ...


class TransactionException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class TransactionInDoubtException(TransactionException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class TransactionInformation(Object):
    @property
    def CreationTime(self) -> DateTime: ...
    @property
    def DistributedIdentifier(self) -> Guid: ...
    @property
    def LocalIdentifier(self) -> str: ...
    @property
    def Status(self) -> TransactionStatus: ...


class TransactionInterop(Object):
    def GetDtcTransaction(transaction: Transaction) -> IDtcTransaction: ...
    def GetExportCookie(transaction: Transaction, whereabouts: Set(Byte)) -> Set(Byte): ...
    def GetTransactionFromDtcTransaction(transactionNative: IDtcTransaction) -> Transaction: ...
    def GetTransactionFromExportCookie(cookie: Set(Byte)) -> Transaction: ...
    def GetTransactionFromTransmitterPropagationToken(propagationToken: Set(Byte)) -> Transaction: ...
    def GetTransmitterPropagationToken(transaction: Transaction) -> Set(Byte): ...
    def GetWhereabouts() -> Set(Byte): ...


class TransactionManager(Object):
    def add_DistributedTransactionStarted(value: TransactionStartedEventHandler) -> None: ...
    @property
    def DefaultTimeout() -> TimeSpan: ...
    @property
    def HostCurrentCallback() -> HostCurrentTransactionCallback: ...
    @property
    def MaximumTimeout() -> TimeSpan: ...
    def RecoveryComplete(resourceManagerIdentifier: Guid) -> None: ...
    def Reenlist(resourceManagerIdentifier: Guid, recoveryInformation: Set(Byte), enlistmentNotification: IEnlistmentNotification) -> Enlistment: ...
    def remove_DistributedTransactionStarted(value: TransactionStartedEventHandler) -> None: ...
    @HostCurrentCallback.setter
    def HostCurrentCallback(value: HostCurrentTransactionCallback) -> None: ...


class TransactionManagerCommunicationException(TransactionException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class TransactionOptions(ValueType):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsolationLevel(self) -> IsolationLevel: ...
    @property
    def Timeout(self) -> TimeSpan: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(x: TransactionOptions, y: TransactionOptions) -> bool: ...
    def op_Inequality(x: TransactionOptions, y: TransactionOptions) -> bool: ...
    @IsolationLevel.setter
    def IsolationLevel(self, value: IsolationLevel) -> None: ...
    @Timeout.setter
    def Timeout(self, value: TimeSpan) -> None: ...


class TransactionPromotionException(TransactionException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class TransactionScope(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption): ...
    @overload
    def __init__(self, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, transactionToUse: Transaction): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, scopeTimeout: TimeSpan): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, transactionOptions: TransactionOptions): ...
    @overload
    def __init__(self, transactionToUse: Transaction, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, transactionToUse: Transaction, scopeTimeout: TimeSpan): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, scopeTimeout: TimeSpan, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, transactionOptions: TransactionOptions, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, transactionOptions: TransactionOptions, interopOption: EnterpriseServicesInteropOption): ...
    @overload
    def __init__(self, transactionToUse: Transaction, scopeTimeout: TimeSpan, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, transactionToUse: Transaction, scopeTimeout: TimeSpan, interopOption: EnterpriseServicesInteropOption): ...
    def Complete(self) -> None: ...
    def Dispose(self) -> None: ...


class TransactionScopeAsyncFlowOption:
    Suppress = 0
    Enabled = 1


class TransactionScopeOption:
    Required = 0
    RequiresNew = 1
    Suppress = 2


class TransactionStartedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: TransactionEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: TransactionEventArgs) -> None: ...


class TransactionStatus:
    Active = 0
    Committed = 1
    Aborted = 2
    InDoubt = 3
