from typing import Tuple, Set, Iterable, List


class TransactionScope(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption): ...
    @overload
    def __init__(self, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, transactionToUse: Transaction): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, scopeTimeout: TimeSpan): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, transactionOptions: TransactionOptions): ...
    @overload
    def __init__(self, transactionToUse: Transaction, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, transactionToUse: Transaction, scopeTimeout: TimeSpan): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, scopeTimeout: TimeSpan, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, transactionOptions: TransactionOptions, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, scopeOption: TransactionScopeOption, transactionOptions: TransactionOptions, interopOption: EnterpriseServicesInteropOption): ...
    @overload
    def __init__(self, transactionToUse: Transaction, scopeTimeout: TimeSpan, asyncFlowOption: TransactionScopeAsyncFlowOption): ...
    @overload
    def __init__(self, transactionToUse: Transaction, scopeTimeout: TimeSpan, interopOption: EnterpriseServicesInteropOption): ...
    def Complete(self) -> None: ...
    def Dispose(self) -> None: ...
