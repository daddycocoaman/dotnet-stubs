from typing import Tuple, Set, Iterable, List


class ErrorEventArgs(EventArgs):
    def __init__(self, exception: Exception): ...
    def GetException(self) -> Exception: ...


class ErrorEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: ErrorEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: ErrorEventArgs) -> None: ...


class FileSystemEventArgs(EventArgs):
    def __init__(self, changeType: WatcherChangeTypes, directory: str, name: str): ...
    @property
    def ChangeType(self) -> WatcherChangeTypes: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def Name(self) -> str: ...


class FileSystemEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: FileSystemEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: FileSystemEventArgs) -> None: ...


class FileSystemWatcher(Component):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str): ...
    @overload
    def __init__(self, path: str, filter: str): ...
    def add_Changed(self, value: FileSystemEventHandler) -> None: ...
    def add_Created(self, value: FileSystemEventHandler) -> None: ...
    def add_Deleted(self, value: FileSystemEventHandler) -> None: ...
    def add_Error(self, value: ErrorEventHandler) -> None: ...
    def add_Renamed(self, value: RenamedEventHandler) -> None: ...
    def BeginInit(self) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def EnableRaisingEvents(self) -> bool: ...
    @property
    def Filter(self) -> str: ...
    @property
    def Filters(self) -> Collection: ...
    @property
    def IncludeSubdirectories(self) -> bool: ...
    @property
    def InternalBufferSize(self) -> int: ...
    @property
    def NotifyFilter(self) -> NotifyFilters: ...
    @property
    def Path(self) -> str: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def SynchronizingObject(self) -> ISynchronizeInvoke: ...
    def remove_Changed(self, value: FileSystemEventHandler) -> None: ...
    def remove_Created(self, value: FileSystemEventHandler) -> None: ...
    def remove_Deleted(self, value: FileSystemEventHandler) -> None: ...
    def remove_Error(self, value: ErrorEventHandler) -> None: ...
    def remove_Renamed(self, value: RenamedEventHandler) -> None: ...
    @EnableRaisingEvents.setter
    def EnableRaisingEvents(self, value: bool) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @IncludeSubdirectories.setter
    def IncludeSubdirectories(self, value: bool) -> None: ...
    @InternalBufferSize.setter
    def InternalBufferSize(self, value: int) -> None: ...
    @NotifyFilter.setter
    def NotifyFilter(self, value: NotifyFilters) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @SynchronizingObject.setter
    def SynchronizingObject(self, value: ISynchronizeInvoke) -> None: ...
    @overload
    def WaitForChanged(self, changeType: WatcherChangeTypes) -> WaitForChangedResult: ...
    @overload
    def WaitForChanged(self, changeType: WatcherChangeTypes, timeout: int) -> WaitForChangedResult: ...


class InternalBufferOverflowException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class NotifyFilters:
    FileName = 1
    DirectoryName = 2
    Attributes = 4
    Size = 8
    LastWrite = 16
    LastAccess = 32
    CreationTime = 64
    Security = 256


class RenamedEventArgs(FileSystemEventArgs):
    def __init__(self, changeType: WatcherChangeTypes, directory: str, name: str, oldName: str): ...
    @property
    def OldFullPath(self) -> str: ...
    @property
    def OldName(self) -> str: ...


class RenamedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: RenamedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: RenamedEventArgs) -> None: ...


class WaitForChangedResult(ValueType):
    @property
    def ChangeType(self) -> WatcherChangeTypes: ...
    @property
    def Name(self) -> str: ...
    @property
    def OldName(self) -> str: ...
    @property
    def TimedOut(self) -> bool: ...
    @ChangeType.setter
    def ChangeType(self, value: WatcherChangeTypes) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @OldName.setter
    def OldName(self, value: str) -> None: ...
    @TimedOut.setter
    def TimedOut(self, value: bool) -> None: ...


class WatcherChangeTypes:
    Created = 1
    Deleted = 2
    Changed = 4
    Renamed = 8
    All = 15
