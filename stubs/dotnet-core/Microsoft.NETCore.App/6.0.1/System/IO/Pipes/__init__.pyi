from typing import Tuple, Set, Iterable, List


class AnonymousPipeClientStream(PipeStream):
    @overload
    def __init__(self, pipeHandleAsString: str): ...
    @overload
    def __init__(self, direction: PipeDirection, pipeHandleAsString: str): ...
    @overload
    def __init__(self, direction: PipeDirection, safePipeHandle: SafePipeHandle): ...
    @property
    def TransmissionMode(self) -> PipeTransmissionMode: ...
    @ReadMode.setter
    def ReadMode(self, value: PipeTransmissionMode) -> None: ...


class AnonymousPipeServerStream(PipeStream):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, direction: PipeDirection): ...
    @overload
    def __init__(self, direction: PipeDirection, inheritability: HandleInheritability): ...
    @overload
    def __init__(self, direction: PipeDirection, serverSafePipeHandle: SafePipeHandle, clientSafePipeHandle: SafePipeHandle): ...
    @overload
    def __init__(self, direction: PipeDirection, inheritability: HandleInheritability, bufferSize: int): ...
    def DisposeLocalCopyOfClientHandle(self) -> None: ...
    @property
    def ClientSafePipeHandle(self) -> SafePipeHandle: ...
    @property
    def TransmissionMode(self) -> PipeTransmissionMode: ...
    def GetClientHandleAsString(self) -> str: ...
    @ReadMode.setter
    def ReadMode(self, value: PipeTransmissionMode) -> None: ...


class AnonymousPipeServerStreamAcl(Object):
    def Create(direction: PipeDirection, inheritability: HandleInheritability, bufferSize: int, pipeSecurity: PipeSecurity) -> AnonymousPipeServerStream: ...


class NamedPipeClientStream(PipeStream):
    @overload
    def __init__(self, pipeName: str): ...
    @overload
    def __init__(self, serverName: str, pipeName: str): ...
    @overload
    def __init__(self, serverName: str, pipeName: str, direction: PipeDirection): ...
    @overload
    def __init__(self, serverName: str, pipeName: str, direction: PipeDirection, options: PipeOptions): ...
    @overload
    def __init__(self, direction: PipeDirection, isAsync: bool, isConnected: bool, safePipeHandle: SafePipeHandle): ...
    @overload
    def __init__(self, serverName: str, pipeName: str, direction: PipeDirection, options: PipeOptions, impersonationLevel: TokenImpersonationLevel): ...
    @overload
    def __init__(self, serverName: str, pipeName: str, direction: PipeDirection, options: PipeOptions, impersonationLevel: TokenImpersonationLevel, inheritability: HandleInheritability): ...
    @overload
    def Connect(self) -> None: ...
    @overload
    def Connect(self, timeout: int) -> None: ...
    @overload
    def ConnectAsync(self) -> Task: ...
    @overload
    def ConnectAsync(self, timeout: int) -> Task: ...
    @overload
    def ConnectAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def ConnectAsync(self, timeout: int, cancellationToken: CancellationToken) -> Task: ...
    @property
    def NumberOfServerInstances(self) -> int: ...


class NamedPipeServerStream(PipeStream):
    @overload
    def __init__(self, pipeName: str): ...
    @overload
    def __init__(self, pipeName: str, direction: PipeDirection): ...
    @overload
    def __init__(self, pipeName: str, direction: PipeDirection, maxNumberOfServerInstances: int): ...
    @overload
    def __init__(self, pipeName: str, direction: PipeDirection, maxNumberOfServerInstances: int, transmissionMode: PipeTransmissionMode): ...
    @overload
    def __init__(self, direction: PipeDirection, isAsync: bool, isConnected: bool, safePipeHandle: SafePipeHandle): ...
    @overload
    def __init__(self, pipeName: str, direction: PipeDirection, maxNumberOfServerInstances: int, transmissionMode: PipeTransmissionMode, options: PipeOptions): ...
    @overload
    def __init__(self, pipeName: str, direction: PipeDirection, maxNumberOfServerInstances: int, transmissionMode: PipeTransmissionMode, options: PipeOptions, inBufferSize: int, outBufferSize: int): ...
    def BeginWaitForConnection(self, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def Disconnect(self) -> None: ...
    def EndWaitForConnection(self, asyncResult: IAsyncResult) -> None: ...
    def GetImpersonationUserName(self) -> str: ...
    def RunAsClient(self, impersonationWorker: PipeStreamImpersonationWorker) -> None: ...
    def WaitForConnection(self) -> None: ...
    @overload
    def WaitForConnectionAsync(self) -> Task: ...
    @overload
    def WaitForConnectionAsync(self, cancellationToken: CancellationToken) -> Task: ...


class NamedPipeServerStreamAcl(Object):
    def Create(pipeName: str, direction: PipeDirection, maxNumberOfServerInstances: int, transmissionMode: PipeTransmissionMode, options: PipeOptions, inBufferSize: int, outBufferSize: int, pipeSecurity: PipeSecurity, inheritability: HandleInheritability, additionalAccessRights: PipeAccessRights) -> NamedPipeServerStream: ...


class PipeAccessRights:
    ReadData = 1
    WriteData = 2
    CreateNewInstance = 4
    ReadExtendedAttributes = 8
    WriteExtendedAttributes = 16
    ReadAttributes = 128
    WriteAttributes = 256
    Write = 274
    Delete = 65536
    ReadPermissions = 131072
    Read = 131209
    ReadWrite = 131483
    ChangePermissions = 262144
    TakeOwnership = 524288
    Synchronize = 1048576
    FullControl = 2032031
    AccessSystemSecurity = 16777216


class PipeAccessRule(AccessRule):
    @overload
    def __init__(self, identity: str, rights: PipeAccessRights, type: AccessControlType): ...
    @overload
    def __init__(self, identity: IdentityReference, rights: PipeAccessRights, type: AccessControlType): ...
    @property
    def PipeAccessRights(self) -> PipeAccessRights: ...


class PipeAuditRule(AuditRule):
    @overload
    def __init__(self, identity: IdentityReference, rights: PipeAccessRights, flags: AuditFlags): ...
    @overload
    def __init__(self, identity: str, rights: PipeAccessRights, flags: AuditFlags): ...
    @property
    def PipeAccessRights(self) -> PipeAccessRights: ...


class PipeDirection:
    In = 1
    Out = 2
    InOut = 3


class PipeOptions:
    #None = 0
    CurrentUserOnly = 536870912
    Asynchronous = 1073741824
    WriteThrough = -2147483648


class PipesAclExtensions(Object):
    def GetAccessControl(stream: PipeStream) -> PipeSecurity: ...
    def SetAccessControl(stream: PipeStream, pipeSecurity: PipeSecurity) -> None: ...


class PipeSecurity(NativeObjectSecurity):
    def __init__(self): ...
    def AccessRuleFactory(self, identityReference: IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type: AccessControlType) -> AccessRule: ...
    def AddAccessRule(self, rule: PipeAccessRule) -> None: ...
    def AddAuditRule(self, rule: PipeAuditRule) -> None: ...
    def AuditRuleFactory(self, identityReference: IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags) -> AuditRule: ...
    @property
    def AccessRightType(self) -> Type: ...
    @property
    def AccessRuleType(self) -> Type: ...
    @property
    def AuditRuleType(self) -> Type: ...
    def RemoveAccessRule(self, rule: PipeAccessRule) -> bool: ...
    def RemoveAccessRuleSpecific(self, rule: PipeAccessRule) -> None: ...
    def RemoveAuditRule(self, rule: PipeAuditRule) -> bool: ...
    def RemoveAuditRuleAll(self, rule: PipeAuditRule) -> None: ...
    def RemoveAuditRuleSpecific(self, rule: PipeAuditRule) -> None: ...
    def ResetAccessRule(self, rule: PipeAccessRule) -> None: ...
    def SetAccessRule(self, rule: PipeAccessRule) -> None: ...
    def SetAuditRule(self, rule: PipeAuditRule) -> None: ...


class PipeStream(Stream):
    def BeginRead(self, buffer: Set(Byte), offset: int, count: int, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginWrite(self, buffer: Set(Byte), offset: int, count: int, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def EndRead(self, asyncResult: IAsyncResult) -> int: ...
    def EndWrite(self, asyncResult: IAsyncResult) -> None: ...
    def Flush(self) -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def InBufferSize(self) -> int: ...
    @property
    def IsAsync(self) -> bool: ...
    @property
    def IsConnected(self) -> bool: ...
    @property
    def IsMessageComplete(self) -> bool: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def OutBufferSize(self) -> int: ...
    @property
    def Position(self) -> Int64: ...
    @property
    def ReadMode(self) -> PipeTransmissionMode: ...
    @property
    def SafePipeHandle(self) -> SafePipeHandle: ...
    @property
    def TransmissionMode(self) -> PipeTransmissionMode: ...
    @overload
    def Read(self, buffer: Span) -> int: ...
    @overload
    def Read(self, buffer: Set(Byte), offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: Memory, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def ReadAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...
    def ReadByte(self) -> int: ...
    def Seek(self, offset: Int64, origin: SeekOrigin) -> Int64: ...
    @Position.setter
    def Position(self, value: Int64) -> None: ...
    @ReadMode.setter
    def ReadMode(self, value: PipeTransmissionMode) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    def WaitForPipeDrain(self) -> None: ...
    @overload
    def Write(self, buffer: ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: Set(Byte), offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: ReadOnlyMemory, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def WriteAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...
    def WriteByte(self, value: Byte) -> None: ...


class PipeStreamImpersonationWorker(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class PipeTransmissionMode:
    Byte = 0
    Message = 1
