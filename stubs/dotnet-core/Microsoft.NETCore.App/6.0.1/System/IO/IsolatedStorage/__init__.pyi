from typing import Tuple, Set, Iterable, List


class INormalizeForIsolatedStorage:
    def Normalize(self) -> Object: ...


class IsolatedStorage(MarshalByRefObject):
    @property
    def ApplicationIdentity(self) -> Object: ...
    @property
    def AssemblyIdentity(self) -> Object: ...
    @property
    def AvailableFreeSpace(self) -> Int64: ...
    @property
    def CurrentSize(self) -> UInt64: ...
    @property
    def DomainIdentity(self) -> Object: ...
    @property
    def MaximumSize(self) -> UInt64: ...
    @property
    def Quota(self) -> Int64: ...
    @property
    def Scope(self) -> IsolatedStorageScope: ...
    @property
    def UsedSize(self) -> Int64: ...
    def IncreaseQuotaTo(self, newQuotaSize: Int64) -> bool: ...
    def Remove(self) -> None: ...


class IsolatedStorageException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...


class IsolatedStorageFile(IsolatedStorage):
    def Close(self) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    def CopyFile(self, sourceFileName: str, destinationFileName: str, overwrite: bool) -> None: ...
    def CreateDirectory(self, dir: str) -> None: ...
    def CreateFile(self, path: str) -> IsolatedStorageFileStream: ...
    def DeleteDirectory(self, dir: str) -> None: ...
    def DeleteFile(self, file: str) -> None: ...
    def DirectoryExists(self, path: str) -> bool: ...
    def Dispose(self) -> None: ...
    def FileExists(self, path: str) -> bool: ...
    @property
    def AvailableFreeSpace(self) -> Int64: ...
    @property
    def CurrentSize(self) -> UInt64: ...
    @property
    def IsEnabled() -> bool: ...
    @property
    def MaximumSize(self) -> UInt64: ...
    @property
    def Quota(self) -> Int64: ...
    @property
    def UsedSize(self) -> Int64: ...
    def GetCreationTime(self, path: str) -> DateTimeOffset: ...
    @overload
    def GetDirectoryNames(self) -> Set(str): ...
    @overload
    def GetDirectoryNames(self, searchPattern: str) -> Set(str): ...
    def GetEnumerator(scope: IsolatedStorageScope) -> IEnumerator: ...
    @overload
    def GetFileNames(self) -> Set(str): ...
    @overload
    def GetFileNames(self, searchPattern: str) -> Set(str): ...
    def GetLastAccessTime(self, path: str) -> DateTimeOffset: ...
    def GetLastWriteTime(self, path: str) -> DateTimeOffset: ...
    def GetMachineStoreForApplication() -> IsolatedStorageFile: ...
    def GetMachineStoreForAssembly() -> IsolatedStorageFile: ...
    def GetMachineStoreForDomain() -> IsolatedStorageFile: ...
    @overload
    def GetStore(scope: IsolatedStorageScope, applicationEvidenceType: Type) -> IsolatedStorageFile: ...
    @overload
    def GetStore(scope: IsolatedStorageScope, applicationIdentity: Object) -> IsolatedStorageFile: ...
    @overload
    def GetStore(scope: IsolatedStorageScope, domainEvidenceType: Type, assemblyEvidenceType: Type) -> IsolatedStorageFile: ...
    @overload
    def GetStore(scope: IsolatedStorageScope, domainIdentity: Object, assemblyIdentity: Object) -> IsolatedStorageFile: ...
    def GetUserStoreForApplication() -> IsolatedStorageFile: ...
    def GetUserStoreForAssembly() -> IsolatedStorageFile: ...
    def GetUserStoreForDomain() -> IsolatedStorageFile: ...
    def GetUserStoreForSite() -> IsolatedStorageFile: ...
    def IncreaseQuotaTo(self, newQuotaSize: Int64) -> bool: ...
    def MoveDirectory(self, sourceDirectoryName: str, destinationDirectoryName: str) -> None: ...
    def MoveFile(self, sourceFileName: str, destinationFileName: str) -> None: ...
    @overload
    def OpenFile(self, path: str, mode: FileMode) -> IsolatedStorageFileStream: ...
    @overload
    def OpenFile(self, path: str, mode: FileMode, access: FileAccess) -> IsolatedStorageFileStream: ...
    @overload
    def OpenFile(self, path: str, mode: FileMode, access: FileAccess, share: FileShare) -> IsolatedStorageFileStream: ...
    @overload
    def Remove(self) -> None: ...
    @overload
    def Remove(scope: IsolatedStorageScope) -> None: ...


class IsolatedStorageFileStream(FileStream):
    @overload
    def __init__(self, path: str, mode: FileMode): ...
    @overload
    def __init__(self, path: str, mode: FileMode, isf: IsolatedStorageFile): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, isf: IsolatedStorageFile): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, isf: IsolatedStorageFile): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, bufferSize: int): ...
    @overload
    def __init__(self, path: str, mode: FileMode, access: FileAccess, share: FileShare, bufferSize: int, isf: IsolatedStorageFile): ...
    def BeginRead(self, array: Set(Byte), offset: int, numBytes: int, userCallback: AsyncCallback, stateObject: Object) -> IAsyncResult: ...
    def BeginWrite(self, array: Set(Byte), offset: int, numBytes: int, userCallback: AsyncCallback, stateObject: Object) -> IAsyncResult: ...
    def DisposeAsync(self) -> ValueTask: ...
    def EndRead(self, asyncResult: IAsyncResult) -> int: ...
    def EndWrite(self, asyncResult: IAsyncResult) -> None: ...
    @overload
    def Flush(self) -> None: ...
    @overload
    def Flush(self, flushToDisk: bool) -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def IsAsync(self) -> bool: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Position(self) -> Int64: ...
    @property
    def SafeFileHandle(self) -> SafeFileHandle: ...
    def Lock(self, position: Int64, length: Int64) -> None: ...
    @overload
    def Read(self, buffer: Span) -> int: ...
    @overload
    def Read(self, buffer: Set(Byte), offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: Memory, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def ReadAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...
    def ReadByte(self) -> int: ...
    def Seek(self, offset: Int64, origin: SeekOrigin) -> Int64: ...
    @Position.setter
    def Position(self, value: Int64) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    def Unlock(self, position: Int64, length: Int64) -> None: ...
    @overload
    def Write(self, buffer: ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: Set(Byte), offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffer: ReadOnlyMemory, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def WriteAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...
    def WriteByte(self, value: Byte) -> None: ...


class IsolatedStorageScope:
    #None = 0
    User = 1
    Domain = 2
    Assembly = 4
    Roaming = 8
    Machine = 16
    Application = 32
