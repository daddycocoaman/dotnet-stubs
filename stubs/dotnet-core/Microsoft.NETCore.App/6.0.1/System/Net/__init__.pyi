from typing import Tuple, Set, Iterable, List


class IWebProxyScript:
    def Close(self) -> None: ...
    def Load(self, scriptLocation: Uri, script: str, helperType: Type) -> bool: ...
    def Run(self, url: str, host: str) -> str: ...


class WebProxy(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, Address: Uri): ...
    @overload
    def __init__(self, Address: str): ...
    @overload
    def __init__(self, Address: Uri, BypassOnLocal: bool): ...
    @overload
    def __init__(self, Host: str, Port: int): ...
    @overload
    def __init__(self, Address: str, BypassOnLocal: bool): ...
    @overload
    def __init__(self, Address: Uri, BypassOnLocal: bool, BypassList: Set(str)): ...
    @overload
    def __init__(self, Address: str, BypassOnLocal: bool, BypassList: Set(str)): ...
    @overload
    def __init__(self, Address: Uri, BypassOnLocal: bool, BypassList: Set(str), Credentials: ICredentials): ...
    @overload
    def __init__(self, Address: str, BypassOnLocal: bool, BypassList: Set(str), Credentials: ICredentials): ...
    @property
    def Address(self) -> Uri: ...
    @property
    def BypassArrayList(self) -> ArrayList: ...
    @property
    def BypassList(self) -> Set(str): ...
    @property
    def BypassProxyOnLocal(self) -> bool: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    def GetProxy(self, destination: Uri) -> Uri: ...
    def IsBypassed(self, host: Uri) -> bool: ...
    @Address.setter
    def Address(self, value: Uri) -> None: ...
    @BypassList.setter
    def BypassList(self, value: Set(str)) -> None: ...
    @BypassProxyOnLocal.setter
    def BypassProxyOnLocal(self, value: bool) -> None: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: bool) -> None: ...
