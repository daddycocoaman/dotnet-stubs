from typing import Tuple, Set, Iterable, List


class SmtpClient(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, host: str): ...
    @overload
    def __init__(self, host: str, port: int): ...
    def add_SendCompleted(self, value: SendCompletedEventHandler) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def ClientCertificates(self) -> X509CertificateCollection: ...
    @property
    def Credentials(self) -> ICredentialsByHost: ...
    @property
    def DeliveryFormat(self) -> SmtpDeliveryFormat: ...
    @property
    def DeliveryMethod(self) -> SmtpDeliveryMethod: ...
    @property
    def EnableSsl(self) -> bool: ...
    @property
    def Host(self) -> str: ...
    @property
    def PickupDirectoryLocation(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @property
    def ServicePoint(self) -> ServicePoint: ...
    @property
    def TargetName(self) -> str: ...
    @property
    def Timeout(self) -> int: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    def remove_SendCompleted(self, value: SendCompletedEventHandler) -> None: ...
    @overload
    def Send(self, message: MailMessage) -> None: ...
    @overload
    def Send(self, from_: str, recipients: str, subject: str, body: str) -> None: ...
    @overload
    def SendAsync(self, message: MailMessage, userToken: Object) -> None: ...
    @overload
    def SendAsync(self, from_: str, recipients: str, subject: str, body: str, userToken: Object) -> None: ...
    def SendAsyncCancel(self) -> None: ...
    @overload
    def SendMailAsync(self, message: MailMessage) -> Task: ...
    @overload
    def SendMailAsync(self, message: MailMessage, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def SendMailAsync(self, from_: str, recipients: str, subject: str, body: str) -> Task: ...
    @overload
    def SendMailAsync(self, from_: str, recipients: str, subject: str, body: str, cancellationToken: CancellationToken) -> Task: ...
    @Credentials.setter
    def Credentials(self, value: ICredentialsByHost) -> None: ...
    @DeliveryFormat.setter
    def DeliveryFormat(self, value: SmtpDeliveryFormat) -> None: ...
    @DeliveryMethod.setter
    def DeliveryMethod(self, value: SmtpDeliveryMethod) -> None: ...
    @EnableSsl.setter
    def EnableSsl(self, value: bool) -> None: ...
    @Host.setter
    def Host(self, value: str) -> None: ...
    @PickupDirectoryLocation.setter
    def PickupDirectoryLocation(self, value: str) -> None: ...
    @Port.setter
    def Port(self, value: int) -> None: ...
    @TargetName.setter
    def TargetName(self, value: str) -> None: ...
    @Timeout.setter
    def Timeout(self, value: int) -> None: ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: bool) -> None: ...
