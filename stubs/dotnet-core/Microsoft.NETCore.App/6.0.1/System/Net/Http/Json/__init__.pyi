from typing import Tuple, Set, Iterable, List


class HttpClientJsonExtensions(Object):
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: str, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: Uri, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: str, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: Uri, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: str, jsonTypeInfo: JsonTypeInfo, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: Uri, jsonTypeInfo: JsonTypeInfo, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: str, type: Type, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: Uri, type: Type, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: str, type: Type, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: Uri, type: Type, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: str, type: Type, context: JsonSerializerContext, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetFromJsonAsync(client: HttpClient, requestUri: Uri, type: Type, context: JsonSerializerContext, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PostAsJsonAsync(client: HttpClient, requestUri: str, value: TValue, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PostAsJsonAsync(client: HttpClient, requestUri: Uri, value: TValue, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PostAsJsonAsync(client: HttpClient, requestUri: str, value: TValue, jsonTypeInfo: JsonTypeInfo, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PostAsJsonAsync(client: HttpClient, requestUri: Uri, value: TValue, jsonTypeInfo: JsonTypeInfo, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PostAsJsonAsync(client: HttpClient, requestUri: str, value: TValue, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PostAsJsonAsync(client: HttpClient, requestUri: Uri, value: TValue, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PutAsJsonAsync(client: HttpClient, requestUri: str, value: TValue, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PutAsJsonAsync(client: HttpClient, requestUri: Uri, value: TValue, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PutAsJsonAsync(client: HttpClient, requestUri: str, value: TValue, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PutAsJsonAsync(client: HttpClient, requestUri: Uri, value: TValue, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PutAsJsonAsync(client: HttpClient, requestUri: str, value: TValue, jsonTypeInfo: JsonTypeInfo, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PutAsJsonAsync(client: HttpClient, requestUri: Uri, value: TValue, jsonTypeInfo: JsonTypeInfo, cancellationToken: CancellationToken) -> Task: ...


class HttpContentJsonExtensions(Object):
    @overload
    def ReadFromJsonAsync(content: HttpContent, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def ReadFromJsonAsync(content: HttpContent, jsonTypeInfo: JsonTypeInfo, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def ReadFromJsonAsync(content: HttpContent, type: Type, options: JsonSerializerOptions, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def ReadFromJsonAsync(content: HttpContent, type: Type, context: JsonSerializerContext, cancellationToken: CancellationToken) -> Task: ...


class JsonContent(HttpContent):
    @overload
    def Create(inputValue: T, mediaType: MediaTypeHeaderValue, options: JsonSerializerOptions) -> JsonContent: ...
    @overload
    def Create(inputValue: Object, inputType: Type, mediaType: MediaTypeHeaderValue, options: JsonSerializerOptions) -> JsonContent: ...
    @property
    def ObjectType(self) -> Type: ...
    @property
    def Value(self) -> Object: ...
