__all__ = ['Headers']
from typing import Tuple, Set, Iterable, List


class ByteArrayContent(HttpContent):
    @overload
    def __init__(self, content: Set(Byte)): ...
    @overload
    def __init__(self, content: Set(Byte), offset: int, count: int): ...


class ClientCertificateOption:
    Manual = 0
    Automatic = 1


class DelegatingHandler(HttpMessageHandler):
    @property
    def InnerHandler(self) -> HttpMessageHandler: ...
    @InnerHandler.setter
    def InnerHandler(self, value: HttpMessageHandler) -> None: ...


class FormUrlEncodedContent(ByteArrayContent):
    def __init__(self, nameValueCollection: Iterable[KeyValuePair]): ...




class HttpClient(HttpMessageInvoker):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: HttpMessageHandler): ...
    @overload
    def __init__(self, handler: HttpMessageHandler, disposeHandler: bool): ...
    def CancelPendingRequests(self) -> None: ...
    @overload
    def DeleteAsync(self, requestUri: Uri) -> Task: ...
    @overload
    def DeleteAsync(self, requestUri: str) -> Task: ...
    @overload
    def DeleteAsync(self, requestUri: str, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def DeleteAsync(self, requestUri: Uri, cancellationToken: CancellationToken) -> Task: ...
    @property
    def BaseAddress(self) -> Uri: ...
    @property
    def DefaultProxy() -> IWebProxy: ...
    @property
    def DefaultRequestHeaders(self) -> HttpRequestHeaders: ...
    @property
    def DefaultRequestVersion(self) -> Version: ...
    @property
    def DefaultVersionPolicy(self) -> HttpVersionPolicy: ...
    @property
    def MaxResponseContentBufferSize(self) -> Int64: ...
    @property
    def Timeout(self) -> TimeSpan: ...
    @overload
    def GetAsync(self, requestUri: Uri) -> Task: ...
    @overload
    def GetAsync(self, requestUri: str) -> Task: ...
    @overload
    def GetAsync(self, requestUri: Uri, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetAsync(self, requestUri: str, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetAsync(self, requestUri: Uri, completionOption: HttpCompletionOption) -> Task: ...
    @overload
    def GetAsync(self, requestUri: str, completionOption: HttpCompletionOption) -> Task: ...
    @overload
    def GetAsync(self, requestUri: Uri, completionOption: HttpCompletionOption, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetAsync(self, requestUri: str, completionOption: HttpCompletionOption, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetByteArrayAsync(self, requestUri: Uri) -> Task: ...
    @overload
    def GetByteArrayAsync(self, requestUri: str) -> Task: ...
    @overload
    def GetByteArrayAsync(self, requestUri: Uri, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetByteArrayAsync(self, requestUri: str, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetStreamAsync(self, requestUri: Uri) -> Task: ...
    @overload
    def GetStreamAsync(self, requestUri: str) -> Task: ...
    @overload
    def GetStreamAsync(self, requestUri: str, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetStreamAsync(self, requestUri: Uri, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetStringAsync(self, requestUri: Uri) -> Task: ...
    @overload
    def GetStringAsync(self, requestUri: str) -> Task: ...
    @overload
    def GetStringAsync(self, requestUri: str, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def GetStringAsync(self, requestUri: Uri, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PatchAsync(self, requestUri: str, content: HttpContent) -> Task: ...
    @overload
    def PatchAsync(self, requestUri: Uri, content: HttpContent) -> Task: ...
    @overload
    def PatchAsync(self, requestUri: str, content: HttpContent, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PatchAsync(self, requestUri: Uri, content: HttpContent, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PostAsync(self, requestUri: str, content: HttpContent) -> Task: ...
    @overload
    def PostAsync(self, requestUri: Uri, content: HttpContent) -> Task: ...
    @overload
    def PostAsync(self, requestUri: Uri, content: HttpContent, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PostAsync(self, requestUri: str, content: HttpContent, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PutAsync(self, requestUri: Uri, content: HttpContent) -> Task: ...
    @overload
    def PutAsync(self, requestUri: str, content: HttpContent) -> Task: ...
    @overload
    def PutAsync(self, requestUri: str, content: HttpContent, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def PutAsync(self, requestUri: Uri, content: HttpContent, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def Send(self, request: HttpRequestMessage) -> HttpResponseMessage: ...
    @overload
    def Send(self, request: HttpRequestMessage, cancellationToken: CancellationToken) -> HttpResponseMessage: ...
    @overload
    def Send(self, request: HttpRequestMessage, completionOption: HttpCompletionOption) -> HttpResponseMessage: ...
    @overload
    def Send(self, request: HttpRequestMessage, completionOption: HttpCompletionOption, cancellationToken: CancellationToken) -> HttpResponseMessage: ...
    @overload
    def SendAsync(self, request: HttpRequestMessage) -> Task: ...
    @overload
    def SendAsync(self, request: HttpRequestMessage, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def SendAsync(self, request: HttpRequestMessage, completionOption: HttpCompletionOption) -> Task: ...
    @overload
    def SendAsync(self, request: HttpRequestMessage, completionOption: HttpCompletionOption, cancellationToken: CancellationToken) -> Task: ...
    @BaseAddress.setter
    def BaseAddress(self, value: Uri) -> None: ...
    @DefaultProxy.setter
    def DefaultProxy(value: IWebProxy) -> None: ...
    @DefaultRequestVersion.setter
    def DefaultRequestVersion(self, value: Version) -> None: ...
    @DefaultVersionPolicy.setter
    def DefaultVersionPolicy(self, value: HttpVersionPolicy) -> None: ...
    @MaxResponseContentBufferSize.setter
    def MaxResponseContentBufferSize(self, value: Int64) -> None: ...
    @Timeout.setter
    def Timeout(self, value: TimeSpan) -> None: ...


class HttpClientHandler(HttpMessageHandler):
    def __init__(self): ...
    @property
    def AllowAutoRedirect(self) -> bool: ...
    @property
    def AutomaticDecompression(self) -> DecompressionMethods: ...
    @property
    def CheckCertificateRevocationList(self) -> bool: ...
    @property
    def ClientCertificateOptions(self) -> ClientCertificateOption: ...
    @property
    def ClientCertificates(self) -> X509CertificateCollection: ...
    @property
    def CookieContainer(self) -> CookieContainer: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def DangerousAcceptAnyServerCertificateValidator() -> Func`5: ...
    @property
    def DefaultProxyCredentials(self) -> ICredentials: ...
    @property
    def MaxAutomaticRedirections(self) -> int: ...
    @property
    def MaxConnectionsPerServer(self) -> int: ...
    @property
    def MaxRequestContentBufferSize(self) -> Int64: ...
    @property
    def MaxResponseHeadersLength(self) -> int: ...
    @property
    def PreAuthenticate(self) -> bool: ...
    @property
    def Properties(self) -> IDictionary: ...
    @property
    def Proxy(self) -> IWebProxy: ...
    @property
    def ServerCertificateCustomValidationCallback(self) -> Func`5: ...
    @property
    def SslProtocols(self) -> SslProtocols: ...
    @property
    def SupportsAutomaticDecompression(self) -> bool: ...
    @property
    def SupportsProxy(self) -> bool: ...
    @property
    def SupportsRedirectConfiguration(self) -> bool: ...
    @property
    def UseCookies(self) -> bool: ...
    @property
    def UseDefaultCredentials(self) -> bool: ...
    @property
    def UseProxy(self) -> bool: ...
    @AllowAutoRedirect.setter
    def AllowAutoRedirect(self, value: bool) -> None: ...
    @AutomaticDecompression.setter
    def AutomaticDecompression(self, value: DecompressionMethods) -> None: ...
    @CheckCertificateRevocationList.setter
    def CheckCertificateRevocationList(self, value: bool) -> None: ...
    @ClientCertificateOptions.setter
    def ClientCertificateOptions(self, value: ClientCertificateOption) -> None: ...
    @CookieContainer.setter
    def CookieContainer(self, value: CookieContainer) -> None: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...
    @DefaultProxyCredentials.setter
    def DefaultProxyCredentials(self, value: ICredentials) -> None: ...
    @MaxAutomaticRedirections.setter
    def MaxAutomaticRedirections(self, value: int) -> None: ...
    @MaxConnectionsPerServer.setter
    def MaxConnectionsPerServer(self, value: int) -> None: ...
    @MaxRequestContentBufferSize.setter
    def MaxRequestContentBufferSize(self, value: Int64) -> None: ...
    @MaxResponseHeadersLength.setter
    def MaxResponseHeadersLength(self, value: int) -> None: ...
    @PreAuthenticate.setter
    def PreAuthenticate(self, value: bool) -> None: ...
    @Proxy.setter
    def Proxy(self, value: IWebProxy) -> None: ...
    @ServerCertificateCustomValidationCallback.setter
    def ServerCertificateCustomValidationCallback(self, value: Func`5) -> None: ...
    @SslProtocols.setter
    def SslProtocols(self, value: SslProtocols) -> None: ...
    @UseCookies.setter
    def UseCookies(self, value: bool) -> None: ...
    @UseDefaultCredentials.setter
    def UseDefaultCredentials(self, value: bool) -> None: ...
    @UseProxy.setter
    def UseProxy(self, value: bool) -> None: ...


class HttpCompletionOption:
    ResponseContentRead = 0
    ResponseHeadersRead = 1


class HttpContent(Object):
    def CopyTo(self, stream: Stream, context: TransportContext, cancellationToken: CancellationToken) -> None: ...
    @overload
    def CopyToAsync(self, stream: Stream) -> Task: ...
    @overload
    def CopyToAsync(self, stream: Stream, context: TransportContext) -> Task: ...
    @overload
    def CopyToAsync(self, stream: Stream, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def CopyToAsync(self, stream: Stream, context: TransportContext, cancellationToken: CancellationToken) -> Task: ...
    def Dispose(self) -> None: ...
    @property
    def Headers(self) -> HttpContentHeaders: ...
    @overload
    def LoadIntoBufferAsync(self) -> Task: ...
    @overload
    def LoadIntoBufferAsync(self, maxBufferSize: Int64) -> Task: ...
    @overload
    def ReadAsByteArrayAsync(self) -> Task: ...
    @overload
    def ReadAsByteArrayAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def ReadAsStream(self) -> Stream: ...
    @overload
    def ReadAsStream(self, cancellationToken: CancellationToken) -> Stream: ...
    @overload
    def ReadAsStreamAsync(self) -> Task: ...
    @overload
    def ReadAsStreamAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @overload
    def ReadAsStringAsync(self) -> Task: ...
    @overload
    def ReadAsStringAsync(self, cancellationToken: CancellationToken) -> Task: ...


class HttpKeepAlivePingPolicy:
    WithActiveRequests = 0
    Always = 1


class HttpMessageHandler(Object):
    def Dispose(self) -> None: ...


class HttpMessageInvoker(Object):
    @overload
    def __init__(self, handler: HttpMessageHandler): ...
    @overload
    def __init__(self, handler: HttpMessageHandler, disposeHandler: bool): ...
    def Dispose(self) -> None: ...
    def Send(self, request: HttpRequestMessage, cancellationToken: CancellationToken) -> HttpResponseMessage: ...
    def SendAsync(self, request: HttpRequestMessage, cancellationToken: CancellationToken) -> Task: ...


class HttpMethod(Object):
    def __init__(self, method: str): ...
    @overload
    def Equals(self, other: HttpMethod) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Delete() -> HttpMethod: ...
    @property
    def Get() -> HttpMethod: ...
    @property
    def Head() -> HttpMethod: ...
    @property
    def Method(self) -> str: ...
    @property
    def Options() -> HttpMethod: ...
    @property
    def Patch() -> HttpMethod: ...
    @property
    def Post() -> HttpMethod: ...
    @property
    def Put() -> HttpMethod: ...
    @property
    def Trace() -> HttpMethod: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: HttpMethod, right: HttpMethod) -> bool: ...
    def op_Inequality(left: HttpMethod, right: HttpMethod) -> bool: ...
    def ToString(self) -> str: ...


class HttpRequestException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def __init__(self, message: str, inner: Exception, statusCode: Nullable): ...
    @property
    def StatusCode(self) -> Nullable: ...


class HttpRequestMessage(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, method: HttpMethod, requestUri: Uri): ...
    @overload
    def __init__(self, method: HttpMethod, requestUri: str): ...
    def Dispose(self) -> None: ...
    @property
    def Content(self) -> HttpContent: ...
    @property
    def Headers(self) -> HttpRequestHeaders: ...
    @property
    def Method(self) -> HttpMethod: ...
    @property
    def Options(self) -> HttpRequestOptions: ...
    @property
    def Properties(self) -> IDictionary: ...
    @property
    def RequestUri(self) -> Uri: ...
    @property
    def Version(self) -> Version: ...
    @property
    def VersionPolicy(self) -> HttpVersionPolicy: ...
    @Content.setter
    def Content(self, value: HttpContent) -> None: ...
    @Method.setter
    def Method(self, value: HttpMethod) -> None: ...
    @RequestUri.setter
    def RequestUri(self, value: Uri) -> None: ...
    @Version.setter
    def Version(self, value: Version) -> None: ...
    @VersionPolicy.setter
    def VersionPolicy(self, value: HttpVersionPolicy) -> None: ...
    def ToString(self) -> str: ...


class HttpRequestOptions(Object):
    def __init__(self): ...
    def Set(self, key: HttpRequestOptionsKey, value: TValue) -> None: ...
    def TryGetValue(self, key: HttpRequestOptionsKey) -> Tuple[bool, TValue]: ...




class HttpResponseMessage(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, statusCode: HttpStatusCode): ...
    def Dispose(self) -> None: ...
    def EnsureSuccessStatusCode(self) -> HttpResponseMessage: ...
    @property
    def Content(self) -> HttpContent: ...
    @property
    def Headers(self) -> HttpResponseHeaders: ...
    @property
    def IsSuccessStatusCode(self) -> bool: ...
    @property
    def ReasonPhrase(self) -> str: ...
    @property
    def RequestMessage(self) -> HttpRequestMessage: ...
    @property
    def StatusCode(self) -> HttpStatusCode: ...
    @property
    def TrailingHeaders(self) -> HttpResponseHeaders: ...
    @property
    def Version(self) -> Version: ...
    @Content.setter
    def Content(self, value: HttpContent) -> None: ...
    @ReasonPhrase.setter
    def ReasonPhrase(self, value: str) -> None: ...
    @RequestMessage.setter
    def RequestMessage(self, value: HttpRequestMessage) -> None: ...
    @StatusCode.setter
    def StatusCode(self, value: HttpStatusCode) -> None: ...
    @Version.setter
    def Version(self, value: Version) -> None: ...
    def ToString(self) -> str: ...


class HttpVersionPolicy:
    RequestVersionOrLower = 0
    RequestVersionOrHigher = 1
    RequestVersionExact = 2


class MessageProcessingHandler(DelegatingHandler):
    pass


class MultipartContent(HttpContent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, subtype: str): ...
    @overload
    def __init__(self, subtype: str, boundary: str): ...
    def Add(self, content: HttpContent) -> None: ...
    @property
    def HeaderEncodingSelector(self) -> HeaderEncodingSelector: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @HeaderEncodingSelector.setter
    def HeaderEncodingSelector(self, value: HeaderEncodingSelector) -> None: ...


class MultipartFormDataContent(MultipartContent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, boundary: str): ...
    @overload
    def Add(self, content: HttpContent) -> None: ...
    @overload
    def Add(self, content: HttpContent, name: str) -> None: ...
    @overload
    def Add(self, content: HttpContent, name: str, fileName: str) -> None: ...


class ReadOnlyMemoryContent(HttpContent):
    def __init__(self, content: ReadOnlyMemory): ...


class SocketsHttpConnectionContext(Object):
    @property
    def DnsEndPoint(self) -> DnsEndPoint: ...
    @property
    def InitialRequestMessage(self) -> HttpRequestMessage: ...


class SocketsHttpHandler(HttpMessageHandler):
    def __init__(self): ...
    @property
    def ActivityHeadersPropagator(self) -> DistributedContextPropagator: ...
    @property
    def AllowAutoRedirect(self) -> bool: ...
    @property
    def AutomaticDecompression(self) -> DecompressionMethods: ...
    @property
    def ConnectCallback(self) -> Func`3: ...
    @property
    def ConnectTimeout(self) -> TimeSpan: ...
    @property
    def CookieContainer(self) -> CookieContainer: ...
    @property
    def Credentials(self) -> ICredentials: ...
    @property
    def DefaultProxyCredentials(self) -> ICredentials: ...
    @property
    def EnableMultipleHttp2Connections(self) -> bool: ...
    @property
    def Expect100ContinueTimeout(self) -> TimeSpan: ...
    @property
    def InitialHttp2StreamWindowSize(self) -> int: ...
    @property
    def IsSupported() -> bool: ...
    @property
    def KeepAlivePingDelay(self) -> TimeSpan: ...
    @property
    def KeepAlivePingPolicy(self) -> HttpKeepAlivePingPolicy: ...
    @property
    def KeepAlivePingTimeout(self) -> TimeSpan: ...
    @property
    def MaxAutomaticRedirections(self) -> int: ...
    @property
    def MaxConnectionsPerServer(self) -> int: ...
    @property
    def MaxResponseDrainSize(self) -> int: ...
    @property
    def MaxResponseHeadersLength(self) -> int: ...
    @property
    def PlaintextStreamFilter(self) -> Func`3: ...
    @property
    def PooledConnectionIdleTimeout(self) -> TimeSpan: ...
    @property
    def PooledConnectionLifetime(self) -> TimeSpan: ...
    @property
    def PreAuthenticate(self) -> bool: ...
    @property
    def Properties(self) -> IDictionary: ...
    @property
    def Proxy(self) -> IWebProxy: ...
    @property
    def RequestHeaderEncodingSelector(self) -> HeaderEncodingSelector: ...
    @property
    def ResponseDrainTimeout(self) -> TimeSpan: ...
    @property
    def ResponseHeaderEncodingSelector(self) -> HeaderEncodingSelector: ...
    @property
    def SslOptions(self) -> SslClientAuthenticationOptions: ...
    @property
    def UseCookies(self) -> bool: ...
    @property
    def UseProxy(self) -> bool: ...
    @ActivityHeadersPropagator.setter
    def ActivityHeadersPropagator(self, value: DistributedContextPropagator) -> None: ...
    @AllowAutoRedirect.setter
    def AllowAutoRedirect(self, value: bool) -> None: ...
    @AutomaticDecompression.setter
    def AutomaticDecompression(self, value: DecompressionMethods) -> None: ...
    @ConnectCallback.setter
    def ConnectCallback(self, value: Func`3) -> None: ...
    @ConnectTimeout.setter
    def ConnectTimeout(self, value: TimeSpan) -> None: ...
    @CookieContainer.setter
    def CookieContainer(self, value: CookieContainer) -> None: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...
    @DefaultProxyCredentials.setter
    def DefaultProxyCredentials(self, value: ICredentials) -> None: ...
    @EnableMultipleHttp2Connections.setter
    def EnableMultipleHttp2Connections(self, value: bool) -> None: ...
    @Expect100ContinueTimeout.setter
    def Expect100ContinueTimeout(self, value: TimeSpan) -> None: ...
    @InitialHttp2StreamWindowSize.setter
    def InitialHttp2StreamWindowSize(self, value: int) -> None: ...
    @KeepAlivePingDelay.setter
    def KeepAlivePingDelay(self, value: TimeSpan) -> None: ...
    @KeepAlivePingPolicy.setter
    def KeepAlivePingPolicy(self, value: HttpKeepAlivePingPolicy) -> None: ...
    @KeepAlivePingTimeout.setter
    def KeepAlivePingTimeout(self, value: TimeSpan) -> None: ...
    @MaxAutomaticRedirections.setter
    def MaxAutomaticRedirections(self, value: int) -> None: ...
    @MaxConnectionsPerServer.setter
    def MaxConnectionsPerServer(self, value: int) -> None: ...
    @MaxResponseDrainSize.setter
    def MaxResponseDrainSize(self, value: int) -> None: ...
    @MaxResponseHeadersLength.setter
    def MaxResponseHeadersLength(self, value: int) -> None: ...
    @PlaintextStreamFilter.setter
    def PlaintextStreamFilter(self, value: Func`3) -> None: ...
    @PooledConnectionIdleTimeout.setter
    def PooledConnectionIdleTimeout(self, value: TimeSpan) -> None: ...
    @PooledConnectionLifetime.setter
    def PooledConnectionLifetime(self, value: TimeSpan) -> None: ...
    @PreAuthenticate.setter
    def PreAuthenticate(self, value: bool) -> None: ...
    @Proxy.setter
    def Proxy(self, value: IWebProxy) -> None: ...
    @RequestHeaderEncodingSelector.setter
    def RequestHeaderEncodingSelector(self, value: HeaderEncodingSelector) -> None: ...
    @ResponseDrainTimeout.setter
    def ResponseDrainTimeout(self, value: TimeSpan) -> None: ...
    @ResponseHeaderEncodingSelector.setter
    def ResponseHeaderEncodingSelector(self, value: HeaderEncodingSelector) -> None: ...
    @SslOptions.setter
    def SslOptions(self, value: SslClientAuthenticationOptions) -> None: ...
    @UseCookies.setter
    def UseCookies(self, value: bool) -> None: ...
    @UseProxy.setter
    def UseProxy(self, value: bool) -> None: ...


class SocketsHttpPlaintextStreamFilterContext(Object):
    @property
    def InitialRequestMessage(self) -> HttpRequestMessage: ...
    @property
    def NegotiatedHttpVersion(self) -> Version: ...
    @property
    def PlaintextStream(self) -> Stream: ...


class StreamContent(HttpContent):
    @overload
    def __init__(self, content: Stream): ...
    @overload
    def __init__(self, content: Stream, bufferSize: int): ...


class StringContent(ByteArrayContent):
    @overload
    def __init__(self, content: str): ...
    @overload
    def __init__(self, content: str, encoding: Encoding): ...
    @overload
    def __init__(self, content: str, encoding: Encoding, mediaType: str): ...
