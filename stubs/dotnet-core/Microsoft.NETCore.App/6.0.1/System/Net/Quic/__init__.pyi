__all__ = ['Implementations']
from typing import Tuple, Set, Iterable, List


class QuicClientConnectionOptions(QuicOptions):
    def __init__(self): ...
    @property
    def ClientAuthenticationOptions(self) -> SslClientAuthenticationOptions: ...
    @property
    def LocalEndPoint(self) -> IPEndPoint: ...
    @property
    def RemoteEndPoint(self) -> EndPoint: ...
    @ClientAuthenticationOptions.setter
    def ClientAuthenticationOptions(self, value: SslClientAuthenticationOptions) -> None: ...
    @LocalEndPoint.setter
    def LocalEndPoint(self, value: IPEndPoint) -> None: ...
    @RemoteEndPoint.setter
    def RemoteEndPoint(self, value: EndPoint) -> None: ...


class QuicConnection(Object):
    @overload
    def __init__(self, options: QuicClientConnectionOptions): ...
    @overload
    def __init__(self, implementationProvider: QuicImplementationProvider, options: QuicClientConnectionOptions): ...
    @overload
    def __init__(self, remoteEndPoint: EndPoint, sslClientAuthenticationOptions: SslClientAuthenticationOptions, localEndPoint: IPEndPoint): ...
    @overload
    def __init__(self, implementationProvider: QuicImplementationProvider, remoteEndPoint: EndPoint, sslClientAuthenticationOptions: SslClientAuthenticationOptions, localEndPoint: IPEndPoint): ...
    def AcceptStreamAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...
    def CloseAsync(self, errorCode: Int64, cancellationToken: CancellationToken) -> ValueTask: ...
    def ConnectAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...
    def Dispose(self) -> None: ...
    @property
    def Connected(self) -> bool: ...
    @property
    def LocalEndPoint(self) -> IPEndPoint: ...
    @property
    def NegotiatedApplicationProtocol(self) -> SslApplicationProtocol: ...
    @property
    def RemoteCertificate(self) -> X509Certificate: ...
    @property
    def RemoteEndPoint(self) -> EndPoint: ...
    def GetRemoteAvailableBidirectionalStreamCount(self) -> int: ...
    def GetRemoteAvailableUnidirectionalStreamCount(self) -> int: ...
    def OpenBidirectionalStream(self) -> QuicStream: ...
    def OpenUnidirectionalStream(self) -> QuicStream: ...
    def WaitForAvailableBidirectionalStreamsAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...
    def WaitForAvailableUnidirectionalStreamsAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...


class QuicConnectionAbortedException(QuicException):
    def __init__(self, message: str, errorCode: Int64): ...
    @property
    def ErrorCode(self) -> Int64: ...


class QuicException(Exception):
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception, result: int): ...


class QuicImplementationProviders(Object):
    @property
    def Default() -> QuicImplementationProvider: ...
    @property
    def Mock() -> QuicImplementationProvider: ...
    @property
    def MsQuic() -> QuicImplementationProvider: ...


class QuicListener(Object):
    @overload
    def __init__(self, options: QuicListenerOptions): ...
    @overload
    def __init__(self, listenEndPoint: IPEndPoint, sslServerAuthenticationOptions: SslServerAuthenticationOptions): ...
    @overload
    def __init__(self, implementationProvider: QuicImplementationProvider, options: QuicListenerOptions): ...
    @overload
    def __init__(self, implementationProvider: QuicImplementationProvider, listenEndPoint: IPEndPoint, sslServerAuthenticationOptions: SslServerAuthenticationOptions): ...
    def AcceptConnectionAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...
    def Dispose(self) -> None: ...
    @property
    def ListenEndPoint(self) -> IPEndPoint: ...


class QuicListenerOptions(QuicOptions):
    def __init__(self): ...
    @property
    def ListenBacklog(self) -> int: ...
    @property
    def ListenEndPoint(self) -> IPEndPoint: ...
    @property
    def ServerAuthenticationOptions(self) -> SslServerAuthenticationOptions: ...
    @ListenBacklog.setter
    def ListenBacklog(self, value: int) -> None: ...
    @ListenEndPoint.setter
    def ListenEndPoint(self, value: IPEndPoint) -> None: ...
    @ServerAuthenticationOptions.setter
    def ServerAuthenticationOptions(self, value: SslServerAuthenticationOptions) -> None: ...


class QuicOperationAbortedException(QuicException):
    def __init__(self, message: str): ...


class QuicOptions(Object):
    def __init__(self): ...
    @property
    def IdleTimeout(self) -> TimeSpan: ...
    @property
    def MaxBidirectionalStreams(self) -> int: ...
    @property
    def MaxUnidirectionalStreams(self) -> int: ...
    @IdleTimeout.setter
    def IdleTimeout(self, value: TimeSpan) -> None: ...
    @MaxBidirectionalStreams.setter
    def MaxBidirectionalStreams(self, value: int) -> None: ...
    @MaxUnidirectionalStreams.setter
    def MaxUnidirectionalStreams(self, value: int) -> None: ...


class QuicStream(Stream):
    def AbortRead(self, errorCode: Int64) -> None: ...
    def AbortWrite(self, errorCode: Int64) -> None: ...
    def BeginRead(self, buffer: Set(Byte), offset: int, count: int, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def BeginWrite(self, buffer: Set(Byte), offset: int, count: int, callback: AsyncCallback, state: Object) -> IAsyncResult: ...
    def EndRead(self, asyncResult: IAsyncResult) -> int: ...
    def EndWrite(self, asyncResult: IAsyncResult) -> None: ...
    def Flush(self) -> None: ...
    @overload
    def FlushAsync(self, cancellationToken: CancellationToken) -> Task: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanSeek(self) -> bool: ...
    @property
    def CanTimeout(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def Length(self) -> Int64: ...
    @property
    def Position(self) -> Int64: ...
    @property
    def ReadsCompleted(self) -> bool: ...
    @property
    def ReadTimeout(self) -> int: ...
    @property
    def StreamId(self) -> Int64: ...
    @property
    def WriteTimeout(self) -> int: ...
    @overload
    def Read(self, buffer: Span) -> int: ...
    @overload
    def Read(self, buffer: Set(Byte), offset: int, count: int) -> int: ...
    @overload
    def ReadAsync(self, buffer: Memory, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def ReadAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...
    def Seek(self, offset: Int64, origin: SeekOrigin) -> Int64: ...
    @Position.setter
    def Position(self, value: Int64) -> None: ...
    @ReadTimeout.setter
    def ReadTimeout(self, value: int) -> None: ...
    @WriteTimeout.setter
    def WriteTimeout(self, value: int) -> None: ...
    def SetLength(self, value: Int64) -> None: ...
    def Shutdown(self) -> None: ...
    def ShutdownCompleted(self, cancellationToken: CancellationToken) -> ValueTask: ...
    def WaitForWriteCompletionAsync(self, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def Write(self, buffer: ReadOnlySpan) -> None: ...
    @overload
    def Write(self, buffer: Set(Byte), offset: int, count: int) -> None: ...
    @overload
    def WriteAsync(self, buffers: ReadOnlyMemory, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def WriteAsync(self, buffers: ReadOnlySequence, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def WriteAsync(self, buffer: ReadOnlyMemory, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def WriteAsync(self, buffers: ReadOnlySequence, endStream: bool, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def WriteAsync(self, buffer: ReadOnlyMemory, endStream: bool, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def WriteAsync(self, buffers: ReadOnlyMemory, endStream: bool, cancellationToken: CancellationToken) -> ValueTask: ...
    @overload
    def WriteAsync(self, buffer: Set(Byte), offset: int, count: int, cancellationToken: CancellationToken) -> Task: ...


class QuicStreamAbortedException(QuicException):
    def __init__(self, message: str, errorCode: Int64): ...
    @property
    def ErrorCode(self) -> Int64: ...
