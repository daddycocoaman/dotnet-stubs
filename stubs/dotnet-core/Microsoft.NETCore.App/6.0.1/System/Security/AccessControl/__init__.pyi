from typing import Tuple, Set, Iterable, List


class AccessControlActions:
    #None = 0
    View = 1
    Change = 2


class AccessControlModification:
    Add = 0
    Set = 1
    Reset = 2
    Remove = 3
    RemoveAll = 4
    RemoveSpecific = 5


class AccessControlSections:
    #None = 0
    Audit = 1
    Access = 2
    Owner = 4
    Group = 8
    All = 15


class AccessControlType:
    Allow = 0
    Deny = 1


class AccessRule(AuthorizationRule):
    @property
    def AccessControlType(self) -> AccessControlType: ...




class AceEnumerator(Object):
    @property
    def Current(self) -> GenericAce: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class AceFlags:
    #None = 0
    ObjectInherit = 1
    ContainerInherit = 2
    NoPropagateInherit = 4
    InheritOnly = 8
    InheritanceFlags = 15
    Inherited = 16
    SuccessfulAccess = 64
    FailedAccess = 128
    AuditFlags = 192


class AceQualifier:
    AccessAllowed = 0
    AccessDenied = 1
    SystemAudit = 2
    SystemAlarm = 3


class AceType:
    AccessAllowed = 0
    AccessDenied = 1
    SystemAudit = 2
    SystemAlarm = 3
    AccessAllowedCompound = 4
    AccessAllowedObject = 5
    AccessDeniedObject = 6
    SystemAuditObject = 7
    SystemAlarmObject = 8
    AccessAllowedCallback = 9
    AccessDeniedCallback = 10
    AccessAllowedCallbackObject = 11
    AccessDeniedCallbackObject = 12
    SystemAuditCallback = 13
    SystemAlarmCallback = 14
    SystemAuditCallbackObject = 15
    SystemAlarmCallbackObject = 16
    MaxDefinedAceType = 16


class AuditFlags:
    #None = 0
    Success = 1
    Failure = 2


class AuditRule(AuthorizationRule):
    @property
    def AuditFlags(self) -> AuditFlags: ...




class AuthorizationRule(Object):
    @property
    def IdentityReference(self) -> IdentityReference: ...
    @property
    def InheritanceFlags(self) -> InheritanceFlags: ...
    @property
    def IsInherited(self) -> bool: ...
    @property
    def PropagationFlags(self) -> PropagationFlags: ...


class AuthorizationRuleCollection(ReadOnlyCollectionBase):
    def __init__(self): ...
    def AddRule(self, rule: AuthorizationRule) -> None: ...
    def CopyTo(self, rules: Set(AuthorizationRule), index: int) -> None: ...
    @property
    def Item(self, index: int) -> AuthorizationRule: ...


class CommonAce(QualifiedAce):
    def __init__(self, flags: AceFlags, qualifier: AceQualifier, accessMask: int, sid: SecurityIdentifier, isCallback: bool, opaque: Set(Byte)): ...
    @property
    def BinaryLength(self) -> int: ...
    def GetBinaryForm(self, binaryForm: Set(Byte), offset: int) -> None: ...
    def MaxOpaqueLength(isCallback: bool) -> int: ...


class CommonAcl(GenericAcl):
    @property
    def BinaryLength(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsCanonical(self) -> bool: ...
    @property
    def IsContainer(self) -> bool: ...
    @property
    def IsDS(self) -> bool: ...
    @property
    def Item(self, index: int) -> GenericAce: ...
    @property
    def Revision(self) -> Byte: ...
    def GetBinaryForm(self, binaryForm: Set(Byte), offset: int) -> None: ...
    def Purge(self, sid: SecurityIdentifier) -> None: ...
    def RemoveInheritedAces(self) -> None: ...
    @Item.setter
    def Item(self, index: int, value: GenericAce) -> None: ...


class CommonObjectSecurity(ObjectSecurity):
    def GetAccessRules(self, includeExplicit: bool, includeInherited: bool, targetType: Type) -> AuthorizationRuleCollection: ...
    def GetAuditRules(self, includeExplicit: bool, includeInherited: bool, targetType: Type) -> AuthorizationRuleCollection: ...


class CommonSecurityDescriptor(GenericSecurityDescriptor):
    @overload
    def __init__(self, isContainer: bool, isDS: bool, rawSecurityDescriptor: RawSecurityDescriptor): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, sddlForm: str): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, binaryForm: Set(Byte), offset: int): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, flags: ControlFlags, owner: SecurityIdentifier, group: SecurityIdentifier, systemAcl: SystemAcl, discretionaryAcl: DiscretionaryAcl): ...
    def AddDiscretionaryAcl(self, revision: Byte, trusted: int) -> None: ...
    def AddSystemAcl(self, revision: Byte, trusted: int) -> None: ...
    @property
    def ControlFlags(self) -> ControlFlags: ...
    @property
    def DiscretionaryAcl(self) -> DiscretionaryAcl: ...
    @property
    def Group(self) -> SecurityIdentifier: ...
    @property
    def IsContainer(self) -> bool: ...
    @property
    def IsDiscretionaryAclCanonical(self) -> bool: ...
    @property
    def IsDS(self) -> bool: ...
    @property
    def IsSystemAclCanonical(self) -> bool: ...
    @property
    def Owner(self) -> SecurityIdentifier: ...
    @property
    def SystemAcl(self) -> SystemAcl: ...
    def PurgeAccessControl(self, sid: SecurityIdentifier) -> None: ...
    def PurgeAudit(self, sid: SecurityIdentifier) -> None: ...
    @DiscretionaryAcl.setter
    def DiscretionaryAcl(self, value: DiscretionaryAcl) -> None: ...
    @Group.setter
    def Group(self, value: SecurityIdentifier) -> None: ...
    @Owner.setter
    def Owner(self, value: SecurityIdentifier) -> None: ...
    @SystemAcl.setter
    def SystemAcl(self, value: SystemAcl) -> None: ...
    def SetDiscretionaryAclProtection(self, isProtected: bool, preserveInheritance: bool) -> None: ...
    def SetSystemAclProtection(self, isProtected: bool, preserveInheritance: bool) -> None: ...


class CompoundAce(KnownAce):
    def __init__(self, flags: AceFlags, accessMask: int, compoundAceType: CompoundAceType, sid: SecurityIdentifier): ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def CompoundAceType(self) -> CompoundAceType: ...
    def GetBinaryForm(self, binaryForm: Set(Byte), offset: int) -> None: ...
    @CompoundAceType.setter
    def CompoundAceType(self, value: CompoundAceType) -> None: ...


class CompoundAceType:
    Impersonation = 1


class ControlFlags:
    #None = 0
    OwnerDefaulted = 1
    GroupDefaulted = 2
    DiscretionaryAclPresent = 4
    DiscretionaryAclDefaulted = 8
    SystemAclPresent = 16
    SystemAclDefaulted = 32
    DiscretionaryAclUntrusted = 64
    ServerSecurity = 128
    DiscretionaryAclAutoInheritRequired = 256
    SystemAclAutoInheritRequired = 512
    DiscretionaryAclAutoInherited = 1024
    SystemAclAutoInherited = 2048
    DiscretionaryAclProtected = 4096
    SystemAclProtected = 8192
    RMControlValid = 16384
    SelfRelative = 32768


class CustomAce(GenericAce):
    def __init__(self, type: AceType, flags: AceFlags, opaque: Set(Byte)): ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def OpaqueLength(self) -> int: ...
    def GetBinaryForm(self, binaryForm: Set(Byte), offset: int) -> None: ...
    def GetOpaque(self) -> Set(Byte): ...
    def SetOpaque(self, opaque: Set(Byte)) -> None: ...


class DiscretionaryAcl(CommonAcl):
    @overload
    def __init__(self, isContainer: bool, isDS: bool, capacity: int): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, rawAcl: RawAcl): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, revision: Byte, capacity: int): ...
    @overload
    def AddAccess(self, accessType: AccessControlType, sid: SecurityIdentifier, rule: ObjectAccessRule) -> None: ...
    @overload
    def AddAccess(self, accessType: AccessControlType, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def AddAccess(self, accessType: AccessControlType, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: Guid, inheritedObjectType: Guid) -> None: ...
    @overload
    def RemoveAccess(self, accessType: AccessControlType, sid: SecurityIdentifier, rule: ObjectAccessRule) -> bool: ...
    @overload
    def RemoveAccess(self, accessType: AccessControlType, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> bool: ...
    @overload
    def RemoveAccess(self, accessType: AccessControlType, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: Guid, inheritedObjectType: Guid) -> bool: ...
    @overload
    def RemoveAccessSpecific(self, accessType: AccessControlType, sid: SecurityIdentifier, rule: ObjectAccessRule) -> None: ...
    @overload
    def RemoveAccessSpecific(self, accessType: AccessControlType, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def RemoveAccessSpecific(self, accessType: AccessControlType, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: Guid, inheritedObjectType: Guid) -> None: ...
    @overload
    def SetAccess(self, accessType: AccessControlType, sid: SecurityIdentifier, rule: ObjectAccessRule) -> None: ...
    @overload
    def SetAccess(self, accessType: AccessControlType, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def SetAccess(self, accessType: AccessControlType, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: Guid, inheritedObjectType: Guid) -> None: ...


class GenericAce(Object):
    def Copy(self) -> GenericAce: ...
    def CreateFromBinaryForm(binaryForm: Set(Byte), offset: int) -> GenericAce: ...
    def Equals(self, o: Object) -> bool: ...
    @property
    def AceFlags(self) -> AceFlags: ...
    @property
    def AceType(self) -> AceType: ...
    @property
    def AuditFlags(self) -> AuditFlags: ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def InheritanceFlags(self) -> InheritanceFlags: ...
    @property
    def IsInherited(self) -> bool: ...
    @property
    def PropagationFlags(self) -> PropagationFlags: ...
    def GetBinaryForm(self, binaryForm: Set(Byte), offset: int) -> None: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(left: GenericAce, right: GenericAce) -> bool: ...
    def op_Inequality(left: GenericAce, right: GenericAce) -> bool: ...
    @AceFlags.setter
    def AceFlags(self, value: AceFlags) -> None: ...


class GenericAcl(Object):
    def CopyTo(self, array: Set(GenericAce), index: int) -> None: ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Item(self, index: int) -> GenericAce: ...
    @property
    def Revision(self) -> Byte: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetBinaryForm(self, binaryForm: Set(Byte), offset: int) -> None: ...
    def GetEnumerator(self) -> AceEnumerator: ...
    @Item.setter
    def Item(self, index: int, value: GenericAce) -> None: ...


class GenericSecurityDescriptor(Object):
    @property
    def BinaryLength(self) -> int: ...
    @property
    def ControlFlags(self) -> ControlFlags: ...
    @property
    def Group(self) -> SecurityIdentifier: ...
    @property
    def Owner(self) -> SecurityIdentifier: ...
    @property
    def Revision() -> Byte: ...
    def GetBinaryForm(self, binaryForm: Set(Byte), offset: int) -> None: ...
    def GetSddlForm(self, includeSections: AccessControlSections) -> str: ...
    def IsSddlConversionSupported() -> bool: ...
    @Group.setter
    def Group(self, value: SecurityIdentifier) -> None: ...
    @Owner.setter
    def Owner(self, value: SecurityIdentifier) -> None: ...


class InheritanceFlags:
    #None = 0
    ContainerInherit = 1
    ObjectInherit = 2


class KnownAce(GenericAce):
    @property
    def AccessMask(self) -> int: ...
    @property
    def SecurityIdentifier(self) -> SecurityIdentifier: ...
    @AccessMask.setter
    def AccessMask(self, value: int) -> None: ...
    @SecurityIdentifier.setter
    def SecurityIdentifier(self, value: SecurityIdentifier) -> None: ...


class NativeObjectSecurity(CommonObjectSecurity):
    pass


class ObjectAccessRule(AccessRule):
    @property
    def InheritedObjectType(self) -> Guid: ...
    @property
    def ObjectFlags(self) -> ObjectAceFlags: ...
    @property
    def ObjectType(self) -> Guid: ...


class ObjectAce(QualifiedAce):
    def __init__(self, aceFlags: AceFlags, qualifier: AceQualifier, accessMask: int, sid: SecurityIdentifier, flags: ObjectAceFlags, type: Guid, inheritedType: Guid, isCallback: bool, opaque: Set(Byte)): ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def InheritedObjectAceType(self) -> Guid: ...
    @property
    def ObjectAceFlags(self) -> ObjectAceFlags: ...
    @property
    def ObjectAceType(self) -> Guid: ...
    def GetBinaryForm(self, binaryForm: Set(Byte), offset: int) -> None: ...
    def MaxOpaqueLength(isCallback: bool) -> int: ...
    @InheritedObjectAceType.setter
    def InheritedObjectAceType(self, value: Guid) -> None: ...
    @ObjectAceFlags.setter
    def ObjectAceFlags(self, value: ObjectAceFlags) -> None: ...
    @ObjectAceType.setter
    def ObjectAceType(self, value: Guid) -> None: ...


class ObjectAceFlags:
    #None = 0
    ObjectAceTypePresent = 1
    InheritedObjectAceTypePresent = 2


class ObjectAuditRule(AuditRule):
    @property
    def InheritedObjectType(self) -> Guid: ...
    @property
    def ObjectFlags(self) -> ObjectAceFlags: ...
    @property
    def ObjectType(self) -> Guid: ...


class ObjectSecurity(Object):
    def AccessRuleFactory(self, identityReference: IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, type: AccessControlType) -> AccessRule: ...
    def AuditRuleFactory(self, identityReference: IdentityReference, accessMask: int, isInherited: bool, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, flags: AuditFlags) -> AuditRule: ...
    @property
    def AccessRightType(self) -> Type: ...
    @property
    def AccessRuleType(self) -> Type: ...
    @property
    def AreAccessRulesCanonical(self) -> bool: ...
    @property
    def AreAccessRulesProtected(self) -> bool: ...
    @property
    def AreAuditRulesCanonical(self) -> bool: ...
    @property
    def AreAuditRulesProtected(self) -> bool: ...
    @property
    def AuditRuleType(self) -> Type: ...
    def GetGroup(self, targetType: Type) -> IdentityReference: ...
    def GetOwner(self, targetType: Type) -> IdentityReference: ...
    def GetSecurityDescriptorBinaryForm(self) -> Set(Byte): ...
    def GetSecurityDescriptorSddlForm(self, includeSections: AccessControlSections) -> str: ...
    def IsSddlConversionSupported() -> bool: ...
    def ModifyAccessRule(self, modification: AccessControlModification, rule: AccessRule) -> Tuple[bool, bool]: ...
    def ModifyAuditRule(self, modification: AccessControlModification, rule: AuditRule) -> Tuple[bool, bool]: ...
    def PurgeAccessRules(self, identity: IdentityReference) -> None: ...
    def PurgeAuditRules(self, identity: IdentityReference) -> None: ...
    def SetAccessRuleProtection(self, isProtected: bool, preserveInheritance: bool) -> None: ...
    def SetAuditRuleProtection(self, isProtected: bool, preserveInheritance: bool) -> None: ...
    def SetGroup(self, identity: IdentityReference) -> None: ...
    def SetOwner(self, identity: IdentityReference) -> None: ...
    @overload
    def SetSecurityDescriptorBinaryForm(self, binaryForm: Set(Byte)) -> None: ...
    @overload
    def SetSecurityDescriptorBinaryForm(self, binaryForm: Set(Byte), includeSections: AccessControlSections) -> None: ...
    @overload
    def SetSecurityDescriptorSddlForm(self, sddlForm: str) -> None: ...
    @overload
    def SetSecurityDescriptorSddlForm(self, sddlForm: str, includeSections: AccessControlSections) -> None: ...




class PrivilegeNotHeldException(UnauthorizedAccessException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, privilege: str): ...
    @overload
    def __init__(self, privilege: str, inner: Exception): ...
    @property
    def PrivilegeName(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class PropagationFlags:
    #None = 0
    NoPropagateInherit = 1
    InheritOnly = 2


class QualifiedAce(KnownAce):
    @property
    def AceQualifier(self) -> AceQualifier: ...
    @property
    def IsCallback(self) -> bool: ...
    @property
    def OpaqueLength(self) -> int: ...
    def GetOpaque(self) -> Set(Byte): ...
    def SetOpaque(self, opaque: Set(Byte)) -> None: ...


class RawAcl(GenericAcl):
    @overload
    def __init__(self, revision: Byte, capacity: int): ...
    @overload
    def __init__(self, binaryForm: Set(Byte), offset: int): ...
    @property
    def BinaryLength(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> GenericAce: ...
    @property
    def Revision(self) -> Byte: ...
    def GetBinaryForm(self, binaryForm: Set(Byte), offset: int) -> None: ...
    def InsertAce(self, index: int, ace: GenericAce) -> None: ...
    def RemoveAce(self, index: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: GenericAce) -> None: ...


class RawSecurityDescriptor(GenericSecurityDescriptor):
    @overload
    def __init__(self, sddlForm: str): ...
    @overload
    def __init__(self, binaryForm: Set(Byte), offset: int): ...
    @overload
    def __init__(self, flags: ControlFlags, owner: SecurityIdentifier, group: SecurityIdentifier, systemAcl: RawAcl, discretionaryAcl: RawAcl): ...
    @property
    def ControlFlags(self) -> ControlFlags: ...
    @property
    def DiscretionaryAcl(self) -> RawAcl: ...
    @property
    def Group(self) -> SecurityIdentifier: ...
    @property
    def Owner(self) -> SecurityIdentifier: ...
    @property
    def ResourceManagerControl(self) -> Byte: ...
    @property
    def SystemAcl(self) -> RawAcl: ...
    @DiscretionaryAcl.setter
    def DiscretionaryAcl(self, value: RawAcl) -> None: ...
    @Group.setter
    def Group(self, value: SecurityIdentifier) -> None: ...
    @Owner.setter
    def Owner(self, value: SecurityIdentifier) -> None: ...
    @ResourceManagerControl.setter
    def ResourceManagerControl(self, value: Byte) -> None: ...
    @SystemAcl.setter
    def SystemAcl(self, value: RawAcl) -> None: ...
    def SetFlags(self, flags: ControlFlags) -> None: ...


class ResourceType:
    Unknown = 0
    FileObject = 1
    Service = 2
    Printer = 3
    RegistryKey = 4
    LMShare = 5
    KernelObject = 6
    WindowObject = 7
    DSObject = 8
    DSObjectAll = 9
    ProviderDefined = 10
    WmiGuidObject = 11
    RegistryWow6432Key = 12


class SecurityInfos:
    Owner = 1
    Group = 2
    DiscretionaryAcl = 4
    SystemAcl = 8


class SystemAcl(CommonAcl):
    @overload
    def __init__(self, isContainer: bool, isDS: bool, capacity: int): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, rawAcl: RawAcl): ...
    @overload
    def __init__(self, isContainer: bool, isDS: bool, revision: Byte, capacity: int): ...
    @overload
    def AddAudit(self, sid: SecurityIdentifier, rule: ObjectAuditRule) -> None: ...
    @overload
    def AddAudit(self, auditFlags: AuditFlags, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def AddAudit(self, auditFlags: AuditFlags, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: Guid, inheritedObjectType: Guid) -> None: ...
    @overload
    def RemoveAudit(self, sid: SecurityIdentifier, rule: ObjectAuditRule) -> bool: ...
    @overload
    def RemoveAudit(self, auditFlags: AuditFlags, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> bool: ...
    @overload
    def RemoveAudit(self, auditFlags: AuditFlags, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: Guid, inheritedObjectType: Guid) -> bool: ...
    @overload
    def RemoveAuditSpecific(self, sid: SecurityIdentifier, rule: ObjectAuditRule) -> None: ...
    @overload
    def RemoveAuditSpecific(self, auditFlags: AuditFlags, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def RemoveAuditSpecific(self, auditFlags: AuditFlags, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: Guid, inheritedObjectType: Guid) -> None: ...
    @overload
    def SetAudit(self, sid: SecurityIdentifier, rule: ObjectAuditRule) -> None: ...
    @overload
    def SetAudit(self, auditFlags: AuditFlags, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags) -> None: ...
    @overload
    def SetAudit(self, auditFlags: AuditFlags, sid: SecurityIdentifier, accessMask: int, inheritanceFlags: InheritanceFlags, propagationFlags: PropagationFlags, objectFlags: ObjectAceFlags, objectType: Guid, inheritedObjectType: Guid) -> None: ...
