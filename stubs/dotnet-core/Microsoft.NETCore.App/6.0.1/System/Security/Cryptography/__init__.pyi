from typing import Tuple, Set, Iterable, List


class SymmetricAlgorithm(Object):
    def Clear(self) -> None: ...
    def Create(algName: str) -> SymmetricAlgorithm: ...
    @overload
    def CreateDecryptor(self) -> ICryptoTransform: ...
    @overload
    def CreateDecryptor(self, rgbKey: Set(Byte), rgbIV: Set(Byte)) -> ICryptoTransform: ...
    @overload
    def CreateEncryptor(self) -> ICryptoTransform: ...
    @overload
    def CreateEncryptor(self, rgbKey: Set(Byte), rgbIV: Set(Byte)) -> ICryptoTransform: ...
    @overload
    def DecryptCbc(self, ciphertext: ReadOnlySpan, iv: ReadOnlySpan, paddingMode: PaddingMode) -> Set(Byte): ...
    @overload
    def DecryptCbc(self, ciphertext: Set(Byte), iv: Set(Byte), paddingMode: PaddingMode) -> Set(Byte): ...
    @overload
    def DecryptCbc(self, ciphertext: ReadOnlySpan, iv: ReadOnlySpan, destination: Span, paddingMode: PaddingMode) -> int: ...
    @overload
    def DecryptCfb(self, ciphertext: ReadOnlySpan, iv: ReadOnlySpan, paddingMode: PaddingMode, feedbackSizeInBits: int) -> Set(Byte): ...
    @overload
    def DecryptCfb(self, ciphertext: Set(Byte), iv: Set(Byte), paddingMode: PaddingMode, feedbackSizeInBits: int) -> Set(Byte): ...
    @overload
    def DecryptCfb(self, ciphertext: ReadOnlySpan, iv: ReadOnlySpan, destination: Span, paddingMode: PaddingMode, feedbackSizeInBits: int) -> int: ...
    @overload
    def DecryptEcb(self, ciphertext: ReadOnlySpan, paddingMode: PaddingMode) -> Set(Byte): ...
    @overload
    def DecryptEcb(self, ciphertext: Set(Byte), paddingMode: PaddingMode) -> Set(Byte): ...
    @overload
    def DecryptEcb(self, ciphertext: ReadOnlySpan, destination: Span, paddingMode: PaddingMode) -> int: ...
    def Dispose(self) -> None: ...
    @overload
    def EncryptCbc(self, plaintext: Set(Byte), iv: Set(Byte), paddingMode: PaddingMode) -> Set(Byte): ...
    @overload
    def EncryptCbc(self, plaintext: ReadOnlySpan, iv: ReadOnlySpan, paddingMode: PaddingMode) -> Set(Byte): ...
    @overload
    def EncryptCbc(self, plaintext: ReadOnlySpan, iv: ReadOnlySpan, destination: Span, paddingMode: PaddingMode) -> int: ...
    @overload
    def EncryptCfb(self, plaintext: ReadOnlySpan, iv: ReadOnlySpan, paddingMode: PaddingMode, feedbackSizeInBits: int) -> Set(Byte): ...
    @overload
    def EncryptCfb(self, plaintext: Set(Byte), iv: Set(Byte), paddingMode: PaddingMode, feedbackSizeInBits: int) -> Set(Byte): ...
    @overload
    def EncryptCfb(self, plaintext: ReadOnlySpan, iv: ReadOnlySpan, destination: Span, paddingMode: PaddingMode, feedbackSizeInBits: int) -> int: ...
    @overload
    def EncryptEcb(self, plaintext: ReadOnlySpan, paddingMode: PaddingMode) -> Set(Byte): ...
    @overload
    def EncryptEcb(self, plaintext: Set(Byte), paddingMode: PaddingMode) -> Set(Byte): ...
    @overload
    def EncryptEcb(self, plaintext: ReadOnlySpan, destination: Span, paddingMode: PaddingMode) -> int: ...
    def GenerateIV(self) -> None: ...
    def GenerateKey(self) -> None: ...
    @property
    def BlockSize(self) -> int: ...
    @property
    def FeedbackSize(self) -> int: ...
    @property
    def IV(self) -> Set(Byte): ...
    @property
    def Key(self) -> Set(Byte): ...
    @property
    def KeySize(self) -> int: ...
    @property
    def LegalBlockSizes(self) -> Set(KeySizes): ...
    @property
    def LegalKeySizes(self) -> Set(KeySizes): ...
    @property
    def Mode(self) -> CipherMode: ...
    @property
    def Padding(self) -> PaddingMode: ...
    def GetCiphertextLengthCbc(self, plaintextLength: int, paddingMode: PaddingMode) -> int: ...
    def GetCiphertextLengthCfb(self, plaintextLength: int, paddingMode: PaddingMode, feedbackSizeInBits: int) -> int: ...
    def GetCiphertextLengthEcb(self, plaintextLength: int, paddingMode: PaddingMode) -> int: ...
    @BlockSize.setter
    def BlockSize(self, value: int) -> None: ...
    @FeedbackSize.setter
    def FeedbackSize(self, value: int) -> None: ...
    @IV.setter
    def IV(self, value: Set(Byte)) -> None: ...
    @Key.setter
    def Key(self, value: Set(Byte)) -> None: ...
    @KeySize.setter
    def KeySize(self, value: int) -> None: ...
    @Mode.setter
    def Mode(self, value: CipherMode) -> None: ...
    @Padding.setter
    def Padding(self, value: PaddingMode) -> None: ...
    def TryDecryptCbc(self, ciphertext: ReadOnlySpan, iv: ReadOnlySpan, destination: Span, paddingMode: PaddingMode) -> Tuple[bool, int]: ...
    def TryDecryptCfb(self, ciphertext: ReadOnlySpan, iv: ReadOnlySpan, destination: Span, paddingMode: PaddingMode, feedbackSizeInBits: int) -> Tuple[bool, int]: ...
    def TryDecryptEcb(self, ciphertext: ReadOnlySpan, destination: Span, paddingMode: PaddingMode) -> Tuple[bool, int]: ...
    def TryEncryptCbc(self, plaintext: ReadOnlySpan, iv: ReadOnlySpan, destination: Span, paddingMode: PaddingMode) -> Tuple[bool, int]: ...
    def TryEncryptCfb(self, plaintext: ReadOnlySpan, iv: ReadOnlySpan, destination: Span, paddingMode: PaddingMode, feedbackSizeInBits: int) -> Tuple[bool, int]: ...
    def TryEncryptEcb(self, plaintext: ReadOnlySpan, destination: Span, paddingMode: PaddingMode) -> Tuple[bool, int]: ...
    def ValidKeySize(self, bitLength: int) -> bool: ...
