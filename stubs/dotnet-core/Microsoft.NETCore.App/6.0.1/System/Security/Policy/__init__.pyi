from typing import Tuple, Set, Iterable, List


class Evidence(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, evidence: Evidence): ...
    @overload
    def __init__(self, hostEvidence: Set(Object), assemblyEvidence: Set(Object)): ...
    @overload
    def __init__(self, hostEvidence: Set(EvidenceBase), assemblyEvidence: Set(EvidenceBase)): ...
    def AddAssemblyEvidence(self, evidence: T) -> None: ...
    def AddHostEvidence(self, evidence: T) -> None: ...
    def Clear(self) -> None: ...
    def Clone(self) -> Evidence: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSynchronized(self) -> bool: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def SyncRoot(self) -> Object: ...
    def GetAssemblyEnumerator(self) -> IEnumerator: ...
    def GetAssemblyEvidence(self) -> T: ...
    def GetHostEnumerator(self) -> IEnumerator: ...
    def GetHostEvidence(self) -> T: ...
    def Merge(self, evidence: Evidence) -> None: ...
    def RemoveType(self, t: Type) -> None: ...
    @Locked.setter
    def Locked(self, value: bool) -> None: ...


class EvidenceBase(Object):
    def Clone(self) -> EvidenceBase: ...
