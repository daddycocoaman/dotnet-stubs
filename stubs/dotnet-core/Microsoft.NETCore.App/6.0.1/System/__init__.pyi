from typing import Tuple, Set, Iterable, List


class FileStyleUriParser(UriParser):
    def __init__(self): ...


class FtpStyleUriParser(UriParser):
    def __init__(self): ...


class GenericUriParser(UriParser):
    def __init__(self, options: GenericUriParserOptions): ...


class GenericUriParserOptions:
    Default = 0
    GenericAuthority = 1
    AllowEmptyAuthority = 2
    NoUserInfo = 4
    NoPort = 8
    NoQuery = 16
    NoFragment = 32
    DontConvertPathBackslashes = 64
    DontCompressPath = 128
    DontUnescapePathDotsAndSlashes = 256
    Idn = 512
    IriParsing = 1024


class GopherStyleUriParser(UriParser):
    def __init__(self): ...


class HttpStyleUriParser(UriParser):
    def __init__(self): ...


class LdapStyleUriParser(UriParser):
    def __init__(self): ...


class NetPipeStyleUriParser(UriParser):
    def __init__(self): ...


class NetTcpStyleUriParser(UriParser):
    def __init__(self): ...


class NewsStyleUriParser(UriParser):
    def __init__(self): ...


class Uri(Object):
    @overload
    def __init__(self, uriString: str): ...
    @overload
    def __init__(self, uriString: str, dontEscape: bool): ...
    @overload
    def __init__(self, uriString: str, uriKind: UriKind): ...
    @overload
    def __init__(self, uriString: str, creationOptions: UriCreationOptions): ...
    @overload
    def __init__(self, baseUri: Uri, relativeUri: str): ...
    @overload
    def __init__(self, baseUri: Uri, relativeUri: Uri): ...
    @overload
    def __init__(self, baseUri: Uri, relativeUri: str, dontEscape: bool): ...
    def CheckHostName(name: str) -> UriHostNameType: ...
    def CheckSchemeName(schemeName: str) -> bool: ...
    def Compare(uri1: Uri, uri2: Uri, partsToCompare: UriComponents, compareFormat: UriFormat, comparisonType: StringComparison) -> int: ...
    def Equals(self, comparand: Object) -> bool: ...
    def EscapeDataString(stringToEscape: str) -> str: ...
    def FromHex(digit: Char) -> int: ...
    @property
    def AbsolutePath(self) -> str: ...
    @property
    def AbsoluteUri(self) -> str: ...
    @property
    def Authority(self) -> str: ...
    @property
    def DnsSafeHost(self) -> str: ...
    @property
    def Fragment(self) -> str: ...
    @property
    def Host(self) -> str: ...
    @property
    def HostNameType(self) -> UriHostNameType: ...
    @property
    def IdnHost(self) -> str: ...
    @property
    def IsAbsoluteUri(self) -> bool: ...
    @property
    def IsDefaultPort(self) -> bool: ...
    @property
    def IsFile(self) -> bool: ...
    @property
    def IsLoopback(self) -> bool: ...
    @property
    def IsUnc(self) -> bool: ...
    @property
    def LocalPath(self) -> str: ...
    @property
    def OriginalString(self) -> str: ...
    @property
    def PathAndQuery(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @property
    def Query(self) -> str: ...
    @property
    def Scheme(self) -> str: ...
    @property
    def Segments(self) -> Set(str): ...
    @property
    def UserEscaped(self) -> bool: ...
    @property
    def UserInfo(self) -> str: ...
    def GetComponents(self, components: UriComponents, format: UriFormat) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetLeftPart(self, part: UriPartial) -> str: ...
    def HexEscape(character: Char) -> str: ...
    def HexUnescape(pattern: str, index: int) -> Tuple[Char, int]: ...
    def IsBaseOf(self, uri: Uri) -> bool: ...
    def IsHexDigit(character: Char) -> bool: ...
    def IsHexEncoding(pattern: str, index: int) -> bool: ...
    def IsWellFormedOriginalString(self) -> bool: ...
    def IsWellFormedUriString(uriString: str, uriKind: UriKind) -> bool: ...
    def MakeRelativeUri(self, uri: Uri) -> Uri: ...
    def op_Equality(uri1: Uri, uri2: Uri) -> bool: ...
    def op_Inequality(uri1: Uri, uri2: Uri) -> bool: ...
    def ToString(self) -> str: ...
    @overload
    def TryCreate(baseUri: Uri, relativeUri: Uri) -> Tuple[bool, Uri]: ...
    @overload
    def TryCreate(baseUri: Uri, relativeUri: str) -> Tuple[bool, Uri]: ...
    @overload
    def TryCreate(uriString: str, creationOptions: UriCreationOptions) -> Tuple[bool, UriCreationOptions, Uri]: ...
    @overload
    def TryCreate(uriString: str, uriKind: UriKind) -> Tuple[bool, Uri]: ...
    def UnescapeDataString(stringToUnescape: str) -> str: ...


class UriBuilder(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, uri: str): ...
    @overload
    def __init__(self, uri: Uri): ...
    @overload
    def __init__(self, schemeName: str, hostName: str): ...
    @overload
    def __init__(self, scheme: str, host: str, portNumber: int): ...
    @overload
    def __init__(self, scheme: str, host: str, port: int, pathValue: str): ...
    @overload
    def __init__(self, scheme: str, host: str, port: int, path: str, extraValue: str): ...
    def Equals(self, rparam: Object) -> bool: ...
    @property
    def Fragment(self) -> str: ...
    @property
    def Host(self) -> str: ...
    @property
    def Password(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def Port(self) -> int: ...
    @property
    def Query(self) -> str: ...
    @property
    def Scheme(self) -> str: ...
    @property
    def Uri(self) -> Uri: ...
    @property
    def UserName(self) -> str: ...
    def GetHashCode(self) -> int: ...
    @Fragment.setter
    def Fragment(self, value: str) -> None: ...
    @Host.setter
    def Host(self, value: str) -> None: ...
    @Password.setter
    def Password(self, value: str) -> None: ...
    @Path.setter
    def Path(self, value: str) -> None: ...
    @Port.setter
    def Port(self, value: int) -> None: ...
    @Query.setter
    def Query(self, value: str) -> None: ...
    @Scheme.setter
    def Scheme(self, value: str) -> None: ...
    @UserName.setter
    def UserName(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class UriComponents:
    Scheme = 1
    UserInfo = 2
    Host = 4
    Port = 8
    SchemeAndServer = 13
    Path = 16
    Query = 32
    PathAndQuery = 48
    HttpRequestUrl = 61
    Fragment = 64
    AbsoluteUri = 127
    StrongPort = 128
    HostAndPort = 132
    StrongAuthority = 134
    NormalizedHost = 256
    KeepDelimiter = 1073741824
    SerializationInfoString = -2147483648


class UriCreationOptions(ValueType):
    @property
    def DangerousDisablePathAndQueryCanonicalization(self) -> bool: ...
    @DangerousDisablePathAndQueryCanonicalization.setter
    def DangerousDisablePathAndQueryCanonicalization(self, value: bool) -> None: ...


class UriFormat:
    UriEscaped = 1
    Unescaped = 2
    SafeUnescaped = 3


class UriFormatException(FormatException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, textString: str): ...
    @overload
    def __init__(self, textString: str, e: Exception): ...


class UriHostNameType:
    Unknown = 0
    Basic = 1
    Dns = 2
    IPv4 = 3
    IPv6 = 4


class UriKind:
    RelativeOrAbsolute = 0
    Absolute = 1
    Relative = 2


class UriParser(Object):
    def IsKnownScheme(schemeName: str) -> bool: ...
    def Register(uriParser: UriParser, schemeName: str, defaultPort: int) -> None: ...


class UriPartial:
    Scheme = 0
    Authority = 1
    Path = 2
    Query = 3
