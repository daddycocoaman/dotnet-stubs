from typing import Tuple, Set, Iterable, List


class Barrier(Object):
    @overload
    def __init__(self, participantCount: int): ...
    @overload
    def __init__(self, participantCount: int, postPhaseAction: Action): ...
    def AddParticipant(self) -> Int64: ...
    def AddParticipants(self, participantCount: int) -> Int64: ...
    def Dispose(self) -> None: ...
    @property
    def CurrentPhaseNumber(self) -> Int64: ...
    @property
    def ParticipantCount(self) -> int: ...
    @property
    def ParticipantsRemaining(self) -> int: ...
    def RemoveParticipant(self) -> None: ...
    def RemoveParticipants(self, participantCount: int) -> None: ...
    @overload
    def SignalAndWait(self) -> None: ...
    @overload
    def SignalAndWait(self, timeout: TimeSpan) -> bool: ...
    @overload
    def SignalAndWait(self, millisecondsTimeout: int) -> bool: ...
    @overload
    def SignalAndWait(self, cancellationToken: CancellationToken) -> None: ...
    @overload
    def SignalAndWait(self, timeout: TimeSpan, cancellationToken: CancellationToken) -> bool: ...
    @overload
    def SignalAndWait(self, millisecondsTimeout: int, cancellationToken: CancellationToken) -> bool: ...


class BarrierPostPhaseException(Exception):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, innerException: Exception): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...


class CountdownEvent(Object):
    def __init__(self, initialCount: int): ...
    @overload
    def AddCount(self) -> None: ...
    @overload
    def AddCount(self, signalCount: int) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def CurrentCount(self) -> int: ...
    @property
    def InitialCount(self) -> int: ...
    @property
    def IsSet(self) -> bool: ...
    @property
    def WaitHandle(self) -> WaitHandle: ...
    @overload
    def Reset(self) -> None: ...
    @overload
    def Reset(self, count: int) -> None: ...
    @overload
    def Signal(self) -> bool: ...
    @overload
    def Signal(self, signalCount: int) -> bool: ...
    @overload
    def TryAddCount(self) -> bool: ...
    @overload
    def TryAddCount(self, signalCount: int) -> bool: ...
    @overload
    def Wait(self) -> None: ...
    @overload
    def Wait(self, cancellationToken: CancellationToken) -> None: ...
    @overload
    def Wait(self, timeout: TimeSpan) -> bool: ...
    @overload
    def Wait(self, millisecondsTimeout: int) -> bool: ...
    @overload
    def Wait(self, timeout: TimeSpan, cancellationToken: CancellationToken) -> bool: ...
    @overload
    def Wait(self, millisecondsTimeout: int, cancellationToken: CancellationToken) -> bool: ...


class HostExecutionContext(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, state: Object): ...
    def CreateCopy(self) -> HostExecutionContext: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dispose(self, disposing: bool) -> None: ...


class HostExecutionContextManager(Object):
    def __init__(self): ...
    def Capture(self) -> HostExecutionContext: ...
    def Revert(self, previousState: Object) -> None: ...
    def SetHostExecutionContext(self, hostExecutionContext: HostExecutionContext) -> Object: ...


class LockCookie(ValueType):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, obj: LockCookie) -> bool: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(a: LockCookie, b: LockCookie) -> bool: ...
    def op_Inequality(a: LockCookie, b: LockCookie) -> bool: ...


class ReaderWriterLock(CriticalFinalizerObject):
    def __init__(self): ...
    @overload
    def AcquireReaderLock(self, millisecondsTimeout: int) -> None: ...
    @overload
    def AcquireReaderLock(self, timeout: TimeSpan) -> None: ...
    @overload
    def AcquireWriterLock(self, millisecondsTimeout: int) -> None: ...
    @overload
    def AcquireWriterLock(self, timeout: TimeSpan) -> None: ...
    def AnyWritersSince(self, seqNum: int) -> bool: ...
    def DowngradeFromWriterLock(self, lockCookie: LockCookie) -> Tuple[LockCookie]: ...
    @property
    def IsReaderLockHeld(self) -> bool: ...
    @property
    def IsWriterLockHeld(self) -> bool: ...
    @property
    def WriterSeqNum(self) -> int: ...
    def ReleaseLock(self) -> LockCookie: ...
    def ReleaseReaderLock(self) -> None: ...
    def ReleaseWriterLock(self) -> None: ...
    def RestoreLock(self, lockCookie: LockCookie) -> Tuple[LockCookie]: ...
    @overload
    def UpgradeToWriterLock(self, timeout: TimeSpan) -> LockCookie: ...
    @overload
    def UpgradeToWriterLock(self, millisecondsTimeout: int) -> LockCookie: ...
