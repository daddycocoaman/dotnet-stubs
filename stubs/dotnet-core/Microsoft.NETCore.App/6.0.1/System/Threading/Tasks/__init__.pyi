from typing import Tuple, Set, Iterable, List


class Parallel(Object):
    @overload
    def For(fromInclusive: int, toExclusive: int, body: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: Int64, toExclusive: Int64, body: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: int, toExclusive: int, body: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: Int64, toExclusive: Int64, body: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: int, toExclusive: int, parallelOptions: ParallelOptions, body: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: Int64, toExclusive: Int64, parallelOptions: ParallelOptions, body: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: int, toExclusive: int, parallelOptions: ParallelOptions, body: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: Int64, toExclusive: Int64, parallelOptions: ParallelOptions, body: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: Int64, toExclusive: Int64, localInit: Func, body: Func`4, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: int, toExclusive: int, localInit: Func, body: Func`4, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: int, toExclusive: int, parallelOptions: ParallelOptions, localInit: Func, body: Func`4, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def For(fromInclusive: Int64, toExclusive: Int64, parallelOptions: ParallelOptions, localInit: Func, body: Func`4, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: OrderablePartitioner, body: Action`3) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Iterable[TSource], body: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Partitioner, body: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Iterable[TSource], body: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Partitioner, body: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Iterable[TSource], body: Action`3) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: OrderablePartitioner, parallelOptions: ParallelOptions, body: Action`3) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Iterable[TSource], parallelOptions: ParallelOptions, body: Action`3) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Iterable[TSource], parallelOptions: ParallelOptions, body: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Iterable[TSource], parallelOptions: ParallelOptions, body: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Partitioner, parallelOptions: ParallelOptions, body: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Partitioner, parallelOptions: ParallelOptions, body: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Iterable[TSource], localInit: Func, body: Func`5, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Partitioner, localInit: Func, body: Func`4, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: OrderablePartitioner, localInit: Func, body: Func`5, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Iterable[TSource], localInit: Func, body: Func`4, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Partitioner, parallelOptions: ParallelOptions, localInit: Func, body: Func`4, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: OrderablePartitioner, parallelOptions: ParallelOptions, localInit: Func, body: Func`5, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Iterable[TSource], parallelOptions: ParallelOptions, localInit: Func, body: Func`4, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def ForEach(source: Iterable[TSource], parallelOptions: ParallelOptions, localInit: Func, body: Func`5, localFinally: Action) -> ParallelLoopResult: ...
    @overload
    def ForEachAsync(source: IAsyncEnumerable, body: Func`3) -> Task: ...
    @overload
    def ForEachAsync(source: Iterable[TSource], body: Func`3) -> Task: ...
    @overload
    def ForEachAsync(source: IAsyncEnumerable, parallelOptions: ParallelOptions, body: Func`3) -> Task: ...
    @overload
    def ForEachAsync(source: Iterable[TSource], cancellationToken: CancellationToken, body: Func`3) -> Task: ...
    @overload
    def ForEachAsync(source: Iterable[TSource], parallelOptions: ParallelOptions, body: Func`3) -> Task: ...
    @overload
    def ForEachAsync(source: IAsyncEnumerable, cancellationToken: CancellationToken, body: Func`3) -> Task: ...
    @overload
    def Invoke(actions: Set(Action)) -> None: ...
    @overload
    def Invoke(parallelOptions: ParallelOptions, actions: Set(Action)) -> None: ...


class ParallelLoopResult(ValueType):
    @property
    def IsCompleted(self) -> bool: ...
    @property
    def LowestBreakIteration(self) -> Nullable: ...


class ParallelLoopState(Object):
    def Break(self) -> None: ...
    @property
    def IsExceptional(self) -> bool: ...
    @property
    def IsStopped(self) -> bool: ...
    @property
    def LowestBreakIteration(self) -> Nullable: ...
    @property
    def ShouldExitCurrentIteration(self) -> bool: ...
    def Stop(self) -> None: ...


class ParallelOptions(Object):
    def __init__(self): ...
    @property
    def CancellationToken(self) -> CancellationToken: ...
    @property
    def MaxDegreeOfParallelism(self) -> int: ...
    @property
    def TaskScheduler(self) -> TaskScheduler: ...
    @CancellationToken.setter
    def CancellationToken(self, value: CancellationToken) -> None: ...
    @MaxDegreeOfParallelism.setter
    def MaxDegreeOfParallelism(self, value: int) -> None: ...
    @TaskScheduler.setter
    def TaskScheduler(self, value: TaskScheduler) -> None: ...
