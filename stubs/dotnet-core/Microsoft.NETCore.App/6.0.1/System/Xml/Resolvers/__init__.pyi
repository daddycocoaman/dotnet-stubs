from typing import Tuple, Set, Iterable, List


class XmlPreloadedResolver(XmlResolver):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, preloadedDtds: XmlKnownDtds): ...
    @overload
    def __init__(self, fallbackResolver: XmlResolver): ...
    @overload
    def __init__(self, fallbackResolver: XmlResolver, preloadedDtds: XmlKnownDtds): ...
    @overload
    def __init__(self, fallbackResolver: XmlResolver, preloadedDtds: XmlKnownDtds, uriComparer: IEqualityComparer): ...
    @overload
    def Add(self, uri: Uri, value: Set(Byte)) -> None: ...
    @overload
    def Add(self, uri: Uri, value: Stream) -> None: ...
    @overload
    def Add(self, uri: Uri, value: str) -> None: ...
    @overload
    def Add(self, uri: Uri, value: Set(Byte), offset: int, count: int) -> None: ...
    @property
    def PreloadedUris(self) -> Iterable[Uri]: ...
    def GetEntity(self, absoluteUri: Uri, role: str, ofObjectToReturn: Type) -> Object: ...
    def GetEntityAsync(self, absoluteUri: Uri, role: str, ofObjectToReturn: Type) -> Task: ...
    def Remove(self, uri: Uri) -> None: ...
    def ResolveUri(self, baseUri: Uri, relativeUri: str) -> Uri: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...
    def SupportsType(self, absoluteUri: Uri, type: Type) -> bool: ...
