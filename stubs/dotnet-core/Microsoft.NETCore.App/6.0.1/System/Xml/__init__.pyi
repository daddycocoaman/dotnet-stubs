__all__ = ['Resolvers','Schema','Serialization','XPath','Xsl']
from typing import Tuple, Set, Iterable, List


class ConformanceLevel:
    Auto = 0
    Fragment = 1
    Document = 2


class DtdProcessing:
    Prohibit = 0
    Ignore = 1
    Parse = 2


class EntityHandling:
    ExpandEntities = 1
    ExpandCharEntities = 2


class Formatting:
    #None = 0
    Indented = 1


class IHasXmlNode:
    def GetNode(self) -> XmlNode: ...


class IXmlLineInfo:
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    def HasLineInfo(self) -> bool: ...


class IXmlNamespaceResolver:
    def GetNamespacesInScope(self, scope: XmlNamespaceScope) -> IDictionary: ...
    def LookupNamespace(self, prefix: str) -> str: ...
    def LookupPrefix(self, namespaceName: str) -> str: ...


class NamespaceHandling:
    Default = 0
    OmitDuplicates = 1


class NameTable(XmlNameTable):
    def __init__(self): ...
    @overload
    def Add(self, key: str) -> str: ...
    @overload
    def Add(self, key: Set(Char), start: int, len: int) -> str: ...
    @overload
    def Get(self, value: str) -> str: ...
    @overload
    def Get(self, key: Set(Char), start: int, len: int) -> str: ...


class NewLineHandling:
    Replace = 0
    Entitize = 1
    #None = 2


class ReadState:
    Initial = 0
    Interactive = 1
    Error = 2
    EndOfFile = 3
    Closed = 4


class ValidationType:
    #None = 0
    Auto = 1
    DTD = 2
    XDR = 3
    Schema = 4


class WhitespaceHandling:
    All = 0
    Significant = 1
    #None = 2


class WriteState:
    Start = 0
    Prolog = 1
    Element = 2
    Attribute = 3
    Content = 4
    Closed = 5
    Error = 6


class XmlAttribute(XmlNode):
    def AppendChild(self, newChild: XmlNode) -> XmlNode: ...
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OwnerDocument(self) -> XmlDocument: ...
    @property
    def OwnerElement(self) -> XmlElement: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo: ...
    @property
    def Specified(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode: ...
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode: ...
    def PrependChild(self, newChild: XmlNode) -> XmlNode: ...
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode: ...
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode: ...
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlAttributeCollection(XmlNamedNodeMap):
    def Append(self, node: XmlAttribute) -> XmlAttribute: ...
    def CopyTo(self, array: Set(XmlAttribute), index: int) -> None: ...
    @property
    def ItemOf(self, i: int) -> XmlAttribute: ...
    @property
    def ItemOf(self, name: str) -> XmlAttribute: ...
    @property
    def ItemOf(self, localName: str, namespaceURI: str) -> XmlAttribute: ...
    def InsertAfter(self, newNode: XmlAttribute, refNode: XmlAttribute) -> XmlAttribute: ...
    def InsertBefore(self, newNode: XmlAttribute, refNode: XmlAttribute) -> XmlAttribute: ...
    def Prepend(self, node: XmlAttribute) -> XmlAttribute: ...
    def Remove(self, node: XmlAttribute) -> XmlAttribute: ...
    def RemoveAll(self) -> None: ...
    def RemoveAt(self, i: int) -> XmlAttribute: ...
    def SetNamedItem(self, node: XmlNode) -> XmlNode: ...


class XmlCDataSection(XmlCharacterData):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def PreviousText(self) -> XmlNode: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlCharacterData(XmlLinkedNode):
    def AppendData(self, strData: str) -> None: ...
    def DeleteData(self, offset: int, count: int) -> None: ...
    @property
    def Data(self) -> str: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def Length(self) -> int: ...
    @property
    def Value(self) -> str: ...
    def InsertData(self, offset: int, strData: str) -> None: ...
    def ReplaceData(self, offset: int, count: int, strData: str) -> None: ...
    @Data.setter
    def Data(self, value: str) -> None: ...
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def Substring(self, offset: int, count: int) -> str: ...


class XmlComment(XmlCharacterData):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlConvert(Object):
    def __init__(self): ...
    def DecodeName(name: str) -> str: ...
    def EncodeLocalName(name: str) -> str: ...
    def EncodeName(name: str) -> str: ...
    def EncodeNmToken(name: str) -> str: ...
    def IsNCNameChar(ch: Char) -> bool: ...
    def IsPublicIdChar(ch: Char) -> bool: ...
    def IsStartNCNameChar(ch: Char) -> bool: ...
    def IsWhitespaceChar(ch: Char) -> bool: ...
    def IsXmlChar(ch: Char) -> bool: ...
    def IsXmlSurrogatePair(lowChar: Char, highChar: Char) -> bool: ...
    def ToBoolean(s: str) -> bool: ...
    def ToByte(s: str) -> Byte: ...
    def ToChar(s: str) -> Char: ...
    @overload
    def ToDateTime(s: str, format: str) -> DateTime: ...
    @overload
    def ToDateTime(s: str, formats: Set(str)) -> DateTime: ...
    @overload
    def ToDateTime(s: str, dateTimeOption: XmlDateTimeSerializationMode) -> DateTime: ...
    @overload
    def ToDateTimeOffset(s: str) -> DateTimeOffset: ...
    @overload
    def ToDateTimeOffset(s: str, formats: Set(str)) -> DateTimeOffset: ...
    @overload
    def ToDateTimeOffset(s: str, format: str) -> DateTimeOffset: ...
    def ToDecimal(s: str) -> Decimal: ...
    def ToDouble(s: str) -> float: ...
    def ToGuid(s: str) -> Guid: ...
    def ToInt16(s: str) -> Int16: ...
    def ToInt32(s: str) -> int: ...
    def ToInt64(s: str) -> Int64: ...
    def ToSByte(s: str) -> SByte: ...
    def ToSingle(s: str) -> Single: ...
    @overload
    def ToString(value: DateTimeOffset) -> str: ...
    @overload
    def ToString(value: TimeSpan) -> str: ...
    @overload
    def ToString(value: Guid) -> str: ...
    @overload
    def ToString(value: float) -> str: ...
    @overload
    def ToString(value: Int64) -> str: ...
    @overload
    def ToString(value: UInt64) -> str: ...
    @overload
    def ToString(value: bool) -> str: ...
    @overload
    def ToString(value: Single) -> str: ...
    @overload
    def ToString(value: Decimal) -> str: ...
    @overload
    def ToString(value: SByte) -> str: ...
    @overload
    def ToString(value: Int16) -> str: ...
    @overload
    def ToString(value: int) -> str: ...
    @overload
    def ToString(value: Char) -> str: ...
    @overload
    def ToString(value: UInt16) -> str: ...
    @overload
    def ToString(value: UInt32) -> str: ...
    @overload
    def ToString(value: Byte) -> str: ...
    @overload
    def ToString(value: DateTimeOffset, format: str) -> str: ...
    @overload
    def ToString(value: DateTime, dateTimeOption: XmlDateTimeSerializationMode) -> str: ...
    @overload
    def ToString(value: DateTime, format: str) -> str: ...
    def ToTimeSpan(s: str) -> TimeSpan: ...
    def ToUInt16(s: str) -> UInt16: ...
    def ToUInt32(s: str) -> UInt32: ...
    def ToUInt64(s: str) -> UInt64: ...
    def VerifyName(name: str) -> str: ...
    def VerifyNCName(name: str) -> str: ...
    def VerifyNMTOKEN(name: str) -> str: ...
    def VerifyPublicId(publicId: str) -> str: ...
    def VerifyTOKEN(token: str) -> str: ...
    def VerifyWhitespace(content: str) -> str: ...
    def VerifyXmlChars(content: str) -> str: ...


class XmlDateTimeSerializationMode:
    Local = 0
    Utc = 1
    Unspecified = 2
    RoundtripKind = 3


class XmlDeclaration(XmlLinkedNode):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def Encoding(self) -> str: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Standalone(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Encoding.setter
    def Encoding(self, value: str) -> None: ...
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @Standalone.setter
    def Standalone(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlDocument(XmlNode):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nt: XmlNameTable): ...
    def add_NodeChanged(self, value: XmlNodeChangedEventHandler) -> None: ...
    def add_NodeChanging(self, value: XmlNodeChangedEventHandler) -> None: ...
    def add_NodeInserted(self, value: XmlNodeChangedEventHandler) -> None: ...
    def add_NodeInserting(self, value: XmlNodeChangedEventHandler) -> None: ...
    def add_NodeRemoved(self, value: XmlNodeChangedEventHandler) -> None: ...
    def add_NodeRemoving(self, value: XmlNodeChangedEventHandler) -> None: ...
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @overload
    def CreateAttribute(self, name: str) -> XmlAttribute: ...
    @overload
    def CreateAttribute(self, qualifiedName: str, namespaceURI: str) -> XmlAttribute: ...
    @overload
    def CreateAttribute(self, prefix: str, localName: str, namespaceURI: str) -> XmlAttribute: ...
    def CreateCDataSection(self, data: str) -> XmlCDataSection: ...
    def CreateComment(self, data: str) -> XmlComment: ...
    def CreateDocumentFragment(self) -> XmlDocumentFragment: ...
    def CreateDocumentType(self, name: str, publicId: str, systemId: str, internalSubset: str) -> XmlDocumentType: ...
    @overload
    def CreateElement(self, name: str) -> XmlElement: ...
    @overload
    def CreateElement(self, qualifiedName: str, namespaceURI: str) -> XmlElement: ...
    @overload
    def CreateElement(self, prefix: str, localName: str, namespaceURI: str) -> XmlElement: ...
    def CreateEntityReference(self, name: str) -> XmlEntityReference: ...
    def CreateNavigator(self) -> XPathNavigator: ...
    @overload
    def CreateNode(self, type: XmlNodeType, name: str, namespaceURI: str) -> XmlNode: ...
    @overload
    def CreateNode(self, nodeTypeString: str, name: str, namespaceURI: str) -> XmlNode: ...
    @overload
    def CreateNode(self, type: XmlNodeType, prefix: str, name: str, namespaceURI: str) -> XmlNode: ...
    def CreateProcessingInstruction(self, target: str, data: str) -> XmlProcessingInstruction: ...
    def CreateSignificantWhitespace(self, text: str) -> XmlSignificantWhitespace: ...
    def CreateTextNode(self, text: str) -> XmlText: ...
    def CreateWhitespace(self, text: str) -> XmlWhitespace: ...
    def CreateXmlDeclaration(self, version: str, encoding: str, standalone: str) -> XmlDeclaration: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def DocumentElement(self) -> XmlElement: ...
    @property
    def DocumentType(self) -> XmlDocumentType: ...
    @property
    def Implementation(self) -> XmlImplementation: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OwnerDocument(self) -> XmlDocument: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def PreserveWhitespace(self) -> bool: ...
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo: ...
    @property
    def Schemas(self) -> XmlSchemaSet: ...
    def GetElementById(self, elementId: str) -> XmlElement: ...
    @overload
    def GetElementsByTagName(self, name: str) -> XmlNodeList: ...
    @overload
    def GetElementsByTagName(self, localName: str, namespaceURI: str) -> XmlNodeList: ...
    def ImportNode(self, node: XmlNode, deep: bool) -> XmlNode: ...
    @overload
    def Load(self, inStream: Stream) -> None: ...
    @overload
    def Load(self, txtReader: TextReader) -> None: ...
    @overload
    def Load(self, reader: XmlReader) -> None: ...
    @overload
    def Load(self, filename: str) -> None: ...
    def LoadXml(self, xml: str) -> None: ...
    def ReadNode(self, reader: XmlReader) -> XmlNode: ...
    def remove_NodeChanged(self, value: XmlNodeChangedEventHandler) -> None: ...
    def remove_NodeChanging(self, value: XmlNodeChangedEventHandler) -> None: ...
    def remove_NodeInserted(self, value: XmlNodeChangedEventHandler) -> None: ...
    def remove_NodeInserting(self, value: XmlNodeChangedEventHandler) -> None: ...
    def remove_NodeRemoved(self, value: XmlNodeChangedEventHandler) -> None: ...
    def remove_NodeRemoving(self, value: XmlNodeChangedEventHandler) -> None: ...
    @overload
    def Save(self, w: XmlWriter) -> None: ...
    @overload
    def Save(self, outStream: Stream) -> None: ...
    @overload
    def Save(self, filename: str) -> None: ...
    @overload
    def Save(self, writer: TextWriter) -> None: ...
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @PreserveWhitespace.setter
    def PreserveWhitespace(self, value: bool) -> None: ...
    @Schemas.setter
    def Schemas(self, value: XmlSchemaSet) -> None: ...
    @XmlResolver.setter
    def XmlResolver(self, value: XmlResolver) -> None: ...
    @overload
    def Validate(self, validationEventHandler: ValidationEventHandler) -> None: ...
    @overload
    def Validate(self, validationEventHandler: ValidationEventHandler, nodeToValidate: XmlNode) -> None: ...
    def WriteContentTo(self, xw: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlDocumentFragment(XmlNode):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OwnerDocument(self) -> XmlDocument: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlDocumentType(XmlLinkedNode):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def Entities(self) -> XmlNamedNodeMap: ...
    @property
    def InternalSubset(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Notations(self) -> XmlNamedNodeMap: ...
    @property
    def PublicId(self) -> str: ...
    @property
    def SystemId(self) -> str: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlElement(XmlLinkedNode):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def Attributes(self) -> XmlAttributeCollection: ...
    @property
    def HasAttributes(self) -> bool: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NextSibling(self) -> XmlNode: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OwnerDocument(self) -> XmlDocument: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo: ...
    @overload
    def GetAttribute(self, name: str) -> str: ...
    @overload
    def GetAttribute(self, localName: str, namespaceURI: str) -> str: ...
    @overload
    def GetAttributeNode(self, name: str) -> XmlAttribute: ...
    @overload
    def GetAttributeNode(self, localName: str, namespaceURI: str) -> XmlAttribute: ...
    @overload
    def GetElementsByTagName(self, name: str) -> XmlNodeList: ...
    @overload
    def GetElementsByTagName(self, localName: str, namespaceURI: str) -> XmlNodeList: ...
    @overload
    def HasAttribute(self, name: str) -> bool: ...
    @overload
    def HasAttribute(self, localName: str, namespaceURI: str) -> bool: ...
    def RemoveAll(self) -> None: ...
    def RemoveAllAttributes(self) -> None: ...
    @overload
    def RemoveAttribute(self, name: str) -> None: ...
    @overload
    def RemoveAttribute(self, localName: str, namespaceURI: str) -> None: ...
    def RemoveAttributeAt(self, i: int) -> XmlNode: ...
    @overload
    def RemoveAttributeNode(self, oldAttr: XmlAttribute) -> XmlAttribute: ...
    @overload
    def RemoveAttributeNode(self, localName: str, namespaceURI: str) -> XmlAttribute: ...
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @IsEmpty.setter
    def IsEmpty(self, value: bool) -> None: ...
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @overload
    def SetAttribute(self, name: str, value: str) -> None: ...
    @overload
    def SetAttribute(self, localName: str, namespaceURI: str, value: str) -> str: ...
    @overload
    def SetAttributeNode(self, newAttr: XmlAttribute) -> XmlAttribute: ...
    @overload
    def SetAttributeNode(self, localName: str, namespaceURI: str) -> XmlAttribute: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlEntity(XmlNode):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def NotationName(self) -> str: ...
    @property
    def OuterXml(self) -> str: ...
    @property
    def PublicId(self) -> str: ...
    @property
    def SystemId(self) -> str: ...
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlEntityReference(XmlLinkedNode):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlException(SystemException):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, innerException: Exception): ...
    @overload
    def __init__(self, message: str, innerException: Exception, lineNumber: int, linePosition: int): ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def SourceUri(self) -> str: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...


class XmlImplementation(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nt: XmlNameTable): ...
    def CreateDocument(self) -> XmlDocument: ...
    def HasFeature(self, strFeature: str, strVersion: str) -> bool: ...


class XmlLinkedNode(XmlNode):
    @property
    def NextSibling(self) -> XmlNode: ...
    @property
    def PreviousSibling(self) -> XmlNode: ...


class XmlNamedNodeMap(Object):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetNamedItem(self, name: str) -> XmlNode: ...
    @overload
    def GetNamedItem(self, localName: str, namespaceURI: str) -> XmlNode: ...
    def Item(self, index: int) -> XmlNode: ...
    @overload
    def RemoveNamedItem(self, name: str) -> XmlNode: ...
    @overload
    def RemoveNamedItem(self, localName: str, namespaceURI: str) -> XmlNode: ...
    def SetNamedItem(self, node: XmlNode) -> XmlNode: ...


class XmlNamespaceManager(Object):
    def __init__(self, nameTable: XmlNameTable): ...
    def AddNamespace(self, prefix: str, uri: str) -> None: ...
    @property
    def DefaultNamespace(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetNamespacesInScope(self, scope: XmlNamespaceScope) -> IDictionary: ...
    def HasNamespace(self, prefix: str) -> bool: ...
    def LookupNamespace(self, prefix: str) -> str: ...
    def LookupPrefix(self, uri: str) -> str: ...
    def PopScope(self) -> bool: ...
    def PushScope(self) -> None: ...
    def RemoveNamespace(self, prefix: str, uri: str) -> None: ...


class XmlNamespaceScope:
    All = 0
    ExcludeXml = 1
    Local = 2


class XmlNameTable(Object):
    @overload
    def Add(self, array: str) -> str: ...
    @overload
    def Add(self, array: Set(Char), offset: int, length: int) -> str: ...
    @overload
    def Get(self, array: str) -> str: ...
    @overload
    def Get(self, array: Set(Char), offset: int, length: int) -> str: ...


class XmlNode(Object):
    def AppendChild(self, newChild: XmlNode) -> XmlNode: ...
    def Clone(self) -> XmlNode: ...
    def CloneNode(self, deep: bool) -> XmlNode: ...
    def CreateNavigator(self) -> XPathNavigator: ...
    @property
    def Attributes(self) -> XmlAttributeCollection: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def ChildNodes(self) -> XmlNodeList: ...
    @property
    def FirstChild(self) -> XmlNode: ...
    @property
    def HasChildNodes(self) -> bool: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, name: str) -> XmlElement: ...
    @property
    def Item(self, localname: str, ns: str) -> XmlElement: ...
    @property
    def LastChild(self) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NextSibling(self) -> XmlNode: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OuterXml(self) -> str: ...
    @property
    def OwnerDocument(self) -> XmlDocument: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def PreviousSibling(self) -> XmlNode: ...
    @property
    def PreviousText(self) -> XmlNode: ...
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo: ...
    @property
    def Value(self) -> str: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetNamespaceOfPrefix(self, prefix: str) -> str: ...
    def GetPrefixOfNamespace(self, namespaceURI: str) -> str: ...
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode: ...
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode: ...
    def Normalize(self) -> None: ...
    def PrependChild(self, newChild: XmlNode) -> XmlNode: ...
    def RemoveAll(self) -> None: ...
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode: ...
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode: ...
    @overload
    def SelectNodes(self, xpath: str) -> XmlNodeList: ...
    @overload
    def SelectNodes(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNodeList: ...
    @overload
    def SelectSingleNode(self, xpath: str) -> XmlNode: ...
    @overload
    def SelectSingleNode(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNode: ...
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def Supports(self, feature: str, version: str) -> bool: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlNodeChangedAction:
    Insert = 0
    Remove = 1
    Change = 2


class XmlNodeChangedEventArgs(EventArgs):
    def __init__(self, node: XmlNode, oldParent: XmlNode, newParent: XmlNode, oldValue: str, newValue: str, action: XmlNodeChangedAction): ...
    @property
    def Action(self) -> XmlNodeChangedAction: ...
    @property
    def NewParent(self) -> XmlNode: ...
    @property
    def NewValue(self) -> str: ...
    @property
    def Node(self) -> XmlNode: ...
    @property
    def OldParent(self) -> XmlNode: ...
    @property
    def OldValue(self) -> str: ...


class XmlNodeChangedEventHandler(MulticastDelegate):
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: XmlNodeChangedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: XmlNodeChangedEventArgs) -> None: ...


class XmlNodeList(Object):
    @property
    def Count(self) -> int: ...
    @property
    def ItemOf(self, i: int) -> XmlNode: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Item(self, index: int) -> XmlNode: ...


class XmlNodeOrder:
    Before = 0
    After = 1
    Same = 2
    Unknown = 3


class XmlNodeReader(XmlReader):
    def __init__(self, node: XmlNode): ...
    def Close(self) -> None: ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def CanReadBinaryContent(self) -> bool: ...
    @property
    def CanResolveEntity(self) -> bool: ...
    @property
    def Depth(self) -> int: ...
    @property
    def EOF(self) -> bool: ...
    @property
    def HasAttributes(self) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsEmptyElement(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def ReadState(self) -> ReadState: ...
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo: ...
    @property
    def Value(self) -> str: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @overload
    def GetAttribute(self, name: str) -> str: ...
    @overload
    def GetAttribute(self, attributeIndex: int) -> str: ...
    @overload
    def GetAttribute(self, name: str, namespaceURI: str) -> str: ...
    def LookupNamespace(self, prefix: str) -> str: ...
    @overload
    def MoveToAttribute(self, attributeIndex: int) -> None: ...
    @overload
    def MoveToAttribute(self, name: str) -> bool: ...
    @overload
    def MoveToAttribute(self, name: str, namespaceURI: str) -> bool: ...
    def MoveToElement(self) -> bool: ...
    def MoveToFirstAttribute(self) -> bool: ...
    def MoveToNextAttribute(self) -> bool: ...
    def Read(self) -> bool: ...
    def ReadAttributeValue(self) -> bool: ...
    def ReadContentAsBase64(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadContentAsBinHex(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadElementContentAsBase64(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadElementContentAsBinHex(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadString(self) -> str: ...
    def ResolveEntity(self) -> None: ...
    def Skip(self) -> None: ...


class XmlNodeType:
    #None = 0
    Element = 1
    Attribute = 2
    Text = 3
    CDATA = 4
    EntityReference = 5
    Entity = 6
    ProcessingInstruction = 7
    Comment = 8
    Document = 9
    DocumentType = 10
    DocumentFragment = 11
    Notation = 12
    Whitespace = 13
    SignificantWhitespace = 14
    EndElement = 15
    EndEntity = 16
    XmlDeclaration = 17


class XmlNotation(XmlNode):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def InnerXml(self) -> str: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def OuterXml(self) -> str: ...
    @property
    def PublicId(self) -> str: ...
    @property
    def SystemId(self) -> str: ...
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlOutputMethod:
    Xml = 0
    Html = 1
    Text = 2
    AutoDetect = 3


class XmlParserContext(Object):
    @overload
    def __init__(self, nt: XmlNameTable, nsMgr: XmlNamespaceManager, xmlLang: str, xmlSpace: XmlSpace): ...
    @overload
    def __init__(self, nt: XmlNameTable, nsMgr: XmlNamespaceManager, xmlLang: str, xmlSpace: XmlSpace, enc: Encoding): ...
    @overload
    def __init__(self, nt: XmlNameTable, nsMgr: XmlNamespaceManager, docTypeName: str, pubId: str, sysId: str, internalSubset: str, baseURI: str, xmlLang: str, xmlSpace: XmlSpace): ...
    @overload
    def __init__(self, nt: XmlNameTable, nsMgr: XmlNamespaceManager, docTypeName: str, pubId: str, sysId: str, internalSubset: str, baseURI: str, xmlLang: str, xmlSpace: XmlSpace, enc: Encoding): ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def DocTypeName(self) -> str: ...
    @property
    def Encoding(self) -> Encoding: ...
    @property
    def InternalSubset(self) -> str: ...
    @property
    def NamespaceManager(self) -> XmlNamespaceManager: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def PublicId(self) -> str: ...
    @property
    def SystemId(self) -> str: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @BaseURI.setter
    def BaseURI(self, value: str) -> None: ...
    @DocTypeName.setter
    def DocTypeName(self, value: str) -> None: ...
    @Encoding.setter
    def Encoding(self, value: Encoding) -> None: ...
    @InternalSubset.setter
    def InternalSubset(self, value: str) -> None: ...
    @NamespaceManager.setter
    def NamespaceManager(self, value: XmlNamespaceManager) -> None: ...
    @NameTable.setter
    def NameTable(self, value: XmlNameTable) -> None: ...
    @PublicId.setter
    def PublicId(self, value: str) -> None: ...
    @SystemId.setter
    def SystemId(self, value: str) -> None: ...
    @XmlLang.setter
    def XmlLang(self, value: str) -> None: ...
    @XmlSpace.setter
    def XmlSpace(self, value: XmlSpace) -> None: ...


class XmlProcessingInstruction(XmlLinkedNode):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def Data(self) -> str: ...
    @property
    def InnerText(self) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Target(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Data.setter
    def Data(self, value: str) -> None: ...
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlQualifiedName(Object):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, ns: str): ...
    def Equals(self, other: Object) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespace(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def op_Equality(a: XmlQualifiedName, b: XmlQualifiedName) -> bool: ...
    def op_Inequality(a: XmlQualifiedName, b: XmlQualifiedName) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(name: str, ns: str) -> str: ...


class XmlReader(Object):
    def Close(self) -> None: ...
    @overload
    def Create(inputUri: str) -> XmlReader: ...
    @overload
    def Create(input: Stream) -> XmlReader: ...
    @overload
    def Create(input: TextReader) -> XmlReader: ...
    @overload
    def Create(inputUri: str, settings: XmlReaderSettings) -> XmlReader: ...
    @overload
    def Create(input: Stream, settings: XmlReaderSettings) -> XmlReader: ...
    @overload
    def Create(input: TextReader, settings: XmlReaderSettings) -> XmlReader: ...
    @overload
    def Create(reader: XmlReader, settings: XmlReaderSettings) -> XmlReader: ...
    @overload
    def Create(inputUri: str, settings: XmlReaderSettings, inputContext: XmlParserContext) -> XmlReader: ...
    @overload
    def Create(input: Stream, settings: XmlReaderSettings, baseUri: str) -> XmlReader: ...
    @overload
    def Create(input: Stream, settings: XmlReaderSettings, inputContext: XmlParserContext) -> XmlReader: ...
    @overload
    def Create(input: TextReader, settings: XmlReaderSettings, baseUri: str) -> XmlReader: ...
    @overload
    def Create(input: TextReader, settings: XmlReaderSettings, inputContext: XmlParserContext) -> XmlReader: ...
    def Dispose(self) -> None: ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def CanReadBinaryContent(self) -> bool: ...
    @property
    def CanReadValueChunk(self) -> bool: ...
    @property
    def CanResolveEntity(self) -> bool: ...
    @property
    def Depth(self) -> int: ...
    @property
    def EOF(self) -> bool: ...
    @property
    def HasAttributes(self) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsEmptyElement(self) -> bool: ...
    @property
    def Item(self, name: str) -> str: ...
    @property
    def Item(self, i: int) -> str: ...
    @property
    def Item(self, name: str, namespaceURI: str) -> str: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def QuoteChar(self) -> Char: ...
    @property
    def ReadState(self) -> ReadState: ...
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo: ...
    @property
    def Settings(self) -> XmlReaderSettings: ...
    @property
    def Value(self) -> str: ...
    @property
    def ValueType(self) -> Type: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @overload
    def GetAttribute(self, i: int) -> str: ...
    @overload
    def GetAttribute(self, name: str) -> str: ...
    @overload
    def GetAttribute(self, name: str, namespaceURI: str) -> str: ...
    def GetValueAsync(self) -> Task: ...
    def IsName(str: str) -> bool: ...
    def IsNameToken(str: str) -> bool: ...
    @overload
    def IsStartElement(self) -> bool: ...
    @overload
    def IsStartElement(self, name: str) -> bool: ...
    @overload
    def IsStartElement(self, localname: str, ns: str) -> bool: ...
    def LookupNamespace(self, prefix: str) -> str: ...
    @overload
    def MoveToAttribute(self, name: str) -> bool: ...
    @overload
    def MoveToAttribute(self, i: int) -> None: ...
    @overload
    def MoveToAttribute(self, name: str, ns: str) -> bool: ...
    def MoveToContent(self) -> XmlNodeType: ...
    def MoveToContentAsync(self) -> Task: ...
    def MoveToElement(self) -> bool: ...
    def MoveToFirstAttribute(self) -> bool: ...
    def MoveToNextAttribute(self) -> bool: ...
    def Read(self) -> bool: ...
    def ReadAsync(self) -> Task: ...
    def ReadAttributeValue(self) -> bool: ...
    def ReadContentAs(self, returnType: Type, namespaceResolver: IXmlNamespaceResolver) -> Object: ...
    def ReadContentAsAsync(self, returnType: Type, namespaceResolver: IXmlNamespaceResolver) -> Task: ...
    def ReadContentAsBase64(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadContentAsBase64Async(self, buffer: Set(Byte), index: int, count: int) -> Task: ...
    def ReadContentAsBinHex(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadContentAsBinHexAsync(self, buffer: Set(Byte), index: int, count: int) -> Task: ...
    def ReadContentAsBoolean(self) -> bool: ...
    def ReadContentAsDateTime(self) -> DateTime: ...
    def ReadContentAsDateTimeOffset(self) -> DateTimeOffset: ...
    def ReadContentAsDecimal(self) -> Decimal: ...
    def ReadContentAsDouble(self) -> float: ...
    def ReadContentAsFloat(self) -> Single: ...
    def ReadContentAsInt(self) -> int: ...
    def ReadContentAsLong(self) -> Int64: ...
    def ReadContentAsObject(self) -> Object: ...
    def ReadContentAsObjectAsync(self) -> Task: ...
    def ReadContentAsString(self) -> str: ...
    def ReadContentAsStringAsync(self) -> Task: ...
    @overload
    def ReadElementContentAs(self, returnType: Type, namespaceResolver: IXmlNamespaceResolver) -> Object: ...
    @overload
    def ReadElementContentAs(self, returnType: Type, namespaceResolver: IXmlNamespaceResolver, localName: str, namespaceURI: str) -> Object: ...
    def ReadElementContentAsAsync(self, returnType: Type, namespaceResolver: IXmlNamespaceResolver) -> Task: ...
    def ReadElementContentAsBase64(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadElementContentAsBase64Async(self, buffer: Set(Byte), index: int, count: int) -> Task: ...
    def ReadElementContentAsBinHex(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadElementContentAsBinHexAsync(self, buffer: Set(Byte), index: int, count: int) -> Task: ...
    @overload
    def ReadElementContentAsBoolean(self) -> bool: ...
    @overload
    def ReadElementContentAsBoolean(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def ReadElementContentAsDateTime(self) -> DateTime: ...
    @overload
    def ReadElementContentAsDateTime(self, localName: str, namespaceURI: str) -> DateTime: ...
    @overload
    def ReadElementContentAsDecimal(self) -> Decimal: ...
    @overload
    def ReadElementContentAsDecimal(self, localName: str, namespaceURI: str) -> Decimal: ...
    @overload
    def ReadElementContentAsDouble(self) -> float: ...
    @overload
    def ReadElementContentAsDouble(self, localName: str, namespaceURI: str) -> float: ...
    @overload
    def ReadElementContentAsFloat(self) -> Single: ...
    @overload
    def ReadElementContentAsFloat(self, localName: str, namespaceURI: str) -> Single: ...
    @overload
    def ReadElementContentAsInt(self) -> int: ...
    @overload
    def ReadElementContentAsInt(self, localName: str, namespaceURI: str) -> int: ...
    @overload
    def ReadElementContentAsLong(self) -> Int64: ...
    @overload
    def ReadElementContentAsLong(self, localName: str, namespaceURI: str) -> Int64: ...
    @overload
    def ReadElementContentAsObject(self) -> Object: ...
    @overload
    def ReadElementContentAsObject(self, localName: str, namespaceURI: str) -> Object: ...
    def ReadElementContentAsObjectAsync(self) -> Task: ...
    @overload
    def ReadElementContentAsString(self) -> str: ...
    @overload
    def ReadElementContentAsString(self, localName: str, namespaceURI: str) -> str: ...
    def ReadElementContentAsStringAsync(self) -> Task: ...
    @overload
    def ReadElementString(self) -> str: ...
    @overload
    def ReadElementString(self, name: str) -> str: ...
    @overload
    def ReadElementString(self, localname: str, ns: str) -> str: ...
    def ReadEndElement(self) -> None: ...
    def ReadInnerXml(self) -> str: ...
    def ReadInnerXmlAsync(self) -> Task: ...
    def ReadOuterXml(self) -> str: ...
    def ReadOuterXmlAsync(self) -> Task: ...
    @overload
    def ReadStartElement(self) -> None: ...
    @overload
    def ReadStartElement(self, name: str) -> None: ...
    @overload
    def ReadStartElement(self, localname: str, ns: str) -> None: ...
    def ReadString(self) -> str: ...
    def ReadSubtree(self) -> XmlReader: ...
    @overload
    def ReadToDescendant(self, name: str) -> bool: ...
    @overload
    def ReadToDescendant(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def ReadToFollowing(self, name: str) -> bool: ...
    @overload
    def ReadToFollowing(self, localName: str, namespaceURI: str) -> bool: ...
    @overload
    def ReadToNextSibling(self, name: str) -> bool: ...
    @overload
    def ReadToNextSibling(self, localName: str, namespaceURI: str) -> bool: ...
    def ReadValueChunk(self, buffer: Set(Char), index: int, count: int) -> int: ...
    def ReadValueChunkAsync(self, buffer: Set(Char), index: int, count: int) -> Task: ...
    def ResolveEntity(self) -> None: ...
    def Skip(self) -> None: ...
    def SkipAsync(self) -> Task: ...


class XmlReaderSettings(Object):
    def __init__(self): ...
    def add_ValidationEventHandler(self, value: ValidationEventHandler) -> None: ...
    def Clone(self) -> XmlReaderSettings: ...
    @property
    def Async(self) -> bool: ...
    @property
    def CheckCharacters(self) -> bool: ...
    @property
    def CloseInput(self) -> bool: ...
    @property
    def ConformanceLevel(self) -> ConformanceLevel: ...
    @property
    def DtdProcessing(self) -> DtdProcessing: ...
    @property
    def IgnoreComments(self) -> bool: ...
    @property
    def IgnoreProcessingInstructions(self) -> bool: ...
    @property
    def IgnoreWhitespace(self) -> bool: ...
    @property
    def LineNumberOffset(self) -> int: ...
    @property
    def LinePositionOffset(self) -> int: ...
    @property
    def MaxCharactersFromEntities(self) -> Int64: ...
    @property
    def MaxCharactersInDocument(self) -> Int64: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def ProhibitDtd(self) -> bool: ...
    @property
    def Schemas(self) -> XmlSchemaSet: ...
    @property
    def ValidationFlags(self) -> XmlSchemaValidationFlags: ...
    @property
    def ValidationType(self) -> ValidationType: ...
    def remove_ValidationEventHandler(self, value: ValidationEventHandler) -> None: ...
    def Reset(self) -> None: ...
    @Async.setter
    def Async(self, value: bool) -> None: ...
    @CheckCharacters.setter
    def CheckCharacters(self, value: bool) -> None: ...
    @CloseInput.setter
    def CloseInput(self, value: bool) -> None: ...
    @ConformanceLevel.setter
    def ConformanceLevel(self, value: ConformanceLevel) -> None: ...
    @DtdProcessing.setter
    def DtdProcessing(self, value: DtdProcessing) -> None: ...
    @IgnoreComments.setter
    def IgnoreComments(self, value: bool) -> None: ...
    @IgnoreProcessingInstructions.setter
    def IgnoreProcessingInstructions(self, value: bool) -> None: ...
    @IgnoreWhitespace.setter
    def IgnoreWhitespace(self, value: bool) -> None: ...
    @LineNumberOffset.setter
    def LineNumberOffset(self, value: int) -> None: ...
    @LinePositionOffset.setter
    def LinePositionOffset(self, value: int) -> None: ...
    @MaxCharactersFromEntities.setter
    def MaxCharactersFromEntities(self, value: Int64) -> None: ...
    @MaxCharactersInDocument.setter
    def MaxCharactersInDocument(self, value: Int64) -> None: ...
    @NameTable.setter
    def NameTable(self, value: XmlNameTable) -> None: ...
    @ProhibitDtd.setter
    def ProhibitDtd(self, value: bool) -> None: ...
    @Schemas.setter
    def Schemas(self, value: XmlSchemaSet) -> None: ...
    @ValidationFlags.setter
    def ValidationFlags(self, value: XmlSchemaValidationFlags) -> None: ...
    @ValidationType.setter
    def ValidationType(self, value: ValidationType) -> None: ...
    @XmlResolver.setter
    def XmlResolver(self, value: XmlResolver) -> None: ...


class XmlResolver(Object):
    def GetEntity(self, absoluteUri: Uri, role: str, ofObjectToReturn: Type) -> Object: ...
    def GetEntityAsync(self, absoluteUri: Uri, role: str, ofObjectToReturn: Type) -> Task: ...
    def ResolveUri(self, baseUri: Uri, relativeUri: str) -> Uri: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...
    def SupportsType(self, absoluteUri: Uri, type: Type) -> bool: ...


class XmlSecureResolver(XmlResolver):
    def __init__(self, resolver: XmlResolver, securityUrl: str): ...
    def GetEntity(self, absoluteUri: Uri, role: str, ofObjectToReturn: Type) -> Object: ...
    def GetEntityAsync(self, absoluteUri: Uri, role: str, ofObjectToReturn: Type) -> Task: ...
    def ResolveUri(self, baseUri: Uri, relativeUri: str) -> Uri: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...


class XmlSignificantWhitespace(XmlCharacterData):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def PreviousText(self) -> XmlNode: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlSpace:
    #None = 0
    Default = 1
    Preserve = 2


class XmlText(XmlCharacterData):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def PreviousText(self) -> XmlNode: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def SplitText(self, offset: int) -> XmlText: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlTextReader(XmlReader):
    @overload
    def __init__(self, input: Stream): ...
    @overload
    def __init__(self, input: TextReader): ...
    @overload
    def __init__(self, url: str): ...
    @overload
    def __init__(self, url: str, input: Stream): ...
    @overload
    def __init__(self, input: Stream, nt: XmlNameTable): ...
    @overload
    def __init__(self, url: str, input: TextReader): ...
    @overload
    def __init__(self, input: TextReader, nt: XmlNameTable): ...
    @overload
    def __init__(self, url: str, nt: XmlNameTable): ...
    @overload
    def __init__(self, url: str, input: Stream, nt: XmlNameTable): ...
    @overload
    def __init__(self, url: str, input: TextReader, nt: XmlNameTable): ...
    @overload
    def __init__(self, xmlFragment: Stream, fragType: XmlNodeType, context: XmlParserContext): ...
    @overload
    def __init__(self, xmlFragment: str, fragType: XmlNodeType, context: XmlParserContext): ...
    def Close(self) -> None: ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def BaseURI(self) -> str: ...
    @property
    def CanReadBinaryContent(self) -> bool: ...
    @property
    def CanReadValueChunk(self) -> bool: ...
    @property
    def CanResolveEntity(self) -> bool: ...
    @property
    def Depth(self) -> int: ...
    @property
    def DtdProcessing(self) -> DtdProcessing: ...
    @property
    def Encoding(self) -> Encoding: ...
    @property
    def EntityHandling(self) -> EntityHandling: ...
    @property
    def EOF(self) -> bool: ...
    @property
    def HasValue(self) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsEmptyElement(self) -> bool: ...
    @property
    def LineNumber(self) -> int: ...
    @property
    def LinePosition(self) -> int: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Namespaces(self) -> bool: ...
    @property
    def NamespaceURI(self) -> str: ...
    @property
    def NameTable(self) -> XmlNameTable: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def Normalization(self) -> bool: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def ProhibitDtd(self) -> bool: ...
    @property
    def QuoteChar(self) -> Char: ...
    @property
    def ReadState(self) -> ReadState: ...
    @property
    def Value(self) -> str: ...
    @property
    def WhitespaceHandling(self) -> WhitespaceHandling: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    @overload
    def GetAttribute(self, name: str) -> str: ...
    @overload
    def GetAttribute(self, i: int) -> str: ...
    @overload
    def GetAttribute(self, localName: str, namespaceURI: str) -> str: ...
    def GetNamespacesInScope(self, scope: XmlNamespaceScope) -> IDictionary: ...
    def GetRemainder(self) -> TextReader: ...
    def HasLineInfo(self) -> bool: ...
    def LookupNamespace(self, prefix: str) -> str: ...
    @overload
    def MoveToAttribute(self, i: int) -> None: ...
    @overload
    def MoveToAttribute(self, name: str) -> bool: ...
    @overload
    def MoveToAttribute(self, localName: str, namespaceURI: str) -> bool: ...
    def MoveToElement(self) -> bool: ...
    def MoveToFirstAttribute(self) -> bool: ...
    def MoveToNextAttribute(self) -> bool: ...
    def Read(self) -> bool: ...
    def ReadAttributeValue(self) -> bool: ...
    def ReadBase64(self, array: Set(Byte), offset: int, len: int) -> int: ...
    def ReadBinHex(self, array: Set(Byte), offset: int, len: int) -> int: ...
    def ReadChars(self, buffer: Set(Char), index: int, count: int) -> int: ...
    def ReadContentAsBase64(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadContentAsBinHex(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadElementContentAsBase64(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadElementContentAsBinHex(self, buffer: Set(Byte), index: int, count: int) -> int: ...
    def ReadString(self) -> str: ...
    def ResetState(self) -> None: ...
    def ResolveEntity(self) -> None: ...
    @DtdProcessing.setter
    def DtdProcessing(self, value: DtdProcessing) -> None: ...
    @EntityHandling.setter
    def EntityHandling(self, value: EntityHandling) -> None: ...
    @Namespaces.setter
    def Namespaces(self, value: bool) -> None: ...
    @Normalization.setter
    def Normalization(self, value: bool) -> None: ...
    @ProhibitDtd.setter
    def ProhibitDtd(self, value: bool) -> None: ...
    @WhitespaceHandling.setter
    def WhitespaceHandling(self, value: WhitespaceHandling) -> None: ...
    @XmlResolver.setter
    def XmlResolver(self, value: XmlResolver) -> None: ...
    def Skip(self) -> None: ...


class XmlTextWriter(XmlWriter):
    @overload
    def __init__(self, w: TextWriter): ...
    @overload
    def __init__(self, filename: str, encoding: Encoding): ...
    @overload
    def __init__(self, w: Stream, encoding: Encoding): ...
    def Close(self) -> None: ...
    def Flush(self) -> None: ...
    @property
    def BaseStream(self) -> Stream: ...
    @property
    def Formatting(self) -> Formatting: ...
    @property
    def Indentation(self) -> int: ...
    @property
    def IndentChar(self) -> Char: ...
    @property
    def Namespaces(self) -> bool: ...
    @property
    def QuoteChar(self) -> Char: ...
    @property
    def WriteState(self) -> WriteState: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    def LookupPrefix(self, ns: str) -> str: ...
    @Formatting.setter
    def Formatting(self, value: Formatting) -> None: ...
    @Indentation.setter
    def Indentation(self, value: int) -> None: ...
    @IndentChar.setter
    def IndentChar(self, value: Char) -> None: ...
    @Namespaces.setter
    def Namespaces(self, value: bool) -> None: ...
    @QuoteChar.setter
    def QuoteChar(self, value: Char) -> None: ...
    def WriteBase64(self, buffer: Set(Byte), index: int, count: int) -> None: ...
    def WriteBinHex(self, buffer: Set(Byte), index: int, count: int) -> None: ...
    def WriteCData(self, text: str) -> None: ...
    def WriteCharEntity(self, ch: Char) -> None: ...
    def WriteChars(self, buffer: Set(Char), index: int, count: int) -> None: ...
    def WriteComment(self, text: str) -> None: ...
    def WriteDocType(self, name: str, pubid: str, sysid: str, subset: str) -> None: ...
    def WriteEndAttribute(self) -> None: ...
    def WriteEndDocument(self) -> None: ...
    def WriteEndElement(self) -> None: ...
    def WriteEntityRef(self, name: str) -> None: ...
    def WriteFullEndElement(self) -> None: ...
    def WriteName(self, name: str) -> None: ...
    def WriteNmToken(self, name: str) -> None: ...
    def WriteProcessingInstruction(self, name: str, text: str) -> None: ...
    def WriteQualifiedName(self, localName: str, ns: str) -> None: ...
    @overload
    def WriteRaw(self, data: str) -> None: ...
    @overload
    def WriteRaw(self, buffer: Set(Char), index: int, count: int) -> None: ...
    @overload
    def WriteStartAttribute(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartDocument(self) -> None: ...
    @overload
    def WriteStartDocument(self, standalone: bool) -> None: ...
    @overload
    def WriteStartElement(self, prefix: str, localName: str, ns: str) -> None: ...
    def WriteString(self, text: str) -> None: ...
    def WriteSurrogateCharEntity(self, lowChar: Char, highChar: Char) -> None: ...
    def WriteWhitespace(self, ws: str) -> None: ...


class XmlTokenizedType:
    CDATA = 0
    ID = 1
    IDREF = 2
    IDREFS = 3
    ENTITY = 4
    ENTITIES = 5
    NMTOKEN = 6
    NMTOKENS = 7
    NOTATION = 8
    ENUMERATION = 9
    QName = 10
    NCName = 11
    #None = 12


class XmlUrlResolver(XmlResolver):
    def __init__(self): ...
    def GetEntity(self, absoluteUri: Uri, role: str, ofObjectToReturn: Type) -> Object: ...
    def GetEntityAsync(self, absoluteUri: Uri, role: str, ofObjectToReturn: Type) -> Task: ...
    def ResolveUri(self, baseUri: Uri, relativeUri: str) -> Uri: ...
    @CachePolicy.setter
    def CachePolicy(self, value: RequestCachePolicy) -> None: ...
    @Credentials.setter
    def Credentials(self, value: ICredentials) -> None: ...
    @Proxy.setter
    def Proxy(self, value: IWebProxy) -> None: ...


class XmlWhitespace(XmlCharacterData):
    def CloneNode(self, deep: bool) -> XmlNode: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NodeType(self) -> XmlNodeType: ...
    @property
    def ParentNode(self) -> XmlNode: ...
    @property
    def PreviousText(self) -> XmlNode: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    def WriteContentTo(self, w: XmlWriter) -> None: ...
    def WriteTo(self, w: XmlWriter) -> None: ...


class XmlWriter(Object):
    def Close(self) -> None: ...
    @overload
    def Create(output: XmlWriter) -> XmlWriter: ...
    @overload
    def Create(output: StringBuilder) -> XmlWriter: ...
    @overload
    def Create(output: TextWriter) -> XmlWriter: ...
    @overload
    def Create(output: Stream) -> XmlWriter: ...
    @overload
    def Create(outputFileName: str) -> XmlWriter: ...
    @overload
    def Create(output: Stream, settings: XmlWriterSettings) -> XmlWriter: ...
    @overload
    def Create(output: XmlWriter, settings: XmlWriterSettings) -> XmlWriter: ...
    @overload
    def Create(output: StringBuilder, settings: XmlWriterSettings) -> XmlWriter: ...
    @overload
    def Create(output: TextWriter, settings: XmlWriterSettings) -> XmlWriter: ...
    @overload
    def Create(outputFileName: str, settings: XmlWriterSettings) -> XmlWriter: ...
    def Dispose(self) -> None: ...
    def DisposeAsync(self) -> ValueTask: ...
    def Flush(self) -> None: ...
    def FlushAsync(self) -> Task: ...
    @property
    def Settings(self) -> XmlWriterSettings: ...
    @property
    def WriteState(self) -> WriteState: ...
    @property
    def XmlLang(self) -> str: ...
    @property
    def XmlSpace(self) -> XmlSpace: ...
    def LookupPrefix(self, ns: str) -> str: ...
    def WriteAttributes(self, reader: XmlReader, defattr: bool) -> None: ...
    def WriteAttributesAsync(self, reader: XmlReader, defattr: bool) -> Task: ...
    @overload
    def WriteAttributeString(self, localName: str, value: str) -> None: ...
    @overload
    def WriteAttributeString(self, localName: str, ns: str, value: str) -> None: ...
    @overload
    def WriteAttributeString(self, prefix: str, localName: str, ns: str, value: str) -> None: ...
    def WriteAttributeStringAsync(self, prefix: str, localName: str, ns: str, value: str) -> Task: ...
    def WriteBase64(self, buffer: Set(Byte), index: int, count: int) -> None: ...
    def WriteBase64Async(self, buffer: Set(Byte), index: int, count: int) -> Task: ...
    def WriteBinHex(self, buffer: Set(Byte), index: int, count: int) -> None: ...
    def WriteBinHexAsync(self, buffer: Set(Byte), index: int, count: int) -> Task: ...
    def WriteCData(self, text: str) -> None: ...
    def WriteCDataAsync(self, text: str) -> Task: ...
    def WriteCharEntity(self, ch: Char) -> None: ...
    def WriteCharEntityAsync(self, ch: Char) -> Task: ...
    def WriteChars(self, buffer: Set(Char), index: int, count: int) -> None: ...
    def WriteCharsAsync(self, buffer: Set(Char), index: int, count: int) -> Task: ...
    def WriteComment(self, text: str) -> None: ...
    def WriteCommentAsync(self, text: str) -> Task: ...
    def WriteDocType(self, name: str, pubid: str, sysid: str, subset: str) -> None: ...
    def WriteDocTypeAsync(self, name: str, pubid: str, sysid: str, subset: str) -> Task: ...
    @overload
    def WriteElementString(self, localName: str, value: str) -> None: ...
    @overload
    def WriteElementString(self, localName: str, ns: str, value: str) -> None: ...
    @overload
    def WriteElementString(self, prefix: str, localName: str, ns: str, value: str) -> None: ...
    def WriteElementStringAsync(self, prefix: str, localName: str, ns: str, value: str) -> Task: ...
    def WriteEndAttribute(self) -> None: ...
    def WriteEndDocument(self) -> None: ...
    def WriteEndDocumentAsync(self) -> Task: ...
    def WriteEndElement(self) -> None: ...
    def WriteEndElementAsync(self) -> Task: ...
    def WriteEntityRef(self, name: str) -> None: ...
    def WriteEntityRefAsync(self, name: str) -> Task: ...
    def WriteFullEndElement(self) -> None: ...
    def WriteFullEndElementAsync(self) -> Task: ...
    def WriteName(self, name: str) -> None: ...
    def WriteNameAsync(self, name: str) -> Task: ...
    def WriteNmToken(self, name: str) -> None: ...
    def WriteNmTokenAsync(self, name: str) -> Task: ...
    @overload
    def WriteNode(self, navigator: XPathNavigator, defattr: bool) -> None: ...
    @overload
    def WriteNode(self, reader: XmlReader, defattr: bool) -> None: ...
    @overload
    def WriteNodeAsync(self, navigator: XPathNavigator, defattr: bool) -> Task: ...
    @overload
    def WriteNodeAsync(self, reader: XmlReader, defattr: bool) -> Task: ...
    def WriteProcessingInstruction(self, name: str, text: str) -> None: ...
    def WriteProcessingInstructionAsync(self, name: str, text: str) -> Task: ...
    def WriteQualifiedName(self, localName: str, ns: str) -> None: ...
    def WriteQualifiedNameAsync(self, localName: str, ns: str) -> Task: ...
    @overload
    def WriteRaw(self, data: str) -> None: ...
    @overload
    def WriteRaw(self, buffer: Set(Char), index: int, count: int) -> None: ...
    @overload
    def WriteRawAsync(self, data: str) -> Task: ...
    @overload
    def WriteRawAsync(self, buffer: Set(Char), index: int, count: int) -> Task: ...
    @overload
    def WriteStartAttribute(self, localName: str) -> None: ...
    @overload
    def WriteStartAttribute(self, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartAttribute(self, prefix: str, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartDocument(self) -> None: ...
    @overload
    def WriteStartDocument(self, standalone: bool) -> None: ...
    @overload
    def WriteStartDocumentAsync(self) -> Task: ...
    @overload
    def WriteStartDocumentAsync(self, standalone: bool) -> Task: ...
    @overload
    def WriteStartElement(self, localName: str) -> None: ...
    @overload
    def WriteStartElement(self, localName: str, ns: str) -> None: ...
    @overload
    def WriteStartElement(self, prefix: str, localName: str, ns: str) -> None: ...
    def WriteStartElementAsync(self, prefix: str, localName: str, ns: str) -> Task: ...
    def WriteString(self, text: str) -> None: ...
    def WriteStringAsync(self, text: str) -> Task: ...
    def WriteSurrogateCharEntity(self, lowChar: Char, highChar: Char) -> None: ...
    def WriteSurrogateCharEntityAsync(self, lowChar: Char, highChar: Char) -> Task: ...
    @overload
    def WriteValue(self, value: Int64) -> None: ...
    @overload
    def WriteValue(self, value: str) -> None: ...
    @overload
    def WriteValue(self, value: bool) -> None: ...
    @overload
    def WriteValue(self, value: int) -> None: ...
    @overload
    def WriteValue(self, value: Decimal) -> None: ...
    @overload
    def WriteValue(self, value: DateTimeOffset) -> None: ...
    @overload
    def WriteValue(self, value: float) -> None: ...
    @overload
    def WriteValue(self, value: Single) -> None: ...
    @overload
    def WriteValue(self, value: Object) -> None: ...
    @overload
    def WriteValue(self, value: DateTime) -> None: ...
    def WriteWhitespace(self, ws: str) -> None: ...
    def WriteWhitespaceAsync(self, ws: str) -> Task: ...


class XmlWriterSettings(Object):
    def __init__(self): ...
    def Clone(self) -> XmlWriterSettings: ...
    @property
    def Async(self) -> bool: ...
    @property
    def CheckCharacters(self) -> bool: ...
    @property
    def CloseOutput(self) -> bool: ...
    @property
    def ConformanceLevel(self) -> ConformanceLevel: ...
    @property
    def DoNotEscapeUriAttributes(self) -> bool: ...
    @property
    def Encoding(self) -> Encoding: ...
    @property
    def Indent(self) -> bool: ...
    @property
    def IndentChars(self) -> str: ...
    @property
    def NamespaceHandling(self) -> NamespaceHandling: ...
    @property
    def NewLineChars(self) -> str: ...
    @property
    def NewLineHandling(self) -> NewLineHandling: ...
    @property
    def NewLineOnAttributes(self) -> bool: ...
    @property
    def OmitXmlDeclaration(self) -> bool: ...
    @property
    def OutputMethod(self) -> XmlOutputMethod: ...
    @property
    def WriteEndDocumentOnClose(self) -> bool: ...
    def Reset(self) -> None: ...
    @Async.setter
    def Async(self, value: bool) -> None: ...
    @CheckCharacters.setter
    def CheckCharacters(self, value: bool) -> None: ...
    @CloseOutput.setter
    def CloseOutput(self, value: bool) -> None: ...
    @ConformanceLevel.setter
    def ConformanceLevel(self, value: ConformanceLevel) -> None: ...
    @DoNotEscapeUriAttributes.setter
    def DoNotEscapeUriAttributes(self, value: bool) -> None: ...
    @Encoding.setter
    def Encoding(self, value: Encoding) -> None: ...
    @Indent.setter
    def Indent(self, value: bool) -> None: ...
    @IndentChars.setter
    def IndentChars(self, value: str) -> None: ...
    @NamespaceHandling.setter
    def NamespaceHandling(self, value: NamespaceHandling) -> None: ...
    @NewLineChars.setter
    def NewLineChars(self, value: str) -> None: ...
    @NewLineHandling.setter
    def NewLineHandling(self, value: NewLineHandling) -> None: ...
    @NewLineOnAttributes.setter
    def NewLineOnAttributes(self, value: bool) -> None: ...
    @OmitXmlDeclaration.setter
    def OmitXmlDeclaration(self, value: bool) -> None: ...
    @WriteEndDocumentOnClose.setter
    def WriteEndDocumentOnClose(self, value: bool) -> None: ...
